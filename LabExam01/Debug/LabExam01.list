
LabExam01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a838  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000744  0800a9e8  0800a9e8  0001a9e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b12c  0800b12c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b12c  0800b12c  0001b12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b134  0800b134  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b134  0800b134  0001b134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b138  0800b138  0001b138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b13c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          000002fc  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004e0  200004e0  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019c5d  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036a2  00000000  00000000  00039e71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001468  00000000  00000000  0003d518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001308  00000000  00000000  0003e980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028199  00000000  00000000  0003fc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ab06  00000000  00000000  00067e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed204  00000000  00000000  00082927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016fb2b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a78  00000000  00000000  0016fb80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a9d0 	.word	0x0800a9d0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	0800a9d0 	.word	0x0800a9d0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001012:	463b      	mov	r3, r7
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800101e:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001020:	4a21      	ldr	r2, [pc, #132]	; (80010a8 <MX_ADC1_Init+0x9c>)
 8001022:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001026:	2200      	movs	r2, #0
 8001028:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800102a:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <MX_ADC1_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001038:	2201      	movs	r2, #1
 800103a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <MX_ADC1_Init+0x98>)
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001046:	2200      	movs	r2, #0
 8001048:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_ADC1_Init+0x98>)
 800104c:	4a17      	ldr	r2, [pc, #92]	; (80010ac <MX_ADC1_Init+0xa0>)
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001058:	2201      	movs	r2, #1
 800105a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_ADC1_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800106a:	480e      	ldr	r0, [pc, #56]	; (80010a4 <MX_ADC1_Init+0x98>)
 800106c:	f002 f87e 	bl	800316c <HAL_ADC_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001076:	f000 fe1d 	bl	8001cb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800107a:	230d      	movs	r3, #13
 800107c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800107e:	2301      	movs	r3, #1
 8001080:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <MX_ADC1_Init+0x98>)
 800108c:	f002 fa1c 	bl	80034c8 <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001096:	f000 fe0d 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000224 	.word	0x20000224
 80010a8:	40012000 	.word	0x40012000
 80010ac:	0f000001 	.word	0x0f000001

080010b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a17      	ldr	r2, [pc, #92]	; (800112c <HAL_ADC_MspInit+0x7c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d127      	bne.n	8001122 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <HAL_ADC_MspInit+0x80>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a15      	ldr	r2, [pc, #84]	; (8001130 <HAL_ADC_MspInit+0x80>)
 80010dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <HAL_ADC_MspInit+0x80>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_ADC_MspInit+0x80>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <HAL_ADC_MspInit+0x80>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_ADC_MspInit+0x80>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800110a:	2308      	movs	r3, #8
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110e:	2303      	movs	r3, #3
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <HAL_ADC_MspInit+0x84>)
 800111e:	f002 fce7 	bl	8003af0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40012000 	.word	0x40012000
 8001130:	40023800 	.word	0x40023800
 8001134:	40020800 	.word	0x40020800

08001138 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08c      	sub	sp, #48	; 0x30
 800113c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
 8001152:	4b73      	ldr	r3, [pc, #460]	; (8001320 <MX_GPIO_Init+0x1e8>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a72      	ldr	r2, [pc, #456]	; (8001320 <MX_GPIO_Init+0x1e8>)
 8001158:	f043 0320 	orr.w	r3, r3, #32
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b70      	ldr	r3, [pc, #448]	; (8001320 <MX_GPIO_Init+0x1e8>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0320 	and.w	r3, r3, #32
 8001166:	61bb      	str	r3, [r7, #24]
 8001168:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	4b6c      	ldr	r3, [pc, #432]	; (8001320 <MX_GPIO_Init+0x1e8>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a6b      	ldr	r2, [pc, #428]	; (8001320 <MX_GPIO_Init+0x1e8>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b69      	ldr	r3, [pc, #420]	; (8001320 <MX_GPIO_Init+0x1e8>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	4b65      	ldr	r3, [pc, #404]	; (8001320 <MX_GPIO_Init+0x1e8>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a64      	ldr	r2, [pc, #400]	; (8001320 <MX_GPIO_Init+0x1e8>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b62      	ldr	r3, [pc, #392]	; (8001320 <MX_GPIO_Init+0x1e8>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b5e      	ldr	r3, [pc, #376]	; (8001320 <MX_GPIO_Init+0x1e8>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a5d      	ldr	r2, [pc, #372]	; (8001320 <MX_GPIO_Init+0x1e8>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b5b      	ldr	r3, [pc, #364]	; (8001320 <MX_GPIO_Init+0x1e8>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	4b57      	ldr	r3, [pc, #348]	; (8001320 <MX_GPIO_Init+0x1e8>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a56      	ldr	r2, [pc, #344]	; (8001320 <MX_GPIO_Init+0x1e8>)
 80011c8:	f043 0310 	orr.w	r3, r3, #16
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b54      	ldr	r3, [pc, #336]	; (8001320 <MX_GPIO_Init+0x1e8>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0310 	and.w	r3, r3, #16
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	4b50      	ldr	r3, [pc, #320]	; (8001320 <MX_GPIO_Init+0x1e8>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a4f      	ldr	r2, [pc, #316]	; (8001320 <MX_GPIO_Init+0x1e8>)
 80011e4:	f043 0308 	orr.w	r3, r3, #8
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b4d      	ldr	r3, [pc, #308]	; (8001320 <MX_GPIO_Init+0x1e8>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]
 80011fa:	4b49      	ldr	r3, [pc, #292]	; (8001320 <MX_GPIO_Init+0x1e8>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a48      	ldr	r2, [pc, #288]	; (8001320 <MX_GPIO_Init+0x1e8>)
 8001200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b46      	ldr	r3, [pc, #280]	; (8001320 <MX_GPIO_Init+0x1e8>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, T_CLK_Pin|T_CS_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	210e      	movs	r1, #14
 8001216:	4843      	ldr	r0, [pc, #268]	; (8001324 <MX_GPIO_Init+0x1ec>)
 8001218:	f002 fe16 	bl	8003e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800121c:	2200      	movs	r2, #0
 800121e:	f44f 41ff 	mov.w	r1, #32640	; 0x7f80
 8001222:	4841      	ldr	r0, [pc, #260]	; (8001328 <MX_GPIO_Init+0x1f0>)
 8001224:	f002 fe10 	bl	8003e48 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|RST_Pin|DC_Pin, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800122e:	483f      	ldr	r0, [pc, #252]	; (800132c <MX_GPIO_Init+0x1f4>)
 8001230:	f002 fe0a 	bl	8003e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800123a:	483d      	ldr	r0, [pc, #244]	; (8001330 <MX_GPIO_Init+0x1f8>)
 800123c:	f002 fe04 	bl	8003e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin|T_MOSI_Pin;
 8001240:	230e      	movs	r3, #14
 8001242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001244:	2301      	movs	r3, #1
 8001246:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	4619      	mov	r1, r3
 8001256:	4833      	ldr	r0, [pc, #204]	; (8001324 <MX_GPIO_Init+0x1ec>)
 8001258:	f002 fc4a 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = T_MISO_Pin|T_IRQ_Pin;
 800125c:	2330      	movs	r3, #48	; 0x30
 800125e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	482d      	ldr	r0, [pc, #180]	; (8001324 <MX_GPIO_Init+0x1ec>)
 8001270:	f002 fc3e 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001274:	2301      	movs	r3, #1
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	4829      	ldr	r0, [pc, #164]	; (800132c <MX_GPIO_Init+0x1f4>)
 8001288:	f002 fc32 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800128c:	f44f 43ff 	mov.w	r3, #32640	; 0x7f80
 8001290:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001292:	2301      	movs	r3, #1
 8001294:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4619      	mov	r1, r3
 80012a4:	4820      	ldr	r0, [pc, #128]	; (8001328 <MX_GPIO_Init+0x1f0>)
 80012a6:	f002 fc23 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14;
 80012aa:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 80012ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4619      	mov	r1, r3
 80012be:	481d      	ldr	r0, [pc, #116]	; (8001334 <MX_GPIO_Init+0x1fc>)
 80012c0:	f002 fc16 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012c4:	2304      	movs	r3, #4
 80012c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012d0:	f107 031c 	add.w	r3, r7, #28
 80012d4:	4619      	mov	r1, r3
 80012d6:	4816      	ldr	r0, [pc, #88]	; (8001330 <MX_GPIO_Init+0x1f8>)
 80012d8:	f002 fc0a 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin|DC_Pin;
 80012dc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80012e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	4619      	mov	r1, r3
 80012f4:	480d      	ldr	r0, [pc, #52]	; (800132c <MX_GPIO_Init+0x1f4>)
 80012f6:	f002 fbfb 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80012fa:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	4807      	ldr	r0, [pc, #28]	; (8001330 <MX_GPIO_Init+0x1f8>)
 8001314:	f002 fbec 	bl	8003af0 <HAL_GPIO_Init>

}
 8001318:	bf00      	nop
 800131a:	3730      	adds	r7, #48	; 0x30
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	40021400 	.word	0x40021400
 8001328:	40021000 	.word	0x40021000
 800132c:	40020000 	.word	0x40020000
 8001330:	40021800 	.word	0x40021800
 8001334:	40020c00 	.word	0x40020c00

08001338 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <MX_I2C1_Init+0x74>)
 800133e:	4a1c      	ldr	r2, [pc, #112]	; (80013b0 <MX_I2C1_Init+0x78>)
 8001340:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_I2C1_Init+0x74>)
 8001344:	4a1b      	ldr	r2, [pc, #108]	; (80013b4 <MX_I2C1_Init+0x7c>)
 8001346:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <MX_I2C1_Init+0x74>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_I2C1_Init+0x74>)
 8001350:	2200      	movs	r2, #0
 8001352:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <MX_I2C1_Init+0x74>)
 8001356:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800135a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <MX_I2C1_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_I2C1_Init+0x74>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <MX_I2C1_Init+0x74>)
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800136e:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_I2C1_Init+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001374:	480d      	ldr	r0, [pc, #52]	; (80013ac <MX_I2C1_Init+0x74>)
 8001376:	f002 fd81 	bl	8003e7c <HAL_I2C_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001380:	f000 fc98 	bl	8001cb4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001384:	2100      	movs	r1, #0
 8001386:	4809      	ldr	r0, [pc, #36]	; (80013ac <MX_I2C1_Init+0x74>)
 8001388:	f002 febc 	bl	8004104 <HAL_I2CEx_ConfigAnalogFilter>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001392:	f000 fc8f 	bl	8001cb4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001396:	2100      	movs	r1, #0
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <MX_I2C1_Init+0x74>)
 800139a:	f002 feef 	bl	800417c <HAL_I2CEx_ConfigDigitalFilter>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80013a4:	f000 fc86 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200002c0 	.word	0x200002c0
 80013b0:	40005400 	.word	0x40005400
 80013b4:	000186a0 	.word	0x000186a0

080013b8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <MX_I2C3_Init+0x74>)
 80013be:	4a1c      	ldr	r2, [pc, #112]	; (8001430 <MX_I2C3_Init+0x78>)
 80013c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_I2C3_Init+0x74>)
 80013c4:	4a1b      	ldr	r2, [pc, #108]	; (8001434 <MX_I2C3_Init+0x7c>)
 80013c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <MX_I2C3_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <MX_I2C3_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d4:	4b15      	ldr	r3, [pc, #84]	; (800142c <MX_I2C3_Init+0x74>)
 80013d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013da:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013dc:	4b13      	ldr	r3, [pc, #76]	; (800142c <MX_I2C3_Init+0x74>)
 80013de:	2200      	movs	r2, #0
 80013e0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <MX_I2C3_Init+0x74>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013e8:	4b10      	ldr	r3, [pc, #64]	; (800142c <MX_I2C3_Init+0x74>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_I2C3_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80013f4:	480d      	ldr	r0, [pc, #52]	; (800142c <MX_I2C3_Init+0x74>)
 80013f6:	f002 fd41 	bl	8003e7c <HAL_I2C_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001400:	f000 fc58 	bl	8001cb4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001404:	2100      	movs	r1, #0
 8001406:	4809      	ldr	r0, [pc, #36]	; (800142c <MX_I2C3_Init+0x74>)
 8001408:	f002 fe7c 	bl	8004104 <HAL_I2CEx_ConfigAnalogFilter>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001412:	f000 fc4f 	bl	8001cb4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001416:	2100      	movs	r1, #0
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <MX_I2C3_Init+0x74>)
 800141a:	f002 feaf 	bl	800417c <HAL_I2CEx_ConfigDigitalFilter>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001424:	f000 fc46 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2000026c 	.word	0x2000026c
 8001430:	40005c00 	.word	0x40005c00
 8001434:	000186a0 	.word	0x000186a0

08001438 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08c      	sub	sp, #48	; 0x30
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a42      	ldr	r2, [pc, #264]	; (8001560 <HAL_I2C_MspInit+0x128>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d12d      	bne.n	80014b6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
 800145e:	4b41      	ldr	r3, [pc, #260]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a40      	ldr	r2, [pc, #256]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b3e      	ldr	r3, [pc, #248]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	61bb      	str	r3, [r7, #24]
 8001474:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001476:	f44f 7340 	mov.w	r3, #768	; 0x300
 800147a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800147c:	2312      	movs	r3, #18
 800147e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001488:	2304      	movs	r3, #4
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	4619      	mov	r1, r3
 8001492:	4835      	ldr	r0, [pc, #212]	; (8001568 <HAL_I2C_MspInit+0x130>)
 8001494:	f002 fb2c 	bl	8003af0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	4b31      	ldr	r3, [pc, #196]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	4a30      	ldr	r2, [pc, #192]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 80014a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014a6:	6413      	str	r3, [r2, #64]	; 0x40
 80014a8:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80014b4:	e050      	b.n	8001558 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a2c      	ldr	r2, [pc, #176]	; (800156c <HAL_I2C_MspInit+0x134>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d14b      	bne.n	8001558 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	4b27      	ldr	r3, [pc, #156]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	4a26      	ldr	r2, [pc, #152]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	6313      	str	r3, [r2, #48]	; 0x30
 80014d0:	4b24      	ldr	r3, [pc, #144]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	4b20      	ldr	r3, [pc, #128]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	4a1f      	ldr	r2, [pc, #124]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	6313      	str	r3, [r2, #48]	; 0x30
 80014ec:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fe:	2312      	movs	r3, #18
 8001500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800150a:	2304      	movs	r3, #4
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	4619      	mov	r1, r3
 8001514:	4816      	ldr	r0, [pc, #88]	; (8001570 <HAL_I2C_MspInit+0x138>)
 8001516:	f002 faeb 	bl	8003af0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800151a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800151e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001520:	2312      	movs	r3, #18
 8001522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800152c:	2304      	movs	r3, #4
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	480f      	ldr	r0, [pc, #60]	; (8001574 <HAL_I2C_MspInit+0x13c>)
 8001538:	f002 fada 	bl	8003af0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	4a07      	ldr	r2, [pc, #28]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 8001546:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800154a:	6413      	str	r3, [r2, #64]	; 0x40
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
}
 8001558:	bf00      	nop
 800155a:	3730      	adds	r7, #48	; 0x30
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40005400 	.word	0x40005400
 8001564:	40023800 	.word	0x40023800
 8001568:	40020400 	.word	0x40020400
 800156c:	40005c00 	.word	0x40005c00
 8001570:	40020800 	.word	0x40020800
 8001574:	40020000 	.word	0x40020000

08001578 <ADC_PWM.10667>:

  HAL_ADC_Start(&hadc1);

  GPIOE -> BSRR = 0x00007F80 << num;	// off all

  void ADC_PWM(){
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af02      	add	r7, sp, #8
 800157e:	f8c7 c004 	str.w	ip, [r7, #4]

  		//ADC
  		  while(HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK){} // skip
 8001582:	bf00      	nop
 8001584:	2164      	movs	r1, #100	; 0x64
 8001586:	48b2      	ldr	r0, [pc, #712]	; (8001850 <ADC_PWM.10667+0x2d8>)
 8001588:	f001 ff06 	bl	8003398 <HAL_ADC_PollForConversion>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f8      	bne.n	8001584 <ADC_PWM.10667+0xc>
  		  adc_val = HAL_ADC_GetValue(&hadc1); // get value of adc
 8001592:	48af      	ldr	r0, [pc, #700]	; (8001850 <ADC_PWM.10667+0x2d8>)
 8001594:	f001 ff8b 	bl	80034ae <HAL_ADC_GetValue>
 8001598:	4603      	mov	r3, r0
 800159a:	4aae      	ldr	r2, [pc, #696]	; (8001854 <ADC_PWM.10667+0x2dc>)
 800159c:	6013      	str	r3, [r2, #0]
  		  //displayHEX(adc_val);

	    //PWM
  		  dutyCycleScreen = ((adc_val/4095.0) * 0.55) + 0.25; // for 25% - 80%  // 0.8 is interval
 800159e:	4bad      	ldr	r3, [pc, #692]	; (8001854 <ADC_PWM.10667+0x2dc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ffbe 	bl	8000524 <__aeabi_ui2d>
 80015a8:	a397      	add	r3, pc, #604	; (adr r3, 8001808 <ADC_PWM.10667+0x290>)
 80015aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ae:	f7ff f95d 	bl	800086c <__aeabi_ddiv>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	a395      	add	r3, pc, #596	; (adr r3, 8001810 <ADC_PWM.10667+0x298>)
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	f7ff f82a 	bl	8000618 <__aeabi_dmul>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	4ba1      	ldr	r3, [pc, #644]	; (8001858 <ADC_PWM.10667+0x2e0>)
 80015d2:	f7fe fe6b 	bl	80002ac <__adddf3>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f7ff fb13 	bl	8000c08 <__aeabi_d2f>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a9d      	ldr	r2, [pc, #628]	; (800185c <ADC_PWM.10667+0x2e4>)
 80015e6:	6013      	str	r3, [r2, #0]
  		  //No. 2
  		  htim2.Instance -> CCR1 = (100-1) * dutyCycleScreen;
 80015e8:	4b9c      	ldr	r3, [pc, #624]	; (800185c <ADC_PWM.10667+0x2e4>)
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8001860 <ADC_PWM.10667+0x2e8>
 80015f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f6:	4b9b      	ldr	r3, [pc, #620]	; (8001864 <ADC_PWM.10667+0x2ec>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015fe:	ee17 2a90 	vmov	r2, s15
 8001602:	635a      	str	r2, [r3, #52]	; 0x34

  		 float displayNum = 0;
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
//  		  }else if(dutyCycleScreen >= 0.70 && dutyCycleScreen <= 0.80){
//  			ILI9341_Draw_Text(Temp_Buffer_text,  320/2-20, 240/2-20, CYAN, 2, WHITE);
//  		  }


  		if(dutyCycleScreen >= 0.25 && dutyCycleScreen < 0.30){
 800160a:	4b94      	ldr	r3, [pc, #592]	; (800185c <ADC_PWM.10667+0x2e4>)
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001614:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161c:	db10      	blt.n	8001640 <ADC_PWM.10667+0xc8>
 800161e:	4b8f      	ldr	r3, [pc, #572]	; (800185c <ADC_PWM.10667+0x2e4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe ffa0 	bl	8000568 <__aeabi_f2d>
 8001628:	a37b      	add	r3, pc, #492	; (adr r3, 8001818 <ADC_PWM.10667+0x2a0>)
 800162a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162e:	f7ff fa65 	bl	8000afc <__aeabi_dcmplt>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <ADC_PWM.10667+0xc8>
  			displayNum = 0.25;
 8001638:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	e165      	b.n	800190c <ADC_PWM.10667+0x394>
  		}else if(dutyCycleScreen >= 0.30 && dutyCycleScreen < 0.35){
 8001640:	4b86      	ldr	r3, [pc, #536]	; (800185c <ADC_PWM.10667+0x2e4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe ff8f 	bl	8000568 <__aeabi_f2d>
 800164a:	a373      	add	r3, pc, #460	; (adr r3, 8001818 <ADC_PWM.10667+0x2a0>)
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f7ff fa68 	bl	8000b24 <__aeabi_dcmpge>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00f      	beq.n	800167a <ADC_PWM.10667+0x102>
 800165a:	4b80      	ldr	r3, [pc, #512]	; (800185c <ADC_PWM.10667+0x2e4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe ff82 	bl	8000568 <__aeabi_f2d>
 8001664:	a36e      	add	r3, pc, #440	; (adr r3, 8001820 <ADC_PWM.10667+0x2a8>)
 8001666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166a:	f7ff fa47 	bl	8000afc <__aeabi_dcmplt>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <ADC_PWM.10667+0x102>
  			displayNum = 0.30;
 8001674:	4b7c      	ldr	r3, [pc, #496]	; (8001868 <ADC_PWM.10667+0x2f0>)
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	e148      	b.n	800190c <ADC_PWM.10667+0x394>
  		}else if(dutyCycleScreen >= 0.35 && dutyCycleScreen < 0.40){
 800167a:	4b78      	ldr	r3, [pc, #480]	; (800185c <ADC_PWM.10667+0x2e4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff72 	bl	8000568 <__aeabi_f2d>
 8001684:	a366      	add	r3, pc, #408	; (adr r3, 8001820 <ADC_PWM.10667+0x2a8>)
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	f7ff fa4b 	bl	8000b24 <__aeabi_dcmpge>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00f      	beq.n	80016b4 <ADC_PWM.10667+0x13c>
 8001694:	4b71      	ldr	r3, [pc, #452]	; (800185c <ADC_PWM.10667+0x2e4>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe ff65 	bl	8000568 <__aeabi_f2d>
 800169e:	a362      	add	r3, pc, #392	; (adr r3, 8001828 <ADC_PWM.10667+0x2b0>)
 80016a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a4:	f7ff fa2a 	bl	8000afc <__aeabi_dcmplt>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <ADC_PWM.10667+0x13c>
  			displayNum = 0.35;
 80016ae:	4b6f      	ldr	r3, [pc, #444]	; (800186c <ADC_PWM.10667+0x2f4>)
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	e12b      	b.n	800190c <ADC_PWM.10667+0x394>
  		}else if(dutyCycleScreen >= 0.40 && dutyCycleScreen < 0.45){
 80016b4:	4b69      	ldr	r3, [pc, #420]	; (800185c <ADC_PWM.10667+0x2e4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff55 	bl	8000568 <__aeabi_f2d>
 80016be:	a35a      	add	r3, pc, #360	; (adr r3, 8001828 <ADC_PWM.10667+0x2b0>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7ff fa2e 	bl	8000b24 <__aeabi_dcmpge>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00f      	beq.n	80016ee <ADC_PWM.10667+0x176>
 80016ce:	4b63      	ldr	r3, [pc, #396]	; (800185c <ADC_PWM.10667+0x2e4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe ff48 	bl	8000568 <__aeabi_f2d>
 80016d8:	a355      	add	r3, pc, #340	; (adr r3, 8001830 <ADC_PWM.10667+0x2b8>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	f7ff fa0d 	bl	8000afc <__aeabi_dcmplt>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d002      	beq.n	80016ee <ADC_PWM.10667+0x176>
  			displayNum = 0.40;
 80016e8:	4b61      	ldr	r3, [pc, #388]	; (8001870 <ADC_PWM.10667+0x2f8>)
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	e10e      	b.n	800190c <ADC_PWM.10667+0x394>
 		}else if(dutyCycleScreen >= 0.45 && dutyCycleScreen < 0.50){
 80016ee:	4b5b      	ldr	r3, [pc, #364]	; (800185c <ADC_PWM.10667+0x2e4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe ff38 	bl	8000568 <__aeabi_f2d>
 80016f8:	a34d      	add	r3, pc, #308	; (adr r3, 8001830 <ADC_PWM.10667+0x2b8>)
 80016fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fe:	f7ff fa11 	bl	8000b24 <__aeabi_dcmpge>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00c      	beq.n	8001722 <ADC_PWM.10667+0x1aa>
 8001708:	4b54      	ldr	r3, [pc, #336]	; (800185c <ADC_PWM.10667+0x2e4>)
 800170a:	edd3 7a00 	vldr	s15, [r3]
 800170e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001712:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171a:	d502      	bpl.n	8001722 <ADC_PWM.10667+0x1aa>
 			displayNum = 0.45;
 800171c:	4b55      	ldr	r3, [pc, #340]	; (8001874 <ADC_PWM.10667+0x2fc>)
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	e0f4      	b.n	800190c <ADC_PWM.10667+0x394>
 		}else if(dutyCycleScreen >= 0.50 && dutyCycleScreen < 0.55){
 8001722:	4b4e      	ldr	r3, [pc, #312]	; (800185c <ADC_PWM.10667+0x2e4>)
 8001724:	edd3 7a00 	vldr	s15, [r3]
 8001728:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800172c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001734:	db10      	blt.n	8001758 <ADC_PWM.10667+0x1e0>
 8001736:	4b49      	ldr	r3, [pc, #292]	; (800185c <ADC_PWM.10667+0x2e4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe ff14 	bl	8000568 <__aeabi_f2d>
 8001740:	a333      	add	r3, pc, #204	; (adr r3, 8001810 <ADC_PWM.10667+0x298>)
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	f7ff f9d9 	bl	8000afc <__aeabi_dcmplt>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <ADC_PWM.10667+0x1e0>
 			displayNum = 0.50;
 8001750:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	e0d9      	b.n	800190c <ADC_PWM.10667+0x394>
 		}else if(dutyCycleScreen >= 0.55 && dutyCycleScreen < 0.60){
 8001758:	4b40      	ldr	r3, [pc, #256]	; (800185c <ADC_PWM.10667+0x2e4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f7fe ff03 	bl	8000568 <__aeabi_f2d>
 8001762:	a32b      	add	r3, pc, #172	; (adr r3, 8001810 <ADC_PWM.10667+0x298>)
 8001764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001768:	f7ff f9dc 	bl	8000b24 <__aeabi_dcmpge>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00f      	beq.n	8001792 <ADC_PWM.10667+0x21a>
 8001772:	4b3a      	ldr	r3, [pc, #232]	; (800185c <ADC_PWM.10667+0x2e4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fef6 	bl	8000568 <__aeabi_f2d>
 800177c:	a32e      	add	r3, pc, #184	; (adr r3, 8001838 <ADC_PWM.10667+0x2c0>)
 800177e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001782:	f7ff f9bb 	bl	8000afc <__aeabi_dcmplt>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d002      	beq.n	8001792 <ADC_PWM.10667+0x21a>
 			displayNum = 0.55;
 800178c:	4b3a      	ldr	r3, [pc, #232]	; (8001878 <ADC_PWM.10667+0x300>)
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	e0bc      	b.n	800190c <ADC_PWM.10667+0x394>
 		}else if(dutyCycleScreen >= 0.60 && dutyCycleScreen < 0.65){
 8001792:	4b32      	ldr	r3, [pc, #200]	; (800185c <ADC_PWM.10667+0x2e4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fee6 	bl	8000568 <__aeabi_f2d>
 800179c:	a326      	add	r3, pc, #152	; (adr r3, 8001838 <ADC_PWM.10667+0x2c0>)
 800179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a2:	f7ff f9bf 	bl	8000b24 <__aeabi_dcmpge>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00f      	beq.n	80017cc <ADC_PWM.10667+0x254>
 80017ac:	4b2b      	ldr	r3, [pc, #172]	; (800185c <ADC_PWM.10667+0x2e4>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fed9 	bl	8000568 <__aeabi_f2d>
 80017b6:	a322      	add	r3, pc, #136	; (adr r3, 8001840 <ADC_PWM.10667+0x2c8>)
 80017b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017bc:	f7ff f99e 	bl	8000afc <__aeabi_dcmplt>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d002      	beq.n	80017cc <ADC_PWM.10667+0x254>
 			displayNum = 0.60;
 80017c6:	4b2d      	ldr	r3, [pc, #180]	; (800187c <ADC_PWM.10667+0x304>)
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	e09f      	b.n	800190c <ADC_PWM.10667+0x394>
 		}else if(dutyCycleScreen >= 0.65 && dutyCycleScreen < 0.68){
 80017cc:	4b23      	ldr	r3, [pc, #140]	; (800185c <ADC_PWM.10667+0x2e4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe fec9 	bl	8000568 <__aeabi_f2d>
 80017d6:	a31a      	add	r3, pc, #104	; (adr r3, 8001840 <ADC_PWM.10667+0x2c8>)
 80017d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017dc:	f7ff f9a2 	bl	8000b24 <__aeabi_dcmpge>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d04e      	beq.n	8001884 <ADC_PWM.10667+0x30c>
 80017e6:	4b1d      	ldr	r3, [pc, #116]	; (800185c <ADC_PWM.10667+0x2e4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7fe febc 	bl	8000568 <__aeabi_f2d>
 80017f0:	a315      	add	r3, pc, #84	; (adr r3, 8001848 <ADC_PWM.10667+0x2d0>)
 80017f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f6:	f7ff f981 	bl	8000afc <__aeabi_dcmplt>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d041      	beq.n	8001884 <ADC_PWM.10667+0x30c>
 			displayNum = 0.65;
 8001800:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <ADC_PWM.10667+0x308>)
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	e082      	b.n	800190c <ADC_PWM.10667+0x394>
 8001806:	bf00      	nop
 8001808:	00000000 	.word	0x00000000
 800180c:	40affe00 	.word	0x40affe00
 8001810:	9999999a 	.word	0x9999999a
 8001814:	3fe19999 	.word	0x3fe19999
 8001818:	33333333 	.word	0x33333333
 800181c:	3fd33333 	.word	0x3fd33333
 8001820:	66666666 	.word	0x66666666
 8001824:	3fd66666 	.word	0x3fd66666
 8001828:	9999999a 	.word	0x9999999a
 800182c:	3fd99999 	.word	0x3fd99999
 8001830:	cccccccd 	.word	0xcccccccd
 8001834:	3fdccccc 	.word	0x3fdccccc
 8001838:	33333333 	.word	0x33333333
 800183c:	3fe33333 	.word	0x3fe33333
 8001840:	cccccccd 	.word	0xcccccccd
 8001844:	3fe4cccc 	.word	0x3fe4cccc
 8001848:	5c28f5c3 	.word	0x5c28f5c3
 800184c:	3fe5c28f 	.word	0x3fe5c28f
 8001850:	20000224 	.word	0x20000224
 8001854:	20000214 	.word	0x20000214
 8001858:	3fd00000 	.word	0x3fd00000
 800185c:	20000210 	.word	0x20000210
 8001860:	42c60000 	.word	0x42c60000
 8001864:	20000440 	.word	0x20000440
 8001868:	3e99999a 	.word	0x3e99999a
 800186c:	3eb33333 	.word	0x3eb33333
 8001870:	3ecccccd 	.word	0x3ecccccd
 8001874:	3ee66666 	.word	0x3ee66666
 8001878:	3f0ccccd 	.word	0x3f0ccccd
 800187c:	3f19999a 	.word	0x3f19999a
 8001880:	3f266666 	.word	0x3f266666
 		}else if(dutyCycleScreen >= 0.68 && dutyCycleScreen < 0.75){
 8001884:	4bac      	ldr	r3, [pc, #688]	; (8001b38 <ADC_PWM.10667+0x5c0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fe6d 	bl	8000568 <__aeabi_f2d>
 800188e:	a3a2      	add	r3, pc, #648	; (adr r3, 8001b18 <ADC_PWM.10667+0x5a0>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	f7ff f946 	bl	8000b24 <__aeabi_dcmpge>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00c      	beq.n	80018b8 <ADC_PWM.10667+0x340>
 800189e:	4ba6      	ldr	r3, [pc, #664]	; (8001b38 <ADC_PWM.10667+0x5c0>)
 80018a0:	edd3 7a00 	vldr	s15, [r3]
 80018a4:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 80018a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b0:	d502      	bpl.n	80018b8 <ADC_PWM.10667+0x340>
 			displayNum = 0.70;
 80018b2:	4ba2      	ldr	r3, [pc, #648]	; (8001b3c <ADC_PWM.10667+0x5c4>)
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	e029      	b.n	800190c <ADC_PWM.10667+0x394>
 		}else if(dutyCycleScreen >= 0.75 && dutyCycleScreen < 0.79){
 80018b8:	4b9f      	ldr	r3, [pc, #636]	; (8001b38 <ADC_PWM.10667+0x5c0>)
 80018ba:	edd3 7a00 	vldr	s15, [r3]
 80018be:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 80018c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ca:	db10      	blt.n	80018ee <ADC_PWM.10667+0x376>
 80018cc:	4b9a      	ldr	r3, [pc, #616]	; (8001b38 <ADC_PWM.10667+0x5c0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe fe49 	bl	8000568 <__aeabi_f2d>
 80018d6:	a392      	add	r3, pc, #584	; (adr r3, 8001b20 <ADC_PWM.10667+0x5a8>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7ff f90e 	bl	8000afc <__aeabi_dcmplt>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <ADC_PWM.10667+0x376>
 			displayNum = 0.75;
 80018e6:	f04f 537d 	mov.w	r3, #1061158912	; 0x3f400000
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	e00e      	b.n	800190c <ADC_PWM.10667+0x394>
 		}else if(dutyCycleScreen >= 0.79){
 80018ee:	4b92      	ldr	r3, [pc, #584]	; (8001b38 <ADC_PWM.10667+0x5c0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fe38 	bl	8000568 <__aeabi_f2d>
 80018f8:	a389      	add	r3, pc, #548	; (adr r3, 8001b20 <ADC_PWM.10667+0x5a8>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7ff f911 	bl	8000b24 <__aeabi_dcmpge>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <ADC_PWM.10667+0x394>
 			displayNum = 0.80;
 8001908:	4b8d      	ldr	r3, [pc, #564]	; (8001b40 <ADC_PWM.10667+0x5c8>)
 800190a:	60fb      	str	r3, [r7, #12]
 		}

  		if(prevDuty != displayNum){
 800190c:	4b8d      	ldr	r3, [pc, #564]	; (8001b44 <ADC_PWM.10667+0x5cc>)
 800190e:	edd3 7a00 	vldr	s15, [r3]
 8001912:	ed97 7a03 	vldr	s14, [r7, #12]
 8001916:	eeb4 7a67 	vcmp.f32	s14, s15
 800191a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191e:	d005      	beq.n	800192c <ADC_PWM.10667+0x3b4>
  			changeState = true;
 8001920:	4b89      	ldr	r3, [pc, #548]	; (8001b48 <ADC_PWM.10667+0x5d0>)
 8001922:	2201      	movs	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]
  			prevDuty = displayNum;
 8001926:	4a87      	ldr	r2, [pc, #540]	; (8001b44 <ADC_PWM.10667+0x5cc>)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6013      	str	r3, [r2, #0]
  		}

  		sprintf(Temp_Buffer_text, "%d", (uint8_t) (displayNum*100));
 800192c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001930:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001b4c <ADC_PWM.10667+0x5d4>
 8001934:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800193c:	edc7 7a00 	vstr	s15, [r7]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	461a      	mov	r2, r3
 8001946:	4982      	ldr	r1, [pc, #520]	; (8001b50 <ADC_PWM.10667+0x5d8>)
 8001948:	4882      	ldr	r0, [pc, #520]	; (8001b54 <ADC_PWM.10667+0x5dc>)
 800194a:	f005 fa9d 	bl	8006e88 <siprintf>
  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800194e:	2001      	movs	r0, #1
 8001950:	f001 f83a 	bl	80029c8 <ILI9341_Set_Rotation>
  		  if(displayNum >= 0.25 && displayNum <= 0.45){
 8001954:	edd7 7a03 	vldr	s15, [r7, #12]
 8001958:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800195c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001964:	db29      	blt.n	80019ba <ADC_PWM.10667+0x442>
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f7fe fdfe 	bl	8000568 <__aeabi_f2d>
 800196c:	a36e      	add	r3, pc, #440	; (adr r3, 8001b28 <ADC_PWM.10667+0x5b0>)
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001972:	f7ff f8cd 	bl	8000b10 <__aeabi_dcmple>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d01e      	beq.n	80019ba <ADC_PWM.10667+0x442>
  			  if(changeState == true){
 800197c:	4b72      	ldr	r3, [pc, #456]	; (8001b48 <ADC_PWM.10667+0x5d0>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 80ac 	beq.w	8001ade <ADC_PWM.10667+0x566>
  	  			ILI9341_Draw_Filled_Rectangle_Coord(0, 0, 320, 240, GREEN);
 8001986:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	23f0      	movs	r3, #240	; 0xf0
 800198e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001992:	2100      	movs	r1, #0
 8001994:	2000      	movs	r0, #0
 8001996:	f000 fe1c 	bl	80025d2 <ILI9341_Draw_Filled_Rectangle_Coord>
  	  			ILI9341_Draw_Text(Temp_Buffer_text, 320/2-20, 240/2-20, YELLOW, 2, GREEN);
 800199a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	2302      	movs	r3, #2
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80019a8:	2264      	movs	r2, #100	; 0x64
 80019aa:	218c      	movs	r1, #140	; 0x8c
 80019ac:	4869      	ldr	r0, [pc, #420]	; (8001b54 <ADC_PWM.10667+0x5dc>)
 80019ae:	f000 ff0b 	bl	80027c8 <ILI9341_Draw_Text>
  	  			changeState = false;
 80019b2:	4b65      	ldr	r3, [pc, #404]	; (8001b48 <ADC_PWM.10667+0x5d0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
  			  if(changeState == true){
 80019b8:	e091      	b.n	8001ade <ADC_PWM.10667+0x566>
  			  }

  		  }else if(displayNum >= 0.50 && displayNum < 0.68){
 80019ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80019be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ca:	db27      	blt.n	8001a1c <ADC_PWM.10667+0x4a4>
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f7fe fdcb 	bl	8000568 <__aeabi_f2d>
 80019d2:	a351      	add	r3, pc, #324	; (adr r3, 8001b18 <ADC_PWM.10667+0x5a0>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	f7ff f890 	bl	8000afc <__aeabi_dcmplt>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d01c      	beq.n	8001a1c <ADC_PWM.10667+0x4a4>
  			  if(changeState == true){
 80019e2:	4b59      	ldr	r3, [pc, #356]	; (8001b48 <ADC_PWM.10667+0x5d0>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d079      	beq.n	8001ade <ADC_PWM.10667+0x566>
  	  			ILI9341_Draw_Filled_Rectangle_Coord(0, 0, 320, 240, YELLOW);
 80019ea:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	23f0      	movs	r3, #240	; 0xf0
 80019f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80019f6:	2100      	movs	r1, #0
 80019f8:	2000      	movs	r0, #0
 80019fa:	f000 fdea 	bl	80025d2 <ILI9341_Draw_Filled_Rectangle_Coord>
  	  			ILI9341_Draw_Text(Temp_Buffer_text,  320/2-20, 240/2-20, BLUE, 2, YELLOW);
 80019fe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	2302      	movs	r3, #2
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	231f      	movs	r3, #31
 8001a0a:	2264      	movs	r2, #100	; 0x64
 8001a0c:	218c      	movs	r1, #140	; 0x8c
 8001a0e:	4851      	ldr	r0, [pc, #324]	; (8001b54 <ADC_PWM.10667+0x5dc>)
 8001a10:	f000 feda 	bl	80027c8 <ILI9341_Draw_Text>
  				changeState = false;
 8001a14:	4b4c      	ldr	r3, [pc, #304]	; (8001b48 <ADC_PWM.10667+0x5d0>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
  			  if(changeState == true){
 8001a1a:	e060      	b.n	8001ade <ADC_PWM.10667+0x566>
  			  }

  		  }else if(displayNum >= 0.68 && displayNum <= 0.99){
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f7fe fda3 	bl	8000568 <__aeabi_f2d>
 8001a22:	a33d      	add	r3, pc, #244	; (adr r3, 8001b18 <ADC_PWM.10667+0x5a0>)
 8001a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a28:	f7ff f87c 	bl	8000b24 <__aeabi_dcmpge>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d055      	beq.n	8001ade <ADC_PWM.10667+0x566>
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f7fe fd98 	bl	8000568 <__aeabi_f2d>
 8001a38:	a33d      	add	r3, pc, #244	; (adr r3, 8001b30 <ADC_PWM.10667+0x5b8>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	f7ff f867 	bl	8000b10 <__aeabi_dcmple>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d04a      	beq.n	8001ade <ADC_PWM.10667+0x566>
  			ILI9341_Draw_Filled_Rectangle_Coord(0, 0, 320, 240, RED);
 8001a48:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	23f0      	movs	r3, #240	; 0xf0
 8001a50:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a54:	2100      	movs	r1, #0
 8001a56:	2000      	movs	r0, #0
 8001a58:	f000 fdbb 	bl	80025d2 <ILI9341_Draw_Filled_Rectangle_Coord>
  			if(sec % 2 == 0){
 8001a5c:	4b3e      	ldr	r3, [pc, #248]	; (8001b58 <ADC_PWM.10667+0x5e0>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d11d      	bne.n	8001aa4 <ADC_PWM.10667+0x52c>
  				sprintf(Temp_Buffer_text, "%d", (uint8_t) (displayNum*100));
 8001a68:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a6c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001b4c <ADC_PWM.10667+0x5d4>
 8001a70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a78:	edc7 7a00 	vstr	s15, [r7]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	461a      	mov	r2, r3
 8001a82:	4933      	ldr	r1, [pc, #204]	; (8001b50 <ADC_PWM.10667+0x5d8>)
 8001a84:	4833      	ldr	r0, [pc, #204]	; (8001b54 <ADC_PWM.10667+0x5dc>)
 8001a86:	f005 f9ff 	bl	8006e88 <siprintf>
  				ILI9341_Draw_Text(Temp_Buffer_text,  320/2-20, 240/2-20, CYAN, 2, RED);
 8001a8a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	2302      	movs	r3, #2
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001a98:	2264      	movs	r2, #100	; 0x64
 8001a9a:	218c      	movs	r1, #140	; 0x8c
 8001a9c:	482d      	ldr	r0, [pc, #180]	; (8001b54 <ADC_PWM.10667+0x5dc>)
 8001a9e:	f000 fe93 	bl	80027c8 <ILI9341_Draw_Text>
 8001aa2:	e01c      	b.n	8001ade <ADC_PWM.10667+0x566>
  			}else{
  				sprintf(Temp_Buffer_text, "  ", (uint8_t) (displayNum*100));
 8001aa4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001aa8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001b4c <ADC_PWM.10667+0x5d4>
 8001aac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ab4:	edc7 7a00 	vstr	s15, [r7]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	461a      	mov	r2, r3
 8001abe:	4927      	ldr	r1, [pc, #156]	; (8001b5c <ADC_PWM.10667+0x5e4>)
 8001ac0:	4824      	ldr	r0, [pc, #144]	; (8001b54 <ADC_PWM.10667+0x5dc>)
 8001ac2:	f005 f9e1 	bl	8006e88 <siprintf>
  	  			ILI9341_Draw_Text(Temp_Buffer_text,  320/2-20, 240/2-20, CYAN, 2, RED);
 8001ac6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	2302      	movs	r3, #2
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001ad4:	2264      	movs	r2, #100	; 0x64
 8001ad6:	218c      	movs	r1, #140	; 0x8c
 8001ad8:	481e      	ldr	r0, [pc, #120]	; (8001b54 <ADC_PWM.10667+0x5dc>)
 8001ada:	f000 fe75 	bl	80027c8 <ILI9341_Draw_Text>
  			}
  		  }

  		  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001ade:	2100      	movs	r1, #0
 8001ae0:	481f      	ldr	r0, [pc, #124]	; (8001b60 <ADC_PWM.10667+0x5e8>)
 8001ae2:	f003 fb2b 	bl	800513c <HAL_TIM_PWM_Start>
//				  }
//				  break;
//
//		  }

  		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	481e      	ldr	r0, [pc, #120]	; (8001b64 <ADC_PWM.10667+0x5ec>)
 8001aea:	f003 fb27 	bl	800513c <HAL_TIM_PWM_Start>
  		  htim3.Instance -> CCR1 = (1000-1) * dutyCycleScreen;
 8001aee:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <ADC_PWM.10667+0x5c0>)
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001b68 <ADC_PWM.10667+0x5f0>
 8001af8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001afc:	4b18      	ldr	r3, [pc, #96]	; (8001b60 <ADC_PWM.10667+0x5e8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b04:	ee17 2a90 	vmov	r2, s15
 8001b08:	635a      	str	r2, [r3, #52]	; 0x34
	  	  	 HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  			 HAL_Delay(1000);
  		  	 // HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);

  		   */
  	}
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	f3af 8000 	nop.w
 8001b18:	5c28f5c3 	.word	0x5c28f5c3
 8001b1c:	3fe5c28f 	.word	0x3fe5c28f
 8001b20:	147ae148 	.word	0x147ae148
 8001b24:	3fe947ae 	.word	0x3fe947ae
 8001b28:	cccccccd 	.word	0xcccccccd
 8001b2c:	3fdccccc 	.word	0x3fdccccc
 8001b30:	7ae147ae 	.word	0x7ae147ae
 8001b34:	3fefae14 	.word	0x3fefae14
 8001b38:	20000210 	.word	0x20000210
 8001b3c:	3f333333 	.word	0x3f333333
 8001b40:	3f4ccccd 	.word	0x3f4ccccd
 8001b44:	20000204 	.word	0x20000204
 8001b48:	20000200 	.word	0x20000200
 8001b4c:	42c80000 	.word	0x42c80000
 8001b50:	0800aa18 	.word	0x0800aa18
 8001b54:	20000314 	.word	0x20000314
 8001b58:	2000020c 	.word	0x2000020c
 8001b5c:	0800aa1c 	.word	0x0800aa1c
 8001b60:	200003b0 	.word	0x200003b0
 8001b64:	20000440 	.word	0x20000440
 8001b68:	4479c000 	.word	0x4479c000

08001b6c <main>:
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
int main(void)
 8001b72:	f107 0310 	add.w	r3, r7, #16
 8001b76:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8001b78:	f001 fa62 	bl	8003040 <HAL_Init>
  SystemClock_Config();
 8001b7c:	f000 f82e 	bl	8001bdc <SystemClock_Config>
  MX_TIM1_Init();
 8001b80:	f000 fa7c 	bl	800207c <MX_TIM1_Init>
  MX_GPIO_Init();
 8001b84:	f7ff fad8 	bl	8001138 <MX_GPIO_Init>
  MX_RNG_Init();
 8001b88:	f000 f89a 	bl	8001cc0 <MX_RNG_Init>
  MX_SPI3_Init();
 8001b8c:	f000 f8ce 	bl	8001d2c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001b90:	f000 fc84 	bl	800249c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001b94:	f7ff fbd0 	bl	8001338 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001b98:	f7ff fa38 	bl	800100c <MX_ADC1_Init>
  MX_TIM2_Init();
 8001b9c:	f000 fac0 	bl	8002120 <MX_TIM2_Init>
  MX_I2C3_Init();
 8001ba0:	f7ff fc0a 	bl	80013b8 <MX_I2C3_Init>
  MX_TIM3_Init();
 8001ba4:	f000 fb16 	bl	80021d4 <MX_TIM3_Init>
  ILI9341_Init();//initial driver setup to drive ili9341
 8001ba8:	f000 ff6c 	bl	8002a84 <ILI9341_Init>
  HAL_ADC_Start(&hadc1);
 8001bac:	4808      	ldr	r0, [pc, #32]	; (8001bd0 <main+0x64>)
 8001bae:	f001 fb21 	bl	80031f4 <HAL_ADC_Start>
  GPIOE -> BSRR = 0x00007F80 << num;	// off all
 8001bb2:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <main+0x68>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	f44f 43ff 	mov.w	r3, #32640	; 0x7f80
 8001bbc:	fa03 f202 	lsl.w	r2, r3, r2
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <main+0x6c>)
 8001bc2:	619a      	str	r2, [r3, #24]
//
//	//Start While Touch
//	while(1){
//
//		// update or read value
		ADC_PWM();
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	469c      	mov	ip, r3
 8001bc8:	f7ff fcd6 	bl	8001578 <ADC_PWM.10667>
 8001bcc:	e7fa      	b.n	8001bc4 <main+0x58>
 8001bce:	bf00      	nop
 8001bd0:	20000224 	.word	0x20000224
 8001bd4:	20000208 	.word	0x20000208
 8001bd8:	40021000 	.word	0x40021000

08001bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b094      	sub	sp, #80	; 0x50
 8001be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001be2:	f107 0320 	add.w	r3, r7, #32
 8001be6:	2230      	movs	r2, #48	; 0x30
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f004 fac4 	bl	8006178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf0:	f107 030c 	add.w	r3, r7, #12
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c00:	2300      	movs	r3, #0
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	4b29      	ldr	r3, [pc, #164]	; (8001cac <SystemClock_Config+0xd0>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	4a28      	ldr	r2, [pc, #160]	; (8001cac <SystemClock_Config+0xd0>)
 8001c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c10:	4b26      	ldr	r3, [pc, #152]	; (8001cac <SystemClock_Config+0xd0>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	607b      	str	r3, [r7, #4]
 8001c20:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <SystemClock_Config+0xd4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c28:	4a21      	ldr	r2, [pc, #132]	; (8001cb0 <SystemClock_Config+0xd4>)
 8001c2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <SystemClock_Config+0xd4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c38:	607b      	str	r3, [r7, #4]
 8001c3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c40:	2301      	movs	r3, #1
 8001c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c44:	2310      	movs	r3, #16
 8001c46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c50:	2308      	movs	r3, #8
 8001c52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001c54:	2378      	movs	r3, #120	; 0x78
 8001c56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001c5c:	2305      	movs	r3, #5
 8001c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c60:	f107 0320 	add.w	r3, r7, #32
 8001c64:	4618      	mov	r0, r3
 8001c66:	f002 fac9 	bl	80041fc <HAL_RCC_OscConfig>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c70:	f000 f820 	bl	8001cb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c74:	230f      	movs	r3, #15
 8001c76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	2103      	movs	r1, #3
 8001c92:	4618      	mov	r0, r3
 8001c94:	f002 fd2a 	bl	80046ec <HAL_RCC_ClockConfig>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001c9e:	f000 f809 	bl	8001cb4 <Error_Handler>
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	3750      	adds	r7, #80	; 0x50
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40007000 	.word	0x40007000

08001cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb8:	b672      	cpsid	i
}
 8001cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <Error_Handler+0x8>
	...

08001cc0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <MX_RNG_Init+0x20>)
 8001cc6:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <MX_RNG_Init+0x24>)
 8001cc8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001cca:	4805      	ldr	r0, [pc, #20]	; (8001ce0 <MX_RNG_Init+0x20>)
 8001ccc:	f002 fede 	bl	8004a8c <HAL_RNG_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001cd6:	f7ff ffed 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000348 	.word	0x20000348
 8001ce4:	50060800 	.word	0x50060800

08001ce8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0b      	ldr	r2, [pc, #44]	; (8001d24 <HAL_RNG_MspInit+0x3c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d10d      	bne.n	8001d16 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_RNG_MspInit+0x40>)
 8001d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d02:	4a09      	ldr	r2, [pc, #36]	; (8001d28 <HAL_RNG_MspInit+0x40>)
 8001d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d08:	6353      	str	r3, [r2, #52]	; 0x34
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <HAL_RNG_MspInit+0x40>)
 8001d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	50060800 	.word	0x50060800
 8001d28:	40023800 	.word	0x40023800

08001d2c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001d30:	4b17      	ldr	r3, [pc, #92]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d32:	4a18      	ldr	r2, [pc, #96]	; (8001d94 <MX_SPI3_Init+0x68>)
 8001d34:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d3c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001d3e:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d44:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d5c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d64:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d70:	4b07      	ldr	r3, [pc, #28]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d78:	220a      	movs	r2, #10
 8001d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d7c:	4804      	ldr	r0, [pc, #16]	; (8001d90 <MX_SPI3_Init+0x64>)
 8001d7e:	f002 feaf 	bl	8004ae0 <HAL_SPI_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001d88:	f7ff ff94 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000358 	.word	0x20000358
 8001d94:	40003c00 	.word	0x40003c00

08001d98 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	; 0x28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a19      	ldr	r2, [pc, #100]	; (8001e1c <HAL_SPI_MspInit+0x84>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d12c      	bne.n	8001e14 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <HAL_SPI_MspInit+0x88>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	4a17      	ldr	r2, [pc, #92]	; (8001e20 <HAL_SPI_MspInit+0x88>)
 8001dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <HAL_SPI_MspInit+0x88>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <HAL_SPI_MspInit+0x88>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a10      	ldr	r2, [pc, #64]	; (8001e20 <HAL_SPI_MspInit+0x88>)
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <HAL_SPI_MspInit+0x88>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001df2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e00:	2303      	movs	r3, #3
 8001e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e04:	2306      	movs	r3, #6
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4805      	ldr	r0, [pc, #20]	; (8001e24 <HAL_SPI_MspInit+0x8c>)
 8001e10:	f001 fe6e 	bl	8003af0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001e14:	bf00      	nop
 8001e16:	3728      	adds	r7, #40	; 0x28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40003c00 	.word	0x40003c00
 8001e20:	40023800 	.word	0x40023800
 8001e24:	40020800 	.word	0x40020800

08001e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	4b10      	ldr	r3, [pc, #64]	; (8001e74 <HAL_MspInit+0x4c>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	4a0f      	ldr	r2, [pc, #60]	; (8001e74 <HAL_MspInit+0x4c>)
 8001e38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <HAL_MspInit+0x4c>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e46:	607b      	str	r3, [r7, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	603b      	str	r3, [r7, #0]
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <HAL_MspInit+0x4c>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	4a08      	ldr	r2, [pc, #32]	; (8001e74 <HAL_MspInit+0x4c>)
 8001e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e58:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_MspInit+0x4c>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	603b      	str	r3, [r7, #0]
 8001e64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40023800 	.word	0x40023800

08001e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <NMI_Handler+0x4>

08001e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e82:	e7fe      	b.n	8001e82 <HardFault_Handler+0x4>

08001e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e88:	e7fe      	b.n	8001e88 <MemManage_Handler+0x4>

08001e8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8e:	e7fe      	b.n	8001e8e <BusFault_Handler+0x4>

08001e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <UsageFault_Handler+0x4>

08001e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec4:	f001 f90e 	bl	80030e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
	return 1;
 8001ed0:	2301      	movs	r3, #1
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <_kill>:

int _kill(int pid, int sig)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ee6:	f004 f91d 	bl	8006124 <__errno>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2216      	movs	r2, #22
 8001eee:	601a      	str	r2, [r3, #0]
	return -1;
 8001ef0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <_exit>:

void _exit (int status)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f04:	f04f 31ff 	mov.w	r1, #4294967295
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f7ff ffe7 	bl	8001edc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f0e:	e7fe      	b.n	8001f0e <_exit+0x12>

08001f10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	e00a      	b.n	8001f38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f22:	f3af 8000 	nop.w
 8001f26:	4601      	mov	r1, r0
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	60ba      	str	r2, [r7, #8]
 8001f2e:	b2ca      	uxtb	r2, r1
 8001f30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	3301      	adds	r3, #1
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	dbf0      	blt.n	8001f22 <_read+0x12>
	}

return len;
 8001f40:	687b      	ldr	r3, [r7, #4]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	e009      	b.n	8001f70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	60ba      	str	r2, [r7, #8]
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	dbf1      	blt.n	8001f5c <_write+0x12>
	}
	return len;
 8001f78:	687b      	ldr	r3, [r7, #4]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3718      	adds	r7, #24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <_close>:

int _close(int file)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
	return -1;
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001faa:	605a      	str	r2, [r3, #4]
	return 0;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <_isatty>:

int _isatty(int file)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
	return 1;
 8001fc2:	2301      	movs	r3, #1
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
	return 0;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ff4:	4a14      	ldr	r2, [pc, #80]	; (8002048 <_sbrk+0x5c>)
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <_sbrk+0x60>)
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <_sbrk+0x64>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <_sbrk+0x64>)
 800200a:	4a12      	ldr	r2, [pc, #72]	; (8002054 <_sbrk+0x68>)
 800200c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <_sbrk+0x64>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	429a      	cmp	r2, r3
 800201a:	d207      	bcs.n	800202c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800201c:	f004 f882 	bl	8006124 <__errno>
 8002020:	4603      	mov	r3, r0
 8002022:	220c      	movs	r2, #12
 8002024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002026:	f04f 33ff 	mov.w	r3, #4294967295
 800202a:	e009      	b.n	8002040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800202c:	4b08      	ldr	r3, [pc, #32]	; (8002050 <_sbrk+0x64>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002032:	4b07      	ldr	r3, [pc, #28]	; (8002050 <_sbrk+0x64>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	4a05      	ldr	r2, [pc, #20]	; (8002050 <_sbrk+0x64>)
 800203c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800203e:	68fb      	ldr	r3, [r7, #12]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20030000 	.word	0x20030000
 800204c:	00000400 	.word	0x00000400
 8002050:	20000218 	.word	0x20000218
 8002054:	200004e0 	.word	0x200004e0

08002058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <SystemInit+0x20>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002062:	4a05      	ldr	r2, [pc, #20]	; (8002078 <SystemInit+0x20>)
 8002064:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002082:	f107 0308 	add.w	r3, r7, #8
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002090:	463b      	mov	r3, r7
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002098:	4b1f      	ldr	r3, [pc, #124]	; (8002118 <MX_TIM1_Init+0x9c>)
 800209a:	4a20      	ldr	r2, [pc, #128]	; (800211c <MX_TIM1_Init+0xa0>)
 800209c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 800209e:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <MX_TIM1_Init+0x9c>)
 80020a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80020a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a6:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <MX_TIM1_Init+0x9c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 12-1;
 80020ac:	4b1a      	ldr	r3, [pc, #104]	; (8002118 <MX_TIM1_Init+0x9c>)
 80020ae:	220b      	movs	r2, #11
 80020b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80020b2:	4b19      	ldr	r3, [pc, #100]	; (8002118 <MX_TIM1_Init+0x9c>)
 80020b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020ba:	4b17      	ldr	r3, [pc, #92]	; (8002118 <MX_TIM1_Init+0x9c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c0:	4b15      	ldr	r3, [pc, #84]	; (8002118 <MX_TIM1_Init+0x9c>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020c6:	4814      	ldr	r0, [pc, #80]	; (8002118 <MX_TIM1_Init+0x9c>)
 80020c8:	f002 ff9a 	bl	8005000 <HAL_TIM_Base_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80020d2:	f7ff fdef 	bl	8001cb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020dc:	f107 0308 	add.w	r3, r7, #8
 80020e0:	4619      	mov	r1, r3
 80020e2:	480d      	ldr	r0, [pc, #52]	; (8002118 <MX_TIM1_Init+0x9c>)
 80020e4:	f003 f9b4 	bl	8005450 <HAL_TIM_ConfigClockSource>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80020ee:	f7ff fde1 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f2:	2300      	movs	r3, #0
 80020f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020fa:	463b      	mov	r3, r7
 80020fc:	4619      	mov	r1, r3
 80020fe:	4806      	ldr	r0, [pc, #24]	; (8002118 <MX_TIM1_Init+0x9c>)
 8002100:	f003 fd7e 	bl	8005c00 <HAL_TIMEx_MasterConfigSynchronization>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800210a:	f7ff fdd3 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800210e:	bf00      	nop
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	200003f8 	.word	0x200003f8
 800211c:	40010000 	.word	0x40010000

08002120 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002126:	f107 0320 	add.w	r3, r7, #32
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	609a      	str	r2, [r3, #8]
 800213a:	60da      	str	r2, [r3, #12]
 800213c:	611a      	str	r2, [r3, #16]
 800213e:	615a      	str	r2, [r3, #20]
 8002140:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002142:	4b23      	ldr	r3, [pc, #140]	; (80021d0 <MX_TIM2_Init+0xb0>)
 8002144:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002148:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60-1;
 800214a:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <MX_TIM2_Init+0xb0>)
 800214c:	223b      	movs	r2, #59	; 0x3b
 800214e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002150:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <MX_TIM2_Init+0xb0>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8002156:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <MX_TIM2_Init+0xb0>)
 8002158:	f240 32e7 	movw	r2, #999	; 0x3e7
 800215c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800215e:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <MX_TIM2_Init+0xb0>)
 8002160:	2200      	movs	r2, #0
 8002162:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002164:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <MX_TIM2_Init+0xb0>)
 8002166:	2200      	movs	r2, #0
 8002168:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800216a:	4819      	ldr	r0, [pc, #100]	; (80021d0 <MX_TIM2_Init+0xb0>)
 800216c:	f002 ff97 	bl	800509e <HAL_TIM_PWM_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002176:	f7ff fd9d 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800217a:	2300      	movs	r3, #0
 800217c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800217e:	2300      	movs	r3, #0
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002182:	f107 0320 	add.w	r3, r7, #32
 8002186:	4619      	mov	r1, r3
 8002188:	4811      	ldr	r0, [pc, #68]	; (80021d0 <MX_TIM2_Init+0xb0>)
 800218a:	f003 fd39 	bl	8005c00 <HAL_TIMEx_MasterConfigSynchronization>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002194:	f7ff fd8e 	bl	8001cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002198:	2360      	movs	r3, #96	; 0x60
 800219a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000-1;
 800219c:	f240 33e7 	movw	r3, #999	; 0x3e7
 80021a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	2200      	movs	r2, #0
 80021ae:	4619      	mov	r1, r3
 80021b0:	4807      	ldr	r0, [pc, #28]	; (80021d0 <MX_TIM2_Init+0xb0>)
 80021b2:	f003 f88b 	bl	80052cc <HAL_TIM_PWM_ConfigChannel>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80021bc:	f7ff fd7a 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021c0:	4803      	ldr	r0, [pc, #12]	; (80021d0 <MX_TIM2_Init+0xb0>)
 80021c2:	f000 f8ed 	bl	80023a0 <HAL_TIM_MspPostInit>

}
 80021c6:	bf00      	nop
 80021c8:	3728      	adds	r7, #40	; 0x28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000440 	.word	0x20000440

080021d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08e      	sub	sp, #56	; 0x38
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e8:	f107 0320 	add.w	r3, r7, #32
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021f2:	1d3b      	adds	r3, r7, #4
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
 8002200:	615a      	str	r2, [r3, #20]
 8002202:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002204:	4b38      	ldr	r3, [pc, #224]	; (80022e8 <MX_TIM3_Init+0x114>)
 8002206:	4a39      	ldr	r2, [pc, #228]	; (80022ec <MX_TIM3_Init+0x118>)
 8002208:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60-1;
 800220a:	4b37      	ldr	r3, [pc, #220]	; (80022e8 <MX_TIM3_Init+0x114>)
 800220c:	223b      	movs	r2, #59	; 0x3b
 800220e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002210:	4b35      	ldr	r3, [pc, #212]	; (80022e8 <MX_TIM3_Init+0x114>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002216:	4b34      	ldr	r3, [pc, #208]	; (80022e8 <MX_TIM3_Init+0x114>)
 8002218:	f240 32e7 	movw	r2, #999	; 0x3e7
 800221c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800221e:	4b32      	ldr	r3, [pc, #200]	; (80022e8 <MX_TIM3_Init+0x114>)
 8002220:	2200      	movs	r2, #0
 8002222:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002224:	4b30      	ldr	r3, [pc, #192]	; (80022e8 <MX_TIM3_Init+0x114>)
 8002226:	2200      	movs	r2, #0
 8002228:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800222a:	482f      	ldr	r0, [pc, #188]	; (80022e8 <MX_TIM3_Init+0x114>)
 800222c:	f002 fee8 	bl	8005000 <HAL_TIM_Base_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002236:	f7ff fd3d 	bl	8001cb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800223a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002240:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002244:	4619      	mov	r1, r3
 8002246:	4828      	ldr	r0, [pc, #160]	; (80022e8 <MX_TIM3_Init+0x114>)
 8002248:	f003 f902 	bl	8005450 <HAL_TIM_ConfigClockSource>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002252:	f7ff fd2f 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002256:	4824      	ldr	r0, [pc, #144]	; (80022e8 <MX_TIM3_Init+0x114>)
 8002258:	f002 ff21 	bl	800509e <HAL_TIM_PWM_Init>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002262:	f7ff fd27 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002266:	2300      	movs	r3, #0
 8002268:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800226a:	2300      	movs	r3, #0
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800226e:	f107 0320 	add.w	r3, r7, #32
 8002272:	4619      	mov	r1, r3
 8002274:	481c      	ldr	r0, [pc, #112]	; (80022e8 <MX_TIM3_Init+0x114>)
 8002276:	f003 fcc3 	bl	8005c00 <HAL_TIMEx_MasterConfigSynchronization>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002280:	f7ff fd18 	bl	8001cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002284:	2360      	movs	r3, #96	; 0x60
 8002286:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000-1;
 8002288:	f240 33e7 	movw	r3, #999	; 0x3e7
 800228c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002296:	1d3b      	adds	r3, r7, #4
 8002298:	2200      	movs	r2, #0
 800229a:	4619      	mov	r1, r3
 800229c:	4812      	ldr	r0, [pc, #72]	; (80022e8 <MX_TIM3_Init+0x114>)
 800229e:	f003 f815 	bl	80052cc <HAL_TIM_PWM_ConfigChannel>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80022a8:	f7ff fd04 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	2204      	movs	r2, #4
 80022b0:	4619      	mov	r1, r3
 80022b2:	480d      	ldr	r0, [pc, #52]	; (80022e8 <MX_TIM3_Init+0x114>)
 80022b4:	f003 f80a 	bl	80052cc <HAL_TIM_PWM_ConfigChannel>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80022be:	f7ff fcf9 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	2208      	movs	r2, #8
 80022c6:	4619      	mov	r1, r3
 80022c8:	4807      	ldr	r0, [pc, #28]	; (80022e8 <MX_TIM3_Init+0x114>)
 80022ca:	f002 ffff 	bl	80052cc <HAL_TIM_PWM_ConfigChannel>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80022d4:	f7ff fcee 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022d8:	4803      	ldr	r0, [pc, #12]	; (80022e8 <MX_TIM3_Init+0x114>)
 80022da:	f000 f861 	bl	80023a0 <HAL_TIM_MspPostInit>

}
 80022de:	bf00      	nop
 80022e0:	3738      	adds	r7, #56	; 0x38
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200003b0 	.word	0x200003b0
 80022ec:	40000400 	.word	0x40000400

080022f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a15      	ldr	r2, [pc, #84]	; (8002354 <HAL_TIM_Base_MspInit+0x64>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d10e      	bne.n	8002320 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	4b14      	ldr	r3, [pc, #80]	; (8002358 <HAL_TIM_Base_MspInit+0x68>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	4a13      	ldr	r2, [pc, #76]	; (8002358 <HAL_TIM_Base_MspInit+0x68>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6453      	str	r3, [r2, #68]	; 0x44
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <HAL_TIM_Base_MspInit+0x68>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800231e:	e012      	b.n	8002346 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM3)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a0d      	ldr	r2, [pc, #52]	; (800235c <HAL_TIM_Base_MspInit+0x6c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d10d      	bne.n	8002346 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <HAL_TIM_Base_MspInit+0x68>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a09      	ldr	r2, [pc, #36]	; (8002358 <HAL_TIM_Base_MspInit+0x68>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b07      	ldr	r3, [pc, #28]	; (8002358 <HAL_TIM_Base_MspInit+0x68>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	60bb      	str	r3, [r7, #8]
 8002344:	68bb      	ldr	r3, [r7, #8]
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40010000 	.word	0x40010000
 8002358:	40023800 	.word	0x40023800
 800235c:	40000400 	.word	0x40000400

08002360 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002370:	d10d      	bne.n	800238e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	4b09      	ldr	r3, [pc, #36]	; (800239c <HAL_TIM_PWM_MspInit+0x3c>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	4a08      	ldr	r2, [pc, #32]	; (800239c <HAL_TIM_PWM_MspInit+0x3c>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6413      	str	r3, [r2, #64]	; 0x40
 8002382:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_TIM_PWM_MspInit+0x3c>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800238e:	bf00      	nop
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800

080023a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	; 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c0:	d11e      	bne.n	8002400 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	4b31      	ldr	r3, [pc, #196]	; (800248c <HAL_TIM_MspPostInit+0xec>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	4a30      	ldr	r2, [pc, #192]	; (800248c <HAL_TIM_MspPostInit+0xec>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
 80023d2:	4b2e      	ldr	r3, [pc, #184]	; (800248c <HAL_TIM_MspPostInit+0xec>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80023de:	2320      	movs	r3, #32
 80023e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ea:	2300      	movs	r3, #0
 80023ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023ee:	2301      	movs	r3, #1
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f2:	f107 0314 	add.w	r3, r7, #20
 80023f6:	4619      	mov	r1, r3
 80023f8:	4825      	ldr	r0, [pc, #148]	; (8002490 <HAL_TIM_MspPostInit+0xf0>)
 80023fa:	f001 fb79 	bl	8003af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80023fe:	e040      	b.n	8002482 <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM3)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a23      	ldr	r2, [pc, #140]	; (8002494 <HAL_TIM_MspPostInit+0xf4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d13b      	bne.n	8002482 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	4b1f      	ldr	r3, [pc, #124]	; (800248c <HAL_TIM_MspPostInit+0xec>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a1e      	ldr	r2, [pc, #120]	; (800248c <HAL_TIM_MspPostInit+0xec>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b1c      	ldr	r3, [pc, #112]	; (800248c <HAL_TIM_MspPostInit+0xec>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	4b18      	ldr	r3, [pc, #96]	; (800248c <HAL_TIM_MspPostInit+0xec>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a17      	ldr	r2, [pc, #92]	; (800248c <HAL_TIM_MspPostInit+0xec>)
 8002430:	f043 0302 	orr.w	r3, r3, #2
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b15      	ldr	r3, [pc, #84]	; (800248c <HAL_TIM_MspPostInit+0xec>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002442:	23c0      	movs	r3, #192	; 0xc0
 8002444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002446:	2302      	movs	r3, #2
 8002448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244e:	2300      	movs	r3, #0
 8002450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002452:	2302      	movs	r3, #2
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	4619      	mov	r1, r3
 800245c:	480c      	ldr	r0, [pc, #48]	; (8002490 <HAL_TIM_MspPostInit+0xf0>)
 800245e:	f001 fb47 	bl	8003af0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002462:	2301      	movs	r3, #1
 8002464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002466:	2302      	movs	r3, #2
 8002468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246e:	2300      	movs	r3, #0
 8002470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002472:	2302      	movs	r3, #2
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	4619      	mov	r1, r3
 800247c:	4806      	ldr	r0, [pc, #24]	; (8002498 <HAL_TIM_MspPostInit+0xf8>)
 800247e:	f001 fb37 	bl	8003af0 <HAL_GPIO_Init>
}
 8002482:	bf00      	nop
 8002484:	3728      	adds	r7, #40	; 0x28
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800
 8002490:	40020000 	.word	0x40020000
 8002494:	40000400 	.word	0x40000400
 8002498:	40020400 	.word	0x40020400

0800249c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024a0:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <MX_USART1_UART_Init+0x4c>)
 80024a2:	4a12      	ldr	r2, [pc, #72]	; (80024ec <MX_USART1_UART_Init+0x50>)
 80024a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024a6:	4b10      	ldr	r3, [pc, #64]	; (80024e8 <MX_USART1_UART_Init+0x4c>)
 80024a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024ae:	4b0e      	ldr	r3, [pc, #56]	; (80024e8 <MX_USART1_UART_Init+0x4c>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <MX_USART1_UART_Init+0x4c>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024ba:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <MX_USART1_UART_Init+0x4c>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024c0:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <MX_USART1_UART_Init+0x4c>)
 80024c2:	220c      	movs	r2, #12
 80024c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024c6:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <MX_USART1_UART_Init+0x4c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024cc:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <MX_USART1_UART_Init+0x4c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024d2:	4805      	ldr	r0, [pc, #20]	; (80024e8 <MX_USART1_UART_Init+0x4c>)
 80024d4:	f003 fc10 	bl	8005cf8 <HAL_UART_Init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80024de:	f7ff fbe9 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000488 	.word	0x20000488
 80024ec:	40011000 	.word	0x40011000

080024f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	; 0x28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a19      	ldr	r2, [pc, #100]	; (8002574 <HAL_UART_MspInit+0x84>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d12c      	bne.n	800256c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	4b18      	ldr	r3, [pc, #96]	; (8002578 <HAL_UART_MspInit+0x88>)
 8002518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251a:	4a17      	ldr	r2, [pc, #92]	; (8002578 <HAL_UART_MspInit+0x88>)
 800251c:	f043 0310 	orr.w	r3, r3, #16
 8002520:	6453      	str	r3, [r2, #68]	; 0x44
 8002522:	4b15      	ldr	r3, [pc, #84]	; (8002578 <HAL_UART_MspInit+0x88>)
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	4b11      	ldr	r3, [pc, #68]	; (8002578 <HAL_UART_MspInit+0x88>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a10      	ldr	r2, [pc, #64]	; (8002578 <HAL_UART_MspInit+0x88>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <HAL_UART_MspInit+0x88>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800254a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800254e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002550:	2302      	movs	r3, #2
 8002552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002558:	2303      	movs	r3, #3
 800255a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800255c:	2307      	movs	r3, #7
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	4619      	mov	r1, r3
 8002566:	4805      	ldr	r0, [pc, #20]	; (800257c <HAL_UART_MspInit+0x8c>)
 8002568:	f001 fac2 	bl	8003af0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800256c:	bf00      	nop
 800256e:	3728      	adds	r7, #40	; 0x28
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40011000 	.word	0x40011000
 8002578:	40023800 	.word	0x40023800
 800257c:	40020000 	.word	0x40020000

08002580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025b8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002584:	480d      	ldr	r0, [pc, #52]	; (80025bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002586:	490e      	ldr	r1, [pc, #56]	; (80025c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002588:	4a0e      	ldr	r2, [pc, #56]	; (80025c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800258a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800258c:	e002      	b.n	8002594 <LoopCopyDataInit>

0800258e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800258e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002592:	3304      	adds	r3, #4

08002594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002598:	d3f9      	bcc.n	800258e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800259a:	4a0b      	ldr	r2, [pc, #44]	; (80025c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800259c:	4c0b      	ldr	r4, [pc, #44]	; (80025cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800259e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025a0:	e001      	b.n	80025a6 <LoopFillZerobss>

080025a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025a4:	3204      	adds	r2, #4

080025a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025a8:	d3fb      	bcc.n	80025a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025aa:	f7ff fd55 	bl	8002058 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ae:	f003 fdbf 	bl	8006130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025b2:	f7ff fadb 	bl	8001b6c <main>
  bx  lr    
 80025b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80025b8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80025bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025c0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80025c4:	0800b13c 	.word	0x0800b13c
  ldr r2, =_sbss
 80025c8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80025cc:	200004e0 	.word	0x200004e0

080025d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025d0:	e7fe      	b.n	80025d0 <ADC_IRQHandler>

080025d2 <ILI9341_Draw_Filled_Rectangle_Coord>:
	
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 80025d2:	b590      	push	{r4, r7, lr}
 80025d4:	b089      	sub	sp, #36	; 0x24
 80025d6:	af02      	add	r7, sp, #8
 80025d8:	4604      	mov	r4, r0
 80025da:	4608      	mov	r0, r1
 80025dc:	4611      	mov	r1, r2
 80025de:	461a      	mov	r2, r3
 80025e0:	4623      	mov	r3, r4
 80025e2:	80fb      	strh	r3, [r7, #6]
 80025e4:	4603      	mov	r3, r0
 80025e6:	80bb      	strh	r3, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	807b      	strh	r3, [r7, #2]
 80025ec:	4613      	mov	r3, r2
 80025ee:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 80025f0:	2300      	movs	r3, #0
 80025f2:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 80025f4:	2300      	movs	r3, #0
 80025f6:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 800260c:	887a      	ldrh	r2, [r7, #2]
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	da01      	bge.n	800261e <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 800261a:	2301      	movs	r3, #1
 800261c:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 8002622:	883a      	ldrh	r2, [r7, #0]
 8002624:	88bb      	ldrh	r3, [r7, #4]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	da01      	bge.n	8002634 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8002630:	2301      	movs	r3, #1
 8002632:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8002634:	7cfb      	ldrb	r3, [r7, #19]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 800263a:	887a      	ldrh	r2, [r7, #2]
 800263c:	88fb      	ldrh	r3, [r7, #6]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8002642:	88fb      	ldrh	r3, [r7, #6]
 8002644:	823b      	strh	r3, [r7, #16]
 8002646:	e005      	b.n	8002654 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8002648:	88fa      	ldrh	r2, [r7, #6]
 800264a:	887b      	ldrh	r3, [r7, #2]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8002650:	887b      	ldrh	r3, [r7, #2]
 8002652:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8002654:	7cbb      	ldrb	r3, [r7, #18]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d106      	bne.n	8002668 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 800265a:	883a      	ldrh	r2, [r7, #0]
 800265c:	88bb      	ldrh	r3, [r7, #4]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 8002662:	88bb      	ldrh	r3, [r7, #4]
 8002664:	81fb      	strh	r3, [r7, #14]
 8002666:	e005      	b.n	8002674 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8002668:	88ba      	ldrh	r2, [r7, #4]
 800266a:	883b      	ldrh	r3, [r7, #0]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 8002670:	883b      	ldrh	r3, [r7, #0]
 8002672:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 8002674:	8abc      	ldrh	r4, [r7, #20]
 8002676:	8afa      	ldrh	r2, [r7, #22]
 8002678:	89f9      	ldrh	r1, [r7, #14]
 800267a:	8a38      	ldrh	r0, [r7, #16]
 800267c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	4623      	mov	r3, r4
 8002682:	f000 fc81 	bl	8002f88 <ILI9341_Draw_Rectangle>
}
 8002686:	bf00      	nop
 8002688:	371c      	adds	r7, #28
 800268a:	46bd      	mov	sp, r7
 800268c:	bd90      	pop	{r4, r7, pc}
	...

08002690 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8002690:	b590      	push	{r4, r7, lr}
 8002692:	b089      	sub	sp, #36	; 0x24
 8002694:	af02      	add	r7, sp, #8
 8002696:	4604      	mov	r4, r0
 8002698:	4608      	mov	r0, r1
 800269a:	4611      	mov	r1, r2
 800269c:	461a      	mov	r2, r3
 800269e:	4623      	mov	r3, r4
 80026a0:	71fb      	strb	r3, [r7, #7]
 80026a2:	4603      	mov	r3, r0
 80026a4:	71bb      	strb	r3, [r7, #6]
 80026a6:	460b      	mov	r3, r1
 80026a8:	717b      	strb	r3, [r7, #5]
 80026aa:	4613      	mov	r3, r2
 80026ac:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
		uint8_t 	i,j;
		
		function_char = Character;
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80026b2:	7dfb      	ldrb	r3, [r7, #23]
 80026b4:	2b1f      	cmp	r3, #31
 80026b6:	d802      	bhi.n	80026be <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	71fb      	strb	r3, [r7, #7]
 80026bc:	e002      	b.n	80026c4 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80026be:	7dfb      	ldrb	r3, [r7, #23]
 80026c0:	3b20      	subs	r3, #32
 80026c2:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80026c4:	2300      	movs	r3, #0
 80026c6:	753b      	strb	r3, [r7, #20]
 80026c8:	e012      	b.n	80026f0 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 80026ca:	7dfa      	ldrb	r2, [r7, #23]
 80026cc:	7d38      	ldrb	r0, [r7, #20]
 80026ce:	7d39      	ldrb	r1, [r7, #20]
 80026d0:	4c3c      	ldr	r4, [pc, #240]	; (80027c4 <ILI9341_Draw_Char+0x134>)
 80026d2:	4613      	mov	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4423      	add	r3, r4
 80026dc:	4403      	add	r3, r0
 80026de:	781a      	ldrb	r2, [r3, #0]
 80026e0:	f107 0318 	add.w	r3, r7, #24
 80026e4:	440b      	add	r3, r1
 80026e6:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80026ea:	7d3b      	ldrb	r3, [r7, #20]
 80026ec:	3301      	adds	r3, #1
 80026ee:	753b      	strb	r3, [r7, #20]
 80026f0:	7d3b      	ldrb	r3, [r7, #20]
 80026f2:	2b05      	cmp	r3, #5
 80026f4:	d9e9      	bls.n	80026ca <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80026f6:	79bb      	ldrb	r3, [r7, #6]
 80026f8:	b298      	uxth	r0, r3
 80026fa:	797b      	ldrb	r3, [r7, #5]
 80026fc:	b299      	uxth	r1, r3
 80026fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002700:	461a      	mov	r2, r3
 8002702:	0052      	lsls	r2, r2, #1
 8002704:	4413      	add	r3, r2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	b29c      	uxth	r4, r3
 8002710:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	4623      	mov	r3, r4
 8002716:	f000 fc37 	bl	8002f88 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 800271a:	2300      	movs	r3, #0
 800271c:	757b      	strb	r3, [r7, #21]
 800271e:	e048      	b.n	80027b2 <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002720:	2300      	movs	r3, #0
 8002722:	75bb      	strb	r3, [r7, #22]
 8002724:	e03f      	b.n	80027a6 <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 8002726:	7d7b      	ldrb	r3, [r7, #21]
 8002728:	f107 0218 	add.w	r2, r7, #24
 800272c:	4413      	add	r3, r2
 800272e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002732:	461a      	mov	r2, r3
 8002734:	7dbb      	ldrb	r3, [r7, #22]
 8002736:	fa42 f303 	asr.w	r3, r2, r3
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d02e      	beq.n	80027a0 <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 8002742:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002744:	2b01      	cmp	r3, #1
 8002746:	d110      	bne.n	800276a <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8002748:	79bb      	ldrb	r3, [r7, #6]
 800274a:	b29a      	uxth	r2, r3
 800274c:	7d7b      	ldrb	r3, [r7, #21]
 800274e:	b29b      	uxth	r3, r3
 8002750:	4413      	add	r3, r2
 8002752:	b298      	uxth	r0, r3
 8002754:	797b      	ldrb	r3, [r7, #5]
 8002756:	b29a      	uxth	r2, r3
 8002758:	7dbb      	ldrb	r3, [r7, #22]
 800275a:	b29b      	uxth	r3, r3
 800275c:	4413      	add	r3, r2
 800275e:	b29b      	uxth	r3, r3
 8002760:	887a      	ldrh	r2, [r7, #2]
 8002762:	4619      	mov	r1, r3
 8002764:	f000 fb36 	bl	8002dd4 <ILI9341_Draw_Pixel>
 8002768:	e01a      	b.n	80027a0 <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 800276a:	79bb      	ldrb	r3, [r7, #6]
 800276c:	b29a      	uxth	r2, r3
 800276e:	7d7b      	ldrb	r3, [r7, #21]
 8002770:	b29b      	uxth	r3, r3
 8002772:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002774:	fb11 f303 	smulbb	r3, r1, r3
 8002778:	b29b      	uxth	r3, r3
 800277a:	4413      	add	r3, r2
 800277c:	b298      	uxth	r0, r3
 800277e:	797b      	ldrb	r3, [r7, #5]
 8002780:	b29a      	uxth	r2, r3
 8002782:	7dbb      	ldrb	r3, [r7, #22]
 8002784:	b29b      	uxth	r3, r3
 8002786:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002788:	fb11 f303 	smulbb	r3, r1, r3
 800278c:	b29b      	uxth	r3, r3
 800278e:	4413      	add	r3, r2
 8002790:	b299      	uxth	r1, r3
 8002792:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8002794:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002796:	887b      	ldrh	r3, [r7, #2]
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	4623      	mov	r3, r4
 800279c:	f000 fbf4 	bl	8002f88 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80027a0:	7dbb      	ldrb	r3, [r7, #22]
 80027a2:	3301      	adds	r3, #1
 80027a4:	75bb      	strb	r3, [r7, #22]
 80027a6:	7dbb      	ldrb	r3, [r7, #22]
 80027a8:	2b07      	cmp	r3, #7
 80027aa:	d9bc      	bls.n	8002726 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 80027ac:	7d7b      	ldrb	r3, [r7, #21]
 80027ae:	3301      	adds	r3, #1
 80027b0:	757b      	strb	r3, [r7, #21]
 80027b2:	7d7b      	ldrb	r3, [r7, #21]
 80027b4:	2b05      	cmp	r3, #5
 80027b6:	d9b3      	bls.n	8002720 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 80027b8:	bf00      	nop
 80027ba:	bf00      	nop
 80027bc:	371c      	adds	r7, #28
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd90      	pop	{r4, r7, pc}
 80027c2:	bf00      	nop
 80027c4:	0800aa38 	.word	0x0800aa38

080027c8 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af02      	add	r7, sp, #8
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	4608      	mov	r0, r1
 80027d2:	4611      	mov	r1, r2
 80027d4:	461a      	mov	r2, r3
 80027d6:	4603      	mov	r3, r0
 80027d8:	70fb      	strb	r3, [r7, #3]
 80027da:	460b      	mov	r3, r1
 80027dc:	70bb      	strb	r3, [r7, #2]
 80027de:	4613      	mov	r3, r2
 80027e0:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 80027e2:	e017      	b.n	8002814 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	607a      	str	r2, [r7, #4]
 80027ea:	7818      	ldrb	r0, [r3, #0]
 80027ec:	883c      	ldrh	r4, [r7, #0]
 80027ee:	78ba      	ldrb	r2, [r7, #2]
 80027f0:	78f9      	ldrb	r1, [r7, #3]
 80027f2:	8bbb      	ldrh	r3, [r7, #28]
 80027f4:	9301      	str	r3, [sp, #4]
 80027f6:	8b3b      	ldrh	r3, [r7, #24]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	4623      	mov	r3, r4
 80027fc:	f7ff ff48 	bl	8002690 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8002800:	8b3b      	ldrh	r3, [r7, #24]
 8002802:	b2db      	uxtb	r3, r3
 8002804:	461a      	mov	r2, r3
 8002806:	0052      	lsls	r2, r2, #1
 8002808:	4413      	add	r3, r2
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	b2da      	uxtb	r2, r3
 800280e:	78fb      	ldrb	r3, [r7, #3]
 8002810:	4413      	add	r3, r2
 8002812:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1e3      	bne.n	80027e4 <ILI9341_Draw_Text+0x1c>
    }
}
 800281c:	bf00      	nop
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bd90      	pop	{r4, r7, pc}
	...

08002828 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
MX_SPI3_Init();																							//SPI INIT
 800282c:	f7ff fa7e 	bl	8001d2c <MX_SPI3_Init>
MX_GPIO_Init();																							//GPIO INIT
 8002830:	f7fe fc82 	bl	8001138 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002834:	2200      	movs	r2, #0
 8002836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800283a:	4802      	ldr	r0, [pc, #8]	; (8002844 <ILI9341_SPI_Init+0x1c>)
 800283c:	f001 fb04 	bl	8003e48 <HAL_GPIO_WritePin>
}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40020000 	.word	0x40020000

08002848 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8002852:	1df9      	adds	r1, r7, #7
 8002854:	2301      	movs	r3, #1
 8002856:	2201      	movs	r2, #1
 8002858:	4803      	ldr	r0, [pc, #12]	; (8002868 <ILI9341_SPI_Send+0x20>)
 800285a:	f002 f9ca 	bl	8004bf2 <HAL_SPI_Transmit>
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000358 	.word	0x20000358

0800286c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002876:	2200      	movs	r2, #0
 8002878:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800287c:	480b      	ldr	r0, [pc, #44]	; (80028ac <ILI9341_Write_Command+0x40>)
 800287e:	f001 fae3 	bl	8003e48 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002882:	2200      	movs	r2, #0
 8002884:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002888:	4808      	ldr	r0, [pc, #32]	; (80028ac <ILI9341_Write_Command+0x40>)
 800288a:	f001 fadd 	bl	8003e48 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff ffd9 	bl	8002848 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002896:	2201      	movs	r2, #1
 8002898:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800289c:	4803      	ldr	r0, [pc, #12]	; (80028ac <ILI9341_Write_Command+0x40>)
 800289e:	f001 fad3 	bl	8003e48 <HAL_GPIO_WritePin>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40020000 	.word	0x40020000

080028b0 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80028ba:	2201      	movs	r2, #1
 80028bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80028c0:	480b      	ldr	r0, [pc, #44]	; (80028f0 <ILI9341_Write_Data+0x40>)
 80028c2:	f001 fac1 	bl	8003e48 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80028c6:	2200      	movs	r2, #0
 80028c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028cc:	4808      	ldr	r0, [pc, #32]	; (80028f0 <ILI9341_Write_Data+0x40>)
 80028ce:	f001 fabb 	bl	8003e48 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ffb7 	bl	8002848 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80028da:	2201      	movs	r2, #1
 80028dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028e0:	4803      	ldr	r0, [pc, #12]	; (80028f0 <ILI9341_Write_Data+0x40>)
 80028e2:	f001 fab1 	bl	8003e48 <HAL_GPIO_WritePin>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40020000 	.word	0x40020000

080028f4 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80028f4:	b590      	push	{r4, r7, lr}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4604      	mov	r4, r0
 80028fc:	4608      	mov	r0, r1
 80028fe:	4611      	mov	r1, r2
 8002900:	461a      	mov	r2, r3
 8002902:	4623      	mov	r3, r4
 8002904:	80fb      	strh	r3, [r7, #6]
 8002906:	4603      	mov	r3, r0
 8002908:	80bb      	strh	r3, [r7, #4]
 800290a:	460b      	mov	r3, r1
 800290c:	807b      	strh	r3, [r7, #2]
 800290e:	4613      	mov	r3, r2
 8002910:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8002912:	202a      	movs	r0, #42	; 0x2a
 8002914:	f7ff ffaa 	bl	800286c <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8002918:	88fb      	ldrh	r3, [r7, #6]
 800291a:	0a1b      	lsrs	r3, r3, #8
 800291c:	b29b      	uxth	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ffc5 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8002926:	88fb      	ldrh	r3, [r7, #6]
 8002928:	b2db      	uxtb	r3, r3
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff ffc0 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8002930:	887b      	ldrh	r3, [r7, #2]
 8002932:	0a1b      	lsrs	r3, r3, #8
 8002934:	b29b      	uxth	r3, r3
 8002936:	b2db      	uxtb	r3, r3
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ffb9 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800293e:	887b      	ldrh	r3, [r7, #2]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff ffb4 	bl	80028b0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8002948:	202b      	movs	r0, #43	; 0x2b
 800294a:	f7ff ff8f 	bl	800286c <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800294e:	88bb      	ldrh	r3, [r7, #4]
 8002950:	0a1b      	lsrs	r3, r3, #8
 8002952:	b29b      	uxth	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff ffaa 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 800295c:	88bb      	ldrh	r3, [r7, #4]
 800295e:	b2db      	uxtb	r3, r3
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ffa5 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8002966:	883b      	ldrh	r3, [r7, #0]
 8002968:	0a1b      	lsrs	r3, r3, #8
 800296a:	b29b      	uxth	r3, r3
 800296c:	b2db      	uxtb	r3, r3
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff ff9e 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8002974:	883b      	ldrh	r3, [r7, #0]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff99 	bl	80028b0 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800297e:	202c      	movs	r0, #44	; 0x2c
 8002980:	f7ff ff74 	bl	800286c <ILI9341_Write_Command>
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	bd90      	pop	{r4, r7, pc}

0800298c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002990:	2201      	movs	r2, #1
 8002992:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002996:	480b      	ldr	r0, [pc, #44]	; (80029c4 <ILI9341_Reset+0x38>)
 8002998:	f001 fa56 	bl	8003e48 <HAL_GPIO_WritePin>
HAL_Delay(200);
 800299c:	20c8      	movs	r0, #200	; 0xc8
 800299e:	f000 fbc1 	bl	8003124 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80029a2:	2200      	movs	r2, #0
 80029a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029a8:	4806      	ldr	r0, [pc, #24]	; (80029c4 <ILI9341_Reset+0x38>)
 80029aa:	f001 fa4d 	bl	8003e48 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80029ae:	20c8      	movs	r0, #200	; 0xc8
 80029b0:	f000 fbb8 	bl	8003124 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80029b4:	2201      	movs	r2, #1
 80029b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029ba:	4802      	ldr	r0, [pc, #8]	; (80029c4 <ILI9341_Reset+0x38>)
 80029bc:	f001 fa44 	bl	8003e48 <HAL_GPIO_WritePin>
}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40020000 	.word	0x40020000

080029c8 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80029d6:	2036      	movs	r0, #54	; 0x36
 80029d8:	f7ff ff48 	bl	800286c <ILI9341_Write_Command>
HAL_Delay(1);
 80029dc:	2001      	movs	r0, #1
 80029de:	f000 fba1 	bl	8003124 <HAL_Delay>
	
switch(screen_rotation) 
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d837      	bhi.n	8002a58 <ILI9341_Set_Rotation+0x90>
 80029e8:	a201      	add	r2, pc, #4	; (adr r2, 80029f0 <ILI9341_Set_Rotation+0x28>)
 80029ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ee:	bf00      	nop
 80029f0:	08002a01 	.word	0x08002a01
 80029f4:	08002a17 	.word	0x08002a17
 80029f8:	08002a2d 	.word	0x08002a2d
 80029fc:	08002a43 	.word	0x08002a43
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8002a00:	2048      	movs	r0, #72	; 0x48
 8002a02:	f7ff ff55 	bl	80028b0 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8002a06:	4b17      	ldr	r3, [pc, #92]	; (8002a64 <ILI9341_Set_Rotation+0x9c>)
 8002a08:	22f0      	movs	r2, #240	; 0xf0
 8002a0a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002a0c:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <ILI9341_Set_Rotation+0xa0>)
 8002a0e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a12:	801a      	strh	r2, [r3, #0]
			break;
 8002a14:	e021      	b.n	8002a5a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8002a16:	2028      	movs	r0, #40	; 0x28
 8002a18:	f7ff ff4a 	bl	80028b0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002a1c:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <ILI9341_Set_Rotation+0x9c>)
 8002a1e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a22:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002a24:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <ILI9341_Set_Rotation+0xa0>)
 8002a26:	22f0      	movs	r2, #240	; 0xf0
 8002a28:	801a      	strh	r2, [r3, #0]
			break;
 8002a2a:	e016      	b.n	8002a5a <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8002a2c:	2088      	movs	r0, #136	; 0x88
 8002a2e:	f7ff ff3f 	bl	80028b0 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <ILI9341_Set_Rotation+0x9c>)
 8002a34:	22f0      	movs	r2, #240	; 0xf0
 8002a36:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002a38:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <ILI9341_Set_Rotation+0xa0>)
 8002a3a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a3e:	801a      	strh	r2, [r3, #0]
			break;
 8002a40:	e00b      	b.n	8002a5a <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8002a42:	20e8      	movs	r0, #232	; 0xe8
 8002a44:	f7ff ff34 	bl	80028b0 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <ILI9341_Set_Rotation+0x9c>)
 8002a4a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a4e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <ILI9341_Set_Rotation+0xa0>)
 8002a52:	22f0      	movs	r2, #240	; 0xf0
 8002a54:	801a      	strh	r2, [r3, #0]
			break;
 8002a56:	e000      	b.n	8002a5a <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002a58:	bf00      	nop
	}
}
 8002a5a:	bf00      	nop
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000006 	.word	0x20000006
 8002a68:	20000004 	.word	0x20000004

08002a6c <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002a70:	2201      	movs	r2, #1
 8002a72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a76:	4802      	ldr	r0, [pc, #8]	; (8002a80 <ILI9341_Enable+0x14>)
 8002a78:	f001 f9e6 	bl	8003e48 <HAL_GPIO_WritePin>
}
 8002a7c:	bf00      	nop
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40020000 	.word	0x40020000

08002a84 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8002a88:	f7ff fff0 	bl	8002a6c <ILI9341_Enable>
ILI9341_SPI_Init();
 8002a8c:	f7ff fecc 	bl	8002828 <ILI9341_SPI_Init>
ILI9341_Reset();
 8002a90:	f7ff ff7c 	bl	800298c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8002a94:	2001      	movs	r0, #1
 8002a96:	f7ff fee9 	bl	800286c <ILI9341_Write_Command>
HAL_Delay(1000);
 8002a9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a9e:	f000 fb41 	bl	8003124 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8002aa2:	20cb      	movs	r0, #203	; 0xcb
 8002aa4:	f7ff fee2 	bl	800286c <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8002aa8:	2039      	movs	r0, #57	; 0x39
 8002aaa:	f7ff ff01 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8002aae:	202c      	movs	r0, #44	; 0x2c
 8002ab0:	f7ff fefe 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f7ff fefb 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8002aba:	2034      	movs	r0, #52	; 0x34
 8002abc:	f7ff fef8 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8002ac0:	2002      	movs	r0, #2
 8002ac2:	f7ff fef5 	bl	80028b0 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8002ac6:	20cf      	movs	r0, #207	; 0xcf
 8002ac8:	f7ff fed0 	bl	800286c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002acc:	2000      	movs	r0, #0
 8002ace:	f7ff feef 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002ad2:	20c1      	movs	r0, #193	; 0xc1
 8002ad4:	f7ff feec 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8002ad8:	2030      	movs	r0, #48	; 0x30
 8002ada:	f7ff fee9 	bl	80028b0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8002ade:	20e8      	movs	r0, #232	; 0xe8
 8002ae0:	f7ff fec4 	bl	800286c <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8002ae4:	2085      	movs	r0, #133	; 0x85
 8002ae6:	f7ff fee3 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002aea:	2000      	movs	r0, #0
 8002aec:	f7ff fee0 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8002af0:	2078      	movs	r0, #120	; 0x78
 8002af2:	f7ff fedd 	bl	80028b0 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8002af6:	20ea      	movs	r0, #234	; 0xea
 8002af8:	f7ff feb8 	bl	800286c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002afc:	2000      	movs	r0, #0
 8002afe:	f7ff fed7 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002b02:	2000      	movs	r0, #0
 8002b04:	f7ff fed4 	bl	80028b0 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8002b08:	20ed      	movs	r0, #237	; 0xed
 8002b0a:	f7ff feaf 	bl	800286c <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8002b0e:	2064      	movs	r0, #100	; 0x64
 8002b10:	f7ff fece 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002b14:	2003      	movs	r0, #3
 8002b16:	f7ff fecb 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8002b1a:	2012      	movs	r0, #18
 8002b1c:	f7ff fec8 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8002b20:	2081      	movs	r0, #129	; 0x81
 8002b22:	f7ff fec5 	bl	80028b0 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8002b26:	20f7      	movs	r0, #247	; 0xf7
 8002b28:	f7ff fea0 	bl	800286c <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8002b2c:	2020      	movs	r0, #32
 8002b2e:	f7ff febf 	bl	80028b0 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8002b32:	20c0      	movs	r0, #192	; 0xc0
 8002b34:	f7ff fe9a 	bl	800286c <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8002b38:	2023      	movs	r0, #35	; 0x23
 8002b3a:	f7ff feb9 	bl	80028b0 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8002b3e:	20c1      	movs	r0, #193	; 0xc1
 8002b40:	f7ff fe94 	bl	800286c <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8002b44:	2010      	movs	r0, #16
 8002b46:	f7ff feb3 	bl	80028b0 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8002b4a:	20c5      	movs	r0, #197	; 0xc5
 8002b4c:	f7ff fe8e 	bl	800286c <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8002b50:	203e      	movs	r0, #62	; 0x3e
 8002b52:	f7ff fead 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8002b56:	2028      	movs	r0, #40	; 0x28
 8002b58:	f7ff feaa 	bl	80028b0 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8002b5c:	20c7      	movs	r0, #199	; 0xc7
 8002b5e:	f7ff fe85 	bl	800286c <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8002b62:	2086      	movs	r0, #134	; 0x86
 8002b64:	f7ff fea4 	bl	80028b0 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8002b68:	2036      	movs	r0, #54	; 0x36
 8002b6a:	f7ff fe7f 	bl	800286c <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8002b6e:	2048      	movs	r0, #72	; 0x48
 8002b70:	f7ff fe9e 	bl	80028b0 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8002b74:	203a      	movs	r0, #58	; 0x3a
 8002b76:	f7ff fe79 	bl	800286c <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8002b7a:	2055      	movs	r0, #85	; 0x55
 8002b7c:	f7ff fe98 	bl	80028b0 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8002b80:	20b1      	movs	r0, #177	; 0xb1
 8002b82:	f7ff fe73 	bl	800286c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002b86:	2000      	movs	r0, #0
 8002b88:	f7ff fe92 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8002b8c:	2018      	movs	r0, #24
 8002b8e:	f7ff fe8f 	bl	80028b0 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8002b92:	20b6      	movs	r0, #182	; 0xb6
 8002b94:	f7ff fe6a 	bl	800286c <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8002b98:	2008      	movs	r0, #8
 8002b9a:	f7ff fe89 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8002b9e:	2082      	movs	r0, #130	; 0x82
 8002ba0:	f7ff fe86 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8002ba4:	2027      	movs	r0, #39	; 0x27
 8002ba6:	f7ff fe83 	bl	80028b0 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8002baa:	20f2      	movs	r0, #242	; 0xf2
 8002bac:	f7ff fe5e 	bl	800286c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f7ff fe7d 	bl	80028b0 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8002bb6:	2026      	movs	r0, #38	; 0x26
 8002bb8:	f7ff fe58 	bl	800286c <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	f7ff fe77 	bl	80028b0 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8002bc2:	20e0      	movs	r0, #224	; 0xe0
 8002bc4:	f7ff fe52 	bl	800286c <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8002bc8:	200f      	movs	r0, #15
 8002bca:	f7ff fe71 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002bce:	2031      	movs	r0, #49	; 0x31
 8002bd0:	f7ff fe6e 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8002bd4:	202b      	movs	r0, #43	; 0x2b
 8002bd6:	f7ff fe6b 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002bda:	200c      	movs	r0, #12
 8002bdc:	f7ff fe68 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002be0:	200e      	movs	r0, #14
 8002be2:	f7ff fe65 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002be6:	2008      	movs	r0, #8
 8002be8:	f7ff fe62 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8002bec:	204e      	movs	r0, #78	; 0x4e
 8002bee:	f7ff fe5f 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8002bf2:	20f1      	movs	r0, #241	; 0xf1
 8002bf4:	f7ff fe5c 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8002bf8:	2037      	movs	r0, #55	; 0x37
 8002bfa:	f7ff fe59 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002bfe:	2007      	movs	r0, #7
 8002c00:	f7ff fe56 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8002c04:	2010      	movs	r0, #16
 8002c06:	f7ff fe53 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002c0a:	2003      	movs	r0, #3
 8002c0c:	f7ff fe50 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002c10:	200e      	movs	r0, #14
 8002c12:	f7ff fe4d 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8002c16:	2009      	movs	r0, #9
 8002c18:	f7ff fe4a 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	f7ff fe47 	bl	80028b0 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8002c22:	20e1      	movs	r0, #225	; 0xe1
 8002c24:	f7ff fe22 	bl	800286c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002c28:	2000      	movs	r0, #0
 8002c2a:	f7ff fe41 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002c2e:	200e      	movs	r0, #14
 8002c30:	f7ff fe3e 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8002c34:	2014      	movs	r0, #20
 8002c36:	f7ff fe3b 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002c3a:	2003      	movs	r0, #3
 8002c3c:	f7ff fe38 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8002c40:	2011      	movs	r0, #17
 8002c42:	f7ff fe35 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002c46:	2007      	movs	r0, #7
 8002c48:	f7ff fe32 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002c4c:	2031      	movs	r0, #49	; 0x31
 8002c4e:	f7ff fe2f 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002c52:	20c1      	movs	r0, #193	; 0xc1
 8002c54:	f7ff fe2c 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002c58:	2048      	movs	r0, #72	; 0x48
 8002c5a:	f7ff fe29 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002c5e:	2008      	movs	r0, #8
 8002c60:	f7ff fe26 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002c64:	200f      	movs	r0, #15
 8002c66:	f7ff fe23 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002c6a:	200c      	movs	r0, #12
 8002c6c:	f7ff fe20 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002c70:	2031      	movs	r0, #49	; 0x31
 8002c72:	f7ff fe1d 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8002c76:	2036      	movs	r0, #54	; 0x36
 8002c78:	f7ff fe1a 	bl	80028b0 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002c7c:	200f      	movs	r0, #15
 8002c7e:	f7ff fe17 	bl	80028b0 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8002c82:	2011      	movs	r0, #17
 8002c84:	f7ff fdf2 	bl	800286c <ILI9341_Write_Command>
HAL_Delay(120);
 8002c88:	2078      	movs	r0, #120	; 0x78
 8002c8a:	f000 fa4b 	bl	8003124 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8002c8e:	2029      	movs	r0, #41	; 0x29
 8002c90:	f7ff fdec 	bl	800286c <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002c94:	2000      	movs	r0, #0
 8002c96:	f7ff fe97 	bl	80029c8 <ILI9341_Set_Rotation>
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002ca0:	b5b0      	push	{r4, r5, r7, lr}
 8002ca2:	b08c      	sub	sp, #48	; 0x30
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	6039      	str	r1, [r7, #0]
 8002caa:	80fb      	strh	r3, [r7, #6]
 8002cac:	466b      	mov	r3, sp
 8002cae:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002cbc:	d202      	bcs.n	8002cc4 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc2:	e002      	b.n	8002cca <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8002cc4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002cc8:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cd0:	483e      	ldr	r0, [pc, #248]	; (8002dcc <ILI9341_Draw_Colour_Burst+0x12c>)
 8002cd2:	f001 f8b9 	bl	8003e48 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002cdc:	483b      	ldr	r0, [pc, #236]	; (8002dcc <ILI9341_Draw_Colour_Burst+0x12c>)
 8002cde:	f001 f8b3 	bl	8003e48 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	0a1b      	lsrs	r3, r3, #8
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8002cec:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002cee:	4623      	mov	r3, r4
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	61fb      	str	r3, [r7, #28]
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f04f 0100 	mov.w	r1, #0
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	00cb      	lsls	r3, r1, #3
 8002d04:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002d08:	00c2      	lsls	r2, r0, #3
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	f04f 0100 	mov.w	r1, #0
 8002d10:	f04f 0200 	mov.w	r2, #0
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	00cb      	lsls	r3, r1, #3
 8002d1a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002d1e:	00c2      	lsls	r2, r0, #3
 8002d20:	1de3      	adds	r3, r4, #7
 8002d22:	08db      	lsrs	r3, r3, #3
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	ebad 0d03 	sub.w	sp, sp, r3
 8002d2a:	466b      	mov	r3, sp
 8002d2c:	3300      	adds	r3, #0
 8002d2e:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002d30:	2300      	movs	r3, #0
 8002d32:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d34:	e00e      	b.n	8002d54 <ILI9341_Draw_Colour_Burst+0xb4>
	{
		burst_buffer[j] = 	chifted;
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002d40:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d44:	3301      	adds	r3, #1
 8002d46:	88fa      	ldrh	r2, [r7, #6]
 8002d48:	b2d1      	uxtb	r1, r2
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d50:	3302      	adds	r3, #2
 8002d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d3ec      	bcc.n	8002d36 <ILI9341_Draw_Colour_Burst+0x96>
	}

uint32_t Sending_Size = Size*2;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6a:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d70:	fbb3 f2f2 	udiv	r2, r3, r2
 8002d74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d76:	fb01 f202 	mul.w	r2, r1, r2
 8002d7a:	1a9b      	subs	r3, r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d010      	beq.n	8002da6 <ILI9341_Draw_Colour_Burst+0x106>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002d84:	2300      	movs	r3, #0
 8002d86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d88:	e009      	b.n	8002d9e <ILI9341_Draw_Colour_Burst+0xfe>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002d8a:	69b9      	ldr	r1, [r7, #24]
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	230a      	movs	r3, #10
 8002d92:	480f      	ldr	r0, [pc, #60]	; (8002dd0 <ILI9341_Draw_Colour_Burst+0x130>)
 8002d94:	f001 ff2d 	bl	8004bf2 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d3f1      	bcc.n	8002d8a <ILI9341_Draw_Colour_Burst+0xea>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002da6:	69b9      	ldr	r1, [r7, #24]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	230a      	movs	r3, #10
 8002dae:	4808      	ldr	r0, [pc, #32]	; (8002dd0 <ILI9341_Draw_Colour_Burst+0x130>)
 8002db0:	f001 ff1f 	bl	8004bf2 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002db4:	2201      	movs	r2, #1
 8002db6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dba:	4804      	ldr	r0, [pc, #16]	; (8002dcc <ILI9341_Draw_Colour_Burst+0x12c>)
 8002dbc:	f001 f844 	bl	8003e48 <HAL_GPIO_WritePin>
 8002dc0:	46ad      	mov	sp, r5
}
 8002dc2:	bf00      	nop
 8002dc4:	3730      	adds	r7, #48	; 0x30
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bdb0      	pop	{r4, r5, r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40020000 	.word	0x40020000
 8002dd0:	20000358 	.word	0x20000358

08002dd4 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	4603      	mov	r3, r0
 8002ddc:	80fb      	strh	r3, [r7, #6]
 8002dde:	460b      	mov	r3, r1
 8002de0:	80bb      	strh	r3, [r7, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002de6:	4b64      	ldr	r3, [pc, #400]	; (8002f78 <ILI9341_Draw_Pixel+0x1a4>)
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	88fa      	ldrh	r2, [r7, #6]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	f080 80be 	bcs.w	8002f70 <ILI9341_Draw_Pixel+0x19c>
 8002df4:	4b61      	ldr	r3, [pc, #388]	; (8002f7c <ILI9341_Draw_Pixel+0x1a8>)
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	88ba      	ldrh	r2, [r7, #4]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	f080 80b7 	bcs.w	8002f70 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002e02:	2200      	movs	r2, #0
 8002e04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e08:	485d      	ldr	r0, [pc, #372]	; (8002f80 <ILI9341_Draw_Pixel+0x1ac>)
 8002e0a:	f001 f81d 	bl	8003e48 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e14:	485a      	ldr	r0, [pc, #360]	; (8002f80 <ILI9341_Draw_Pixel+0x1ac>)
 8002e16:	f001 f817 	bl	8003e48 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002e1a:	202a      	movs	r0, #42	; 0x2a
 8002e1c:	f7ff fd14 	bl	8002848 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002e20:	2201      	movs	r2, #1
 8002e22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e26:	4856      	ldr	r0, [pc, #344]	; (8002f80 <ILI9341_Draw_Pixel+0x1ac>)
 8002e28:	f001 f80e 	bl	8003e48 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e32:	4853      	ldr	r0, [pc, #332]	; (8002f80 <ILI9341_Draw_Pixel+0x1ac>)
 8002e34:	f001 f808 	bl	8003e48 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002e38:	2200      	movs	r2, #0
 8002e3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e3e:	4850      	ldr	r0, [pc, #320]	; (8002f80 <ILI9341_Draw_Pixel+0x1ac>)
 8002e40:	f001 f802 	bl	8003e48 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002e44:	88fb      	ldrh	r3, [r7, #6]
 8002e46:	0a1b      	lsrs	r3, r3, #8
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	753b      	strb	r3, [r7, #20]
 8002e4e:	88fb      	ldrh	r3, [r7, #6]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	757b      	strb	r3, [r7, #21]
 8002e54:	88fb      	ldrh	r3, [r7, #6]
 8002e56:	3301      	adds	r3, #1
 8002e58:	121b      	asrs	r3, r3, #8
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	75bb      	strb	r3, [r7, #22]
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	3301      	adds	r3, #1
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002e68:	f107 0114 	add.w	r1, r7, #20
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	2204      	movs	r2, #4
 8002e70:	4844      	ldr	r0, [pc, #272]	; (8002f84 <ILI9341_Draw_Pixel+0x1b0>)
 8002e72:	f001 febe 	bl	8004bf2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002e76:	2201      	movs	r2, #1
 8002e78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e7c:	4840      	ldr	r0, [pc, #256]	; (8002f80 <ILI9341_Draw_Pixel+0x1ac>)
 8002e7e:	f000 ffe3 	bl	8003e48 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002e82:	2200      	movs	r2, #0
 8002e84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e88:	483d      	ldr	r0, [pc, #244]	; (8002f80 <ILI9341_Draw_Pixel+0x1ac>)
 8002e8a:	f000 ffdd 	bl	8003e48 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e94:	483a      	ldr	r0, [pc, #232]	; (8002f80 <ILI9341_Draw_Pixel+0x1ac>)
 8002e96:	f000 ffd7 	bl	8003e48 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8002e9a:	202b      	movs	r0, #43	; 0x2b
 8002e9c:	f7ff fcd4 	bl	8002848 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ea6:	4836      	ldr	r0, [pc, #216]	; (8002f80 <ILI9341_Draw_Pixel+0x1ac>)
 8002ea8:	f000 ffce 	bl	8003e48 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002eac:	2201      	movs	r2, #1
 8002eae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002eb2:	4833      	ldr	r0, [pc, #204]	; (8002f80 <ILI9341_Draw_Pixel+0x1ac>)
 8002eb4:	f000 ffc8 	bl	8003e48 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ebe:	4830      	ldr	r0, [pc, #192]	; (8002f80 <ILI9341_Draw_Pixel+0x1ac>)
 8002ec0:	f000 ffc2 	bl	8003e48 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8002ec4:	88bb      	ldrh	r3, [r7, #4]
 8002ec6:	0a1b      	lsrs	r3, r3, #8
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	743b      	strb	r3, [r7, #16]
 8002ece:	88bb      	ldrh	r3, [r7, #4]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	747b      	strb	r3, [r7, #17]
 8002ed4:	88bb      	ldrh	r3, [r7, #4]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	121b      	asrs	r3, r3, #8
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	74bb      	strb	r3, [r7, #18]
 8002ede:	88bb      	ldrh	r3, [r7, #4]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002ee8:	f107 0110 	add.w	r1, r7, #16
 8002eec:	2301      	movs	r3, #1
 8002eee:	2204      	movs	r2, #4
 8002ef0:	4824      	ldr	r0, [pc, #144]	; (8002f84 <ILI9341_Draw_Pixel+0x1b0>)
 8002ef2:	f001 fe7e 	bl	8004bf2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002efc:	4820      	ldr	r0, [pc, #128]	; (8002f80 <ILI9341_Draw_Pixel+0x1ac>)
 8002efe:	f000 ffa3 	bl	8003e48 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002f02:	2200      	movs	r2, #0
 8002f04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f08:	481d      	ldr	r0, [pc, #116]	; (8002f80 <ILI9341_Draw_Pixel+0x1ac>)
 8002f0a:	f000 ff9d 	bl	8003e48 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f14:	481a      	ldr	r0, [pc, #104]	; (8002f80 <ILI9341_Draw_Pixel+0x1ac>)
 8002f16:	f000 ff97 	bl	8003e48 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002f1a:	202c      	movs	r0, #44	; 0x2c
 8002f1c:	f7ff fc94 	bl	8002848 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002f20:	2201      	movs	r2, #1
 8002f22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f26:	4816      	ldr	r0, [pc, #88]	; (8002f80 <ILI9341_Draw_Pixel+0x1ac>)
 8002f28:	f000 ff8e 	bl	8003e48 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f32:	4813      	ldr	r0, [pc, #76]	; (8002f80 <ILI9341_Draw_Pixel+0x1ac>)
 8002f34:	f000 ff88 	bl	8003e48 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f3e:	4810      	ldr	r0, [pc, #64]	; (8002f80 <ILI9341_Draw_Pixel+0x1ac>)
 8002f40:	f000 ff82 	bl	8003e48 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002f44:	887b      	ldrh	r3, [r7, #2]
 8002f46:	0a1b      	lsrs	r3, r3, #8
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	733b      	strb	r3, [r7, #12]
 8002f4e:	887b      	ldrh	r3, [r7, #2]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002f54:	f107 010c 	add.w	r1, r7, #12
 8002f58:	2301      	movs	r3, #1
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	4809      	ldr	r0, [pc, #36]	; (8002f84 <ILI9341_Draw_Pixel+0x1b0>)
 8002f5e:	f001 fe48 	bl	8004bf2 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002f62:	2201      	movs	r2, #1
 8002f64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f68:	4805      	ldr	r0, [pc, #20]	; (8002f80 <ILI9341_Draw_Pixel+0x1ac>)
 8002f6a:	f000 ff6d 	bl	8003e48 <HAL_GPIO_WritePin>
 8002f6e:	e000      	b.n	8002f72 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002f70:	bf00      	nop
	
}
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	20000006 	.word	0x20000006
 8002f7c:	20000004 	.word	0x20000004
 8002f80:	40020000 	.word	0x40020000
 8002f84:	20000358 	.word	0x20000358

08002f88 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002f88:	b590      	push	{r4, r7, lr}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4604      	mov	r4, r0
 8002f90:	4608      	mov	r0, r1
 8002f92:	4611      	mov	r1, r2
 8002f94:	461a      	mov	r2, r3
 8002f96:	4623      	mov	r3, r4
 8002f98:	80fb      	strh	r3, [r7, #6]
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	80bb      	strh	r3, [r7, #4]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	807b      	strh	r3, [r7, #2]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002fa6:	4b24      	ldr	r3, [pc, #144]	; (8003038 <ILI9341_Draw_Rectangle+0xb0>)
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	88fa      	ldrh	r2, [r7, #6]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d23d      	bcs.n	800302e <ILI9341_Draw_Rectangle+0xa6>
 8002fb2:	4b22      	ldr	r3, [pc, #136]	; (800303c <ILI9341_Draw_Rectangle+0xb4>)
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	88ba      	ldrh	r2, [r7, #4]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d237      	bcs.n	800302e <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8002fbe:	88fa      	ldrh	r2, [r7, #6]
 8002fc0:	887b      	ldrh	r3, [r7, #2]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	4a1c      	ldr	r2, [pc, #112]	; (8003038 <ILI9341_Draw_Rectangle+0xb0>)
 8002fc6:	8812      	ldrh	r2, [r2, #0]
 8002fc8:	b292      	uxth	r2, r2
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	dd05      	ble.n	8002fda <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8002fce:	4b1a      	ldr	r3, [pc, #104]	; (8003038 <ILI9341_Draw_Rectangle+0xb0>)
 8002fd0:	881b      	ldrh	r3, [r3, #0]
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	88fb      	ldrh	r3, [r7, #6]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8002fda:	88ba      	ldrh	r2, [r7, #4]
 8002fdc:	883b      	ldrh	r3, [r7, #0]
 8002fde:	4413      	add	r3, r2
 8002fe0:	4a16      	ldr	r2, [pc, #88]	; (800303c <ILI9341_Draw_Rectangle+0xb4>)
 8002fe2:	8812      	ldrh	r2, [r2, #0]
 8002fe4:	b292      	uxth	r2, r2
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	dd05      	ble.n	8002ff6 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8002fea:	4b14      	ldr	r3, [pc, #80]	; (800303c <ILI9341_Draw_Rectangle+0xb4>)
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	88bb      	ldrh	r3, [r7, #4]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8002ff6:	88fa      	ldrh	r2, [r7, #6]
 8002ff8:	887b      	ldrh	r3, [r7, #2]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b29c      	uxth	r4, r3
 8003002:	88ba      	ldrh	r2, [r7, #4]
 8003004:	883b      	ldrh	r3, [r7, #0]
 8003006:	4413      	add	r3, r2
 8003008:	b29b      	uxth	r3, r3
 800300a:	3b01      	subs	r3, #1
 800300c:	b29b      	uxth	r3, r3
 800300e:	88b9      	ldrh	r1, [r7, #4]
 8003010:	88f8      	ldrh	r0, [r7, #6]
 8003012:	4622      	mov	r2, r4
 8003014:	f7ff fc6e 	bl	80028f4 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8003018:	883b      	ldrh	r3, [r7, #0]
 800301a:	887a      	ldrh	r2, [r7, #2]
 800301c:	fb02 f303 	mul.w	r3, r2, r3
 8003020:	461a      	mov	r2, r3
 8003022:	8b3b      	ldrh	r3, [r7, #24]
 8003024:	4611      	mov	r1, r2
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fe3a 	bl	8002ca0 <ILI9341_Draw_Colour_Burst>
 800302c:	e000      	b.n	8003030 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800302e:	bf00      	nop
}
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	bd90      	pop	{r4, r7, pc}
 8003036:	bf00      	nop
 8003038:	20000006 	.word	0x20000006
 800303c:	20000004 	.word	0x20000004

08003040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003044:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <HAL_Init+0x40>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a0d      	ldr	r2, [pc, #52]	; (8003080 <HAL_Init+0x40>)
 800304a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800304e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_Init+0x40>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a0a      	ldr	r2, [pc, #40]	; (8003080 <HAL_Init+0x40>)
 8003056:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800305a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800305c:	4b08      	ldr	r3, [pc, #32]	; (8003080 <HAL_Init+0x40>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a07      	ldr	r2, [pc, #28]	; (8003080 <HAL_Init+0x40>)
 8003062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003066:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003068:	2003      	movs	r0, #3
 800306a:	f000 fd0d 	bl	8003a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800306e:	200f      	movs	r0, #15
 8003070:	f000 f808 	bl	8003084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003074:	f7fe fed8 	bl	8001e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40023c00 	.word	0x40023c00

08003084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800308c:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <HAL_InitTick+0x54>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4b12      	ldr	r3, [pc, #72]	; (80030dc <HAL_InitTick+0x58>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	4619      	mov	r1, r3
 8003096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800309a:	fbb3 f3f1 	udiv	r3, r3, r1
 800309e:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 fd17 	bl	8003ad6 <HAL_SYSTICK_Config>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e00e      	b.n	80030d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b0f      	cmp	r3, #15
 80030b6:	d80a      	bhi.n	80030ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030b8:	2200      	movs	r2, #0
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	f04f 30ff 	mov.w	r0, #4294967295
 80030c0:	f000 fced 	bl	8003a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030c4:	4a06      	ldr	r2, [pc, #24]	; (80030e0 <HAL_InitTick+0x5c>)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	e000      	b.n	80030d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	20000000 	.word	0x20000000
 80030dc:	2000000c 	.word	0x2000000c
 80030e0:	20000008 	.word	0x20000008

080030e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030e8:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_IncTick+0x20>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_IncTick+0x24>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4413      	add	r3, r2
 80030f4:	4a04      	ldr	r2, [pc, #16]	; (8003108 <HAL_IncTick+0x24>)
 80030f6:	6013      	str	r3, [r2, #0]
}
 80030f8:	bf00      	nop
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	2000000c 	.word	0x2000000c
 8003108:	200004cc 	.word	0x200004cc

0800310c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  return uwTick;
 8003110:	4b03      	ldr	r3, [pc, #12]	; (8003120 <HAL_GetTick+0x14>)
 8003112:	681b      	ldr	r3, [r3, #0]
}
 8003114:	4618      	mov	r0, r3
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	200004cc 	.word	0x200004cc

08003124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800312c:	f7ff ffee 	bl	800310c <HAL_GetTick>
 8003130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313c:	d005      	beq.n	800314a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800313e:	4b0a      	ldr	r3, [pc, #40]	; (8003168 <HAL_Delay+0x44>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	461a      	mov	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4413      	add	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800314a:	bf00      	nop
 800314c:	f7ff ffde 	bl	800310c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	429a      	cmp	r2, r3
 800315a:	d8f7      	bhi.n	800314c <HAL_Delay+0x28>
  {
  }
}
 800315c:	bf00      	nop
 800315e:	bf00      	nop
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	2000000c 	.word	0x2000000c

0800316c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003174:	2300      	movs	r3, #0
 8003176:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e033      	b.n	80031ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d109      	bne.n	800319e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fd ff90 	bl	80010b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	f003 0310 	and.w	r3, r3, #16
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d118      	bne.n	80031dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031b2:	f023 0302 	bic.w	r3, r3, #2
 80031b6:	f043 0202 	orr.w	r2, r3, #2
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fab4 	bl	800372c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f023 0303 	bic.w	r3, r3, #3
 80031d2:	f043 0201 	orr.w	r2, r3, #1
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	641a      	str	r2, [r3, #64]	; 0x40
 80031da:	e001      	b.n	80031e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_ADC_Start+0x1a>
 800320a:	2302      	movs	r3, #2
 800320c:	e0b2      	b.n	8003374 <HAL_ADC_Start+0x180>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b01      	cmp	r3, #1
 8003222:	d018      	beq.n	8003256 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0201 	orr.w	r2, r2, #1
 8003232:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003234:	4b52      	ldr	r3, [pc, #328]	; (8003380 <HAL_ADC_Start+0x18c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a52      	ldr	r2, [pc, #328]	; (8003384 <HAL_ADC_Start+0x190>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	0c9a      	lsrs	r2, r3, #18
 8003240:	4613      	mov	r3, r2
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	4413      	add	r3, r2
 8003246:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003248:	e002      	b.n	8003250 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	3b01      	subs	r3, #1
 800324e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f9      	bne.n	800324a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b01      	cmp	r3, #1
 8003262:	d17a      	bne.n	800335a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800326c:	f023 0301 	bic.w	r3, r3, #1
 8003270:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003282:	2b00      	cmp	r3, #0
 8003284:	d007      	beq.n	8003296 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800328e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800329e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a2:	d106      	bne.n	80032b2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a8:	f023 0206 	bic.w	r2, r3, #6
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	645a      	str	r2, [r3, #68]	; 0x44
 80032b0:	e002      	b.n	80032b8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032c0:	4b31      	ldr	r3, [pc, #196]	; (8003388 <HAL_ADC_Start+0x194>)
 80032c2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80032cc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f003 031f 	and.w	r3, r3, #31
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d12a      	bne.n	8003330 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a2b      	ldr	r2, [pc, #172]	; (800338c <HAL_ADC_Start+0x198>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d015      	beq.n	8003310 <HAL_ADC_Start+0x11c>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a29      	ldr	r2, [pc, #164]	; (8003390 <HAL_ADC_Start+0x19c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d105      	bne.n	80032fa <HAL_ADC_Start+0x106>
 80032ee:	4b26      	ldr	r3, [pc, #152]	; (8003388 <HAL_ADC_Start+0x194>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a25      	ldr	r2, [pc, #148]	; (8003394 <HAL_ADC_Start+0x1a0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d136      	bne.n	8003372 <HAL_ADC_Start+0x17e>
 8003304:	4b20      	ldr	r3, [pc, #128]	; (8003388 <HAL_ADC_Start+0x194>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	2b00      	cmp	r3, #0
 800330e:	d130      	bne.n	8003372 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d129      	bne.n	8003372 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800332c:	609a      	str	r2, [r3, #8]
 800332e:	e020      	b.n	8003372 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a15      	ldr	r2, [pc, #84]	; (800338c <HAL_ADC_Start+0x198>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d11b      	bne.n	8003372 <HAL_ADC_Start+0x17e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d114      	bne.n	8003372 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003356:	609a      	str	r2, [r3, #8]
 8003358:	e00b      	b.n	8003372 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f043 0210 	orr.w	r2, r3, #16
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	f043 0201 	orr.w	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	20000000 	.word	0x20000000
 8003384:	431bde83 	.word	0x431bde83
 8003388:	40012300 	.word	0x40012300
 800338c:	40012000 	.word	0x40012000
 8003390:	40012100 	.word	0x40012100
 8003394:	40012200 	.word	0x40012200

08003398 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b4:	d113      	bne.n	80033de <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c4:	d10b      	bne.n	80033de <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	f043 0220 	orr.w	r2, r3, #32
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e063      	b.n	80034a6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80033de:	f7ff fe95 	bl	800310c <HAL_GetTick>
 80033e2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80033e4:	e021      	b.n	800342a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d01d      	beq.n	800342a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d007      	beq.n	8003404 <HAL_ADC_PollForConversion+0x6c>
 80033f4:	f7ff fe8a 	bl	800310c <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d212      	bcs.n	800342a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b02      	cmp	r3, #2
 8003410:	d00b      	beq.n	800342a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f043 0204 	orr.w	r2, r3, #4
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e03d      	b.n	80034a6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b02      	cmp	r3, #2
 8003436:	d1d6      	bne.n	80033e6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f06f 0212 	mvn.w	r2, #18
 8003440:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d123      	bne.n	80034a4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003460:	2b00      	cmp	r3, #0
 8003462:	d11f      	bne.n	80034a4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800346e:	2b00      	cmp	r3, #0
 8003470:	d006      	beq.n	8003480 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800347c:	2b00      	cmp	r3, #0
 800347e:	d111      	bne.n	80034a4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d105      	bne.n	80034a4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	f043 0201 	orr.w	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80034bc:	4618      	mov	r0, r3
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x1c>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e113      	b.n	800370c <HAL_ADC_ConfigChannel+0x244>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b09      	cmp	r3, #9
 80034f2:	d925      	bls.n	8003540 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68d9      	ldr	r1, [r3, #12]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	461a      	mov	r2, r3
 8003502:	4613      	mov	r3, r2
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	4413      	add	r3, r2
 8003508:	3b1e      	subs	r3, #30
 800350a:	2207      	movs	r2, #7
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43da      	mvns	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	400a      	ands	r2, r1
 8003518:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68d9      	ldr	r1, [r3, #12]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	b29b      	uxth	r3, r3
 800352a:	4618      	mov	r0, r3
 800352c:	4603      	mov	r3, r0
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	4403      	add	r3, r0
 8003532:	3b1e      	subs	r3, #30
 8003534:	409a      	lsls	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	60da      	str	r2, [r3, #12]
 800353e:	e022      	b.n	8003586 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6919      	ldr	r1, [r3, #16]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	b29b      	uxth	r3, r3
 800354c:	461a      	mov	r2, r3
 800354e:	4613      	mov	r3, r2
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	4413      	add	r3, r2
 8003554:	2207      	movs	r2, #7
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43da      	mvns	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	400a      	ands	r2, r1
 8003562:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6919      	ldr	r1, [r3, #16]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	b29b      	uxth	r3, r3
 8003574:	4618      	mov	r0, r3
 8003576:	4603      	mov	r3, r0
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	4403      	add	r3, r0
 800357c:	409a      	lsls	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b06      	cmp	r3, #6
 800358c:	d824      	bhi.n	80035d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	3b05      	subs	r3, #5
 80035a0:	221f      	movs	r2, #31
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43da      	mvns	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	400a      	ands	r2, r1
 80035ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	4618      	mov	r0, r3
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	3b05      	subs	r3, #5
 80035ca:	fa00 f203 	lsl.w	r2, r0, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	635a      	str	r2, [r3, #52]	; 0x34
 80035d6:	e04c      	b.n	8003672 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2b0c      	cmp	r3, #12
 80035de:	d824      	bhi.n	800362a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	3b23      	subs	r3, #35	; 0x23
 80035f2:	221f      	movs	r2, #31
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	43da      	mvns	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	400a      	ands	r2, r1
 8003600:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	b29b      	uxth	r3, r3
 800360e:	4618      	mov	r0, r3
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	3b23      	subs	r3, #35	; 0x23
 800361c:	fa00 f203 	lsl.w	r2, r0, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	631a      	str	r2, [r3, #48]	; 0x30
 8003628:	e023      	b.n	8003672 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	3b41      	subs	r3, #65	; 0x41
 800363c:	221f      	movs	r2, #31
 800363e:	fa02 f303 	lsl.w	r3, r2, r3
 8003642:	43da      	mvns	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	400a      	ands	r2, r1
 800364a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	b29b      	uxth	r3, r3
 8003658:	4618      	mov	r0, r3
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	3b41      	subs	r3, #65	; 0x41
 8003666:	fa00 f203 	lsl.w	r2, r0, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003672:	4b29      	ldr	r3, [pc, #164]	; (8003718 <HAL_ADC_ConfigChannel+0x250>)
 8003674:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a28      	ldr	r2, [pc, #160]	; (800371c <HAL_ADC_ConfigChannel+0x254>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d10f      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x1d8>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b12      	cmp	r3, #18
 8003686:	d10b      	bne.n	80036a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a1d      	ldr	r2, [pc, #116]	; (800371c <HAL_ADC_ConfigChannel+0x254>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d12b      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x23a>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a1c      	ldr	r2, [pc, #112]	; (8003720 <HAL_ADC_ConfigChannel+0x258>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d003      	beq.n	80036bc <HAL_ADC_ConfigChannel+0x1f4>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b11      	cmp	r3, #17
 80036ba:	d122      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a11      	ldr	r2, [pc, #68]	; (8003720 <HAL_ADC_ConfigChannel+0x258>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d111      	bne.n	8003702 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036de:	4b11      	ldr	r3, [pc, #68]	; (8003724 <HAL_ADC_ConfigChannel+0x25c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a11      	ldr	r2, [pc, #68]	; (8003728 <HAL_ADC_ConfigChannel+0x260>)
 80036e4:	fba2 2303 	umull	r2, r3, r2, r3
 80036e8:	0c9a      	lsrs	r2, r3, #18
 80036ea:	4613      	mov	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036f4:	e002      	b.n	80036fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	3b01      	subs	r3, #1
 80036fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f9      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	40012300 	.word	0x40012300
 800371c:	40012000 	.word	0x40012000
 8003720:	10000012 	.word	0x10000012
 8003724:	20000000 	.word	0x20000000
 8003728:	431bde83 	.word	0x431bde83

0800372c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003734:	4b79      	ldr	r3, [pc, #484]	; (800391c <ADC_Init+0x1f0>)
 8003736:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	431a      	orrs	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003760:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6859      	ldr	r1, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	021a      	lsls	r2, r3, #8
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003784:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6859      	ldr	r1, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6899      	ldr	r1, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037be:	4a58      	ldr	r2, [pc, #352]	; (8003920 <ADC_Init+0x1f4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d022      	beq.n	800380a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6899      	ldr	r1, [r3, #8]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	6899      	ldr	r1, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	e00f      	b.n	800382a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003818:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003828:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0202 	bic.w	r2, r2, #2
 8003838:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6899      	ldr	r1, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	7e1b      	ldrb	r3, [r3, #24]
 8003844:	005a      	lsls	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d01b      	beq.n	8003890 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003866:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003876:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6859      	ldr	r1, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	3b01      	subs	r3, #1
 8003884:	035a      	lsls	r2, r3, #13
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	605a      	str	r2, [r3, #4]
 800388e:	e007      	b.n	80038a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800389e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	051a      	lsls	r2, r3, #20
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6899      	ldr	r1, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038e2:	025a      	lsls	r2, r3, #9
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6899      	ldr	r1, [r3, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	029a      	lsls	r2, r3, #10
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	609a      	str	r2, [r3, #8]
}
 8003910:	bf00      	nop
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	40012300 	.word	0x40012300
 8003920:	0f000001 	.word	0x0f000001

08003924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003934:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <__NVIC_SetPriorityGrouping+0x44>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003940:	4013      	ands	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800394c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003956:	4a04      	ldr	r2, [pc, #16]	; (8003968 <__NVIC_SetPriorityGrouping+0x44>)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	60d3      	str	r3, [r2, #12]
}
 800395c:	bf00      	nop
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003970:	4b04      	ldr	r3, [pc, #16]	; (8003984 <__NVIC_GetPriorityGrouping+0x18>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	0a1b      	lsrs	r3, r3, #8
 8003976:	f003 0307 	and.w	r3, r3, #7
}
 800397a:	4618      	mov	r0, r3
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	e000ed00 	.word	0xe000ed00

08003988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	6039      	str	r1, [r7, #0]
 8003992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003998:	2b00      	cmp	r3, #0
 800399a:	db0a      	blt.n	80039b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	490c      	ldr	r1, [pc, #48]	; (80039d4 <__NVIC_SetPriority+0x4c>)
 80039a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a6:	0112      	lsls	r2, r2, #4
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	440b      	add	r3, r1
 80039ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039b0:	e00a      	b.n	80039c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	4908      	ldr	r1, [pc, #32]	; (80039d8 <__NVIC_SetPriority+0x50>)
 80039b8:	79fb      	ldrb	r3, [r7, #7]
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	3b04      	subs	r3, #4
 80039c0:	0112      	lsls	r2, r2, #4
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	440b      	add	r3, r1
 80039c6:	761a      	strb	r2, [r3, #24]
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	e000e100 	.word	0xe000e100
 80039d8:	e000ed00 	.word	0xe000ed00

080039dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039dc:	b480      	push	{r7}
 80039de:	b089      	sub	sp, #36	; 0x24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f1c3 0307 	rsb	r3, r3, #7
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	bf28      	it	cs
 80039fa:	2304      	movcs	r3, #4
 80039fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	3304      	adds	r3, #4
 8003a02:	2b06      	cmp	r3, #6
 8003a04:	d902      	bls.n	8003a0c <NVIC_EncodePriority+0x30>
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	3b03      	subs	r3, #3
 8003a0a:	e000      	b.n	8003a0e <NVIC_EncodePriority+0x32>
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a10:	f04f 32ff 	mov.w	r2, #4294967295
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	43da      	mvns	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	401a      	ands	r2, r3
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a24:	f04f 31ff 	mov.w	r1, #4294967295
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2e:	43d9      	mvns	r1, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a34:	4313      	orrs	r3, r2
         );
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3724      	adds	r7, #36	; 0x24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
	...

08003a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a54:	d301      	bcc.n	8003a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a56:	2301      	movs	r3, #1
 8003a58:	e00f      	b.n	8003a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a5a:	4a0a      	ldr	r2, [pc, #40]	; (8003a84 <SysTick_Config+0x40>)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a62:	210f      	movs	r1, #15
 8003a64:	f04f 30ff 	mov.w	r0, #4294967295
 8003a68:	f7ff ff8e 	bl	8003988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <SysTick_Config+0x40>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a72:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <SysTick_Config+0x40>)
 8003a74:	2207      	movs	r2, #7
 8003a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	e000e010 	.word	0xe000e010

08003a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff ff47 	bl	8003924 <__NVIC_SetPriorityGrouping>
}
 8003a96:	bf00      	nop
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b086      	sub	sp, #24
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	60b9      	str	r1, [r7, #8]
 8003aa8:	607a      	str	r2, [r7, #4]
 8003aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ab0:	f7ff ff5c 	bl	800396c <__NVIC_GetPriorityGrouping>
 8003ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	68b9      	ldr	r1, [r7, #8]
 8003aba:	6978      	ldr	r0, [r7, #20]
 8003abc:	f7ff ff8e 	bl	80039dc <NVIC_EncodePriority>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff ff5d 	bl	8003988 <__NVIC_SetPriority>
}
 8003ace:	bf00      	nop
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff ffb0 	bl	8003a44 <SysTick_Config>
 8003ae4:	4603      	mov	r3, r0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b089      	sub	sp, #36	; 0x24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	e177      	b.n	8003dfc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	f040 8166 	bne.w	8003df6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d005      	beq.n	8003b42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d130      	bne.n	8003ba4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	2203      	movs	r2, #3
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	43db      	mvns	r3, r3
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	4013      	ands	r3, r2
 8003b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	68da      	ldr	r2, [r3, #12]
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b78:	2201      	movs	r2, #1
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	43db      	mvns	r3, r3
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4013      	ands	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	091b      	lsrs	r3, r3, #4
 8003b8e:	f003 0201 	and.w	r2, r3, #1
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d017      	beq.n	8003be0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	2203      	movs	r2, #3
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	689a      	ldr	r2, [r3, #8]
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 0303 	and.w	r3, r3, #3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d123      	bne.n	8003c34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	08da      	lsrs	r2, r3, #3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3208      	adds	r2, #8
 8003bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	220f      	movs	r2, #15
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	08da      	lsrs	r2, r3, #3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3208      	adds	r2, #8
 8003c2e:	69b9      	ldr	r1, [r7, #24]
 8003c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	2203      	movs	r2, #3
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	43db      	mvns	r3, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 0203 	and.w	r2, r3, #3
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f000 80c0 	beq.w	8003df6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]
 8003c7a:	4b66      	ldr	r3, [pc, #408]	; (8003e14 <HAL_GPIO_Init+0x324>)
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7e:	4a65      	ldr	r2, [pc, #404]	; (8003e14 <HAL_GPIO_Init+0x324>)
 8003c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c84:	6453      	str	r3, [r2, #68]	; 0x44
 8003c86:	4b63      	ldr	r3, [pc, #396]	; (8003e14 <HAL_GPIO_Init+0x324>)
 8003c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c92:	4a61      	ldr	r2, [pc, #388]	; (8003e18 <HAL_GPIO_Init+0x328>)
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	089b      	lsrs	r3, r3, #2
 8003c98:	3302      	adds	r3, #2
 8003c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	220f      	movs	r2, #15
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a58      	ldr	r2, [pc, #352]	; (8003e1c <HAL_GPIO_Init+0x32c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d037      	beq.n	8003d2e <HAL_GPIO_Init+0x23e>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a57      	ldr	r2, [pc, #348]	; (8003e20 <HAL_GPIO_Init+0x330>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d031      	beq.n	8003d2a <HAL_GPIO_Init+0x23a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a56      	ldr	r2, [pc, #344]	; (8003e24 <HAL_GPIO_Init+0x334>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d02b      	beq.n	8003d26 <HAL_GPIO_Init+0x236>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a55      	ldr	r2, [pc, #340]	; (8003e28 <HAL_GPIO_Init+0x338>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d025      	beq.n	8003d22 <HAL_GPIO_Init+0x232>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a54      	ldr	r2, [pc, #336]	; (8003e2c <HAL_GPIO_Init+0x33c>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d01f      	beq.n	8003d1e <HAL_GPIO_Init+0x22e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a53      	ldr	r2, [pc, #332]	; (8003e30 <HAL_GPIO_Init+0x340>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d019      	beq.n	8003d1a <HAL_GPIO_Init+0x22a>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a52      	ldr	r2, [pc, #328]	; (8003e34 <HAL_GPIO_Init+0x344>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d013      	beq.n	8003d16 <HAL_GPIO_Init+0x226>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a51      	ldr	r2, [pc, #324]	; (8003e38 <HAL_GPIO_Init+0x348>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d00d      	beq.n	8003d12 <HAL_GPIO_Init+0x222>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a50      	ldr	r2, [pc, #320]	; (8003e3c <HAL_GPIO_Init+0x34c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d007      	beq.n	8003d0e <HAL_GPIO_Init+0x21e>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a4f      	ldr	r2, [pc, #316]	; (8003e40 <HAL_GPIO_Init+0x350>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d101      	bne.n	8003d0a <HAL_GPIO_Init+0x21a>
 8003d06:	2309      	movs	r3, #9
 8003d08:	e012      	b.n	8003d30 <HAL_GPIO_Init+0x240>
 8003d0a:	230a      	movs	r3, #10
 8003d0c:	e010      	b.n	8003d30 <HAL_GPIO_Init+0x240>
 8003d0e:	2308      	movs	r3, #8
 8003d10:	e00e      	b.n	8003d30 <HAL_GPIO_Init+0x240>
 8003d12:	2307      	movs	r3, #7
 8003d14:	e00c      	b.n	8003d30 <HAL_GPIO_Init+0x240>
 8003d16:	2306      	movs	r3, #6
 8003d18:	e00a      	b.n	8003d30 <HAL_GPIO_Init+0x240>
 8003d1a:	2305      	movs	r3, #5
 8003d1c:	e008      	b.n	8003d30 <HAL_GPIO_Init+0x240>
 8003d1e:	2304      	movs	r3, #4
 8003d20:	e006      	b.n	8003d30 <HAL_GPIO_Init+0x240>
 8003d22:	2303      	movs	r3, #3
 8003d24:	e004      	b.n	8003d30 <HAL_GPIO_Init+0x240>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e002      	b.n	8003d30 <HAL_GPIO_Init+0x240>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <HAL_GPIO_Init+0x240>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	f002 0203 	and.w	r2, r2, #3
 8003d36:	0092      	lsls	r2, r2, #2
 8003d38:	4093      	lsls	r3, r2
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d40:	4935      	ldr	r1, [pc, #212]	; (8003e18 <HAL_GPIO_Init+0x328>)
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	089b      	lsrs	r3, r3, #2
 8003d46:	3302      	adds	r3, #2
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d4e:	4b3d      	ldr	r3, [pc, #244]	; (8003e44 <HAL_GPIO_Init+0x354>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	43db      	mvns	r3, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d72:	4a34      	ldr	r2, [pc, #208]	; (8003e44 <HAL_GPIO_Init+0x354>)
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d78:	4b32      	ldr	r3, [pc, #200]	; (8003e44 <HAL_GPIO_Init+0x354>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4013      	ands	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d9c:	4a29      	ldr	r2, [pc, #164]	; (8003e44 <HAL_GPIO_Init+0x354>)
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003da2:	4b28      	ldr	r3, [pc, #160]	; (8003e44 <HAL_GPIO_Init+0x354>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	43db      	mvns	r3, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4013      	ands	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dc6:	4a1f      	ldr	r2, [pc, #124]	; (8003e44 <HAL_GPIO_Init+0x354>)
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <HAL_GPIO_Init+0x354>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003df0:	4a14      	ldr	r2, [pc, #80]	; (8003e44 <HAL_GPIO_Init+0x354>)
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	61fb      	str	r3, [r7, #28]
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	2b0f      	cmp	r3, #15
 8003e00:	f67f ae84 	bls.w	8003b0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop
 8003e08:	3724      	adds	r7, #36	; 0x24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40023800 	.word	0x40023800
 8003e18:	40013800 	.word	0x40013800
 8003e1c:	40020000 	.word	0x40020000
 8003e20:	40020400 	.word	0x40020400
 8003e24:	40020800 	.word	0x40020800
 8003e28:	40020c00 	.word	0x40020c00
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	40021400 	.word	0x40021400
 8003e34:	40021800 	.word	0x40021800
 8003e38:	40021c00 	.word	0x40021c00
 8003e3c:	40022000 	.word	0x40022000
 8003e40:	40022400 	.word	0x40022400
 8003e44:	40013c00 	.word	0x40013c00

08003e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	807b      	strh	r3, [r7, #2]
 8003e54:	4613      	mov	r3, r2
 8003e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e58:	787b      	ldrb	r3, [r7, #1]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e5e:	887a      	ldrh	r2, [r7, #2]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e64:	e003      	b.n	8003e6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e66:	887b      	ldrh	r3, [r7, #2]
 8003e68:	041a      	lsls	r2, r3, #16
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	619a      	str	r2, [r3, #24]
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
	...

08003e7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e12b      	b.n	80040e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d106      	bne.n	8003ea8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fd fac8 	bl	8001438 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2224      	movs	r2, #36	; 0x24
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0201 	bic.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ece:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ede:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ee0:	f000 fdac 	bl	8004a3c <HAL_RCC_GetPCLK1Freq>
 8003ee4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	4a81      	ldr	r2, [pc, #516]	; (80040f0 <HAL_I2C_Init+0x274>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d807      	bhi.n	8003f00 <HAL_I2C_Init+0x84>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4a80      	ldr	r2, [pc, #512]	; (80040f4 <HAL_I2C_Init+0x278>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	bf94      	ite	ls
 8003ef8:	2301      	movls	r3, #1
 8003efa:	2300      	movhi	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	e006      	b.n	8003f0e <HAL_I2C_Init+0x92>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4a7d      	ldr	r2, [pc, #500]	; (80040f8 <HAL_I2C_Init+0x27c>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	bf94      	ite	ls
 8003f08:	2301      	movls	r3, #1
 8003f0a:	2300      	movhi	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e0e7      	b.n	80040e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4a78      	ldr	r2, [pc, #480]	; (80040fc <HAL_I2C_Init+0x280>)
 8003f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1e:	0c9b      	lsrs	r3, r3, #18
 8003f20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	4a6a      	ldr	r2, [pc, #424]	; (80040f0 <HAL_I2C_Init+0x274>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d802      	bhi.n	8003f50 <HAL_I2C_Init+0xd4>
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	e009      	b.n	8003f64 <HAL_I2C_Init+0xe8>
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f56:	fb02 f303 	mul.w	r3, r2, r3
 8003f5a:	4a69      	ldr	r2, [pc, #420]	; (8004100 <HAL_I2C_Init+0x284>)
 8003f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f60:	099b      	lsrs	r3, r3, #6
 8003f62:	3301      	adds	r3, #1
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	6812      	ldr	r2, [r2, #0]
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	495c      	ldr	r1, [pc, #368]	; (80040f0 <HAL_I2C_Init+0x274>)
 8003f80:	428b      	cmp	r3, r1
 8003f82:	d819      	bhi.n	8003fb8 <HAL_I2C_Init+0x13c>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	1e59      	subs	r1, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f92:	1c59      	adds	r1, r3, #1
 8003f94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f98:	400b      	ands	r3, r1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <HAL_I2C_Init+0x138>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	1e59      	subs	r1, r3, #1
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fac:	3301      	adds	r3, #1
 8003fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb2:	e051      	b.n	8004058 <HAL_I2C_Init+0x1dc>
 8003fb4:	2304      	movs	r3, #4
 8003fb6:	e04f      	b.n	8004058 <HAL_I2C_Init+0x1dc>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d111      	bne.n	8003fe4 <HAL_I2C_Init+0x168>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	1e58      	subs	r0, r3, #1
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6859      	ldr	r1, [r3, #4]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	440b      	add	r3, r1
 8003fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	bf0c      	ite	eq
 8003fdc:	2301      	moveq	r3, #1
 8003fde:	2300      	movne	r3, #0
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	e012      	b.n	800400a <HAL_I2C_Init+0x18e>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	1e58      	subs	r0, r3, #1
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6859      	ldr	r1, [r3, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	0099      	lsls	r1, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004000:	2b00      	cmp	r3, #0
 8004002:	bf0c      	ite	eq
 8004004:	2301      	moveq	r3, #1
 8004006:	2300      	movne	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_I2C_Init+0x196>
 800400e:	2301      	movs	r3, #1
 8004010:	e022      	b.n	8004058 <HAL_I2C_Init+0x1dc>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10e      	bne.n	8004038 <HAL_I2C_Init+0x1bc>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	1e58      	subs	r0, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6859      	ldr	r1, [r3, #4]
 8004022:	460b      	mov	r3, r1
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	440b      	add	r3, r1
 8004028:	fbb0 f3f3 	udiv	r3, r0, r3
 800402c:	3301      	adds	r3, #1
 800402e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004036:	e00f      	b.n	8004058 <HAL_I2C_Init+0x1dc>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	1e58      	subs	r0, r3, #1
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6859      	ldr	r1, [r3, #4]
 8004040:	460b      	mov	r3, r1
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	0099      	lsls	r1, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	fbb0 f3f3 	udiv	r3, r0, r3
 800404e:	3301      	adds	r3, #1
 8004050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004054:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	6809      	ldr	r1, [r1, #0]
 800405c:	4313      	orrs	r3, r2
 800405e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69da      	ldr	r2, [r3, #28]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004086:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6911      	ldr	r1, [r2, #16]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	68d2      	ldr	r2, [r2, #12]
 8004092:	4311      	orrs	r1, r2
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6812      	ldr	r2, [r2, #0]
 8004098:	430b      	orrs	r3, r1
 800409a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695a      	ldr	r2, [r3, #20]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2220      	movs	r2, #32
 80040d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	000186a0 	.word	0x000186a0
 80040f4:	001e847f 	.word	0x001e847f
 80040f8:	003d08ff 	.word	0x003d08ff
 80040fc:	431bde83 	.word	0x431bde83
 8004100:	10624dd3 	.word	0x10624dd3

08004104 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b20      	cmp	r3, #32
 8004118:	d129      	bne.n	800416e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2224      	movs	r2, #36	; 0x24
 800411e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0201 	bic.w	r2, r2, #1
 8004130:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f022 0210 	bic.w	r2, r2, #16
 8004140:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 0201 	orr.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2220      	movs	r2, #32
 8004166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	e000      	b.n	8004170 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800416e:	2302      	movs	r3, #2
  }
}
 8004170:	4618      	mov	r0, r3
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004186:	2300      	movs	r3, #0
 8004188:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b20      	cmp	r3, #32
 8004194:	d12a      	bne.n	80041ec <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2224      	movs	r2, #36	; 0x24
 800419a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0201 	bic.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80041b6:	89fb      	ldrh	r3, [r7, #14]
 80041b8:	f023 030f 	bic.w	r3, r3, #15
 80041bc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	89fb      	ldrh	r3, [r7, #14]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	89fa      	ldrh	r2, [r7, #14]
 80041ce:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0201 	orr.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	e000      	b.n	80041ee <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80041ec:	2302      	movs	r3, #2
  }
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
	...

080041fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e264      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d075      	beq.n	8004306 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800421a:	4ba3      	ldr	r3, [pc, #652]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f003 030c 	and.w	r3, r3, #12
 8004222:	2b04      	cmp	r3, #4
 8004224:	d00c      	beq.n	8004240 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004226:	4ba0      	ldr	r3, [pc, #640]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800422e:	2b08      	cmp	r3, #8
 8004230:	d112      	bne.n	8004258 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004232:	4b9d      	ldr	r3, [pc, #628]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800423a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800423e:	d10b      	bne.n	8004258 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004240:	4b99      	ldr	r3, [pc, #612]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d05b      	beq.n	8004304 <HAL_RCC_OscConfig+0x108>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d157      	bne.n	8004304 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e23f      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004260:	d106      	bne.n	8004270 <HAL_RCC_OscConfig+0x74>
 8004262:	4b91      	ldr	r3, [pc, #580]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a90      	ldr	r2, [pc, #576]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	e01d      	b.n	80042ac <HAL_RCC_OscConfig+0xb0>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004278:	d10c      	bne.n	8004294 <HAL_RCC_OscConfig+0x98>
 800427a:	4b8b      	ldr	r3, [pc, #556]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a8a      	ldr	r2, [pc, #552]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	4b88      	ldr	r3, [pc, #544]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a87      	ldr	r2, [pc, #540]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800428c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	e00b      	b.n	80042ac <HAL_RCC_OscConfig+0xb0>
 8004294:	4b84      	ldr	r3, [pc, #528]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a83      	ldr	r2, [pc, #524]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800429a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	4b81      	ldr	r3, [pc, #516]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a80      	ldr	r2, [pc, #512]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 80042a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d013      	beq.n	80042dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b4:	f7fe ff2a 	bl	800310c <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042bc:	f7fe ff26 	bl	800310c <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b64      	cmp	r3, #100	; 0x64
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e204      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ce:	4b76      	ldr	r3, [pc, #472]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0f0      	beq.n	80042bc <HAL_RCC_OscConfig+0xc0>
 80042da:	e014      	b.n	8004306 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042dc:	f7fe ff16 	bl	800310c <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042e4:	f7fe ff12 	bl	800310c <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b64      	cmp	r3, #100	; 0x64
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e1f0      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042f6:	4b6c      	ldr	r3, [pc, #432]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0xe8>
 8004302:	e000      	b.n	8004306 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d063      	beq.n	80043da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004312:	4b65      	ldr	r3, [pc, #404]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00b      	beq.n	8004336 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800431e:	4b62      	ldr	r3, [pc, #392]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004326:	2b08      	cmp	r3, #8
 8004328:	d11c      	bne.n	8004364 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800432a:	4b5f      	ldr	r3, [pc, #380]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d116      	bne.n	8004364 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004336:	4b5c      	ldr	r3, [pc, #368]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <HAL_RCC_OscConfig+0x152>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68db      	ldr	r3, [r3, #12]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d001      	beq.n	800434e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e1c4      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800434e:	4b56      	ldr	r3, [pc, #344]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	00db      	lsls	r3, r3, #3
 800435c:	4952      	ldr	r1, [pc, #328]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800435e:	4313      	orrs	r3, r2
 8004360:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004362:	e03a      	b.n	80043da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d020      	beq.n	80043ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800436c:	4b4f      	ldr	r3, [pc, #316]	; (80044ac <HAL_RCC_OscConfig+0x2b0>)
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004372:	f7fe fecb 	bl	800310c <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800437a:	f7fe fec7 	bl	800310c <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e1a5      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800438c:	4b46      	ldr	r3, [pc, #280]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0f0      	beq.n	800437a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004398:	4b43      	ldr	r3, [pc, #268]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	4940      	ldr	r1, [pc, #256]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	600b      	str	r3, [r1, #0]
 80043ac:	e015      	b.n	80043da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ae:	4b3f      	ldr	r3, [pc, #252]	; (80044ac <HAL_RCC_OscConfig+0x2b0>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b4:	f7fe feaa 	bl	800310c <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043bc:	f7fe fea6 	bl	800310c <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e184      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ce:	4b36      	ldr	r3, [pc, #216]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f0      	bne.n	80043bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d030      	beq.n	8004448 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d016      	beq.n	800441c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ee:	4b30      	ldr	r3, [pc, #192]	; (80044b0 <HAL_RCC_OscConfig+0x2b4>)
 80043f0:	2201      	movs	r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043f4:	f7fe fe8a 	bl	800310c <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043fc:	f7fe fe86 	bl	800310c <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e164      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800440e:	4b26      	ldr	r3, [pc, #152]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0f0      	beq.n	80043fc <HAL_RCC_OscConfig+0x200>
 800441a:	e015      	b.n	8004448 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800441c:	4b24      	ldr	r3, [pc, #144]	; (80044b0 <HAL_RCC_OscConfig+0x2b4>)
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004422:	f7fe fe73 	bl	800310c <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800442a:	f7fe fe6f 	bl	800310c <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e14d      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800443c:	4b1a      	ldr	r3, [pc, #104]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800443e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f0      	bne.n	800442a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 80a0 	beq.w	8004596 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004456:	2300      	movs	r3, #0
 8004458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800445a:	4b13      	ldr	r3, [pc, #76]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10f      	bne.n	8004486 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004466:	2300      	movs	r3, #0
 8004468:	60bb      	str	r3, [r7, #8]
 800446a:	4b0f      	ldr	r3, [pc, #60]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	4a0e      	ldr	r2, [pc, #56]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004474:	6413      	str	r3, [r2, #64]	; 0x40
 8004476:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <HAL_RCC_OscConfig+0x2ac>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447e:	60bb      	str	r3, [r7, #8]
 8004480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004482:	2301      	movs	r3, #1
 8004484:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004486:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <HAL_RCC_OscConfig+0x2b8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448e:	2b00      	cmp	r3, #0
 8004490:	d121      	bne.n	80044d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004492:	4b08      	ldr	r3, [pc, #32]	; (80044b4 <HAL_RCC_OscConfig+0x2b8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a07      	ldr	r2, [pc, #28]	; (80044b4 <HAL_RCC_OscConfig+0x2b8>)
 8004498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800449c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800449e:	f7fe fe35 	bl	800310c <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a4:	e011      	b.n	80044ca <HAL_RCC_OscConfig+0x2ce>
 80044a6:	bf00      	nop
 80044a8:	40023800 	.word	0x40023800
 80044ac:	42470000 	.word	0x42470000
 80044b0:	42470e80 	.word	0x42470e80
 80044b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044b8:	f7fe fe28 	bl	800310c <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e106      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ca:	4b85      	ldr	r3, [pc, #532]	; (80046e0 <HAL_RCC_OscConfig+0x4e4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d106      	bne.n	80044ec <HAL_RCC_OscConfig+0x2f0>
 80044de:	4b81      	ldr	r3, [pc, #516]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e2:	4a80      	ldr	r2, [pc, #512]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 80044e4:	f043 0301 	orr.w	r3, r3, #1
 80044e8:	6713      	str	r3, [r2, #112]	; 0x70
 80044ea:	e01c      	b.n	8004526 <HAL_RCC_OscConfig+0x32a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	2b05      	cmp	r3, #5
 80044f2:	d10c      	bne.n	800450e <HAL_RCC_OscConfig+0x312>
 80044f4:	4b7b      	ldr	r3, [pc, #492]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 80044f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f8:	4a7a      	ldr	r2, [pc, #488]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 80044fa:	f043 0304 	orr.w	r3, r3, #4
 80044fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004500:	4b78      	ldr	r3, [pc, #480]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 8004502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004504:	4a77      	ldr	r2, [pc, #476]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 8004506:	f043 0301 	orr.w	r3, r3, #1
 800450a:	6713      	str	r3, [r2, #112]	; 0x70
 800450c:	e00b      	b.n	8004526 <HAL_RCC_OscConfig+0x32a>
 800450e:	4b75      	ldr	r3, [pc, #468]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	4a74      	ldr	r2, [pc, #464]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 8004514:	f023 0301 	bic.w	r3, r3, #1
 8004518:	6713      	str	r3, [r2, #112]	; 0x70
 800451a:	4b72      	ldr	r3, [pc, #456]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	4a71      	ldr	r2, [pc, #452]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 8004520:	f023 0304 	bic.w	r3, r3, #4
 8004524:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d015      	beq.n	800455a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452e:	f7fe fded 	bl	800310c <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004534:	e00a      	b.n	800454c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004536:	f7fe fde9 	bl	800310c <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	f241 3288 	movw	r2, #5000	; 0x1388
 8004544:	4293      	cmp	r3, r2
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e0c5      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800454c:	4b65      	ldr	r3, [pc, #404]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 800454e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0ee      	beq.n	8004536 <HAL_RCC_OscConfig+0x33a>
 8004558:	e014      	b.n	8004584 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800455a:	f7fe fdd7 	bl	800310c <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004560:	e00a      	b.n	8004578 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004562:	f7fe fdd3 	bl	800310c <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004570:	4293      	cmp	r3, r2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e0af      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004578:	4b5a      	ldr	r3, [pc, #360]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 800457a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1ee      	bne.n	8004562 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004584:	7dfb      	ldrb	r3, [r7, #23]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d105      	bne.n	8004596 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800458a:	4b56      	ldr	r3, [pc, #344]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	4a55      	ldr	r2, [pc, #340]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 8004590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004594:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 809b 	beq.w	80046d6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045a0:	4b50      	ldr	r3, [pc, #320]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 030c 	and.w	r3, r3, #12
 80045a8:	2b08      	cmp	r3, #8
 80045aa:	d05c      	beq.n	8004666 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d141      	bne.n	8004638 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b4:	4b4c      	ldr	r3, [pc, #304]	; (80046e8 <HAL_RCC_OscConfig+0x4ec>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ba:	f7fe fda7 	bl	800310c <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045c0:	e008      	b.n	80045d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045c2:	f7fe fda3 	bl	800310c <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e081      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d4:	4b43      	ldr	r3, [pc, #268]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1f0      	bne.n	80045c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69da      	ldr	r2, [r3, #28]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6a1b      	ldr	r3, [r3, #32]
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	019b      	lsls	r3, r3, #6
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f6:	085b      	lsrs	r3, r3, #1
 80045f8:	3b01      	subs	r3, #1
 80045fa:	041b      	lsls	r3, r3, #16
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004602:	061b      	lsls	r3, r3, #24
 8004604:	4937      	ldr	r1, [pc, #220]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 8004606:	4313      	orrs	r3, r2
 8004608:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800460a:	4b37      	ldr	r3, [pc, #220]	; (80046e8 <HAL_RCC_OscConfig+0x4ec>)
 800460c:	2201      	movs	r2, #1
 800460e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004610:	f7fe fd7c 	bl	800310c <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004618:	f7fe fd78 	bl	800310c <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e056      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800462a:	4b2e      	ldr	r3, [pc, #184]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f0      	beq.n	8004618 <HAL_RCC_OscConfig+0x41c>
 8004636:	e04e      	b.n	80046d6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004638:	4b2b      	ldr	r3, [pc, #172]	; (80046e8 <HAL_RCC_OscConfig+0x4ec>)
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800463e:	f7fe fd65 	bl	800310c <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004644:	e008      	b.n	8004658 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004646:	f7fe fd61 	bl	800310c <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d901      	bls.n	8004658 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e03f      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004658:	4b22      	ldr	r3, [pc, #136]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1f0      	bne.n	8004646 <HAL_RCC_OscConfig+0x44a>
 8004664:	e037      	b.n	80046d6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e032      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004672:	4b1c      	ldr	r3, [pc, #112]	; (80046e4 <HAL_RCC_OscConfig+0x4e8>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d028      	beq.n	80046d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d121      	bne.n	80046d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004698:	429a      	cmp	r2, r3
 800469a:	d11a      	bne.n	80046d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046a2:	4013      	ands	r3, r2
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046a8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d111      	bne.n	80046d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b8:	085b      	lsrs	r3, r3, #1
 80046ba:	3b01      	subs	r3, #1
 80046bc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046be:	429a      	cmp	r2, r3
 80046c0:	d107      	bne.n	80046d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d001      	beq.n	80046d6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40007000 	.word	0x40007000
 80046e4:	40023800 	.word	0x40023800
 80046e8:	42470060 	.word	0x42470060

080046ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0cc      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004700:	4b68      	ldr	r3, [pc, #416]	; (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 030f 	and.w	r3, r3, #15
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d90c      	bls.n	8004728 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800470e:	4b65      	ldr	r3, [pc, #404]	; (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004716:	4b63      	ldr	r3, [pc, #396]	; (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	683a      	ldr	r2, [r7, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d001      	beq.n	8004728 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0b8      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d020      	beq.n	8004776 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004740:	4b59      	ldr	r3, [pc, #356]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	4a58      	ldr	r2, [pc, #352]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800474a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004758:	4b53      	ldr	r3, [pc, #332]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	4a52      	ldr	r2, [pc, #328]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004762:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004764:	4b50      	ldr	r3, [pc, #320]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	494d      	ldr	r1, [pc, #308]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0301 	and.w	r3, r3, #1
 800477e:	2b00      	cmp	r3, #0
 8004780:	d044      	beq.n	800480c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d107      	bne.n	800479a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800478a:	4b47      	ldr	r3, [pc, #284]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d119      	bne.n	80047ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e07f      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d003      	beq.n	80047aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047a6:	2b03      	cmp	r3, #3
 80047a8:	d107      	bne.n	80047ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047aa:	4b3f      	ldr	r3, [pc, #252]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d109      	bne.n	80047ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e06f      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ba:	4b3b      	ldr	r3, [pc, #236]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e067      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ca:	4b37      	ldr	r3, [pc, #220]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f023 0203 	bic.w	r2, r3, #3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	4934      	ldr	r1, [pc, #208]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047dc:	f7fe fc96 	bl	800310c <HAL_GetTick>
 80047e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e2:	e00a      	b.n	80047fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047e4:	f7fe fc92 	bl	800310c <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e04f      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fa:	4b2b      	ldr	r3, [pc, #172]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 020c 	and.w	r2, r3, #12
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	429a      	cmp	r2, r3
 800480a:	d1eb      	bne.n	80047e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800480c:	4b25      	ldr	r3, [pc, #148]	; (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 030f 	and.w	r3, r3, #15
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d20c      	bcs.n	8004834 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481a:	4b22      	ldr	r3, [pc, #136]	; (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004822:	4b20      	ldr	r3, [pc, #128]	; (80048a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d001      	beq.n	8004834 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e032      	b.n	800489a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	2b00      	cmp	r3, #0
 800483e:	d008      	beq.n	8004852 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004840:	4b19      	ldr	r3, [pc, #100]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	4916      	ldr	r1, [pc, #88]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	4313      	orrs	r3, r2
 8004850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0308 	and.w	r3, r3, #8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800485e:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	490e      	ldr	r1, [pc, #56]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800486e:	4313      	orrs	r3, r2
 8004870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004872:	f000 f821 	bl	80048b8 <HAL_RCC_GetSysClockFreq>
 8004876:	4602      	mov	r2, r0
 8004878:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	091b      	lsrs	r3, r3, #4
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	490a      	ldr	r1, [pc, #40]	; (80048ac <HAL_RCC_ClockConfig+0x1c0>)
 8004884:	5ccb      	ldrb	r3, [r1, r3]
 8004886:	fa22 f303 	lsr.w	r3, r2, r3
 800488a:	4a09      	ldr	r2, [pc, #36]	; (80048b0 <HAL_RCC_ClockConfig+0x1c4>)
 800488c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800488e:	4b09      	ldr	r3, [pc, #36]	; (80048b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe fbf6 	bl	8003084 <HAL_InitTick>

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40023c00 	.word	0x40023c00
 80048a8:	40023800 	.word	0x40023800
 80048ac:	0800aa20 	.word	0x0800aa20
 80048b0:	20000000 	.word	0x20000000
 80048b4:	20000008 	.word	0x20000008

080048b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048b8:	b5b0      	push	{r4, r5, r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048be:	2100      	movs	r1, #0
 80048c0:	6079      	str	r1, [r7, #4]
 80048c2:	2100      	movs	r1, #0
 80048c4:	60f9      	str	r1, [r7, #12]
 80048c6:	2100      	movs	r1, #0
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048ca:	2100      	movs	r1, #0
 80048cc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048ce:	4952      	ldr	r1, [pc, #328]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x160>)
 80048d0:	6889      	ldr	r1, [r1, #8]
 80048d2:	f001 010c 	and.w	r1, r1, #12
 80048d6:	2908      	cmp	r1, #8
 80048d8:	d00d      	beq.n	80048f6 <HAL_RCC_GetSysClockFreq+0x3e>
 80048da:	2908      	cmp	r1, #8
 80048dc:	f200 8094 	bhi.w	8004a08 <HAL_RCC_GetSysClockFreq+0x150>
 80048e0:	2900      	cmp	r1, #0
 80048e2:	d002      	beq.n	80048ea <HAL_RCC_GetSysClockFreq+0x32>
 80048e4:	2904      	cmp	r1, #4
 80048e6:	d003      	beq.n	80048f0 <HAL_RCC_GetSysClockFreq+0x38>
 80048e8:	e08e      	b.n	8004a08 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048ea:	4b4c      	ldr	r3, [pc, #304]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x164>)
 80048ec:	60bb      	str	r3, [r7, #8]
       break;
 80048ee:	e08e      	b.n	8004a0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048f0:	4b4b      	ldr	r3, [pc, #300]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x168>)
 80048f2:	60bb      	str	r3, [r7, #8]
      break;
 80048f4:	e08b      	b.n	8004a0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048f6:	4948      	ldr	r1, [pc, #288]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x160>)
 80048f8:	6849      	ldr	r1, [r1, #4]
 80048fa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80048fe:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004900:	4945      	ldr	r1, [pc, #276]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x160>)
 8004902:	6849      	ldr	r1, [r1, #4]
 8004904:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004908:	2900      	cmp	r1, #0
 800490a:	d024      	beq.n	8004956 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800490c:	4942      	ldr	r1, [pc, #264]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x160>)
 800490e:	6849      	ldr	r1, [r1, #4]
 8004910:	0989      	lsrs	r1, r1, #6
 8004912:	4608      	mov	r0, r1
 8004914:	f04f 0100 	mov.w	r1, #0
 8004918:	f240 14ff 	movw	r4, #511	; 0x1ff
 800491c:	f04f 0500 	mov.w	r5, #0
 8004920:	ea00 0204 	and.w	r2, r0, r4
 8004924:	ea01 0305 	and.w	r3, r1, r5
 8004928:	493d      	ldr	r1, [pc, #244]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x168>)
 800492a:	fb01 f003 	mul.w	r0, r1, r3
 800492e:	2100      	movs	r1, #0
 8004930:	fb01 f102 	mul.w	r1, r1, r2
 8004934:	1844      	adds	r4, r0, r1
 8004936:	493a      	ldr	r1, [pc, #232]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x168>)
 8004938:	fba2 0101 	umull	r0, r1, r2, r1
 800493c:	1863      	adds	r3, r4, r1
 800493e:	4619      	mov	r1, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	461a      	mov	r2, r3
 8004944:	f04f 0300 	mov.w	r3, #0
 8004948:	f7fc f9ae 	bl	8000ca8 <__aeabi_uldivmod>
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	4613      	mov	r3, r2
 8004952:	60fb      	str	r3, [r7, #12]
 8004954:	e04a      	b.n	80049ec <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004956:	4b30      	ldr	r3, [pc, #192]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x160>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	099b      	lsrs	r3, r3, #6
 800495c:	461a      	mov	r2, r3
 800495e:	f04f 0300 	mov.w	r3, #0
 8004962:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004966:	f04f 0100 	mov.w	r1, #0
 800496a:	ea02 0400 	and.w	r4, r2, r0
 800496e:	ea03 0501 	and.w	r5, r3, r1
 8004972:	4620      	mov	r0, r4
 8004974:	4629      	mov	r1, r5
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	014b      	lsls	r3, r1, #5
 8004980:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004984:	0142      	lsls	r2, r0, #5
 8004986:	4610      	mov	r0, r2
 8004988:	4619      	mov	r1, r3
 800498a:	1b00      	subs	r0, r0, r4
 800498c:	eb61 0105 	sbc.w	r1, r1, r5
 8004990:	f04f 0200 	mov.w	r2, #0
 8004994:	f04f 0300 	mov.w	r3, #0
 8004998:	018b      	lsls	r3, r1, #6
 800499a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800499e:	0182      	lsls	r2, r0, #6
 80049a0:	1a12      	subs	r2, r2, r0
 80049a2:	eb63 0301 	sbc.w	r3, r3, r1
 80049a6:	f04f 0000 	mov.w	r0, #0
 80049aa:	f04f 0100 	mov.w	r1, #0
 80049ae:	00d9      	lsls	r1, r3, #3
 80049b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049b4:	00d0      	lsls	r0, r2, #3
 80049b6:	4602      	mov	r2, r0
 80049b8:	460b      	mov	r3, r1
 80049ba:	1912      	adds	r2, r2, r4
 80049bc:	eb45 0303 	adc.w	r3, r5, r3
 80049c0:	f04f 0000 	mov.w	r0, #0
 80049c4:	f04f 0100 	mov.w	r1, #0
 80049c8:	0299      	lsls	r1, r3, #10
 80049ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80049ce:	0290      	lsls	r0, r2, #10
 80049d0:	4602      	mov	r2, r0
 80049d2:	460b      	mov	r3, r1
 80049d4:	4610      	mov	r0, r2
 80049d6:	4619      	mov	r1, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	461a      	mov	r2, r3
 80049dc:	f04f 0300 	mov.w	r3, #0
 80049e0:	f7fc f962 	bl	8000ca8 <__aeabi_uldivmod>
 80049e4:	4602      	mov	r2, r0
 80049e6:	460b      	mov	r3, r1
 80049e8:	4613      	mov	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049ec:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <HAL_RCC_GetSysClockFreq+0x160>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	0c1b      	lsrs	r3, r3, #16
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	3301      	adds	r3, #1
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a04:	60bb      	str	r3, [r7, #8]
      break;
 8004a06:	e002      	b.n	8004a0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a08:	4b04      	ldr	r3, [pc, #16]	; (8004a1c <HAL_RCC_GetSysClockFreq+0x164>)
 8004a0a:	60bb      	str	r3, [r7, #8]
      break;
 8004a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a0e:	68bb      	ldr	r3, [r7, #8]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bdb0      	pop	{r4, r5, r7, pc}
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	00f42400 	.word	0x00f42400
 8004a20:	017d7840 	.word	0x017d7840

08004a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a28:	4b03      	ldr	r3, [pc, #12]	; (8004a38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	20000000 	.word	0x20000000

08004a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a40:	f7ff fff0 	bl	8004a24 <HAL_RCC_GetHCLKFreq>
 8004a44:	4602      	mov	r2, r0
 8004a46:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	0a9b      	lsrs	r3, r3, #10
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	4903      	ldr	r1, [pc, #12]	; (8004a60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a52:	5ccb      	ldrb	r3, [r1, r3]
 8004a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	0800aa30 	.word	0x0800aa30

08004a64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a68:	f7ff ffdc 	bl	8004a24 <HAL_RCC_GetHCLKFreq>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	0b5b      	lsrs	r3, r3, #13
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	4903      	ldr	r1, [pc, #12]	; (8004a88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a7a:	5ccb      	ldrb	r3, [r1, r3]
 8004a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40023800 	.word	0x40023800
 8004a88:	0800aa30 	.word	0x0800aa30

08004a8c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e01c      	b.n	8004ad8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	795b      	ldrb	r3, [r3, #5]
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d105      	bne.n	8004ab4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fd f91a 	bl	8001ce8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f042 0204 	orr.w	r2, r2, #4
 8004ac8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e07b      	b.n	8004bea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d108      	bne.n	8004b0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b02:	d009      	beq.n	8004b18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	61da      	str	r2, [r3, #28]
 8004b0a:	e005      	b.n	8004b18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d106      	bne.n	8004b38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7fd f930 	bl	8001d98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	431a      	orrs	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9c:	ea42 0103 	orr.w	r1, r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	0c1b      	lsrs	r3, r3, #16
 8004bb6:	f003 0104 	and.w	r1, r3, #4
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbe:	f003 0210 	and.w	r2, r3, #16
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	69da      	ldr	r2, [r3, #28]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b088      	sub	sp, #32
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	603b      	str	r3, [r7, #0]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d101      	bne.n	8004c14 <HAL_SPI_Transmit+0x22>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e126      	b.n	8004e62 <HAL_SPI_Transmit+0x270>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c1c:	f7fe fa76 	bl	800310c <HAL_GetTick>
 8004c20:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c22:	88fb      	ldrh	r3, [r7, #6]
 8004c24:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d002      	beq.n	8004c38 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c32:	2302      	movs	r3, #2
 8004c34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c36:	e10b      	b.n	8004e50 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d002      	beq.n	8004c44 <HAL_SPI_Transmit+0x52>
 8004c3e:	88fb      	ldrh	r3, [r7, #6]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d102      	bne.n	8004c4a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c48:	e102      	b.n	8004e50 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2203      	movs	r2, #3
 8004c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	88fa      	ldrh	r2, [r7, #6]
 8004c62:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	88fa      	ldrh	r2, [r7, #6]
 8004c68:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c90:	d10f      	bne.n	8004cb2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cb0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cbc:	2b40      	cmp	r3, #64	; 0x40
 8004cbe:	d007      	beq.n	8004cd0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cd8:	d14b      	bne.n	8004d72 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d002      	beq.n	8004ce8 <HAL_SPI_Transmit+0xf6>
 8004ce2:	8afb      	ldrh	r3, [r7, #22]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d13e      	bne.n	8004d66 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cec:	881a      	ldrh	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf8:	1c9a      	adds	r2, r3, #2
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	3b01      	subs	r3, #1
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d0c:	e02b      	b.n	8004d66 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d112      	bne.n	8004d42 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d20:	881a      	ldrh	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2c:	1c9a      	adds	r2, r3, #2
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	b29a      	uxth	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d40:	e011      	b.n	8004d66 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d42:	f7fe f9e3 	bl	800310c <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d803      	bhi.n	8004d5a <HAL_SPI_Transmit+0x168>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d58:	d102      	bne.n	8004d60 <HAL_SPI_Transmit+0x16e>
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d102      	bne.n	8004d66 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d64:	e074      	b.n	8004e50 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1ce      	bne.n	8004d0e <HAL_SPI_Transmit+0x11c>
 8004d70:	e04c      	b.n	8004e0c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <HAL_SPI_Transmit+0x18e>
 8004d7a:	8afb      	ldrh	r3, [r7, #22]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d140      	bne.n	8004e02 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	330c      	adds	r3, #12
 8004d8a:	7812      	ldrb	r2, [r2, #0]
 8004d8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d92:	1c5a      	adds	r2, r3, #1
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	3b01      	subs	r3, #1
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004da6:	e02c      	b.n	8004e02 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d113      	bne.n	8004dde <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	330c      	adds	r3, #12
 8004dc0:	7812      	ldrb	r2, [r2, #0]
 8004dc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ddc:	e011      	b.n	8004e02 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dde:	f7fe f995 	bl	800310c <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d803      	bhi.n	8004df6 <HAL_SPI_Transmit+0x204>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df4:	d102      	bne.n	8004dfc <HAL_SPI_Transmit+0x20a>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d102      	bne.n	8004e02 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e00:	e026      	b.n	8004e50 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1cd      	bne.n	8004da8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	6839      	ldr	r1, [r7, #0]
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f000 f8b3 	bl	8004f7c <SPI_EndRxTxTransaction>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10a      	bne.n	8004e40 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	613b      	str	r3, [r7, #16]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	613b      	str	r3, [r7, #16]
 8004e3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	77fb      	strb	r3, [r7, #31]
 8004e4c:	e000      	b.n	8004e50 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004e4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e60:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3720      	adds	r7, #32
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e7c:	f7fe f946 	bl	800310c <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e84:	1a9b      	subs	r3, r3, r2
 8004e86:	683a      	ldr	r2, [r7, #0]
 8004e88:	4413      	add	r3, r2
 8004e8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e8c:	f7fe f93e 	bl	800310c <HAL_GetTick>
 8004e90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e92:	4b39      	ldr	r3, [pc, #228]	; (8004f78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	015b      	lsls	r3, r3, #5
 8004e98:	0d1b      	lsrs	r3, r3, #20
 8004e9a:	69fa      	ldr	r2, [r7, #28]
 8004e9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ea0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ea2:	e054      	b.n	8004f4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eaa:	d050      	beq.n	8004f4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004eac:	f7fe f92e 	bl	800310c <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d902      	bls.n	8004ec2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d13d      	bne.n	8004f3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685a      	ldr	r2, [r3, #4]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ed0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eda:	d111      	bne.n	8004f00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ee4:	d004      	beq.n	8004ef0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eee:	d107      	bne.n	8004f00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004efe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f08:	d10f      	bne.n	8004f2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e017      	b.n	8004f6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4013      	ands	r3, r2
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	bf0c      	ite	eq
 8004f5e:	2301      	moveq	r3, #1
 8004f60:	2300      	movne	r3, #0
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	461a      	mov	r2, r3
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d19b      	bne.n	8004ea4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3720      	adds	r7, #32
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	20000000 	.word	0x20000000

08004f7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f88:	4b1b      	ldr	r3, [pc, #108]	; (8004ff8 <SPI_EndRxTxTransaction+0x7c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a1b      	ldr	r2, [pc, #108]	; (8004ffc <SPI_EndRxTxTransaction+0x80>)
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	0d5b      	lsrs	r3, r3, #21
 8004f94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f98:	fb02 f303 	mul.w	r3, r2, r3
 8004f9c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fa6:	d112      	bne.n	8004fce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2180      	movs	r1, #128	; 0x80
 8004fb2:	68f8      	ldr	r0, [r7, #12]
 8004fb4:	f7ff ff5a 	bl	8004e6c <SPI_WaitFlagStateUntilTimeout>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d016      	beq.n	8004fec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc2:	f043 0220 	orr.w	r2, r3, #32
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e00f      	b.n	8004fee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe4:	2b80      	cmp	r3, #128	; 0x80
 8004fe6:	d0f2      	beq.n	8004fce <SPI_EndRxTxTransaction+0x52>
 8004fe8:	e000      	b.n	8004fec <SPI_EndRxTxTransaction+0x70>
        break;
 8004fea:	bf00      	nop
  }

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20000000 	.word	0x20000000
 8004ffc:	165e9f81 	.word	0x165e9f81

08005000 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e041      	b.n	8005096 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d106      	bne.n	800502c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7fd f962 	bl	80022f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3304      	adds	r3, #4
 800503c:	4619      	mov	r1, r3
 800503e:	4610      	mov	r0, r2
 8005040:	f000 face 	bl	80055e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b082      	sub	sp, #8
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e041      	b.n	8005134 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d106      	bne.n	80050ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7fd f94b 	bl	8002360 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2202      	movs	r2, #2
 80050ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3304      	adds	r3, #4
 80050da:	4619      	mov	r1, r3
 80050dc:	4610      	mov	r0, r2
 80050de:	f000 fa7f 	bl	80055e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d109      	bne.n	8005160 <HAL_TIM_PWM_Start+0x24>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b01      	cmp	r3, #1
 8005156:	bf14      	ite	ne
 8005158:	2301      	movne	r3, #1
 800515a:	2300      	moveq	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	e022      	b.n	80051a6 <HAL_TIM_PWM_Start+0x6a>
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	2b04      	cmp	r3, #4
 8005164:	d109      	bne.n	800517a <HAL_TIM_PWM_Start+0x3e>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b01      	cmp	r3, #1
 8005170:	bf14      	ite	ne
 8005172:	2301      	movne	r3, #1
 8005174:	2300      	moveq	r3, #0
 8005176:	b2db      	uxtb	r3, r3
 8005178:	e015      	b.n	80051a6 <HAL_TIM_PWM_Start+0x6a>
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b08      	cmp	r3, #8
 800517e:	d109      	bne.n	8005194 <HAL_TIM_PWM_Start+0x58>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b01      	cmp	r3, #1
 800518a:	bf14      	ite	ne
 800518c:	2301      	movne	r3, #1
 800518e:	2300      	moveq	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	e008      	b.n	80051a6 <HAL_TIM_PWM_Start+0x6a>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b01      	cmp	r3, #1
 800519e:	bf14      	ite	ne
 80051a0:	2301      	movne	r3, #1
 80051a2:	2300      	moveq	r3, #0
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e07c      	b.n	80052a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d104      	bne.n	80051be <HAL_TIM_PWM_Start+0x82>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051bc:	e013      	b.n	80051e6 <HAL_TIM_PWM_Start+0xaa>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b04      	cmp	r3, #4
 80051c2:	d104      	bne.n	80051ce <HAL_TIM_PWM_Start+0x92>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051cc:	e00b      	b.n	80051e6 <HAL_TIM_PWM_Start+0xaa>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d104      	bne.n	80051de <HAL_TIM_PWM_Start+0xa2>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051dc:	e003      	b.n	80051e6 <HAL_TIM_PWM_Start+0xaa>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2202      	movs	r2, #2
 80051e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2201      	movs	r2, #1
 80051ec:	6839      	ldr	r1, [r7, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 fce0 	bl	8005bb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a2d      	ldr	r2, [pc, #180]	; (80052b0 <HAL_TIM_PWM_Start+0x174>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d004      	beq.n	8005208 <HAL_TIM_PWM_Start+0xcc>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a2c      	ldr	r2, [pc, #176]	; (80052b4 <HAL_TIM_PWM_Start+0x178>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d101      	bne.n	800520c <HAL_TIM_PWM_Start+0xd0>
 8005208:	2301      	movs	r3, #1
 800520a:	e000      	b.n	800520e <HAL_TIM_PWM_Start+0xd2>
 800520c:	2300      	movs	r3, #0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d007      	beq.n	8005222 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005220:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a22      	ldr	r2, [pc, #136]	; (80052b0 <HAL_TIM_PWM_Start+0x174>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d022      	beq.n	8005272 <HAL_TIM_PWM_Start+0x136>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005234:	d01d      	beq.n	8005272 <HAL_TIM_PWM_Start+0x136>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a1f      	ldr	r2, [pc, #124]	; (80052b8 <HAL_TIM_PWM_Start+0x17c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d018      	beq.n	8005272 <HAL_TIM_PWM_Start+0x136>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a1d      	ldr	r2, [pc, #116]	; (80052bc <HAL_TIM_PWM_Start+0x180>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d013      	beq.n	8005272 <HAL_TIM_PWM_Start+0x136>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a1c      	ldr	r2, [pc, #112]	; (80052c0 <HAL_TIM_PWM_Start+0x184>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d00e      	beq.n	8005272 <HAL_TIM_PWM_Start+0x136>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a16      	ldr	r2, [pc, #88]	; (80052b4 <HAL_TIM_PWM_Start+0x178>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d009      	beq.n	8005272 <HAL_TIM_PWM_Start+0x136>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a18      	ldr	r2, [pc, #96]	; (80052c4 <HAL_TIM_PWM_Start+0x188>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d004      	beq.n	8005272 <HAL_TIM_PWM_Start+0x136>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a16      	ldr	r2, [pc, #88]	; (80052c8 <HAL_TIM_PWM_Start+0x18c>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d111      	bne.n	8005296 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2b06      	cmp	r3, #6
 8005282:	d010      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0201 	orr.w	r2, r2, #1
 8005292:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005294:	e007      	b.n	80052a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f042 0201 	orr.w	r2, r2, #1
 80052a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	40010000 	.word	0x40010000
 80052b4:	40010400 	.word	0x40010400
 80052b8:	40000400 	.word	0x40000400
 80052bc:	40000800 	.word	0x40000800
 80052c0:	40000c00 	.word	0x40000c00
 80052c4:	40014000 	.word	0x40014000
 80052c8:	40001800 	.word	0x40001800

080052cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052e6:	2302      	movs	r3, #2
 80052e8:	e0ae      	b.n	8005448 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b0c      	cmp	r3, #12
 80052f6:	f200 809f 	bhi.w	8005438 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80052fa:	a201      	add	r2, pc, #4	; (adr r2, 8005300 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005300:	08005335 	.word	0x08005335
 8005304:	08005439 	.word	0x08005439
 8005308:	08005439 	.word	0x08005439
 800530c:	08005439 	.word	0x08005439
 8005310:	08005375 	.word	0x08005375
 8005314:	08005439 	.word	0x08005439
 8005318:	08005439 	.word	0x08005439
 800531c:	08005439 	.word	0x08005439
 8005320:	080053b7 	.word	0x080053b7
 8005324:	08005439 	.word	0x08005439
 8005328:	08005439 	.word	0x08005439
 800532c:	08005439 	.word	0x08005439
 8005330:	080053f7 	.word	0x080053f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68b9      	ldr	r1, [r7, #8]
 800533a:	4618      	mov	r0, r3
 800533c:	f000 f9f0 	bl	8005720 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699a      	ldr	r2, [r3, #24]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0208 	orr.w	r2, r2, #8
 800534e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699a      	ldr	r2, [r3, #24]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0204 	bic.w	r2, r2, #4
 800535e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6999      	ldr	r1, [r3, #24]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	691a      	ldr	r2, [r3, #16]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	619a      	str	r2, [r3, #24]
      break;
 8005372:	e064      	b.n	800543e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68b9      	ldr	r1, [r7, #8]
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fa40 	bl	8005800 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800538e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699a      	ldr	r2, [r3, #24]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800539e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6999      	ldr	r1, [r3, #24]
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	021a      	lsls	r2, r3, #8
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	619a      	str	r2, [r3, #24]
      break;
 80053b4:	e043      	b.n	800543e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68b9      	ldr	r1, [r7, #8]
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 fa95 	bl	80058ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69da      	ldr	r2, [r3, #28]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f042 0208 	orr.w	r2, r2, #8
 80053d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69da      	ldr	r2, [r3, #28]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 0204 	bic.w	r2, r2, #4
 80053e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	69d9      	ldr	r1, [r3, #28]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	61da      	str	r2, [r3, #28]
      break;
 80053f4:	e023      	b.n	800543e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68b9      	ldr	r1, [r7, #8]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 fae9 	bl	80059d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69da      	ldr	r2, [r3, #28]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69d9      	ldr	r1, [r3, #28]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	021a      	lsls	r2, r3, #8
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	61da      	str	r2, [r3, #28]
      break;
 8005436:	e002      	b.n	800543e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	75fb      	strb	r3, [r7, #23]
      break;
 800543c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005446:	7dfb      	ldrb	r3, [r7, #23]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_TIM_ConfigClockSource+0x1c>
 8005468:	2302      	movs	r3, #2
 800546a:	e0b4      	b.n	80055d6 <HAL_TIM_ConfigClockSource+0x186>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800548a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005492:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054a4:	d03e      	beq.n	8005524 <HAL_TIM_ConfigClockSource+0xd4>
 80054a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054aa:	f200 8087 	bhi.w	80055bc <HAL_TIM_ConfigClockSource+0x16c>
 80054ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054b2:	f000 8086 	beq.w	80055c2 <HAL_TIM_ConfigClockSource+0x172>
 80054b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ba:	d87f      	bhi.n	80055bc <HAL_TIM_ConfigClockSource+0x16c>
 80054bc:	2b70      	cmp	r3, #112	; 0x70
 80054be:	d01a      	beq.n	80054f6 <HAL_TIM_ConfigClockSource+0xa6>
 80054c0:	2b70      	cmp	r3, #112	; 0x70
 80054c2:	d87b      	bhi.n	80055bc <HAL_TIM_ConfigClockSource+0x16c>
 80054c4:	2b60      	cmp	r3, #96	; 0x60
 80054c6:	d050      	beq.n	800556a <HAL_TIM_ConfigClockSource+0x11a>
 80054c8:	2b60      	cmp	r3, #96	; 0x60
 80054ca:	d877      	bhi.n	80055bc <HAL_TIM_ConfigClockSource+0x16c>
 80054cc:	2b50      	cmp	r3, #80	; 0x50
 80054ce:	d03c      	beq.n	800554a <HAL_TIM_ConfigClockSource+0xfa>
 80054d0:	2b50      	cmp	r3, #80	; 0x50
 80054d2:	d873      	bhi.n	80055bc <HAL_TIM_ConfigClockSource+0x16c>
 80054d4:	2b40      	cmp	r3, #64	; 0x40
 80054d6:	d058      	beq.n	800558a <HAL_TIM_ConfigClockSource+0x13a>
 80054d8:	2b40      	cmp	r3, #64	; 0x40
 80054da:	d86f      	bhi.n	80055bc <HAL_TIM_ConfigClockSource+0x16c>
 80054dc:	2b30      	cmp	r3, #48	; 0x30
 80054de:	d064      	beq.n	80055aa <HAL_TIM_ConfigClockSource+0x15a>
 80054e0:	2b30      	cmp	r3, #48	; 0x30
 80054e2:	d86b      	bhi.n	80055bc <HAL_TIM_ConfigClockSource+0x16c>
 80054e4:	2b20      	cmp	r3, #32
 80054e6:	d060      	beq.n	80055aa <HAL_TIM_ConfigClockSource+0x15a>
 80054e8:	2b20      	cmp	r3, #32
 80054ea:	d867      	bhi.n	80055bc <HAL_TIM_ConfigClockSource+0x16c>
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d05c      	beq.n	80055aa <HAL_TIM_ConfigClockSource+0x15a>
 80054f0:	2b10      	cmp	r3, #16
 80054f2:	d05a      	beq.n	80055aa <HAL_TIM_ConfigClockSource+0x15a>
 80054f4:	e062      	b.n	80055bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6818      	ldr	r0, [r3, #0]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6899      	ldr	r1, [r3, #8]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f000 fb35 	bl	8005b74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005518:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	609a      	str	r2, [r3, #8]
      break;
 8005522:	e04f      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6818      	ldr	r0, [r3, #0]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	6899      	ldr	r1, [r3, #8]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f000 fb1e 	bl	8005b74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005546:	609a      	str	r2, [r3, #8]
      break;
 8005548:	e03c      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6818      	ldr	r0, [r3, #0]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	6859      	ldr	r1, [r3, #4]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	461a      	mov	r2, r3
 8005558:	f000 fa92 	bl	8005a80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2150      	movs	r1, #80	; 0x50
 8005562:	4618      	mov	r0, r3
 8005564:	f000 faeb 	bl	8005b3e <TIM_ITRx_SetConfig>
      break;
 8005568:	e02c      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6818      	ldr	r0, [r3, #0]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	6859      	ldr	r1, [r3, #4]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	461a      	mov	r2, r3
 8005578:	f000 fab1 	bl	8005ade <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2160      	movs	r1, #96	; 0x60
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fadb 	bl	8005b3e <TIM_ITRx_SetConfig>
      break;
 8005588:	e01c      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6818      	ldr	r0, [r3, #0]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	6859      	ldr	r1, [r3, #4]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	461a      	mov	r2, r3
 8005598:	f000 fa72 	bl	8005a80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2140      	movs	r1, #64	; 0x40
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 facb 	bl	8005b3e <TIM_ITRx_SetConfig>
      break;
 80055a8:	e00c      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4619      	mov	r1, r3
 80055b4:	4610      	mov	r0, r2
 80055b6:	f000 fac2 	bl	8005b3e <TIM_ITRx_SetConfig>
      break;
 80055ba:	e003      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	73fb      	strb	r3, [r7, #15]
      break;
 80055c0:	e000      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a40      	ldr	r2, [pc, #256]	; (80056f4 <TIM_Base_SetConfig+0x114>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d013      	beq.n	8005620 <TIM_Base_SetConfig+0x40>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055fe:	d00f      	beq.n	8005620 <TIM_Base_SetConfig+0x40>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a3d      	ldr	r2, [pc, #244]	; (80056f8 <TIM_Base_SetConfig+0x118>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00b      	beq.n	8005620 <TIM_Base_SetConfig+0x40>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a3c      	ldr	r2, [pc, #240]	; (80056fc <TIM_Base_SetConfig+0x11c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d007      	beq.n	8005620 <TIM_Base_SetConfig+0x40>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a3b      	ldr	r2, [pc, #236]	; (8005700 <TIM_Base_SetConfig+0x120>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d003      	beq.n	8005620 <TIM_Base_SetConfig+0x40>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a3a      	ldr	r2, [pc, #232]	; (8005704 <TIM_Base_SetConfig+0x124>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d108      	bne.n	8005632 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005626:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	4313      	orrs	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a2f      	ldr	r2, [pc, #188]	; (80056f4 <TIM_Base_SetConfig+0x114>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d02b      	beq.n	8005692 <TIM_Base_SetConfig+0xb2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005640:	d027      	beq.n	8005692 <TIM_Base_SetConfig+0xb2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a2c      	ldr	r2, [pc, #176]	; (80056f8 <TIM_Base_SetConfig+0x118>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d023      	beq.n	8005692 <TIM_Base_SetConfig+0xb2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a2b      	ldr	r2, [pc, #172]	; (80056fc <TIM_Base_SetConfig+0x11c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d01f      	beq.n	8005692 <TIM_Base_SetConfig+0xb2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a2a      	ldr	r2, [pc, #168]	; (8005700 <TIM_Base_SetConfig+0x120>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d01b      	beq.n	8005692 <TIM_Base_SetConfig+0xb2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a29      	ldr	r2, [pc, #164]	; (8005704 <TIM_Base_SetConfig+0x124>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d017      	beq.n	8005692 <TIM_Base_SetConfig+0xb2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a28      	ldr	r2, [pc, #160]	; (8005708 <TIM_Base_SetConfig+0x128>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d013      	beq.n	8005692 <TIM_Base_SetConfig+0xb2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a27      	ldr	r2, [pc, #156]	; (800570c <TIM_Base_SetConfig+0x12c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d00f      	beq.n	8005692 <TIM_Base_SetConfig+0xb2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a26      	ldr	r2, [pc, #152]	; (8005710 <TIM_Base_SetConfig+0x130>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00b      	beq.n	8005692 <TIM_Base_SetConfig+0xb2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a25      	ldr	r2, [pc, #148]	; (8005714 <TIM_Base_SetConfig+0x134>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d007      	beq.n	8005692 <TIM_Base_SetConfig+0xb2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a24      	ldr	r2, [pc, #144]	; (8005718 <TIM_Base_SetConfig+0x138>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d003      	beq.n	8005692 <TIM_Base_SetConfig+0xb2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a23      	ldr	r2, [pc, #140]	; (800571c <TIM_Base_SetConfig+0x13c>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d108      	bne.n	80056a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	689a      	ldr	r2, [r3, #8]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a0a      	ldr	r2, [pc, #40]	; (80056f4 <TIM_Base_SetConfig+0x114>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d003      	beq.n	80056d8 <TIM_Base_SetConfig+0xf8>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a0c      	ldr	r2, [pc, #48]	; (8005704 <TIM_Base_SetConfig+0x124>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d103      	bne.n	80056e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	691a      	ldr	r2, [r3, #16]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	615a      	str	r2, [r3, #20]
}
 80056e6:	bf00      	nop
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	40010000 	.word	0x40010000
 80056f8:	40000400 	.word	0x40000400
 80056fc:	40000800 	.word	0x40000800
 8005700:	40000c00 	.word	0x40000c00
 8005704:	40010400 	.word	0x40010400
 8005708:	40014000 	.word	0x40014000
 800570c:	40014400 	.word	0x40014400
 8005710:	40014800 	.word	0x40014800
 8005714:	40001800 	.word	0x40001800
 8005718:	40001c00 	.word	0x40001c00
 800571c:	40002000 	.word	0x40002000

08005720 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	f023 0201 	bic.w	r2, r3, #1
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0303 	bic.w	r3, r3, #3
 8005756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4313      	orrs	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f023 0302 	bic.w	r3, r3, #2
 8005768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4313      	orrs	r3, r2
 8005772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a20      	ldr	r2, [pc, #128]	; (80057f8 <TIM_OC1_SetConfig+0xd8>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d003      	beq.n	8005784 <TIM_OC1_SetConfig+0x64>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a1f      	ldr	r2, [pc, #124]	; (80057fc <TIM_OC1_SetConfig+0xdc>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d10c      	bne.n	800579e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f023 0308 	bic.w	r3, r3, #8
 800578a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	4313      	orrs	r3, r2
 8005794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f023 0304 	bic.w	r3, r3, #4
 800579c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a15      	ldr	r2, [pc, #84]	; (80057f8 <TIM_OC1_SetConfig+0xd8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d003      	beq.n	80057ae <TIM_OC1_SetConfig+0x8e>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a14      	ldr	r2, [pc, #80]	; (80057fc <TIM_OC1_SetConfig+0xdc>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d111      	bne.n	80057d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	621a      	str	r2, [r3, #32]
}
 80057ec:	bf00      	nop
 80057ee:	371c      	adds	r7, #28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	40010000 	.word	0x40010000
 80057fc:	40010400 	.word	0x40010400

08005800 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	f023 0210 	bic.w	r2, r3, #16
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800582e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	021b      	lsls	r3, r3, #8
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4313      	orrs	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f023 0320 	bic.w	r3, r3, #32
 800584a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	011b      	lsls	r3, r3, #4
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	4313      	orrs	r3, r2
 8005856:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a22      	ldr	r2, [pc, #136]	; (80058e4 <TIM_OC2_SetConfig+0xe4>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d003      	beq.n	8005868 <TIM_OC2_SetConfig+0x68>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a21      	ldr	r2, [pc, #132]	; (80058e8 <TIM_OC2_SetConfig+0xe8>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d10d      	bne.n	8005884 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800586e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	4313      	orrs	r3, r2
 800587a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005882:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a17      	ldr	r2, [pc, #92]	; (80058e4 <TIM_OC2_SetConfig+0xe4>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d003      	beq.n	8005894 <TIM_OC2_SetConfig+0x94>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a16      	ldr	r2, [pc, #88]	; (80058e8 <TIM_OC2_SetConfig+0xe8>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d113      	bne.n	80058bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800589a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	621a      	str	r2, [r3, #32]
}
 80058d6:	bf00      	nop
 80058d8:	371c      	adds	r7, #28
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	40010000 	.word	0x40010000
 80058e8:	40010400 	.word	0x40010400

080058ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 0303 	bic.w	r3, r3, #3
 8005922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	4313      	orrs	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	021b      	lsls	r3, r3, #8
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	4313      	orrs	r3, r2
 8005940:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a21      	ldr	r2, [pc, #132]	; (80059cc <TIM_OC3_SetConfig+0xe0>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d003      	beq.n	8005952 <TIM_OC3_SetConfig+0x66>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a20      	ldr	r2, [pc, #128]	; (80059d0 <TIM_OC3_SetConfig+0xe4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d10d      	bne.n	800596e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005958:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	021b      	lsls	r3, r3, #8
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800596c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a16      	ldr	r2, [pc, #88]	; (80059cc <TIM_OC3_SetConfig+0xe0>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d003      	beq.n	800597e <TIM_OC3_SetConfig+0x92>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a15      	ldr	r2, [pc, #84]	; (80059d0 <TIM_OC3_SetConfig+0xe4>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d113      	bne.n	80059a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800598c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	011b      	lsls	r3, r3, #4
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	4313      	orrs	r3, r2
 8005998:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	011b      	lsls	r3, r3, #4
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	621a      	str	r2, [r3, #32]
}
 80059c0:	bf00      	nop
 80059c2:	371c      	adds	r7, #28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	40010000 	.word	0x40010000
 80059d0:	40010400 	.word	0x40010400

080059d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	021b      	lsls	r3, r3, #8
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	031b      	lsls	r3, r3, #12
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a12      	ldr	r2, [pc, #72]	; (8005a78 <TIM_OC4_SetConfig+0xa4>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d003      	beq.n	8005a3c <TIM_OC4_SetConfig+0x68>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a11      	ldr	r2, [pc, #68]	; (8005a7c <TIM_OC4_SetConfig+0xa8>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d109      	bne.n	8005a50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	019b      	lsls	r3, r3, #6
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	621a      	str	r2, [r3, #32]
}
 8005a6a:	bf00      	nop
 8005a6c:	371c      	adds	r7, #28
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	40010000 	.word	0x40010000
 8005a7c:	40010400 	.word	0x40010400

08005a80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	f023 0201 	bic.w	r2, r3, #1
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	011b      	lsls	r3, r3, #4
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f023 030a 	bic.w	r3, r3, #10
 8005abc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	621a      	str	r2, [r3, #32]
}
 8005ad2:	bf00      	nop
 8005ad4:	371c      	adds	r7, #28
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b087      	sub	sp, #28
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	60f8      	str	r0, [r7, #12]
 8005ae6:	60b9      	str	r1, [r7, #8]
 8005ae8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	f023 0210 	bic.w	r2, r3, #16
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	031b      	lsls	r3, r3, #12
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	011b      	lsls	r3, r3, #4
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	621a      	str	r2, [r3, #32]
}
 8005b32:	bf00      	nop
 8005b34:	371c      	adds	r7, #28
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b3e:	b480      	push	{r7}
 8005b40:	b085      	sub	sp, #20
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
 8005b46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	f043 0307 	orr.w	r3, r3, #7
 8005b60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	609a      	str	r2, [r3, #8]
}
 8005b68:	bf00      	nop
 8005b6a:	3714      	adds	r7, #20
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
 8005b80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	021a      	lsls	r2, r3, #8
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	431a      	orrs	r2, r3
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	609a      	str	r2, [r3, #8]
}
 8005ba8:	bf00      	nop
 8005baa:	371c      	adds	r7, #28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f003 031f 	and.w	r3, r3, #31
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6a1a      	ldr	r2, [r3, #32]
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	43db      	mvns	r3, r3
 8005bd6:	401a      	ands	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6a1a      	ldr	r2, [r3, #32]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	f003 031f 	and.w	r3, r3, #31
 8005be6:	6879      	ldr	r1, [r7, #4]
 8005be8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bec:	431a      	orrs	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	621a      	str	r2, [r3, #32]
}
 8005bf2:	bf00      	nop
 8005bf4:	371c      	adds	r7, #28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
	...

08005c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c14:	2302      	movs	r3, #2
 8005c16:	e05a      	b.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a21      	ldr	r2, [pc, #132]	; (8005cdc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d022      	beq.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c64:	d01d      	beq.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a1d      	ldr	r2, [pc, #116]	; (8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d018      	beq.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a1b      	ldr	r2, [pc, #108]	; (8005ce4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d013      	beq.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a1a      	ldr	r2, [pc, #104]	; (8005ce8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00e      	beq.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a18      	ldr	r2, [pc, #96]	; (8005cec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d009      	beq.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a17      	ldr	r2, [pc, #92]	; (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d004      	beq.n	8005ca2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a15      	ldr	r2, [pc, #84]	; (8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d10c      	bne.n	8005cbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ca8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40010000 	.word	0x40010000
 8005ce0:	40000400 	.word	0x40000400
 8005ce4:	40000800 	.word	0x40000800
 8005ce8:	40000c00 	.word	0x40000c00
 8005cec:	40010400 	.word	0x40010400
 8005cf0:	40014000 	.word	0x40014000
 8005cf4:	40001800 	.word	0x40001800

08005cf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e03f      	b.n	8005d8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d106      	bne.n	8005d24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7fc fbe6 	bl	80024f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2224      	movs	r2, #36	; 0x24
 8005d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68da      	ldr	r2, [r3, #12]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 f829 	bl	8005d94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	691a      	ldr	r2, [r3, #16]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	695a      	ldr	r2, [r3, #20]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68da      	ldr	r2, [r3, #12]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d98:	b09f      	sub	sp, #124	; 0x7c
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005daa:	68d9      	ldr	r1, [r3, #12]
 8005dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	ea40 0301 	orr.w	r3, r0, r1
 8005db4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db8:	689a      	ldr	r2, [r3, #8]
 8005dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005dd8:	f021 010c 	bic.w	r1, r1, #12
 8005ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005de2:	430b      	orrs	r3, r1
 8005de4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	695b      	ldr	r3, [r3, #20]
 8005dec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df2:	6999      	ldr	r1, [r3, #24]
 8005df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	ea40 0301 	orr.w	r3, r0, r1
 8005dfc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	4bc5      	ldr	r3, [pc, #788]	; (8006118 <UART_SetConfig+0x384>)
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d004      	beq.n	8005e12 <UART_SetConfig+0x7e>
 8005e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	4bc3      	ldr	r3, [pc, #780]	; (800611c <UART_SetConfig+0x388>)
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d103      	bne.n	8005e1a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e12:	f7fe fe27 	bl	8004a64 <HAL_RCC_GetPCLK2Freq>
 8005e16:	6778      	str	r0, [r7, #116]	; 0x74
 8005e18:	e002      	b.n	8005e20 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e1a:	f7fe fe0f 	bl	8004a3c <HAL_RCC_GetPCLK1Freq>
 8005e1e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e22:	69db      	ldr	r3, [r3, #28]
 8005e24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e28:	f040 80b6 	bne.w	8005f98 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e2e:	461c      	mov	r4, r3
 8005e30:	f04f 0500 	mov.w	r5, #0
 8005e34:	4622      	mov	r2, r4
 8005e36:	462b      	mov	r3, r5
 8005e38:	1891      	adds	r1, r2, r2
 8005e3a:	6439      	str	r1, [r7, #64]	; 0x40
 8005e3c:	415b      	adcs	r3, r3
 8005e3e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e44:	1912      	adds	r2, r2, r4
 8005e46:	eb45 0303 	adc.w	r3, r5, r3
 8005e4a:	f04f 0000 	mov.w	r0, #0
 8005e4e:	f04f 0100 	mov.w	r1, #0
 8005e52:	00d9      	lsls	r1, r3, #3
 8005e54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e58:	00d0      	lsls	r0, r2, #3
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	1911      	adds	r1, r2, r4
 8005e60:	6639      	str	r1, [r7, #96]	; 0x60
 8005e62:	416b      	adcs	r3, r5
 8005e64:	667b      	str	r3, [r7, #100]	; 0x64
 8005e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f04f 0300 	mov.w	r3, #0
 8005e70:	1891      	adds	r1, r2, r2
 8005e72:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e74:	415b      	adcs	r3, r3
 8005e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e7c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e80:	f7fa ff12 	bl	8000ca8 <__aeabi_uldivmod>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	4ba5      	ldr	r3, [pc, #660]	; (8006120 <UART_SetConfig+0x38c>)
 8005e8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e8e:	095b      	lsrs	r3, r3, #5
 8005e90:	011e      	lsls	r6, r3, #4
 8005e92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e94:	461c      	mov	r4, r3
 8005e96:	f04f 0500 	mov.w	r5, #0
 8005e9a:	4622      	mov	r2, r4
 8005e9c:	462b      	mov	r3, r5
 8005e9e:	1891      	adds	r1, r2, r2
 8005ea0:	6339      	str	r1, [r7, #48]	; 0x30
 8005ea2:	415b      	adcs	r3, r3
 8005ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ea6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005eaa:	1912      	adds	r2, r2, r4
 8005eac:	eb45 0303 	adc.w	r3, r5, r3
 8005eb0:	f04f 0000 	mov.w	r0, #0
 8005eb4:	f04f 0100 	mov.w	r1, #0
 8005eb8:	00d9      	lsls	r1, r3, #3
 8005eba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ebe:	00d0      	lsls	r0, r2, #3
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	1911      	adds	r1, r2, r4
 8005ec6:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ec8:	416b      	adcs	r3, r5
 8005eca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	f04f 0300 	mov.w	r3, #0
 8005ed6:	1891      	adds	r1, r2, r2
 8005ed8:	62b9      	str	r1, [r7, #40]	; 0x28
 8005eda:	415b      	adcs	r3, r3
 8005edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ede:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ee2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005ee6:	f7fa fedf 	bl	8000ca8 <__aeabi_uldivmod>
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	4b8c      	ldr	r3, [pc, #560]	; (8006120 <UART_SetConfig+0x38c>)
 8005ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ef4:	095b      	lsrs	r3, r3, #5
 8005ef6:	2164      	movs	r1, #100	; 0x64
 8005ef8:	fb01 f303 	mul.w	r3, r1, r3
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	00db      	lsls	r3, r3, #3
 8005f00:	3332      	adds	r3, #50	; 0x32
 8005f02:	4a87      	ldr	r2, [pc, #540]	; (8006120 <UART_SetConfig+0x38c>)
 8005f04:	fba2 2303 	umull	r2, r3, r2, r3
 8005f08:	095b      	lsrs	r3, r3, #5
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f10:	441e      	add	r6, r3
 8005f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f14:	4618      	mov	r0, r3
 8005f16:	f04f 0100 	mov.w	r1, #0
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	1894      	adds	r4, r2, r2
 8005f20:	623c      	str	r4, [r7, #32]
 8005f22:	415b      	adcs	r3, r3
 8005f24:	627b      	str	r3, [r7, #36]	; 0x24
 8005f26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f2a:	1812      	adds	r2, r2, r0
 8005f2c:	eb41 0303 	adc.w	r3, r1, r3
 8005f30:	f04f 0400 	mov.w	r4, #0
 8005f34:	f04f 0500 	mov.w	r5, #0
 8005f38:	00dd      	lsls	r5, r3, #3
 8005f3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f3e:	00d4      	lsls	r4, r2, #3
 8005f40:	4622      	mov	r2, r4
 8005f42:	462b      	mov	r3, r5
 8005f44:	1814      	adds	r4, r2, r0
 8005f46:	653c      	str	r4, [r7, #80]	; 0x50
 8005f48:	414b      	adcs	r3, r1
 8005f4a:	657b      	str	r3, [r7, #84]	; 0x54
 8005f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	461a      	mov	r2, r3
 8005f52:	f04f 0300 	mov.w	r3, #0
 8005f56:	1891      	adds	r1, r2, r2
 8005f58:	61b9      	str	r1, [r7, #24]
 8005f5a:	415b      	adcs	r3, r3
 8005f5c:	61fb      	str	r3, [r7, #28]
 8005f5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f62:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005f66:	f7fa fe9f 	bl	8000ca8 <__aeabi_uldivmod>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4b6c      	ldr	r3, [pc, #432]	; (8006120 <UART_SetConfig+0x38c>)
 8005f70:	fba3 1302 	umull	r1, r3, r3, r2
 8005f74:	095b      	lsrs	r3, r3, #5
 8005f76:	2164      	movs	r1, #100	; 0x64
 8005f78:	fb01 f303 	mul.w	r3, r1, r3
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	3332      	adds	r3, #50	; 0x32
 8005f82:	4a67      	ldr	r2, [pc, #412]	; (8006120 <UART_SetConfig+0x38c>)
 8005f84:	fba2 2303 	umull	r2, r3, r2, r3
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	f003 0207 	and.w	r2, r3, #7
 8005f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4432      	add	r2, r6
 8005f94:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f96:	e0b9      	b.n	800610c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f9a:	461c      	mov	r4, r3
 8005f9c:	f04f 0500 	mov.w	r5, #0
 8005fa0:	4622      	mov	r2, r4
 8005fa2:	462b      	mov	r3, r5
 8005fa4:	1891      	adds	r1, r2, r2
 8005fa6:	6139      	str	r1, [r7, #16]
 8005fa8:	415b      	adcs	r3, r3
 8005faa:	617b      	str	r3, [r7, #20]
 8005fac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005fb0:	1912      	adds	r2, r2, r4
 8005fb2:	eb45 0303 	adc.w	r3, r5, r3
 8005fb6:	f04f 0000 	mov.w	r0, #0
 8005fba:	f04f 0100 	mov.w	r1, #0
 8005fbe:	00d9      	lsls	r1, r3, #3
 8005fc0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fc4:	00d0      	lsls	r0, r2, #3
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	eb12 0804 	adds.w	r8, r2, r4
 8005fce:	eb43 0905 	adc.w	r9, r3, r5
 8005fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f04f 0100 	mov.w	r1, #0
 8005fdc:	f04f 0200 	mov.w	r2, #0
 8005fe0:	f04f 0300 	mov.w	r3, #0
 8005fe4:	008b      	lsls	r3, r1, #2
 8005fe6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fea:	0082      	lsls	r2, r0, #2
 8005fec:	4640      	mov	r0, r8
 8005fee:	4649      	mov	r1, r9
 8005ff0:	f7fa fe5a 	bl	8000ca8 <__aeabi_uldivmod>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4b49      	ldr	r3, [pc, #292]	; (8006120 <UART_SetConfig+0x38c>)
 8005ffa:	fba3 2302 	umull	r2, r3, r3, r2
 8005ffe:	095b      	lsrs	r3, r3, #5
 8006000:	011e      	lsls	r6, r3, #4
 8006002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006004:	4618      	mov	r0, r3
 8006006:	f04f 0100 	mov.w	r1, #0
 800600a:	4602      	mov	r2, r0
 800600c:	460b      	mov	r3, r1
 800600e:	1894      	adds	r4, r2, r2
 8006010:	60bc      	str	r4, [r7, #8]
 8006012:	415b      	adcs	r3, r3
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800601a:	1812      	adds	r2, r2, r0
 800601c:	eb41 0303 	adc.w	r3, r1, r3
 8006020:	f04f 0400 	mov.w	r4, #0
 8006024:	f04f 0500 	mov.w	r5, #0
 8006028:	00dd      	lsls	r5, r3, #3
 800602a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800602e:	00d4      	lsls	r4, r2, #3
 8006030:	4622      	mov	r2, r4
 8006032:	462b      	mov	r3, r5
 8006034:	1814      	adds	r4, r2, r0
 8006036:	64bc      	str	r4, [r7, #72]	; 0x48
 8006038:	414b      	adcs	r3, r1
 800603a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800603c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	4618      	mov	r0, r3
 8006042:	f04f 0100 	mov.w	r1, #0
 8006046:	f04f 0200 	mov.w	r2, #0
 800604a:	f04f 0300 	mov.w	r3, #0
 800604e:	008b      	lsls	r3, r1, #2
 8006050:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006054:	0082      	lsls	r2, r0, #2
 8006056:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800605a:	f7fa fe25 	bl	8000ca8 <__aeabi_uldivmod>
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	4b2f      	ldr	r3, [pc, #188]	; (8006120 <UART_SetConfig+0x38c>)
 8006064:	fba3 1302 	umull	r1, r3, r3, r2
 8006068:	095b      	lsrs	r3, r3, #5
 800606a:	2164      	movs	r1, #100	; 0x64
 800606c:	fb01 f303 	mul.w	r3, r1, r3
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	011b      	lsls	r3, r3, #4
 8006074:	3332      	adds	r3, #50	; 0x32
 8006076:	4a2a      	ldr	r2, [pc, #168]	; (8006120 <UART_SetConfig+0x38c>)
 8006078:	fba2 2303 	umull	r2, r3, r2, r3
 800607c:	095b      	lsrs	r3, r3, #5
 800607e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006082:	441e      	add	r6, r3
 8006084:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006086:	4618      	mov	r0, r3
 8006088:	f04f 0100 	mov.w	r1, #0
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	1894      	adds	r4, r2, r2
 8006092:	603c      	str	r4, [r7, #0]
 8006094:	415b      	adcs	r3, r3
 8006096:	607b      	str	r3, [r7, #4]
 8006098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800609c:	1812      	adds	r2, r2, r0
 800609e:	eb41 0303 	adc.w	r3, r1, r3
 80060a2:	f04f 0400 	mov.w	r4, #0
 80060a6:	f04f 0500 	mov.w	r5, #0
 80060aa:	00dd      	lsls	r5, r3, #3
 80060ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060b0:	00d4      	lsls	r4, r2, #3
 80060b2:	4622      	mov	r2, r4
 80060b4:	462b      	mov	r3, r5
 80060b6:	eb12 0a00 	adds.w	sl, r2, r0
 80060ba:	eb43 0b01 	adc.w	fp, r3, r1
 80060be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f04f 0100 	mov.w	r1, #0
 80060c8:	f04f 0200 	mov.w	r2, #0
 80060cc:	f04f 0300 	mov.w	r3, #0
 80060d0:	008b      	lsls	r3, r1, #2
 80060d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060d6:	0082      	lsls	r2, r0, #2
 80060d8:	4650      	mov	r0, sl
 80060da:	4659      	mov	r1, fp
 80060dc:	f7fa fde4 	bl	8000ca8 <__aeabi_uldivmod>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4b0e      	ldr	r3, [pc, #56]	; (8006120 <UART_SetConfig+0x38c>)
 80060e6:	fba3 1302 	umull	r1, r3, r3, r2
 80060ea:	095b      	lsrs	r3, r3, #5
 80060ec:	2164      	movs	r1, #100	; 0x64
 80060ee:	fb01 f303 	mul.w	r3, r1, r3
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	3332      	adds	r3, #50	; 0x32
 80060f8:	4a09      	ldr	r2, [pc, #36]	; (8006120 <UART_SetConfig+0x38c>)
 80060fa:	fba2 2303 	umull	r2, r3, r2, r3
 80060fe:	095b      	lsrs	r3, r3, #5
 8006100:	f003 020f 	and.w	r2, r3, #15
 8006104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4432      	add	r2, r6
 800610a:	609a      	str	r2, [r3, #8]
}
 800610c:	bf00      	nop
 800610e:	377c      	adds	r7, #124	; 0x7c
 8006110:	46bd      	mov	sp, r7
 8006112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006116:	bf00      	nop
 8006118:	40011000 	.word	0x40011000
 800611c:	40011400 	.word	0x40011400
 8006120:	51eb851f 	.word	0x51eb851f

08006124 <__errno>:
 8006124:	4b01      	ldr	r3, [pc, #4]	; (800612c <__errno+0x8>)
 8006126:	6818      	ldr	r0, [r3, #0]
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	20000010 	.word	0x20000010

08006130 <__libc_init_array>:
 8006130:	b570      	push	{r4, r5, r6, lr}
 8006132:	4d0d      	ldr	r5, [pc, #52]	; (8006168 <__libc_init_array+0x38>)
 8006134:	4c0d      	ldr	r4, [pc, #52]	; (800616c <__libc_init_array+0x3c>)
 8006136:	1b64      	subs	r4, r4, r5
 8006138:	10a4      	asrs	r4, r4, #2
 800613a:	2600      	movs	r6, #0
 800613c:	42a6      	cmp	r6, r4
 800613e:	d109      	bne.n	8006154 <__libc_init_array+0x24>
 8006140:	4d0b      	ldr	r5, [pc, #44]	; (8006170 <__libc_init_array+0x40>)
 8006142:	4c0c      	ldr	r4, [pc, #48]	; (8006174 <__libc_init_array+0x44>)
 8006144:	f004 fc44 	bl	800a9d0 <_init>
 8006148:	1b64      	subs	r4, r4, r5
 800614a:	10a4      	asrs	r4, r4, #2
 800614c:	2600      	movs	r6, #0
 800614e:	42a6      	cmp	r6, r4
 8006150:	d105      	bne.n	800615e <__libc_init_array+0x2e>
 8006152:	bd70      	pop	{r4, r5, r6, pc}
 8006154:	f855 3b04 	ldr.w	r3, [r5], #4
 8006158:	4798      	blx	r3
 800615a:	3601      	adds	r6, #1
 800615c:	e7ee      	b.n	800613c <__libc_init_array+0xc>
 800615e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006162:	4798      	blx	r3
 8006164:	3601      	adds	r6, #1
 8006166:	e7f2      	b.n	800614e <__libc_init_array+0x1e>
 8006168:	0800b134 	.word	0x0800b134
 800616c:	0800b134 	.word	0x0800b134
 8006170:	0800b134 	.word	0x0800b134
 8006174:	0800b138 	.word	0x0800b138

08006178 <memset>:
 8006178:	4402      	add	r2, r0
 800617a:	4603      	mov	r3, r0
 800617c:	4293      	cmp	r3, r2
 800617e:	d100      	bne.n	8006182 <memset+0xa>
 8006180:	4770      	bx	lr
 8006182:	f803 1b01 	strb.w	r1, [r3], #1
 8006186:	e7f9      	b.n	800617c <memset+0x4>

08006188 <__cvt>:
 8006188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800618c:	ec55 4b10 	vmov	r4, r5, d0
 8006190:	2d00      	cmp	r5, #0
 8006192:	460e      	mov	r6, r1
 8006194:	4619      	mov	r1, r3
 8006196:	462b      	mov	r3, r5
 8006198:	bfbb      	ittet	lt
 800619a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800619e:	461d      	movlt	r5, r3
 80061a0:	2300      	movge	r3, #0
 80061a2:	232d      	movlt	r3, #45	; 0x2d
 80061a4:	700b      	strb	r3, [r1, #0]
 80061a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80061ac:	4691      	mov	r9, r2
 80061ae:	f023 0820 	bic.w	r8, r3, #32
 80061b2:	bfbc      	itt	lt
 80061b4:	4622      	movlt	r2, r4
 80061b6:	4614      	movlt	r4, r2
 80061b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061bc:	d005      	beq.n	80061ca <__cvt+0x42>
 80061be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80061c2:	d100      	bne.n	80061c6 <__cvt+0x3e>
 80061c4:	3601      	adds	r6, #1
 80061c6:	2102      	movs	r1, #2
 80061c8:	e000      	b.n	80061cc <__cvt+0x44>
 80061ca:	2103      	movs	r1, #3
 80061cc:	ab03      	add	r3, sp, #12
 80061ce:	9301      	str	r3, [sp, #4]
 80061d0:	ab02      	add	r3, sp, #8
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	ec45 4b10 	vmov	d0, r4, r5
 80061d8:	4653      	mov	r3, sl
 80061da:	4632      	mov	r2, r6
 80061dc:	f001 fdb4 	bl	8007d48 <_dtoa_r>
 80061e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80061e4:	4607      	mov	r7, r0
 80061e6:	d102      	bne.n	80061ee <__cvt+0x66>
 80061e8:	f019 0f01 	tst.w	r9, #1
 80061ec:	d022      	beq.n	8006234 <__cvt+0xac>
 80061ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80061f2:	eb07 0906 	add.w	r9, r7, r6
 80061f6:	d110      	bne.n	800621a <__cvt+0x92>
 80061f8:	783b      	ldrb	r3, [r7, #0]
 80061fa:	2b30      	cmp	r3, #48	; 0x30
 80061fc:	d10a      	bne.n	8006214 <__cvt+0x8c>
 80061fe:	2200      	movs	r2, #0
 8006200:	2300      	movs	r3, #0
 8006202:	4620      	mov	r0, r4
 8006204:	4629      	mov	r1, r5
 8006206:	f7fa fc6f 	bl	8000ae8 <__aeabi_dcmpeq>
 800620a:	b918      	cbnz	r0, 8006214 <__cvt+0x8c>
 800620c:	f1c6 0601 	rsb	r6, r6, #1
 8006210:	f8ca 6000 	str.w	r6, [sl]
 8006214:	f8da 3000 	ldr.w	r3, [sl]
 8006218:	4499      	add	r9, r3
 800621a:	2200      	movs	r2, #0
 800621c:	2300      	movs	r3, #0
 800621e:	4620      	mov	r0, r4
 8006220:	4629      	mov	r1, r5
 8006222:	f7fa fc61 	bl	8000ae8 <__aeabi_dcmpeq>
 8006226:	b108      	cbz	r0, 800622c <__cvt+0xa4>
 8006228:	f8cd 900c 	str.w	r9, [sp, #12]
 800622c:	2230      	movs	r2, #48	; 0x30
 800622e:	9b03      	ldr	r3, [sp, #12]
 8006230:	454b      	cmp	r3, r9
 8006232:	d307      	bcc.n	8006244 <__cvt+0xbc>
 8006234:	9b03      	ldr	r3, [sp, #12]
 8006236:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006238:	1bdb      	subs	r3, r3, r7
 800623a:	4638      	mov	r0, r7
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	b004      	add	sp, #16
 8006240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006244:	1c59      	adds	r1, r3, #1
 8006246:	9103      	str	r1, [sp, #12]
 8006248:	701a      	strb	r2, [r3, #0]
 800624a:	e7f0      	b.n	800622e <__cvt+0xa6>

0800624c <__exponent>:
 800624c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800624e:	4603      	mov	r3, r0
 8006250:	2900      	cmp	r1, #0
 8006252:	bfb8      	it	lt
 8006254:	4249      	neglt	r1, r1
 8006256:	f803 2b02 	strb.w	r2, [r3], #2
 800625a:	bfb4      	ite	lt
 800625c:	222d      	movlt	r2, #45	; 0x2d
 800625e:	222b      	movge	r2, #43	; 0x2b
 8006260:	2909      	cmp	r1, #9
 8006262:	7042      	strb	r2, [r0, #1]
 8006264:	dd2a      	ble.n	80062bc <__exponent+0x70>
 8006266:	f10d 0407 	add.w	r4, sp, #7
 800626a:	46a4      	mov	ip, r4
 800626c:	270a      	movs	r7, #10
 800626e:	46a6      	mov	lr, r4
 8006270:	460a      	mov	r2, r1
 8006272:	fb91 f6f7 	sdiv	r6, r1, r7
 8006276:	fb07 1516 	mls	r5, r7, r6, r1
 800627a:	3530      	adds	r5, #48	; 0x30
 800627c:	2a63      	cmp	r2, #99	; 0x63
 800627e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006282:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006286:	4631      	mov	r1, r6
 8006288:	dcf1      	bgt.n	800626e <__exponent+0x22>
 800628a:	3130      	adds	r1, #48	; 0x30
 800628c:	f1ae 0502 	sub.w	r5, lr, #2
 8006290:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006294:	1c44      	adds	r4, r0, #1
 8006296:	4629      	mov	r1, r5
 8006298:	4561      	cmp	r1, ip
 800629a:	d30a      	bcc.n	80062b2 <__exponent+0x66>
 800629c:	f10d 0209 	add.w	r2, sp, #9
 80062a0:	eba2 020e 	sub.w	r2, r2, lr
 80062a4:	4565      	cmp	r5, ip
 80062a6:	bf88      	it	hi
 80062a8:	2200      	movhi	r2, #0
 80062aa:	4413      	add	r3, r2
 80062ac:	1a18      	subs	r0, r3, r0
 80062ae:	b003      	add	sp, #12
 80062b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80062ba:	e7ed      	b.n	8006298 <__exponent+0x4c>
 80062bc:	2330      	movs	r3, #48	; 0x30
 80062be:	3130      	adds	r1, #48	; 0x30
 80062c0:	7083      	strb	r3, [r0, #2]
 80062c2:	70c1      	strb	r1, [r0, #3]
 80062c4:	1d03      	adds	r3, r0, #4
 80062c6:	e7f1      	b.n	80062ac <__exponent+0x60>

080062c8 <_printf_float>:
 80062c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	ed2d 8b02 	vpush	{d8}
 80062d0:	b08d      	sub	sp, #52	; 0x34
 80062d2:	460c      	mov	r4, r1
 80062d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80062d8:	4616      	mov	r6, r2
 80062da:	461f      	mov	r7, r3
 80062dc:	4605      	mov	r5, r0
 80062de:	f002 fe8f 	bl	8009000 <_localeconv_r>
 80062e2:	f8d0 a000 	ldr.w	sl, [r0]
 80062e6:	4650      	mov	r0, sl
 80062e8:	f7f9 ff82 	bl	80001f0 <strlen>
 80062ec:	2300      	movs	r3, #0
 80062ee:	930a      	str	r3, [sp, #40]	; 0x28
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	9305      	str	r3, [sp, #20]
 80062f4:	f8d8 3000 	ldr.w	r3, [r8]
 80062f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80062fc:	3307      	adds	r3, #7
 80062fe:	f023 0307 	bic.w	r3, r3, #7
 8006302:	f103 0208 	add.w	r2, r3, #8
 8006306:	f8c8 2000 	str.w	r2, [r8]
 800630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006312:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006316:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800631a:	9307      	str	r3, [sp, #28]
 800631c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006320:	ee08 0a10 	vmov	s16, r0
 8006324:	4b9f      	ldr	r3, [pc, #636]	; (80065a4 <_printf_float+0x2dc>)
 8006326:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800632a:	f04f 32ff 	mov.w	r2, #4294967295
 800632e:	f7fa fc0d 	bl	8000b4c <__aeabi_dcmpun>
 8006332:	bb88      	cbnz	r0, 8006398 <_printf_float+0xd0>
 8006334:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006338:	4b9a      	ldr	r3, [pc, #616]	; (80065a4 <_printf_float+0x2dc>)
 800633a:	f04f 32ff 	mov.w	r2, #4294967295
 800633e:	f7fa fbe7 	bl	8000b10 <__aeabi_dcmple>
 8006342:	bb48      	cbnz	r0, 8006398 <_printf_float+0xd0>
 8006344:	2200      	movs	r2, #0
 8006346:	2300      	movs	r3, #0
 8006348:	4640      	mov	r0, r8
 800634a:	4649      	mov	r1, r9
 800634c:	f7fa fbd6 	bl	8000afc <__aeabi_dcmplt>
 8006350:	b110      	cbz	r0, 8006358 <_printf_float+0x90>
 8006352:	232d      	movs	r3, #45	; 0x2d
 8006354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006358:	4b93      	ldr	r3, [pc, #588]	; (80065a8 <_printf_float+0x2e0>)
 800635a:	4894      	ldr	r0, [pc, #592]	; (80065ac <_printf_float+0x2e4>)
 800635c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006360:	bf94      	ite	ls
 8006362:	4698      	movls	r8, r3
 8006364:	4680      	movhi	r8, r0
 8006366:	2303      	movs	r3, #3
 8006368:	6123      	str	r3, [r4, #16]
 800636a:	9b05      	ldr	r3, [sp, #20]
 800636c:	f023 0204 	bic.w	r2, r3, #4
 8006370:	6022      	str	r2, [r4, #0]
 8006372:	f04f 0900 	mov.w	r9, #0
 8006376:	9700      	str	r7, [sp, #0]
 8006378:	4633      	mov	r3, r6
 800637a:	aa0b      	add	r2, sp, #44	; 0x2c
 800637c:	4621      	mov	r1, r4
 800637e:	4628      	mov	r0, r5
 8006380:	f000 f9d8 	bl	8006734 <_printf_common>
 8006384:	3001      	adds	r0, #1
 8006386:	f040 8090 	bne.w	80064aa <_printf_float+0x1e2>
 800638a:	f04f 30ff 	mov.w	r0, #4294967295
 800638e:	b00d      	add	sp, #52	; 0x34
 8006390:	ecbd 8b02 	vpop	{d8}
 8006394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006398:	4642      	mov	r2, r8
 800639a:	464b      	mov	r3, r9
 800639c:	4640      	mov	r0, r8
 800639e:	4649      	mov	r1, r9
 80063a0:	f7fa fbd4 	bl	8000b4c <__aeabi_dcmpun>
 80063a4:	b140      	cbz	r0, 80063b8 <_printf_float+0xf0>
 80063a6:	464b      	mov	r3, r9
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	bfbc      	itt	lt
 80063ac:	232d      	movlt	r3, #45	; 0x2d
 80063ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80063b2:	487f      	ldr	r0, [pc, #508]	; (80065b0 <_printf_float+0x2e8>)
 80063b4:	4b7f      	ldr	r3, [pc, #508]	; (80065b4 <_printf_float+0x2ec>)
 80063b6:	e7d1      	b.n	800635c <_printf_float+0x94>
 80063b8:	6863      	ldr	r3, [r4, #4]
 80063ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80063be:	9206      	str	r2, [sp, #24]
 80063c0:	1c5a      	adds	r2, r3, #1
 80063c2:	d13f      	bne.n	8006444 <_printf_float+0x17c>
 80063c4:	2306      	movs	r3, #6
 80063c6:	6063      	str	r3, [r4, #4]
 80063c8:	9b05      	ldr	r3, [sp, #20]
 80063ca:	6861      	ldr	r1, [r4, #4]
 80063cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80063d0:	2300      	movs	r3, #0
 80063d2:	9303      	str	r3, [sp, #12]
 80063d4:	ab0a      	add	r3, sp, #40	; 0x28
 80063d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80063da:	ab09      	add	r3, sp, #36	; 0x24
 80063dc:	ec49 8b10 	vmov	d0, r8, r9
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	6022      	str	r2, [r4, #0]
 80063e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80063e8:	4628      	mov	r0, r5
 80063ea:	f7ff fecd 	bl	8006188 <__cvt>
 80063ee:	9b06      	ldr	r3, [sp, #24]
 80063f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063f2:	2b47      	cmp	r3, #71	; 0x47
 80063f4:	4680      	mov	r8, r0
 80063f6:	d108      	bne.n	800640a <_printf_float+0x142>
 80063f8:	1cc8      	adds	r0, r1, #3
 80063fa:	db02      	blt.n	8006402 <_printf_float+0x13a>
 80063fc:	6863      	ldr	r3, [r4, #4]
 80063fe:	4299      	cmp	r1, r3
 8006400:	dd41      	ble.n	8006486 <_printf_float+0x1be>
 8006402:	f1ab 0b02 	sub.w	fp, fp, #2
 8006406:	fa5f fb8b 	uxtb.w	fp, fp
 800640a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800640e:	d820      	bhi.n	8006452 <_printf_float+0x18a>
 8006410:	3901      	subs	r1, #1
 8006412:	465a      	mov	r2, fp
 8006414:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006418:	9109      	str	r1, [sp, #36]	; 0x24
 800641a:	f7ff ff17 	bl	800624c <__exponent>
 800641e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006420:	1813      	adds	r3, r2, r0
 8006422:	2a01      	cmp	r2, #1
 8006424:	4681      	mov	r9, r0
 8006426:	6123      	str	r3, [r4, #16]
 8006428:	dc02      	bgt.n	8006430 <_printf_float+0x168>
 800642a:	6822      	ldr	r2, [r4, #0]
 800642c:	07d2      	lsls	r2, r2, #31
 800642e:	d501      	bpl.n	8006434 <_printf_float+0x16c>
 8006430:	3301      	adds	r3, #1
 8006432:	6123      	str	r3, [r4, #16]
 8006434:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006438:	2b00      	cmp	r3, #0
 800643a:	d09c      	beq.n	8006376 <_printf_float+0xae>
 800643c:	232d      	movs	r3, #45	; 0x2d
 800643e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006442:	e798      	b.n	8006376 <_printf_float+0xae>
 8006444:	9a06      	ldr	r2, [sp, #24]
 8006446:	2a47      	cmp	r2, #71	; 0x47
 8006448:	d1be      	bne.n	80063c8 <_printf_float+0x100>
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1bc      	bne.n	80063c8 <_printf_float+0x100>
 800644e:	2301      	movs	r3, #1
 8006450:	e7b9      	b.n	80063c6 <_printf_float+0xfe>
 8006452:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006456:	d118      	bne.n	800648a <_printf_float+0x1c2>
 8006458:	2900      	cmp	r1, #0
 800645a:	6863      	ldr	r3, [r4, #4]
 800645c:	dd0b      	ble.n	8006476 <_printf_float+0x1ae>
 800645e:	6121      	str	r1, [r4, #16]
 8006460:	b913      	cbnz	r3, 8006468 <_printf_float+0x1a0>
 8006462:	6822      	ldr	r2, [r4, #0]
 8006464:	07d0      	lsls	r0, r2, #31
 8006466:	d502      	bpl.n	800646e <_printf_float+0x1a6>
 8006468:	3301      	adds	r3, #1
 800646a:	440b      	add	r3, r1
 800646c:	6123      	str	r3, [r4, #16]
 800646e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006470:	f04f 0900 	mov.w	r9, #0
 8006474:	e7de      	b.n	8006434 <_printf_float+0x16c>
 8006476:	b913      	cbnz	r3, 800647e <_printf_float+0x1b6>
 8006478:	6822      	ldr	r2, [r4, #0]
 800647a:	07d2      	lsls	r2, r2, #31
 800647c:	d501      	bpl.n	8006482 <_printf_float+0x1ba>
 800647e:	3302      	adds	r3, #2
 8006480:	e7f4      	b.n	800646c <_printf_float+0x1a4>
 8006482:	2301      	movs	r3, #1
 8006484:	e7f2      	b.n	800646c <_printf_float+0x1a4>
 8006486:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800648a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800648c:	4299      	cmp	r1, r3
 800648e:	db05      	blt.n	800649c <_printf_float+0x1d4>
 8006490:	6823      	ldr	r3, [r4, #0]
 8006492:	6121      	str	r1, [r4, #16]
 8006494:	07d8      	lsls	r0, r3, #31
 8006496:	d5ea      	bpl.n	800646e <_printf_float+0x1a6>
 8006498:	1c4b      	adds	r3, r1, #1
 800649a:	e7e7      	b.n	800646c <_printf_float+0x1a4>
 800649c:	2900      	cmp	r1, #0
 800649e:	bfd4      	ite	le
 80064a0:	f1c1 0202 	rsble	r2, r1, #2
 80064a4:	2201      	movgt	r2, #1
 80064a6:	4413      	add	r3, r2
 80064a8:	e7e0      	b.n	800646c <_printf_float+0x1a4>
 80064aa:	6823      	ldr	r3, [r4, #0]
 80064ac:	055a      	lsls	r2, r3, #21
 80064ae:	d407      	bmi.n	80064c0 <_printf_float+0x1f8>
 80064b0:	6923      	ldr	r3, [r4, #16]
 80064b2:	4642      	mov	r2, r8
 80064b4:	4631      	mov	r1, r6
 80064b6:	4628      	mov	r0, r5
 80064b8:	47b8      	blx	r7
 80064ba:	3001      	adds	r0, #1
 80064bc:	d12c      	bne.n	8006518 <_printf_float+0x250>
 80064be:	e764      	b.n	800638a <_printf_float+0xc2>
 80064c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064c4:	f240 80e0 	bls.w	8006688 <_printf_float+0x3c0>
 80064c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80064cc:	2200      	movs	r2, #0
 80064ce:	2300      	movs	r3, #0
 80064d0:	f7fa fb0a 	bl	8000ae8 <__aeabi_dcmpeq>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d034      	beq.n	8006542 <_printf_float+0x27a>
 80064d8:	4a37      	ldr	r2, [pc, #220]	; (80065b8 <_printf_float+0x2f0>)
 80064da:	2301      	movs	r3, #1
 80064dc:	4631      	mov	r1, r6
 80064de:	4628      	mov	r0, r5
 80064e0:	47b8      	blx	r7
 80064e2:	3001      	adds	r0, #1
 80064e4:	f43f af51 	beq.w	800638a <_printf_float+0xc2>
 80064e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064ec:	429a      	cmp	r2, r3
 80064ee:	db02      	blt.n	80064f6 <_printf_float+0x22e>
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	07d8      	lsls	r0, r3, #31
 80064f4:	d510      	bpl.n	8006518 <_printf_float+0x250>
 80064f6:	ee18 3a10 	vmov	r3, s16
 80064fa:	4652      	mov	r2, sl
 80064fc:	4631      	mov	r1, r6
 80064fe:	4628      	mov	r0, r5
 8006500:	47b8      	blx	r7
 8006502:	3001      	adds	r0, #1
 8006504:	f43f af41 	beq.w	800638a <_printf_float+0xc2>
 8006508:	f04f 0800 	mov.w	r8, #0
 800650c:	f104 091a 	add.w	r9, r4, #26
 8006510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006512:	3b01      	subs	r3, #1
 8006514:	4543      	cmp	r3, r8
 8006516:	dc09      	bgt.n	800652c <_printf_float+0x264>
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	079b      	lsls	r3, r3, #30
 800651c:	f100 8105 	bmi.w	800672a <_printf_float+0x462>
 8006520:	68e0      	ldr	r0, [r4, #12]
 8006522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006524:	4298      	cmp	r0, r3
 8006526:	bfb8      	it	lt
 8006528:	4618      	movlt	r0, r3
 800652a:	e730      	b.n	800638e <_printf_float+0xc6>
 800652c:	2301      	movs	r3, #1
 800652e:	464a      	mov	r2, r9
 8006530:	4631      	mov	r1, r6
 8006532:	4628      	mov	r0, r5
 8006534:	47b8      	blx	r7
 8006536:	3001      	adds	r0, #1
 8006538:	f43f af27 	beq.w	800638a <_printf_float+0xc2>
 800653c:	f108 0801 	add.w	r8, r8, #1
 8006540:	e7e6      	b.n	8006510 <_printf_float+0x248>
 8006542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006544:	2b00      	cmp	r3, #0
 8006546:	dc39      	bgt.n	80065bc <_printf_float+0x2f4>
 8006548:	4a1b      	ldr	r2, [pc, #108]	; (80065b8 <_printf_float+0x2f0>)
 800654a:	2301      	movs	r3, #1
 800654c:	4631      	mov	r1, r6
 800654e:	4628      	mov	r0, r5
 8006550:	47b8      	blx	r7
 8006552:	3001      	adds	r0, #1
 8006554:	f43f af19 	beq.w	800638a <_printf_float+0xc2>
 8006558:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800655c:	4313      	orrs	r3, r2
 800655e:	d102      	bne.n	8006566 <_printf_float+0x29e>
 8006560:	6823      	ldr	r3, [r4, #0]
 8006562:	07d9      	lsls	r1, r3, #31
 8006564:	d5d8      	bpl.n	8006518 <_printf_float+0x250>
 8006566:	ee18 3a10 	vmov	r3, s16
 800656a:	4652      	mov	r2, sl
 800656c:	4631      	mov	r1, r6
 800656e:	4628      	mov	r0, r5
 8006570:	47b8      	blx	r7
 8006572:	3001      	adds	r0, #1
 8006574:	f43f af09 	beq.w	800638a <_printf_float+0xc2>
 8006578:	f04f 0900 	mov.w	r9, #0
 800657c:	f104 0a1a 	add.w	sl, r4, #26
 8006580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006582:	425b      	negs	r3, r3
 8006584:	454b      	cmp	r3, r9
 8006586:	dc01      	bgt.n	800658c <_printf_float+0x2c4>
 8006588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800658a:	e792      	b.n	80064b2 <_printf_float+0x1ea>
 800658c:	2301      	movs	r3, #1
 800658e:	4652      	mov	r2, sl
 8006590:	4631      	mov	r1, r6
 8006592:	4628      	mov	r0, r5
 8006594:	47b8      	blx	r7
 8006596:	3001      	adds	r0, #1
 8006598:	f43f aef7 	beq.w	800638a <_printf_float+0xc2>
 800659c:	f109 0901 	add.w	r9, r9, #1
 80065a0:	e7ee      	b.n	8006580 <_printf_float+0x2b8>
 80065a2:	bf00      	nop
 80065a4:	7fefffff 	.word	0x7fefffff
 80065a8:	0800ac7c 	.word	0x0800ac7c
 80065ac:	0800ac80 	.word	0x0800ac80
 80065b0:	0800ac88 	.word	0x0800ac88
 80065b4:	0800ac84 	.word	0x0800ac84
 80065b8:	0800ac8c 	.word	0x0800ac8c
 80065bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065c0:	429a      	cmp	r2, r3
 80065c2:	bfa8      	it	ge
 80065c4:	461a      	movge	r2, r3
 80065c6:	2a00      	cmp	r2, #0
 80065c8:	4691      	mov	r9, r2
 80065ca:	dc37      	bgt.n	800663c <_printf_float+0x374>
 80065cc:	f04f 0b00 	mov.w	fp, #0
 80065d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065d4:	f104 021a 	add.w	r2, r4, #26
 80065d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065da:	9305      	str	r3, [sp, #20]
 80065dc:	eba3 0309 	sub.w	r3, r3, r9
 80065e0:	455b      	cmp	r3, fp
 80065e2:	dc33      	bgt.n	800664c <_printf_float+0x384>
 80065e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065e8:	429a      	cmp	r2, r3
 80065ea:	db3b      	blt.n	8006664 <_printf_float+0x39c>
 80065ec:	6823      	ldr	r3, [r4, #0]
 80065ee:	07da      	lsls	r2, r3, #31
 80065f0:	d438      	bmi.n	8006664 <_printf_float+0x39c>
 80065f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065f4:	9b05      	ldr	r3, [sp, #20]
 80065f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	eba2 0901 	sub.w	r9, r2, r1
 80065fe:	4599      	cmp	r9, r3
 8006600:	bfa8      	it	ge
 8006602:	4699      	movge	r9, r3
 8006604:	f1b9 0f00 	cmp.w	r9, #0
 8006608:	dc35      	bgt.n	8006676 <_printf_float+0x3ae>
 800660a:	f04f 0800 	mov.w	r8, #0
 800660e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006612:	f104 0a1a 	add.w	sl, r4, #26
 8006616:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800661a:	1a9b      	subs	r3, r3, r2
 800661c:	eba3 0309 	sub.w	r3, r3, r9
 8006620:	4543      	cmp	r3, r8
 8006622:	f77f af79 	ble.w	8006518 <_printf_float+0x250>
 8006626:	2301      	movs	r3, #1
 8006628:	4652      	mov	r2, sl
 800662a:	4631      	mov	r1, r6
 800662c:	4628      	mov	r0, r5
 800662e:	47b8      	blx	r7
 8006630:	3001      	adds	r0, #1
 8006632:	f43f aeaa 	beq.w	800638a <_printf_float+0xc2>
 8006636:	f108 0801 	add.w	r8, r8, #1
 800663a:	e7ec      	b.n	8006616 <_printf_float+0x34e>
 800663c:	4613      	mov	r3, r2
 800663e:	4631      	mov	r1, r6
 8006640:	4642      	mov	r2, r8
 8006642:	4628      	mov	r0, r5
 8006644:	47b8      	blx	r7
 8006646:	3001      	adds	r0, #1
 8006648:	d1c0      	bne.n	80065cc <_printf_float+0x304>
 800664a:	e69e      	b.n	800638a <_printf_float+0xc2>
 800664c:	2301      	movs	r3, #1
 800664e:	4631      	mov	r1, r6
 8006650:	4628      	mov	r0, r5
 8006652:	9205      	str	r2, [sp, #20]
 8006654:	47b8      	blx	r7
 8006656:	3001      	adds	r0, #1
 8006658:	f43f ae97 	beq.w	800638a <_printf_float+0xc2>
 800665c:	9a05      	ldr	r2, [sp, #20]
 800665e:	f10b 0b01 	add.w	fp, fp, #1
 8006662:	e7b9      	b.n	80065d8 <_printf_float+0x310>
 8006664:	ee18 3a10 	vmov	r3, s16
 8006668:	4652      	mov	r2, sl
 800666a:	4631      	mov	r1, r6
 800666c:	4628      	mov	r0, r5
 800666e:	47b8      	blx	r7
 8006670:	3001      	adds	r0, #1
 8006672:	d1be      	bne.n	80065f2 <_printf_float+0x32a>
 8006674:	e689      	b.n	800638a <_printf_float+0xc2>
 8006676:	9a05      	ldr	r2, [sp, #20]
 8006678:	464b      	mov	r3, r9
 800667a:	4442      	add	r2, r8
 800667c:	4631      	mov	r1, r6
 800667e:	4628      	mov	r0, r5
 8006680:	47b8      	blx	r7
 8006682:	3001      	adds	r0, #1
 8006684:	d1c1      	bne.n	800660a <_printf_float+0x342>
 8006686:	e680      	b.n	800638a <_printf_float+0xc2>
 8006688:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800668a:	2a01      	cmp	r2, #1
 800668c:	dc01      	bgt.n	8006692 <_printf_float+0x3ca>
 800668e:	07db      	lsls	r3, r3, #31
 8006690:	d538      	bpl.n	8006704 <_printf_float+0x43c>
 8006692:	2301      	movs	r3, #1
 8006694:	4642      	mov	r2, r8
 8006696:	4631      	mov	r1, r6
 8006698:	4628      	mov	r0, r5
 800669a:	47b8      	blx	r7
 800669c:	3001      	adds	r0, #1
 800669e:	f43f ae74 	beq.w	800638a <_printf_float+0xc2>
 80066a2:	ee18 3a10 	vmov	r3, s16
 80066a6:	4652      	mov	r2, sl
 80066a8:	4631      	mov	r1, r6
 80066aa:	4628      	mov	r0, r5
 80066ac:	47b8      	blx	r7
 80066ae:	3001      	adds	r0, #1
 80066b0:	f43f ae6b 	beq.w	800638a <_printf_float+0xc2>
 80066b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066b8:	2200      	movs	r2, #0
 80066ba:	2300      	movs	r3, #0
 80066bc:	f7fa fa14 	bl	8000ae8 <__aeabi_dcmpeq>
 80066c0:	b9d8      	cbnz	r0, 80066fa <_printf_float+0x432>
 80066c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066c4:	f108 0201 	add.w	r2, r8, #1
 80066c8:	3b01      	subs	r3, #1
 80066ca:	4631      	mov	r1, r6
 80066cc:	4628      	mov	r0, r5
 80066ce:	47b8      	blx	r7
 80066d0:	3001      	adds	r0, #1
 80066d2:	d10e      	bne.n	80066f2 <_printf_float+0x42a>
 80066d4:	e659      	b.n	800638a <_printf_float+0xc2>
 80066d6:	2301      	movs	r3, #1
 80066d8:	4652      	mov	r2, sl
 80066da:	4631      	mov	r1, r6
 80066dc:	4628      	mov	r0, r5
 80066de:	47b8      	blx	r7
 80066e0:	3001      	adds	r0, #1
 80066e2:	f43f ae52 	beq.w	800638a <_printf_float+0xc2>
 80066e6:	f108 0801 	add.w	r8, r8, #1
 80066ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066ec:	3b01      	subs	r3, #1
 80066ee:	4543      	cmp	r3, r8
 80066f0:	dcf1      	bgt.n	80066d6 <_printf_float+0x40e>
 80066f2:	464b      	mov	r3, r9
 80066f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80066f8:	e6dc      	b.n	80064b4 <_printf_float+0x1ec>
 80066fa:	f04f 0800 	mov.w	r8, #0
 80066fe:	f104 0a1a 	add.w	sl, r4, #26
 8006702:	e7f2      	b.n	80066ea <_printf_float+0x422>
 8006704:	2301      	movs	r3, #1
 8006706:	4642      	mov	r2, r8
 8006708:	e7df      	b.n	80066ca <_printf_float+0x402>
 800670a:	2301      	movs	r3, #1
 800670c:	464a      	mov	r2, r9
 800670e:	4631      	mov	r1, r6
 8006710:	4628      	mov	r0, r5
 8006712:	47b8      	blx	r7
 8006714:	3001      	adds	r0, #1
 8006716:	f43f ae38 	beq.w	800638a <_printf_float+0xc2>
 800671a:	f108 0801 	add.w	r8, r8, #1
 800671e:	68e3      	ldr	r3, [r4, #12]
 8006720:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006722:	1a5b      	subs	r3, r3, r1
 8006724:	4543      	cmp	r3, r8
 8006726:	dcf0      	bgt.n	800670a <_printf_float+0x442>
 8006728:	e6fa      	b.n	8006520 <_printf_float+0x258>
 800672a:	f04f 0800 	mov.w	r8, #0
 800672e:	f104 0919 	add.w	r9, r4, #25
 8006732:	e7f4      	b.n	800671e <_printf_float+0x456>

08006734 <_printf_common>:
 8006734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006738:	4616      	mov	r6, r2
 800673a:	4699      	mov	r9, r3
 800673c:	688a      	ldr	r2, [r1, #8]
 800673e:	690b      	ldr	r3, [r1, #16]
 8006740:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006744:	4293      	cmp	r3, r2
 8006746:	bfb8      	it	lt
 8006748:	4613      	movlt	r3, r2
 800674a:	6033      	str	r3, [r6, #0]
 800674c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006750:	4607      	mov	r7, r0
 8006752:	460c      	mov	r4, r1
 8006754:	b10a      	cbz	r2, 800675a <_printf_common+0x26>
 8006756:	3301      	adds	r3, #1
 8006758:	6033      	str	r3, [r6, #0]
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	0699      	lsls	r1, r3, #26
 800675e:	bf42      	ittt	mi
 8006760:	6833      	ldrmi	r3, [r6, #0]
 8006762:	3302      	addmi	r3, #2
 8006764:	6033      	strmi	r3, [r6, #0]
 8006766:	6825      	ldr	r5, [r4, #0]
 8006768:	f015 0506 	ands.w	r5, r5, #6
 800676c:	d106      	bne.n	800677c <_printf_common+0x48>
 800676e:	f104 0a19 	add.w	sl, r4, #25
 8006772:	68e3      	ldr	r3, [r4, #12]
 8006774:	6832      	ldr	r2, [r6, #0]
 8006776:	1a9b      	subs	r3, r3, r2
 8006778:	42ab      	cmp	r3, r5
 800677a:	dc26      	bgt.n	80067ca <_printf_common+0x96>
 800677c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006780:	1e13      	subs	r3, r2, #0
 8006782:	6822      	ldr	r2, [r4, #0]
 8006784:	bf18      	it	ne
 8006786:	2301      	movne	r3, #1
 8006788:	0692      	lsls	r2, r2, #26
 800678a:	d42b      	bmi.n	80067e4 <_printf_common+0xb0>
 800678c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006790:	4649      	mov	r1, r9
 8006792:	4638      	mov	r0, r7
 8006794:	47c0      	blx	r8
 8006796:	3001      	adds	r0, #1
 8006798:	d01e      	beq.n	80067d8 <_printf_common+0xa4>
 800679a:	6823      	ldr	r3, [r4, #0]
 800679c:	68e5      	ldr	r5, [r4, #12]
 800679e:	6832      	ldr	r2, [r6, #0]
 80067a0:	f003 0306 	and.w	r3, r3, #6
 80067a4:	2b04      	cmp	r3, #4
 80067a6:	bf08      	it	eq
 80067a8:	1aad      	subeq	r5, r5, r2
 80067aa:	68a3      	ldr	r3, [r4, #8]
 80067ac:	6922      	ldr	r2, [r4, #16]
 80067ae:	bf0c      	ite	eq
 80067b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067b4:	2500      	movne	r5, #0
 80067b6:	4293      	cmp	r3, r2
 80067b8:	bfc4      	itt	gt
 80067ba:	1a9b      	subgt	r3, r3, r2
 80067bc:	18ed      	addgt	r5, r5, r3
 80067be:	2600      	movs	r6, #0
 80067c0:	341a      	adds	r4, #26
 80067c2:	42b5      	cmp	r5, r6
 80067c4:	d11a      	bne.n	80067fc <_printf_common+0xc8>
 80067c6:	2000      	movs	r0, #0
 80067c8:	e008      	b.n	80067dc <_printf_common+0xa8>
 80067ca:	2301      	movs	r3, #1
 80067cc:	4652      	mov	r2, sl
 80067ce:	4649      	mov	r1, r9
 80067d0:	4638      	mov	r0, r7
 80067d2:	47c0      	blx	r8
 80067d4:	3001      	adds	r0, #1
 80067d6:	d103      	bne.n	80067e0 <_printf_common+0xac>
 80067d8:	f04f 30ff 	mov.w	r0, #4294967295
 80067dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e0:	3501      	adds	r5, #1
 80067e2:	e7c6      	b.n	8006772 <_printf_common+0x3e>
 80067e4:	18e1      	adds	r1, r4, r3
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	2030      	movs	r0, #48	; 0x30
 80067ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067ee:	4422      	add	r2, r4
 80067f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067f8:	3302      	adds	r3, #2
 80067fa:	e7c7      	b.n	800678c <_printf_common+0x58>
 80067fc:	2301      	movs	r3, #1
 80067fe:	4622      	mov	r2, r4
 8006800:	4649      	mov	r1, r9
 8006802:	4638      	mov	r0, r7
 8006804:	47c0      	blx	r8
 8006806:	3001      	adds	r0, #1
 8006808:	d0e6      	beq.n	80067d8 <_printf_common+0xa4>
 800680a:	3601      	adds	r6, #1
 800680c:	e7d9      	b.n	80067c2 <_printf_common+0x8e>
	...

08006810 <_printf_i>:
 8006810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006814:	460c      	mov	r4, r1
 8006816:	4691      	mov	r9, r2
 8006818:	7e27      	ldrb	r7, [r4, #24]
 800681a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800681c:	2f78      	cmp	r7, #120	; 0x78
 800681e:	4680      	mov	r8, r0
 8006820:	469a      	mov	sl, r3
 8006822:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006826:	d807      	bhi.n	8006838 <_printf_i+0x28>
 8006828:	2f62      	cmp	r7, #98	; 0x62
 800682a:	d80a      	bhi.n	8006842 <_printf_i+0x32>
 800682c:	2f00      	cmp	r7, #0
 800682e:	f000 80d8 	beq.w	80069e2 <_printf_i+0x1d2>
 8006832:	2f58      	cmp	r7, #88	; 0x58
 8006834:	f000 80a3 	beq.w	800697e <_printf_i+0x16e>
 8006838:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800683c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006840:	e03a      	b.n	80068b8 <_printf_i+0xa8>
 8006842:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006846:	2b15      	cmp	r3, #21
 8006848:	d8f6      	bhi.n	8006838 <_printf_i+0x28>
 800684a:	a001      	add	r0, pc, #4	; (adr r0, 8006850 <_printf_i+0x40>)
 800684c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006850:	080068a9 	.word	0x080068a9
 8006854:	080068bd 	.word	0x080068bd
 8006858:	08006839 	.word	0x08006839
 800685c:	08006839 	.word	0x08006839
 8006860:	08006839 	.word	0x08006839
 8006864:	08006839 	.word	0x08006839
 8006868:	080068bd 	.word	0x080068bd
 800686c:	08006839 	.word	0x08006839
 8006870:	08006839 	.word	0x08006839
 8006874:	08006839 	.word	0x08006839
 8006878:	08006839 	.word	0x08006839
 800687c:	080069c9 	.word	0x080069c9
 8006880:	080068ed 	.word	0x080068ed
 8006884:	080069ab 	.word	0x080069ab
 8006888:	08006839 	.word	0x08006839
 800688c:	08006839 	.word	0x08006839
 8006890:	080069eb 	.word	0x080069eb
 8006894:	08006839 	.word	0x08006839
 8006898:	080068ed 	.word	0x080068ed
 800689c:	08006839 	.word	0x08006839
 80068a0:	08006839 	.word	0x08006839
 80068a4:	080069b3 	.word	0x080069b3
 80068a8:	680b      	ldr	r3, [r1, #0]
 80068aa:	1d1a      	adds	r2, r3, #4
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	600a      	str	r2, [r1, #0]
 80068b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068b8:	2301      	movs	r3, #1
 80068ba:	e0a3      	b.n	8006a04 <_printf_i+0x1f4>
 80068bc:	6825      	ldr	r5, [r4, #0]
 80068be:	6808      	ldr	r0, [r1, #0]
 80068c0:	062e      	lsls	r6, r5, #24
 80068c2:	f100 0304 	add.w	r3, r0, #4
 80068c6:	d50a      	bpl.n	80068de <_printf_i+0xce>
 80068c8:	6805      	ldr	r5, [r0, #0]
 80068ca:	600b      	str	r3, [r1, #0]
 80068cc:	2d00      	cmp	r5, #0
 80068ce:	da03      	bge.n	80068d8 <_printf_i+0xc8>
 80068d0:	232d      	movs	r3, #45	; 0x2d
 80068d2:	426d      	negs	r5, r5
 80068d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068d8:	485e      	ldr	r0, [pc, #376]	; (8006a54 <_printf_i+0x244>)
 80068da:	230a      	movs	r3, #10
 80068dc:	e019      	b.n	8006912 <_printf_i+0x102>
 80068de:	f015 0f40 	tst.w	r5, #64	; 0x40
 80068e2:	6805      	ldr	r5, [r0, #0]
 80068e4:	600b      	str	r3, [r1, #0]
 80068e6:	bf18      	it	ne
 80068e8:	b22d      	sxthne	r5, r5
 80068ea:	e7ef      	b.n	80068cc <_printf_i+0xbc>
 80068ec:	680b      	ldr	r3, [r1, #0]
 80068ee:	6825      	ldr	r5, [r4, #0]
 80068f0:	1d18      	adds	r0, r3, #4
 80068f2:	6008      	str	r0, [r1, #0]
 80068f4:	0628      	lsls	r0, r5, #24
 80068f6:	d501      	bpl.n	80068fc <_printf_i+0xec>
 80068f8:	681d      	ldr	r5, [r3, #0]
 80068fa:	e002      	b.n	8006902 <_printf_i+0xf2>
 80068fc:	0669      	lsls	r1, r5, #25
 80068fe:	d5fb      	bpl.n	80068f8 <_printf_i+0xe8>
 8006900:	881d      	ldrh	r5, [r3, #0]
 8006902:	4854      	ldr	r0, [pc, #336]	; (8006a54 <_printf_i+0x244>)
 8006904:	2f6f      	cmp	r7, #111	; 0x6f
 8006906:	bf0c      	ite	eq
 8006908:	2308      	moveq	r3, #8
 800690a:	230a      	movne	r3, #10
 800690c:	2100      	movs	r1, #0
 800690e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006912:	6866      	ldr	r6, [r4, #4]
 8006914:	60a6      	str	r6, [r4, #8]
 8006916:	2e00      	cmp	r6, #0
 8006918:	bfa2      	ittt	ge
 800691a:	6821      	ldrge	r1, [r4, #0]
 800691c:	f021 0104 	bicge.w	r1, r1, #4
 8006920:	6021      	strge	r1, [r4, #0]
 8006922:	b90d      	cbnz	r5, 8006928 <_printf_i+0x118>
 8006924:	2e00      	cmp	r6, #0
 8006926:	d04d      	beq.n	80069c4 <_printf_i+0x1b4>
 8006928:	4616      	mov	r6, r2
 800692a:	fbb5 f1f3 	udiv	r1, r5, r3
 800692e:	fb03 5711 	mls	r7, r3, r1, r5
 8006932:	5dc7      	ldrb	r7, [r0, r7]
 8006934:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006938:	462f      	mov	r7, r5
 800693a:	42bb      	cmp	r3, r7
 800693c:	460d      	mov	r5, r1
 800693e:	d9f4      	bls.n	800692a <_printf_i+0x11a>
 8006940:	2b08      	cmp	r3, #8
 8006942:	d10b      	bne.n	800695c <_printf_i+0x14c>
 8006944:	6823      	ldr	r3, [r4, #0]
 8006946:	07df      	lsls	r7, r3, #31
 8006948:	d508      	bpl.n	800695c <_printf_i+0x14c>
 800694a:	6923      	ldr	r3, [r4, #16]
 800694c:	6861      	ldr	r1, [r4, #4]
 800694e:	4299      	cmp	r1, r3
 8006950:	bfde      	ittt	le
 8006952:	2330      	movle	r3, #48	; 0x30
 8006954:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006958:	f106 36ff 	addle.w	r6, r6, #4294967295
 800695c:	1b92      	subs	r2, r2, r6
 800695e:	6122      	str	r2, [r4, #16]
 8006960:	f8cd a000 	str.w	sl, [sp]
 8006964:	464b      	mov	r3, r9
 8006966:	aa03      	add	r2, sp, #12
 8006968:	4621      	mov	r1, r4
 800696a:	4640      	mov	r0, r8
 800696c:	f7ff fee2 	bl	8006734 <_printf_common>
 8006970:	3001      	adds	r0, #1
 8006972:	d14c      	bne.n	8006a0e <_printf_i+0x1fe>
 8006974:	f04f 30ff 	mov.w	r0, #4294967295
 8006978:	b004      	add	sp, #16
 800697a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800697e:	4835      	ldr	r0, [pc, #212]	; (8006a54 <_printf_i+0x244>)
 8006980:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006984:	6823      	ldr	r3, [r4, #0]
 8006986:	680e      	ldr	r6, [r1, #0]
 8006988:	061f      	lsls	r7, r3, #24
 800698a:	f856 5b04 	ldr.w	r5, [r6], #4
 800698e:	600e      	str	r6, [r1, #0]
 8006990:	d514      	bpl.n	80069bc <_printf_i+0x1ac>
 8006992:	07d9      	lsls	r1, r3, #31
 8006994:	bf44      	itt	mi
 8006996:	f043 0320 	orrmi.w	r3, r3, #32
 800699a:	6023      	strmi	r3, [r4, #0]
 800699c:	b91d      	cbnz	r5, 80069a6 <_printf_i+0x196>
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	f023 0320 	bic.w	r3, r3, #32
 80069a4:	6023      	str	r3, [r4, #0]
 80069a6:	2310      	movs	r3, #16
 80069a8:	e7b0      	b.n	800690c <_printf_i+0xfc>
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	f043 0320 	orr.w	r3, r3, #32
 80069b0:	6023      	str	r3, [r4, #0]
 80069b2:	2378      	movs	r3, #120	; 0x78
 80069b4:	4828      	ldr	r0, [pc, #160]	; (8006a58 <_printf_i+0x248>)
 80069b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069ba:	e7e3      	b.n	8006984 <_printf_i+0x174>
 80069bc:	065e      	lsls	r6, r3, #25
 80069be:	bf48      	it	mi
 80069c0:	b2ad      	uxthmi	r5, r5
 80069c2:	e7e6      	b.n	8006992 <_printf_i+0x182>
 80069c4:	4616      	mov	r6, r2
 80069c6:	e7bb      	b.n	8006940 <_printf_i+0x130>
 80069c8:	680b      	ldr	r3, [r1, #0]
 80069ca:	6826      	ldr	r6, [r4, #0]
 80069cc:	6960      	ldr	r0, [r4, #20]
 80069ce:	1d1d      	adds	r5, r3, #4
 80069d0:	600d      	str	r5, [r1, #0]
 80069d2:	0635      	lsls	r5, r6, #24
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	d501      	bpl.n	80069dc <_printf_i+0x1cc>
 80069d8:	6018      	str	r0, [r3, #0]
 80069da:	e002      	b.n	80069e2 <_printf_i+0x1d2>
 80069dc:	0671      	lsls	r1, r6, #25
 80069de:	d5fb      	bpl.n	80069d8 <_printf_i+0x1c8>
 80069e0:	8018      	strh	r0, [r3, #0]
 80069e2:	2300      	movs	r3, #0
 80069e4:	6123      	str	r3, [r4, #16]
 80069e6:	4616      	mov	r6, r2
 80069e8:	e7ba      	b.n	8006960 <_printf_i+0x150>
 80069ea:	680b      	ldr	r3, [r1, #0]
 80069ec:	1d1a      	adds	r2, r3, #4
 80069ee:	600a      	str	r2, [r1, #0]
 80069f0:	681e      	ldr	r6, [r3, #0]
 80069f2:	6862      	ldr	r2, [r4, #4]
 80069f4:	2100      	movs	r1, #0
 80069f6:	4630      	mov	r0, r6
 80069f8:	f7f9 fc02 	bl	8000200 <memchr>
 80069fc:	b108      	cbz	r0, 8006a02 <_printf_i+0x1f2>
 80069fe:	1b80      	subs	r0, r0, r6
 8006a00:	6060      	str	r0, [r4, #4]
 8006a02:	6863      	ldr	r3, [r4, #4]
 8006a04:	6123      	str	r3, [r4, #16]
 8006a06:	2300      	movs	r3, #0
 8006a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a0c:	e7a8      	b.n	8006960 <_printf_i+0x150>
 8006a0e:	6923      	ldr	r3, [r4, #16]
 8006a10:	4632      	mov	r2, r6
 8006a12:	4649      	mov	r1, r9
 8006a14:	4640      	mov	r0, r8
 8006a16:	47d0      	blx	sl
 8006a18:	3001      	adds	r0, #1
 8006a1a:	d0ab      	beq.n	8006974 <_printf_i+0x164>
 8006a1c:	6823      	ldr	r3, [r4, #0]
 8006a1e:	079b      	lsls	r3, r3, #30
 8006a20:	d413      	bmi.n	8006a4a <_printf_i+0x23a>
 8006a22:	68e0      	ldr	r0, [r4, #12]
 8006a24:	9b03      	ldr	r3, [sp, #12]
 8006a26:	4298      	cmp	r0, r3
 8006a28:	bfb8      	it	lt
 8006a2a:	4618      	movlt	r0, r3
 8006a2c:	e7a4      	b.n	8006978 <_printf_i+0x168>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	4632      	mov	r2, r6
 8006a32:	4649      	mov	r1, r9
 8006a34:	4640      	mov	r0, r8
 8006a36:	47d0      	blx	sl
 8006a38:	3001      	adds	r0, #1
 8006a3a:	d09b      	beq.n	8006974 <_printf_i+0x164>
 8006a3c:	3501      	adds	r5, #1
 8006a3e:	68e3      	ldr	r3, [r4, #12]
 8006a40:	9903      	ldr	r1, [sp, #12]
 8006a42:	1a5b      	subs	r3, r3, r1
 8006a44:	42ab      	cmp	r3, r5
 8006a46:	dcf2      	bgt.n	8006a2e <_printf_i+0x21e>
 8006a48:	e7eb      	b.n	8006a22 <_printf_i+0x212>
 8006a4a:	2500      	movs	r5, #0
 8006a4c:	f104 0619 	add.w	r6, r4, #25
 8006a50:	e7f5      	b.n	8006a3e <_printf_i+0x22e>
 8006a52:	bf00      	nop
 8006a54:	0800ac8e 	.word	0x0800ac8e
 8006a58:	0800ac9f 	.word	0x0800ac9f

08006a5c <_scanf_float>:
 8006a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a60:	b087      	sub	sp, #28
 8006a62:	4617      	mov	r7, r2
 8006a64:	9303      	str	r3, [sp, #12]
 8006a66:	688b      	ldr	r3, [r1, #8]
 8006a68:	1e5a      	subs	r2, r3, #1
 8006a6a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006a6e:	bf83      	ittte	hi
 8006a70:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006a74:	195b      	addhi	r3, r3, r5
 8006a76:	9302      	strhi	r3, [sp, #8]
 8006a78:	2300      	movls	r3, #0
 8006a7a:	bf86      	itte	hi
 8006a7c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006a80:	608b      	strhi	r3, [r1, #8]
 8006a82:	9302      	strls	r3, [sp, #8]
 8006a84:	680b      	ldr	r3, [r1, #0]
 8006a86:	468b      	mov	fp, r1
 8006a88:	2500      	movs	r5, #0
 8006a8a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006a8e:	f84b 3b1c 	str.w	r3, [fp], #28
 8006a92:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006a96:	4680      	mov	r8, r0
 8006a98:	460c      	mov	r4, r1
 8006a9a:	465e      	mov	r6, fp
 8006a9c:	46aa      	mov	sl, r5
 8006a9e:	46a9      	mov	r9, r5
 8006aa0:	9501      	str	r5, [sp, #4]
 8006aa2:	68a2      	ldr	r2, [r4, #8]
 8006aa4:	b152      	cbz	r2, 8006abc <_scanf_float+0x60>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	2b4e      	cmp	r3, #78	; 0x4e
 8006aac:	d864      	bhi.n	8006b78 <_scanf_float+0x11c>
 8006aae:	2b40      	cmp	r3, #64	; 0x40
 8006ab0:	d83c      	bhi.n	8006b2c <_scanf_float+0xd0>
 8006ab2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006ab6:	b2c8      	uxtb	r0, r1
 8006ab8:	280e      	cmp	r0, #14
 8006aba:	d93a      	bls.n	8006b32 <_scanf_float+0xd6>
 8006abc:	f1b9 0f00 	cmp.w	r9, #0
 8006ac0:	d003      	beq.n	8006aca <_scanf_float+0x6e>
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ac8:	6023      	str	r3, [r4, #0]
 8006aca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ace:	f1ba 0f01 	cmp.w	sl, #1
 8006ad2:	f200 8113 	bhi.w	8006cfc <_scanf_float+0x2a0>
 8006ad6:	455e      	cmp	r6, fp
 8006ad8:	f200 8105 	bhi.w	8006ce6 <_scanf_float+0x28a>
 8006adc:	2501      	movs	r5, #1
 8006ade:	4628      	mov	r0, r5
 8006ae0:	b007      	add	sp, #28
 8006ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006aea:	2a0d      	cmp	r2, #13
 8006aec:	d8e6      	bhi.n	8006abc <_scanf_float+0x60>
 8006aee:	a101      	add	r1, pc, #4	; (adr r1, 8006af4 <_scanf_float+0x98>)
 8006af0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006af4:	08006c33 	.word	0x08006c33
 8006af8:	08006abd 	.word	0x08006abd
 8006afc:	08006abd 	.word	0x08006abd
 8006b00:	08006abd 	.word	0x08006abd
 8006b04:	08006c93 	.word	0x08006c93
 8006b08:	08006c6b 	.word	0x08006c6b
 8006b0c:	08006abd 	.word	0x08006abd
 8006b10:	08006abd 	.word	0x08006abd
 8006b14:	08006c41 	.word	0x08006c41
 8006b18:	08006abd 	.word	0x08006abd
 8006b1c:	08006abd 	.word	0x08006abd
 8006b20:	08006abd 	.word	0x08006abd
 8006b24:	08006abd 	.word	0x08006abd
 8006b28:	08006bf9 	.word	0x08006bf9
 8006b2c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006b30:	e7db      	b.n	8006aea <_scanf_float+0x8e>
 8006b32:	290e      	cmp	r1, #14
 8006b34:	d8c2      	bhi.n	8006abc <_scanf_float+0x60>
 8006b36:	a001      	add	r0, pc, #4	; (adr r0, 8006b3c <_scanf_float+0xe0>)
 8006b38:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006b3c:	08006beb 	.word	0x08006beb
 8006b40:	08006abd 	.word	0x08006abd
 8006b44:	08006beb 	.word	0x08006beb
 8006b48:	08006c7f 	.word	0x08006c7f
 8006b4c:	08006abd 	.word	0x08006abd
 8006b50:	08006b99 	.word	0x08006b99
 8006b54:	08006bd5 	.word	0x08006bd5
 8006b58:	08006bd5 	.word	0x08006bd5
 8006b5c:	08006bd5 	.word	0x08006bd5
 8006b60:	08006bd5 	.word	0x08006bd5
 8006b64:	08006bd5 	.word	0x08006bd5
 8006b68:	08006bd5 	.word	0x08006bd5
 8006b6c:	08006bd5 	.word	0x08006bd5
 8006b70:	08006bd5 	.word	0x08006bd5
 8006b74:	08006bd5 	.word	0x08006bd5
 8006b78:	2b6e      	cmp	r3, #110	; 0x6e
 8006b7a:	d809      	bhi.n	8006b90 <_scanf_float+0x134>
 8006b7c:	2b60      	cmp	r3, #96	; 0x60
 8006b7e:	d8b2      	bhi.n	8006ae6 <_scanf_float+0x8a>
 8006b80:	2b54      	cmp	r3, #84	; 0x54
 8006b82:	d077      	beq.n	8006c74 <_scanf_float+0x218>
 8006b84:	2b59      	cmp	r3, #89	; 0x59
 8006b86:	d199      	bne.n	8006abc <_scanf_float+0x60>
 8006b88:	2d07      	cmp	r5, #7
 8006b8a:	d197      	bne.n	8006abc <_scanf_float+0x60>
 8006b8c:	2508      	movs	r5, #8
 8006b8e:	e029      	b.n	8006be4 <_scanf_float+0x188>
 8006b90:	2b74      	cmp	r3, #116	; 0x74
 8006b92:	d06f      	beq.n	8006c74 <_scanf_float+0x218>
 8006b94:	2b79      	cmp	r3, #121	; 0x79
 8006b96:	e7f6      	b.n	8006b86 <_scanf_float+0x12a>
 8006b98:	6821      	ldr	r1, [r4, #0]
 8006b9a:	05c8      	lsls	r0, r1, #23
 8006b9c:	d51a      	bpl.n	8006bd4 <_scanf_float+0x178>
 8006b9e:	9b02      	ldr	r3, [sp, #8]
 8006ba0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006ba4:	6021      	str	r1, [r4, #0]
 8006ba6:	f109 0901 	add.w	r9, r9, #1
 8006baa:	b11b      	cbz	r3, 8006bb4 <_scanf_float+0x158>
 8006bac:	3b01      	subs	r3, #1
 8006bae:	3201      	adds	r2, #1
 8006bb0:	9302      	str	r3, [sp, #8]
 8006bb2:	60a2      	str	r2, [r4, #8]
 8006bb4:	68a3      	ldr	r3, [r4, #8]
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	60a3      	str	r3, [r4, #8]
 8006bba:	6923      	ldr	r3, [r4, #16]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	6123      	str	r3, [r4, #16]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	607b      	str	r3, [r7, #4]
 8006bc8:	f340 8084 	ble.w	8006cd4 <_scanf_float+0x278>
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	603b      	str	r3, [r7, #0]
 8006bd2:	e766      	b.n	8006aa2 <_scanf_float+0x46>
 8006bd4:	eb1a 0f05 	cmn.w	sl, r5
 8006bd8:	f47f af70 	bne.w	8006abc <_scanf_float+0x60>
 8006bdc:	6822      	ldr	r2, [r4, #0]
 8006bde:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006be2:	6022      	str	r2, [r4, #0]
 8006be4:	f806 3b01 	strb.w	r3, [r6], #1
 8006be8:	e7e4      	b.n	8006bb4 <_scanf_float+0x158>
 8006bea:	6822      	ldr	r2, [r4, #0]
 8006bec:	0610      	lsls	r0, r2, #24
 8006bee:	f57f af65 	bpl.w	8006abc <_scanf_float+0x60>
 8006bf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bf6:	e7f4      	b.n	8006be2 <_scanf_float+0x186>
 8006bf8:	f1ba 0f00 	cmp.w	sl, #0
 8006bfc:	d10e      	bne.n	8006c1c <_scanf_float+0x1c0>
 8006bfe:	f1b9 0f00 	cmp.w	r9, #0
 8006c02:	d10e      	bne.n	8006c22 <_scanf_float+0x1c6>
 8006c04:	6822      	ldr	r2, [r4, #0]
 8006c06:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c0a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c0e:	d108      	bne.n	8006c22 <_scanf_float+0x1c6>
 8006c10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c14:	6022      	str	r2, [r4, #0]
 8006c16:	f04f 0a01 	mov.w	sl, #1
 8006c1a:	e7e3      	b.n	8006be4 <_scanf_float+0x188>
 8006c1c:	f1ba 0f02 	cmp.w	sl, #2
 8006c20:	d055      	beq.n	8006cce <_scanf_float+0x272>
 8006c22:	2d01      	cmp	r5, #1
 8006c24:	d002      	beq.n	8006c2c <_scanf_float+0x1d0>
 8006c26:	2d04      	cmp	r5, #4
 8006c28:	f47f af48 	bne.w	8006abc <_scanf_float+0x60>
 8006c2c:	3501      	adds	r5, #1
 8006c2e:	b2ed      	uxtb	r5, r5
 8006c30:	e7d8      	b.n	8006be4 <_scanf_float+0x188>
 8006c32:	f1ba 0f01 	cmp.w	sl, #1
 8006c36:	f47f af41 	bne.w	8006abc <_scanf_float+0x60>
 8006c3a:	f04f 0a02 	mov.w	sl, #2
 8006c3e:	e7d1      	b.n	8006be4 <_scanf_float+0x188>
 8006c40:	b97d      	cbnz	r5, 8006c62 <_scanf_float+0x206>
 8006c42:	f1b9 0f00 	cmp.w	r9, #0
 8006c46:	f47f af3c 	bne.w	8006ac2 <_scanf_float+0x66>
 8006c4a:	6822      	ldr	r2, [r4, #0]
 8006c4c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c50:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c54:	f47f af39 	bne.w	8006aca <_scanf_float+0x6e>
 8006c58:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c5c:	6022      	str	r2, [r4, #0]
 8006c5e:	2501      	movs	r5, #1
 8006c60:	e7c0      	b.n	8006be4 <_scanf_float+0x188>
 8006c62:	2d03      	cmp	r5, #3
 8006c64:	d0e2      	beq.n	8006c2c <_scanf_float+0x1d0>
 8006c66:	2d05      	cmp	r5, #5
 8006c68:	e7de      	b.n	8006c28 <_scanf_float+0x1cc>
 8006c6a:	2d02      	cmp	r5, #2
 8006c6c:	f47f af26 	bne.w	8006abc <_scanf_float+0x60>
 8006c70:	2503      	movs	r5, #3
 8006c72:	e7b7      	b.n	8006be4 <_scanf_float+0x188>
 8006c74:	2d06      	cmp	r5, #6
 8006c76:	f47f af21 	bne.w	8006abc <_scanf_float+0x60>
 8006c7a:	2507      	movs	r5, #7
 8006c7c:	e7b2      	b.n	8006be4 <_scanf_float+0x188>
 8006c7e:	6822      	ldr	r2, [r4, #0]
 8006c80:	0591      	lsls	r1, r2, #22
 8006c82:	f57f af1b 	bpl.w	8006abc <_scanf_float+0x60>
 8006c86:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006c8a:	6022      	str	r2, [r4, #0]
 8006c8c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c90:	e7a8      	b.n	8006be4 <_scanf_float+0x188>
 8006c92:	6822      	ldr	r2, [r4, #0]
 8006c94:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006c98:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006c9c:	d006      	beq.n	8006cac <_scanf_float+0x250>
 8006c9e:	0550      	lsls	r0, r2, #21
 8006ca0:	f57f af0c 	bpl.w	8006abc <_scanf_float+0x60>
 8006ca4:	f1b9 0f00 	cmp.w	r9, #0
 8006ca8:	f43f af0f 	beq.w	8006aca <_scanf_float+0x6e>
 8006cac:	0591      	lsls	r1, r2, #22
 8006cae:	bf58      	it	pl
 8006cb0:	9901      	ldrpl	r1, [sp, #4]
 8006cb2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006cb6:	bf58      	it	pl
 8006cb8:	eba9 0101 	subpl.w	r1, r9, r1
 8006cbc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006cc0:	bf58      	it	pl
 8006cc2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006cc6:	6022      	str	r2, [r4, #0]
 8006cc8:	f04f 0900 	mov.w	r9, #0
 8006ccc:	e78a      	b.n	8006be4 <_scanf_float+0x188>
 8006cce:	f04f 0a03 	mov.w	sl, #3
 8006cd2:	e787      	b.n	8006be4 <_scanf_float+0x188>
 8006cd4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006cd8:	4639      	mov	r1, r7
 8006cda:	4640      	mov	r0, r8
 8006cdc:	4798      	blx	r3
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	f43f aedf 	beq.w	8006aa2 <_scanf_float+0x46>
 8006ce4:	e6ea      	b.n	8006abc <_scanf_float+0x60>
 8006ce6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006cee:	463a      	mov	r2, r7
 8006cf0:	4640      	mov	r0, r8
 8006cf2:	4798      	blx	r3
 8006cf4:	6923      	ldr	r3, [r4, #16]
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	6123      	str	r3, [r4, #16]
 8006cfa:	e6ec      	b.n	8006ad6 <_scanf_float+0x7a>
 8006cfc:	1e6b      	subs	r3, r5, #1
 8006cfe:	2b06      	cmp	r3, #6
 8006d00:	d825      	bhi.n	8006d4e <_scanf_float+0x2f2>
 8006d02:	2d02      	cmp	r5, #2
 8006d04:	d836      	bhi.n	8006d74 <_scanf_float+0x318>
 8006d06:	455e      	cmp	r6, fp
 8006d08:	f67f aee8 	bls.w	8006adc <_scanf_float+0x80>
 8006d0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d10:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d14:	463a      	mov	r2, r7
 8006d16:	4640      	mov	r0, r8
 8006d18:	4798      	blx	r3
 8006d1a:	6923      	ldr	r3, [r4, #16]
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	6123      	str	r3, [r4, #16]
 8006d20:	e7f1      	b.n	8006d06 <_scanf_float+0x2aa>
 8006d22:	9802      	ldr	r0, [sp, #8]
 8006d24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d28:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006d2c:	9002      	str	r0, [sp, #8]
 8006d2e:	463a      	mov	r2, r7
 8006d30:	4640      	mov	r0, r8
 8006d32:	4798      	blx	r3
 8006d34:	6923      	ldr	r3, [r4, #16]
 8006d36:	3b01      	subs	r3, #1
 8006d38:	6123      	str	r3, [r4, #16]
 8006d3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d3e:	fa5f fa8a 	uxtb.w	sl, sl
 8006d42:	f1ba 0f02 	cmp.w	sl, #2
 8006d46:	d1ec      	bne.n	8006d22 <_scanf_float+0x2c6>
 8006d48:	3d03      	subs	r5, #3
 8006d4a:	b2ed      	uxtb	r5, r5
 8006d4c:	1b76      	subs	r6, r6, r5
 8006d4e:	6823      	ldr	r3, [r4, #0]
 8006d50:	05da      	lsls	r2, r3, #23
 8006d52:	d52f      	bpl.n	8006db4 <_scanf_float+0x358>
 8006d54:	055b      	lsls	r3, r3, #21
 8006d56:	d510      	bpl.n	8006d7a <_scanf_float+0x31e>
 8006d58:	455e      	cmp	r6, fp
 8006d5a:	f67f aebf 	bls.w	8006adc <_scanf_float+0x80>
 8006d5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d66:	463a      	mov	r2, r7
 8006d68:	4640      	mov	r0, r8
 8006d6a:	4798      	blx	r3
 8006d6c:	6923      	ldr	r3, [r4, #16]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	6123      	str	r3, [r4, #16]
 8006d72:	e7f1      	b.n	8006d58 <_scanf_float+0x2fc>
 8006d74:	46aa      	mov	sl, r5
 8006d76:	9602      	str	r6, [sp, #8]
 8006d78:	e7df      	b.n	8006d3a <_scanf_float+0x2de>
 8006d7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006d7e:	6923      	ldr	r3, [r4, #16]
 8006d80:	2965      	cmp	r1, #101	; 0x65
 8006d82:	f103 33ff 	add.w	r3, r3, #4294967295
 8006d86:	f106 35ff 	add.w	r5, r6, #4294967295
 8006d8a:	6123      	str	r3, [r4, #16]
 8006d8c:	d00c      	beq.n	8006da8 <_scanf_float+0x34c>
 8006d8e:	2945      	cmp	r1, #69	; 0x45
 8006d90:	d00a      	beq.n	8006da8 <_scanf_float+0x34c>
 8006d92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d96:	463a      	mov	r2, r7
 8006d98:	4640      	mov	r0, r8
 8006d9a:	4798      	blx	r3
 8006d9c:	6923      	ldr	r3, [r4, #16]
 8006d9e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	1eb5      	subs	r5, r6, #2
 8006da6:	6123      	str	r3, [r4, #16]
 8006da8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dac:	463a      	mov	r2, r7
 8006dae:	4640      	mov	r0, r8
 8006db0:	4798      	blx	r3
 8006db2:	462e      	mov	r6, r5
 8006db4:	6825      	ldr	r5, [r4, #0]
 8006db6:	f015 0510 	ands.w	r5, r5, #16
 8006dba:	d158      	bne.n	8006e6e <_scanf_float+0x412>
 8006dbc:	7035      	strb	r5, [r6, #0]
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dc8:	d11c      	bne.n	8006e04 <_scanf_float+0x3a8>
 8006dca:	9b01      	ldr	r3, [sp, #4]
 8006dcc:	454b      	cmp	r3, r9
 8006dce:	eba3 0209 	sub.w	r2, r3, r9
 8006dd2:	d124      	bne.n	8006e1e <_scanf_float+0x3c2>
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	4659      	mov	r1, fp
 8006dd8:	4640      	mov	r0, r8
 8006dda:	f000 fe9b 	bl	8007b14 <_strtod_r>
 8006dde:	9b03      	ldr	r3, [sp, #12]
 8006de0:	6821      	ldr	r1, [r4, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f011 0f02 	tst.w	r1, #2
 8006de8:	ec57 6b10 	vmov	r6, r7, d0
 8006dec:	f103 0204 	add.w	r2, r3, #4
 8006df0:	d020      	beq.n	8006e34 <_scanf_float+0x3d8>
 8006df2:	9903      	ldr	r1, [sp, #12]
 8006df4:	600a      	str	r2, [r1, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	e9c3 6700 	strd	r6, r7, [r3]
 8006dfc:	68e3      	ldr	r3, [r4, #12]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	60e3      	str	r3, [r4, #12]
 8006e02:	e66c      	b.n	8006ade <_scanf_float+0x82>
 8006e04:	9b04      	ldr	r3, [sp, #16]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d0e4      	beq.n	8006dd4 <_scanf_float+0x378>
 8006e0a:	9905      	ldr	r1, [sp, #20]
 8006e0c:	230a      	movs	r3, #10
 8006e0e:	462a      	mov	r2, r5
 8006e10:	3101      	adds	r1, #1
 8006e12:	4640      	mov	r0, r8
 8006e14:	f000 ff08 	bl	8007c28 <_strtol_r>
 8006e18:	9b04      	ldr	r3, [sp, #16]
 8006e1a:	9e05      	ldr	r6, [sp, #20]
 8006e1c:	1ac2      	subs	r2, r0, r3
 8006e1e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006e22:	429e      	cmp	r6, r3
 8006e24:	bf28      	it	cs
 8006e26:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006e2a:	4912      	ldr	r1, [pc, #72]	; (8006e74 <_scanf_float+0x418>)
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	f000 f82b 	bl	8006e88 <siprintf>
 8006e32:	e7cf      	b.n	8006dd4 <_scanf_float+0x378>
 8006e34:	f011 0f04 	tst.w	r1, #4
 8006e38:	9903      	ldr	r1, [sp, #12]
 8006e3a:	600a      	str	r2, [r1, #0]
 8006e3c:	d1db      	bne.n	8006df6 <_scanf_float+0x39a>
 8006e3e:	f8d3 8000 	ldr.w	r8, [r3]
 8006e42:	ee10 2a10 	vmov	r2, s0
 8006e46:	ee10 0a10 	vmov	r0, s0
 8006e4a:	463b      	mov	r3, r7
 8006e4c:	4639      	mov	r1, r7
 8006e4e:	f7f9 fe7d 	bl	8000b4c <__aeabi_dcmpun>
 8006e52:	b128      	cbz	r0, 8006e60 <_scanf_float+0x404>
 8006e54:	4808      	ldr	r0, [pc, #32]	; (8006e78 <_scanf_float+0x41c>)
 8006e56:	f000 f811 	bl	8006e7c <nanf>
 8006e5a:	ed88 0a00 	vstr	s0, [r8]
 8006e5e:	e7cd      	b.n	8006dfc <_scanf_float+0x3a0>
 8006e60:	4630      	mov	r0, r6
 8006e62:	4639      	mov	r1, r7
 8006e64:	f7f9 fed0 	bl	8000c08 <__aeabi_d2f>
 8006e68:	f8c8 0000 	str.w	r0, [r8]
 8006e6c:	e7c6      	b.n	8006dfc <_scanf_float+0x3a0>
 8006e6e:	2500      	movs	r5, #0
 8006e70:	e635      	b.n	8006ade <_scanf_float+0x82>
 8006e72:	bf00      	nop
 8006e74:	0800acb0 	.word	0x0800acb0
 8006e78:	0800b0c8 	.word	0x0800b0c8

08006e7c <nanf>:
 8006e7c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006e84 <nanf+0x8>
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	7fc00000 	.word	0x7fc00000

08006e88 <siprintf>:
 8006e88:	b40e      	push	{r1, r2, r3}
 8006e8a:	b500      	push	{lr}
 8006e8c:	b09c      	sub	sp, #112	; 0x70
 8006e8e:	ab1d      	add	r3, sp, #116	; 0x74
 8006e90:	9002      	str	r0, [sp, #8]
 8006e92:	9006      	str	r0, [sp, #24]
 8006e94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e98:	4809      	ldr	r0, [pc, #36]	; (8006ec0 <siprintf+0x38>)
 8006e9a:	9107      	str	r1, [sp, #28]
 8006e9c:	9104      	str	r1, [sp, #16]
 8006e9e:	4909      	ldr	r1, [pc, #36]	; (8006ec4 <siprintf+0x3c>)
 8006ea0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ea4:	9105      	str	r1, [sp, #20]
 8006ea6:	6800      	ldr	r0, [r0, #0]
 8006ea8:	9301      	str	r3, [sp, #4]
 8006eaa:	a902      	add	r1, sp, #8
 8006eac:	f002 fea4 	bl	8009bf8 <_svfiprintf_r>
 8006eb0:	9b02      	ldr	r3, [sp, #8]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	701a      	strb	r2, [r3, #0]
 8006eb6:	b01c      	add	sp, #112	; 0x70
 8006eb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ebc:	b003      	add	sp, #12
 8006ebe:	4770      	bx	lr
 8006ec0:	20000010 	.word	0x20000010
 8006ec4:	ffff0208 	.word	0xffff0208

08006ec8 <sulp>:
 8006ec8:	b570      	push	{r4, r5, r6, lr}
 8006eca:	4604      	mov	r4, r0
 8006ecc:	460d      	mov	r5, r1
 8006ece:	ec45 4b10 	vmov	d0, r4, r5
 8006ed2:	4616      	mov	r6, r2
 8006ed4:	f002 fc2c 	bl	8009730 <__ulp>
 8006ed8:	ec51 0b10 	vmov	r0, r1, d0
 8006edc:	b17e      	cbz	r6, 8006efe <sulp+0x36>
 8006ede:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006ee2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	dd09      	ble.n	8006efe <sulp+0x36>
 8006eea:	051b      	lsls	r3, r3, #20
 8006eec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006ef0:	2400      	movs	r4, #0
 8006ef2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006ef6:	4622      	mov	r2, r4
 8006ef8:	462b      	mov	r3, r5
 8006efa:	f7f9 fb8d 	bl	8000618 <__aeabi_dmul>
 8006efe:	bd70      	pop	{r4, r5, r6, pc}

08006f00 <_strtod_l>:
 8006f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f04:	b0a3      	sub	sp, #140	; 0x8c
 8006f06:	461f      	mov	r7, r3
 8006f08:	2300      	movs	r3, #0
 8006f0a:	931e      	str	r3, [sp, #120]	; 0x78
 8006f0c:	4ba4      	ldr	r3, [pc, #656]	; (80071a0 <_strtod_l+0x2a0>)
 8006f0e:	9219      	str	r2, [sp, #100]	; 0x64
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	9307      	str	r3, [sp, #28]
 8006f14:	4604      	mov	r4, r0
 8006f16:	4618      	mov	r0, r3
 8006f18:	4688      	mov	r8, r1
 8006f1a:	f7f9 f969 	bl	80001f0 <strlen>
 8006f1e:	f04f 0a00 	mov.w	sl, #0
 8006f22:	4605      	mov	r5, r0
 8006f24:	f04f 0b00 	mov.w	fp, #0
 8006f28:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006f2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006f2e:	781a      	ldrb	r2, [r3, #0]
 8006f30:	2a2b      	cmp	r2, #43	; 0x2b
 8006f32:	d04c      	beq.n	8006fce <_strtod_l+0xce>
 8006f34:	d839      	bhi.n	8006faa <_strtod_l+0xaa>
 8006f36:	2a0d      	cmp	r2, #13
 8006f38:	d832      	bhi.n	8006fa0 <_strtod_l+0xa0>
 8006f3a:	2a08      	cmp	r2, #8
 8006f3c:	d832      	bhi.n	8006fa4 <_strtod_l+0xa4>
 8006f3e:	2a00      	cmp	r2, #0
 8006f40:	d03c      	beq.n	8006fbc <_strtod_l+0xbc>
 8006f42:	2300      	movs	r3, #0
 8006f44:	930e      	str	r3, [sp, #56]	; 0x38
 8006f46:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006f48:	7833      	ldrb	r3, [r6, #0]
 8006f4a:	2b30      	cmp	r3, #48	; 0x30
 8006f4c:	f040 80b4 	bne.w	80070b8 <_strtod_l+0x1b8>
 8006f50:	7873      	ldrb	r3, [r6, #1]
 8006f52:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006f56:	2b58      	cmp	r3, #88	; 0x58
 8006f58:	d16c      	bne.n	8007034 <_strtod_l+0x134>
 8006f5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f5c:	9301      	str	r3, [sp, #4]
 8006f5e:	ab1e      	add	r3, sp, #120	; 0x78
 8006f60:	9702      	str	r7, [sp, #8]
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	4a8f      	ldr	r2, [pc, #572]	; (80071a4 <_strtod_l+0x2a4>)
 8006f66:	ab1f      	add	r3, sp, #124	; 0x7c
 8006f68:	a91d      	add	r1, sp, #116	; 0x74
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f001 fd40 	bl	80089f0 <__gethex>
 8006f70:	f010 0707 	ands.w	r7, r0, #7
 8006f74:	4605      	mov	r5, r0
 8006f76:	d005      	beq.n	8006f84 <_strtod_l+0x84>
 8006f78:	2f06      	cmp	r7, #6
 8006f7a:	d12a      	bne.n	8006fd2 <_strtod_l+0xd2>
 8006f7c:	3601      	adds	r6, #1
 8006f7e:	2300      	movs	r3, #0
 8006f80:	961d      	str	r6, [sp, #116]	; 0x74
 8006f82:	930e      	str	r3, [sp, #56]	; 0x38
 8006f84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f040 8596 	bne.w	8007ab8 <_strtod_l+0xbb8>
 8006f8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f8e:	b1db      	cbz	r3, 8006fc8 <_strtod_l+0xc8>
 8006f90:	4652      	mov	r2, sl
 8006f92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f96:	ec43 2b10 	vmov	d0, r2, r3
 8006f9a:	b023      	add	sp, #140	; 0x8c
 8006f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa0:	2a20      	cmp	r2, #32
 8006fa2:	d1ce      	bne.n	8006f42 <_strtod_l+0x42>
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	931d      	str	r3, [sp, #116]	; 0x74
 8006fa8:	e7c0      	b.n	8006f2c <_strtod_l+0x2c>
 8006faa:	2a2d      	cmp	r2, #45	; 0x2d
 8006fac:	d1c9      	bne.n	8006f42 <_strtod_l+0x42>
 8006fae:	2201      	movs	r2, #1
 8006fb0:	920e      	str	r2, [sp, #56]	; 0x38
 8006fb2:	1c5a      	adds	r2, r3, #1
 8006fb4:	921d      	str	r2, [sp, #116]	; 0x74
 8006fb6:	785b      	ldrb	r3, [r3, #1]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1c4      	bne.n	8006f46 <_strtod_l+0x46>
 8006fbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fbe:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f040 8576 	bne.w	8007ab4 <_strtod_l+0xbb4>
 8006fc8:	4652      	mov	r2, sl
 8006fca:	465b      	mov	r3, fp
 8006fcc:	e7e3      	b.n	8006f96 <_strtod_l+0x96>
 8006fce:	2200      	movs	r2, #0
 8006fd0:	e7ee      	b.n	8006fb0 <_strtod_l+0xb0>
 8006fd2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006fd4:	b13a      	cbz	r2, 8006fe6 <_strtod_l+0xe6>
 8006fd6:	2135      	movs	r1, #53	; 0x35
 8006fd8:	a820      	add	r0, sp, #128	; 0x80
 8006fda:	f002 fcb4 	bl	8009946 <__copybits>
 8006fde:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f002 f879 	bl	80090d8 <_Bfree>
 8006fe6:	3f01      	subs	r7, #1
 8006fe8:	2f05      	cmp	r7, #5
 8006fea:	d807      	bhi.n	8006ffc <_strtod_l+0xfc>
 8006fec:	e8df f007 	tbb	[pc, r7]
 8006ff0:	1d180b0e 	.word	0x1d180b0e
 8006ff4:	030e      	.short	0x030e
 8006ff6:	f04f 0b00 	mov.w	fp, #0
 8006ffa:	46da      	mov	sl, fp
 8006ffc:	0728      	lsls	r0, r5, #28
 8006ffe:	d5c1      	bpl.n	8006f84 <_strtod_l+0x84>
 8007000:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007004:	e7be      	b.n	8006f84 <_strtod_l+0x84>
 8007006:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800700a:	e7f7      	b.n	8006ffc <_strtod_l+0xfc>
 800700c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8007010:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007012:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007016:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800701a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800701e:	e7ed      	b.n	8006ffc <_strtod_l+0xfc>
 8007020:	f8df b184 	ldr.w	fp, [pc, #388]	; 80071a8 <_strtod_l+0x2a8>
 8007024:	f04f 0a00 	mov.w	sl, #0
 8007028:	e7e8      	b.n	8006ffc <_strtod_l+0xfc>
 800702a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800702e:	f04f 3aff 	mov.w	sl, #4294967295
 8007032:	e7e3      	b.n	8006ffc <_strtod_l+0xfc>
 8007034:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007036:	1c5a      	adds	r2, r3, #1
 8007038:	921d      	str	r2, [sp, #116]	; 0x74
 800703a:	785b      	ldrb	r3, [r3, #1]
 800703c:	2b30      	cmp	r3, #48	; 0x30
 800703e:	d0f9      	beq.n	8007034 <_strtod_l+0x134>
 8007040:	2b00      	cmp	r3, #0
 8007042:	d09f      	beq.n	8006f84 <_strtod_l+0x84>
 8007044:	2301      	movs	r3, #1
 8007046:	f04f 0900 	mov.w	r9, #0
 800704a:	9304      	str	r3, [sp, #16]
 800704c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800704e:	930a      	str	r3, [sp, #40]	; 0x28
 8007050:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007054:	464f      	mov	r7, r9
 8007056:	220a      	movs	r2, #10
 8007058:	981d      	ldr	r0, [sp, #116]	; 0x74
 800705a:	7806      	ldrb	r6, [r0, #0]
 800705c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007060:	b2d9      	uxtb	r1, r3
 8007062:	2909      	cmp	r1, #9
 8007064:	d92a      	bls.n	80070bc <_strtod_l+0x1bc>
 8007066:	9907      	ldr	r1, [sp, #28]
 8007068:	462a      	mov	r2, r5
 800706a:	f002 fedd 	bl	8009e28 <strncmp>
 800706e:	b398      	cbz	r0, 80070d8 <_strtod_l+0x1d8>
 8007070:	2000      	movs	r0, #0
 8007072:	4633      	mov	r3, r6
 8007074:	463d      	mov	r5, r7
 8007076:	9007      	str	r0, [sp, #28]
 8007078:	4602      	mov	r2, r0
 800707a:	2b65      	cmp	r3, #101	; 0x65
 800707c:	d001      	beq.n	8007082 <_strtod_l+0x182>
 800707e:	2b45      	cmp	r3, #69	; 0x45
 8007080:	d118      	bne.n	80070b4 <_strtod_l+0x1b4>
 8007082:	b91d      	cbnz	r5, 800708c <_strtod_l+0x18c>
 8007084:	9b04      	ldr	r3, [sp, #16]
 8007086:	4303      	orrs	r3, r0
 8007088:	d098      	beq.n	8006fbc <_strtod_l+0xbc>
 800708a:	2500      	movs	r5, #0
 800708c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007090:	f108 0301 	add.w	r3, r8, #1
 8007094:	931d      	str	r3, [sp, #116]	; 0x74
 8007096:	f898 3001 	ldrb.w	r3, [r8, #1]
 800709a:	2b2b      	cmp	r3, #43	; 0x2b
 800709c:	d075      	beq.n	800718a <_strtod_l+0x28a>
 800709e:	2b2d      	cmp	r3, #45	; 0x2d
 80070a0:	d07b      	beq.n	800719a <_strtod_l+0x29a>
 80070a2:	f04f 0c00 	mov.w	ip, #0
 80070a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80070aa:	2909      	cmp	r1, #9
 80070ac:	f240 8082 	bls.w	80071b4 <_strtod_l+0x2b4>
 80070b0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80070b4:	2600      	movs	r6, #0
 80070b6:	e09d      	b.n	80071f4 <_strtod_l+0x2f4>
 80070b8:	2300      	movs	r3, #0
 80070ba:	e7c4      	b.n	8007046 <_strtod_l+0x146>
 80070bc:	2f08      	cmp	r7, #8
 80070be:	bfd8      	it	le
 80070c0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80070c2:	f100 0001 	add.w	r0, r0, #1
 80070c6:	bfda      	itte	le
 80070c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80070cc:	9309      	strle	r3, [sp, #36]	; 0x24
 80070ce:	fb02 3909 	mlagt	r9, r2, r9, r3
 80070d2:	3701      	adds	r7, #1
 80070d4:	901d      	str	r0, [sp, #116]	; 0x74
 80070d6:	e7bf      	b.n	8007058 <_strtod_l+0x158>
 80070d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80070da:	195a      	adds	r2, r3, r5
 80070dc:	921d      	str	r2, [sp, #116]	; 0x74
 80070de:	5d5b      	ldrb	r3, [r3, r5]
 80070e0:	2f00      	cmp	r7, #0
 80070e2:	d037      	beq.n	8007154 <_strtod_l+0x254>
 80070e4:	9007      	str	r0, [sp, #28]
 80070e6:	463d      	mov	r5, r7
 80070e8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80070ec:	2a09      	cmp	r2, #9
 80070ee:	d912      	bls.n	8007116 <_strtod_l+0x216>
 80070f0:	2201      	movs	r2, #1
 80070f2:	e7c2      	b.n	800707a <_strtod_l+0x17a>
 80070f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80070f6:	1c5a      	adds	r2, r3, #1
 80070f8:	921d      	str	r2, [sp, #116]	; 0x74
 80070fa:	785b      	ldrb	r3, [r3, #1]
 80070fc:	3001      	adds	r0, #1
 80070fe:	2b30      	cmp	r3, #48	; 0x30
 8007100:	d0f8      	beq.n	80070f4 <_strtod_l+0x1f4>
 8007102:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007106:	2a08      	cmp	r2, #8
 8007108:	f200 84db 	bhi.w	8007ac2 <_strtod_l+0xbc2>
 800710c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800710e:	9007      	str	r0, [sp, #28]
 8007110:	2000      	movs	r0, #0
 8007112:	920a      	str	r2, [sp, #40]	; 0x28
 8007114:	4605      	mov	r5, r0
 8007116:	3b30      	subs	r3, #48	; 0x30
 8007118:	f100 0201 	add.w	r2, r0, #1
 800711c:	d014      	beq.n	8007148 <_strtod_l+0x248>
 800711e:	9907      	ldr	r1, [sp, #28]
 8007120:	4411      	add	r1, r2
 8007122:	9107      	str	r1, [sp, #28]
 8007124:	462a      	mov	r2, r5
 8007126:	eb00 0e05 	add.w	lr, r0, r5
 800712a:	210a      	movs	r1, #10
 800712c:	4572      	cmp	r2, lr
 800712e:	d113      	bne.n	8007158 <_strtod_l+0x258>
 8007130:	182a      	adds	r2, r5, r0
 8007132:	2a08      	cmp	r2, #8
 8007134:	f105 0501 	add.w	r5, r5, #1
 8007138:	4405      	add	r5, r0
 800713a:	dc1c      	bgt.n	8007176 <_strtod_l+0x276>
 800713c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800713e:	220a      	movs	r2, #10
 8007140:	fb02 3301 	mla	r3, r2, r1, r3
 8007144:	9309      	str	r3, [sp, #36]	; 0x24
 8007146:	2200      	movs	r2, #0
 8007148:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800714a:	1c59      	adds	r1, r3, #1
 800714c:	911d      	str	r1, [sp, #116]	; 0x74
 800714e:	785b      	ldrb	r3, [r3, #1]
 8007150:	4610      	mov	r0, r2
 8007152:	e7c9      	b.n	80070e8 <_strtod_l+0x1e8>
 8007154:	4638      	mov	r0, r7
 8007156:	e7d2      	b.n	80070fe <_strtod_l+0x1fe>
 8007158:	2a08      	cmp	r2, #8
 800715a:	dc04      	bgt.n	8007166 <_strtod_l+0x266>
 800715c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800715e:	434e      	muls	r6, r1
 8007160:	9609      	str	r6, [sp, #36]	; 0x24
 8007162:	3201      	adds	r2, #1
 8007164:	e7e2      	b.n	800712c <_strtod_l+0x22c>
 8007166:	f102 0c01 	add.w	ip, r2, #1
 800716a:	f1bc 0f10 	cmp.w	ip, #16
 800716e:	bfd8      	it	le
 8007170:	fb01 f909 	mulle.w	r9, r1, r9
 8007174:	e7f5      	b.n	8007162 <_strtod_l+0x262>
 8007176:	2d10      	cmp	r5, #16
 8007178:	bfdc      	itt	le
 800717a:	220a      	movle	r2, #10
 800717c:	fb02 3909 	mlale	r9, r2, r9, r3
 8007180:	e7e1      	b.n	8007146 <_strtod_l+0x246>
 8007182:	2300      	movs	r3, #0
 8007184:	9307      	str	r3, [sp, #28]
 8007186:	2201      	movs	r2, #1
 8007188:	e77c      	b.n	8007084 <_strtod_l+0x184>
 800718a:	f04f 0c00 	mov.w	ip, #0
 800718e:	f108 0302 	add.w	r3, r8, #2
 8007192:	931d      	str	r3, [sp, #116]	; 0x74
 8007194:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007198:	e785      	b.n	80070a6 <_strtod_l+0x1a6>
 800719a:	f04f 0c01 	mov.w	ip, #1
 800719e:	e7f6      	b.n	800718e <_strtod_l+0x28e>
 80071a0:	0800af08 	.word	0x0800af08
 80071a4:	0800acb8 	.word	0x0800acb8
 80071a8:	7ff00000 	.word	0x7ff00000
 80071ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80071ae:	1c59      	adds	r1, r3, #1
 80071b0:	911d      	str	r1, [sp, #116]	; 0x74
 80071b2:	785b      	ldrb	r3, [r3, #1]
 80071b4:	2b30      	cmp	r3, #48	; 0x30
 80071b6:	d0f9      	beq.n	80071ac <_strtod_l+0x2ac>
 80071b8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80071bc:	2908      	cmp	r1, #8
 80071be:	f63f af79 	bhi.w	80070b4 <_strtod_l+0x1b4>
 80071c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80071c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80071c8:	9308      	str	r3, [sp, #32]
 80071ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80071cc:	1c59      	adds	r1, r3, #1
 80071ce:	911d      	str	r1, [sp, #116]	; 0x74
 80071d0:	785b      	ldrb	r3, [r3, #1]
 80071d2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80071d6:	2e09      	cmp	r6, #9
 80071d8:	d937      	bls.n	800724a <_strtod_l+0x34a>
 80071da:	9e08      	ldr	r6, [sp, #32]
 80071dc:	1b89      	subs	r1, r1, r6
 80071de:	2908      	cmp	r1, #8
 80071e0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80071e4:	dc02      	bgt.n	80071ec <_strtod_l+0x2ec>
 80071e6:	4576      	cmp	r6, lr
 80071e8:	bfa8      	it	ge
 80071ea:	4676      	movge	r6, lr
 80071ec:	f1bc 0f00 	cmp.w	ip, #0
 80071f0:	d000      	beq.n	80071f4 <_strtod_l+0x2f4>
 80071f2:	4276      	negs	r6, r6
 80071f4:	2d00      	cmp	r5, #0
 80071f6:	d14f      	bne.n	8007298 <_strtod_l+0x398>
 80071f8:	9904      	ldr	r1, [sp, #16]
 80071fa:	4301      	orrs	r1, r0
 80071fc:	f47f aec2 	bne.w	8006f84 <_strtod_l+0x84>
 8007200:	2a00      	cmp	r2, #0
 8007202:	f47f aedb 	bne.w	8006fbc <_strtod_l+0xbc>
 8007206:	2b69      	cmp	r3, #105	; 0x69
 8007208:	d027      	beq.n	800725a <_strtod_l+0x35a>
 800720a:	dc24      	bgt.n	8007256 <_strtod_l+0x356>
 800720c:	2b49      	cmp	r3, #73	; 0x49
 800720e:	d024      	beq.n	800725a <_strtod_l+0x35a>
 8007210:	2b4e      	cmp	r3, #78	; 0x4e
 8007212:	f47f aed3 	bne.w	8006fbc <_strtod_l+0xbc>
 8007216:	499e      	ldr	r1, [pc, #632]	; (8007490 <_strtod_l+0x590>)
 8007218:	a81d      	add	r0, sp, #116	; 0x74
 800721a:	f001 fe41 	bl	8008ea0 <__match>
 800721e:	2800      	cmp	r0, #0
 8007220:	f43f aecc 	beq.w	8006fbc <_strtod_l+0xbc>
 8007224:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	2b28      	cmp	r3, #40	; 0x28
 800722a:	d12d      	bne.n	8007288 <_strtod_l+0x388>
 800722c:	4999      	ldr	r1, [pc, #612]	; (8007494 <_strtod_l+0x594>)
 800722e:	aa20      	add	r2, sp, #128	; 0x80
 8007230:	a81d      	add	r0, sp, #116	; 0x74
 8007232:	f001 fe49 	bl	8008ec8 <__hexnan>
 8007236:	2805      	cmp	r0, #5
 8007238:	d126      	bne.n	8007288 <_strtod_l+0x388>
 800723a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800723c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8007240:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007244:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007248:	e69c      	b.n	8006f84 <_strtod_l+0x84>
 800724a:	210a      	movs	r1, #10
 800724c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007250:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007254:	e7b9      	b.n	80071ca <_strtod_l+0x2ca>
 8007256:	2b6e      	cmp	r3, #110	; 0x6e
 8007258:	e7db      	b.n	8007212 <_strtod_l+0x312>
 800725a:	498f      	ldr	r1, [pc, #572]	; (8007498 <_strtod_l+0x598>)
 800725c:	a81d      	add	r0, sp, #116	; 0x74
 800725e:	f001 fe1f 	bl	8008ea0 <__match>
 8007262:	2800      	cmp	r0, #0
 8007264:	f43f aeaa 	beq.w	8006fbc <_strtod_l+0xbc>
 8007268:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800726a:	498c      	ldr	r1, [pc, #560]	; (800749c <_strtod_l+0x59c>)
 800726c:	3b01      	subs	r3, #1
 800726e:	a81d      	add	r0, sp, #116	; 0x74
 8007270:	931d      	str	r3, [sp, #116]	; 0x74
 8007272:	f001 fe15 	bl	8008ea0 <__match>
 8007276:	b910      	cbnz	r0, 800727e <_strtod_l+0x37e>
 8007278:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800727a:	3301      	adds	r3, #1
 800727c:	931d      	str	r3, [sp, #116]	; 0x74
 800727e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80074ac <_strtod_l+0x5ac>
 8007282:	f04f 0a00 	mov.w	sl, #0
 8007286:	e67d      	b.n	8006f84 <_strtod_l+0x84>
 8007288:	4885      	ldr	r0, [pc, #532]	; (80074a0 <_strtod_l+0x5a0>)
 800728a:	f002 fdb5 	bl	8009df8 <nan>
 800728e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007292:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007296:	e675      	b.n	8006f84 <_strtod_l+0x84>
 8007298:	9b07      	ldr	r3, [sp, #28]
 800729a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800729c:	1af3      	subs	r3, r6, r3
 800729e:	2f00      	cmp	r7, #0
 80072a0:	bf08      	it	eq
 80072a2:	462f      	moveq	r7, r5
 80072a4:	2d10      	cmp	r5, #16
 80072a6:	9308      	str	r3, [sp, #32]
 80072a8:	46a8      	mov	r8, r5
 80072aa:	bfa8      	it	ge
 80072ac:	f04f 0810 	movge.w	r8, #16
 80072b0:	f7f9 f938 	bl	8000524 <__aeabi_ui2d>
 80072b4:	2d09      	cmp	r5, #9
 80072b6:	4682      	mov	sl, r0
 80072b8:	468b      	mov	fp, r1
 80072ba:	dd13      	ble.n	80072e4 <_strtod_l+0x3e4>
 80072bc:	4b79      	ldr	r3, [pc, #484]	; (80074a4 <_strtod_l+0x5a4>)
 80072be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80072c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80072c6:	f7f9 f9a7 	bl	8000618 <__aeabi_dmul>
 80072ca:	4682      	mov	sl, r0
 80072cc:	4648      	mov	r0, r9
 80072ce:	468b      	mov	fp, r1
 80072d0:	f7f9 f928 	bl	8000524 <__aeabi_ui2d>
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	4650      	mov	r0, sl
 80072da:	4659      	mov	r1, fp
 80072dc:	f7f8 ffe6 	bl	80002ac <__adddf3>
 80072e0:	4682      	mov	sl, r0
 80072e2:	468b      	mov	fp, r1
 80072e4:	2d0f      	cmp	r5, #15
 80072e6:	dc38      	bgt.n	800735a <_strtod_l+0x45a>
 80072e8:	9b08      	ldr	r3, [sp, #32]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f43f ae4a 	beq.w	8006f84 <_strtod_l+0x84>
 80072f0:	dd24      	ble.n	800733c <_strtod_l+0x43c>
 80072f2:	2b16      	cmp	r3, #22
 80072f4:	dc0b      	bgt.n	800730e <_strtod_l+0x40e>
 80072f6:	4d6b      	ldr	r5, [pc, #428]	; (80074a4 <_strtod_l+0x5a4>)
 80072f8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80072fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007300:	4652      	mov	r2, sl
 8007302:	465b      	mov	r3, fp
 8007304:	f7f9 f988 	bl	8000618 <__aeabi_dmul>
 8007308:	4682      	mov	sl, r0
 800730a:	468b      	mov	fp, r1
 800730c:	e63a      	b.n	8006f84 <_strtod_l+0x84>
 800730e:	9a08      	ldr	r2, [sp, #32]
 8007310:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007314:	4293      	cmp	r3, r2
 8007316:	db20      	blt.n	800735a <_strtod_l+0x45a>
 8007318:	4c62      	ldr	r4, [pc, #392]	; (80074a4 <_strtod_l+0x5a4>)
 800731a:	f1c5 050f 	rsb	r5, r5, #15
 800731e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007322:	4652      	mov	r2, sl
 8007324:	465b      	mov	r3, fp
 8007326:	e9d1 0100 	ldrd	r0, r1, [r1]
 800732a:	f7f9 f975 	bl	8000618 <__aeabi_dmul>
 800732e:	9b08      	ldr	r3, [sp, #32]
 8007330:	1b5d      	subs	r5, r3, r5
 8007332:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007336:	e9d4 2300 	ldrd	r2, r3, [r4]
 800733a:	e7e3      	b.n	8007304 <_strtod_l+0x404>
 800733c:	9b08      	ldr	r3, [sp, #32]
 800733e:	3316      	adds	r3, #22
 8007340:	db0b      	blt.n	800735a <_strtod_l+0x45a>
 8007342:	9b07      	ldr	r3, [sp, #28]
 8007344:	4a57      	ldr	r2, [pc, #348]	; (80074a4 <_strtod_l+0x5a4>)
 8007346:	1b9e      	subs	r6, r3, r6
 8007348:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800734c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007350:	4650      	mov	r0, sl
 8007352:	4659      	mov	r1, fp
 8007354:	f7f9 fa8a 	bl	800086c <__aeabi_ddiv>
 8007358:	e7d6      	b.n	8007308 <_strtod_l+0x408>
 800735a:	9b08      	ldr	r3, [sp, #32]
 800735c:	eba5 0808 	sub.w	r8, r5, r8
 8007360:	4498      	add	r8, r3
 8007362:	f1b8 0f00 	cmp.w	r8, #0
 8007366:	dd71      	ble.n	800744c <_strtod_l+0x54c>
 8007368:	f018 030f 	ands.w	r3, r8, #15
 800736c:	d00a      	beq.n	8007384 <_strtod_l+0x484>
 800736e:	494d      	ldr	r1, [pc, #308]	; (80074a4 <_strtod_l+0x5a4>)
 8007370:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007374:	4652      	mov	r2, sl
 8007376:	465b      	mov	r3, fp
 8007378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800737c:	f7f9 f94c 	bl	8000618 <__aeabi_dmul>
 8007380:	4682      	mov	sl, r0
 8007382:	468b      	mov	fp, r1
 8007384:	f038 080f 	bics.w	r8, r8, #15
 8007388:	d04d      	beq.n	8007426 <_strtod_l+0x526>
 800738a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800738e:	dd22      	ble.n	80073d6 <_strtod_l+0x4d6>
 8007390:	2500      	movs	r5, #0
 8007392:	462e      	mov	r6, r5
 8007394:	9509      	str	r5, [sp, #36]	; 0x24
 8007396:	9507      	str	r5, [sp, #28]
 8007398:	2322      	movs	r3, #34	; 0x22
 800739a:	f8df b110 	ldr.w	fp, [pc, #272]	; 80074ac <_strtod_l+0x5ac>
 800739e:	6023      	str	r3, [r4, #0]
 80073a0:	f04f 0a00 	mov.w	sl, #0
 80073a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f43f adec 	beq.w	8006f84 <_strtod_l+0x84>
 80073ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 80073ae:	4620      	mov	r0, r4
 80073b0:	f001 fe92 	bl	80090d8 <_Bfree>
 80073b4:	9907      	ldr	r1, [sp, #28]
 80073b6:	4620      	mov	r0, r4
 80073b8:	f001 fe8e 	bl	80090d8 <_Bfree>
 80073bc:	4631      	mov	r1, r6
 80073be:	4620      	mov	r0, r4
 80073c0:	f001 fe8a 	bl	80090d8 <_Bfree>
 80073c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073c6:	4620      	mov	r0, r4
 80073c8:	f001 fe86 	bl	80090d8 <_Bfree>
 80073cc:	4629      	mov	r1, r5
 80073ce:	4620      	mov	r0, r4
 80073d0:	f001 fe82 	bl	80090d8 <_Bfree>
 80073d4:	e5d6      	b.n	8006f84 <_strtod_l+0x84>
 80073d6:	2300      	movs	r3, #0
 80073d8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80073dc:	4650      	mov	r0, sl
 80073de:	4659      	mov	r1, fp
 80073e0:	4699      	mov	r9, r3
 80073e2:	f1b8 0f01 	cmp.w	r8, #1
 80073e6:	dc21      	bgt.n	800742c <_strtod_l+0x52c>
 80073e8:	b10b      	cbz	r3, 80073ee <_strtod_l+0x4ee>
 80073ea:	4682      	mov	sl, r0
 80073ec:	468b      	mov	fp, r1
 80073ee:	4b2e      	ldr	r3, [pc, #184]	; (80074a8 <_strtod_l+0x5a8>)
 80073f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80073f4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80073f8:	4652      	mov	r2, sl
 80073fa:	465b      	mov	r3, fp
 80073fc:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007400:	f7f9 f90a 	bl	8000618 <__aeabi_dmul>
 8007404:	4b29      	ldr	r3, [pc, #164]	; (80074ac <_strtod_l+0x5ac>)
 8007406:	460a      	mov	r2, r1
 8007408:	400b      	ands	r3, r1
 800740a:	4929      	ldr	r1, [pc, #164]	; (80074b0 <_strtod_l+0x5b0>)
 800740c:	428b      	cmp	r3, r1
 800740e:	4682      	mov	sl, r0
 8007410:	d8be      	bhi.n	8007390 <_strtod_l+0x490>
 8007412:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007416:	428b      	cmp	r3, r1
 8007418:	bf86      	itte	hi
 800741a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80074b4 <_strtod_l+0x5b4>
 800741e:	f04f 3aff 	movhi.w	sl, #4294967295
 8007422:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007426:	2300      	movs	r3, #0
 8007428:	9304      	str	r3, [sp, #16]
 800742a:	e081      	b.n	8007530 <_strtod_l+0x630>
 800742c:	f018 0f01 	tst.w	r8, #1
 8007430:	d007      	beq.n	8007442 <_strtod_l+0x542>
 8007432:	4b1d      	ldr	r3, [pc, #116]	; (80074a8 <_strtod_l+0x5a8>)
 8007434:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743c:	f7f9 f8ec 	bl	8000618 <__aeabi_dmul>
 8007440:	2301      	movs	r3, #1
 8007442:	f109 0901 	add.w	r9, r9, #1
 8007446:	ea4f 0868 	mov.w	r8, r8, asr #1
 800744a:	e7ca      	b.n	80073e2 <_strtod_l+0x4e2>
 800744c:	d0eb      	beq.n	8007426 <_strtod_l+0x526>
 800744e:	f1c8 0800 	rsb	r8, r8, #0
 8007452:	f018 020f 	ands.w	r2, r8, #15
 8007456:	d00a      	beq.n	800746e <_strtod_l+0x56e>
 8007458:	4b12      	ldr	r3, [pc, #72]	; (80074a4 <_strtod_l+0x5a4>)
 800745a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800745e:	4650      	mov	r0, sl
 8007460:	4659      	mov	r1, fp
 8007462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007466:	f7f9 fa01 	bl	800086c <__aeabi_ddiv>
 800746a:	4682      	mov	sl, r0
 800746c:	468b      	mov	fp, r1
 800746e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007472:	d0d8      	beq.n	8007426 <_strtod_l+0x526>
 8007474:	f1b8 0f1f 	cmp.w	r8, #31
 8007478:	dd1e      	ble.n	80074b8 <_strtod_l+0x5b8>
 800747a:	2500      	movs	r5, #0
 800747c:	462e      	mov	r6, r5
 800747e:	9509      	str	r5, [sp, #36]	; 0x24
 8007480:	9507      	str	r5, [sp, #28]
 8007482:	2322      	movs	r3, #34	; 0x22
 8007484:	f04f 0a00 	mov.w	sl, #0
 8007488:	f04f 0b00 	mov.w	fp, #0
 800748c:	6023      	str	r3, [r4, #0]
 800748e:	e789      	b.n	80073a4 <_strtod_l+0x4a4>
 8007490:	0800ac89 	.word	0x0800ac89
 8007494:	0800accc 	.word	0x0800accc
 8007498:	0800ac81 	.word	0x0800ac81
 800749c:	0800ae0c 	.word	0x0800ae0c
 80074a0:	0800b0c8 	.word	0x0800b0c8
 80074a4:	0800afa8 	.word	0x0800afa8
 80074a8:	0800af80 	.word	0x0800af80
 80074ac:	7ff00000 	.word	0x7ff00000
 80074b0:	7ca00000 	.word	0x7ca00000
 80074b4:	7fefffff 	.word	0x7fefffff
 80074b8:	f018 0310 	ands.w	r3, r8, #16
 80074bc:	bf18      	it	ne
 80074be:	236a      	movne	r3, #106	; 0x6a
 80074c0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8007878 <_strtod_l+0x978>
 80074c4:	9304      	str	r3, [sp, #16]
 80074c6:	4650      	mov	r0, sl
 80074c8:	4659      	mov	r1, fp
 80074ca:	2300      	movs	r3, #0
 80074cc:	f018 0f01 	tst.w	r8, #1
 80074d0:	d004      	beq.n	80074dc <_strtod_l+0x5dc>
 80074d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80074d6:	f7f9 f89f 	bl	8000618 <__aeabi_dmul>
 80074da:	2301      	movs	r3, #1
 80074dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80074e0:	f109 0908 	add.w	r9, r9, #8
 80074e4:	d1f2      	bne.n	80074cc <_strtod_l+0x5cc>
 80074e6:	b10b      	cbz	r3, 80074ec <_strtod_l+0x5ec>
 80074e8:	4682      	mov	sl, r0
 80074ea:	468b      	mov	fp, r1
 80074ec:	9b04      	ldr	r3, [sp, #16]
 80074ee:	b1bb      	cbz	r3, 8007520 <_strtod_l+0x620>
 80074f0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80074f4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	4659      	mov	r1, fp
 80074fc:	dd10      	ble.n	8007520 <_strtod_l+0x620>
 80074fe:	2b1f      	cmp	r3, #31
 8007500:	f340 8128 	ble.w	8007754 <_strtod_l+0x854>
 8007504:	2b34      	cmp	r3, #52	; 0x34
 8007506:	bfde      	ittt	le
 8007508:	3b20      	suble	r3, #32
 800750a:	f04f 32ff 	movle.w	r2, #4294967295
 800750e:	fa02 f303 	lslle.w	r3, r2, r3
 8007512:	f04f 0a00 	mov.w	sl, #0
 8007516:	bfcc      	ite	gt
 8007518:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800751c:	ea03 0b01 	andle.w	fp, r3, r1
 8007520:	2200      	movs	r2, #0
 8007522:	2300      	movs	r3, #0
 8007524:	4650      	mov	r0, sl
 8007526:	4659      	mov	r1, fp
 8007528:	f7f9 fade 	bl	8000ae8 <__aeabi_dcmpeq>
 800752c:	2800      	cmp	r0, #0
 800752e:	d1a4      	bne.n	800747a <_strtod_l+0x57a>
 8007530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007536:	462b      	mov	r3, r5
 8007538:	463a      	mov	r2, r7
 800753a:	4620      	mov	r0, r4
 800753c:	f001 fe38 	bl	80091b0 <__s2b>
 8007540:	9009      	str	r0, [sp, #36]	; 0x24
 8007542:	2800      	cmp	r0, #0
 8007544:	f43f af24 	beq.w	8007390 <_strtod_l+0x490>
 8007548:	9b07      	ldr	r3, [sp, #28]
 800754a:	1b9e      	subs	r6, r3, r6
 800754c:	9b08      	ldr	r3, [sp, #32]
 800754e:	2b00      	cmp	r3, #0
 8007550:	bfb4      	ite	lt
 8007552:	4633      	movlt	r3, r6
 8007554:	2300      	movge	r3, #0
 8007556:	9310      	str	r3, [sp, #64]	; 0x40
 8007558:	9b08      	ldr	r3, [sp, #32]
 800755a:	2500      	movs	r5, #0
 800755c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007560:	9318      	str	r3, [sp, #96]	; 0x60
 8007562:	462e      	mov	r6, r5
 8007564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007566:	4620      	mov	r0, r4
 8007568:	6859      	ldr	r1, [r3, #4]
 800756a:	f001 fd75 	bl	8009058 <_Balloc>
 800756e:	9007      	str	r0, [sp, #28]
 8007570:	2800      	cmp	r0, #0
 8007572:	f43f af11 	beq.w	8007398 <_strtod_l+0x498>
 8007576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007578:	691a      	ldr	r2, [r3, #16]
 800757a:	3202      	adds	r2, #2
 800757c:	f103 010c 	add.w	r1, r3, #12
 8007580:	0092      	lsls	r2, r2, #2
 8007582:	300c      	adds	r0, #12
 8007584:	f001 fd5a 	bl	800903c <memcpy>
 8007588:	ec4b ab10 	vmov	d0, sl, fp
 800758c:	aa20      	add	r2, sp, #128	; 0x80
 800758e:	a91f      	add	r1, sp, #124	; 0x7c
 8007590:	4620      	mov	r0, r4
 8007592:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8007596:	f002 f947 	bl	8009828 <__d2b>
 800759a:	901e      	str	r0, [sp, #120]	; 0x78
 800759c:	2800      	cmp	r0, #0
 800759e:	f43f aefb 	beq.w	8007398 <_strtod_l+0x498>
 80075a2:	2101      	movs	r1, #1
 80075a4:	4620      	mov	r0, r4
 80075a6:	f001 fe9d 	bl	80092e4 <__i2b>
 80075aa:	4606      	mov	r6, r0
 80075ac:	2800      	cmp	r0, #0
 80075ae:	f43f aef3 	beq.w	8007398 <_strtod_l+0x498>
 80075b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80075b4:	9904      	ldr	r1, [sp, #16]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	bfab      	itete	ge
 80075ba:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80075bc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80075be:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80075c0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80075c4:	bfac      	ite	ge
 80075c6:	eb03 0902 	addge.w	r9, r3, r2
 80075ca:	1ad7      	sublt	r7, r2, r3
 80075cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80075ce:	eba3 0801 	sub.w	r8, r3, r1
 80075d2:	4490      	add	r8, r2
 80075d4:	4ba3      	ldr	r3, [pc, #652]	; (8007864 <_strtod_l+0x964>)
 80075d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80075da:	4598      	cmp	r8, r3
 80075dc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80075e0:	f280 80cc 	bge.w	800777c <_strtod_l+0x87c>
 80075e4:	eba3 0308 	sub.w	r3, r3, r8
 80075e8:	2b1f      	cmp	r3, #31
 80075ea:	eba2 0203 	sub.w	r2, r2, r3
 80075ee:	f04f 0101 	mov.w	r1, #1
 80075f2:	f300 80b6 	bgt.w	8007762 <_strtod_l+0x862>
 80075f6:	fa01 f303 	lsl.w	r3, r1, r3
 80075fa:	9311      	str	r3, [sp, #68]	; 0x44
 80075fc:	2300      	movs	r3, #0
 80075fe:	930c      	str	r3, [sp, #48]	; 0x30
 8007600:	eb09 0802 	add.w	r8, r9, r2
 8007604:	9b04      	ldr	r3, [sp, #16]
 8007606:	45c1      	cmp	r9, r8
 8007608:	4417      	add	r7, r2
 800760a:	441f      	add	r7, r3
 800760c:	464b      	mov	r3, r9
 800760e:	bfa8      	it	ge
 8007610:	4643      	movge	r3, r8
 8007612:	42bb      	cmp	r3, r7
 8007614:	bfa8      	it	ge
 8007616:	463b      	movge	r3, r7
 8007618:	2b00      	cmp	r3, #0
 800761a:	bfc2      	ittt	gt
 800761c:	eba8 0803 	subgt.w	r8, r8, r3
 8007620:	1aff      	subgt	r7, r7, r3
 8007622:	eba9 0903 	subgt.w	r9, r9, r3
 8007626:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007628:	2b00      	cmp	r3, #0
 800762a:	dd17      	ble.n	800765c <_strtod_l+0x75c>
 800762c:	4631      	mov	r1, r6
 800762e:	461a      	mov	r2, r3
 8007630:	4620      	mov	r0, r4
 8007632:	f001 ff13 	bl	800945c <__pow5mult>
 8007636:	4606      	mov	r6, r0
 8007638:	2800      	cmp	r0, #0
 800763a:	f43f aead 	beq.w	8007398 <_strtod_l+0x498>
 800763e:	4601      	mov	r1, r0
 8007640:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007642:	4620      	mov	r0, r4
 8007644:	f001 fe64 	bl	8009310 <__multiply>
 8007648:	900f      	str	r0, [sp, #60]	; 0x3c
 800764a:	2800      	cmp	r0, #0
 800764c:	f43f aea4 	beq.w	8007398 <_strtod_l+0x498>
 8007650:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007652:	4620      	mov	r0, r4
 8007654:	f001 fd40 	bl	80090d8 <_Bfree>
 8007658:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800765a:	931e      	str	r3, [sp, #120]	; 0x78
 800765c:	f1b8 0f00 	cmp.w	r8, #0
 8007660:	f300 8091 	bgt.w	8007786 <_strtod_l+0x886>
 8007664:	9b08      	ldr	r3, [sp, #32]
 8007666:	2b00      	cmp	r3, #0
 8007668:	dd08      	ble.n	800767c <_strtod_l+0x77c>
 800766a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800766c:	9907      	ldr	r1, [sp, #28]
 800766e:	4620      	mov	r0, r4
 8007670:	f001 fef4 	bl	800945c <__pow5mult>
 8007674:	9007      	str	r0, [sp, #28]
 8007676:	2800      	cmp	r0, #0
 8007678:	f43f ae8e 	beq.w	8007398 <_strtod_l+0x498>
 800767c:	2f00      	cmp	r7, #0
 800767e:	dd08      	ble.n	8007692 <_strtod_l+0x792>
 8007680:	9907      	ldr	r1, [sp, #28]
 8007682:	463a      	mov	r2, r7
 8007684:	4620      	mov	r0, r4
 8007686:	f001 ff43 	bl	8009510 <__lshift>
 800768a:	9007      	str	r0, [sp, #28]
 800768c:	2800      	cmp	r0, #0
 800768e:	f43f ae83 	beq.w	8007398 <_strtod_l+0x498>
 8007692:	f1b9 0f00 	cmp.w	r9, #0
 8007696:	dd08      	ble.n	80076aa <_strtod_l+0x7aa>
 8007698:	4631      	mov	r1, r6
 800769a:	464a      	mov	r2, r9
 800769c:	4620      	mov	r0, r4
 800769e:	f001 ff37 	bl	8009510 <__lshift>
 80076a2:	4606      	mov	r6, r0
 80076a4:	2800      	cmp	r0, #0
 80076a6:	f43f ae77 	beq.w	8007398 <_strtod_l+0x498>
 80076aa:	9a07      	ldr	r2, [sp, #28]
 80076ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 80076ae:	4620      	mov	r0, r4
 80076b0:	f001 ffb6 	bl	8009620 <__mdiff>
 80076b4:	4605      	mov	r5, r0
 80076b6:	2800      	cmp	r0, #0
 80076b8:	f43f ae6e 	beq.w	8007398 <_strtod_l+0x498>
 80076bc:	68c3      	ldr	r3, [r0, #12]
 80076be:	930f      	str	r3, [sp, #60]	; 0x3c
 80076c0:	2300      	movs	r3, #0
 80076c2:	60c3      	str	r3, [r0, #12]
 80076c4:	4631      	mov	r1, r6
 80076c6:	f001 ff8f 	bl	80095e8 <__mcmp>
 80076ca:	2800      	cmp	r0, #0
 80076cc:	da65      	bge.n	800779a <_strtod_l+0x89a>
 80076ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076d0:	ea53 030a 	orrs.w	r3, r3, sl
 80076d4:	f040 8087 	bne.w	80077e6 <_strtod_l+0x8e6>
 80076d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f040 8082 	bne.w	80077e6 <_strtod_l+0x8e6>
 80076e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80076e6:	0d1b      	lsrs	r3, r3, #20
 80076e8:	051b      	lsls	r3, r3, #20
 80076ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80076ee:	d97a      	bls.n	80077e6 <_strtod_l+0x8e6>
 80076f0:	696b      	ldr	r3, [r5, #20]
 80076f2:	b913      	cbnz	r3, 80076fa <_strtod_l+0x7fa>
 80076f4:	692b      	ldr	r3, [r5, #16]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	dd75      	ble.n	80077e6 <_strtod_l+0x8e6>
 80076fa:	4629      	mov	r1, r5
 80076fc:	2201      	movs	r2, #1
 80076fe:	4620      	mov	r0, r4
 8007700:	f001 ff06 	bl	8009510 <__lshift>
 8007704:	4631      	mov	r1, r6
 8007706:	4605      	mov	r5, r0
 8007708:	f001 ff6e 	bl	80095e8 <__mcmp>
 800770c:	2800      	cmp	r0, #0
 800770e:	dd6a      	ble.n	80077e6 <_strtod_l+0x8e6>
 8007710:	9904      	ldr	r1, [sp, #16]
 8007712:	4a55      	ldr	r2, [pc, #340]	; (8007868 <_strtod_l+0x968>)
 8007714:	465b      	mov	r3, fp
 8007716:	2900      	cmp	r1, #0
 8007718:	f000 8085 	beq.w	8007826 <_strtod_l+0x926>
 800771c:	ea02 010b 	and.w	r1, r2, fp
 8007720:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007724:	dc7f      	bgt.n	8007826 <_strtod_l+0x926>
 8007726:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800772a:	f77f aeaa 	ble.w	8007482 <_strtod_l+0x582>
 800772e:	4a4f      	ldr	r2, [pc, #316]	; (800786c <_strtod_l+0x96c>)
 8007730:	2300      	movs	r3, #0
 8007732:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8007736:	4650      	mov	r0, sl
 8007738:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800773c:	4659      	mov	r1, fp
 800773e:	f7f8 ff6b 	bl	8000618 <__aeabi_dmul>
 8007742:	460b      	mov	r3, r1
 8007744:	4303      	orrs	r3, r0
 8007746:	bf08      	it	eq
 8007748:	2322      	moveq	r3, #34	; 0x22
 800774a:	4682      	mov	sl, r0
 800774c:	468b      	mov	fp, r1
 800774e:	bf08      	it	eq
 8007750:	6023      	streq	r3, [r4, #0]
 8007752:	e62b      	b.n	80073ac <_strtod_l+0x4ac>
 8007754:	f04f 32ff 	mov.w	r2, #4294967295
 8007758:	fa02 f303 	lsl.w	r3, r2, r3
 800775c:	ea03 0a0a 	and.w	sl, r3, sl
 8007760:	e6de      	b.n	8007520 <_strtod_l+0x620>
 8007762:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007766:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800776a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800776e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007772:	fa01 f308 	lsl.w	r3, r1, r8
 8007776:	930c      	str	r3, [sp, #48]	; 0x30
 8007778:	9111      	str	r1, [sp, #68]	; 0x44
 800777a:	e741      	b.n	8007600 <_strtod_l+0x700>
 800777c:	2300      	movs	r3, #0
 800777e:	930c      	str	r3, [sp, #48]	; 0x30
 8007780:	2301      	movs	r3, #1
 8007782:	9311      	str	r3, [sp, #68]	; 0x44
 8007784:	e73c      	b.n	8007600 <_strtod_l+0x700>
 8007786:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007788:	4642      	mov	r2, r8
 800778a:	4620      	mov	r0, r4
 800778c:	f001 fec0 	bl	8009510 <__lshift>
 8007790:	901e      	str	r0, [sp, #120]	; 0x78
 8007792:	2800      	cmp	r0, #0
 8007794:	f47f af66 	bne.w	8007664 <_strtod_l+0x764>
 8007798:	e5fe      	b.n	8007398 <_strtod_l+0x498>
 800779a:	465f      	mov	r7, fp
 800779c:	d16e      	bne.n	800787c <_strtod_l+0x97c>
 800779e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80077a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077a4:	b342      	cbz	r2, 80077f8 <_strtod_l+0x8f8>
 80077a6:	4a32      	ldr	r2, [pc, #200]	; (8007870 <_strtod_l+0x970>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d128      	bne.n	80077fe <_strtod_l+0x8fe>
 80077ac:	9b04      	ldr	r3, [sp, #16]
 80077ae:	4650      	mov	r0, sl
 80077b0:	b1eb      	cbz	r3, 80077ee <_strtod_l+0x8ee>
 80077b2:	4a2d      	ldr	r2, [pc, #180]	; (8007868 <_strtod_l+0x968>)
 80077b4:	403a      	ands	r2, r7
 80077b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80077ba:	f04f 31ff 	mov.w	r1, #4294967295
 80077be:	d819      	bhi.n	80077f4 <_strtod_l+0x8f4>
 80077c0:	0d12      	lsrs	r2, r2, #20
 80077c2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80077c6:	fa01 f303 	lsl.w	r3, r1, r3
 80077ca:	4298      	cmp	r0, r3
 80077cc:	d117      	bne.n	80077fe <_strtod_l+0x8fe>
 80077ce:	4b29      	ldr	r3, [pc, #164]	; (8007874 <_strtod_l+0x974>)
 80077d0:	429f      	cmp	r7, r3
 80077d2:	d102      	bne.n	80077da <_strtod_l+0x8da>
 80077d4:	3001      	adds	r0, #1
 80077d6:	f43f addf 	beq.w	8007398 <_strtod_l+0x498>
 80077da:	4b23      	ldr	r3, [pc, #140]	; (8007868 <_strtod_l+0x968>)
 80077dc:	403b      	ands	r3, r7
 80077de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80077e2:	f04f 0a00 	mov.w	sl, #0
 80077e6:	9b04      	ldr	r3, [sp, #16]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1a0      	bne.n	800772e <_strtod_l+0x82e>
 80077ec:	e5de      	b.n	80073ac <_strtod_l+0x4ac>
 80077ee:	f04f 33ff 	mov.w	r3, #4294967295
 80077f2:	e7ea      	b.n	80077ca <_strtod_l+0x8ca>
 80077f4:	460b      	mov	r3, r1
 80077f6:	e7e8      	b.n	80077ca <_strtod_l+0x8ca>
 80077f8:	ea53 030a 	orrs.w	r3, r3, sl
 80077fc:	d088      	beq.n	8007710 <_strtod_l+0x810>
 80077fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007800:	b1db      	cbz	r3, 800783a <_strtod_l+0x93a>
 8007802:	423b      	tst	r3, r7
 8007804:	d0ef      	beq.n	80077e6 <_strtod_l+0x8e6>
 8007806:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007808:	9a04      	ldr	r2, [sp, #16]
 800780a:	4650      	mov	r0, sl
 800780c:	4659      	mov	r1, fp
 800780e:	b1c3      	cbz	r3, 8007842 <_strtod_l+0x942>
 8007810:	f7ff fb5a 	bl	8006ec8 <sulp>
 8007814:	4602      	mov	r2, r0
 8007816:	460b      	mov	r3, r1
 8007818:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800781c:	f7f8 fd46 	bl	80002ac <__adddf3>
 8007820:	4682      	mov	sl, r0
 8007822:	468b      	mov	fp, r1
 8007824:	e7df      	b.n	80077e6 <_strtod_l+0x8e6>
 8007826:	4013      	ands	r3, r2
 8007828:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800782c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007830:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007834:	f04f 3aff 	mov.w	sl, #4294967295
 8007838:	e7d5      	b.n	80077e6 <_strtod_l+0x8e6>
 800783a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800783c:	ea13 0f0a 	tst.w	r3, sl
 8007840:	e7e0      	b.n	8007804 <_strtod_l+0x904>
 8007842:	f7ff fb41 	bl	8006ec8 <sulp>
 8007846:	4602      	mov	r2, r0
 8007848:	460b      	mov	r3, r1
 800784a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800784e:	f7f8 fd2b 	bl	80002a8 <__aeabi_dsub>
 8007852:	2200      	movs	r2, #0
 8007854:	2300      	movs	r3, #0
 8007856:	4682      	mov	sl, r0
 8007858:	468b      	mov	fp, r1
 800785a:	f7f9 f945 	bl	8000ae8 <__aeabi_dcmpeq>
 800785e:	2800      	cmp	r0, #0
 8007860:	d0c1      	beq.n	80077e6 <_strtod_l+0x8e6>
 8007862:	e60e      	b.n	8007482 <_strtod_l+0x582>
 8007864:	fffffc02 	.word	0xfffffc02
 8007868:	7ff00000 	.word	0x7ff00000
 800786c:	39500000 	.word	0x39500000
 8007870:	000fffff 	.word	0x000fffff
 8007874:	7fefffff 	.word	0x7fefffff
 8007878:	0800ace0 	.word	0x0800ace0
 800787c:	4631      	mov	r1, r6
 800787e:	4628      	mov	r0, r5
 8007880:	f002 f82e 	bl	80098e0 <__ratio>
 8007884:	ec59 8b10 	vmov	r8, r9, d0
 8007888:	ee10 0a10 	vmov	r0, s0
 800788c:	2200      	movs	r2, #0
 800788e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007892:	4649      	mov	r1, r9
 8007894:	f7f9 f93c 	bl	8000b10 <__aeabi_dcmple>
 8007898:	2800      	cmp	r0, #0
 800789a:	d07c      	beq.n	8007996 <_strtod_l+0xa96>
 800789c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d04c      	beq.n	800793c <_strtod_l+0xa3c>
 80078a2:	4b95      	ldr	r3, [pc, #596]	; (8007af8 <_strtod_l+0xbf8>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80078aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007af8 <_strtod_l+0xbf8>
 80078ae:	f04f 0800 	mov.w	r8, #0
 80078b2:	4b92      	ldr	r3, [pc, #584]	; (8007afc <_strtod_l+0xbfc>)
 80078b4:	403b      	ands	r3, r7
 80078b6:	9311      	str	r3, [sp, #68]	; 0x44
 80078b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80078ba:	4b91      	ldr	r3, [pc, #580]	; (8007b00 <_strtod_l+0xc00>)
 80078bc:	429a      	cmp	r2, r3
 80078be:	f040 80b2 	bne.w	8007a26 <_strtod_l+0xb26>
 80078c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80078c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80078ca:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80078ce:	ec4b ab10 	vmov	d0, sl, fp
 80078d2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80078d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80078da:	f001 ff29 	bl	8009730 <__ulp>
 80078de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80078e2:	ec53 2b10 	vmov	r2, r3, d0
 80078e6:	f7f8 fe97 	bl	8000618 <__aeabi_dmul>
 80078ea:	4652      	mov	r2, sl
 80078ec:	465b      	mov	r3, fp
 80078ee:	f7f8 fcdd 	bl	80002ac <__adddf3>
 80078f2:	460b      	mov	r3, r1
 80078f4:	4981      	ldr	r1, [pc, #516]	; (8007afc <_strtod_l+0xbfc>)
 80078f6:	4a83      	ldr	r2, [pc, #524]	; (8007b04 <_strtod_l+0xc04>)
 80078f8:	4019      	ands	r1, r3
 80078fa:	4291      	cmp	r1, r2
 80078fc:	4682      	mov	sl, r0
 80078fe:	d95e      	bls.n	80079be <_strtod_l+0xabe>
 8007900:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007902:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007906:	4293      	cmp	r3, r2
 8007908:	d103      	bne.n	8007912 <_strtod_l+0xa12>
 800790a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800790c:	3301      	adds	r3, #1
 800790e:	f43f ad43 	beq.w	8007398 <_strtod_l+0x498>
 8007912:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007b10 <_strtod_l+0xc10>
 8007916:	f04f 3aff 	mov.w	sl, #4294967295
 800791a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800791c:	4620      	mov	r0, r4
 800791e:	f001 fbdb 	bl	80090d8 <_Bfree>
 8007922:	9907      	ldr	r1, [sp, #28]
 8007924:	4620      	mov	r0, r4
 8007926:	f001 fbd7 	bl	80090d8 <_Bfree>
 800792a:	4631      	mov	r1, r6
 800792c:	4620      	mov	r0, r4
 800792e:	f001 fbd3 	bl	80090d8 <_Bfree>
 8007932:	4629      	mov	r1, r5
 8007934:	4620      	mov	r0, r4
 8007936:	f001 fbcf 	bl	80090d8 <_Bfree>
 800793a:	e613      	b.n	8007564 <_strtod_l+0x664>
 800793c:	f1ba 0f00 	cmp.w	sl, #0
 8007940:	d11b      	bne.n	800797a <_strtod_l+0xa7a>
 8007942:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007946:	b9f3      	cbnz	r3, 8007986 <_strtod_l+0xa86>
 8007948:	4b6b      	ldr	r3, [pc, #428]	; (8007af8 <_strtod_l+0xbf8>)
 800794a:	2200      	movs	r2, #0
 800794c:	4640      	mov	r0, r8
 800794e:	4649      	mov	r1, r9
 8007950:	f7f9 f8d4 	bl	8000afc <__aeabi_dcmplt>
 8007954:	b9d0      	cbnz	r0, 800798c <_strtod_l+0xa8c>
 8007956:	4640      	mov	r0, r8
 8007958:	4649      	mov	r1, r9
 800795a:	4b6b      	ldr	r3, [pc, #428]	; (8007b08 <_strtod_l+0xc08>)
 800795c:	2200      	movs	r2, #0
 800795e:	f7f8 fe5b 	bl	8000618 <__aeabi_dmul>
 8007962:	4680      	mov	r8, r0
 8007964:	4689      	mov	r9, r1
 8007966:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800796a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800796e:	931b      	str	r3, [sp, #108]	; 0x6c
 8007970:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8007974:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007978:	e79b      	b.n	80078b2 <_strtod_l+0x9b2>
 800797a:	f1ba 0f01 	cmp.w	sl, #1
 800797e:	d102      	bne.n	8007986 <_strtod_l+0xa86>
 8007980:	2f00      	cmp	r7, #0
 8007982:	f43f ad7e 	beq.w	8007482 <_strtod_l+0x582>
 8007986:	4b61      	ldr	r3, [pc, #388]	; (8007b0c <_strtod_l+0xc0c>)
 8007988:	2200      	movs	r2, #0
 800798a:	e78c      	b.n	80078a6 <_strtod_l+0x9a6>
 800798c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007b08 <_strtod_l+0xc08>
 8007990:	f04f 0800 	mov.w	r8, #0
 8007994:	e7e7      	b.n	8007966 <_strtod_l+0xa66>
 8007996:	4b5c      	ldr	r3, [pc, #368]	; (8007b08 <_strtod_l+0xc08>)
 8007998:	4640      	mov	r0, r8
 800799a:	4649      	mov	r1, r9
 800799c:	2200      	movs	r2, #0
 800799e:	f7f8 fe3b 	bl	8000618 <__aeabi_dmul>
 80079a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079a4:	4680      	mov	r8, r0
 80079a6:	4689      	mov	r9, r1
 80079a8:	b933      	cbnz	r3, 80079b8 <_strtod_l+0xab8>
 80079aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079ae:	9012      	str	r0, [sp, #72]	; 0x48
 80079b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80079b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80079b6:	e7dd      	b.n	8007974 <_strtod_l+0xa74>
 80079b8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80079bc:	e7f9      	b.n	80079b2 <_strtod_l+0xab2>
 80079be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80079c2:	9b04      	ldr	r3, [sp, #16]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d1a8      	bne.n	800791a <_strtod_l+0xa1a>
 80079c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80079cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80079ce:	0d1b      	lsrs	r3, r3, #20
 80079d0:	051b      	lsls	r3, r3, #20
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d1a1      	bne.n	800791a <_strtod_l+0xa1a>
 80079d6:	4640      	mov	r0, r8
 80079d8:	4649      	mov	r1, r9
 80079da:	f7f9 f97d 	bl	8000cd8 <__aeabi_d2lz>
 80079de:	f7f8 fded 	bl	80005bc <__aeabi_l2d>
 80079e2:	4602      	mov	r2, r0
 80079e4:	460b      	mov	r3, r1
 80079e6:	4640      	mov	r0, r8
 80079e8:	4649      	mov	r1, r9
 80079ea:	f7f8 fc5d 	bl	80002a8 <__aeabi_dsub>
 80079ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80079f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079f4:	ea43 030a 	orr.w	r3, r3, sl
 80079f8:	4313      	orrs	r3, r2
 80079fa:	4680      	mov	r8, r0
 80079fc:	4689      	mov	r9, r1
 80079fe:	d053      	beq.n	8007aa8 <_strtod_l+0xba8>
 8007a00:	a335      	add	r3, pc, #212	; (adr r3, 8007ad8 <_strtod_l+0xbd8>)
 8007a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a06:	f7f9 f879 	bl	8000afc <__aeabi_dcmplt>
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	f47f acce 	bne.w	80073ac <_strtod_l+0x4ac>
 8007a10:	a333      	add	r3, pc, #204	; (adr r3, 8007ae0 <_strtod_l+0xbe0>)
 8007a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a16:	4640      	mov	r0, r8
 8007a18:	4649      	mov	r1, r9
 8007a1a:	f7f9 f88d 	bl	8000b38 <__aeabi_dcmpgt>
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	f43f af7b 	beq.w	800791a <_strtod_l+0xa1a>
 8007a24:	e4c2      	b.n	80073ac <_strtod_l+0x4ac>
 8007a26:	9b04      	ldr	r3, [sp, #16]
 8007a28:	b333      	cbz	r3, 8007a78 <_strtod_l+0xb78>
 8007a2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a2c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007a30:	d822      	bhi.n	8007a78 <_strtod_l+0xb78>
 8007a32:	a32d      	add	r3, pc, #180	; (adr r3, 8007ae8 <_strtod_l+0xbe8>)
 8007a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a38:	4640      	mov	r0, r8
 8007a3a:	4649      	mov	r1, r9
 8007a3c:	f7f9 f868 	bl	8000b10 <__aeabi_dcmple>
 8007a40:	b1a0      	cbz	r0, 8007a6c <_strtod_l+0xb6c>
 8007a42:	4649      	mov	r1, r9
 8007a44:	4640      	mov	r0, r8
 8007a46:	f7f9 f8bf 	bl	8000bc8 <__aeabi_d2uiz>
 8007a4a:	2801      	cmp	r0, #1
 8007a4c:	bf38      	it	cc
 8007a4e:	2001      	movcc	r0, #1
 8007a50:	f7f8 fd68 	bl	8000524 <__aeabi_ui2d>
 8007a54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a56:	4680      	mov	r8, r0
 8007a58:	4689      	mov	r9, r1
 8007a5a:	bb13      	cbnz	r3, 8007aa2 <_strtod_l+0xba2>
 8007a5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a60:	9014      	str	r0, [sp, #80]	; 0x50
 8007a62:	9315      	str	r3, [sp, #84]	; 0x54
 8007a64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007a68:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007a6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007a70:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007a74:	1a9b      	subs	r3, r3, r2
 8007a76:	930d      	str	r3, [sp, #52]	; 0x34
 8007a78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a7c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007a80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007a84:	f001 fe54 	bl	8009730 <__ulp>
 8007a88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a8c:	ec53 2b10 	vmov	r2, r3, d0
 8007a90:	f7f8 fdc2 	bl	8000618 <__aeabi_dmul>
 8007a94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007a98:	f7f8 fc08 	bl	80002ac <__adddf3>
 8007a9c:	4682      	mov	sl, r0
 8007a9e:	468b      	mov	fp, r1
 8007aa0:	e78f      	b.n	80079c2 <_strtod_l+0xac2>
 8007aa2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8007aa6:	e7dd      	b.n	8007a64 <_strtod_l+0xb64>
 8007aa8:	a311      	add	r3, pc, #68	; (adr r3, 8007af0 <_strtod_l+0xbf0>)
 8007aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aae:	f7f9 f825 	bl	8000afc <__aeabi_dcmplt>
 8007ab2:	e7b4      	b.n	8007a1e <_strtod_l+0xb1e>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	930e      	str	r3, [sp, #56]	; 0x38
 8007ab8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007aba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007abc:	6013      	str	r3, [r2, #0]
 8007abe:	f7ff ba65 	b.w	8006f8c <_strtod_l+0x8c>
 8007ac2:	2b65      	cmp	r3, #101	; 0x65
 8007ac4:	f43f ab5d 	beq.w	8007182 <_strtod_l+0x282>
 8007ac8:	2b45      	cmp	r3, #69	; 0x45
 8007aca:	f43f ab5a 	beq.w	8007182 <_strtod_l+0x282>
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f7ff bb92 	b.w	80071f8 <_strtod_l+0x2f8>
 8007ad4:	f3af 8000 	nop.w
 8007ad8:	94a03595 	.word	0x94a03595
 8007adc:	3fdfffff 	.word	0x3fdfffff
 8007ae0:	35afe535 	.word	0x35afe535
 8007ae4:	3fe00000 	.word	0x3fe00000
 8007ae8:	ffc00000 	.word	0xffc00000
 8007aec:	41dfffff 	.word	0x41dfffff
 8007af0:	94a03595 	.word	0x94a03595
 8007af4:	3fcfffff 	.word	0x3fcfffff
 8007af8:	3ff00000 	.word	0x3ff00000
 8007afc:	7ff00000 	.word	0x7ff00000
 8007b00:	7fe00000 	.word	0x7fe00000
 8007b04:	7c9fffff 	.word	0x7c9fffff
 8007b08:	3fe00000 	.word	0x3fe00000
 8007b0c:	bff00000 	.word	0xbff00000
 8007b10:	7fefffff 	.word	0x7fefffff

08007b14 <_strtod_r>:
 8007b14:	4b01      	ldr	r3, [pc, #4]	; (8007b1c <_strtod_r+0x8>)
 8007b16:	f7ff b9f3 	b.w	8006f00 <_strtod_l>
 8007b1a:	bf00      	nop
 8007b1c:	20000078 	.word	0x20000078

08007b20 <_strtol_l.isra.0>:
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b26:	d001      	beq.n	8007b2c <_strtol_l.isra.0+0xc>
 8007b28:	2b24      	cmp	r3, #36	; 0x24
 8007b2a:	d906      	bls.n	8007b3a <_strtol_l.isra.0+0x1a>
 8007b2c:	f7fe fafa 	bl	8006124 <__errno>
 8007b30:	2316      	movs	r3, #22
 8007b32:	6003      	str	r3, [r0, #0]
 8007b34:	2000      	movs	r0, #0
 8007b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b3a:	4f3a      	ldr	r7, [pc, #232]	; (8007c24 <_strtol_l.isra.0+0x104>)
 8007b3c:	468e      	mov	lr, r1
 8007b3e:	4676      	mov	r6, lr
 8007b40:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007b44:	5de5      	ldrb	r5, [r4, r7]
 8007b46:	f015 0508 	ands.w	r5, r5, #8
 8007b4a:	d1f8      	bne.n	8007b3e <_strtol_l.isra.0+0x1e>
 8007b4c:	2c2d      	cmp	r4, #45	; 0x2d
 8007b4e:	d134      	bne.n	8007bba <_strtol_l.isra.0+0x9a>
 8007b50:	f89e 4000 	ldrb.w	r4, [lr]
 8007b54:	f04f 0801 	mov.w	r8, #1
 8007b58:	f106 0e02 	add.w	lr, r6, #2
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d05c      	beq.n	8007c1a <_strtol_l.isra.0+0xfa>
 8007b60:	2b10      	cmp	r3, #16
 8007b62:	d10c      	bne.n	8007b7e <_strtol_l.isra.0+0x5e>
 8007b64:	2c30      	cmp	r4, #48	; 0x30
 8007b66:	d10a      	bne.n	8007b7e <_strtol_l.isra.0+0x5e>
 8007b68:	f89e 4000 	ldrb.w	r4, [lr]
 8007b6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007b70:	2c58      	cmp	r4, #88	; 0x58
 8007b72:	d14d      	bne.n	8007c10 <_strtol_l.isra.0+0xf0>
 8007b74:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007b78:	2310      	movs	r3, #16
 8007b7a:	f10e 0e02 	add.w	lr, lr, #2
 8007b7e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007b82:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007b86:	2600      	movs	r6, #0
 8007b88:	fbbc f9f3 	udiv	r9, ip, r3
 8007b8c:	4635      	mov	r5, r6
 8007b8e:	fb03 ca19 	mls	sl, r3, r9, ip
 8007b92:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007b96:	2f09      	cmp	r7, #9
 8007b98:	d818      	bhi.n	8007bcc <_strtol_l.isra.0+0xac>
 8007b9a:	463c      	mov	r4, r7
 8007b9c:	42a3      	cmp	r3, r4
 8007b9e:	dd24      	ble.n	8007bea <_strtol_l.isra.0+0xca>
 8007ba0:	2e00      	cmp	r6, #0
 8007ba2:	db1f      	blt.n	8007be4 <_strtol_l.isra.0+0xc4>
 8007ba4:	45a9      	cmp	r9, r5
 8007ba6:	d31d      	bcc.n	8007be4 <_strtol_l.isra.0+0xc4>
 8007ba8:	d101      	bne.n	8007bae <_strtol_l.isra.0+0x8e>
 8007baa:	45a2      	cmp	sl, r4
 8007bac:	db1a      	blt.n	8007be4 <_strtol_l.isra.0+0xc4>
 8007bae:	fb05 4503 	mla	r5, r5, r3, r4
 8007bb2:	2601      	movs	r6, #1
 8007bb4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007bb8:	e7eb      	b.n	8007b92 <_strtol_l.isra.0+0x72>
 8007bba:	2c2b      	cmp	r4, #43	; 0x2b
 8007bbc:	bf08      	it	eq
 8007bbe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007bc2:	46a8      	mov	r8, r5
 8007bc4:	bf08      	it	eq
 8007bc6:	f106 0e02 	addeq.w	lr, r6, #2
 8007bca:	e7c7      	b.n	8007b5c <_strtol_l.isra.0+0x3c>
 8007bcc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007bd0:	2f19      	cmp	r7, #25
 8007bd2:	d801      	bhi.n	8007bd8 <_strtol_l.isra.0+0xb8>
 8007bd4:	3c37      	subs	r4, #55	; 0x37
 8007bd6:	e7e1      	b.n	8007b9c <_strtol_l.isra.0+0x7c>
 8007bd8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007bdc:	2f19      	cmp	r7, #25
 8007bde:	d804      	bhi.n	8007bea <_strtol_l.isra.0+0xca>
 8007be0:	3c57      	subs	r4, #87	; 0x57
 8007be2:	e7db      	b.n	8007b9c <_strtol_l.isra.0+0x7c>
 8007be4:	f04f 36ff 	mov.w	r6, #4294967295
 8007be8:	e7e4      	b.n	8007bb4 <_strtol_l.isra.0+0x94>
 8007bea:	2e00      	cmp	r6, #0
 8007bec:	da05      	bge.n	8007bfa <_strtol_l.isra.0+0xda>
 8007bee:	2322      	movs	r3, #34	; 0x22
 8007bf0:	6003      	str	r3, [r0, #0]
 8007bf2:	4665      	mov	r5, ip
 8007bf4:	b942      	cbnz	r2, 8007c08 <_strtol_l.isra.0+0xe8>
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	e79d      	b.n	8007b36 <_strtol_l.isra.0+0x16>
 8007bfa:	f1b8 0f00 	cmp.w	r8, #0
 8007bfe:	d000      	beq.n	8007c02 <_strtol_l.isra.0+0xe2>
 8007c00:	426d      	negs	r5, r5
 8007c02:	2a00      	cmp	r2, #0
 8007c04:	d0f7      	beq.n	8007bf6 <_strtol_l.isra.0+0xd6>
 8007c06:	b10e      	cbz	r6, 8007c0c <_strtol_l.isra.0+0xec>
 8007c08:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007c0c:	6011      	str	r1, [r2, #0]
 8007c0e:	e7f2      	b.n	8007bf6 <_strtol_l.isra.0+0xd6>
 8007c10:	2430      	movs	r4, #48	; 0x30
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1b3      	bne.n	8007b7e <_strtol_l.isra.0+0x5e>
 8007c16:	2308      	movs	r3, #8
 8007c18:	e7b1      	b.n	8007b7e <_strtol_l.isra.0+0x5e>
 8007c1a:	2c30      	cmp	r4, #48	; 0x30
 8007c1c:	d0a4      	beq.n	8007b68 <_strtol_l.isra.0+0x48>
 8007c1e:	230a      	movs	r3, #10
 8007c20:	e7ad      	b.n	8007b7e <_strtol_l.isra.0+0x5e>
 8007c22:	bf00      	nop
 8007c24:	0800ad09 	.word	0x0800ad09

08007c28 <_strtol_r>:
 8007c28:	f7ff bf7a 	b.w	8007b20 <_strtol_l.isra.0>

08007c2c <quorem>:
 8007c2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c30:	6903      	ldr	r3, [r0, #16]
 8007c32:	690c      	ldr	r4, [r1, #16]
 8007c34:	42a3      	cmp	r3, r4
 8007c36:	4607      	mov	r7, r0
 8007c38:	f2c0 8081 	blt.w	8007d3e <quorem+0x112>
 8007c3c:	3c01      	subs	r4, #1
 8007c3e:	f101 0814 	add.w	r8, r1, #20
 8007c42:	f100 0514 	add.w	r5, r0, #20
 8007c46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c4a:	9301      	str	r3, [sp, #4]
 8007c4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c54:	3301      	adds	r3, #1
 8007c56:	429a      	cmp	r2, r3
 8007c58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c60:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c64:	d331      	bcc.n	8007cca <quorem+0x9e>
 8007c66:	f04f 0e00 	mov.w	lr, #0
 8007c6a:	4640      	mov	r0, r8
 8007c6c:	46ac      	mov	ip, r5
 8007c6e:	46f2      	mov	sl, lr
 8007c70:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c74:	b293      	uxth	r3, r2
 8007c76:	fb06 e303 	mla	r3, r6, r3, lr
 8007c7a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	ebaa 0303 	sub.w	r3, sl, r3
 8007c84:	0c12      	lsrs	r2, r2, #16
 8007c86:	f8dc a000 	ldr.w	sl, [ip]
 8007c8a:	fb06 e202 	mla	r2, r6, r2, lr
 8007c8e:	fa13 f38a 	uxtah	r3, r3, sl
 8007c92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c96:	fa1f fa82 	uxth.w	sl, r2
 8007c9a:	f8dc 2000 	ldr.w	r2, [ip]
 8007c9e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007ca2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cac:	4581      	cmp	r9, r0
 8007cae:	f84c 3b04 	str.w	r3, [ip], #4
 8007cb2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007cb6:	d2db      	bcs.n	8007c70 <quorem+0x44>
 8007cb8:	f855 300b 	ldr.w	r3, [r5, fp]
 8007cbc:	b92b      	cbnz	r3, 8007cca <quorem+0x9e>
 8007cbe:	9b01      	ldr	r3, [sp, #4]
 8007cc0:	3b04      	subs	r3, #4
 8007cc2:	429d      	cmp	r5, r3
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	d32e      	bcc.n	8007d26 <quorem+0xfa>
 8007cc8:	613c      	str	r4, [r7, #16]
 8007cca:	4638      	mov	r0, r7
 8007ccc:	f001 fc8c 	bl	80095e8 <__mcmp>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	db24      	blt.n	8007d1e <quorem+0xf2>
 8007cd4:	3601      	adds	r6, #1
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	f04f 0c00 	mov.w	ip, #0
 8007cdc:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ce0:	f8d0 e000 	ldr.w	lr, [r0]
 8007ce4:	b293      	uxth	r3, r2
 8007ce6:	ebac 0303 	sub.w	r3, ip, r3
 8007cea:	0c12      	lsrs	r2, r2, #16
 8007cec:	fa13 f38e 	uxtah	r3, r3, lr
 8007cf0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007cf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007cfe:	45c1      	cmp	r9, r8
 8007d00:	f840 3b04 	str.w	r3, [r0], #4
 8007d04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007d08:	d2e8      	bcs.n	8007cdc <quorem+0xb0>
 8007d0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d12:	b922      	cbnz	r2, 8007d1e <quorem+0xf2>
 8007d14:	3b04      	subs	r3, #4
 8007d16:	429d      	cmp	r5, r3
 8007d18:	461a      	mov	r2, r3
 8007d1a:	d30a      	bcc.n	8007d32 <quorem+0x106>
 8007d1c:	613c      	str	r4, [r7, #16]
 8007d1e:	4630      	mov	r0, r6
 8007d20:	b003      	add	sp, #12
 8007d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d26:	6812      	ldr	r2, [r2, #0]
 8007d28:	3b04      	subs	r3, #4
 8007d2a:	2a00      	cmp	r2, #0
 8007d2c:	d1cc      	bne.n	8007cc8 <quorem+0x9c>
 8007d2e:	3c01      	subs	r4, #1
 8007d30:	e7c7      	b.n	8007cc2 <quorem+0x96>
 8007d32:	6812      	ldr	r2, [r2, #0]
 8007d34:	3b04      	subs	r3, #4
 8007d36:	2a00      	cmp	r2, #0
 8007d38:	d1f0      	bne.n	8007d1c <quorem+0xf0>
 8007d3a:	3c01      	subs	r4, #1
 8007d3c:	e7eb      	b.n	8007d16 <quorem+0xea>
 8007d3e:	2000      	movs	r0, #0
 8007d40:	e7ee      	b.n	8007d20 <quorem+0xf4>
 8007d42:	0000      	movs	r0, r0
 8007d44:	0000      	movs	r0, r0
	...

08007d48 <_dtoa_r>:
 8007d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d4c:	ed2d 8b02 	vpush	{d8}
 8007d50:	ec57 6b10 	vmov	r6, r7, d0
 8007d54:	b095      	sub	sp, #84	; 0x54
 8007d56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007d5c:	9105      	str	r1, [sp, #20]
 8007d5e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007d62:	4604      	mov	r4, r0
 8007d64:	9209      	str	r2, [sp, #36]	; 0x24
 8007d66:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d68:	b975      	cbnz	r5, 8007d88 <_dtoa_r+0x40>
 8007d6a:	2010      	movs	r0, #16
 8007d6c:	f001 f94c 	bl	8009008 <malloc>
 8007d70:	4602      	mov	r2, r0
 8007d72:	6260      	str	r0, [r4, #36]	; 0x24
 8007d74:	b920      	cbnz	r0, 8007d80 <_dtoa_r+0x38>
 8007d76:	4bb2      	ldr	r3, [pc, #712]	; (8008040 <_dtoa_r+0x2f8>)
 8007d78:	21ea      	movs	r1, #234	; 0xea
 8007d7a:	48b2      	ldr	r0, [pc, #712]	; (8008044 <_dtoa_r+0x2fc>)
 8007d7c:	f002 f874 	bl	8009e68 <__assert_func>
 8007d80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d84:	6005      	str	r5, [r0, #0]
 8007d86:	60c5      	str	r5, [r0, #12]
 8007d88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d8a:	6819      	ldr	r1, [r3, #0]
 8007d8c:	b151      	cbz	r1, 8007da4 <_dtoa_r+0x5c>
 8007d8e:	685a      	ldr	r2, [r3, #4]
 8007d90:	604a      	str	r2, [r1, #4]
 8007d92:	2301      	movs	r3, #1
 8007d94:	4093      	lsls	r3, r2
 8007d96:	608b      	str	r3, [r1, #8]
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f001 f99d 	bl	80090d8 <_Bfree>
 8007d9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007da0:	2200      	movs	r2, #0
 8007da2:	601a      	str	r2, [r3, #0]
 8007da4:	1e3b      	subs	r3, r7, #0
 8007da6:	bfb9      	ittee	lt
 8007da8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007dac:	9303      	strlt	r3, [sp, #12]
 8007dae:	2300      	movge	r3, #0
 8007db0:	f8c8 3000 	strge.w	r3, [r8]
 8007db4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007db8:	4ba3      	ldr	r3, [pc, #652]	; (8008048 <_dtoa_r+0x300>)
 8007dba:	bfbc      	itt	lt
 8007dbc:	2201      	movlt	r2, #1
 8007dbe:	f8c8 2000 	strlt.w	r2, [r8]
 8007dc2:	ea33 0309 	bics.w	r3, r3, r9
 8007dc6:	d11b      	bne.n	8007e00 <_dtoa_r+0xb8>
 8007dc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007dca:	f242 730f 	movw	r3, #9999	; 0x270f
 8007dce:	6013      	str	r3, [r2, #0]
 8007dd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007dd4:	4333      	orrs	r3, r6
 8007dd6:	f000 857a 	beq.w	80088ce <_dtoa_r+0xb86>
 8007dda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ddc:	b963      	cbnz	r3, 8007df8 <_dtoa_r+0xb0>
 8007dde:	4b9b      	ldr	r3, [pc, #620]	; (800804c <_dtoa_r+0x304>)
 8007de0:	e024      	b.n	8007e2c <_dtoa_r+0xe4>
 8007de2:	4b9b      	ldr	r3, [pc, #620]	; (8008050 <_dtoa_r+0x308>)
 8007de4:	9300      	str	r3, [sp, #0]
 8007de6:	3308      	adds	r3, #8
 8007de8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007dea:	6013      	str	r3, [r2, #0]
 8007dec:	9800      	ldr	r0, [sp, #0]
 8007dee:	b015      	add	sp, #84	; 0x54
 8007df0:	ecbd 8b02 	vpop	{d8}
 8007df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df8:	4b94      	ldr	r3, [pc, #592]	; (800804c <_dtoa_r+0x304>)
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	3303      	adds	r3, #3
 8007dfe:	e7f3      	b.n	8007de8 <_dtoa_r+0xa0>
 8007e00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e04:	2200      	movs	r2, #0
 8007e06:	ec51 0b17 	vmov	r0, r1, d7
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007e10:	f7f8 fe6a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007e14:	4680      	mov	r8, r0
 8007e16:	b158      	cbz	r0, 8007e30 <_dtoa_r+0xe8>
 8007e18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	6013      	str	r3, [r2, #0]
 8007e1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 8551 	beq.w	80088c8 <_dtoa_r+0xb80>
 8007e26:	488b      	ldr	r0, [pc, #556]	; (8008054 <_dtoa_r+0x30c>)
 8007e28:	6018      	str	r0, [r3, #0]
 8007e2a:	1e43      	subs	r3, r0, #1
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	e7dd      	b.n	8007dec <_dtoa_r+0xa4>
 8007e30:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007e34:	aa12      	add	r2, sp, #72	; 0x48
 8007e36:	a913      	add	r1, sp, #76	; 0x4c
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f001 fcf5 	bl	8009828 <__d2b>
 8007e3e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007e42:	4683      	mov	fp, r0
 8007e44:	2d00      	cmp	r5, #0
 8007e46:	d07c      	beq.n	8007f42 <_dtoa_r+0x1fa>
 8007e48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e4a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007e4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e52:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007e56:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007e5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007e5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007e62:	4b7d      	ldr	r3, [pc, #500]	; (8008058 <_dtoa_r+0x310>)
 8007e64:	2200      	movs	r2, #0
 8007e66:	4630      	mov	r0, r6
 8007e68:	4639      	mov	r1, r7
 8007e6a:	f7f8 fa1d 	bl	80002a8 <__aeabi_dsub>
 8007e6e:	a36e      	add	r3, pc, #440	; (adr r3, 8008028 <_dtoa_r+0x2e0>)
 8007e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e74:	f7f8 fbd0 	bl	8000618 <__aeabi_dmul>
 8007e78:	a36d      	add	r3, pc, #436	; (adr r3, 8008030 <_dtoa_r+0x2e8>)
 8007e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7e:	f7f8 fa15 	bl	80002ac <__adddf3>
 8007e82:	4606      	mov	r6, r0
 8007e84:	4628      	mov	r0, r5
 8007e86:	460f      	mov	r7, r1
 8007e88:	f7f8 fb5c 	bl	8000544 <__aeabi_i2d>
 8007e8c:	a36a      	add	r3, pc, #424	; (adr r3, 8008038 <_dtoa_r+0x2f0>)
 8007e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e92:	f7f8 fbc1 	bl	8000618 <__aeabi_dmul>
 8007e96:	4602      	mov	r2, r0
 8007e98:	460b      	mov	r3, r1
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	4639      	mov	r1, r7
 8007e9e:	f7f8 fa05 	bl	80002ac <__adddf3>
 8007ea2:	4606      	mov	r6, r0
 8007ea4:	460f      	mov	r7, r1
 8007ea6:	f7f8 fe67 	bl	8000b78 <__aeabi_d2iz>
 8007eaa:	2200      	movs	r2, #0
 8007eac:	4682      	mov	sl, r0
 8007eae:	2300      	movs	r3, #0
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	4639      	mov	r1, r7
 8007eb4:	f7f8 fe22 	bl	8000afc <__aeabi_dcmplt>
 8007eb8:	b148      	cbz	r0, 8007ece <_dtoa_r+0x186>
 8007eba:	4650      	mov	r0, sl
 8007ebc:	f7f8 fb42 	bl	8000544 <__aeabi_i2d>
 8007ec0:	4632      	mov	r2, r6
 8007ec2:	463b      	mov	r3, r7
 8007ec4:	f7f8 fe10 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ec8:	b908      	cbnz	r0, 8007ece <_dtoa_r+0x186>
 8007eca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ece:	f1ba 0f16 	cmp.w	sl, #22
 8007ed2:	d854      	bhi.n	8007f7e <_dtoa_r+0x236>
 8007ed4:	4b61      	ldr	r3, [pc, #388]	; (800805c <_dtoa_r+0x314>)
 8007ed6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ede:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ee2:	f7f8 fe0b 	bl	8000afc <__aeabi_dcmplt>
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	d04b      	beq.n	8007f82 <_dtoa_r+0x23a>
 8007eea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007eee:	2300      	movs	r3, #0
 8007ef0:	930e      	str	r3, [sp, #56]	; 0x38
 8007ef2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ef4:	1b5d      	subs	r5, r3, r5
 8007ef6:	1e6b      	subs	r3, r5, #1
 8007ef8:	9304      	str	r3, [sp, #16]
 8007efa:	bf43      	ittte	mi
 8007efc:	2300      	movmi	r3, #0
 8007efe:	f1c5 0801 	rsbmi	r8, r5, #1
 8007f02:	9304      	strmi	r3, [sp, #16]
 8007f04:	f04f 0800 	movpl.w	r8, #0
 8007f08:	f1ba 0f00 	cmp.w	sl, #0
 8007f0c:	db3b      	blt.n	8007f86 <_dtoa_r+0x23e>
 8007f0e:	9b04      	ldr	r3, [sp, #16]
 8007f10:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007f14:	4453      	add	r3, sl
 8007f16:	9304      	str	r3, [sp, #16]
 8007f18:	2300      	movs	r3, #0
 8007f1a:	9306      	str	r3, [sp, #24]
 8007f1c:	9b05      	ldr	r3, [sp, #20]
 8007f1e:	2b09      	cmp	r3, #9
 8007f20:	d869      	bhi.n	8007ff6 <_dtoa_r+0x2ae>
 8007f22:	2b05      	cmp	r3, #5
 8007f24:	bfc4      	itt	gt
 8007f26:	3b04      	subgt	r3, #4
 8007f28:	9305      	strgt	r3, [sp, #20]
 8007f2a:	9b05      	ldr	r3, [sp, #20]
 8007f2c:	f1a3 0302 	sub.w	r3, r3, #2
 8007f30:	bfcc      	ite	gt
 8007f32:	2500      	movgt	r5, #0
 8007f34:	2501      	movle	r5, #1
 8007f36:	2b03      	cmp	r3, #3
 8007f38:	d869      	bhi.n	800800e <_dtoa_r+0x2c6>
 8007f3a:	e8df f003 	tbb	[pc, r3]
 8007f3e:	4e2c      	.short	0x4e2c
 8007f40:	5a4c      	.short	0x5a4c
 8007f42:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007f46:	441d      	add	r5, r3
 8007f48:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007f4c:	2b20      	cmp	r3, #32
 8007f4e:	bfc1      	itttt	gt
 8007f50:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f54:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007f58:	fa09 f303 	lslgt.w	r3, r9, r3
 8007f5c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007f60:	bfda      	itte	le
 8007f62:	f1c3 0320 	rsble	r3, r3, #32
 8007f66:	fa06 f003 	lslle.w	r0, r6, r3
 8007f6a:	4318      	orrgt	r0, r3
 8007f6c:	f7f8 fada 	bl	8000524 <__aeabi_ui2d>
 8007f70:	2301      	movs	r3, #1
 8007f72:	4606      	mov	r6, r0
 8007f74:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007f78:	3d01      	subs	r5, #1
 8007f7a:	9310      	str	r3, [sp, #64]	; 0x40
 8007f7c:	e771      	b.n	8007e62 <_dtoa_r+0x11a>
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e7b6      	b.n	8007ef0 <_dtoa_r+0x1a8>
 8007f82:	900e      	str	r0, [sp, #56]	; 0x38
 8007f84:	e7b5      	b.n	8007ef2 <_dtoa_r+0x1aa>
 8007f86:	f1ca 0300 	rsb	r3, sl, #0
 8007f8a:	9306      	str	r3, [sp, #24]
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	eba8 080a 	sub.w	r8, r8, sl
 8007f92:	930d      	str	r3, [sp, #52]	; 0x34
 8007f94:	e7c2      	b.n	8007f1c <_dtoa_r+0x1d4>
 8007f96:	2300      	movs	r3, #0
 8007f98:	9308      	str	r3, [sp, #32]
 8007f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	dc39      	bgt.n	8008014 <_dtoa_r+0x2cc>
 8007fa0:	f04f 0901 	mov.w	r9, #1
 8007fa4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007fa8:	464b      	mov	r3, r9
 8007faa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007fae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	6042      	str	r2, [r0, #4]
 8007fb4:	2204      	movs	r2, #4
 8007fb6:	f102 0614 	add.w	r6, r2, #20
 8007fba:	429e      	cmp	r6, r3
 8007fbc:	6841      	ldr	r1, [r0, #4]
 8007fbe:	d92f      	bls.n	8008020 <_dtoa_r+0x2d8>
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	f001 f849 	bl	8009058 <_Balloc>
 8007fc6:	9000      	str	r0, [sp, #0]
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	d14b      	bne.n	8008064 <_dtoa_r+0x31c>
 8007fcc:	4b24      	ldr	r3, [pc, #144]	; (8008060 <_dtoa_r+0x318>)
 8007fce:	4602      	mov	r2, r0
 8007fd0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007fd4:	e6d1      	b.n	8007d7a <_dtoa_r+0x32>
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e7de      	b.n	8007f98 <_dtoa_r+0x250>
 8007fda:	2300      	movs	r3, #0
 8007fdc:	9308      	str	r3, [sp, #32]
 8007fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe0:	eb0a 0903 	add.w	r9, sl, r3
 8007fe4:	f109 0301 	add.w	r3, r9, #1
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	9301      	str	r3, [sp, #4]
 8007fec:	bfb8      	it	lt
 8007fee:	2301      	movlt	r3, #1
 8007ff0:	e7dd      	b.n	8007fae <_dtoa_r+0x266>
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e7f2      	b.n	8007fdc <_dtoa_r+0x294>
 8007ff6:	2501      	movs	r5, #1
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	9305      	str	r3, [sp, #20]
 8007ffc:	9508      	str	r5, [sp, #32]
 8007ffe:	f04f 39ff 	mov.w	r9, #4294967295
 8008002:	2200      	movs	r2, #0
 8008004:	f8cd 9004 	str.w	r9, [sp, #4]
 8008008:	2312      	movs	r3, #18
 800800a:	9209      	str	r2, [sp, #36]	; 0x24
 800800c:	e7cf      	b.n	8007fae <_dtoa_r+0x266>
 800800e:	2301      	movs	r3, #1
 8008010:	9308      	str	r3, [sp, #32]
 8008012:	e7f4      	b.n	8007ffe <_dtoa_r+0x2b6>
 8008014:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008018:	f8cd 9004 	str.w	r9, [sp, #4]
 800801c:	464b      	mov	r3, r9
 800801e:	e7c6      	b.n	8007fae <_dtoa_r+0x266>
 8008020:	3101      	adds	r1, #1
 8008022:	6041      	str	r1, [r0, #4]
 8008024:	0052      	lsls	r2, r2, #1
 8008026:	e7c6      	b.n	8007fb6 <_dtoa_r+0x26e>
 8008028:	636f4361 	.word	0x636f4361
 800802c:	3fd287a7 	.word	0x3fd287a7
 8008030:	8b60c8b3 	.word	0x8b60c8b3
 8008034:	3fc68a28 	.word	0x3fc68a28
 8008038:	509f79fb 	.word	0x509f79fb
 800803c:	3fd34413 	.word	0x3fd34413
 8008040:	0800ae16 	.word	0x0800ae16
 8008044:	0800ae2d 	.word	0x0800ae2d
 8008048:	7ff00000 	.word	0x7ff00000
 800804c:	0800ae12 	.word	0x0800ae12
 8008050:	0800ae09 	.word	0x0800ae09
 8008054:	0800ac8d 	.word	0x0800ac8d
 8008058:	3ff80000 	.word	0x3ff80000
 800805c:	0800afa8 	.word	0x0800afa8
 8008060:	0800ae8c 	.word	0x0800ae8c
 8008064:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008066:	9a00      	ldr	r2, [sp, #0]
 8008068:	601a      	str	r2, [r3, #0]
 800806a:	9b01      	ldr	r3, [sp, #4]
 800806c:	2b0e      	cmp	r3, #14
 800806e:	f200 80ad 	bhi.w	80081cc <_dtoa_r+0x484>
 8008072:	2d00      	cmp	r5, #0
 8008074:	f000 80aa 	beq.w	80081cc <_dtoa_r+0x484>
 8008078:	f1ba 0f00 	cmp.w	sl, #0
 800807c:	dd36      	ble.n	80080ec <_dtoa_r+0x3a4>
 800807e:	4ac3      	ldr	r2, [pc, #780]	; (800838c <_dtoa_r+0x644>)
 8008080:	f00a 030f 	and.w	r3, sl, #15
 8008084:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008088:	ed93 7b00 	vldr	d7, [r3]
 800808c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008090:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008094:	eeb0 8a47 	vmov.f32	s16, s14
 8008098:	eef0 8a67 	vmov.f32	s17, s15
 800809c:	d016      	beq.n	80080cc <_dtoa_r+0x384>
 800809e:	4bbc      	ldr	r3, [pc, #752]	; (8008390 <_dtoa_r+0x648>)
 80080a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80080a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080a8:	f7f8 fbe0 	bl	800086c <__aeabi_ddiv>
 80080ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080b0:	f007 070f 	and.w	r7, r7, #15
 80080b4:	2503      	movs	r5, #3
 80080b6:	4eb6      	ldr	r6, [pc, #728]	; (8008390 <_dtoa_r+0x648>)
 80080b8:	b957      	cbnz	r7, 80080d0 <_dtoa_r+0x388>
 80080ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080be:	ec53 2b18 	vmov	r2, r3, d8
 80080c2:	f7f8 fbd3 	bl	800086c <__aeabi_ddiv>
 80080c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080ca:	e029      	b.n	8008120 <_dtoa_r+0x3d8>
 80080cc:	2502      	movs	r5, #2
 80080ce:	e7f2      	b.n	80080b6 <_dtoa_r+0x36e>
 80080d0:	07f9      	lsls	r1, r7, #31
 80080d2:	d508      	bpl.n	80080e6 <_dtoa_r+0x39e>
 80080d4:	ec51 0b18 	vmov	r0, r1, d8
 80080d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80080dc:	f7f8 fa9c 	bl	8000618 <__aeabi_dmul>
 80080e0:	ec41 0b18 	vmov	d8, r0, r1
 80080e4:	3501      	adds	r5, #1
 80080e6:	107f      	asrs	r7, r7, #1
 80080e8:	3608      	adds	r6, #8
 80080ea:	e7e5      	b.n	80080b8 <_dtoa_r+0x370>
 80080ec:	f000 80a6 	beq.w	800823c <_dtoa_r+0x4f4>
 80080f0:	f1ca 0600 	rsb	r6, sl, #0
 80080f4:	4ba5      	ldr	r3, [pc, #660]	; (800838c <_dtoa_r+0x644>)
 80080f6:	4fa6      	ldr	r7, [pc, #664]	; (8008390 <_dtoa_r+0x648>)
 80080f8:	f006 020f 	and.w	r2, r6, #15
 80080fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008104:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008108:	f7f8 fa86 	bl	8000618 <__aeabi_dmul>
 800810c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008110:	1136      	asrs	r6, r6, #4
 8008112:	2300      	movs	r3, #0
 8008114:	2502      	movs	r5, #2
 8008116:	2e00      	cmp	r6, #0
 8008118:	f040 8085 	bne.w	8008226 <_dtoa_r+0x4de>
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1d2      	bne.n	80080c6 <_dtoa_r+0x37e>
 8008120:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008122:	2b00      	cmp	r3, #0
 8008124:	f000 808c 	beq.w	8008240 <_dtoa_r+0x4f8>
 8008128:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800812c:	4b99      	ldr	r3, [pc, #612]	; (8008394 <_dtoa_r+0x64c>)
 800812e:	2200      	movs	r2, #0
 8008130:	4630      	mov	r0, r6
 8008132:	4639      	mov	r1, r7
 8008134:	f7f8 fce2 	bl	8000afc <__aeabi_dcmplt>
 8008138:	2800      	cmp	r0, #0
 800813a:	f000 8081 	beq.w	8008240 <_dtoa_r+0x4f8>
 800813e:	9b01      	ldr	r3, [sp, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d07d      	beq.n	8008240 <_dtoa_r+0x4f8>
 8008144:	f1b9 0f00 	cmp.w	r9, #0
 8008148:	dd3c      	ble.n	80081c4 <_dtoa_r+0x47c>
 800814a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800814e:	9307      	str	r3, [sp, #28]
 8008150:	2200      	movs	r2, #0
 8008152:	4b91      	ldr	r3, [pc, #580]	; (8008398 <_dtoa_r+0x650>)
 8008154:	4630      	mov	r0, r6
 8008156:	4639      	mov	r1, r7
 8008158:	f7f8 fa5e 	bl	8000618 <__aeabi_dmul>
 800815c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008160:	3501      	adds	r5, #1
 8008162:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008166:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800816a:	4628      	mov	r0, r5
 800816c:	f7f8 f9ea 	bl	8000544 <__aeabi_i2d>
 8008170:	4632      	mov	r2, r6
 8008172:	463b      	mov	r3, r7
 8008174:	f7f8 fa50 	bl	8000618 <__aeabi_dmul>
 8008178:	4b88      	ldr	r3, [pc, #544]	; (800839c <_dtoa_r+0x654>)
 800817a:	2200      	movs	r2, #0
 800817c:	f7f8 f896 	bl	80002ac <__adddf3>
 8008180:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008188:	9303      	str	r3, [sp, #12]
 800818a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800818c:	2b00      	cmp	r3, #0
 800818e:	d15c      	bne.n	800824a <_dtoa_r+0x502>
 8008190:	4b83      	ldr	r3, [pc, #524]	; (80083a0 <_dtoa_r+0x658>)
 8008192:	2200      	movs	r2, #0
 8008194:	4630      	mov	r0, r6
 8008196:	4639      	mov	r1, r7
 8008198:	f7f8 f886 	bl	80002a8 <__aeabi_dsub>
 800819c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081a0:	4606      	mov	r6, r0
 80081a2:	460f      	mov	r7, r1
 80081a4:	f7f8 fcc8 	bl	8000b38 <__aeabi_dcmpgt>
 80081a8:	2800      	cmp	r0, #0
 80081aa:	f040 8296 	bne.w	80086da <_dtoa_r+0x992>
 80081ae:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80081b2:	4630      	mov	r0, r6
 80081b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80081b8:	4639      	mov	r1, r7
 80081ba:	f7f8 fc9f 	bl	8000afc <__aeabi_dcmplt>
 80081be:	2800      	cmp	r0, #0
 80081c0:	f040 8288 	bne.w	80086d4 <_dtoa_r+0x98c>
 80081c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80081c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f2c0 8158 	blt.w	8008484 <_dtoa_r+0x73c>
 80081d4:	f1ba 0f0e 	cmp.w	sl, #14
 80081d8:	f300 8154 	bgt.w	8008484 <_dtoa_r+0x73c>
 80081dc:	4b6b      	ldr	r3, [pc, #428]	; (800838c <_dtoa_r+0x644>)
 80081de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80081e2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80081e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f280 80e3 	bge.w	80083b4 <_dtoa_r+0x66c>
 80081ee:	9b01      	ldr	r3, [sp, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f300 80df 	bgt.w	80083b4 <_dtoa_r+0x66c>
 80081f6:	f040 826d 	bne.w	80086d4 <_dtoa_r+0x98c>
 80081fa:	4b69      	ldr	r3, [pc, #420]	; (80083a0 <_dtoa_r+0x658>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	4640      	mov	r0, r8
 8008200:	4649      	mov	r1, r9
 8008202:	f7f8 fa09 	bl	8000618 <__aeabi_dmul>
 8008206:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800820a:	f7f8 fc8b 	bl	8000b24 <__aeabi_dcmpge>
 800820e:	9e01      	ldr	r6, [sp, #4]
 8008210:	4637      	mov	r7, r6
 8008212:	2800      	cmp	r0, #0
 8008214:	f040 8243 	bne.w	800869e <_dtoa_r+0x956>
 8008218:	9d00      	ldr	r5, [sp, #0]
 800821a:	2331      	movs	r3, #49	; 0x31
 800821c:	f805 3b01 	strb.w	r3, [r5], #1
 8008220:	f10a 0a01 	add.w	sl, sl, #1
 8008224:	e23f      	b.n	80086a6 <_dtoa_r+0x95e>
 8008226:	07f2      	lsls	r2, r6, #31
 8008228:	d505      	bpl.n	8008236 <_dtoa_r+0x4ee>
 800822a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800822e:	f7f8 f9f3 	bl	8000618 <__aeabi_dmul>
 8008232:	3501      	adds	r5, #1
 8008234:	2301      	movs	r3, #1
 8008236:	1076      	asrs	r6, r6, #1
 8008238:	3708      	adds	r7, #8
 800823a:	e76c      	b.n	8008116 <_dtoa_r+0x3ce>
 800823c:	2502      	movs	r5, #2
 800823e:	e76f      	b.n	8008120 <_dtoa_r+0x3d8>
 8008240:	9b01      	ldr	r3, [sp, #4]
 8008242:	f8cd a01c 	str.w	sl, [sp, #28]
 8008246:	930c      	str	r3, [sp, #48]	; 0x30
 8008248:	e78d      	b.n	8008166 <_dtoa_r+0x41e>
 800824a:	9900      	ldr	r1, [sp, #0]
 800824c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800824e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008250:	4b4e      	ldr	r3, [pc, #312]	; (800838c <_dtoa_r+0x644>)
 8008252:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008256:	4401      	add	r1, r0
 8008258:	9102      	str	r1, [sp, #8]
 800825a:	9908      	ldr	r1, [sp, #32]
 800825c:	eeb0 8a47 	vmov.f32	s16, s14
 8008260:	eef0 8a67 	vmov.f32	s17, s15
 8008264:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008268:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800826c:	2900      	cmp	r1, #0
 800826e:	d045      	beq.n	80082fc <_dtoa_r+0x5b4>
 8008270:	494c      	ldr	r1, [pc, #304]	; (80083a4 <_dtoa_r+0x65c>)
 8008272:	2000      	movs	r0, #0
 8008274:	f7f8 fafa 	bl	800086c <__aeabi_ddiv>
 8008278:	ec53 2b18 	vmov	r2, r3, d8
 800827c:	f7f8 f814 	bl	80002a8 <__aeabi_dsub>
 8008280:	9d00      	ldr	r5, [sp, #0]
 8008282:	ec41 0b18 	vmov	d8, r0, r1
 8008286:	4639      	mov	r1, r7
 8008288:	4630      	mov	r0, r6
 800828a:	f7f8 fc75 	bl	8000b78 <__aeabi_d2iz>
 800828e:	900c      	str	r0, [sp, #48]	; 0x30
 8008290:	f7f8 f958 	bl	8000544 <__aeabi_i2d>
 8008294:	4602      	mov	r2, r0
 8008296:	460b      	mov	r3, r1
 8008298:	4630      	mov	r0, r6
 800829a:	4639      	mov	r1, r7
 800829c:	f7f8 f804 	bl	80002a8 <__aeabi_dsub>
 80082a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082a2:	3330      	adds	r3, #48	; 0x30
 80082a4:	f805 3b01 	strb.w	r3, [r5], #1
 80082a8:	ec53 2b18 	vmov	r2, r3, d8
 80082ac:	4606      	mov	r6, r0
 80082ae:	460f      	mov	r7, r1
 80082b0:	f7f8 fc24 	bl	8000afc <__aeabi_dcmplt>
 80082b4:	2800      	cmp	r0, #0
 80082b6:	d165      	bne.n	8008384 <_dtoa_r+0x63c>
 80082b8:	4632      	mov	r2, r6
 80082ba:	463b      	mov	r3, r7
 80082bc:	4935      	ldr	r1, [pc, #212]	; (8008394 <_dtoa_r+0x64c>)
 80082be:	2000      	movs	r0, #0
 80082c0:	f7f7 fff2 	bl	80002a8 <__aeabi_dsub>
 80082c4:	ec53 2b18 	vmov	r2, r3, d8
 80082c8:	f7f8 fc18 	bl	8000afc <__aeabi_dcmplt>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	f040 80b9 	bne.w	8008444 <_dtoa_r+0x6fc>
 80082d2:	9b02      	ldr	r3, [sp, #8]
 80082d4:	429d      	cmp	r5, r3
 80082d6:	f43f af75 	beq.w	80081c4 <_dtoa_r+0x47c>
 80082da:	4b2f      	ldr	r3, [pc, #188]	; (8008398 <_dtoa_r+0x650>)
 80082dc:	ec51 0b18 	vmov	r0, r1, d8
 80082e0:	2200      	movs	r2, #0
 80082e2:	f7f8 f999 	bl	8000618 <__aeabi_dmul>
 80082e6:	4b2c      	ldr	r3, [pc, #176]	; (8008398 <_dtoa_r+0x650>)
 80082e8:	ec41 0b18 	vmov	d8, r0, r1
 80082ec:	2200      	movs	r2, #0
 80082ee:	4630      	mov	r0, r6
 80082f0:	4639      	mov	r1, r7
 80082f2:	f7f8 f991 	bl	8000618 <__aeabi_dmul>
 80082f6:	4606      	mov	r6, r0
 80082f8:	460f      	mov	r7, r1
 80082fa:	e7c4      	b.n	8008286 <_dtoa_r+0x53e>
 80082fc:	ec51 0b17 	vmov	r0, r1, d7
 8008300:	f7f8 f98a 	bl	8000618 <__aeabi_dmul>
 8008304:	9b02      	ldr	r3, [sp, #8]
 8008306:	9d00      	ldr	r5, [sp, #0]
 8008308:	930c      	str	r3, [sp, #48]	; 0x30
 800830a:	ec41 0b18 	vmov	d8, r0, r1
 800830e:	4639      	mov	r1, r7
 8008310:	4630      	mov	r0, r6
 8008312:	f7f8 fc31 	bl	8000b78 <__aeabi_d2iz>
 8008316:	9011      	str	r0, [sp, #68]	; 0x44
 8008318:	f7f8 f914 	bl	8000544 <__aeabi_i2d>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	4630      	mov	r0, r6
 8008322:	4639      	mov	r1, r7
 8008324:	f7f7 ffc0 	bl	80002a8 <__aeabi_dsub>
 8008328:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800832a:	3330      	adds	r3, #48	; 0x30
 800832c:	f805 3b01 	strb.w	r3, [r5], #1
 8008330:	9b02      	ldr	r3, [sp, #8]
 8008332:	429d      	cmp	r5, r3
 8008334:	4606      	mov	r6, r0
 8008336:	460f      	mov	r7, r1
 8008338:	f04f 0200 	mov.w	r2, #0
 800833c:	d134      	bne.n	80083a8 <_dtoa_r+0x660>
 800833e:	4b19      	ldr	r3, [pc, #100]	; (80083a4 <_dtoa_r+0x65c>)
 8008340:	ec51 0b18 	vmov	r0, r1, d8
 8008344:	f7f7 ffb2 	bl	80002ac <__adddf3>
 8008348:	4602      	mov	r2, r0
 800834a:	460b      	mov	r3, r1
 800834c:	4630      	mov	r0, r6
 800834e:	4639      	mov	r1, r7
 8008350:	f7f8 fbf2 	bl	8000b38 <__aeabi_dcmpgt>
 8008354:	2800      	cmp	r0, #0
 8008356:	d175      	bne.n	8008444 <_dtoa_r+0x6fc>
 8008358:	ec53 2b18 	vmov	r2, r3, d8
 800835c:	4911      	ldr	r1, [pc, #68]	; (80083a4 <_dtoa_r+0x65c>)
 800835e:	2000      	movs	r0, #0
 8008360:	f7f7 ffa2 	bl	80002a8 <__aeabi_dsub>
 8008364:	4602      	mov	r2, r0
 8008366:	460b      	mov	r3, r1
 8008368:	4630      	mov	r0, r6
 800836a:	4639      	mov	r1, r7
 800836c:	f7f8 fbc6 	bl	8000afc <__aeabi_dcmplt>
 8008370:	2800      	cmp	r0, #0
 8008372:	f43f af27 	beq.w	80081c4 <_dtoa_r+0x47c>
 8008376:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008378:	1e6b      	subs	r3, r5, #1
 800837a:	930c      	str	r3, [sp, #48]	; 0x30
 800837c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008380:	2b30      	cmp	r3, #48	; 0x30
 8008382:	d0f8      	beq.n	8008376 <_dtoa_r+0x62e>
 8008384:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008388:	e04a      	b.n	8008420 <_dtoa_r+0x6d8>
 800838a:	bf00      	nop
 800838c:	0800afa8 	.word	0x0800afa8
 8008390:	0800af80 	.word	0x0800af80
 8008394:	3ff00000 	.word	0x3ff00000
 8008398:	40240000 	.word	0x40240000
 800839c:	401c0000 	.word	0x401c0000
 80083a0:	40140000 	.word	0x40140000
 80083a4:	3fe00000 	.word	0x3fe00000
 80083a8:	4baf      	ldr	r3, [pc, #700]	; (8008668 <_dtoa_r+0x920>)
 80083aa:	f7f8 f935 	bl	8000618 <__aeabi_dmul>
 80083ae:	4606      	mov	r6, r0
 80083b0:	460f      	mov	r7, r1
 80083b2:	e7ac      	b.n	800830e <_dtoa_r+0x5c6>
 80083b4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80083b8:	9d00      	ldr	r5, [sp, #0]
 80083ba:	4642      	mov	r2, r8
 80083bc:	464b      	mov	r3, r9
 80083be:	4630      	mov	r0, r6
 80083c0:	4639      	mov	r1, r7
 80083c2:	f7f8 fa53 	bl	800086c <__aeabi_ddiv>
 80083c6:	f7f8 fbd7 	bl	8000b78 <__aeabi_d2iz>
 80083ca:	9002      	str	r0, [sp, #8]
 80083cc:	f7f8 f8ba 	bl	8000544 <__aeabi_i2d>
 80083d0:	4642      	mov	r2, r8
 80083d2:	464b      	mov	r3, r9
 80083d4:	f7f8 f920 	bl	8000618 <__aeabi_dmul>
 80083d8:	4602      	mov	r2, r0
 80083da:	460b      	mov	r3, r1
 80083dc:	4630      	mov	r0, r6
 80083de:	4639      	mov	r1, r7
 80083e0:	f7f7 ff62 	bl	80002a8 <__aeabi_dsub>
 80083e4:	9e02      	ldr	r6, [sp, #8]
 80083e6:	9f01      	ldr	r7, [sp, #4]
 80083e8:	3630      	adds	r6, #48	; 0x30
 80083ea:	f805 6b01 	strb.w	r6, [r5], #1
 80083ee:	9e00      	ldr	r6, [sp, #0]
 80083f0:	1bae      	subs	r6, r5, r6
 80083f2:	42b7      	cmp	r7, r6
 80083f4:	4602      	mov	r2, r0
 80083f6:	460b      	mov	r3, r1
 80083f8:	d137      	bne.n	800846a <_dtoa_r+0x722>
 80083fa:	f7f7 ff57 	bl	80002ac <__adddf3>
 80083fe:	4642      	mov	r2, r8
 8008400:	464b      	mov	r3, r9
 8008402:	4606      	mov	r6, r0
 8008404:	460f      	mov	r7, r1
 8008406:	f7f8 fb97 	bl	8000b38 <__aeabi_dcmpgt>
 800840a:	b9c8      	cbnz	r0, 8008440 <_dtoa_r+0x6f8>
 800840c:	4642      	mov	r2, r8
 800840e:	464b      	mov	r3, r9
 8008410:	4630      	mov	r0, r6
 8008412:	4639      	mov	r1, r7
 8008414:	f7f8 fb68 	bl	8000ae8 <__aeabi_dcmpeq>
 8008418:	b110      	cbz	r0, 8008420 <_dtoa_r+0x6d8>
 800841a:	9b02      	ldr	r3, [sp, #8]
 800841c:	07d9      	lsls	r1, r3, #31
 800841e:	d40f      	bmi.n	8008440 <_dtoa_r+0x6f8>
 8008420:	4620      	mov	r0, r4
 8008422:	4659      	mov	r1, fp
 8008424:	f000 fe58 	bl	80090d8 <_Bfree>
 8008428:	2300      	movs	r3, #0
 800842a:	702b      	strb	r3, [r5, #0]
 800842c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800842e:	f10a 0001 	add.w	r0, sl, #1
 8008432:	6018      	str	r0, [r3, #0]
 8008434:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008436:	2b00      	cmp	r3, #0
 8008438:	f43f acd8 	beq.w	8007dec <_dtoa_r+0xa4>
 800843c:	601d      	str	r5, [r3, #0]
 800843e:	e4d5      	b.n	8007dec <_dtoa_r+0xa4>
 8008440:	f8cd a01c 	str.w	sl, [sp, #28]
 8008444:	462b      	mov	r3, r5
 8008446:	461d      	mov	r5, r3
 8008448:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800844c:	2a39      	cmp	r2, #57	; 0x39
 800844e:	d108      	bne.n	8008462 <_dtoa_r+0x71a>
 8008450:	9a00      	ldr	r2, [sp, #0]
 8008452:	429a      	cmp	r2, r3
 8008454:	d1f7      	bne.n	8008446 <_dtoa_r+0x6fe>
 8008456:	9a07      	ldr	r2, [sp, #28]
 8008458:	9900      	ldr	r1, [sp, #0]
 800845a:	3201      	adds	r2, #1
 800845c:	9207      	str	r2, [sp, #28]
 800845e:	2230      	movs	r2, #48	; 0x30
 8008460:	700a      	strb	r2, [r1, #0]
 8008462:	781a      	ldrb	r2, [r3, #0]
 8008464:	3201      	adds	r2, #1
 8008466:	701a      	strb	r2, [r3, #0]
 8008468:	e78c      	b.n	8008384 <_dtoa_r+0x63c>
 800846a:	4b7f      	ldr	r3, [pc, #508]	; (8008668 <_dtoa_r+0x920>)
 800846c:	2200      	movs	r2, #0
 800846e:	f7f8 f8d3 	bl	8000618 <__aeabi_dmul>
 8008472:	2200      	movs	r2, #0
 8008474:	2300      	movs	r3, #0
 8008476:	4606      	mov	r6, r0
 8008478:	460f      	mov	r7, r1
 800847a:	f7f8 fb35 	bl	8000ae8 <__aeabi_dcmpeq>
 800847e:	2800      	cmp	r0, #0
 8008480:	d09b      	beq.n	80083ba <_dtoa_r+0x672>
 8008482:	e7cd      	b.n	8008420 <_dtoa_r+0x6d8>
 8008484:	9a08      	ldr	r2, [sp, #32]
 8008486:	2a00      	cmp	r2, #0
 8008488:	f000 80c4 	beq.w	8008614 <_dtoa_r+0x8cc>
 800848c:	9a05      	ldr	r2, [sp, #20]
 800848e:	2a01      	cmp	r2, #1
 8008490:	f300 80a8 	bgt.w	80085e4 <_dtoa_r+0x89c>
 8008494:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008496:	2a00      	cmp	r2, #0
 8008498:	f000 80a0 	beq.w	80085dc <_dtoa_r+0x894>
 800849c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80084a0:	9e06      	ldr	r6, [sp, #24]
 80084a2:	4645      	mov	r5, r8
 80084a4:	9a04      	ldr	r2, [sp, #16]
 80084a6:	2101      	movs	r1, #1
 80084a8:	441a      	add	r2, r3
 80084aa:	4620      	mov	r0, r4
 80084ac:	4498      	add	r8, r3
 80084ae:	9204      	str	r2, [sp, #16]
 80084b0:	f000 ff18 	bl	80092e4 <__i2b>
 80084b4:	4607      	mov	r7, r0
 80084b6:	2d00      	cmp	r5, #0
 80084b8:	dd0b      	ble.n	80084d2 <_dtoa_r+0x78a>
 80084ba:	9b04      	ldr	r3, [sp, #16]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	dd08      	ble.n	80084d2 <_dtoa_r+0x78a>
 80084c0:	42ab      	cmp	r3, r5
 80084c2:	9a04      	ldr	r2, [sp, #16]
 80084c4:	bfa8      	it	ge
 80084c6:	462b      	movge	r3, r5
 80084c8:	eba8 0803 	sub.w	r8, r8, r3
 80084cc:	1aed      	subs	r5, r5, r3
 80084ce:	1ad3      	subs	r3, r2, r3
 80084d0:	9304      	str	r3, [sp, #16]
 80084d2:	9b06      	ldr	r3, [sp, #24]
 80084d4:	b1fb      	cbz	r3, 8008516 <_dtoa_r+0x7ce>
 80084d6:	9b08      	ldr	r3, [sp, #32]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f000 809f 	beq.w	800861c <_dtoa_r+0x8d4>
 80084de:	2e00      	cmp	r6, #0
 80084e0:	dd11      	ble.n	8008506 <_dtoa_r+0x7be>
 80084e2:	4639      	mov	r1, r7
 80084e4:	4632      	mov	r2, r6
 80084e6:	4620      	mov	r0, r4
 80084e8:	f000 ffb8 	bl	800945c <__pow5mult>
 80084ec:	465a      	mov	r2, fp
 80084ee:	4601      	mov	r1, r0
 80084f0:	4607      	mov	r7, r0
 80084f2:	4620      	mov	r0, r4
 80084f4:	f000 ff0c 	bl	8009310 <__multiply>
 80084f8:	4659      	mov	r1, fp
 80084fa:	9007      	str	r0, [sp, #28]
 80084fc:	4620      	mov	r0, r4
 80084fe:	f000 fdeb 	bl	80090d8 <_Bfree>
 8008502:	9b07      	ldr	r3, [sp, #28]
 8008504:	469b      	mov	fp, r3
 8008506:	9b06      	ldr	r3, [sp, #24]
 8008508:	1b9a      	subs	r2, r3, r6
 800850a:	d004      	beq.n	8008516 <_dtoa_r+0x7ce>
 800850c:	4659      	mov	r1, fp
 800850e:	4620      	mov	r0, r4
 8008510:	f000 ffa4 	bl	800945c <__pow5mult>
 8008514:	4683      	mov	fp, r0
 8008516:	2101      	movs	r1, #1
 8008518:	4620      	mov	r0, r4
 800851a:	f000 fee3 	bl	80092e4 <__i2b>
 800851e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008520:	2b00      	cmp	r3, #0
 8008522:	4606      	mov	r6, r0
 8008524:	dd7c      	ble.n	8008620 <_dtoa_r+0x8d8>
 8008526:	461a      	mov	r2, r3
 8008528:	4601      	mov	r1, r0
 800852a:	4620      	mov	r0, r4
 800852c:	f000 ff96 	bl	800945c <__pow5mult>
 8008530:	9b05      	ldr	r3, [sp, #20]
 8008532:	2b01      	cmp	r3, #1
 8008534:	4606      	mov	r6, r0
 8008536:	dd76      	ble.n	8008626 <_dtoa_r+0x8de>
 8008538:	2300      	movs	r3, #0
 800853a:	9306      	str	r3, [sp, #24]
 800853c:	6933      	ldr	r3, [r6, #16]
 800853e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008542:	6918      	ldr	r0, [r3, #16]
 8008544:	f000 fe7e 	bl	8009244 <__hi0bits>
 8008548:	f1c0 0020 	rsb	r0, r0, #32
 800854c:	9b04      	ldr	r3, [sp, #16]
 800854e:	4418      	add	r0, r3
 8008550:	f010 001f 	ands.w	r0, r0, #31
 8008554:	f000 8086 	beq.w	8008664 <_dtoa_r+0x91c>
 8008558:	f1c0 0320 	rsb	r3, r0, #32
 800855c:	2b04      	cmp	r3, #4
 800855e:	dd7f      	ble.n	8008660 <_dtoa_r+0x918>
 8008560:	f1c0 001c 	rsb	r0, r0, #28
 8008564:	9b04      	ldr	r3, [sp, #16]
 8008566:	4403      	add	r3, r0
 8008568:	4480      	add	r8, r0
 800856a:	4405      	add	r5, r0
 800856c:	9304      	str	r3, [sp, #16]
 800856e:	f1b8 0f00 	cmp.w	r8, #0
 8008572:	dd05      	ble.n	8008580 <_dtoa_r+0x838>
 8008574:	4659      	mov	r1, fp
 8008576:	4642      	mov	r2, r8
 8008578:	4620      	mov	r0, r4
 800857a:	f000 ffc9 	bl	8009510 <__lshift>
 800857e:	4683      	mov	fp, r0
 8008580:	9b04      	ldr	r3, [sp, #16]
 8008582:	2b00      	cmp	r3, #0
 8008584:	dd05      	ble.n	8008592 <_dtoa_r+0x84a>
 8008586:	4631      	mov	r1, r6
 8008588:	461a      	mov	r2, r3
 800858a:	4620      	mov	r0, r4
 800858c:	f000 ffc0 	bl	8009510 <__lshift>
 8008590:	4606      	mov	r6, r0
 8008592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008594:	2b00      	cmp	r3, #0
 8008596:	d069      	beq.n	800866c <_dtoa_r+0x924>
 8008598:	4631      	mov	r1, r6
 800859a:	4658      	mov	r0, fp
 800859c:	f001 f824 	bl	80095e8 <__mcmp>
 80085a0:	2800      	cmp	r0, #0
 80085a2:	da63      	bge.n	800866c <_dtoa_r+0x924>
 80085a4:	2300      	movs	r3, #0
 80085a6:	4659      	mov	r1, fp
 80085a8:	220a      	movs	r2, #10
 80085aa:	4620      	mov	r0, r4
 80085ac:	f000 fdb6 	bl	800911c <__multadd>
 80085b0:	9b08      	ldr	r3, [sp, #32]
 80085b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085b6:	4683      	mov	fp, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 818f 	beq.w	80088dc <_dtoa_r+0xb94>
 80085be:	4639      	mov	r1, r7
 80085c0:	2300      	movs	r3, #0
 80085c2:	220a      	movs	r2, #10
 80085c4:	4620      	mov	r0, r4
 80085c6:	f000 fda9 	bl	800911c <__multadd>
 80085ca:	f1b9 0f00 	cmp.w	r9, #0
 80085ce:	4607      	mov	r7, r0
 80085d0:	f300 808e 	bgt.w	80086f0 <_dtoa_r+0x9a8>
 80085d4:	9b05      	ldr	r3, [sp, #20]
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	dc50      	bgt.n	800867c <_dtoa_r+0x934>
 80085da:	e089      	b.n	80086f0 <_dtoa_r+0x9a8>
 80085dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80085e2:	e75d      	b.n	80084a0 <_dtoa_r+0x758>
 80085e4:	9b01      	ldr	r3, [sp, #4]
 80085e6:	1e5e      	subs	r6, r3, #1
 80085e8:	9b06      	ldr	r3, [sp, #24]
 80085ea:	42b3      	cmp	r3, r6
 80085ec:	bfbf      	itttt	lt
 80085ee:	9b06      	ldrlt	r3, [sp, #24]
 80085f0:	9606      	strlt	r6, [sp, #24]
 80085f2:	1af2      	sublt	r2, r6, r3
 80085f4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80085f6:	bfb6      	itet	lt
 80085f8:	189b      	addlt	r3, r3, r2
 80085fa:	1b9e      	subge	r6, r3, r6
 80085fc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80085fe:	9b01      	ldr	r3, [sp, #4]
 8008600:	bfb8      	it	lt
 8008602:	2600      	movlt	r6, #0
 8008604:	2b00      	cmp	r3, #0
 8008606:	bfb5      	itete	lt
 8008608:	eba8 0503 	sublt.w	r5, r8, r3
 800860c:	9b01      	ldrge	r3, [sp, #4]
 800860e:	2300      	movlt	r3, #0
 8008610:	4645      	movge	r5, r8
 8008612:	e747      	b.n	80084a4 <_dtoa_r+0x75c>
 8008614:	9e06      	ldr	r6, [sp, #24]
 8008616:	9f08      	ldr	r7, [sp, #32]
 8008618:	4645      	mov	r5, r8
 800861a:	e74c      	b.n	80084b6 <_dtoa_r+0x76e>
 800861c:	9a06      	ldr	r2, [sp, #24]
 800861e:	e775      	b.n	800850c <_dtoa_r+0x7c4>
 8008620:	9b05      	ldr	r3, [sp, #20]
 8008622:	2b01      	cmp	r3, #1
 8008624:	dc18      	bgt.n	8008658 <_dtoa_r+0x910>
 8008626:	9b02      	ldr	r3, [sp, #8]
 8008628:	b9b3      	cbnz	r3, 8008658 <_dtoa_r+0x910>
 800862a:	9b03      	ldr	r3, [sp, #12]
 800862c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008630:	b9a3      	cbnz	r3, 800865c <_dtoa_r+0x914>
 8008632:	9b03      	ldr	r3, [sp, #12]
 8008634:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008638:	0d1b      	lsrs	r3, r3, #20
 800863a:	051b      	lsls	r3, r3, #20
 800863c:	b12b      	cbz	r3, 800864a <_dtoa_r+0x902>
 800863e:	9b04      	ldr	r3, [sp, #16]
 8008640:	3301      	adds	r3, #1
 8008642:	9304      	str	r3, [sp, #16]
 8008644:	f108 0801 	add.w	r8, r8, #1
 8008648:	2301      	movs	r3, #1
 800864a:	9306      	str	r3, [sp, #24]
 800864c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800864e:	2b00      	cmp	r3, #0
 8008650:	f47f af74 	bne.w	800853c <_dtoa_r+0x7f4>
 8008654:	2001      	movs	r0, #1
 8008656:	e779      	b.n	800854c <_dtoa_r+0x804>
 8008658:	2300      	movs	r3, #0
 800865a:	e7f6      	b.n	800864a <_dtoa_r+0x902>
 800865c:	9b02      	ldr	r3, [sp, #8]
 800865e:	e7f4      	b.n	800864a <_dtoa_r+0x902>
 8008660:	d085      	beq.n	800856e <_dtoa_r+0x826>
 8008662:	4618      	mov	r0, r3
 8008664:	301c      	adds	r0, #28
 8008666:	e77d      	b.n	8008564 <_dtoa_r+0x81c>
 8008668:	40240000 	.word	0x40240000
 800866c:	9b01      	ldr	r3, [sp, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	dc38      	bgt.n	80086e4 <_dtoa_r+0x99c>
 8008672:	9b05      	ldr	r3, [sp, #20]
 8008674:	2b02      	cmp	r3, #2
 8008676:	dd35      	ble.n	80086e4 <_dtoa_r+0x99c>
 8008678:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800867c:	f1b9 0f00 	cmp.w	r9, #0
 8008680:	d10d      	bne.n	800869e <_dtoa_r+0x956>
 8008682:	4631      	mov	r1, r6
 8008684:	464b      	mov	r3, r9
 8008686:	2205      	movs	r2, #5
 8008688:	4620      	mov	r0, r4
 800868a:	f000 fd47 	bl	800911c <__multadd>
 800868e:	4601      	mov	r1, r0
 8008690:	4606      	mov	r6, r0
 8008692:	4658      	mov	r0, fp
 8008694:	f000 ffa8 	bl	80095e8 <__mcmp>
 8008698:	2800      	cmp	r0, #0
 800869a:	f73f adbd 	bgt.w	8008218 <_dtoa_r+0x4d0>
 800869e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086a0:	9d00      	ldr	r5, [sp, #0]
 80086a2:	ea6f 0a03 	mvn.w	sl, r3
 80086a6:	f04f 0800 	mov.w	r8, #0
 80086aa:	4631      	mov	r1, r6
 80086ac:	4620      	mov	r0, r4
 80086ae:	f000 fd13 	bl	80090d8 <_Bfree>
 80086b2:	2f00      	cmp	r7, #0
 80086b4:	f43f aeb4 	beq.w	8008420 <_dtoa_r+0x6d8>
 80086b8:	f1b8 0f00 	cmp.w	r8, #0
 80086bc:	d005      	beq.n	80086ca <_dtoa_r+0x982>
 80086be:	45b8      	cmp	r8, r7
 80086c0:	d003      	beq.n	80086ca <_dtoa_r+0x982>
 80086c2:	4641      	mov	r1, r8
 80086c4:	4620      	mov	r0, r4
 80086c6:	f000 fd07 	bl	80090d8 <_Bfree>
 80086ca:	4639      	mov	r1, r7
 80086cc:	4620      	mov	r0, r4
 80086ce:	f000 fd03 	bl	80090d8 <_Bfree>
 80086d2:	e6a5      	b.n	8008420 <_dtoa_r+0x6d8>
 80086d4:	2600      	movs	r6, #0
 80086d6:	4637      	mov	r7, r6
 80086d8:	e7e1      	b.n	800869e <_dtoa_r+0x956>
 80086da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80086dc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80086e0:	4637      	mov	r7, r6
 80086e2:	e599      	b.n	8008218 <_dtoa_r+0x4d0>
 80086e4:	9b08      	ldr	r3, [sp, #32]
 80086e6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 80fd 	beq.w	80088ea <_dtoa_r+0xba2>
 80086f0:	2d00      	cmp	r5, #0
 80086f2:	dd05      	ble.n	8008700 <_dtoa_r+0x9b8>
 80086f4:	4639      	mov	r1, r7
 80086f6:	462a      	mov	r2, r5
 80086f8:	4620      	mov	r0, r4
 80086fa:	f000 ff09 	bl	8009510 <__lshift>
 80086fe:	4607      	mov	r7, r0
 8008700:	9b06      	ldr	r3, [sp, #24]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d05c      	beq.n	80087c0 <_dtoa_r+0xa78>
 8008706:	6879      	ldr	r1, [r7, #4]
 8008708:	4620      	mov	r0, r4
 800870a:	f000 fca5 	bl	8009058 <_Balloc>
 800870e:	4605      	mov	r5, r0
 8008710:	b928      	cbnz	r0, 800871e <_dtoa_r+0x9d6>
 8008712:	4b80      	ldr	r3, [pc, #512]	; (8008914 <_dtoa_r+0xbcc>)
 8008714:	4602      	mov	r2, r0
 8008716:	f240 21ea 	movw	r1, #746	; 0x2ea
 800871a:	f7ff bb2e 	b.w	8007d7a <_dtoa_r+0x32>
 800871e:	693a      	ldr	r2, [r7, #16]
 8008720:	3202      	adds	r2, #2
 8008722:	0092      	lsls	r2, r2, #2
 8008724:	f107 010c 	add.w	r1, r7, #12
 8008728:	300c      	adds	r0, #12
 800872a:	f000 fc87 	bl	800903c <memcpy>
 800872e:	2201      	movs	r2, #1
 8008730:	4629      	mov	r1, r5
 8008732:	4620      	mov	r0, r4
 8008734:	f000 feec 	bl	8009510 <__lshift>
 8008738:	9b00      	ldr	r3, [sp, #0]
 800873a:	3301      	adds	r3, #1
 800873c:	9301      	str	r3, [sp, #4]
 800873e:	9b00      	ldr	r3, [sp, #0]
 8008740:	444b      	add	r3, r9
 8008742:	9307      	str	r3, [sp, #28]
 8008744:	9b02      	ldr	r3, [sp, #8]
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	46b8      	mov	r8, r7
 800874c:	9306      	str	r3, [sp, #24]
 800874e:	4607      	mov	r7, r0
 8008750:	9b01      	ldr	r3, [sp, #4]
 8008752:	4631      	mov	r1, r6
 8008754:	3b01      	subs	r3, #1
 8008756:	4658      	mov	r0, fp
 8008758:	9302      	str	r3, [sp, #8]
 800875a:	f7ff fa67 	bl	8007c2c <quorem>
 800875e:	4603      	mov	r3, r0
 8008760:	3330      	adds	r3, #48	; 0x30
 8008762:	9004      	str	r0, [sp, #16]
 8008764:	4641      	mov	r1, r8
 8008766:	4658      	mov	r0, fp
 8008768:	9308      	str	r3, [sp, #32]
 800876a:	f000 ff3d 	bl	80095e8 <__mcmp>
 800876e:	463a      	mov	r2, r7
 8008770:	4681      	mov	r9, r0
 8008772:	4631      	mov	r1, r6
 8008774:	4620      	mov	r0, r4
 8008776:	f000 ff53 	bl	8009620 <__mdiff>
 800877a:	68c2      	ldr	r2, [r0, #12]
 800877c:	9b08      	ldr	r3, [sp, #32]
 800877e:	4605      	mov	r5, r0
 8008780:	bb02      	cbnz	r2, 80087c4 <_dtoa_r+0xa7c>
 8008782:	4601      	mov	r1, r0
 8008784:	4658      	mov	r0, fp
 8008786:	f000 ff2f 	bl	80095e8 <__mcmp>
 800878a:	9b08      	ldr	r3, [sp, #32]
 800878c:	4602      	mov	r2, r0
 800878e:	4629      	mov	r1, r5
 8008790:	4620      	mov	r0, r4
 8008792:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008796:	f000 fc9f 	bl	80090d8 <_Bfree>
 800879a:	9b05      	ldr	r3, [sp, #20]
 800879c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800879e:	9d01      	ldr	r5, [sp, #4]
 80087a0:	ea43 0102 	orr.w	r1, r3, r2
 80087a4:	9b06      	ldr	r3, [sp, #24]
 80087a6:	430b      	orrs	r3, r1
 80087a8:	9b08      	ldr	r3, [sp, #32]
 80087aa:	d10d      	bne.n	80087c8 <_dtoa_r+0xa80>
 80087ac:	2b39      	cmp	r3, #57	; 0x39
 80087ae:	d029      	beq.n	8008804 <_dtoa_r+0xabc>
 80087b0:	f1b9 0f00 	cmp.w	r9, #0
 80087b4:	dd01      	ble.n	80087ba <_dtoa_r+0xa72>
 80087b6:	9b04      	ldr	r3, [sp, #16]
 80087b8:	3331      	adds	r3, #49	; 0x31
 80087ba:	9a02      	ldr	r2, [sp, #8]
 80087bc:	7013      	strb	r3, [r2, #0]
 80087be:	e774      	b.n	80086aa <_dtoa_r+0x962>
 80087c0:	4638      	mov	r0, r7
 80087c2:	e7b9      	b.n	8008738 <_dtoa_r+0x9f0>
 80087c4:	2201      	movs	r2, #1
 80087c6:	e7e2      	b.n	800878e <_dtoa_r+0xa46>
 80087c8:	f1b9 0f00 	cmp.w	r9, #0
 80087cc:	db06      	blt.n	80087dc <_dtoa_r+0xa94>
 80087ce:	9905      	ldr	r1, [sp, #20]
 80087d0:	ea41 0909 	orr.w	r9, r1, r9
 80087d4:	9906      	ldr	r1, [sp, #24]
 80087d6:	ea59 0101 	orrs.w	r1, r9, r1
 80087da:	d120      	bne.n	800881e <_dtoa_r+0xad6>
 80087dc:	2a00      	cmp	r2, #0
 80087de:	ddec      	ble.n	80087ba <_dtoa_r+0xa72>
 80087e0:	4659      	mov	r1, fp
 80087e2:	2201      	movs	r2, #1
 80087e4:	4620      	mov	r0, r4
 80087e6:	9301      	str	r3, [sp, #4]
 80087e8:	f000 fe92 	bl	8009510 <__lshift>
 80087ec:	4631      	mov	r1, r6
 80087ee:	4683      	mov	fp, r0
 80087f0:	f000 fefa 	bl	80095e8 <__mcmp>
 80087f4:	2800      	cmp	r0, #0
 80087f6:	9b01      	ldr	r3, [sp, #4]
 80087f8:	dc02      	bgt.n	8008800 <_dtoa_r+0xab8>
 80087fa:	d1de      	bne.n	80087ba <_dtoa_r+0xa72>
 80087fc:	07da      	lsls	r2, r3, #31
 80087fe:	d5dc      	bpl.n	80087ba <_dtoa_r+0xa72>
 8008800:	2b39      	cmp	r3, #57	; 0x39
 8008802:	d1d8      	bne.n	80087b6 <_dtoa_r+0xa6e>
 8008804:	9a02      	ldr	r2, [sp, #8]
 8008806:	2339      	movs	r3, #57	; 0x39
 8008808:	7013      	strb	r3, [r2, #0]
 800880a:	462b      	mov	r3, r5
 800880c:	461d      	mov	r5, r3
 800880e:	3b01      	subs	r3, #1
 8008810:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008814:	2a39      	cmp	r2, #57	; 0x39
 8008816:	d050      	beq.n	80088ba <_dtoa_r+0xb72>
 8008818:	3201      	adds	r2, #1
 800881a:	701a      	strb	r2, [r3, #0]
 800881c:	e745      	b.n	80086aa <_dtoa_r+0x962>
 800881e:	2a00      	cmp	r2, #0
 8008820:	dd03      	ble.n	800882a <_dtoa_r+0xae2>
 8008822:	2b39      	cmp	r3, #57	; 0x39
 8008824:	d0ee      	beq.n	8008804 <_dtoa_r+0xabc>
 8008826:	3301      	adds	r3, #1
 8008828:	e7c7      	b.n	80087ba <_dtoa_r+0xa72>
 800882a:	9a01      	ldr	r2, [sp, #4]
 800882c:	9907      	ldr	r1, [sp, #28]
 800882e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008832:	428a      	cmp	r2, r1
 8008834:	d02a      	beq.n	800888c <_dtoa_r+0xb44>
 8008836:	4659      	mov	r1, fp
 8008838:	2300      	movs	r3, #0
 800883a:	220a      	movs	r2, #10
 800883c:	4620      	mov	r0, r4
 800883e:	f000 fc6d 	bl	800911c <__multadd>
 8008842:	45b8      	cmp	r8, r7
 8008844:	4683      	mov	fp, r0
 8008846:	f04f 0300 	mov.w	r3, #0
 800884a:	f04f 020a 	mov.w	r2, #10
 800884e:	4641      	mov	r1, r8
 8008850:	4620      	mov	r0, r4
 8008852:	d107      	bne.n	8008864 <_dtoa_r+0xb1c>
 8008854:	f000 fc62 	bl	800911c <__multadd>
 8008858:	4680      	mov	r8, r0
 800885a:	4607      	mov	r7, r0
 800885c:	9b01      	ldr	r3, [sp, #4]
 800885e:	3301      	adds	r3, #1
 8008860:	9301      	str	r3, [sp, #4]
 8008862:	e775      	b.n	8008750 <_dtoa_r+0xa08>
 8008864:	f000 fc5a 	bl	800911c <__multadd>
 8008868:	4639      	mov	r1, r7
 800886a:	4680      	mov	r8, r0
 800886c:	2300      	movs	r3, #0
 800886e:	220a      	movs	r2, #10
 8008870:	4620      	mov	r0, r4
 8008872:	f000 fc53 	bl	800911c <__multadd>
 8008876:	4607      	mov	r7, r0
 8008878:	e7f0      	b.n	800885c <_dtoa_r+0xb14>
 800887a:	f1b9 0f00 	cmp.w	r9, #0
 800887e:	9a00      	ldr	r2, [sp, #0]
 8008880:	bfcc      	ite	gt
 8008882:	464d      	movgt	r5, r9
 8008884:	2501      	movle	r5, #1
 8008886:	4415      	add	r5, r2
 8008888:	f04f 0800 	mov.w	r8, #0
 800888c:	4659      	mov	r1, fp
 800888e:	2201      	movs	r2, #1
 8008890:	4620      	mov	r0, r4
 8008892:	9301      	str	r3, [sp, #4]
 8008894:	f000 fe3c 	bl	8009510 <__lshift>
 8008898:	4631      	mov	r1, r6
 800889a:	4683      	mov	fp, r0
 800889c:	f000 fea4 	bl	80095e8 <__mcmp>
 80088a0:	2800      	cmp	r0, #0
 80088a2:	dcb2      	bgt.n	800880a <_dtoa_r+0xac2>
 80088a4:	d102      	bne.n	80088ac <_dtoa_r+0xb64>
 80088a6:	9b01      	ldr	r3, [sp, #4]
 80088a8:	07db      	lsls	r3, r3, #31
 80088aa:	d4ae      	bmi.n	800880a <_dtoa_r+0xac2>
 80088ac:	462b      	mov	r3, r5
 80088ae:	461d      	mov	r5, r3
 80088b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088b4:	2a30      	cmp	r2, #48	; 0x30
 80088b6:	d0fa      	beq.n	80088ae <_dtoa_r+0xb66>
 80088b8:	e6f7      	b.n	80086aa <_dtoa_r+0x962>
 80088ba:	9a00      	ldr	r2, [sp, #0]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d1a5      	bne.n	800880c <_dtoa_r+0xac4>
 80088c0:	f10a 0a01 	add.w	sl, sl, #1
 80088c4:	2331      	movs	r3, #49	; 0x31
 80088c6:	e779      	b.n	80087bc <_dtoa_r+0xa74>
 80088c8:	4b13      	ldr	r3, [pc, #76]	; (8008918 <_dtoa_r+0xbd0>)
 80088ca:	f7ff baaf 	b.w	8007e2c <_dtoa_r+0xe4>
 80088ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f47f aa86 	bne.w	8007de2 <_dtoa_r+0x9a>
 80088d6:	4b11      	ldr	r3, [pc, #68]	; (800891c <_dtoa_r+0xbd4>)
 80088d8:	f7ff baa8 	b.w	8007e2c <_dtoa_r+0xe4>
 80088dc:	f1b9 0f00 	cmp.w	r9, #0
 80088e0:	dc03      	bgt.n	80088ea <_dtoa_r+0xba2>
 80088e2:	9b05      	ldr	r3, [sp, #20]
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	f73f aec9 	bgt.w	800867c <_dtoa_r+0x934>
 80088ea:	9d00      	ldr	r5, [sp, #0]
 80088ec:	4631      	mov	r1, r6
 80088ee:	4658      	mov	r0, fp
 80088f0:	f7ff f99c 	bl	8007c2c <quorem>
 80088f4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80088f8:	f805 3b01 	strb.w	r3, [r5], #1
 80088fc:	9a00      	ldr	r2, [sp, #0]
 80088fe:	1aaa      	subs	r2, r5, r2
 8008900:	4591      	cmp	r9, r2
 8008902:	ddba      	ble.n	800887a <_dtoa_r+0xb32>
 8008904:	4659      	mov	r1, fp
 8008906:	2300      	movs	r3, #0
 8008908:	220a      	movs	r2, #10
 800890a:	4620      	mov	r0, r4
 800890c:	f000 fc06 	bl	800911c <__multadd>
 8008910:	4683      	mov	fp, r0
 8008912:	e7eb      	b.n	80088ec <_dtoa_r+0xba4>
 8008914:	0800ae8c 	.word	0x0800ae8c
 8008918:	0800ac8c 	.word	0x0800ac8c
 800891c:	0800ae09 	.word	0x0800ae09

08008920 <rshift>:
 8008920:	6903      	ldr	r3, [r0, #16]
 8008922:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008926:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800892a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800892e:	f100 0414 	add.w	r4, r0, #20
 8008932:	dd45      	ble.n	80089c0 <rshift+0xa0>
 8008934:	f011 011f 	ands.w	r1, r1, #31
 8008938:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800893c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008940:	d10c      	bne.n	800895c <rshift+0x3c>
 8008942:	f100 0710 	add.w	r7, r0, #16
 8008946:	4629      	mov	r1, r5
 8008948:	42b1      	cmp	r1, r6
 800894a:	d334      	bcc.n	80089b6 <rshift+0x96>
 800894c:	1a9b      	subs	r3, r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	1eea      	subs	r2, r5, #3
 8008952:	4296      	cmp	r6, r2
 8008954:	bf38      	it	cc
 8008956:	2300      	movcc	r3, #0
 8008958:	4423      	add	r3, r4
 800895a:	e015      	b.n	8008988 <rshift+0x68>
 800895c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008960:	f1c1 0820 	rsb	r8, r1, #32
 8008964:	40cf      	lsrs	r7, r1
 8008966:	f105 0e04 	add.w	lr, r5, #4
 800896a:	46a1      	mov	r9, r4
 800896c:	4576      	cmp	r6, lr
 800896e:	46f4      	mov	ip, lr
 8008970:	d815      	bhi.n	800899e <rshift+0x7e>
 8008972:	1a9b      	subs	r3, r3, r2
 8008974:	009a      	lsls	r2, r3, #2
 8008976:	3a04      	subs	r2, #4
 8008978:	3501      	adds	r5, #1
 800897a:	42ae      	cmp	r6, r5
 800897c:	bf38      	it	cc
 800897e:	2200      	movcc	r2, #0
 8008980:	18a3      	adds	r3, r4, r2
 8008982:	50a7      	str	r7, [r4, r2]
 8008984:	b107      	cbz	r7, 8008988 <rshift+0x68>
 8008986:	3304      	adds	r3, #4
 8008988:	1b1a      	subs	r2, r3, r4
 800898a:	42a3      	cmp	r3, r4
 800898c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008990:	bf08      	it	eq
 8008992:	2300      	moveq	r3, #0
 8008994:	6102      	str	r2, [r0, #16]
 8008996:	bf08      	it	eq
 8008998:	6143      	streq	r3, [r0, #20]
 800899a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800899e:	f8dc c000 	ldr.w	ip, [ip]
 80089a2:	fa0c fc08 	lsl.w	ip, ip, r8
 80089a6:	ea4c 0707 	orr.w	r7, ip, r7
 80089aa:	f849 7b04 	str.w	r7, [r9], #4
 80089ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 80089b2:	40cf      	lsrs	r7, r1
 80089b4:	e7da      	b.n	800896c <rshift+0x4c>
 80089b6:	f851 cb04 	ldr.w	ip, [r1], #4
 80089ba:	f847 cf04 	str.w	ip, [r7, #4]!
 80089be:	e7c3      	b.n	8008948 <rshift+0x28>
 80089c0:	4623      	mov	r3, r4
 80089c2:	e7e1      	b.n	8008988 <rshift+0x68>

080089c4 <__hexdig_fun>:
 80089c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80089c8:	2b09      	cmp	r3, #9
 80089ca:	d802      	bhi.n	80089d2 <__hexdig_fun+0xe>
 80089cc:	3820      	subs	r0, #32
 80089ce:	b2c0      	uxtb	r0, r0
 80089d0:	4770      	bx	lr
 80089d2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80089d6:	2b05      	cmp	r3, #5
 80089d8:	d801      	bhi.n	80089de <__hexdig_fun+0x1a>
 80089da:	3847      	subs	r0, #71	; 0x47
 80089dc:	e7f7      	b.n	80089ce <__hexdig_fun+0xa>
 80089de:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80089e2:	2b05      	cmp	r3, #5
 80089e4:	d801      	bhi.n	80089ea <__hexdig_fun+0x26>
 80089e6:	3827      	subs	r0, #39	; 0x27
 80089e8:	e7f1      	b.n	80089ce <__hexdig_fun+0xa>
 80089ea:	2000      	movs	r0, #0
 80089ec:	4770      	bx	lr
	...

080089f0 <__gethex>:
 80089f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f4:	ed2d 8b02 	vpush	{d8}
 80089f8:	b089      	sub	sp, #36	; 0x24
 80089fa:	ee08 0a10 	vmov	s16, r0
 80089fe:	9304      	str	r3, [sp, #16]
 8008a00:	4bbc      	ldr	r3, [pc, #752]	; (8008cf4 <__gethex+0x304>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	9301      	str	r3, [sp, #4]
 8008a06:	4618      	mov	r0, r3
 8008a08:	468b      	mov	fp, r1
 8008a0a:	4690      	mov	r8, r2
 8008a0c:	f7f7 fbf0 	bl	80001f0 <strlen>
 8008a10:	9b01      	ldr	r3, [sp, #4]
 8008a12:	f8db 2000 	ldr.w	r2, [fp]
 8008a16:	4403      	add	r3, r0
 8008a18:	4682      	mov	sl, r0
 8008a1a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008a1e:	9305      	str	r3, [sp, #20]
 8008a20:	1c93      	adds	r3, r2, #2
 8008a22:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008a26:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008a2a:	32fe      	adds	r2, #254	; 0xfe
 8008a2c:	18d1      	adds	r1, r2, r3
 8008a2e:	461f      	mov	r7, r3
 8008a30:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008a34:	9100      	str	r1, [sp, #0]
 8008a36:	2830      	cmp	r0, #48	; 0x30
 8008a38:	d0f8      	beq.n	8008a2c <__gethex+0x3c>
 8008a3a:	f7ff ffc3 	bl	80089c4 <__hexdig_fun>
 8008a3e:	4604      	mov	r4, r0
 8008a40:	2800      	cmp	r0, #0
 8008a42:	d13a      	bne.n	8008aba <__gethex+0xca>
 8008a44:	9901      	ldr	r1, [sp, #4]
 8008a46:	4652      	mov	r2, sl
 8008a48:	4638      	mov	r0, r7
 8008a4a:	f001 f9ed 	bl	8009e28 <strncmp>
 8008a4e:	4605      	mov	r5, r0
 8008a50:	2800      	cmp	r0, #0
 8008a52:	d168      	bne.n	8008b26 <__gethex+0x136>
 8008a54:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008a58:	eb07 060a 	add.w	r6, r7, sl
 8008a5c:	f7ff ffb2 	bl	80089c4 <__hexdig_fun>
 8008a60:	2800      	cmp	r0, #0
 8008a62:	d062      	beq.n	8008b2a <__gethex+0x13a>
 8008a64:	4633      	mov	r3, r6
 8008a66:	7818      	ldrb	r0, [r3, #0]
 8008a68:	2830      	cmp	r0, #48	; 0x30
 8008a6a:	461f      	mov	r7, r3
 8008a6c:	f103 0301 	add.w	r3, r3, #1
 8008a70:	d0f9      	beq.n	8008a66 <__gethex+0x76>
 8008a72:	f7ff ffa7 	bl	80089c4 <__hexdig_fun>
 8008a76:	2301      	movs	r3, #1
 8008a78:	fab0 f480 	clz	r4, r0
 8008a7c:	0964      	lsrs	r4, r4, #5
 8008a7e:	4635      	mov	r5, r6
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	463a      	mov	r2, r7
 8008a84:	4616      	mov	r6, r2
 8008a86:	3201      	adds	r2, #1
 8008a88:	7830      	ldrb	r0, [r6, #0]
 8008a8a:	f7ff ff9b 	bl	80089c4 <__hexdig_fun>
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	d1f8      	bne.n	8008a84 <__gethex+0x94>
 8008a92:	9901      	ldr	r1, [sp, #4]
 8008a94:	4652      	mov	r2, sl
 8008a96:	4630      	mov	r0, r6
 8008a98:	f001 f9c6 	bl	8009e28 <strncmp>
 8008a9c:	b980      	cbnz	r0, 8008ac0 <__gethex+0xd0>
 8008a9e:	b94d      	cbnz	r5, 8008ab4 <__gethex+0xc4>
 8008aa0:	eb06 050a 	add.w	r5, r6, sl
 8008aa4:	462a      	mov	r2, r5
 8008aa6:	4616      	mov	r6, r2
 8008aa8:	3201      	adds	r2, #1
 8008aaa:	7830      	ldrb	r0, [r6, #0]
 8008aac:	f7ff ff8a 	bl	80089c4 <__hexdig_fun>
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	d1f8      	bne.n	8008aa6 <__gethex+0xb6>
 8008ab4:	1bad      	subs	r5, r5, r6
 8008ab6:	00ad      	lsls	r5, r5, #2
 8008ab8:	e004      	b.n	8008ac4 <__gethex+0xd4>
 8008aba:	2400      	movs	r4, #0
 8008abc:	4625      	mov	r5, r4
 8008abe:	e7e0      	b.n	8008a82 <__gethex+0x92>
 8008ac0:	2d00      	cmp	r5, #0
 8008ac2:	d1f7      	bne.n	8008ab4 <__gethex+0xc4>
 8008ac4:	7833      	ldrb	r3, [r6, #0]
 8008ac6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008aca:	2b50      	cmp	r3, #80	; 0x50
 8008acc:	d13b      	bne.n	8008b46 <__gethex+0x156>
 8008ace:	7873      	ldrb	r3, [r6, #1]
 8008ad0:	2b2b      	cmp	r3, #43	; 0x2b
 8008ad2:	d02c      	beq.n	8008b2e <__gethex+0x13e>
 8008ad4:	2b2d      	cmp	r3, #45	; 0x2d
 8008ad6:	d02e      	beq.n	8008b36 <__gethex+0x146>
 8008ad8:	1c71      	adds	r1, r6, #1
 8008ada:	f04f 0900 	mov.w	r9, #0
 8008ade:	7808      	ldrb	r0, [r1, #0]
 8008ae0:	f7ff ff70 	bl	80089c4 <__hexdig_fun>
 8008ae4:	1e43      	subs	r3, r0, #1
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	2b18      	cmp	r3, #24
 8008aea:	d82c      	bhi.n	8008b46 <__gethex+0x156>
 8008aec:	f1a0 0210 	sub.w	r2, r0, #16
 8008af0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008af4:	f7ff ff66 	bl	80089c4 <__hexdig_fun>
 8008af8:	1e43      	subs	r3, r0, #1
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	2b18      	cmp	r3, #24
 8008afe:	d91d      	bls.n	8008b3c <__gethex+0x14c>
 8008b00:	f1b9 0f00 	cmp.w	r9, #0
 8008b04:	d000      	beq.n	8008b08 <__gethex+0x118>
 8008b06:	4252      	negs	r2, r2
 8008b08:	4415      	add	r5, r2
 8008b0a:	f8cb 1000 	str.w	r1, [fp]
 8008b0e:	b1e4      	cbz	r4, 8008b4a <__gethex+0x15a>
 8008b10:	9b00      	ldr	r3, [sp, #0]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	bf14      	ite	ne
 8008b16:	2700      	movne	r7, #0
 8008b18:	2706      	moveq	r7, #6
 8008b1a:	4638      	mov	r0, r7
 8008b1c:	b009      	add	sp, #36	; 0x24
 8008b1e:	ecbd 8b02 	vpop	{d8}
 8008b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b26:	463e      	mov	r6, r7
 8008b28:	4625      	mov	r5, r4
 8008b2a:	2401      	movs	r4, #1
 8008b2c:	e7ca      	b.n	8008ac4 <__gethex+0xd4>
 8008b2e:	f04f 0900 	mov.w	r9, #0
 8008b32:	1cb1      	adds	r1, r6, #2
 8008b34:	e7d3      	b.n	8008ade <__gethex+0xee>
 8008b36:	f04f 0901 	mov.w	r9, #1
 8008b3a:	e7fa      	b.n	8008b32 <__gethex+0x142>
 8008b3c:	230a      	movs	r3, #10
 8008b3e:	fb03 0202 	mla	r2, r3, r2, r0
 8008b42:	3a10      	subs	r2, #16
 8008b44:	e7d4      	b.n	8008af0 <__gethex+0x100>
 8008b46:	4631      	mov	r1, r6
 8008b48:	e7df      	b.n	8008b0a <__gethex+0x11a>
 8008b4a:	1bf3      	subs	r3, r6, r7
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	4621      	mov	r1, r4
 8008b50:	2b07      	cmp	r3, #7
 8008b52:	dc0b      	bgt.n	8008b6c <__gethex+0x17c>
 8008b54:	ee18 0a10 	vmov	r0, s16
 8008b58:	f000 fa7e 	bl	8009058 <_Balloc>
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	b940      	cbnz	r0, 8008b72 <__gethex+0x182>
 8008b60:	4b65      	ldr	r3, [pc, #404]	; (8008cf8 <__gethex+0x308>)
 8008b62:	4602      	mov	r2, r0
 8008b64:	21de      	movs	r1, #222	; 0xde
 8008b66:	4865      	ldr	r0, [pc, #404]	; (8008cfc <__gethex+0x30c>)
 8008b68:	f001 f97e 	bl	8009e68 <__assert_func>
 8008b6c:	3101      	adds	r1, #1
 8008b6e:	105b      	asrs	r3, r3, #1
 8008b70:	e7ee      	b.n	8008b50 <__gethex+0x160>
 8008b72:	f100 0914 	add.w	r9, r0, #20
 8008b76:	f04f 0b00 	mov.w	fp, #0
 8008b7a:	f1ca 0301 	rsb	r3, sl, #1
 8008b7e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008b82:	f8cd b000 	str.w	fp, [sp]
 8008b86:	9306      	str	r3, [sp, #24]
 8008b88:	42b7      	cmp	r7, r6
 8008b8a:	d340      	bcc.n	8008c0e <__gethex+0x21e>
 8008b8c:	9802      	ldr	r0, [sp, #8]
 8008b8e:	9b00      	ldr	r3, [sp, #0]
 8008b90:	f840 3b04 	str.w	r3, [r0], #4
 8008b94:	eba0 0009 	sub.w	r0, r0, r9
 8008b98:	1080      	asrs	r0, r0, #2
 8008b9a:	0146      	lsls	r6, r0, #5
 8008b9c:	6120      	str	r0, [r4, #16]
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 fb50 	bl	8009244 <__hi0bits>
 8008ba4:	1a30      	subs	r0, r6, r0
 8008ba6:	f8d8 6000 	ldr.w	r6, [r8]
 8008baa:	42b0      	cmp	r0, r6
 8008bac:	dd63      	ble.n	8008c76 <__gethex+0x286>
 8008bae:	1b87      	subs	r7, r0, r6
 8008bb0:	4639      	mov	r1, r7
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f000 feea 	bl	800998c <__any_on>
 8008bb8:	4682      	mov	sl, r0
 8008bba:	b1a8      	cbz	r0, 8008be8 <__gethex+0x1f8>
 8008bbc:	1e7b      	subs	r3, r7, #1
 8008bbe:	1159      	asrs	r1, r3, #5
 8008bc0:	f003 021f 	and.w	r2, r3, #31
 8008bc4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008bc8:	f04f 0a01 	mov.w	sl, #1
 8008bcc:	fa0a f202 	lsl.w	r2, sl, r2
 8008bd0:	420a      	tst	r2, r1
 8008bd2:	d009      	beq.n	8008be8 <__gethex+0x1f8>
 8008bd4:	4553      	cmp	r3, sl
 8008bd6:	dd05      	ble.n	8008be4 <__gethex+0x1f4>
 8008bd8:	1eb9      	subs	r1, r7, #2
 8008bda:	4620      	mov	r0, r4
 8008bdc:	f000 fed6 	bl	800998c <__any_on>
 8008be0:	2800      	cmp	r0, #0
 8008be2:	d145      	bne.n	8008c70 <__gethex+0x280>
 8008be4:	f04f 0a02 	mov.w	sl, #2
 8008be8:	4639      	mov	r1, r7
 8008bea:	4620      	mov	r0, r4
 8008bec:	f7ff fe98 	bl	8008920 <rshift>
 8008bf0:	443d      	add	r5, r7
 8008bf2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008bf6:	42ab      	cmp	r3, r5
 8008bf8:	da4c      	bge.n	8008c94 <__gethex+0x2a4>
 8008bfa:	ee18 0a10 	vmov	r0, s16
 8008bfe:	4621      	mov	r1, r4
 8008c00:	f000 fa6a 	bl	80090d8 <_Bfree>
 8008c04:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c06:	2300      	movs	r3, #0
 8008c08:	6013      	str	r3, [r2, #0]
 8008c0a:	27a3      	movs	r7, #163	; 0xa3
 8008c0c:	e785      	b.n	8008b1a <__gethex+0x12a>
 8008c0e:	1e73      	subs	r3, r6, #1
 8008c10:	9a05      	ldr	r2, [sp, #20]
 8008c12:	9303      	str	r3, [sp, #12]
 8008c14:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d019      	beq.n	8008c50 <__gethex+0x260>
 8008c1c:	f1bb 0f20 	cmp.w	fp, #32
 8008c20:	d107      	bne.n	8008c32 <__gethex+0x242>
 8008c22:	9b02      	ldr	r3, [sp, #8]
 8008c24:	9a00      	ldr	r2, [sp, #0]
 8008c26:	f843 2b04 	str.w	r2, [r3], #4
 8008c2a:	9302      	str	r3, [sp, #8]
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	469b      	mov	fp, r3
 8008c32:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008c36:	f7ff fec5 	bl	80089c4 <__hexdig_fun>
 8008c3a:	9b00      	ldr	r3, [sp, #0]
 8008c3c:	f000 000f 	and.w	r0, r0, #15
 8008c40:	fa00 f00b 	lsl.w	r0, r0, fp
 8008c44:	4303      	orrs	r3, r0
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	f10b 0b04 	add.w	fp, fp, #4
 8008c4c:	9b03      	ldr	r3, [sp, #12]
 8008c4e:	e00d      	b.n	8008c6c <__gethex+0x27c>
 8008c50:	9b03      	ldr	r3, [sp, #12]
 8008c52:	9a06      	ldr	r2, [sp, #24]
 8008c54:	4413      	add	r3, r2
 8008c56:	42bb      	cmp	r3, r7
 8008c58:	d3e0      	bcc.n	8008c1c <__gethex+0x22c>
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	9901      	ldr	r1, [sp, #4]
 8008c5e:	9307      	str	r3, [sp, #28]
 8008c60:	4652      	mov	r2, sl
 8008c62:	f001 f8e1 	bl	8009e28 <strncmp>
 8008c66:	9b07      	ldr	r3, [sp, #28]
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	d1d7      	bne.n	8008c1c <__gethex+0x22c>
 8008c6c:	461e      	mov	r6, r3
 8008c6e:	e78b      	b.n	8008b88 <__gethex+0x198>
 8008c70:	f04f 0a03 	mov.w	sl, #3
 8008c74:	e7b8      	b.n	8008be8 <__gethex+0x1f8>
 8008c76:	da0a      	bge.n	8008c8e <__gethex+0x29e>
 8008c78:	1a37      	subs	r7, r6, r0
 8008c7a:	4621      	mov	r1, r4
 8008c7c:	ee18 0a10 	vmov	r0, s16
 8008c80:	463a      	mov	r2, r7
 8008c82:	f000 fc45 	bl	8009510 <__lshift>
 8008c86:	1bed      	subs	r5, r5, r7
 8008c88:	4604      	mov	r4, r0
 8008c8a:	f100 0914 	add.w	r9, r0, #20
 8008c8e:	f04f 0a00 	mov.w	sl, #0
 8008c92:	e7ae      	b.n	8008bf2 <__gethex+0x202>
 8008c94:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008c98:	42a8      	cmp	r0, r5
 8008c9a:	dd72      	ble.n	8008d82 <__gethex+0x392>
 8008c9c:	1b45      	subs	r5, r0, r5
 8008c9e:	42ae      	cmp	r6, r5
 8008ca0:	dc36      	bgt.n	8008d10 <__gethex+0x320>
 8008ca2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d02a      	beq.n	8008d00 <__gethex+0x310>
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	d02c      	beq.n	8008d08 <__gethex+0x318>
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d115      	bne.n	8008cde <__gethex+0x2ee>
 8008cb2:	42ae      	cmp	r6, r5
 8008cb4:	d113      	bne.n	8008cde <__gethex+0x2ee>
 8008cb6:	2e01      	cmp	r6, #1
 8008cb8:	d10b      	bne.n	8008cd2 <__gethex+0x2e2>
 8008cba:	9a04      	ldr	r2, [sp, #16]
 8008cbc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008cc0:	6013      	str	r3, [r2, #0]
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	6123      	str	r3, [r4, #16]
 8008cc6:	f8c9 3000 	str.w	r3, [r9]
 8008cca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ccc:	2762      	movs	r7, #98	; 0x62
 8008cce:	601c      	str	r4, [r3, #0]
 8008cd0:	e723      	b.n	8008b1a <__gethex+0x12a>
 8008cd2:	1e71      	subs	r1, r6, #1
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	f000 fe59 	bl	800998c <__any_on>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	d1ed      	bne.n	8008cba <__gethex+0x2ca>
 8008cde:	ee18 0a10 	vmov	r0, s16
 8008ce2:	4621      	mov	r1, r4
 8008ce4:	f000 f9f8 	bl	80090d8 <_Bfree>
 8008ce8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008cea:	2300      	movs	r3, #0
 8008cec:	6013      	str	r3, [r2, #0]
 8008cee:	2750      	movs	r7, #80	; 0x50
 8008cf0:	e713      	b.n	8008b1a <__gethex+0x12a>
 8008cf2:	bf00      	nop
 8008cf4:	0800af08 	.word	0x0800af08
 8008cf8:	0800ae8c 	.word	0x0800ae8c
 8008cfc:	0800ae9d 	.word	0x0800ae9d
 8008d00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d1eb      	bne.n	8008cde <__gethex+0x2ee>
 8008d06:	e7d8      	b.n	8008cba <__gethex+0x2ca>
 8008d08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1d5      	bne.n	8008cba <__gethex+0x2ca>
 8008d0e:	e7e6      	b.n	8008cde <__gethex+0x2ee>
 8008d10:	1e6f      	subs	r7, r5, #1
 8008d12:	f1ba 0f00 	cmp.w	sl, #0
 8008d16:	d131      	bne.n	8008d7c <__gethex+0x38c>
 8008d18:	b127      	cbz	r7, 8008d24 <__gethex+0x334>
 8008d1a:	4639      	mov	r1, r7
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f000 fe35 	bl	800998c <__any_on>
 8008d22:	4682      	mov	sl, r0
 8008d24:	117b      	asrs	r3, r7, #5
 8008d26:	2101      	movs	r1, #1
 8008d28:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008d2c:	f007 071f 	and.w	r7, r7, #31
 8008d30:	fa01 f707 	lsl.w	r7, r1, r7
 8008d34:	421f      	tst	r7, r3
 8008d36:	4629      	mov	r1, r5
 8008d38:	4620      	mov	r0, r4
 8008d3a:	bf18      	it	ne
 8008d3c:	f04a 0a02 	orrne.w	sl, sl, #2
 8008d40:	1b76      	subs	r6, r6, r5
 8008d42:	f7ff fded 	bl	8008920 <rshift>
 8008d46:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008d4a:	2702      	movs	r7, #2
 8008d4c:	f1ba 0f00 	cmp.w	sl, #0
 8008d50:	d048      	beq.n	8008de4 <__gethex+0x3f4>
 8008d52:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d015      	beq.n	8008d86 <__gethex+0x396>
 8008d5a:	2b03      	cmp	r3, #3
 8008d5c:	d017      	beq.n	8008d8e <__gethex+0x39e>
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d109      	bne.n	8008d76 <__gethex+0x386>
 8008d62:	f01a 0f02 	tst.w	sl, #2
 8008d66:	d006      	beq.n	8008d76 <__gethex+0x386>
 8008d68:	f8d9 0000 	ldr.w	r0, [r9]
 8008d6c:	ea4a 0a00 	orr.w	sl, sl, r0
 8008d70:	f01a 0f01 	tst.w	sl, #1
 8008d74:	d10e      	bne.n	8008d94 <__gethex+0x3a4>
 8008d76:	f047 0710 	orr.w	r7, r7, #16
 8008d7a:	e033      	b.n	8008de4 <__gethex+0x3f4>
 8008d7c:	f04f 0a01 	mov.w	sl, #1
 8008d80:	e7d0      	b.n	8008d24 <__gethex+0x334>
 8008d82:	2701      	movs	r7, #1
 8008d84:	e7e2      	b.n	8008d4c <__gethex+0x35c>
 8008d86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d88:	f1c3 0301 	rsb	r3, r3, #1
 8008d8c:	9315      	str	r3, [sp, #84]	; 0x54
 8008d8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d0f0      	beq.n	8008d76 <__gethex+0x386>
 8008d94:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008d98:	f104 0314 	add.w	r3, r4, #20
 8008d9c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008da0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008da4:	f04f 0c00 	mov.w	ip, #0
 8008da8:	4618      	mov	r0, r3
 8008daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dae:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008db2:	d01c      	beq.n	8008dee <__gethex+0x3fe>
 8008db4:	3201      	adds	r2, #1
 8008db6:	6002      	str	r2, [r0, #0]
 8008db8:	2f02      	cmp	r7, #2
 8008dba:	f104 0314 	add.w	r3, r4, #20
 8008dbe:	d13f      	bne.n	8008e40 <__gethex+0x450>
 8008dc0:	f8d8 2000 	ldr.w	r2, [r8]
 8008dc4:	3a01      	subs	r2, #1
 8008dc6:	42b2      	cmp	r2, r6
 8008dc8:	d10a      	bne.n	8008de0 <__gethex+0x3f0>
 8008dca:	1171      	asrs	r1, r6, #5
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008dd2:	f006 061f 	and.w	r6, r6, #31
 8008dd6:	fa02 f606 	lsl.w	r6, r2, r6
 8008dda:	421e      	tst	r6, r3
 8008ddc:	bf18      	it	ne
 8008dde:	4617      	movne	r7, r2
 8008de0:	f047 0720 	orr.w	r7, r7, #32
 8008de4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008de6:	601c      	str	r4, [r3, #0]
 8008de8:	9b04      	ldr	r3, [sp, #16]
 8008dea:	601d      	str	r5, [r3, #0]
 8008dec:	e695      	b.n	8008b1a <__gethex+0x12a>
 8008dee:	4299      	cmp	r1, r3
 8008df0:	f843 cc04 	str.w	ip, [r3, #-4]
 8008df4:	d8d8      	bhi.n	8008da8 <__gethex+0x3b8>
 8008df6:	68a3      	ldr	r3, [r4, #8]
 8008df8:	459b      	cmp	fp, r3
 8008dfa:	db19      	blt.n	8008e30 <__gethex+0x440>
 8008dfc:	6861      	ldr	r1, [r4, #4]
 8008dfe:	ee18 0a10 	vmov	r0, s16
 8008e02:	3101      	adds	r1, #1
 8008e04:	f000 f928 	bl	8009058 <_Balloc>
 8008e08:	4681      	mov	r9, r0
 8008e0a:	b918      	cbnz	r0, 8008e14 <__gethex+0x424>
 8008e0c:	4b1a      	ldr	r3, [pc, #104]	; (8008e78 <__gethex+0x488>)
 8008e0e:	4602      	mov	r2, r0
 8008e10:	2184      	movs	r1, #132	; 0x84
 8008e12:	e6a8      	b.n	8008b66 <__gethex+0x176>
 8008e14:	6922      	ldr	r2, [r4, #16]
 8008e16:	3202      	adds	r2, #2
 8008e18:	f104 010c 	add.w	r1, r4, #12
 8008e1c:	0092      	lsls	r2, r2, #2
 8008e1e:	300c      	adds	r0, #12
 8008e20:	f000 f90c 	bl	800903c <memcpy>
 8008e24:	4621      	mov	r1, r4
 8008e26:	ee18 0a10 	vmov	r0, s16
 8008e2a:	f000 f955 	bl	80090d8 <_Bfree>
 8008e2e:	464c      	mov	r4, r9
 8008e30:	6923      	ldr	r3, [r4, #16]
 8008e32:	1c5a      	adds	r2, r3, #1
 8008e34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e38:	6122      	str	r2, [r4, #16]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	615a      	str	r2, [r3, #20]
 8008e3e:	e7bb      	b.n	8008db8 <__gethex+0x3c8>
 8008e40:	6922      	ldr	r2, [r4, #16]
 8008e42:	455a      	cmp	r2, fp
 8008e44:	dd0b      	ble.n	8008e5e <__gethex+0x46e>
 8008e46:	2101      	movs	r1, #1
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f7ff fd69 	bl	8008920 <rshift>
 8008e4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e52:	3501      	adds	r5, #1
 8008e54:	42ab      	cmp	r3, r5
 8008e56:	f6ff aed0 	blt.w	8008bfa <__gethex+0x20a>
 8008e5a:	2701      	movs	r7, #1
 8008e5c:	e7c0      	b.n	8008de0 <__gethex+0x3f0>
 8008e5e:	f016 061f 	ands.w	r6, r6, #31
 8008e62:	d0fa      	beq.n	8008e5a <__gethex+0x46a>
 8008e64:	449a      	add	sl, r3
 8008e66:	f1c6 0620 	rsb	r6, r6, #32
 8008e6a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008e6e:	f000 f9e9 	bl	8009244 <__hi0bits>
 8008e72:	42b0      	cmp	r0, r6
 8008e74:	dbe7      	blt.n	8008e46 <__gethex+0x456>
 8008e76:	e7f0      	b.n	8008e5a <__gethex+0x46a>
 8008e78:	0800ae8c 	.word	0x0800ae8c

08008e7c <L_shift>:
 8008e7c:	f1c2 0208 	rsb	r2, r2, #8
 8008e80:	0092      	lsls	r2, r2, #2
 8008e82:	b570      	push	{r4, r5, r6, lr}
 8008e84:	f1c2 0620 	rsb	r6, r2, #32
 8008e88:	6843      	ldr	r3, [r0, #4]
 8008e8a:	6804      	ldr	r4, [r0, #0]
 8008e8c:	fa03 f506 	lsl.w	r5, r3, r6
 8008e90:	432c      	orrs	r4, r5
 8008e92:	40d3      	lsrs	r3, r2
 8008e94:	6004      	str	r4, [r0, #0]
 8008e96:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e9a:	4288      	cmp	r0, r1
 8008e9c:	d3f4      	bcc.n	8008e88 <L_shift+0xc>
 8008e9e:	bd70      	pop	{r4, r5, r6, pc}

08008ea0 <__match>:
 8008ea0:	b530      	push	{r4, r5, lr}
 8008ea2:	6803      	ldr	r3, [r0, #0]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eaa:	b914      	cbnz	r4, 8008eb2 <__match+0x12>
 8008eac:	6003      	str	r3, [r0, #0]
 8008eae:	2001      	movs	r0, #1
 8008eb0:	bd30      	pop	{r4, r5, pc}
 8008eb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eb6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008eba:	2d19      	cmp	r5, #25
 8008ebc:	bf98      	it	ls
 8008ebe:	3220      	addls	r2, #32
 8008ec0:	42a2      	cmp	r2, r4
 8008ec2:	d0f0      	beq.n	8008ea6 <__match+0x6>
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	e7f3      	b.n	8008eb0 <__match+0x10>

08008ec8 <__hexnan>:
 8008ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ecc:	680b      	ldr	r3, [r1, #0]
 8008ece:	6801      	ldr	r1, [r0, #0]
 8008ed0:	115e      	asrs	r6, r3, #5
 8008ed2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008ed6:	f013 031f 	ands.w	r3, r3, #31
 8008eda:	b087      	sub	sp, #28
 8008edc:	bf18      	it	ne
 8008ede:	3604      	addne	r6, #4
 8008ee0:	2500      	movs	r5, #0
 8008ee2:	1f37      	subs	r7, r6, #4
 8008ee4:	4682      	mov	sl, r0
 8008ee6:	4690      	mov	r8, r2
 8008ee8:	9301      	str	r3, [sp, #4]
 8008eea:	f846 5c04 	str.w	r5, [r6, #-4]
 8008eee:	46b9      	mov	r9, r7
 8008ef0:	463c      	mov	r4, r7
 8008ef2:	9502      	str	r5, [sp, #8]
 8008ef4:	46ab      	mov	fp, r5
 8008ef6:	784a      	ldrb	r2, [r1, #1]
 8008ef8:	1c4b      	adds	r3, r1, #1
 8008efa:	9303      	str	r3, [sp, #12]
 8008efc:	b342      	cbz	r2, 8008f50 <__hexnan+0x88>
 8008efe:	4610      	mov	r0, r2
 8008f00:	9105      	str	r1, [sp, #20]
 8008f02:	9204      	str	r2, [sp, #16]
 8008f04:	f7ff fd5e 	bl	80089c4 <__hexdig_fun>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d14f      	bne.n	8008fac <__hexnan+0xe4>
 8008f0c:	9a04      	ldr	r2, [sp, #16]
 8008f0e:	9905      	ldr	r1, [sp, #20]
 8008f10:	2a20      	cmp	r2, #32
 8008f12:	d818      	bhi.n	8008f46 <__hexnan+0x7e>
 8008f14:	9b02      	ldr	r3, [sp, #8]
 8008f16:	459b      	cmp	fp, r3
 8008f18:	dd13      	ble.n	8008f42 <__hexnan+0x7a>
 8008f1a:	454c      	cmp	r4, r9
 8008f1c:	d206      	bcs.n	8008f2c <__hexnan+0x64>
 8008f1e:	2d07      	cmp	r5, #7
 8008f20:	dc04      	bgt.n	8008f2c <__hexnan+0x64>
 8008f22:	462a      	mov	r2, r5
 8008f24:	4649      	mov	r1, r9
 8008f26:	4620      	mov	r0, r4
 8008f28:	f7ff ffa8 	bl	8008e7c <L_shift>
 8008f2c:	4544      	cmp	r4, r8
 8008f2e:	d950      	bls.n	8008fd2 <__hexnan+0x10a>
 8008f30:	2300      	movs	r3, #0
 8008f32:	f1a4 0904 	sub.w	r9, r4, #4
 8008f36:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f3a:	f8cd b008 	str.w	fp, [sp, #8]
 8008f3e:	464c      	mov	r4, r9
 8008f40:	461d      	mov	r5, r3
 8008f42:	9903      	ldr	r1, [sp, #12]
 8008f44:	e7d7      	b.n	8008ef6 <__hexnan+0x2e>
 8008f46:	2a29      	cmp	r2, #41	; 0x29
 8008f48:	d156      	bne.n	8008ff8 <__hexnan+0x130>
 8008f4a:	3102      	adds	r1, #2
 8008f4c:	f8ca 1000 	str.w	r1, [sl]
 8008f50:	f1bb 0f00 	cmp.w	fp, #0
 8008f54:	d050      	beq.n	8008ff8 <__hexnan+0x130>
 8008f56:	454c      	cmp	r4, r9
 8008f58:	d206      	bcs.n	8008f68 <__hexnan+0xa0>
 8008f5a:	2d07      	cmp	r5, #7
 8008f5c:	dc04      	bgt.n	8008f68 <__hexnan+0xa0>
 8008f5e:	462a      	mov	r2, r5
 8008f60:	4649      	mov	r1, r9
 8008f62:	4620      	mov	r0, r4
 8008f64:	f7ff ff8a 	bl	8008e7c <L_shift>
 8008f68:	4544      	cmp	r4, r8
 8008f6a:	d934      	bls.n	8008fd6 <__hexnan+0x10e>
 8008f6c:	f1a8 0204 	sub.w	r2, r8, #4
 8008f70:	4623      	mov	r3, r4
 8008f72:	f853 1b04 	ldr.w	r1, [r3], #4
 8008f76:	f842 1f04 	str.w	r1, [r2, #4]!
 8008f7a:	429f      	cmp	r7, r3
 8008f7c:	d2f9      	bcs.n	8008f72 <__hexnan+0xaa>
 8008f7e:	1b3b      	subs	r3, r7, r4
 8008f80:	f023 0303 	bic.w	r3, r3, #3
 8008f84:	3304      	adds	r3, #4
 8008f86:	3401      	adds	r4, #1
 8008f88:	3e03      	subs	r6, #3
 8008f8a:	42b4      	cmp	r4, r6
 8008f8c:	bf88      	it	hi
 8008f8e:	2304      	movhi	r3, #4
 8008f90:	4443      	add	r3, r8
 8008f92:	2200      	movs	r2, #0
 8008f94:	f843 2b04 	str.w	r2, [r3], #4
 8008f98:	429f      	cmp	r7, r3
 8008f9a:	d2fb      	bcs.n	8008f94 <__hexnan+0xcc>
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	b91b      	cbnz	r3, 8008fa8 <__hexnan+0xe0>
 8008fa0:	4547      	cmp	r7, r8
 8008fa2:	d127      	bne.n	8008ff4 <__hexnan+0x12c>
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	603b      	str	r3, [r7, #0]
 8008fa8:	2005      	movs	r0, #5
 8008faa:	e026      	b.n	8008ffa <__hexnan+0x132>
 8008fac:	3501      	adds	r5, #1
 8008fae:	2d08      	cmp	r5, #8
 8008fb0:	f10b 0b01 	add.w	fp, fp, #1
 8008fb4:	dd06      	ble.n	8008fc4 <__hexnan+0xfc>
 8008fb6:	4544      	cmp	r4, r8
 8008fb8:	d9c3      	bls.n	8008f42 <__hexnan+0x7a>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	f844 3c04 	str.w	r3, [r4, #-4]
 8008fc0:	2501      	movs	r5, #1
 8008fc2:	3c04      	subs	r4, #4
 8008fc4:	6822      	ldr	r2, [r4, #0]
 8008fc6:	f000 000f 	and.w	r0, r0, #15
 8008fca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008fce:	6022      	str	r2, [r4, #0]
 8008fd0:	e7b7      	b.n	8008f42 <__hexnan+0x7a>
 8008fd2:	2508      	movs	r5, #8
 8008fd4:	e7b5      	b.n	8008f42 <__hexnan+0x7a>
 8008fd6:	9b01      	ldr	r3, [sp, #4]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d0df      	beq.n	8008f9c <__hexnan+0xd4>
 8008fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8008fe0:	f1c3 0320 	rsb	r3, r3, #32
 8008fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8008fe8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008fec:	401a      	ands	r2, r3
 8008fee:	f846 2c04 	str.w	r2, [r6, #-4]
 8008ff2:	e7d3      	b.n	8008f9c <__hexnan+0xd4>
 8008ff4:	3f04      	subs	r7, #4
 8008ff6:	e7d1      	b.n	8008f9c <__hexnan+0xd4>
 8008ff8:	2004      	movs	r0, #4
 8008ffa:	b007      	add	sp, #28
 8008ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009000 <_localeconv_r>:
 8009000:	4800      	ldr	r0, [pc, #0]	; (8009004 <_localeconv_r+0x4>)
 8009002:	4770      	bx	lr
 8009004:	20000168 	.word	0x20000168

08009008 <malloc>:
 8009008:	4b02      	ldr	r3, [pc, #8]	; (8009014 <malloc+0xc>)
 800900a:	4601      	mov	r1, r0
 800900c:	6818      	ldr	r0, [r3, #0]
 800900e:	f000 bd3d 	b.w	8009a8c <_malloc_r>
 8009012:	bf00      	nop
 8009014:	20000010 	.word	0x20000010

08009018 <__ascii_mbtowc>:
 8009018:	b082      	sub	sp, #8
 800901a:	b901      	cbnz	r1, 800901e <__ascii_mbtowc+0x6>
 800901c:	a901      	add	r1, sp, #4
 800901e:	b142      	cbz	r2, 8009032 <__ascii_mbtowc+0x1a>
 8009020:	b14b      	cbz	r3, 8009036 <__ascii_mbtowc+0x1e>
 8009022:	7813      	ldrb	r3, [r2, #0]
 8009024:	600b      	str	r3, [r1, #0]
 8009026:	7812      	ldrb	r2, [r2, #0]
 8009028:	1e10      	subs	r0, r2, #0
 800902a:	bf18      	it	ne
 800902c:	2001      	movne	r0, #1
 800902e:	b002      	add	sp, #8
 8009030:	4770      	bx	lr
 8009032:	4610      	mov	r0, r2
 8009034:	e7fb      	b.n	800902e <__ascii_mbtowc+0x16>
 8009036:	f06f 0001 	mvn.w	r0, #1
 800903a:	e7f8      	b.n	800902e <__ascii_mbtowc+0x16>

0800903c <memcpy>:
 800903c:	440a      	add	r2, r1
 800903e:	4291      	cmp	r1, r2
 8009040:	f100 33ff 	add.w	r3, r0, #4294967295
 8009044:	d100      	bne.n	8009048 <memcpy+0xc>
 8009046:	4770      	bx	lr
 8009048:	b510      	push	{r4, lr}
 800904a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800904e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009052:	4291      	cmp	r1, r2
 8009054:	d1f9      	bne.n	800904a <memcpy+0xe>
 8009056:	bd10      	pop	{r4, pc}

08009058 <_Balloc>:
 8009058:	b570      	push	{r4, r5, r6, lr}
 800905a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800905c:	4604      	mov	r4, r0
 800905e:	460d      	mov	r5, r1
 8009060:	b976      	cbnz	r6, 8009080 <_Balloc+0x28>
 8009062:	2010      	movs	r0, #16
 8009064:	f7ff ffd0 	bl	8009008 <malloc>
 8009068:	4602      	mov	r2, r0
 800906a:	6260      	str	r0, [r4, #36]	; 0x24
 800906c:	b920      	cbnz	r0, 8009078 <_Balloc+0x20>
 800906e:	4b18      	ldr	r3, [pc, #96]	; (80090d0 <_Balloc+0x78>)
 8009070:	4818      	ldr	r0, [pc, #96]	; (80090d4 <_Balloc+0x7c>)
 8009072:	2166      	movs	r1, #102	; 0x66
 8009074:	f000 fef8 	bl	8009e68 <__assert_func>
 8009078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800907c:	6006      	str	r6, [r0, #0]
 800907e:	60c6      	str	r6, [r0, #12]
 8009080:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009082:	68f3      	ldr	r3, [r6, #12]
 8009084:	b183      	cbz	r3, 80090a8 <_Balloc+0x50>
 8009086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800908e:	b9b8      	cbnz	r0, 80090c0 <_Balloc+0x68>
 8009090:	2101      	movs	r1, #1
 8009092:	fa01 f605 	lsl.w	r6, r1, r5
 8009096:	1d72      	adds	r2, r6, #5
 8009098:	0092      	lsls	r2, r2, #2
 800909a:	4620      	mov	r0, r4
 800909c:	f000 fc97 	bl	80099ce <_calloc_r>
 80090a0:	b160      	cbz	r0, 80090bc <_Balloc+0x64>
 80090a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090a6:	e00e      	b.n	80090c6 <_Balloc+0x6e>
 80090a8:	2221      	movs	r2, #33	; 0x21
 80090aa:	2104      	movs	r1, #4
 80090ac:	4620      	mov	r0, r4
 80090ae:	f000 fc8e 	bl	80099ce <_calloc_r>
 80090b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090b4:	60f0      	str	r0, [r6, #12]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1e4      	bne.n	8009086 <_Balloc+0x2e>
 80090bc:	2000      	movs	r0, #0
 80090be:	bd70      	pop	{r4, r5, r6, pc}
 80090c0:	6802      	ldr	r2, [r0, #0]
 80090c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80090c6:	2300      	movs	r3, #0
 80090c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090cc:	e7f7      	b.n	80090be <_Balloc+0x66>
 80090ce:	bf00      	nop
 80090d0:	0800ae16 	.word	0x0800ae16
 80090d4:	0800af1c 	.word	0x0800af1c

080090d8 <_Bfree>:
 80090d8:	b570      	push	{r4, r5, r6, lr}
 80090da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090dc:	4605      	mov	r5, r0
 80090de:	460c      	mov	r4, r1
 80090e0:	b976      	cbnz	r6, 8009100 <_Bfree+0x28>
 80090e2:	2010      	movs	r0, #16
 80090e4:	f7ff ff90 	bl	8009008 <malloc>
 80090e8:	4602      	mov	r2, r0
 80090ea:	6268      	str	r0, [r5, #36]	; 0x24
 80090ec:	b920      	cbnz	r0, 80090f8 <_Bfree+0x20>
 80090ee:	4b09      	ldr	r3, [pc, #36]	; (8009114 <_Bfree+0x3c>)
 80090f0:	4809      	ldr	r0, [pc, #36]	; (8009118 <_Bfree+0x40>)
 80090f2:	218a      	movs	r1, #138	; 0x8a
 80090f4:	f000 feb8 	bl	8009e68 <__assert_func>
 80090f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090fc:	6006      	str	r6, [r0, #0]
 80090fe:	60c6      	str	r6, [r0, #12]
 8009100:	b13c      	cbz	r4, 8009112 <_Bfree+0x3a>
 8009102:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009104:	6862      	ldr	r2, [r4, #4]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800910c:	6021      	str	r1, [r4, #0]
 800910e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009112:	bd70      	pop	{r4, r5, r6, pc}
 8009114:	0800ae16 	.word	0x0800ae16
 8009118:	0800af1c 	.word	0x0800af1c

0800911c <__multadd>:
 800911c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009120:	690e      	ldr	r6, [r1, #16]
 8009122:	4607      	mov	r7, r0
 8009124:	4698      	mov	r8, r3
 8009126:	460c      	mov	r4, r1
 8009128:	f101 0014 	add.w	r0, r1, #20
 800912c:	2300      	movs	r3, #0
 800912e:	6805      	ldr	r5, [r0, #0]
 8009130:	b2a9      	uxth	r1, r5
 8009132:	fb02 8101 	mla	r1, r2, r1, r8
 8009136:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800913a:	0c2d      	lsrs	r5, r5, #16
 800913c:	fb02 c505 	mla	r5, r2, r5, ip
 8009140:	b289      	uxth	r1, r1
 8009142:	3301      	adds	r3, #1
 8009144:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009148:	429e      	cmp	r6, r3
 800914a:	f840 1b04 	str.w	r1, [r0], #4
 800914e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009152:	dcec      	bgt.n	800912e <__multadd+0x12>
 8009154:	f1b8 0f00 	cmp.w	r8, #0
 8009158:	d022      	beq.n	80091a0 <__multadd+0x84>
 800915a:	68a3      	ldr	r3, [r4, #8]
 800915c:	42b3      	cmp	r3, r6
 800915e:	dc19      	bgt.n	8009194 <__multadd+0x78>
 8009160:	6861      	ldr	r1, [r4, #4]
 8009162:	4638      	mov	r0, r7
 8009164:	3101      	adds	r1, #1
 8009166:	f7ff ff77 	bl	8009058 <_Balloc>
 800916a:	4605      	mov	r5, r0
 800916c:	b928      	cbnz	r0, 800917a <__multadd+0x5e>
 800916e:	4602      	mov	r2, r0
 8009170:	4b0d      	ldr	r3, [pc, #52]	; (80091a8 <__multadd+0x8c>)
 8009172:	480e      	ldr	r0, [pc, #56]	; (80091ac <__multadd+0x90>)
 8009174:	21b5      	movs	r1, #181	; 0xb5
 8009176:	f000 fe77 	bl	8009e68 <__assert_func>
 800917a:	6922      	ldr	r2, [r4, #16]
 800917c:	3202      	adds	r2, #2
 800917e:	f104 010c 	add.w	r1, r4, #12
 8009182:	0092      	lsls	r2, r2, #2
 8009184:	300c      	adds	r0, #12
 8009186:	f7ff ff59 	bl	800903c <memcpy>
 800918a:	4621      	mov	r1, r4
 800918c:	4638      	mov	r0, r7
 800918e:	f7ff ffa3 	bl	80090d8 <_Bfree>
 8009192:	462c      	mov	r4, r5
 8009194:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009198:	3601      	adds	r6, #1
 800919a:	f8c3 8014 	str.w	r8, [r3, #20]
 800919e:	6126      	str	r6, [r4, #16]
 80091a0:	4620      	mov	r0, r4
 80091a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a6:	bf00      	nop
 80091a8:	0800ae8c 	.word	0x0800ae8c
 80091ac:	0800af1c 	.word	0x0800af1c

080091b0 <__s2b>:
 80091b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091b4:	460c      	mov	r4, r1
 80091b6:	4615      	mov	r5, r2
 80091b8:	461f      	mov	r7, r3
 80091ba:	2209      	movs	r2, #9
 80091bc:	3308      	adds	r3, #8
 80091be:	4606      	mov	r6, r0
 80091c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80091c4:	2100      	movs	r1, #0
 80091c6:	2201      	movs	r2, #1
 80091c8:	429a      	cmp	r2, r3
 80091ca:	db09      	blt.n	80091e0 <__s2b+0x30>
 80091cc:	4630      	mov	r0, r6
 80091ce:	f7ff ff43 	bl	8009058 <_Balloc>
 80091d2:	b940      	cbnz	r0, 80091e6 <__s2b+0x36>
 80091d4:	4602      	mov	r2, r0
 80091d6:	4b19      	ldr	r3, [pc, #100]	; (800923c <__s2b+0x8c>)
 80091d8:	4819      	ldr	r0, [pc, #100]	; (8009240 <__s2b+0x90>)
 80091da:	21ce      	movs	r1, #206	; 0xce
 80091dc:	f000 fe44 	bl	8009e68 <__assert_func>
 80091e0:	0052      	lsls	r2, r2, #1
 80091e2:	3101      	adds	r1, #1
 80091e4:	e7f0      	b.n	80091c8 <__s2b+0x18>
 80091e6:	9b08      	ldr	r3, [sp, #32]
 80091e8:	6143      	str	r3, [r0, #20]
 80091ea:	2d09      	cmp	r5, #9
 80091ec:	f04f 0301 	mov.w	r3, #1
 80091f0:	6103      	str	r3, [r0, #16]
 80091f2:	dd16      	ble.n	8009222 <__s2b+0x72>
 80091f4:	f104 0909 	add.w	r9, r4, #9
 80091f8:	46c8      	mov	r8, r9
 80091fa:	442c      	add	r4, r5
 80091fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009200:	4601      	mov	r1, r0
 8009202:	3b30      	subs	r3, #48	; 0x30
 8009204:	220a      	movs	r2, #10
 8009206:	4630      	mov	r0, r6
 8009208:	f7ff ff88 	bl	800911c <__multadd>
 800920c:	45a0      	cmp	r8, r4
 800920e:	d1f5      	bne.n	80091fc <__s2b+0x4c>
 8009210:	f1a5 0408 	sub.w	r4, r5, #8
 8009214:	444c      	add	r4, r9
 8009216:	1b2d      	subs	r5, r5, r4
 8009218:	1963      	adds	r3, r4, r5
 800921a:	42bb      	cmp	r3, r7
 800921c:	db04      	blt.n	8009228 <__s2b+0x78>
 800921e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009222:	340a      	adds	r4, #10
 8009224:	2509      	movs	r5, #9
 8009226:	e7f6      	b.n	8009216 <__s2b+0x66>
 8009228:	f814 3b01 	ldrb.w	r3, [r4], #1
 800922c:	4601      	mov	r1, r0
 800922e:	3b30      	subs	r3, #48	; 0x30
 8009230:	220a      	movs	r2, #10
 8009232:	4630      	mov	r0, r6
 8009234:	f7ff ff72 	bl	800911c <__multadd>
 8009238:	e7ee      	b.n	8009218 <__s2b+0x68>
 800923a:	bf00      	nop
 800923c:	0800ae8c 	.word	0x0800ae8c
 8009240:	0800af1c 	.word	0x0800af1c

08009244 <__hi0bits>:
 8009244:	0c03      	lsrs	r3, r0, #16
 8009246:	041b      	lsls	r3, r3, #16
 8009248:	b9d3      	cbnz	r3, 8009280 <__hi0bits+0x3c>
 800924a:	0400      	lsls	r0, r0, #16
 800924c:	2310      	movs	r3, #16
 800924e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009252:	bf04      	itt	eq
 8009254:	0200      	lsleq	r0, r0, #8
 8009256:	3308      	addeq	r3, #8
 8009258:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800925c:	bf04      	itt	eq
 800925e:	0100      	lsleq	r0, r0, #4
 8009260:	3304      	addeq	r3, #4
 8009262:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009266:	bf04      	itt	eq
 8009268:	0080      	lsleq	r0, r0, #2
 800926a:	3302      	addeq	r3, #2
 800926c:	2800      	cmp	r0, #0
 800926e:	db05      	blt.n	800927c <__hi0bits+0x38>
 8009270:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009274:	f103 0301 	add.w	r3, r3, #1
 8009278:	bf08      	it	eq
 800927a:	2320      	moveq	r3, #32
 800927c:	4618      	mov	r0, r3
 800927e:	4770      	bx	lr
 8009280:	2300      	movs	r3, #0
 8009282:	e7e4      	b.n	800924e <__hi0bits+0xa>

08009284 <__lo0bits>:
 8009284:	6803      	ldr	r3, [r0, #0]
 8009286:	f013 0207 	ands.w	r2, r3, #7
 800928a:	4601      	mov	r1, r0
 800928c:	d00b      	beq.n	80092a6 <__lo0bits+0x22>
 800928e:	07da      	lsls	r2, r3, #31
 8009290:	d424      	bmi.n	80092dc <__lo0bits+0x58>
 8009292:	0798      	lsls	r0, r3, #30
 8009294:	bf49      	itett	mi
 8009296:	085b      	lsrmi	r3, r3, #1
 8009298:	089b      	lsrpl	r3, r3, #2
 800929a:	2001      	movmi	r0, #1
 800929c:	600b      	strmi	r3, [r1, #0]
 800929e:	bf5c      	itt	pl
 80092a0:	600b      	strpl	r3, [r1, #0]
 80092a2:	2002      	movpl	r0, #2
 80092a4:	4770      	bx	lr
 80092a6:	b298      	uxth	r0, r3
 80092a8:	b9b0      	cbnz	r0, 80092d8 <__lo0bits+0x54>
 80092aa:	0c1b      	lsrs	r3, r3, #16
 80092ac:	2010      	movs	r0, #16
 80092ae:	f013 0fff 	tst.w	r3, #255	; 0xff
 80092b2:	bf04      	itt	eq
 80092b4:	0a1b      	lsreq	r3, r3, #8
 80092b6:	3008      	addeq	r0, #8
 80092b8:	071a      	lsls	r2, r3, #28
 80092ba:	bf04      	itt	eq
 80092bc:	091b      	lsreq	r3, r3, #4
 80092be:	3004      	addeq	r0, #4
 80092c0:	079a      	lsls	r2, r3, #30
 80092c2:	bf04      	itt	eq
 80092c4:	089b      	lsreq	r3, r3, #2
 80092c6:	3002      	addeq	r0, #2
 80092c8:	07da      	lsls	r2, r3, #31
 80092ca:	d403      	bmi.n	80092d4 <__lo0bits+0x50>
 80092cc:	085b      	lsrs	r3, r3, #1
 80092ce:	f100 0001 	add.w	r0, r0, #1
 80092d2:	d005      	beq.n	80092e0 <__lo0bits+0x5c>
 80092d4:	600b      	str	r3, [r1, #0]
 80092d6:	4770      	bx	lr
 80092d8:	4610      	mov	r0, r2
 80092da:	e7e8      	b.n	80092ae <__lo0bits+0x2a>
 80092dc:	2000      	movs	r0, #0
 80092de:	4770      	bx	lr
 80092e0:	2020      	movs	r0, #32
 80092e2:	4770      	bx	lr

080092e4 <__i2b>:
 80092e4:	b510      	push	{r4, lr}
 80092e6:	460c      	mov	r4, r1
 80092e8:	2101      	movs	r1, #1
 80092ea:	f7ff feb5 	bl	8009058 <_Balloc>
 80092ee:	4602      	mov	r2, r0
 80092f0:	b928      	cbnz	r0, 80092fe <__i2b+0x1a>
 80092f2:	4b05      	ldr	r3, [pc, #20]	; (8009308 <__i2b+0x24>)
 80092f4:	4805      	ldr	r0, [pc, #20]	; (800930c <__i2b+0x28>)
 80092f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80092fa:	f000 fdb5 	bl	8009e68 <__assert_func>
 80092fe:	2301      	movs	r3, #1
 8009300:	6144      	str	r4, [r0, #20]
 8009302:	6103      	str	r3, [r0, #16]
 8009304:	bd10      	pop	{r4, pc}
 8009306:	bf00      	nop
 8009308:	0800ae8c 	.word	0x0800ae8c
 800930c:	0800af1c 	.word	0x0800af1c

08009310 <__multiply>:
 8009310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009314:	4614      	mov	r4, r2
 8009316:	690a      	ldr	r2, [r1, #16]
 8009318:	6923      	ldr	r3, [r4, #16]
 800931a:	429a      	cmp	r2, r3
 800931c:	bfb8      	it	lt
 800931e:	460b      	movlt	r3, r1
 8009320:	460d      	mov	r5, r1
 8009322:	bfbc      	itt	lt
 8009324:	4625      	movlt	r5, r4
 8009326:	461c      	movlt	r4, r3
 8009328:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800932c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009330:	68ab      	ldr	r3, [r5, #8]
 8009332:	6869      	ldr	r1, [r5, #4]
 8009334:	eb0a 0709 	add.w	r7, sl, r9
 8009338:	42bb      	cmp	r3, r7
 800933a:	b085      	sub	sp, #20
 800933c:	bfb8      	it	lt
 800933e:	3101      	addlt	r1, #1
 8009340:	f7ff fe8a 	bl	8009058 <_Balloc>
 8009344:	b930      	cbnz	r0, 8009354 <__multiply+0x44>
 8009346:	4602      	mov	r2, r0
 8009348:	4b42      	ldr	r3, [pc, #264]	; (8009454 <__multiply+0x144>)
 800934a:	4843      	ldr	r0, [pc, #268]	; (8009458 <__multiply+0x148>)
 800934c:	f240 115d 	movw	r1, #349	; 0x15d
 8009350:	f000 fd8a 	bl	8009e68 <__assert_func>
 8009354:	f100 0614 	add.w	r6, r0, #20
 8009358:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800935c:	4633      	mov	r3, r6
 800935e:	2200      	movs	r2, #0
 8009360:	4543      	cmp	r3, r8
 8009362:	d31e      	bcc.n	80093a2 <__multiply+0x92>
 8009364:	f105 0c14 	add.w	ip, r5, #20
 8009368:	f104 0314 	add.w	r3, r4, #20
 800936c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009370:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009374:	9202      	str	r2, [sp, #8]
 8009376:	ebac 0205 	sub.w	r2, ip, r5
 800937a:	3a15      	subs	r2, #21
 800937c:	f022 0203 	bic.w	r2, r2, #3
 8009380:	3204      	adds	r2, #4
 8009382:	f105 0115 	add.w	r1, r5, #21
 8009386:	458c      	cmp	ip, r1
 8009388:	bf38      	it	cc
 800938a:	2204      	movcc	r2, #4
 800938c:	9201      	str	r2, [sp, #4]
 800938e:	9a02      	ldr	r2, [sp, #8]
 8009390:	9303      	str	r3, [sp, #12]
 8009392:	429a      	cmp	r2, r3
 8009394:	d808      	bhi.n	80093a8 <__multiply+0x98>
 8009396:	2f00      	cmp	r7, #0
 8009398:	dc55      	bgt.n	8009446 <__multiply+0x136>
 800939a:	6107      	str	r7, [r0, #16]
 800939c:	b005      	add	sp, #20
 800939e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a2:	f843 2b04 	str.w	r2, [r3], #4
 80093a6:	e7db      	b.n	8009360 <__multiply+0x50>
 80093a8:	f8b3 a000 	ldrh.w	sl, [r3]
 80093ac:	f1ba 0f00 	cmp.w	sl, #0
 80093b0:	d020      	beq.n	80093f4 <__multiply+0xe4>
 80093b2:	f105 0e14 	add.w	lr, r5, #20
 80093b6:	46b1      	mov	r9, r6
 80093b8:	2200      	movs	r2, #0
 80093ba:	f85e 4b04 	ldr.w	r4, [lr], #4
 80093be:	f8d9 b000 	ldr.w	fp, [r9]
 80093c2:	b2a1      	uxth	r1, r4
 80093c4:	fa1f fb8b 	uxth.w	fp, fp
 80093c8:	fb0a b101 	mla	r1, sl, r1, fp
 80093cc:	4411      	add	r1, r2
 80093ce:	f8d9 2000 	ldr.w	r2, [r9]
 80093d2:	0c24      	lsrs	r4, r4, #16
 80093d4:	0c12      	lsrs	r2, r2, #16
 80093d6:	fb0a 2404 	mla	r4, sl, r4, r2
 80093da:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80093de:	b289      	uxth	r1, r1
 80093e0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80093e4:	45f4      	cmp	ip, lr
 80093e6:	f849 1b04 	str.w	r1, [r9], #4
 80093ea:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80093ee:	d8e4      	bhi.n	80093ba <__multiply+0xaa>
 80093f0:	9901      	ldr	r1, [sp, #4]
 80093f2:	5072      	str	r2, [r6, r1]
 80093f4:	9a03      	ldr	r2, [sp, #12]
 80093f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80093fa:	3304      	adds	r3, #4
 80093fc:	f1b9 0f00 	cmp.w	r9, #0
 8009400:	d01f      	beq.n	8009442 <__multiply+0x132>
 8009402:	6834      	ldr	r4, [r6, #0]
 8009404:	f105 0114 	add.w	r1, r5, #20
 8009408:	46b6      	mov	lr, r6
 800940a:	f04f 0a00 	mov.w	sl, #0
 800940e:	880a      	ldrh	r2, [r1, #0]
 8009410:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009414:	fb09 b202 	mla	r2, r9, r2, fp
 8009418:	4492      	add	sl, r2
 800941a:	b2a4      	uxth	r4, r4
 800941c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009420:	f84e 4b04 	str.w	r4, [lr], #4
 8009424:	f851 4b04 	ldr.w	r4, [r1], #4
 8009428:	f8be 2000 	ldrh.w	r2, [lr]
 800942c:	0c24      	lsrs	r4, r4, #16
 800942e:	fb09 2404 	mla	r4, r9, r4, r2
 8009432:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009436:	458c      	cmp	ip, r1
 8009438:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800943c:	d8e7      	bhi.n	800940e <__multiply+0xfe>
 800943e:	9a01      	ldr	r2, [sp, #4]
 8009440:	50b4      	str	r4, [r6, r2]
 8009442:	3604      	adds	r6, #4
 8009444:	e7a3      	b.n	800938e <__multiply+0x7e>
 8009446:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1a5      	bne.n	800939a <__multiply+0x8a>
 800944e:	3f01      	subs	r7, #1
 8009450:	e7a1      	b.n	8009396 <__multiply+0x86>
 8009452:	bf00      	nop
 8009454:	0800ae8c 	.word	0x0800ae8c
 8009458:	0800af1c 	.word	0x0800af1c

0800945c <__pow5mult>:
 800945c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009460:	4615      	mov	r5, r2
 8009462:	f012 0203 	ands.w	r2, r2, #3
 8009466:	4606      	mov	r6, r0
 8009468:	460f      	mov	r7, r1
 800946a:	d007      	beq.n	800947c <__pow5mult+0x20>
 800946c:	4c25      	ldr	r4, [pc, #148]	; (8009504 <__pow5mult+0xa8>)
 800946e:	3a01      	subs	r2, #1
 8009470:	2300      	movs	r3, #0
 8009472:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009476:	f7ff fe51 	bl	800911c <__multadd>
 800947a:	4607      	mov	r7, r0
 800947c:	10ad      	asrs	r5, r5, #2
 800947e:	d03d      	beq.n	80094fc <__pow5mult+0xa0>
 8009480:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009482:	b97c      	cbnz	r4, 80094a4 <__pow5mult+0x48>
 8009484:	2010      	movs	r0, #16
 8009486:	f7ff fdbf 	bl	8009008 <malloc>
 800948a:	4602      	mov	r2, r0
 800948c:	6270      	str	r0, [r6, #36]	; 0x24
 800948e:	b928      	cbnz	r0, 800949c <__pow5mult+0x40>
 8009490:	4b1d      	ldr	r3, [pc, #116]	; (8009508 <__pow5mult+0xac>)
 8009492:	481e      	ldr	r0, [pc, #120]	; (800950c <__pow5mult+0xb0>)
 8009494:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009498:	f000 fce6 	bl	8009e68 <__assert_func>
 800949c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094a0:	6004      	str	r4, [r0, #0]
 80094a2:	60c4      	str	r4, [r0, #12]
 80094a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80094a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80094ac:	b94c      	cbnz	r4, 80094c2 <__pow5mult+0x66>
 80094ae:	f240 2171 	movw	r1, #625	; 0x271
 80094b2:	4630      	mov	r0, r6
 80094b4:	f7ff ff16 	bl	80092e4 <__i2b>
 80094b8:	2300      	movs	r3, #0
 80094ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80094be:	4604      	mov	r4, r0
 80094c0:	6003      	str	r3, [r0, #0]
 80094c2:	f04f 0900 	mov.w	r9, #0
 80094c6:	07eb      	lsls	r3, r5, #31
 80094c8:	d50a      	bpl.n	80094e0 <__pow5mult+0x84>
 80094ca:	4639      	mov	r1, r7
 80094cc:	4622      	mov	r2, r4
 80094ce:	4630      	mov	r0, r6
 80094d0:	f7ff ff1e 	bl	8009310 <__multiply>
 80094d4:	4639      	mov	r1, r7
 80094d6:	4680      	mov	r8, r0
 80094d8:	4630      	mov	r0, r6
 80094da:	f7ff fdfd 	bl	80090d8 <_Bfree>
 80094de:	4647      	mov	r7, r8
 80094e0:	106d      	asrs	r5, r5, #1
 80094e2:	d00b      	beq.n	80094fc <__pow5mult+0xa0>
 80094e4:	6820      	ldr	r0, [r4, #0]
 80094e6:	b938      	cbnz	r0, 80094f8 <__pow5mult+0x9c>
 80094e8:	4622      	mov	r2, r4
 80094ea:	4621      	mov	r1, r4
 80094ec:	4630      	mov	r0, r6
 80094ee:	f7ff ff0f 	bl	8009310 <__multiply>
 80094f2:	6020      	str	r0, [r4, #0]
 80094f4:	f8c0 9000 	str.w	r9, [r0]
 80094f8:	4604      	mov	r4, r0
 80094fa:	e7e4      	b.n	80094c6 <__pow5mult+0x6a>
 80094fc:	4638      	mov	r0, r7
 80094fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009502:	bf00      	nop
 8009504:	0800b070 	.word	0x0800b070
 8009508:	0800ae16 	.word	0x0800ae16
 800950c:	0800af1c 	.word	0x0800af1c

08009510 <__lshift>:
 8009510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009514:	460c      	mov	r4, r1
 8009516:	6849      	ldr	r1, [r1, #4]
 8009518:	6923      	ldr	r3, [r4, #16]
 800951a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800951e:	68a3      	ldr	r3, [r4, #8]
 8009520:	4607      	mov	r7, r0
 8009522:	4691      	mov	r9, r2
 8009524:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009528:	f108 0601 	add.w	r6, r8, #1
 800952c:	42b3      	cmp	r3, r6
 800952e:	db0b      	blt.n	8009548 <__lshift+0x38>
 8009530:	4638      	mov	r0, r7
 8009532:	f7ff fd91 	bl	8009058 <_Balloc>
 8009536:	4605      	mov	r5, r0
 8009538:	b948      	cbnz	r0, 800954e <__lshift+0x3e>
 800953a:	4602      	mov	r2, r0
 800953c:	4b28      	ldr	r3, [pc, #160]	; (80095e0 <__lshift+0xd0>)
 800953e:	4829      	ldr	r0, [pc, #164]	; (80095e4 <__lshift+0xd4>)
 8009540:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009544:	f000 fc90 	bl	8009e68 <__assert_func>
 8009548:	3101      	adds	r1, #1
 800954a:	005b      	lsls	r3, r3, #1
 800954c:	e7ee      	b.n	800952c <__lshift+0x1c>
 800954e:	2300      	movs	r3, #0
 8009550:	f100 0114 	add.w	r1, r0, #20
 8009554:	f100 0210 	add.w	r2, r0, #16
 8009558:	4618      	mov	r0, r3
 800955a:	4553      	cmp	r3, sl
 800955c:	db33      	blt.n	80095c6 <__lshift+0xb6>
 800955e:	6920      	ldr	r0, [r4, #16]
 8009560:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009564:	f104 0314 	add.w	r3, r4, #20
 8009568:	f019 091f 	ands.w	r9, r9, #31
 800956c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009570:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009574:	d02b      	beq.n	80095ce <__lshift+0xbe>
 8009576:	f1c9 0e20 	rsb	lr, r9, #32
 800957a:	468a      	mov	sl, r1
 800957c:	2200      	movs	r2, #0
 800957e:	6818      	ldr	r0, [r3, #0]
 8009580:	fa00 f009 	lsl.w	r0, r0, r9
 8009584:	4302      	orrs	r2, r0
 8009586:	f84a 2b04 	str.w	r2, [sl], #4
 800958a:	f853 2b04 	ldr.w	r2, [r3], #4
 800958e:	459c      	cmp	ip, r3
 8009590:	fa22 f20e 	lsr.w	r2, r2, lr
 8009594:	d8f3      	bhi.n	800957e <__lshift+0x6e>
 8009596:	ebac 0304 	sub.w	r3, ip, r4
 800959a:	3b15      	subs	r3, #21
 800959c:	f023 0303 	bic.w	r3, r3, #3
 80095a0:	3304      	adds	r3, #4
 80095a2:	f104 0015 	add.w	r0, r4, #21
 80095a6:	4584      	cmp	ip, r0
 80095a8:	bf38      	it	cc
 80095aa:	2304      	movcc	r3, #4
 80095ac:	50ca      	str	r2, [r1, r3]
 80095ae:	b10a      	cbz	r2, 80095b4 <__lshift+0xa4>
 80095b0:	f108 0602 	add.w	r6, r8, #2
 80095b4:	3e01      	subs	r6, #1
 80095b6:	4638      	mov	r0, r7
 80095b8:	612e      	str	r6, [r5, #16]
 80095ba:	4621      	mov	r1, r4
 80095bc:	f7ff fd8c 	bl	80090d8 <_Bfree>
 80095c0:	4628      	mov	r0, r5
 80095c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80095ca:	3301      	adds	r3, #1
 80095cc:	e7c5      	b.n	800955a <__lshift+0x4a>
 80095ce:	3904      	subs	r1, #4
 80095d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80095d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80095d8:	459c      	cmp	ip, r3
 80095da:	d8f9      	bhi.n	80095d0 <__lshift+0xc0>
 80095dc:	e7ea      	b.n	80095b4 <__lshift+0xa4>
 80095de:	bf00      	nop
 80095e0:	0800ae8c 	.word	0x0800ae8c
 80095e4:	0800af1c 	.word	0x0800af1c

080095e8 <__mcmp>:
 80095e8:	b530      	push	{r4, r5, lr}
 80095ea:	6902      	ldr	r2, [r0, #16]
 80095ec:	690c      	ldr	r4, [r1, #16]
 80095ee:	1b12      	subs	r2, r2, r4
 80095f0:	d10e      	bne.n	8009610 <__mcmp+0x28>
 80095f2:	f100 0314 	add.w	r3, r0, #20
 80095f6:	3114      	adds	r1, #20
 80095f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80095fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009600:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009604:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009608:	42a5      	cmp	r5, r4
 800960a:	d003      	beq.n	8009614 <__mcmp+0x2c>
 800960c:	d305      	bcc.n	800961a <__mcmp+0x32>
 800960e:	2201      	movs	r2, #1
 8009610:	4610      	mov	r0, r2
 8009612:	bd30      	pop	{r4, r5, pc}
 8009614:	4283      	cmp	r3, r0
 8009616:	d3f3      	bcc.n	8009600 <__mcmp+0x18>
 8009618:	e7fa      	b.n	8009610 <__mcmp+0x28>
 800961a:	f04f 32ff 	mov.w	r2, #4294967295
 800961e:	e7f7      	b.n	8009610 <__mcmp+0x28>

08009620 <__mdiff>:
 8009620:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009624:	460c      	mov	r4, r1
 8009626:	4606      	mov	r6, r0
 8009628:	4611      	mov	r1, r2
 800962a:	4620      	mov	r0, r4
 800962c:	4617      	mov	r7, r2
 800962e:	f7ff ffdb 	bl	80095e8 <__mcmp>
 8009632:	1e05      	subs	r5, r0, #0
 8009634:	d110      	bne.n	8009658 <__mdiff+0x38>
 8009636:	4629      	mov	r1, r5
 8009638:	4630      	mov	r0, r6
 800963a:	f7ff fd0d 	bl	8009058 <_Balloc>
 800963e:	b930      	cbnz	r0, 800964e <__mdiff+0x2e>
 8009640:	4b39      	ldr	r3, [pc, #228]	; (8009728 <__mdiff+0x108>)
 8009642:	4602      	mov	r2, r0
 8009644:	f240 2132 	movw	r1, #562	; 0x232
 8009648:	4838      	ldr	r0, [pc, #224]	; (800972c <__mdiff+0x10c>)
 800964a:	f000 fc0d 	bl	8009e68 <__assert_func>
 800964e:	2301      	movs	r3, #1
 8009650:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009654:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009658:	bfa4      	itt	ge
 800965a:	463b      	movge	r3, r7
 800965c:	4627      	movge	r7, r4
 800965e:	4630      	mov	r0, r6
 8009660:	6879      	ldr	r1, [r7, #4]
 8009662:	bfa6      	itte	ge
 8009664:	461c      	movge	r4, r3
 8009666:	2500      	movge	r5, #0
 8009668:	2501      	movlt	r5, #1
 800966a:	f7ff fcf5 	bl	8009058 <_Balloc>
 800966e:	b920      	cbnz	r0, 800967a <__mdiff+0x5a>
 8009670:	4b2d      	ldr	r3, [pc, #180]	; (8009728 <__mdiff+0x108>)
 8009672:	4602      	mov	r2, r0
 8009674:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009678:	e7e6      	b.n	8009648 <__mdiff+0x28>
 800967a:	693e      	ldr	r6, [r7, #16]
 800967c:	60c5      	str	r5, [r0, #12]
 800967e:	6925      	ldr	r5, [r4, #16]
 8009680:	f107 0114 	add.w	r1, r7, #20
 8009684:	f104 0914 	add.w	r9, r4, #20
 8009688:	f100 0e14 	add.w	lr, r0, #20
 800968c:	f107 0210 	add.w	r2, r7, #16
 8009690:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009694:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009698:	46f2      	mov	sl, lr
 800969a:	2700      	movs	r7, #0
 800969c:	f859 3b04 	ldr.w	r3, [r9], #4
 80096a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80096a4:	fa1f f883 	uxth.w	r8, r3
 80096a8:	fa17 f78b 	uxtah	r7, r7, fp
 80096ac:	0c1b      	lsrs	r3, r3, #16
 80096ae:	eba7 0808 	sub.w	r8, r7, r8
 80096b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80096b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80096ba:	fa1f f888 	uxth.w	r8, r8
 80096be:	141f      	asrs	r7, r3, #16
 80096c0:	454d      	cmp	r5, r9
 80096c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80096c6:	f84a 3b04 	str.w	r3, [sl], #4
 80096ca:	d8e7      	bhi.n	800969c <__mdiff+0x7c>
 80096cc:	1b2b      	subs	r3, r5, r4
 80096ce:	3b15      	subs	r3, #21
 80096d0:	f023 0303 	bic.w	r3, r3, #3
 80096d4:	3304      	adds	r3, #4
 80096d6:	3415      	adds	r4, #21
 80096d8:	42a5      	cmp	r5, r4
 80096da:	bf38      	it	cc
 80096dc:	2304      	movcc	r3, #4
 80096de:	4419      	add	r1, r3
 80096e0:	4473      	add	r3, lr
 80096e2:	469e      	mov	lr, r3
 80096e4:	460d      	mov	r5, r1
 80096e6:	4565      	cmp	r5, ip
 80096e8:	d30e      	bcc.n	8009708 <__mdiff+0xe8>
 80096ea:	f10c 0203 	add.w	r2, ip, #3
 80096ee:	1a52      	subs	r2, r2, r1
 80096f0:	f022 0203 	bic.w	r2, r2, #3
 80096f4:	3903      	subs	r1, #3
 80096f6:	458c      	cmp	ip, r1
 80096f8:	bf38      	it	cc
 80096fa:	2200      	movcc	r2, #0
 80096fc:	441a      	add	r2, r3
 80096fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009702:	b17b      	cbz	r3, 8009724 <__mdiff+0x104>
 8009704:	6106      	str	r6, [r0, #16]
 8009706:	e7a5      	b.n	8009654 <__mdiff+0x34>
 8009708:	f855 8b04 	ldr.w	r8, [r5], #4
 800970c:	fa17 f488 	uxtah	r4, r7, r8
 8009710:	1422      	asrs	r2, r4, #16
 8009712:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009716:	b2a4      	uxth	r4, r4
 8009718:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800971c:	f84e 4b04 	str.w	r4, [lr], #4
 8009720:	1417      	asrs	r7, r2, #16
 8009722:	e7e0      	b.n	80096e6 <__mdiff+0xc6>
 8009724:	3e01      	subs	r6, #1
 8009726:	e7ea      	b.n	80096fe <__mdiff+0xde>
 8009728:	0800ae8c 	.word	0x0800ae8c
 800972c:	0800af1c 	.word	0x0800af1c

08009730 <__ulp>:
 8009730:	b082      	sub	sp, #8
 8009732:	ed8d 0b00 	vstr	d0, [sp]
 8009736:	9b01      	ldr	r3, [sp, #4]
 8009738:	4912      	ldr	r1, [pc, #72]	; (8009784 <__ulp+0x54>)
 800973a:	4019      	ands	r1, r3
 800973c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009740:	2900      	cmp	r1, #0
 8009742:	dd05      	ble.n	8009750 <__ulp+0x20>
 8009744:	2200      	movs	r2, #0
 8009746:	460b      	mov	r3, r1
 8009748:	ec43 2b10 	vmov	d0, r2, r3
 800974c:	b002      	add	sp, #8
 800974e:	4770      	bx	lr
 8009750:	4249      	negs	r1, r1
 8009752:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009756:	ea4f 5021 	mov.w	r0, r1, asr #20
 800975a:	f04f 0200 	mov.w	r2, #0
 800975e:	f04f 0300 	mov.w	r3, #0
 8009762:	da04      	bge.n	800976e <__ulp+0x3e>
 8009764:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009768:	fa41 f300 	asr.w	r3, r1, r0
 800976c:	e7ec      	b.n	8009748 <__ulp+0x18>
 800976e:	f1a0 0114 	sub.w	r1, r0, #20
 8009772:	291e      	cmp	r1, #30
 8009774:	bfda      	itte	le
 8009776:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800977a:	fa20 f101 	lsrle.w	r1, r0, r1
 800977e:	2101      	movgt	r1, #1
 8009780:	460a      	mov	r2, r1
 8009782:	e7e1      	b.n	8009748 <__ulp+0x18>
 8009784:	7ff00000 	.word	0x7ff00000

08009788 <__b2d>:
 8009788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978a:	6905      	ldr	r5, [r0, #16]
 800978c:	f100 0714 	add.w	r7, r0, #20
 8009790:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009794:	1f2e      	subs	r6, r5, #4
 8009796:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800979a:	4620      	mov	r0, r4
 800979c:	f7ff fd52 	bl	8009244 <__hi0bits>
 80097a0:	f1c0 0320 	rsb	r3, r0, #32
 80097a4:	280a      	cmp	r0, #10
 80097a6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009824 <__b2d+0x9c>
 80097aa:	600b      	str	r3, [r1, #0]
 80097ac:	dc14      	bgt.n	80097d8 <__b2d+0x50>
 80097ae:	f1c0 0e0b 	rsb	lr, r0, #11
 80097b2:	fa24 f10e 	lsr.w	r1, r4, lr
 80097b6:	42b7      	cmp	r7, r6
 80097b8:	ea41 030c 	orr.w	r3, r1, ip
 80097bc:	bf34      	ite	cc
 80097be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80097c2:	2100      	movcs	r1, #0
 80097c4:	3015      	adds	r0, #21
 80097c6:	fa04 f000 	lsl.w	r0, r4, r0
 80097ca:	fa21 f10e 	lsr.w	r1, r1, lr
 80097ce:	ea40 0201 	orr.w	r2, r0, r1
 80097d2:	ec43 2b10 	vmov	d0, r2, r3
 80097d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097d8:	42b7      	cmp	r7, r6
 80097da:	bf3a      	itte	cc
 80097dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80097e0:	f1a5 0608 	subcc.w	r6, r5, #8
 80097e4:	2100      	movcs	r1, #0
 80097e6:	380b      	subs	r0, #11
 80097e8:	d017      	beq.n	800981a <__b2d+0x92>
 80097ea:	f1c0 0c20 	rsb	ip, r0, #32
 80097ee:	fa04 f500 	lsl.w	r5, r4, r0
 80097f2:	42be      	cmp	r6, r7
 80097f4:	fa21 f40c 	lsr.w	r4, r1, ip
 80097f8:	ea45 0504 	orr.w	r5, r5, r4
 80097fc:	bf8c      	ite	hi
 80097fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009802:	2400      	movls	r4, #0
 8009804:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009808:	fa01 f000 	lsl.w	r0, r1, r0
 800980c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009810:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009814:	ea40 0204 	orr.w	r2, r0, r4
 8009818:	e7db      	b.n	80097d2 <__b2d+0x4a>
 800981a:	ea44 030c 	orr.w	r3, r4, ip
 800981e:	460a      	mov	r2, r1
 8009820:	e7d7      	b.n	80097d2 <__b2d+0x4a>
 8009822:	bf00      	nop
 8009824:	3ff00000 	.word	0x3ff00000

08009828 <__d2b>:
 8009828:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800982c:	4689      	mov	r9, r1
 800982e:	2101      	movs	r1, #1
 8009830:	ec57 6b10 	vmov	r6, r7, d0
 8009834:	4690      	mov	r8, r2
 8009836:	f7ff fc0f 	bl	8009058 <_Balloc>
 800983a:	4604      	mov	r4, r0
 800983c:	b930      	cbnz	r0, 800984c <__d2b+0x24>
 800983e:	4602      	mov	r2, r0
 8009840:	4b25      	ldr	r3, [pc, #148]	; (80098d8 <__d2b+0xb0>)
 8009842:	4826      	ldr	r0, [pc, #152]	; (80098dc <__d2b+0xb4>)
 8009844:	f240 310a 	movw	r1, #778	; 0x30a
 8009848:	f000 fb0e 	bl	8009e68 <__assert_func>
 800984c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009850:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009854:	bb35      	cbnz	r5, 80098a4 <__d2b+0x7c>
 8009856:	2e00      	cmp	r6, #0
 8009858:	9301      	str	r3, [sp, #4]
 800985a:	d028      	beq.n	80098ae <__d2b+0x86>
 800985c:	4668      	mov	r0, sp
 800985e:	9600      	str	r6, [sp, #0]
 8009860:	f7ff fd10 	bl	8009284 <__lo0bits>
 8009864:	9900      	ldr	r1, [sp, #0]
 8009866:	b300      	cbz	r0, 80098aa <__d2b+0x82>
 8009868:	9a01      	ldr	r2, [sp, #4]
 800986a:	f1c0 0320 	rsb	r3, r0, #32
 800986e:	fa02 f303 	lsl.w	r3, r2, r3
 8009872:	430b      	orrs	r3, r1
 8009874:	40c2      	lsrs	r2, r0
 8009876:	6163      	str	r3, [r4, #20]
 8009878:	9201      	str	r2, [sp, #4]
 800987a:	9b01      	ldr	r3, [sp, #4]
 800987c:	61a3      	str	r3, [r4, #24]
 800987e:	2b00      	cmp	r3, #0
 8009880:	bf14      	ite	ne
 8009882:	2202      	movne	r2, #2
 8009884:	2201      	moveq	r2, #1
 8009886:	6122      	str	r2, [r4, #16]
 8009888:	b1d5      	cbz	r5, 80098c0 <__d2b+0x98>
 800988a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800988e:	4405      	add	r5, r0
 8009890:	f8c9 5000 	str.w	r5, [r9]
 8009894:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009898:	f8c8 0000 	str.w	r0, [r8]
 800989c:	4620      	mov	r0, r4
 800989e:	b003      	add	sp, #12
 80098a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80098a8:	e7d5      	b.n	8009856 <__d2b+0x2e>
 80098aa:	6161      	str	r1, [r4, #20]
 80098ac:	e7e5      	b.n	800987a <__d2b+0x52>
 80098ae:	a801      	add	r0, sp, #4
 80098b0:	f7ff fce8 	bl	8009284 <__lo0bits>
 80098b4:	9b01      	ldr	r3, [sp, #4]
 80098b6:	6163      	str	r3, [r4, #20]
 80098b8:	2201      	movs	r2, #1
 80098ba:	6122      	str	r2, [r4, #16]
 80098bc:	3020      	adds	r0, #32
 80098be:	e7e3      	b.n	8009888 <__d2b+0x60>
 80098c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80098c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80098c8:	f8c9 0000 	str.w	r0, [r9]
 80098cc:	6918      	ldr	r0, [r3, #16]
 80098ce:	f7ff fcb9 	bl	8009244 <__hi0bits>
 80098d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80098d6:	e7df      	b.n	8009898 <__d2b+0x70>
 80098d8:	0800ae8c 	.word	0x0800ae8c
 80098dc:	0800af1c 	.word	0x0800af1c

080098e0 <__ratio>:
 80098e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e4:	4688      	mov	r8, r1
 80098e6:	4669      	mov	r1, sp
 80098e8:	4681      	mov	r9, r0
 80098ea:	f7ff ff4d 	bl	8009788 <__b2d>
 80098ee:	a901      	add	r1, sp, #4
 80098f0:	4640      	mov	r0, r8
 80098f2:	ec55 4b10 	vmov	r4, r5, d0
 80098f6:	f7ff ff47 	bl	8009788 <__b2d>
 80098fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80098fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009902:	eba3 0c02 	sub.w	ip, r3, r2
 8009906:	e9dd 3200 	ldrd	r3, r2, [sp]
 800990a:	1a9b      	subs	r3, r3, r2
 800990c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009910:	ec51 0b10 	vmov	r0, r1, d0
 8009914:	2b00      	cmp	r3, #0
 8009916:	bfd6      	itet	le
 8009918:	460a      	movle	r2, r1
 800991a:	462a      	movgt	r2, r5
 800991c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009920:	468b      	mov	fp, r1
 8009922:	462f      	mov	r7, r5
 8009924:	bfd4      	ite	le
 8009926:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800992a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800992e:	4620      	mov	r0, r4
 8009930:	ee10 2a10 	vmov	r2, s0
 8009934:	465b      	mov	r3, fp
 8009936:	4639      	mov	r1, r7
 8009938:	f7f6 ff98 	bl	800086c <__aeabi_ddiv>
 800993c:	ec41 0b10 	vmov	d0, r0, r1
 8009940:	b003      	add	sp, #12
 8009942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009946 <__copybits>:
 8009946:	3901      	subs	r1, #1
 8009948:	b570      	push	{r4, r5, r6, lr}
 800994a:	1149      	asrs	r1, r1, #5
 800994c:	6914      	ldr	r4, [r2, #16]
 800994e:	3101      	adds	r1, #1
 8009950:	f102 0314 	add.w	r3, r2, #20
 8009954:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009958:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800995c:	1f05      	subs	r5, r0, #4
 800995e:	42a3      	cmp	r3, r4
 8009960:	d30c      	bcc.n	800997c <__copybits+0x36>
 8009962:	1aa3      	subs	r3, r4, r2
 8009964:	3b11      	subs	r3, #17
 8009966:	f023 0303 	bic.w	r3, r3, #3
 800996a:	3211      	adds	r2, #17
 800996c:	42a2      	cmp	r2, r4
 800996e:	bf88      	it	hi
 8009970:	2300      	movhi	r3, #0
 8009972:	4418      	add	r0, r3
 8009974:	2300      	movs	r3, #0
 8009976:	4288      	cmp	r0, r1
 8009978:	d305      	bcc.n	8009986 <__copybits+0x40>
 800997a:	bd70      	pop	{r4, r5, r6, pc}
 800997c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009980:	f845 6f04 	str.w	r6, [r5, #4]!
 8009984:	e7eb      	b.n	800995e <__copybits+0x18>
 8009986:	f840 3b04 	str.w	r3, [r0], #4
 800998a:	e7f4      	b.n	8009976 <__copybits+0x30>

0800998c <__any_on>:
 800998c:	f100 0214 	add.w	r2, r0, #20
 8009990:	6900      	ldr	r0, [r0, #16]
 8009992:	114b      	asrs	r3, r1, #5
 8009994:	4298      	cmp	r0, r3
 8009996:	b510      	push	{r4, lr}
 8009998:	db11      	blt.n	80099be <__any_on+0x32>
 800999a:	dd0a      	ble.n	80099b2 <__any_on+0x26>
 800999c:	f011 011f 	ands.w	r1, r1, #31
 80099a0:	d007      	beq.n	80099b2 <__any_on+0x26>
 80099a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80099a6:	fa24 f001 	lsr.w	r0, r4, r1
 80099aa:	fa00 f101 	lsl.w	r1, r0, r1
 80099ae:	428c      	cmp	r4, r1
 80099b0:	d10b      	bne.n	80099ca <__any_on+0x3e>
 80099b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d803      	bhi.n	80099c2 <__any_on+0x36>
 80099ba:	2000      	movs	r0, #0
 80099bc:	bd10      	pop	{r4, pc}
 80099be:	4603      	mov	r3, r0
 80099c0:	e7f7      	b.n	80099b2 <__any_on+0x26>
 80099c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80099c6:	2900      	cmp	r1, #0
 80099c8:	d0f5      	beq.n	80099b6 <__any_on+0x2a>
 80099ca:	2001      	movs	r0, #1
 80099cc:	e7f6      	b.n	80099bc <__any_on+0x30>

080099ce <_calloc_r>:
 80099ce:	b513      	push	{r0, r1, r4, lr}
 80099d0:	434a      	muls	r2, r1
 80099d2:	4611      	mov	r1, r2
 80099d4:	9201      	str	r2, [sp, #4]
 80099d6:	f000 f859 	bl	8009a8c <_malloc_r>
 80099da:	4604      	mov	r4, r0
 80099dc:	b118      	cbz	r0, 80099e6 <_calloc_r+0x18>
 80099de:	9a01      	ldr	r2, [sp, #4]
 80099e0:	2100      	movs	r1, #0
 80099e2:	f7fc fbc9 	bl	8006178 <memset>
 80099e6:	4620      	mov	r0, r4
 80099e8:	b002      	add	sp, #8
 80099ea:	bd10      	pop	{r4, pc}

080099ec <_free_r>:
 80099ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099ee:	2900      	cmp	r1, #0
 80099f0:	d048      	beq.n	8009a84 <_free_r+0x98>
 80099f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099f6:	9001      	str	r0, [sp, #4]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	f1a1 0404 	sub.w	r4, r1, #4
 80099fe:	bfb8      	it	lt
 8009a00:	18e4      	addlt	r4, r4, r3
 8009a02:	f000 fa7b 	bl	8009efc <__malloc_lock>
 8009a06:	4a20      	ldr	r2, [pc, #128]	; (8009a88 <_free_r+0x9c>)
 8009a08:	9801      	ldr	r0, [sp, #4]
 8009a0a:	6813      	ldr	r3, [r2, #0]
 8009a0c:	4615      	mov	r5, r2
 8009a0e:	b933      	cbnz	r3, 8009a1e <_free_r+0x32>
 8009a10:	6063      	str	r3, [r4, #4]
 8009a12:	6014      	str	r4, [r2, #0]
 8009a14:	b003      	add	sp, #12
 8009a16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a1a:	f000 ba75 	b.w	8009f08 <__malloc_unlock>
 8009a1e:	42a3      	cmp	r3, r4
 8009a20:	d90b      	bls.n	8009a3a <_free_r+0x4e>
 8009a22:	6821      	ldr	r1, [r4, #0]
 8009a24:	1862      	adds	r2, r4, r1
 8009a26:	4293      	cmp	r3, r2
 8009a28:	bf04      	itt	eq
 8009a2a:	681a      	ldreq	r2, [r3, #0]
 8009a2c:	685b      	ldreq	r3, [r3, #4]
 8009a2e:	6063      	str	r3, [r4, #4]
 8009a30:	bf04      	itt	eq
 8009a32:	1852      	addeq	r2, r2, r1
 8009a34:	6022      	streq	r2, [r4, #0]
 8009a36:	602c      	str	r4, [r5, #0]
 8009a38:	e7ec      	b.n	8009a14 <_free_r+0x28>
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	b10b      	cbz	r3, 8009a44 <_free_r+0x58>
 8009a40:	42a3      	cmp	r3, r4
 8009a42:	d9fa      	bls.n	8009a3a <_free_r+0x4e>
 8009a44:	6811      	ldr	r1, [r2, #0]
 8009a46:	1855      	adds	r5, r2, r1
 8009a48:	42a5      	cmp	r5, r4
 8009a4a:	d10b      	bne.n	8009a64 <_free_r+0x78>
 8009a4c:	6824      	ldr	r4, [r4, #0]
 8009a4e:	4421      	add	r1, r4
 8009a50:	1854      	adds	r4, r2, r1
 8009a52:	42a3      	cmp	r3, r4
 8009a54:	6011      	str	r1, [r2, #0]
 8009a56:	d1dd      	bne.n	8009a14 <_free_r+0x28>
 8009a58:	681c      	ldr	r4, [r3, #0]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	6053      	str	r3, [r2, #4]
 8009a5e:	4421      	add	r1, r4
 8009a60:	6011      	str	r1, [r2, #0]
 8009a62:	e7d7      	b.n	8009a14 <_free_r+0x28>
 8009a64:	d902      	bls.n	8009a6c <_free_r+0x80>
 8009a66:	230c      	movs	r3, #12
 8009a68:	6003      	str	r3, [r0, #0]
 8009a6a:	e7d3      	b.n	8009a14 <_free_r+0x28>
 8009a6c:	6825      	ldr	r5, [r4, #0]
 8009a6e:	1961      	adds	r1, r4, r5
 8009a70:	428b      	cmp	r3, r1
 8009a72:	bf04      	itt	eq
 8009a74:	6819      	ldreq	r1, [r3, #0]
 8009a76:	685b      	ldreq	r3, [r3, #4]
 8009a78:	6063      	str	r3, [r4, #4]
 8009a7a:	bf04      	itt	eq
 8009a7c:	1949      	addeq	r1, r1, r5
 8009a7e:	6021      	streq	r1, [r4, #0]
 8009a80:	6054      	str	r4, [r2, #4]
 8009a82:	e7c7      	b.n	8009a14 <_free_r+0x28>
 8009a84:	b003      	add	sp, #12
 8009a86:	bd30      	pop	{r4, r5, pc}
 8009a88:	2000021c 	.word	0x2000021c

08009a8c <_malloc_r>:
 8009a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a8e:	1ccd      	adds	r5, r1, #3
 8009a90:	f025 0503 	bic.w	r5, r5, #3
 8009a94:	3508      	adds	r5, #8
 8009a96:	2d0c      	cmp	r5, #12
 8009a98:	bf38      	it	cc
 8009a9a:	250c      	movcc	r5, #12
 8009a9c:	2d00      	cmp	r5, #0
 8009a9e:	4606      	mov	r6, r0
 8009aa0:	db01      	blt.n	8009aa6 <_malloc_r+0x1a>
 8009aa2:	42a9      	cmp	r1, r5
 8009aa4:	d903      	bls.n	8009aae <_malloc_r+0x22>
 8009aa6:	230c      	movs	r3, #12
 8009aa8:	6033      	str	r3, [r6, #0]
 8009aaa:	2000      	movs	r0, #0
 8009aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009aae:	f000 fa25 	bl	8009efc <__malloc_lock>
 8009ab2:	4921      	ldr	r1, [pc, #132]	; (8009b38 <_malloc_r+0xac>)
 8009ab4:	680a      	ldr	r2, [r1, #0]
 8009ab6:	4614      	mov	r4, r2
 8009ab8:	b99c      	cbnz	r4, 8009ae2 <_malloc_r+0x56>
 8009aba:	4f20      	ldr	r7, [pc, #128]	; (8009b3c <_malloc_r+0xb0>)
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	b923      	cbnz	r3, 8009aca <_malloc_r+0x3e>
 8009ac0:	4621      	mov	r1, r4
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	f000 f9a0 	bl	8009e08 <_sbrk_r>
 8009ac8:	6038      	str	r0, [r7, #0]
 8009aca:	4629      	mov	r1, r5
 8009acc:	4630      	mov	r0, r6
 8009ace:	f000 f99b 	bl	8009e08 <_sbrk_r>
 8009ad2:	1c43      	adds	r3, r0, #1
 8009ad4:	d123      	bne.n	8009b1e <_malloc_r+0x92>
 8009ad6:	230c      	movs	r3, #12
 8009ad8:	6033      	str	r3, [r6, #0]
 8009ada:	4630      	mov	r0, r6
 8009adc:	f000 fa14 	bl	8009f08 <__malloc_unlock>
 8009ae0:	e7e3      	b.n	8009aaa <_malloc_r+0x1e>
 8009ae2:	6823      	ldr	r3, [r4, #0]
 8009ae4:	1b5b      	subs	r3, r3, r5
 8009ae6:	d417      	bmi.n	8009b18 <_malloc_r+0x8c>
 8009ae8:	2b0b      	cmp	r3, #11
 8009aea:	d903      	bls.n	8009af4 <_malloc_r+0x68>
 8009aec:	6023      	str	r3, [r4, #0]
 8009aee:	441c      	add	r4, r3
 8009af0:	6025      	str	r5, [r4, #0]
 8009af2:	e004      	b.n	8009afe <_malloc_r+0x72>
 8009af4:	6863      	ldr	r3, [r4, #4]
 8009af6:	42a2      	cmp	r2, r4
 8009af8:	bf0c      	ite	eq
 8009afa:	600b      	streq	r3, [r1, #0]
 8009afc:	6053      	strne	r3, [r2, #4]
 8009afe:	4630      	mov	r0, r6
 8009b00:	f000 fa02 	bl	8009f08 <__malloc_unlock>
 8009b04:	f104 000b 	add.w	r0, r4, #11
 8009b08:	1d23      	adds	r3, r4, #4
 8009b0a:	f020 0007 	bic.w	r0, r0, #7
 8009b0e:	1ac2      	subs	r2, r0, r3
 8009b10:	d0cc      	beq.n	8009aac <_malloc_r+0x20>
 8009b12:	1a1b      	subs	r3, r3, r0
 8009b14:	50a3      	str	r3, [r4, r2]
 8009b16:	e7c9      	b.n	8009aac <_malloc_r+0x20>
 8009b18:	4622      	mov	r2, r4
 8009b1a:	6864      	ldr	r4, [r4, #4]
 8009b1c:	e7cc      	b.n	8009ab8 <_malloc_r+0x2c>
 8009b1e:	1cc4      	adds	r4, r0, #3
 8009b20:	f024 0403 	bic.w	r4, r4, #3
 8009b24:	42a0      	cmp	r0, r4
 8009b26:	d0e3      	beq.n	8009af0 <_malloc_r+0x64>
 8009b28:	1a21      	subs	r1, r4, r0
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	f000 f96c 	bl	8009e08 <_sbrk_r>
 8009b30:	3001      	adds	r0, #1
 8009b32:	d1dd      	bne.n	8009af0 <_malloc_r+0x64>
 8009b34:	e7cf      	b.n	8009ad6 <_malloc_r+0x4a>
 8009b36:	bf00      	nop
 8009b38:	2000021c 	.word	0x2000021c
 8009b3c:	20000220 	.word	0x20000220

08009b40 <__ssputs_r>:
 8009b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b44:	688e      	ldr	r6, [r1, #8]
 8009b46:	429e      	cmp	r6, r3
 8009b48:	4682      	mov	sl, r0
 8009b4a:	460c      	mov	r4, r1
 8009b4c:	4690      	mov	r8, r2
 8009b4e:	461f      	mov	r7, r3
 8009b50:	d838      	bhi.n	8009bc4 <__ssputs_r+0x84>
 8009b52:	898a      	ldrh	r2, [r1, #12]
 8009b54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b58:	d032      	beq.n	8009bc0 <__ssputs_r+0x80>
 8009b5a:	6825      	ldr	r5, [r4, #0]
 8009b5c:	6909      	ldr	r1, [r1, #16]
 8009b5e:	eba5 0901 	sub.w	r9, r5, r1
 8009b62:	6965      	ldr	r5, [r4, #20]
 8009b64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	444b      	add	r3, r9
 8009b70:	106d      	asrs	r5, r5, #1
 8009b72:	429d      	cmp	r5, r3
 8009b74:	bf38      	it	cc
 8009b76:	461d      	movcc	r5, r3
 8009b78:	0553      	lsls	r3, r2, #21
 8009b7a:	d531      	bpl.n	8009be0 <__ssputs_r+0xa0>
 8009b7c:	4629      	mov	r1, r5
 8009b7e:	f7ff ff85 	bl	8009a8c <_malloc_r>
 8009b82:	4606      	mov	r6, r0
 8009b84:	b950      	cbnz	r0, 8009b9c <__ssputs_r+0x5c>
 8009b86:	230c      	movs	r3, #12
 8009b88:	f8ca 3000 	str.w	r3, [sl]
 8009b8c:	89a3      	ldrh	r3, [r4, #12]
 8009b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b92:	81a3      	strh	r3, [r4, #12]
 8009b94:	f04f 30ff 	mov.w	r0, #4294967295
 8009b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b9c:	6921      	ldr	r1, [r4, #16]
 8009b9e:	464a      	mov	r2, r9
 8009ba0:	f7ff fa4c 	bl	800903c <memcpy>
 8009ba4:	89a3      	ldrh	r3, [r4, #12]
 8009ba6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bae:	81a3      	strh	r3, [r4, #12]
 8009bb0:	6126      	str	r6, [r4, #16]
 8009bb2:	6165      	str	r5, [r4, #20]
 8009bb4:	444e      	add	r6, r9
 8009bb6:	eba5 0509 	sub.w	r5, r5, r9
 8009bba:	6026      	str	r6, [r4, #0]
 8009bbc:	60a5      	str	r5, [r4, #8]
 8009bbe:	463e      	mov	r6, r7
 8009bc0:	42be      	cmp	r6, r7
 8009bc2:	d900      	bls.n	8009bc6 <__ssputs_r+0x86>
 8009bc4:	463e      	mov	r6, r7
 8009bc6:	4632      	mov	r2, r6
 8009bc8:	6820      	ldr	r0, [r4, #0]
 8009bca:	4641      	mov	r1, r8
 8009bcc:	f000 f97c 	bl	8009ec8 <memmove>
 8009bd0:	68a3      	ldr	r3, [r4, #8]
 8009bd2:	6822      	ldr	r2, [r4, #0]
 8009bd4:	1b9b      	subs	r3, r3, r6
 8009bd6:	4432      	add	r2, r6
 8009bd8:	60a3      	str	r3, [r4, #8]
 8009bda:	6022      	str	r2, [r4, #0]
 8009bdc:	2000      	movs	r0, #0
 8009bde:	e7db      	b.n	8009b98 <__ssputs_r+0x58>
 8009be0:	462a      	mov	r2, r5
 8009be2:	f000 f997 	bl	8009f14 <_realloc_r>
 8009be6:	4606      	mov	r6, r0
 8009be8:	2800      	cmp	r0, #0
 8009bea:	d1e1      	bne.n	8009bb0 <__ssputs_r+0x70>
 8009bec:	6921      	ldr	r1, [r4, #16]
 8009bee:	4650      	mov	r0, sl
 8009bf0:	f7ff fefc 	bl	80099ec <_free_r>
 8009bf4:	e7c7      	b.n	8009b86 <__ssputs_r+0x46>
	...

08009bf8 <_svfiprintf_r>:
 8009bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfc:	4698      	mov	r8, r3
 8009bfe:	898b      	ldrh	r3, [r1, #12]
 8009c00:	061b      	lsls	r3, r3, #24
 8009c02:	b09d      	sub	sp, #116	; 0x74
 8009c04:	4607      	mov	r7, r0
 8009c06:	460d      	mov	r5, r1
 8009c08:	4614      	mov	r4, r2
 8009c0a:	d50e      	bpl.n	8009c2a <_svfiprintf_r+0x32>
 8009c0c:	690b      	ldr	r3, [r1, #16]
 8009c0e:	b963      	cbnz	r3, 8009c2a <_svfiprintf_r+0x32>
 8009c10:	2140      	movs	r1, #64	; 0x40
 8009c12:	f7ff ff3b 	bl	8009a8c <_malloc_r>
 8009c16:	6028      	str	r0, [r5, #0]
 8009c18:	6128      	str	r0, [r5, #16]
 8009c1a:	b920      	cbnz	r0, 8009c26 <_svfiprintf_r+0x2e>
 8009c1c:	230c      	movs	r3, #12
 8009c1e:	603b      	str	r3, [r7, #0]
 8009c20:	f04f 30ff 	mov.w	r0, #4294967295
 8009c24:	e0d1      	b.n	8009dca <_svfiprintf_r+0x1d2>
 8009c26:	2340      	movs	r3, #64	; 0x40
 8009c28:	616b      	str	r3, [r5, #20]
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c2e:	2320      	movs	r3, #32
 8009c30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c34:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c38:	2330      	movs	r3, #48	; 0x30
 8009c3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009de4 <_svfiprintf_r+0x1ec>
 8009c3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c42:	f04f 0901 	mov.w	r9, #1
 8009c46:	4623      	mov	r3, r4
 8009c48:	469a      	mov	sl, r3
 8009c4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c4e:	b10a      	cbz	r2, 8009c54 <_svfiprintf_r+0x5c>
 8009c50:	2a25      	cmp	r2, #37	; 0x25
 8009c52:	d1f9      	bne.n	8009c48 <_svfiprintf_r+0x50>
 8009c54:	ebba 0b04 	subs.w	fp, sl, r4
 8009c58:	d00b      	beq.n	8009c72 <_svfiprintf_r+0x7a>
 8009c5a:	465b      	mov	r3, fp
 8009c5c:	4622      	mov	r2, r4
 8009c5e:	4629      	mov	r1, r5
 8009c60:	4638      	mov	r0, r7
 8009c62:	f7ff ff6d 	bl	8009b40 <__ssputs_r>
 8009c66:	3001      	adds	r0, #1
 8009c68:	f000 80aa 	beq.w	8009dc0 <_svfiprintf_r+0x1c8>
 8009c6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c6e:	445a      	add	r2, fp
 8009c70:	9209      	str	r2, [sp, #36]	; 0x24
 8009c72:	f89a 3000 	ldrb.w	r3, [sl]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	f000 80a2 	beq.w	8009dc0 <_svfiprintf_r+0x1c8>
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c86:	f10a 0a01 	add.w	sl, sl, #1
 8009c8a:	9304      	str	r3, [sp, #16]
 8009c8c:	9307      	str	r3, [sp, #28]
 8009c8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c92:	931a      	str	r3, [sp, #104]	; 0x68
 8009c94:	4654      	mov	r4, sl
 8009c96:	2205      	movs	r2, #5
 8009c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c9c:	4851      	ldr	r0, [pc, #324]	; (8009de4 <_svfiprintf_r+0x1ec>)
 8009c9e:	f7f6 faaf 	bl	8000200 <memchr>
 8009ca2:	9a04      	ldr	r2, [sp, #16]
 8009ca4:	b9d8      	cbnz	r0, 8009cde <_svfiprintf_r+0xe6>
 8009ca6:	06d0      	lsls	r0, r2, #27
 8009ca8:	bf44      	itt	mi
 8009caa:	2320      	movmi	r3, #32
 8009cac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cb0:	0711      	lsls	r1, r2, #28
 8009cb2:	bf44      	itt	mi
 8009cb4:	232b      	movmi	r3, #43	; 0x2b
 8009cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cba:	f89a 3000 	ldrb.w	r3, [sl]
 8009cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8009cc0:	d015      	beq.n	8009cee <_svfiprintf_r+0xf6>
 8009cc2:	9a07      	ldr	r2, [sp, #28]
 8009cc4:	4654      	mov	r4, sl
 8009cc6:	2000      	movs	r0, #0
 8009cc8:	f04f 0c0a 	mov.w	ip, #10
 8009ccc:	4621      	mov	r1, r4
 8009cce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cd2:	3b30      	subs	r3, #48	; 0x30
 8009cd4:	2b09      	cmp	r3, #9
 8009cd6:	d94e      	bls.n	8009d76 <_svfiprintf_r+0x17e>
 8009cd8:	b1b0      	cbz	r0, 8009d08 <_svfiprintf_r+0x110>
 8009cda:	9207      	str	r2, [sp, #28]
 8009cdc:	e014      	b.n	8009d08 <_svfiprintf_r+0x110>
 8009cde:	eba0 0308 	sub.w	r3, r0, r8
 8009ce2:	fa09 f303 	lsl.w	r3, r9, r3
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	9304      	str	r3, [sp, #16]
 8009cea:	46a2      	mov	sl, r4
 8009cec:	e7d2      	b.n	8009c94 <_svfiprintf_r+0x9c>
 8009cee:	9b03      	ldr	r3, [sp, #12]
 8009cf0:	1d19      	adds	r1, r3, #4
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	9103      	str	r1, [sp, #12]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	bfbb      	ittet	lt
 8009cfa:	425b      	neglt	r3, r3
 8009cfc:	f042 0202 	orrlt.w	r2, r2, #2
 8009d00:	9307      	strge	r3, [sp, #28]
 8009d02:	9307      	strlt	r3, [sp, #28]
 8009d04:	bfb8      	it	lt
 8009d06:	9204      	strlt	r2, [sp, #16]
 8009d08:	7823      	ldrb	r3, [r4, #0]
 8009d0a:	2b2e      	cmp	r3, #46	; 0x2e
 8009d0c:	d10c      	bne.n	8009d28 <_svfiprintf_r+0x130>
 8009d0e:	7863      	ldrb	r3, [r4, #1]
 8009d10:	2b2a      	cmp	r3, #42	; 0x2a
 8009d12:	d135      	bne.n	8009d80 <_svfiprintf_r+0x188>
 8009d14:	9b03      	ldr	r3, [sp, #12]
 8009d16:	1d1a      	adds	r2, r3, #4
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	9203      	str	r2, [sp, #12]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	bfb8      	it	lt
 8009d20:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d24:	3402      	adds	r4, #2
 8009d26:	9305      	str	r3, [sp, #20]
 8009d28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009df4 <_svfiprintf_r+0x1fc>
 8009d2c:	7821      	ldrb	r1, [r4, #0]
 8009d2e:	2203      	movs	r2, #3
 8009d30:	4650      	mov	r0, sl
 8009d32:	f7f6 fa65 	bl	8000200 <memchr>
 8009d36:	b140      	cbz	r0, 8009d4a <_svfiprintf_r+0x152>
 8009d38:	2340      	movs	r3, #64	; 0x40
 8009d3a:	eba0 000a 	sub.w	r0, r0, sl
 8009d3e:	fa03 f000 	lsl.w	r0, r3, r0
 8009d42:	9b04      	ldr	r3, [sp, #16]
 8009d44:	4303      	orrs	r3, r0
 8009d46:	3401      	adds	r4, #1
 8009d48:	9304      	str	r3, [sp, #16]
 8009d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d4e:	4826      	ldr	r0, [pc, #152]	; (8009de8 <_svfiprintf_r+0x1f0>)
 8009d50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d54:	2206      	movs	r2, #6
 8009d56:	f7f6 fa53 	bl	8000200 <memchr>
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	d038      	beq.n	8009dd0 <_svfiprintf_r+0x1d8>
 8009d5e:	4b23      	ldr	r3, [pc, #140]	; (8009dec <_svfiprintf_r+0x1f4>)
 8009d60:	bb1b      	cbnz	r3, 8009daa <_svfiprintf_r+0x1b2>
 8009d62:	9b03      	ldr	r3, [sp, #12]
 8009d64:	3307      	adds	r3, #7
 8009d66:	f023 0307 	bic.w	r3, r3, #7
 8009d6a:	3308      	adds	r3, #8
 8009d6c:	9303      	str	r3, [sp, #12]
 8009d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d70:	4433      	add	r3, r6
 8009d72:	9309      	str	r3, [sp, #36]	; 0x24
 8009d74:	e767      	b.n	8009c46 <_svfiprintf_r+0x4e>
 8009d76:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d7a:	460c      	mov	r4, r1
 8009d7c:	2001      	movs	r0, #1
 8009d7e:	e7a5      	b.n	8009ccc <_svfiprintf_r+0xd4>
 8009d80:	2300      	movs	r3, #0
 8009d82:	3401      	adds	r4, #1
 8009d84:	9305      	str	r3, [sp, #20]
 8009d86:	4619      	mov	r1, r3
 8009d88:	f04f 0c0a 	mov.w	ip, #10
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d92:	3a30      	subs	r2, #48	; 0x30
 8009d94:	2a09      	cmp	r2, #9
 8009d96:	d903      	bls.n	8009da0 <_svfiprintf_r+0x1a8>
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d0c5      	beq.n	8009d28 <_svfiprintf_r+0x130>
 8009d9c:	9105      	str	r1, [sp, #20]
 8009d9e:	e7c3      	b.n	8009d28 <_svfiprintf_r+0x130>
 8009da0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009da4:	4604      	mov	r4, r0
 8009da6:	2301      	movs	r3, #1
 8009da8:	e7f0      	b.n	8009d8c <_svfiprintf_r+0x194>
 8009daa:	ab03      	add	r3, sp, #12
 8009dac:	9300      	str	r3, [sp, #0]
 8009dae:	462a      	mov	r2, r5
 8009db0:	4b0f      	ldr	r3, [pc, #60]	; (8009df0 <_svfiprintf_r+0x1f8>)
 8009db2:	a904      	add	r1, sp, #16
 8009db4:	4638      	mov	r0, r7
 8009db6:	f7fc fa87 	bl	80062c8 <_printf_float>
 8009dba:	1c42      	adds	r2, r0, #1
 8009dbc:	4606      	mov	r6, r0
 8009dbe:	d1d6      	bne.n	8009d6e <_svfiprintf_r+0x176>
 8009dc0:	89ab      	ldrh	r3, [r5, #12]
 8009dc2:	065b      	lsls	r3, r3, #25
 8009dc4:	f53f af2c 	bmi.w	8009c20 <_svfiprintf_r+0x28>
 8009dc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dca:	b01d      	add	sp, #116	; 0x74
 8009dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dd0:	ab03      	add	r3, sp, #12
 8009dd2:	9300      	str	r3, [sp, #0]
 8009dd4:	462a      	mov	r2, r5
 8009dd6:	4b06      	ldr	r3, [pc, #24]	; (8009df0 <_svfiprintf_r+0x1f8>)
 8009dd8:	a904      	add	r1, sp, #16
 8009dda:	4638      	mov	r0, r7
 8009ddc:	f7fc fd18 	bl	8006810 <_printf_i>
 8009de0:	e7eb      	b.n	8009dba <_svfiprintf_r+0x1c2>
 8009de2:	bf00      	nop
 8009de4:	0800b07c 	.word	0x0800b07c
 8009de8:	0800b086 	.word	0x0800b086
 8009dec:	080062c9 	.word	0x080062c9
 8009df0:	08009b41 	.word	0x08009b41
 8009df4:	0800b082 	.word	0x0800b082

08009df8 <nan>:
 8009df8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009e00 <nan+0x8>
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	00000000 	.word	0x00000000
 8009e04:	7ff80000 	.word	0x7ff80000

08009e08 <_sbrk_r>:
 8009e08:	b538      	push	{r3, r4, r5, lr}
 8009e0a:	4d06      	ldr	r5, [pc, #24]	; (8009e24 <_sbrk_r+0x1c>)
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	4604      	mov	r4, r0
 8009e10:	4608      	mov	r0, r1
 8009e12:	602b      	str	r3, [r5, #0]
 8009e14:	f7f8 f8ea 	bl	8001fec <_sbrk>
 8009e18:	1c43      	adds	r3, r0, #1
 8009e1a:	d102      	bne.n	8009e22 <_sbrk_r+0x1a>
 8009e1c:	682b      	ldr	r3, [r5, #0]
 8009e1e:	b103      	cbz	r3, 8009e22 <_sbrk_r+0x1a>
 8009e20:	6023      	str	r3, [r4, #0]
 8009e22:	bd38      	pop	{r3, r4, r5, pc}
 8009e24:	200004d0 	.word	0x200004d0

08009e28 <strncmp>:
 8009e28:	b510      	push	{r4, lr}
 8009e2a:	b16a      	cbz	r2, 8009e48 <strncmp+0x20>
 8009e2c:	3901      	subs	r1, #1
 8009e2e:	1884      	adds	r4, r0, r2
 8009e30:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009e34:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d103      	bne.n	8009e44 <strncmp+0x1c>
 8009e3c:	42a0      	cmp	r0, r4
 8009e3e:	d001      	beq.n	8009e44 <strncmp+0x1c>
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1f5      	bne.n	8009e30 <strncmp+0x8>
 8009e44:	1a98      	subs	r0, r3, r2
 8009e46:	bd10      	pop	{r4, pc}
 8009e48:	4610      	mov	r0, r2
 8009e4a:	e7fc      	b.n	8009e46 <strncmp+0x1e>

08009e4c <__ascii_wctomb>:
 8009e4c:	b149      	cbz	r1, 8009e62 <__ascii_wctomb+0x16>
 8009e4e:	2aff      	cmp	r2, #255	; 0xff
 8009e50:	bf85      	ittet	hi
 8009e52:	238a      	movhi	r3, #138	; 0x8a
 8009e54:	6003      	strhi	r3, [r0, #0]
 8009e56:	700a      	strbls	r2, [r1, #0]
 8009e58:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e5c:	bf98      	it	ls
 8009e5e:	2001      	movls	r0, #1
 8009e60:	4770      	bx	lr
 8009e62:	4608      	mov	r0, r1
 8009e64:	4770      	bx	lr
	...

08009e68 <__assert_func>:
 8009e68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e6a:	4614      	mov	r4, r2
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	4b09      	ldr	r3, [pc, #36]	; (8009e94 <__assert_func+0x2c>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4605      	mov	r5, r0
 8009e74:	68d8      	ldr	r0, [r3, #12]
 8009e76:	b14c      	cbz	r4, 8009e8c <__assert_func+0x24>
 8009e78:	4b07      	ldr	r3, [pc, #28]	; (8009e98 <__assert_func+0x30>)
 8009e7a:	9100      	str	r1, [sp, #0]
 8009e7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e80:	4906      	ldr	r1, [pc, #24]	; (8009e9c <__assert_func+0x34>)
 8009e82:	462b      	mov	r3, r5
 8009e84:	f000 f80e 	bl	8009ea4 <fiprintf>
 8009e88:	f000 fa84 	bl	800a394 <abort>
 8009e8c:	4b04      	ldr	r3, [pc, #16]	; (8009ea0 <__assert_func+0x38>)
 8009e8e:	461c      	mov	r4, r3
 8009e90:	e7f3      	b.n	8009e7a <__assert_func+0x12>
 8009e92:	bf00      	nop
 8009e94:	20000010 	.word	0x20000010
 8009e98:	0800b08d 	.word	0x0800b08d
 8009e9c:	0800b09a 	.word	0x0800b09a
 8009ea0:	0800b0c8 	.word	0x0800b0c8

08009ea4 <fiprintf>:
 8009ea4:	b40e      	push	{r1, r2, r3}
 8009ea6:	b503      	push	{r0, r1, lr}
 8009ea8:	4601      	mov	r1, r0
 8009eaa:	ab03      	add	r3, sp, #12
 8009eac:	4805      	ldr	r0, [pc, #20]	; (8009ec4 <fiprintf+0x20>)
 8009eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eb2:	6800      	ldr	r0, [r0, #0]
 8009eb4:	9301      	str	r3, [sp, #4]
 8009eb6:	f000 f87d 	bl	8009fb4 <_vfiprintf_r>
 8009eba:	b002      	add	sp, #8
 8009ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ec0:	b003      	add	sp, #12
 8009ec2:	4770      	bx	lr
 8009ec4:	20000010 	.word	0x20000010

08009ec8 <memmove>:
 8009ec8:	4288      	cmp	r0, r1
 8009eca:	b510      	push	{r4, lr}
 8009ecc:	eb01 0402 	add.w	r4, r1, r2
 8009ed0:	d902      	bls.n	8009ed8 <memmove+0x10>
 8009ed2:	4284      	cmp	r4, r0
 8009ed4:	4623      	mov	r3, r4
 8009ed6:	d807      	bhi.n	8009ee8 <memmove+0x20>
 8009ed8:	1e43      	subs	r3, r0, #1
 8009eda:	42a1      	cmp	r1, r4
 8009edc:	d008      	beq.n	8009ef0 <memmove+0x28>
 8009ede:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ee2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ee6:	e7f8      	b.n	8009eda <memmove+0x12>
 8009ee8:	4402      	add	r2, r0
 8009eea:	4601      	mov	r1, r0
 8009eec:	428a      	cmp	r2, r1
 8009eee:	d100      	bne.n	8009ef2 <memmove+0x2a>
 8009ef0:	bd10      	pop	{r4, pc}
 8009ef2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ef6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009efa:	e7f7      	b.n	8009eec <memmove+0x24>

08009efc <__malloc_lock>:
 8009efc:	4801      	ldr	r0, [pc, #4]	; (8009f04 <__malloc_lock+0x8>)
 8009efe:	f000 bc09 	b.w	800a714 <__retarget_lock_acquire_recursive>
 8009f02:	bf00      	nop
 8009f04:	200004d8 	.word	0x200004d8

08009f08 <__malloc_unlock>:
 8009f08:	4801      	ldr	r0, [pc, #4]	; (8009f10 <__malloc_unlock+0x8>)
 8009f0a:	f000 bc04 	b.w	800a716 <__retarget_lock_release_recursive>
 8009f0e:	bf00      	nop
 8009f10:	200004d8 	.word	0x200004d8

08009f14 <_realloc_r>:
 8009f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f16:	4607      	mov	r7, r0
 8009f18:	4614      	mov	r4, r2
 8009f1a:	460e      	mov	r6, r1
 8009f1c:	b921      	cbnz	r1, 8009f28 <_realloc_r+0x14>
 8009f1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009f22:	4611      	mov	r1, r2
 8009f24:	f7ff bdb2 	b.w	8009a8c <_malloc_r>
 8009f28:	b922      	cbnz	r2, 8009f34 <_realloc_r+0x20>
 8009f2a:	f7ff fd5f 	bl	80099ec <_free_r>
 8009f2e:	4625      	mov	r5, r4
 8009f30:	4628      	mov	r0, r5
 8009f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f34:	f000 fc54 	bl	800a7e0 <_malloc_usable_size_r>
 8009f38:	42a0      	cmp	r0, r4
 8009f3a:	d20f      	bcs.n	8009f5c <_realloc_r+0x48>
 8009f3c:	4621      	mov	r1, r4
 8009f3e:	4638      	mov	r0, r7
 8009f40:	f7ff fda4 	bl	8009a8c <_malloc_r>
 8009f44:	4605      	mov	r5, r0
 8009f46:	2800      	cmp	r0, #0
 8009f48:	d0f2      	beq.n	8009f30 <_realloc_r+0x1c>
 8009f4a:	4631      	mov	r1, r6
 8009f4c:	4622      	mov	r2, r4
 8009f4e:	f7ff f875 	bl	800903c <memcpy>
 8009f52:	4631      	mov	r1, r6
 8009f54:	4638      	mov	r0, r7
 8009f56:	f7ff fd49 	bl	80099ec <_free_r>
 8009f5a:	e7e9      	b.n	8009f30 <_realloc_r+0x1c>
 8009f5c:	4635      	mov	r5, r6
 8009f5e:	e7e7      	b.n	8009f30 <_realloc_r+0x1c>

08009f60 <__sfputc_r>:
 8009f60:	6893      	ldr	r3, [r2, #8]
 8009f62:	3b01      	subs	r3, #1
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	b410      	push	{r4}
 8009f68:	6093      	str	r3, [r2, #8]
 8009f6a:	da08      	bge.n	8009f7e <__sfputc_r+0x1e>
 8009f6c:	6994      	ldr	r4, [r2, #24]
 8009f6e:	42a3      	cmp	r3, r4
 8009f70:	db01      	blt.n	8009f76 <__sfputc_r+0x16>
 8009f72:	290a      	cmp	r1, #10
 8009f74:	d103      	bne.n	8009f7e <__sfputc_r+0x1e>
 8009f76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f7a:	f000 b94b 	b.w	800a214 <__swbuf_r>
 8009f7e:	6813      	ldr	r3, [r2, #0]
 8009f80:	1c58      	adds	r0, r3, #1
 8009f82:	6010      	str	r0, [r2, #0]
 8009f84:	7019      	strb	r1, [r3, #0]
 8009f86:	4608      	mov	r0, r1
 8009f88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f8c:	4770      	bx	lr

08009f8e <__sfputs_r>:
 8009f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f90:	4606      	mov	r6, r0
 8009f92:	460f      	mov	r7, r1
 8009f94:	4614      	mov	r4, r2
 8009f96:	18d5      	adds	r5, r2, r3
 8009f98:	42ac      	cmp	r4, r5
 8009f9a:	d101      	bne.n	8009fa0 <__sfputs_r+0x12>
 8009f9c:	2000      	movs	r0, #0
 8009f9e:	e007      	b.n	8009fb0 <__sfputs_r+0x22>
 8009fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fa4:	463a      	mov	r2, r7
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	f7ff ffda 	bl	8009f60 <__sfputc_r>
 8009fac:	1c43      	adds	r3, r0, #1
 8009fae:	d1f3      	bne.n	8009f98 <__sfputs_r+0xa>
 8009fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009fb4 <_vfiprintf_r>:
 8009fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb8:	460d      	mov	r5, r1
 8009fba:	b09d      	sub	sp, #116	; 0x74
 8009fbc:	4614      	mov	r4, r2
 8009fbe:	4698      	mov	r8, r3
 8009fc0:	4606      	mov	r6, r0
 8009fc2:	b118      	cbz	r0, 8009fcc <_vfiprintf_r+0x18>
 8009fc4:	6983      	ldr	r3, [r0, #24]
 8009fc6:	b90b      	cbnz	r3, 8009fcc <_vfiprintf_r+0x18>
 8009fc8:	f000 fb06 	bl	800a5d8 <__sinit>
 8009fcc:	4b89      	ldr	r3, [pc, #548]	; (800a1f4 <_vfiprintf_r+0x240>)
 8009fce:	429d      	cmp	r5, r3
 8009fd0:	d11b      	bne.n	800a00a <_vfiprintf_r+0x56>
 8009fd2:	6875      	ldr	r5, [r6, #4]
 8009fd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fd6:	07d9      	lsls	r1, r3, #31
 8009fd8:	d405      	bmi.n	8009fe6 <_vfiprintf_r+0x32>
 8009fda:	89ab      	ldrh	r3, [r5, #12]
 8009fdc:	059a      	lsls	r2, r3, #22
 8009fde:	d402      	bmi.n	8009fe6 <_vfiprintf_r+0x32>
 8009fe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fe2:	f000 fb97 	bl	800a714 <__retarget_lock_acquire_recursive>
 8009fe6:	89ab      	ldrh	r3, [r5, #12]
 8009fe8:	071b      	lsls	r3, r3, #28
 8009fea:	d501      	bpl.n	8009ff0 <_vfiprintf_r+0x3c>
 8009fec:	692b      	ldr	r3, [r5, #16]
 8009fee:	b9eb      	cbnz	r3, 800a02c <_vfiprintf_r+0x78>
 8009ff0:	4629      	mov	r1, r5
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	f000 f960 	bl	800a2b8 <__swsetup_r>
 8009ff8:	b1c0      	cbz	r0, 800a02c <_vfiprintf_r+0x78>
 8009ffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ffc:	07dc      	lsls	r4, r3, #31
 8009ffe:	d50e      	bpl.n	800a01e <_vfiprintf_r+0x6a>
 800a000:	f04f 30ff 	mov.w	r0, #4294967295
 800a004:	b01d      	add	sp, #116	; 0x74
 800a006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a00a:	4b7b      	ldr	r3, [pc, #492]	; (800a1f8 <_vfiprintf_r+0x244>)
 800a00c:	429d      	cmp	r5, r3
 800a00e:	d101      	bne.n	800a014 <_vfiprintf_r+0x60>
 800a010:	68b5      	ldr	r5, [r6, #8]
 800a012:	e7df      	b.n	8009fd4 <_vfiprintf_r+0x20>
 800a014:	4b79      	ldr	r3, [pc, #484]	; (800a1fc <_vfiprintf_r+0x248>)
 800a016:	429d      	cmp	r5, r3
 800a018:	bf08      	it	eq
 800a01a:	68f5      	ldreq	r5, [r6, #12]
 800a01c:	e7da      	b.n	8009fd4 <_vfiprintf_r+0x20>
 800a01e:	89ab      	ldrh	r3, [r5, #12]
 800a020:	0598      	lsls	r0, r3, #22
 800a022:	d4ed      	bmi.n	800a000 <_vfiprintf_r+0x4c>
 800a024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a026:	f000 fb76 	bl	800a716 <__retarget_lock_release_recursive>
 800a02a:	e7e9      	b.n	800a000 <_vfiprintf_r+0x4c>
 800a02c:	2300      	movs	r3, #0
 800a02e:	9309      	str	r3, [sp, #36]	; 0x24
 800a030:	2320      	movs	r3, #32
 800a032:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a036:	f8cd 800c 	str.w	r8, [sp, #12]
 800a03a:	2330      	movs	r3, #48	; 0x30
 800a03c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a200 <_vfiprintf_r+0x24c>
 800a040:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a044:	f04f 0901 	mov.w	r9, #1
 800a048:	4623      	mov	r3, r4
 800a04a:	469a      	mov	sl, r3
 800a04c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a050:	b10a      	cbz	r2, 800a056 <_vfiprintf_r+0xa2>
 800a052:	2a25      	cmp	r2, #37	; 0x25
 800a054:	d1f9      	bne.n	800a04a <_vfiprintf_r+0x96>
 800a056:	ebba 0b04 	subs.w	fp, sl, r4
 800a05a:	d00b      	beq.n	800a074 <_vfiprintf_r+0xc0>
 800a05c:	465b      	mov	r3, fp
 800a05e:	4622      	mov	r2, r4
 800a060:	4629      	mov	r1, r5
 800a062:	4630      	mov	r0, r6
 800a064:	f7ff ff93 	bl	8009f8e <__sfputs_r>
 800a068:	3001      	adds	r0, #1
 800a06a:	f000 80aa 	beq.w	800a1c2 <_vfiprintf_r+0x20e>
 800a06e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a070:	445a      	add	r2, fp
 800a072:	9209      	str	r2, [sp, #36]	; 0x24
 800a074:	f89a 3000 	ldrb.w	r3, [sl]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	f000 80a2 	beq.w	800a1c2 <_vfiprintf_r+0x20e>
 800a07e:	2300      	movs	r3, #0
 800a080:	f04f 32ff 	mov.w	r2, #4294967295
 800a084:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a088:	f10a 0a01 	add.w	sl, sl, #1
 800a08c:	9304      	str	r3, [sp, #16]
 800a08e:	9307      	str	r3, [sp, #28]
 800a090:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a094:	931a      	str	r3, [sp, #104]	; 0x68
 800a096:	4654      	mov	r4, sl
 800a098:	2205      	movs	r2, #5
 800a09a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a09e:	4858      	ldr	r0, [pc, #352]	; (800a200 <_vfiprintf_r+0x24c>)
 800a0a0:	f7f6 f8ae 	bl	8000200 <memchr>
 800a0a4:	9a04      	ldr	r2, [sp, #16]
 800a0a6:	b9d8      	cbnz	r0, 800a0e0 <_vfiprintf_r+0x12c>
 800a0a8:	06d1      	lsls	r1, r2, #27
 800a0aa:	bf44      	itt	mi
 800a0ac:	2320      	movmi	r3, #32
 800a0ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0b2:	0713      	lsls	r3, r2, #28
 800a0b4:	bf44      	itt	mi
 800a0b6:	232b      	movmi	r3, #43	; 0x2b
 800a0b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a0c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a0c2:	d015      	beq.n	800a0f0 <_vfiprintf_r+0x13c>
 800a0c4:	9a07      	ldr	r2, [sp, #28]
 800a0c6:	4654      	mov	r4, sl
 800a0c8:	2000      	movs	r0, #0
 800a0ca:	f04f 0c0a 	mov.w	ip, #10
 800a0ce:	4621      	mov	r1, r4
 800a0d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0d4:	3b30      	subs	r3, #48	; 0x30
 800a0d6:	2b09      	cmp	r3, #9
 800a0d8:	d94e      	bls.n	800a178 <_vfiprintf_r+0x1c4>
 800a0da:	b1b0      	cbz	r0, 800a10a <_vfiprintf_r+0x156>
 800a0dc:	9207      	str	r2, [sp, #28]
 800a0de:	e014      	b.n	800a10a <_vfiprintf_r+0x156>
 800a0e0:	eba0 0308 	sub.w	r3, r0, r8
 800a0e4:	fa09 f303 	lsl.w	r3, r9, r3
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	9304      	str	r3, [sp, #16]
 800a0ec:	46a2      	mov	sl, r4
 800a0ee:	e7d2      	b.n	800a096 <_vfiprintf_r+0xe2>
 800a0f0:	9b03      	ldr	r3, [sp, #12]
 800a0f2:	1d19      	adds	r1, r3, #4
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	9103      	str	r1, [sp, #12]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	bfbb      	ittet	lt
 800a0fc:	425b      	neglt	r3, r3
 800a0fe:	f042 0202 	orrlt.w	r2, r2, #2
 800a102:	9307      	strge	r3, [sp, #28]
 800a104:	9307      	strlt	r3, [sp, #28]
 800a106:	bfb8      	it	lt
 800a108:	9204      	strlt	r2, [sp, #16]
 800a10a:	7823      	ldrb	r3, [r4, #0]
 800a10c:	2b2e      	cmp	r3, #46	; 0x2e
 800a10e:	d10c      	bne.n	800a12a <_vfiprintf_r+0x176>
 800a110:	7863      	ldrb	r3, [r4, #1]
 800a112:	2b2a      	cmp	r3, #42	; 0x2a
 800a114:	d135      	bne.n	800a182 <_vfiprintf_r+0x1ce>
 800a116:	9b03      	ldr	r3, [sp, #12]
 800a118:	1d1a      	adds	r2, r3, #4
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	9203      	str	r2, [sp, #12]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	bfb8      	it	lt
 800a122:	f04f 33ff 	movlt.w	r3, #4294967295
 800a126:	3402      	adds	r4, #2
 800a128:	9305      	str	r3, [sp, #20]
 800a12a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a210 <_vfiprintf_r+0x25c>
 800a12e:	7821      	ldrb	r1, [r4, #0]
 800a130:	2203      	movs	r2, #3
 800a132:	4650      	mov	r0, sl
 800a134:	f7f6 f864 	bl	8000200 <memchr>
 800a138:	b140      	cbz	r0, 800a14c <_vfiprintf_r+0x198>
 800a13a:	2340      	movs	r3, #64	; 0x40
 800a13c:	eba0 000a 	sub.w	r0, r0, sl
 800a140:	fa03 f000 	lsl.w	r0, r3, r0
 800a144:	9b04      	ldr	r3, [sp, #16]
 800a146:	4303      	orrs	r3, r0
 800a148:	3401      	adds	r4, #1
 800a14a:	9304      	str	r3, [sp, #16]
 800a14c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a150:	482c      	ldr	r0, [pc, #176]	; (800a204 <_vfiprintf_r+0x250>)
 800a152:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a156:	2206      	movs	r2, #6
 800a158:	f7f6 f852 	bl	8000200 <memchr>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	d03f      	beq.n	800a1e0 <_vfiprintf_r+0x22c>
 800a160:	4b29      	ldr	r3, [pc, #164]	; (800a208 <_vfiprintf_r+0x254>)
 800a162:	bb1b      	cbnz	r3, 800a1ac <_vfiprintf_r+0x1f8>
 800a164:	9b03      	ldr	r3, [sp, #12]
 800a166:	3307      	adds	r3, #7
 800a168:	f023 0307 	bic.w	r3, r3, #7
 800a16c:	3308      	adds	r3, #8
 800a16e:	9303      	str	r3, [sp, #12]
 800a170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a172:	443b      	add	r3, r7
 800a174:	9309      	str	r3, [sp, #36]	; 0x24
 800a176:	e767      	b.n	800a048 <_vfiprintf_r+0x94>
 800a178:	fb0c 3202 	mla	r2, ip, r2, r3
 800a17c:	460c      	mov	r4, r1
 800a17e:	2001      	movs	r0, #1
 800a180:	e7a5      	b.n	800a0ce <_vfiprintf_r+0x11a>
 800a182:	2300      	movs	r3, #0
 800a184:	3401      	adds	r4, #1
 800a186:	9305      	str	r3, [sp, #20]
 800a188:	4619      	mov	r1, r3
 800a18a:	f04f 0c0a 	mov.w	ip, #10
 800a18e:	4620      	mov	r0, r4
 800a190:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a194:	3a30      	subs	r2, #48	; 0x30
 800a196:	2a09      	cmp	r2, #9
 800a198:	d903      	bls.n	800a1a2 <_vfiprintf_r+0x1ee>
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d0c5      	beq.n	800a12a <_vfiprintf_r+0x176>
 800a19e:	9105      	str	r1, [sp, #20]
 800a1a0:	e7c3      	b.n	800a12a <_vfiprintf_r+0x176>
 800a1a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e7f0      	b.n	800a18e <_vfiprintf_r+0x1da>
 800a1ac:	ab03      	add	r3, sp, #12
 800a1ae:	9300      	str	r3, [sp, #0]
 800a1b0:	462a      	mov	r2, r5
 800a1b2:	4b16      	ldr	r3, [pc, #88]	; (800a20c <_vfiprintf_r+0x258>)
 800a1b4:	a904      	add	r1, sp, #16
 800a1b6:	4630      	mov	r0, r6
 800a1b8:	f7fc f886 	bl	80062c8 <_printf_float>
 800a1bc:	4607      	mov	r7, r0
 800a1be:	1c78      	adds	r0, r7, #1
 800a1c0:	d1d6      	bne.n	800a170 <_vfiprintf_r+0x1bc>
 800a1c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1c4:	07d9      	lsls	r1, r3, #31
 800a1c6:	d405      	bmi.n	800a1d4 <_vfiprintf_r+0x220>
 800a1c8:	89ab      	ldrh	r3, [r5, #12]
 800a1ca:	059a      	lsls	r2, r3, #22
 800a1cc:	d402      	bmi.n	800a1d4 <_vfiprintf_r+0x220>
 800a1ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1d0:	f000 faa1 	bl	800a716 <__retarget_lock_release_recursive>
 800a1d4:	89ab      	ldrh	r3, [r5, #12]
 800a1d6:	065b      	lsls	r3, r3, #25
 800a1d8:	f53f af12 	bmi.w	800a000 <_vfiprintf_r+0x4c>
 800a1dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1de:	e711      	b.n	800a004 <_vfiprintf_r+0x50>
 800a1e0:	ab03      	add	r3, sp, #12
 800a1e2:	9300      	str	r3, [sp, #0]
 800a1e4:	462a      	mov	r2, r5
 800a1e6:	4b09      	ldr	r3, [pc, #36]	; (800a20c <_vfiprintf_r+0x258>)
 800a1e8:	a904      	add	r1, sp, #16
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	f7fc fb10 	bl	8006810 <_printf_i>
 800a1f0:	e7e4      	b.n	800a1bc <_vfiprintf_r+0x208>
 800a1f2:	bf00      	nop
 800a1f4:	0800b0ec 	.word	0x0800b0ec
 800a1f8:	0800b10c 	.word	0x0800b10c
 800a1fc:	0800b0cc 	.word	0x0800b0cc
 800a200:	0800b07c 	.word	0x0800b07c
 800a204:	0800b086 	.word	0x0800b086
 800a208:	080062c9 	.word	0x080062c9
 800a20c:	08009f8f 	.word	0x08009f8f
 800a210:	0800b082 	.word	0x0800b082

0800a214 <__swbuf_r>:
 800a214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a216:	460e      	mov	r6, r1
 800a218:	4614      	mov	r4, r2
 800a21a:	4605      	mov	r5, r0
 800a21c:	b118      	cbz	r0, 800a226 <__swbuf_r+0x12>
 800a21e:	6983      	ldr	r3, [r0, #24]
 800a220:	b90b      	cbnz	r3, 800a226 <__swbuf_r+0x12>
 800a222:	f000 f9d9 	bl	800a5d8 <__sinit>
 800a226:	4b21      	ldr	r3, [pc, #132]	; (800a2ac <__swbuf_r+0x98>)
 800a228:	429c      	cmp	r4, r3
 800a22a:	d12b      	bne.n	800a284 <__swbuf_r+0x70>
 800a22c:	686c      	ldr	r4, [r5, #4]
 800a22e:	69a3      	ldr	r3, [r4, #24]
 800a230:	60a3      	str	r3, [r4, #8]
 800a232:	89a3      	ldrh	r3, [r4, #12]
 800a234:	071a      	lsls	r2, r3, #28
 800a236:	d52f      	bpl.n	800a298 <__swbuf_r+0x84>
 800a238:	6923      	ldr	r3, [r4, #16]
 800a23a:	b36b      	cbz	r3, 800a298 <__swbuf_r+0x84>
 800a23c:	6923      	ldr	r3, [r4, #16]
 800a23e:	6820      	ldr	r0, [r4, #0]
 800a240:	1ac0      	subs	r0, r0, r3
 800a242:	6963      	ldr	r3, [r4, #20]
 800a244:	b2f6      	uxtb	r6, r6
 800a246:	4283      	cmp	r3, r0
 800a248:	4637      	mov	r7, r6
 800a24a:	dc04      	bgt.n	800a256 <__swbuf_r+0x42>
 800a24c:	4621      	mov	r1, r4
 800a24e:	4628      	mov	r0, r5
 800a250:	f000 f92e 	bl	800a4b0 <_fflush_r>
 800a254:	bb30      	cbnz	r0, 800a2a4 <__swbuf_r+0x90>
 800a256:	68a3      	ldr	r3, [r4, #8]
 800a258:	3b01      	subs	r3, #1
 800a25a:	60a3      	str	r3, [r4, #8]
 800a25c:	6823      	ldr	r3, [r4, #0]
 800a25e:	1c5a      	adds	r2, r3, #1
 800a260:	6022      	str	r2, [r4, #0]
 800a262:	701e      	strb	r6, [r3, #0]
 800a264:	6963      	ldr	r3, [r4, #20]
 800a266:	3001      	adds	r0, #1
 800a268:	4283      	cmp	r3, r0
 800a26a:	d004      	beq.n	800a276 <__swbuf_r+0x62>
 800a26c:	89a3      	ldrh	r3, [r4, #12]
 800a26e:	07db      	lsls	r3, r3, #31
 800a270:	d506      	bpl.n	800a280 <__swbuf_r+0x6c>
 800a272:	2e0a      	cmp	r6, #10
 800a274:	d104      	bne.n	800a280 <__swbuf_r+0x6c>
 800a276:	4621      	mov	r1, r4
 800a278:	4628      	mov	r0, r5
 800a27a:	f000 f919 	bl	800a4b0 <_fflush_r>
 800a27e:	b988      	cbnz	r0, 800a2a4 <__swbuf_r+0x90>
 800a280:	4638      	mov	r0, r7
 800a282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a284:	4b0a      	ldr	r3, [pc, #40]	; (800a2b0 <__swbuf_r+0x9c>)
 800a286:	429c      	cmp	r4, r3
 800a288:	d101      	bne.n	800a28e <__swbuf_r+0x7a>
 800a28a:	68ac      	ldr	r4, [r5, #8]
 800a28c:	e7cf      	b.n	800a22e <__swbuf_r+0x1a>
 800a28e:	4b09      	ldr	r3, [pc, #36]	; (800a2b4 <__swbuf_r+0xa0>)
 800a290:	429c      	cmp	r4, r3
 800a292:	bf08      	it	eq
 800a294:	68ec      	ldreq	r4, [r5, #12]
 800a296:	e7ca      	b.n	800a22e <__swbuf_r+0x1a>
 800a298:	4621      	mov	r1, r4
 800a29a:	4628      	mov	r0, r5
 800a29c:	f000 f80c 	bl	800a2b8 <__swsetup_r>
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	d0cb      	beq.n	800a23c <__swbuf_r+0x28>
 800a2a4:	f04f 37ff 	mov.w	r7, #4294967295
 800a2a8:	e7ea      	b.n	800a280 <__swbuf_r+0x6c>
 800a2aa:	bf00      	nop
 800a2ac:	0800b0ec 	.word	0x0800b0ec
 800a2b0:	0800b10c 	.word	0x0800b10c
 800a2b4:	0800b0cc 	.word	0x0800b0cc

0800a2b8 <__swsetup_r>:
 800a2b8:	4b32      	ldr	r3, [pc, #200]	; (800a384 <__swsetup_r+0xcc>)
 800a2ba:	b570      	push	{r4, r5, r6, lr}
 800a2bc:	681d      	ldr	r5, [r3, #0]
 800a2be:	4606      	mov	r6, r0
 800a2c0:	460c      	mov	r4, r1
 800a2c2:	b125      	cbz	r5, 800a2ce <__swsetup_r+0x16>
 800a2c4:	69ab      	ldr	r3, [r5, #24]
 800a2c6:	b913      	cbnz	r3, 800a2ce <__swsetup_r+0x16>
 800a2c8:	4628      	mov	r0, r5
 800a2ca:	f000 f985 	bl	800a5d8 <__sinit>
 800a2ce:	4b2e      	ldr	r3, [pc, #184]	; (800a388 <__swsetup_r+0xd0>)
 800a2d0:	429c      	cmp	r4, r3
 800a2d2:	d10f      	bne.n	800a2f4 <__swsetup_r+0x3c>
 800a2d4:	686c      	ldr	r4, [r5, #4]
 800a2d6:	89a3      	ldrh	r3, [r4, #12]
 800a2d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2dc:	0719      	lsls	r1, r3, #28
 800a2de:	d42c      	bmi.n	800a33a <__swsetup_r+0x82>
 800a2e0:	06dd      	lsls	r5, r3, #27
 800a2e2:	d411      	bmi.n	800a308 <__swsetup_r+0x50>
 800a2e4:	2309      	movs	r3, #9
 800a2e6:	6033      	str	r3, [r6, #0]
 800a2e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a2ec:	81a3      	strh	r3, [r4, #12]
 800a2ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f2:	e03e      	b.n	800a372 <__swsetup_r+0xba>
 800a2f4:	4b25      	ldr	r3, [pc, #148]	; (800a38c <__swsetup_r+0xd4>)
 800a2f6:	429c      	cmp	r4, r3
 800a2f8:	d101      	bne.n	800a2fe <__swsetup_r+0x46>
 800a2fa:	68ac      	ldr	r4, [r5, #8]
 800a2fc:	e7eb      	b.n	800a2d6 <__swsetup_r+0x1e>
 800a2fe:	4b24      	ldr	r3, [pc, #144]	; (800a390 <__swsetup_r+0xd8>)
 800a300:	429c      	cmp	r4, r3
 800a302:	bf08      	it	eq
 800a304:	68ec      	ldreq	r4, [r5, #12]
 800a306:	e7e6      	b.n	800a2d6 <__swsetup_r+0x1e>
 800a308:	0758      	lsls	r0, r3, #29
 800a30a:	d512      	bpl.n	800a332 <__swsetup_r+0x7a>
 800a30c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a30e:	b141      	cbz	r1, 800a322 <__swsetup_r+0x6a>
 800a310:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a314:	4299      	cmp	r1, r3
 800a316:	d002      	beq.n	800a31e <__swsetup_r+0x66>
 800a318:	4630      	mov	r0, r6
 800a31a:	f7ff fb67 	bl	80099ec <_free_r>
 800a31e:	2300      	movs	r3, #0
 800a320:	6363      	str	r3, [r4, #52]	; 0x34
 800a322:	89a3      	ldrh	r3, [r4, #12]
 800a324:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a328:	81a3      	strh	r3, [r4, #12]
 800a32a:	2300      	movs	r3, #0
 800a32c:	6063      	str	r3, [r4, #4]
 800a32e:	6923      	ldr	r3, [r4, #16]
 800a330:	6023      	str	r3, [r4, #0]
 800a332:	89a3      	ldrh	r3, [r4, #12]
 800a334:	f043 0308 	orr.w	r3, r3, #8
 800a338:	81a3      	strh	r3, [r4, #12]
 800a33a:	6923      	ldr	r3, [r4, #16]
 800a33c:	b94b      	cbnz	r3, 800a352 <__swsetup_r+0x9a>
 800a33e:	89a3      	ldrh	r3, [r4, #12]
 800a340:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a348:	d003      	beq.n	800a352 <__swsetup_r+0x9a>
 800a34a:	4621      	mov	r1, r4
 800a34c:	4630      	mov	r0, r6
 800a34e:	f000 fa07 	bl	800a760 <__smakebuf_r>
 800a352:	89a0      	ldrh	r0, [r4, #12]
 800a354:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a358:	f010 0301 	ands.w	r3, r0, #1
 800a35c:	d00a      	beq.n	800a374 <__swsetup_r+0xbc>
 800a35e:	2300      	movs	r3, #0
 800a360:	60a3      	str	r3, [r4, #8]
 800a362:	6963      	ldr	r3, [r4, #20]
 800a364:	425b      	negs	r3, r3
 800a366:	61a3      	str	r3, [r4, #24]
 800a368:	6923      	ldr	r3, [r4, #16]
 800a36a:	b943      	cbnz	r3, 800a37e <__swsetup_r+0xc6>
 800a36c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a370:	d1ba      	bne.n	800a2e8 <__swsetup_r+0x30>
 800a372:	bd70      	pop	{r4, r5, r6, pc}
 800a374:	0781      	lsls	r1, r0, #30
 800a376:	bf58      	it	pl
 800a378:	6963      	ldrpl	r3, [r4, #20]
 800a37a:	60a3      	str	r3, [r4, #8]
 800a37c:	e7f4      	b.n	800a368 <__swsetup_r+0xb0>
 800a37e:	2000      	movs	r0, #0
 800a380:	e7f7      	b.n	800a372 <__swsetup_r+0xba>
 800a382:	bf00      	nop
 800a384:	20000010 	.word	0x20000010
 800a388:	0800b0ec 	.word	0x0800b0ec
 800a38c:	0800b10c 	.word	0x0800b10c
 800a390:	0800b0cc 	.word	0x0800b0cc

0800a394 <abort>:
 800a394:	b508      	push	{r3, lr}
 800a396:	2006      	movs	r0, #6
 800a398:	f000 fa52 	bl	800a840 <raise>
 800a39c:	2001      	movs	r0, #1
 800a39e:	f7f7 fdad 	bl	8001efc <_exit>
	...

0800a3a4 <__sflush_r>:
 800a3a4:	898a      	ldrh	r2, [r1, #12]
 800a3a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3aa:	4605      	mov	r5, r0
 800a3ac:	0710      	lsls	r0, r2, #28
 800a3ae:	460c      	mov	r4, r1
 800a3b0:	d458      	bmi.n	800a464 <__sflush_r+0xc0>
 800a3b2:	684b      	ldr	r3, [r1, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	dc05      	bgt.n	800a3c4 <__sflush_r+0x20>
 800a3b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	dc02      	bgt.n	800a3c4 <__sflush_r+0x20>
 800a3be:	2000      	movs	r0, #0
 800a3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3c6:	2e00      	cmp	r6, #0
 800a3c8:	d0f9      	beq.n	800a3be <__sflush_r+0x1a>
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a3d0:	682f      	ldr	r7, [r5, #0]
 800a3d2:	602b      	str	r3, [r5, #0]
 800a3d4:	d032      	beq.n	800a43c <__sflush_r+0x98>
 800a3d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3d8:	89a3      	ldrh	r3, [r4, #12]
 800a3da:	075a      	lsls	r2, r3, #29
 800a3dc:	d505      	bpl.n	800a3ea <__sflush_r+0x46>
 800a3de:	6863      	ldr	r3, [r4, #4]
 800a3e0:	1ac0      	subs	r0, r0, r3
 800a3e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3e4:	b10b      	cbz	r3, 800a3ea <__sflush_r+0x46>
 800a3e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3e8:	1ac0      	subs	r0, r0, r3
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3f0:	6a21      	ldr	r1, [r4, #32]
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	47b0      	blx	r6
 800a3f6:	1c43      	adds	r3, r0, #1
 800a3f8:	89a3      	ldrh	r3, [r4, #12]
 800a3fa:	d106      	bne.n	800a40a <__sflush_r+0x66>
 800a3fc:	6829      	ldr	r1, [r5, #0]
 800a3fe:	291d      	cmp	r1, #29
 800a400:	d82c      	bhi.n	800a45c <__sflush_r+0xb8>
 800a402:	4a2a      	ldr	r2, [pc, #168]	; (800a4ac <__sflush_r+0x108>)
 800a404:	40ca      	lsrs	r2, r1
 800a406:	07d6      	lsls	r6, r2, #31
 800a408:	d528      	bpl.n	800a45c <__sflush_r+0xb8>
 800a40a:	2200      	movs	r2, #0
 800a40c:	6062      	str	r2, [r4, #4]
 800a40e:	04d9      	lsls	r1, r3, #19
 800a410:	6922      	ldr	r2, [r4, #16]
 800a412:	6022      	str	r2, [r4, #0]
 800a414:	d504      	bpl.n	800a420 <__sflush_r+0x7c>
 800a416:	1c42      	adds	r2, r0, #1
 800a418:	d101      	bne.n	800a41e <__sflush_r+0x7a>
 800a41a:	682b      	ldr	r3, [r5, #0]
 800a41c:	b903      	cbnz	r3, 800a420 <__sflush_r+0x7c>
 800a41e:	6560      	str	r0, [r4, #84]	; 0x54
 800a420:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a422:	602f      	str	r7, [r5, #0]
 800a424:	2900      	cmp	r1, #0
 800a426:	d0ca      	beq.n	800a3be <__sflush_r+0x1a>
 800a428:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a42c:	4299      	cmp	r1, r3
 800a42e:	d002      	beq.n	800a436 <__sflush_r+0x92>
 800a430:	4628      	mov	r0, r5
 800a432:	f7ff fadb 	bl	80099ec <_free_r>
 800a436:	2000      	movs	r0, #0
 800a438:	6360      	str	r0, [r4, #52]	; 0x34
 800a43a:	e7c1      	b.n	800a3c0 <__sflush_r+0x1c>
 800a43c:	6a21      	ldr	r1, [r4, #32]
 800a43e:	2301      	movs	r3, #1
 800a440:	4628      	mov	r0, r5
 800a442:	47b0      	blx	r6
 800a444:	1c41      	adds	r1, r0, #1
 800a446:	d1c7      	bne.n	800a3d8 <__sflush_r+0x34>
 800a448:	682b      	ldr	r3, [r5, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d0c4      	beq.n	800a3d8 <__sflush_r+0x34>
 800a44e:	2b1d      	cmp	r3, #29
 800a450:	d001      	beq.n	800a456 <__sflush_r+0xb2>
 800a452:	2b16      	cmp	r3, #22
 800a454:	d101      	bne.n	800a45a <__sflush_r+0xb6>
 800a456:	602f      	str	r7, [r5, #0]
 800a458:	e7b1      	b.n	800a3be <__sflush_r+0x1a>
 800a45a:	89a3      	ldrh	r3, [r4, #12]
 800a45c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a460:	81a3      	strh	r3, [r4, #12]
 800a462:	e7ad      	b.n	800a3c0 <__sflush_r+0x1c>
 800a464:	690f      	ldr	r7, [r1, #16]
 800a466:	2f00      	cmp	r7, #0
 800a468:	d0a9      	beq.n	800a3be <__sflush_r+0x1a>
 800a46a:	0793      	lsls	r3, r2, #30
 800a46c:	680e      	ldr	r6, [r1, #0]
 800a46e:	bf08      	it	eq
 800a470:	694b      	ldreq	r3, [r1, #20]
 800a472:	600f      	str	r7, [r1, #0]
 800a474:	bf18      	it	ne
 800a476:	2300      	movne	r3, #0
 800a478:	eba6 0807 	sub.w	r8, r6, r7
 800a47c:	608b      	str	r3, [r1, #8]
 800a47e:	f1b8 0f00 	cmp.w	r8, #0
 800a482:	dd9c      	ble.n	800a3be <__sflush_r+0x1a>
 800a484:	6a21      	ldr	r1, [r4, #32]
 800a486:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a488:	4643      	mov	r3, r8
 800a48a:	463a      	mov	r2, r7
 800a48c:	4628      	mov	r0, r5
 800a48e:	47b0      	blx	r6
 800a490:	2800      	cmp	r0, #0
 800a492:	dc06      	bgt.n	800a4a2 <__sflush_r+0xfe>
 800a494:	89a3      	ldrh	r3, [r4, #12]
 800a496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a49a:	81a3      	strh	r3, [r4, #12]
 800a49c:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a0:	e78e      	b.n	800a3c0 <__sflush_r+0x1c>
 800a4a2:	4407      	add	r7, r0
 800a4a4:	eba8 0800 	sub.w	r8, r8, r0
 800a4a8:	e7e9      	b.n	800a47e <__sflush_r+0xda>
 800a4aa:	bf00      	nop
 800a4ac:	20400001 	.word	0x20400001

0800a4b0 <_fflush_r>:
 800a4b0:	b538      	push	{r3, r4, r5, lr}
 800a4b2:	690b      	ldr	r3, [r1, #16]
 800a4b4:	4605      	mov	r5, r0
 800a4b6:	460c      	mov	r4, r1
 800a4b8:	b913      	cbnz	r3, 800a4c0 <_fflush_r+0x10>
 800a4ba:	2500      	movs	r5, #0
 800a4bc:	4628      	mov	r0, r5
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	b118      	cbz	r0, 800a4ca <_fflush_r+0x1a>
 800a4c2:	6983      	ldr	r3, [r0, #24]
 800a4c4:	b90b      	cbnz	r3, 800a4ca <_fflush_r+0x1a>
 800a4c6:	f000 f887 	bl	800a5d8 <__sinit>
 800a4ca:	4b14      	ldr	r3, [pc, #80]	; (800a51c <_fflush_r+0x6c>)
 800a4cc:	429c      	cmp	r4, r3
 800a4ce:	d11b      	bne.n	800a508 <_fflush_r+0x58>
 800a4d0:	686c      	ldr	r4, [r5, #4]
 800a4d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d0ef      	beq.n	800a4ba <_fflush_r+0xa>
 800a4da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4dc:	07d0      	lsls	r0, r2, #31
 800a4de:	d404      	bmi.n	800a4ea <_fflush_r+0x3a>
 800a4e0:	0599      	lsls	r1, r3, #22
 800a4e2:	d402      	bmi.n	800a4ea <_fflush_r+0x3a>
 800a4e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4e6:	f000 f915 	bl	800a714 <__retarget_lock_acquire_recursive>
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	4621      	mov	r1, r4
 800a4ee:	f7ff ff59 	bl	800a3a4 <__sflush_r>
 800a4f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4f4:	07da      	lsls	r2, r3, #31
 800a4f6:	4605      	mov	r5, r0
 800a4f8:	d4e0      	bmi.n	800a4bc <_fflush_r+0xc>
 800a4fa:	89a3      	ldrh	r3, [r4, #12]
 800a4fc:	059b      	lsls	r3, r3, #22
 800a4fe:	d4dd      	bmi.n	800a4bc <_fflush_r+0xc>
 800a500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a502:	f000 f908 	bl	800a716 <__retarget_lock_release_recursive>
 800a506:	e7d9      	b.n	800a4bc <_fflush_r+0xc>
 800a508:	4b05      	ldr	r3, [pc, #20]	; (800a520 <_fflush_r+0x70>)
 800a50a:	429c      	cmp	r4, r3
 800a50c:	d101      	bne.n	800a512 <_fflush_r+0x62>
 800a50e:	68ac      	ldr	r4, [r5, #8]
 800a510:	e7df      	b.n	800a4d2 <_fflush_r+0x22>
 800a512:	4b04      	ldr	r3, [pc, #16]	; (800a524 <_fflush_r+0x74>)
 800a514:	429c      	cmp	r4, r3
 800a516:	bf08      	it	eq
 800a518:	68ec      	ldreq	r4, [r5, #12]
 800a51a:	e7da      	b.n	800a4d2 <_fflush_r+0x22>
 800a51c:	0800b0ec 	.word	0x0800b0ec
 800a520:	0800b10c 	.word	0x0800b10c
 800a524:	0800b0cc 	.word	0x0800b0cc

0800a528 <std>:
 800a528:	2300      	movs	r3, #0
 800a52a:	b510      	push	{r4, lr}
 800a52c:	4604      	mov	r4, r0
 800a52e:	e9c0 3300 	strd	r3, r3, [r0]
 800a532:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a536:	6083      	str	r3, [r0, #8]
 800a538:	8181      	strh	r1, [r0, #12]
 800a53a:	6643      	str	r3, [r0, #100]	; 0x64
 800a53c:	81c2      	strh	r2, [r0, #14]
 800a53e:	6183      	str	r3, [r0, #24]
 800a540:	4619      	mov	r1, r3
 800a542:	2208      	movs	r2, #8
 800a544:	305c      	adds	r0, #92	; 0x5c
 800a546:	f7fb fe17 	bl	8006178 <memset>
 800a54a:	4b05      	ldr	r3, [pc, #20]	; (800a560 <std+0x38>)
 800a54c:	6263      	str	r3, [r4, #36]	; 0x24
 800a54e:	4b05      	ldr	r3, [pc, #20]	; (800a564 <std+0x3c>)
 800a550:	62a3      	str	r3, [r4, #40]	; 0x28
 800a552:	4b05      	ldr	r3, [pc, #20]	; (800a568 <std+0x40>)
 800a554:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a556:	4b05      	ldr	r3, [pc, #20]	; (800a56c <std+0x44>)
 800a558:	6224      	str	r4, [r4, #32]
 800a55a:	6323      	str	r3, [r4, #48]	; 0x30
 800a55c:	bd10      	pop	{r4, pc}
 800a55e:	bf00      	nop
 800a560:	0800a879 	.word	0x0800a879
 800a564:	0800a89b 	.word	0x0800a89b
 800a568:	0800a8d3 	.word	0x0800a8d3
 800a56c:	0800a8f7 	.word	0x0800a8f7

0800a570 <_cleanup_r>:
 800a570:	4901      	ldr	r1, [pc, #4]	; (800a578 <_cleanup_r+0x8>)
 800a572:	f000 b8af 	b.w	800a6d4 <_fwalk_reent>
 800a576:	bf00      	nop
 800a578:	0800a4b1 	.word	0x0800a4b1

0800a57c <__sfmoreglue>:
 800a57c:	b570      	push	{r4, r5, r6, lr}
 800a57e:	1e4a      	subs	r2, r1, #1
 800a580:	2568      	movs	r5, #104	; 0x68
 800a582:	4355      	muls	r5, r2
 800a584:	460e      	mov	r6, r1
 800a586:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a58a:	f7ff fa7f 	bl	8009a8c <_malloc_r>
 800a58e:	4604      	mov	r4, r0
 800a590:	b140      	cbz	r0, 800a5a4 <__sfmoreglue+0x28>
 800a592:	2100      	movs	r1, #0
 800a594:	e9c0 1600 	strd	r1, r6, [r0]
 800a598:	300c      	adds	r0, #12
 800a59a:	60a0      	str	r0, [r4, #8]
 800a59c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a5a0:	f7fb fdea 	bl	8006178 <memset>
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	bd70      	pop	{r4, r5, r6, pc}

0800a5a8 <__sfp_lock_acquire>:
 800a5a8:	4801      	ldr	r0, [pc, #4]	; (800a5b0 <__sfp_lock_acquire+0x8>)
 800a5aa:	f000 b8b3 	b.w	800a714 <__retarget_lock_acquire_recursive>
 800a5ae:	bf00      	nop
 800a5b0:	200004dc 	.word	0x200004dc

0800a5b4 <__sfp_lock_release>:
 800a5b4:	4801      	ldr	r0, [pc, #4]	; (800a5bc <__sfp_lock_release+0x8>)
 800a5b6:	f000 b8ae 	b.w	800a716 <__retarget_lock_release_recursive>
 800a5ba:	bf00      	nop
 800a5bc:	200004dc 	.word	0x200004dc

0800a5c0 <__sinit_lock_acquire>:
 800a5c0:	4801      	ldr	r0, [pc, #4]	; (800a5c8 <__sinit_lock_acquire+0x8>)
 800a5c2:	f000 b8a7 	b.w	800a714 <__retarget_lock_acquire_recursive>
 800a5c6:	bf00      	nop
 800a5c8:	200004d7 	.word	0x200004d7

0800a5cc <__sinit_lock_release>:
 800a5cc:	4801      	ldr	r0, [pc, #4]	; (800a5d4 <__sinit_lock_release+0x8>)
 800a5ce:	f000 b8a2 	b.w	800a716 <__retarget_lock_release_recursive>
 800a5d2:	bf00      	nop
 800a5d4:	200004d7 	.word	0x200004d7

0800a5d8 <__sinit>:
 800a5d8:	b510      	push	{r4, lr}
 800a5da:	4604      	mov	r4, r0
 800a5dc:	f7ff fff0 	bl	800a5c0 <__sinit_lock_acquire>
 800a5e0:	69a3      	ldr	r3, [r4, #24]
 800a5e2:	b11b      	cbz	r3, 800a5ec <__sinit+0x14>
 800a5e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5e8:	f7ff bff0 	b.w	800a5cc <__sinit_lock_release>
 800a5ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a5f0:	6523      	str	r3, [r4, #80]	; 0x50
 800a5f2:	4b13      	ldr	r3, [pc, #76]	; (800a640 <__sinit+0x68>)
 800a5f4:	4a13      	ldr	r2, [pc, #76]	; (800a644 <__sinit+0x6c>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a5fa:	42a3      	cmp	r3, r4
 800a5fc:	bf04      	itt	eq
 800a5fe:	2301      	moveq	r3, #1
 800a600:	61a3      	streq	r3, [r4, #24]
 800a602:	4620      	mov	r0, r4
 800a604:	f000 f820 	bl	800a648 <__sfp>
 800a608:	6060      	str	r0, [r4, #4]
 800a60a:	4620      	mov	r0, r4
 800a60c:	f000 f81c 	bl	800a648 <__sfp>
 800a610:	60a0      	str	r0, [r4, #8]
 800a612:	4620      	mov	r0, r4
 800a614:	f000 f818 	bl	800a648 <__sfp>
 800a618:	2200      	movs	r2, #0
 800a61a:	60e0      	str	r0, [r4, #12]
 800a61c:	2104      	movs	r1, #4
 800a61e:	6860      	ldr	r0, [r4, #4]
 800a620:	f7ff ff82 	bl	800a528 <std>
 800a624:	68a0      	ldr	r0, [r4, #8]
 800a626:	2201      	movs	r2, #1
 800a628:	2109      	movs	r1, #9
 800a62a:	f7ff ff7d 	bl	800a528 <std>
 800a62e:	68e0      	ldr	r0, [r4, #12]
 800a630:	2202      	movs	r2, #2
 800a632:	2112      	movs	r1, #18
 800a634:	f7ff ff78 	bl	800a528 <std>
 800a638:	2301      	movs	r3, #1
 800a63a:	61a3      	str	r3, [r4, #24]
 800a63c:	e7d2      	b.n	800a5e4 <__sinit+0xc>
 800a63e:	bf00      	nop
 800a640:	0800ac78 	.word	0x0800ac78
 800a644:	0800a571 	.word	0x0800a571

0800a648 <__sfp>:
 800a648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a64a:	4607      	mov	r7, r0
 800a64c:	f7ff ffac 	bl	800a5a8 <__sfp_lock_acquire>
 800a650:	4b1e      	ldr	r3, [pc, #120]	; (800a6cc <__sfp+0x84>)
 800a652:	681e      	ldr	r6, [r3, #0]
 800a654:	69b3      	ldr	r3, [r6, #24]
 800a656:	b913      	cbnz	r3, 800a65e <__sfp+0x16>
 800a658:	4630      	mov	r0, r6
 800a65a:	f7ff ffbd 	bl	800a5d8 <__sinit>
 800a65e:	3648      	adds	r6, #72	; 0x48
 800a660:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a664:	3b01      	subs	r3, #1
 800a666:	d503      	bpl.n	800a670 <__sfp+0x28>
 800a668:	6833      	ldr	r3, [r6, #0]
 800a66a:	b30b      	cbz	r3, 800a6b0 <__sfp+0x68>
 800a66c:	6836      	ldr	r6, [r6, #0]
 800a66e:	e7f7      	b.n	800a660 <__sfp+0x18>
 800a670:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a674:	b9d5      	cbnz	r5, 800a6ac <__sfp+0x64>
 800a676:	4b16      	ldr	r3, [pc, #88]	; (800a6d0 <__sfp+0x88>)
 800a678:	60e3      	str	r3, [r4, #12]
 800a67a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a67e:	6665      	str	r5, [r4, #100]	; 0x64
 800a680:	f000 f847 	bl	800a712 <__retarget_lock_init_recursive>
 800a684:	f7ff ff96 	bl	800a5b4 <__sfp_lock_release>
 800a688:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a68c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a690:	6025      	str	r5, [r4, #0]
 800a692:	61a5      	str	r5, [r4, #24]
 800a694:	2208      	movs	r2, #8
 800a696:	4629      	mov	r1, r5
 800a698:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a69c:	f7fb fd6c 	bl	8006178 <memset>
 800a6a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a6a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6ac:	3468      	adds	r4, #104	; 0x68
 800a6ae:	e7d9      	b.n	800a664 <__sfp+0x1c>
 800a6b0:	2104      	movs	r1, #4
 800a6b2:	4638      	mov	r0, r7
 800a6b4:	f7ff ff62 	bl	800a57c <__sfmoreglue>
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	6030      	str	r0, [r6, #0]
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	d1d5      	bne.n	800a66c <__sfp+0x24>
 800a6c0:	f7ff ff78 	bl	800a5b4 <__sfp_lock_release>
 800a6c4:	230c      	movs	r3, #12
 800a6c6:	603b      	str	r3, [r7, #0]
 800a6c8:	e7ee      	b.n	800a6a8 <__sfp+0x60>
 800a6ca:	bf00      	nop
 800a6cc:	0800ac78 	.word	0x0800ac78
 800a6d0:	ffff0001 	.word	0xffff0001

0800a6d4 <_fwalk_reent>:
 800a6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6d8:	4606      	mov	r6, r0
 800a6da:	4688      	mov	r8, r1
 800a6dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a6e0:	2700      	movs	r7, #0
 800a6e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6e6:	f1b9 0901 	subs.w	r9, r9, #1
 800a6ea:	d505      	bpl.n	800a6f8 <_fwalk_reent+0x24>
 800a6ec:	6824      	ldr	r4, [r4, #0]
 800a6ee:	2c00      	cmp	r4, #0
 800a6f0:	d1f7      	bne.n	800a6e2 <_fwalk_reent+0xe>
 800a6f2:	4638      	mov	r0, r7
 800a6f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6f8:	89ab      	ldrh	r3, [r5, #12]
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d907      	bls.n	800a70e <_fwalk_reent+0x3a>
 800a6fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a702:	3301      	adds	r3, #1
 800a704:	d003      	beq.n	800a70e <_fwalk_reent+0x3a>
 800a706:	4629      	mov	r1, r5
 800a708:	4630      	mov	r0, r6
 800a70a:	47c0      	blx	r8
 800a70c:	4307      	orrs	r7, r0
 800a70e:	3568      	adds	r5, #104	; 0x68
 800a710:	e7e9      	b.n	800a6e6 <_fwalk_reent+0x12>

0800a712 <__retarget_lock_init_recursive>:
 800a712:	4770      	bx	lr

0800a714 <__retarget_lock_acquire_recursive>:
 800a714:	4770      	bx	lr

0800a716 <__retarget_lock_release_recursive>:
 800a716:	4770      	bx	lr

0800a718 <__swhatbuf_r>:
 800a718:	b570      	push	{r4, r5, r6, lr}
 800a71a:	460e      	mov	r6, r1
 800a71c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a720:	2900      	cmp	r1, #0
 800a722:	b096      	sub	sp, #88	; 0x58
 800a724:	4614      	mov	r4, r2
 800a726:	461d      	mov	r5, r3
 800a728:	da07      	bge.n	800a73a <__swhatbuf_r+0x22>
 800a72a:	2300      	movs	r3, #0
 800a72c:	602b      	str	r3, [r5, #0]
 800a72e:	89b3      	ldrh	r3, [r6, #12]
 800a730:	061a      	lsls	r2, r3, #24
 800a732:	d410      	bmi.n	800a756 <__swhatbuf_r+0x3e>
 800a734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a738:	e00e      	b.n	800a758 <__swhatbuf_r+0x40>
 800a73a:	466a      	mov	r2, sp
 800a73c:	f000 f902 	bl	800a944 <_fstat_r>
 800a740:	2800      	cmp	r0, #0
 800a742:	dbf2      	blt.n	800a72a <__swhatbuf_r+0x12>
 800a744:	9a01      	ldr	r2, [sp, #4]
 800a746:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a74a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a74e:	425a      	negs	r2, r3
 800a750:	415a      	adcs	r2, r3
 800a752:	602a      	str	r2, [r5, #0]
 800a754:	e7ee      	b.n	800a734 <__swhatbuf_r+0x1c>
 800a756:	2340      	movs	r3, #64	; 0x40
 800a758:	2000      	movs	r0, #0
 800a75a:	6023      	str	r3, [r4, #0]
 800a75c:	b016      	add	sp, #88	; 0x58
 800a75e:	bd70      	pop	{r4, r5, r6, pc}

0800a760 <__smakebuf_r>:
 800a760:	898b      	ldrh	r3, [r1, #12]
 800a762:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a764:	079d      	lsls	r5, r3, #30
 800a766:	4606      	mov	r6, r0
 800a768:	460c      	mov	r4, r1
 800a76a:	d507      	bpl.n	800a77c <__smakebuf_r+0x1c>
 800a76c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a770:	6023      	str	r3, [r4, #0]
 800a772:	6123      	str	r3, [r4, #16]
 800a774:	2301      	movs	r3, #1
 800a776:	6163      	str	r3, [r4, #20]
 800a778:	b002      	add	sp, #8
 800a77a:	bd70      	pop	{r4, r5, r6, pc}
 800a77c:	ab01      	add	r3, sp, #4
 800a77e:	466a      	mov	r2, sp
 800a780:	f7ff ffca 	bl	800a718 <__swhatbuf_r>
 800a784:	9900      	ldr	r1, [sp, #0]
 800a786:	4605      	mov	r5, r0
 800a788:	4630      	mov	r0, r6
 800a78a:	f7ff f97f 	bl	8009a8c <_malloc_r>
 800a78e:	b948      	cbnz	r0, 800a7a4 <__smakebuf_r+0x44>
 800a790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a794:	059a      	lsls	r2, r3, #22
 800a796:	d4ef      	bmi.n	800a778 <__smakebuf_r+0x18>
 800a798:	f023 0303 	bic.w	r3, r3, #3
 800a79c:	f043 0302 	orr.w	r3, r3, #2
 800a7a0:	81a3      	strh	r3, [r4, #12]
 800a7a2:	e7e3      	b.n	800a76c <__smakebuf_r+0xc>
 800a7a4:	4b0d      	ldr	r3, [pc, #52]	; (800a7dc <__smakebuf_r+0x7c>)
 800a7a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a7a8:	89a3      	ldrh	r3, [r4, #12]
 800a7aa:	6020      	str	r0, [r4, #0]
 800a7ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7b0:	81a3      	strh	r3, [r4, #12]
 800a7b2:	9b00      	ldr	r3, [sp, #0]
 800a7b4:	6163      	str	r3, [r4, #20]
 800a7b6:	9b01      	ldr	r3, [sp, #4]
 800a7b8:	6120      	str	r0, [r4, #16]
 800a7ba:	b15b      	cbz	r3, 800a7d4 <__smakebuf_r+0x74>
 800a7bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	f000 f8d1 	bl	800a968 <_isatty_r>
 800a7c6:	b128      	cbz	r0, 800a7d4 <__smakebuf_r+0x74>
 800a7c8:	89a3      	ldrh	r3, [r4, #12]
 800a7ca:	f023 0303 	bic.w	r3, r3, #3
 800a7ce:	f043 0301 	orr.w	r3, r3, #1
 800a7d2:	81a3      	strh	r3, [r4, #12]
 800a7d4:	89a0      	ldrh	r0, [r4, #12]
 800a7d6:	4305      	orrs	r5, r0
 800a7d8:	81a5      	strh	r5, [r4, #12]
 800a7da:	e7cd      	b.n	800a778 <__smakebuf_r+0x18>
 800a7dc:	0800a571 	.word	0x0800a571

0800a7e0 <_malloc_usable_size_r>:
 800a7e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7e4:	1f18      	subs	r0, r3, #4
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	bfbc      	itt	lt
 800a7ea:	580b      	ldrlt	r3, [r1, r0]
 800a7ec:	18c0      	addlt	r0, r0, r3
 800a7ee:	4770      	bx	lr

0800a7f0 <_raise_r>:
 800a7f0:	291f      	cmp	r1, #31
 800a7f2:	b538      	push	{r3, r4, r5, lr}
 800a7f4:	4604      	mov	r4, r0
 800a7f6:	460d      	mov	r5, r1
 800a7f8:	d904      	bls.n	800a804 <_raise_r+0x14>
 800a7fa:	2316      	movs	r3, #22
 800a7fc:	6003      	str	r3, [r0, #0]
 800a7fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a802:	bd38      	pop	{r3, r4, r5, pc}
 800a804:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a806:	b112      	cbz	r2, 800a80e <_raise_r+0x1e>
 800a808:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a80c:	b94b      	cbnz	r3, 800a822 <_raise_r+0x32>
 800a80e:	4620      	mov	r0, r4
 800a810:	f000 f830 	bl	800a874 <_getpid_r>
 800a814:	462a      	mov	r2, r5
 800a816:	4601      	mov	r1, r0
 800a818:	4620      	mov	r0, r4
 800a81a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a81e:	f000 b817 	b.w	800a850 <_kill_r>
 800a822:	2b01      	cmp	r3, #1
 800a824:	d00a      	beq.n	800a83c <_raise_r+0x4c>
 800a826:	1c59      	adds	r1, r3, #1
 800a828:	d103      	bne.n	800a832 <_raise_r+0x42>
 800a82a:	2316      	movs	r3, #22
 800a82c:	6003      	str	r3, [r0, #0]
 800a82e:	2001      	movs	r0, #1
 800a830:	e7e7      	b.n	800a802 <_raise_r+0x12>
 800a832:	2400      	movs	r4, #0
 800a834:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a838:	4628      	mov	r0, r5
 800a83a:	4798      	blx	r3
 800a83c:	2000      	movs	r0, #0
 800a83e:	e7e0      	b.n	800a802 <_raise_r+0x12>

0800a840 <raise>:
 800a840:	4b02      	ldr	r3, [pc, #8]	; (800a84c <raise+0xc>)
 800a842:	4601      	mov	r1, r0
 800a844:	6818      	ldr	r0, [r3, #0]
 800a846:	f7ff bfd3 	b.w	800a7f0 <_raise_r>
 800a84a:	bf00      	nop
 800a84c:	20000010 	.word	0x20000010

0800a850 <_kill_r>:
 800a850:	b538      	push	{r3, r4, r5, lr}
 800a852:	4d07      	ldr	r5, [pc, #28]	; (800a870 <_kill_r+0x20>)
 800a854:	2300      	movs	r3, #0
 800a856:	4604      	mov	r4, r0
 800a858:	4608      	mov	r0, r1
 800a85a:	4611      	mov	r1, r2
 800a85c:	602b      	str	r3, [r5, #0]
 800a85e:	f7f7 fb3d 	bl	8001edc <_kill>
 800a862:	1c43      	adds	r3, r0, #1
 800a864:	d102      	bne.n	800a86c <_kill_r+0x1c>
 800a866:	682b      	ldr	r3, [r5, #0]
 800a868:	b103      	cbz	r3, 800a86c <_kill_r+0x1c>
 800a86a:	6023      	str	r3, [r4, #0]
 800a86c:	bd38      	pop	{r3, r4, r5, pc}
 800a86e:	bf00      	nop
 800a870:	200004d0 	.word	0x200004d0

0800a874 <_getpid_r>:
 800a874:	f7f7 bb2a 	b.w	8001ecc <_getpid>

0800a878 <__sread>:
 800a878:	b510      	push	{r4, lr}
 800a87a:	460c      	mov	r4, r1
 800a87c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a880:	f000 f894 	bl	800a9ac <_read_r>
 800a884:	2800      	cmp	r0, #0
 800a886:	bfab      	itete	ge
 800a888:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a88a:	89a3      	ldrhlt	r3, [r4, #12]
 800a88c:	181b      	addge	r3, r3, r0
 800a88e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a892:	bfac      	ite	ge
 800a894:	6563      	strge	r3, [r4, #84]	; 0x54
 800a896:	81a3      	strhlt	r3, [r4, #12]
 800a898:	bd10      	pop	{r4, pc}

0800a89a <__swrite>:
 800a89a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a89e:	461f      	mov	r7, r3
 800a8a0:	898b      	ldrh	r3, [r1, #12]
 800a8a2:	05db      	lsls	r3, r3, #23
 800a8a4:	4605      	mov	r5, r0
 800a8a6:	460c      	mov	r4, r1
 800a8a8:	4616      	mov	r6, r2
 800a8aa:	d505      	bpl.n	800a8b8 <__swrite+0x1e>
 800a8ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8b0:	2302      	movs	r3, #2
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f000 f868 	bl	800a988 <_lseek_r>
 800a8b8:	89a3      	ldrh	r3, [r4, #12]
 800a8ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8c2:	81a3      	strh	r3, [r4, #12]
 800a8c4:	4632      	mov	r2, r6
 800a8c6:	463b      	mov	r3, r7
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ce:	f000 b817 	b.w	800a900 <_write_r>

0800a8d2 <__sseek>:
 800a8d2:	b510      	push	{r4, lr}
 800a8d4:	460c      	mov	r4, r1
 800a8d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8da:	f000 f855 	bl	800a988 <_lseek_r>
 800a8de:	1c43      	adds	r3, r0, #1
 800a8e0:	89a3      	ldrh	r3, [r4, #12]
 800a8e2:	bf15      	itete	ne
 800a8e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a8e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a8ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8ee:	81a3      	strheq	r3, [r4, #12]
 800a8f0:	bf18      	it	ne
 800a8f2:	81a3      	strhne	r3, [r4, #12]
 800a8f4:	bd10      	pop	{r4, pc}

0800a8f6 <__sclose>:
 800a8f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8fa:	f000 b813 	b.w	800a924 <_close_r>
	...

0800a900 <_write_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	4d07      	ldr	r5, [pc, #28]	; (800a920 <_write_r+0x20>)
 800a904:	4604      	mov	r4, r0
 800a906:	4608      	mov	r0, r1
 800a908:	4611      	mov	r1, r2
 800a90a:	2200      	movs	r2, #0
 800a90c:	602a      	str	r2, [r5, #0]
 800a90e:	461a      	mov	r2, r3
 800a910:	f7f7 fb1b 	bl	8001f4a <_write>
 800a914:	1c43      	adds	r3, r0, #1
 800a916:	d102      	bne.n	800a91e <_write_r+0x1e>
 800a918:	682b      	ldr	r3, [r5, #0]
 800a91a:	b103      	cbz	r3, 800a91e <_write_r+0x1e>
 800a91c:	6023      	str	r3, [r4, #0]
 800a91e:	bd38      	pop	{r3, r4, r5, pc}
 800a920:	200004d0 	.word	0x200004d0

0800a924 <_close_r>:
 800a924:	b538      	push	{r3, r4, r5, lr}
 800a926:	4d06      	ldr	r5, [pc, #24]	; (800a940 <_close_r+0x1c>)
 800a928:	2300      	movs	r3, #0
 800a92a:	4604      	mov	r4, r0
 800a92c:	4608      	mov	r0, r1
 800a92e:	602b      	str	r3, [r5, #0]
 800a930:	f7f7 fb27 	bl	8001f82 <_close>
 800a934:	1c43      	adds	r3, r0, #1
 800a936:	d102      	bne.n	800a93e <_close_r+0x1a>
 800a938:	682b      	ldr	r3, [r5, #0]
 800a93a:	b103      	cbz	r3, 800a93e <_close_r+0x1a>
 800a93c:	6023      	str	r3, [r4, #0]
 800a93e:	bd38      	pop	{r3, r4, r5, pc}
 800a940:	200004d0 	.word	0x200004d0

0800a944 <_fstat_r>:
 800a944:	b538      	push	{r3, r4, r5, lr}
 800a946:	4d07      	ldr	r5, [pc, #28]	; (800a964 <_fstat_r+0x20>)
 800a948:	2300      	movs	r3, #0
 800a94a:	4604      	mov	r4, r0
 800a94c:	4608      	mov	r0, r1
 800a94e:	4611      	mov	r1, r2
 800a950:	602b      	str	r3, [r5, #0]
 800a952:	f7f7 fb22 	bl	8001f9a <_fstat>
 800a956:	1c43      	adds	r3, r0, #1
 800a958:	d102      	bne.n	800a960 <_fstat_r+0x1c>
 800a95a:	682b      	ldr	r3, [r5, #0]
 800a95c:	b103      	cbz	r3, 800a960 <_fstat_r+0x1c>
 800a95e:	6023      	str	r3, [r4, #0]
 800a960:	bd38      	pop	{r3, r4, r5, pc}
 800a962:	bf00      	nop
 800a964:	200004d0 	.word	0x200004d0

0800a968 <_isatty_r>:
 800a968:	b538      	push	{r3, r4, r5, lr}
 800a96a:	4d06      	ldr	r5, [pc, #24]	; (800a984 <_isatty_r+0x1c>)
 800a96c:	2300      	movs	r3, #0
 800a96e:	4604      	mov	r4, r0
 800a970:	4608      	mov	r0, r1
 800a972:	602b      	str	r3, [r5, #0]
 800a974:	f7f7 fb21 	bl	8001fba <_isatty>
 800a978:	1c43      	adds	r3, r0, #1
 800a97a:	d102      	bne.n	800a982 <_isatty_r+0x1a>
 800a97c:	682b      	ldr	r3, [r5, #0]
 800a97e:	b103      	cbz	r3, 800a982 <_isatty_r+0x1a>
 800a980:	6023      	str	r3, [r4, #0]
 800a982:	bd38      	pop	{r3, r4, r5, pc}
 800a984:	200004d0 	.word	0x200004d0

0800a988 <_lseek_r>:
 800a988:	b538      	push	{r3, r4, r5, lr}
 800a98a:	4d07      	ldr	r5, [pc, #28]	; (800a9a8 <_lseek_r+0x20>)
 800a98c:	4604      	mov	r4, r0
 800a98e:	4608      	mov	r0, r1
 800a990:	4611      	mov	r1, r2
 800a992:	2200      	movs	r2, #0
 800a994:	602a      	str	r2, [r5, #0]
 800a996:	461a      	mov	r2, r3
 800a998:	f7f7 fb1a 	bl	8001fd0 <_lseek>
 800a99c:	1c43      	adds	r3, r0, #1
 800a99e:	d102      	bne.n	800a9a6 <_lseek_r+0x1e>
 800a9a0:	682b      	ldr	r3, [r5, #0]
 800a9a2:	b103      	cbz	r3, 800a9a6 <_lseek_r+0x1e>
 800a9a4:	6023      	str	r3, [r4, #0]
 800a9a6:	bd38      	pop	{r3, r4, r5, pc}
 800a9a8:	200004d0 	.word	0x200004d0

0800a9ac <_read_r>:
 800a9ac:	b538      	push	{r3, r4, r5, lr}
 800a9ae:	4d07      	ldr	r5, [pc, #28]	; (800a9cc <_read_r+0x20>)
 800a9b0:	4604      	mov	r4, r0
 800a9b2:	4608      	mov	r0, r1
 800a9b4:	4611      	mov	r1, r2
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	602a      	str	r2, [r5, #0]
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	f7f7 faa8 	bl	8001f10 <_read>
 800a9c0:	1c43      	adds	r3, r0, #1
 800a9c2:	d102      	bne.n	800a9ca <_read_r+0x1e>
 800a9c4:	682b      	ldr	r3, [r5, #0]
 800a9c6:	b103      	cbz	r3, 800a9ca <_read_r+0x1e>
 800a9c8:	6023      	str	r3, [r4, #0]
 800a9ca:	bd38      	pop	{r3, r4, r5, pc}
 800a9cc:	200004d0 	.word	0x200004d0

0800a9d0 <_init>:
 800a9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9d2:	bf00      	nop
 800a9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9d6:	bc08      	pop	{r3}
 800a9d8:	469e      	mov	lr, r3
 800a9da:	4770      	bx	lr

0800a9dc <_fini>:
 800a9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9de:	bf00      	nop
 800a9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9e2:	bc08      	pop	{r3}
 800a9e4:	469e      	mov	lr, r3
 800a9e6:	4770      	bx	lr
