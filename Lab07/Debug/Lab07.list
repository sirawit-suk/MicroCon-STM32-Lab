
Lab07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007704  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080078b4  080078b4  000178b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078cc  080078cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080078cc  080078cc  000178cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078d4  080078d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078d4  080078d4  000178d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078d8  080078d8  000178d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080078dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000660  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000066c  2000066c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020c14  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004275  00000000  00000000  00040c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001980  00000000  00000000  00044ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017c0  00000000  00000000  00046848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000277ee  00000000  00000000  00048008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021a05  00000000  00000000  0006f7f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4128  00000000  00000000  000911fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00175323  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c34  00000000  00000000  00175378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800789c 	.word	0x0800789c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	0800789c 	.word	0x0800789c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_d2f>:
 8000568:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800056c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000570:	bf24      	itt	cs
 8000572:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000576:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800057a:	d90d      	bls.n	8000598 <__aeabi_d2f+0x30>
 800057c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000580:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000584:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000588:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800058c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000590:	bf08      	it	eq
 8000592:	f020 0001 	biceq.w	r0, r0, #1
 8000596:	4770      	bx	lr
 8000598:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800059c:	d121      	bne.n	80005e2 <__aeabi_d2f+0x7a>
 800059e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80005a2:	bfbc      	itt	lt
 80005a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80005a8:	4770      	bxlt	lr
 80005aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005b2:	f1c2 0218 	rsb	r2, r2, #24
 80005b6:	f1c2 0c20 	rsb	ip, r2, #32
 80005ba:	fa10 f30c 	lsls.w	r3, r0, ip
 80005be:	fa20 f002 	lsr.w	r0, r0, r2
 80005c2:	bf18      	it	ne
 80005c4:	f040 0001 	orrne.w	r0, r0, #1
 80005c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005d0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005d4:	ea40 000c 	orr.w	r0, r0, ip
 80005d8:	fa23 f302 	lsr.w	r3, r3, r2
 80005dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005e0:	e7cc      	b.n	800057c <__aeabi_d2f+0x14>
 80005e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005e6:	d107      	bne.n	80005f8 <__aeabi_d2f+0x90>
 80005e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005ec:	bf1e      	ittt	ne
 80005ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005f6:	4770      	bxne	lr
 80005f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000600:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <__aeabi_uldivmod>:
 8000608:	b953      	cbnz	r3, 8000620 <__aeabi_uldivmod+0x18>
 800060a:	b94a      	cbnz	r2, 8000620 <__aeabi_uldivmod+0x18>
 800060c:	2900      	cmp	r1, #0
 800060e:	bf08      	it	eq
 8000610:	2800      	cmpeq	r0, #0
 8000612:	bf1c      	itt	ne
 8000614:	f04f 31ff 	movne.w	r1, #4294967295
 8000618:	f04f 30ff 	movne.w	r0, #4294967295
 800061c:	f000 b96e 	b.w	80008fc <__aeabi_idiv0>
 8000620:	f1ad 0c08 	sub.w	ip, sp, #8
 8000624:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000628:	f000 f806 	bl	8000638 <__udivmoddi4>
 800062c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000634:	b004      	add	sp, #16
 8000636:	4770      	bx	lr

08000638 <__udivmoddi4>:
 8000638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800063c:	9d08      	ldr	r5, [sp, #32]
 800063e:	4604      	mov	r4, r0
 8000640:	468c      	mov	ip, r1
 8000642:	2b00      	cmp	r3, #0
 8000644:	f040 8083 	bne.w	800074e <__udivmoddi4+0x116>
 8000648:	428a      	cmp	r2, r1
 800064a:	4617      	mov	r7, r2
 800064c:	d947      	bls.n	80006de <__udivmoddi4+0xa6>
 800064e:	fab2 f282 	clz	r2, r2
 8000652:	b142      	cbz	r2, 8000666 <__udivmoddi4+0x2e>
 8000654:	f1c2 0020 	rsb	r0, r2, #32
 8000658:	fa24 f000 	lsr.w	r0, r4, r0
 800065c:	4091      	lsls	r1, r2
 800065e:	4097      	lsls	r7, r2
 8000660:	ea40 0c01 	orr.w	ip, r0, r1
 8000664:	4094      	lsls	r4, r2
 8000666:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800066a:	0c23      	lsrs	r3, r4, #16
 800066c:	fbbc f6f8 	udiv	r6, ip, r8
 8000670:	fa1f fe87 	uxth.w	lr, r7
 8000674:	fb08 c116 	mls	r1, r8, r6, ip
 8000678:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800067c:	fb06 f10e 	mul.w	r1, r6, lr
 8000680:	4299      	cmp	r1, r3
 8000682:	d909      	bls.n	8000698 <__udivmoddi4+0x60>
 8000684:	18fb      	adds	r3, r7, r3
 8000686:	f106 30ff 	add.w	r0, r6, #4294967295
 800068a:	f080 8119 	bcs.w	80008c0 <__udivmoddi4+0x288>
 800068e:	4299      	cmp	r1, r3
 8000690:	f240 8116 	bls.w	80008c0 <__udivmoddi4+0x288>
 8000694:	3e02      	subs	r6, #2
 8000696:	443b      	add	r3, r7
 8000698:	1a5b      	subs	r3, r3, r1
 800069a:	b2a4      	uxth	r4, r4
 800069c:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a0:	fb08 3310 	mls	r3, r8, r0, r3
 80006a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ac:	45a6      	cmp	lr, r4
 80006ae:	d909      	bls.n	80006c4 <__udivmoddi4+0x8c>
 80006b0:	193c      	adds	r4, r7, r4
 80006b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006b6:	f080 8105 	bcs.w	80008c4 <__udivmoddi4+0x28c>
 80006ba:	45a6      	cmp	lr, r4
 80006bc:	f240 8102 	bls.w	80008c4 <__udivmoddi4+0x28c>
 80006c0:	3802      	subs	r0, #2
 80006c2:	443c      	add	r4, r7
 80006c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80006c8:	eba4 040e 	sub.w	r4, r4, lr
 80006cc:	2600      	movs	r6, #0
 80006ce:	b11d      	cbz	r5, 80006d8 <__udivmoddi4+0xa0>
 80006d0:	40d4      	lsrs	r4, r2
 80006d2:	2300      	movs	r3, #0
 80006d4:	e9c5 4300 	strd	r4, r3, [r5]
 80006d8:	4631      	mov	r1, r6
 80006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006de:	b902      	cbnz	r2, 80006e2 <__udivmoddi4+0xaa>
 80006e0:	deff      	udf	#255	; 0xff
 80006e2:	fab2 f282 	clz	r2, r2
 80006e6:	2a00      	cmp	r2, #0
 80006e8:	d150      	bne.n	800078c <__udivmoddi4+0x154>
 80006ea:	1bcb      	subs	r3, r1, r7
 80006ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006f0:	fa1f f887 	uxth.w	r8, r7
 80006f4:	2601      	movs	r6, #1
 80006f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80006fa:	0c21      	lsrs	r1, r4, #16
 80006fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000700:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000704:	fb08 f30c 	mul.w	r3, r8, ip
 8000708:	428b      	cmp	r3, r1
 800070a:	d907      	bls.n	800071c <__udivmoddi4+0xe4>
 800070c:	1879      	adds	r1, r7, r1
 800070e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000712:	d202      	bcs.n	800071a <__udivmoddi4+0xe2>
 8000714:	428b      	cmp	r3, r1
 8000716:	f200 80e9 	bhi.w	80008ec <__udivmoddi4+0x2b4>
 800071a:	4684      	mov	ip, r0
 800071c:	1ac9      	subs	r1, r1, r3
 800071e:	b2a3      	uxth	r3, r4
 8000720:	fbb1 f0fe 	udiv	r0, r1, lr
 8000724:	fb0e 1110 	mls	r1, lr, r0, r1
 8000728:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800072c:	fb08 f800 	mul.w	r8, r8, r0
 8000730:	45a0      	cmp	r8, r4
 8000732:	d907      	bls.n	8000744 <__udivmoddi4+0x10c>
 8000734:	193c      	adds	r4, r7, r4
 8000736:	f100 33ff 	add.w	r3, r0, #4294967295
 800073a:	d202      	bcs.n	8000742 <__udivmoddi4+0x10a>
 800073c:	45a0      	cmp	r8, r4
 800073e:	f200 80d9 	bhi.w	80008f4 <__udivmoddi4+0x2bc>
 8000742:	4618      	mov	r0, r3
 8000744:	eba4 0408 	sub.w	r4, r4, r8
 8000748:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800074c:	e7bf      	b.n	80006ce <__udivmoddi4+0x96>
 800074e:	428b      	cmp	r3, r1
 8000750:	d909      	bls.n	8000766 <__udivmoddi4+0x12e>
 8000752:	2d00      	cmp	r5, #0
 8000754:	f000 80b1 	beq.w	80008ba <__udivmoddi4+0x282>
 8000758:	2600      	movs	r6, #0
 800075a:	e9c5 0100 	strd	r0, r1, [r5]
 800075e:	4630      	mov	r0, r6
 8000760:	4631      	mov	r1, r6
 8000762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000766:	fab3 f683 	clz	r6, r3
 800076a:	2e00      	cmp	r6, #0
 800076c:	d14a      	bne.n	8000804 <__udivmoddi4+0x1cc>
 800076e:	428b      	cmp	r3, r1
 8000770:	d302      	bcc.n	8000778 <__udivmoddi4+0x140>
 8000772:	4282      	cmp	r2, r0
 8000774:	f200 80b8 	bhi.w	80008e8 <__udivmoddi4+0x2b0>
 8000778:	1a84      	subs	r4, r0, r2
 800077a:	eb61 0103 	sbc.w	r1, r1, r3
 800077e:	2001      	movs	r0, #1
 8000780:	468c      	mov	ip, r1
 8000782:	2d00      	cmp	r5, #0
 8000784:	d0a8      	beq.n	80006d8 <__udivmoddi4+0xa0>
 8000786:	e9c5 4c00 	strd	r4, ip, [r5]
 800078a:	e7a5      	b.n	80006d8 <__udivmoddi4+0xa0>
 800078c:	f1c2 0320 	rsb	r3, r2, #32
 8000790:	fa20 f603 	lsr.w	r6, r0, r3
 8000794:	4097      	lsls	r7, r2
 8000796:	fa01 f002 	lsl.w	r0, r1, r2
 800079a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800079e:	40d9      	lsrs	r1, r3
 80007a0:	4330      	orrs	r0, r6
 80007a2:	0c03      	lsrs	r3, r0, #16
 80007a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007a8:	fa1f f887 	uxth.w	r8, r7
 80007ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80007b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007b4:	fb06 f108 	mul.w	r1, r6, r8
 80007b8:	4299      	cmp	r1, r3
 80007ba:	fa04 f402 	lsl.w	r4, r4, r2
 80007be:	d909      	bls.n	80007d4 <__udivmoddi4+0x19c>
 80007c0:	18fb      	adds	r3, r7, r3
 80007c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80007c6:	f080 808d 	bcs.w	80008e4 <__udivmoddi4+0x2ac>
 80007ca:	4299      	cmp	r1, r3
 80007cc:	f240 808a 	bls.w	80008e4 <__udivmoddi4+0x2ac>
 80007d0:	3e02      	subs	r6, #2
 80007d2:	443b      	add	r3, r7
 80007d4:	1a5b      	subs	r3, r3, r1
 80007d6:	b281      	uxth	r1, r0
 80007d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80007dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80007e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007e4:	fb00 f308 	mul.w	r3, r0, r8
 80007e8:	428b      	cmp	r3, r1
 80007ea:	d907      	bls.n	80007fc <__udivmoddi4+0x1c4>
 80007ec:	1879      	adds	r1, r7, r1
 80007ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80007f2:	d273      	bcs.n	80008dc <__udivmoddi4+0x2a4>
 80007f4:	428b      	cmp	r3, r1
 80007f6:	d971      	bls.n	80008dc <__udivmoddi4+0x2a4>
 80007f8:	3802      	subs	r0, #2
 80007fa:	4439      	add	r1, r7
 80007fc:	1acb      	subs	r3, r1, r3
 80007fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000802:	e778      	b.n	80006f6 <__udivmoddi4+0xbe>
 8000804:	f1c6 0c20 	rsb	ip, r6, #32
 8000808:	fa03 f406 	lsl.w	r4, r3, r6
 800080c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000810:	431c      	orrs	r4, r3
 8000812:	fa20 f70c 	lsr.w	r7, r0, ip
 8000816:	fa01 f306 	lsl.w	r3, r1, r6
 800081a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800081e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000822:	431f      	orrs	r7, r3
 8000824:	0c3b      	lsrs	r3, r7, #16
 8000826:	fbb1 f9fe 	udiv	r9, r1, lr
 800082a:	fa1f f884 	uxth.w	r8, r4
 800082e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000832:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000836:	fb09 fa08 	mul.w	sl, r9, r8
 800083a:	458a      	cmp	sl, r1
 800083c:	fa02 f206 	lsl.w	r2, r2, r6
 8000840:	fa00 f306 	lsl.w	r3, r0, r6
 8000844:	d908      	bls.n	8000858 <__udivmoddi4+0x220>
 8000846:	1861      	adds	r1, r4, r1
 8000848:	f109 30ff 	add.w	r0, r9, #4294967295
 800084c:	d248      	bcs.n	80008e0 <__udivmoddi4+0x2a8>
 800084e:	458a      	cmp	sl, r1
 8000850:	d946      	bls.n	80008e0 <__udivmoddi4+0x2a8>
 8000852:	f1a9 0902 	sub.w	r9, r9, #2
 8000856:	4421      	add	r1, r4
 8000858:	eba1 010a 	sub.w	r1, r1, sl
 800085c:	b2bf      	uxth	r7, r7
 800085e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000862:	fb0e 1110 	mls	r1, lr, r0, r1
 8000866:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800086a:	fb00 f808 	mul.w	r8, r0, r8
 800086e:	45b8      	cmp	r8, r7
 8000870:	d907      	bls.n	8000882 <__udivmoddi4+0x24a>
 8000872:	19e7      	adds	r7, r4, r7
 8000874:	f100 31ff 	add.w	r1, r0, #4294967295
 8000878:	d22e      	bcs.n	80008d8 <__udivmoddi4+0x2a0>
 800087a:	45b8      	cmp	r8, r7
 800087c:	d92c      	bls.n	80008d8 <__udivmoddi4+0x2a0>
 800087e:	3802      	subs	r0, #2
 8000880:	4427      	add	r7, r4
 8000882:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000886:	eba7 0708 	sub.w	r7, r7, r8
 800088a:	fba0 8902 	umull	r8, r9, r0, r2
 800088e:	454f      	cmp	r7, r9
 8000890:	46c6      	mov	lr, r8
 8000892:	4649      	mov	r1, r9
 8000894:	d31a      	bcc.n	80008cc <__udivmoddi4+0x294>
 8000896:	d017      	beq.n	80008c8 <__udivmoddi4+0x290>
 8000898:	b15d      	cbz	r5, 80008b2 <__udivmoddi4+0x27a>
 800089a:	ebb3 020e 	subs.w	r2, r3, lr
 800089e:	eb67 0701 	sbc.w	r7, r7, r1
 80008a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008a6:	40f2      	lsrs	r2, r6
 80008a8:	ea4c 0202 	orr.w	r2, ip, r2
 80008ac:	40f7      	lsrs	r7, r6
 80008ae:	e9c5 2700 	strd	r2, r7, [r5]
 80008b2:	2600      	movs	r6, #0
 80008b4:	4631      	mov	r1, r6
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	462e      	mov	r6, r5
 80008bc:	4628      	mov	r0, r5
 80008be:	e70b      	b.n	80006d8 <__udivmoddi4+0xa0>
 80008c0:	4606      	mov	r6, r0
 80008c2:	e6e9      	b.n	8000698 <__udivmoddi4+0x60>
 80008c4:	4618      	mov	r0, r3
 80008c6:	e6fd      	b.n	80006c4 <__udivmoddi4+0x8c>
 80008c8:	4543      	cmp	r3, r8
 80008ca:	d2e5      	bcs.n	8000898 <__udivmoddi4+0x260>
 80008cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80008d0:	eb69 0104 	sbc.w	r1, r9, r4
 80008d4:	3801      	subs	r0, #1
 80008d6:	e7df      	b.n	8000898 <__udivmoddi4+0x260>
 80008d8:	4608      	mov	r0, r1
 80008da:	e7d2      	b.n	8000882 <__udivmoddi4+0x24a>
 80008dc:	4660      	mov	r0, ip
 80008de:	e78d      	b.n	80007fc <__udivmoddi4+0x1c4>
 80008e0:	4681      	mov	r9, r0
 80008e2:	e7b9      	b.n	8000858 <__udivmoddi4+0x220>
 80008e4:	4666      	mov	r6, ip
 80008e6:	e775      	b.n	80007d4 <__udivmoddi4+0x19c>
 80008e8:	4630      	mov	r0, r6
 80008ea:	e74a      	b.n	8000782 <__udivmoddi4+0x14a>
 80008ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80008f0:	4439      	add	r1, r7
 80008f2:	e713      	b.n	800071c <__udivmoddi4+0xe4>
 80008f4:	3802      	subs	r0, #2
 80008f6:	443c      	add	r4, r7
 80008f8:	e724      	b.n	8000744 <__udivmoddi4+0x10c>
 80008fa:	bf00      	nop

080008fc <__aeabi_idiv0>:
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop

08000900 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_CRC_Init+0x20>)
 8000906:	4a07      	ldr	r2, [pc, #28]	; (8000924 <MX_CRC_Init+0x24>)
 8000908:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_CRC_Init+0x20>)
 800090c:	f001 fc52 	bl	80021b4 <HAL_CRC_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000916:	f000 fe5f 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2000002c 	.word	0x2000002c
 8000924:	40023000 	.word	0x40023000

08000928 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <HAL_CRC_MspInit+0x3c>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d10d      	bne.n	8000956 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b0a      	ldr	r3, [pc, #40]	; (8000968 <HAL_CRC_MspInit+0x40>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a09      	ldr	r2, [pc, #36]	; (8000968 <HAL_CRC_MspInit+0x40>)
 8000944:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b07      	ldr	r3, [pc, #28]	; (8000968 <HAL_CRC_MspInit+0x40>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000956:	bf00      	nop
 8000958:	3714      	adds	r7, #20
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40023000 	.word	0x40023000
 8000968:	40023800 	.word	0x40023800

0800096c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_DMA2D_Init+0x5c>)
 8000972:	4a16      	ldr	r2, [pc, #88]	; (80009cc <MX_DMA2D_Init+0x60>)
 8000974:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_DMA2D_Init+0x5c>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_DMA2D_Init+0x5c>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_DMA2D_Init+0x5c>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_DMA2D_Init+0x5c>)
 800098a:	2200      	movs	r2, #0
 800098c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_DMA2D_Init+0x5c>)
 8000990:	2200      	movs	r2, #0
 8000992:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_DMA2D_Init+0x5c>)
 8000996:	2200      	movs	r2, #0
 8000998:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_DMA2D_Init+0x5c>)
 800099c:	2200      	movs	r2, #0
 800099e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009a0:	4809      	ldr	r0, [pc, #36]	; (80009c8 <MX_DMA2D_Init+0x5c>)
 80009a2:	f001 fc23 	bl	80021ec <HAL_DMA2D_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80009ac:	f000 fe14 	bl	80015d8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009b0:	2101      	movs	r1, #1
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_DMA2D_Init+0x5c>)
 80009b4:	f001 fd74 	bl	80024a0 <HAL_DMA2D_ConfigLayer>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80009be:	f000 fe0b 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000034 	.word	0x20000034
 80009cc:	4002b000 	.word	0x4002b000

080009d0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <HAL_DMA2D_MspInit+0x48>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d115      	bne.n	8000a0e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <HAL_DMA2D_MspInit+0x4c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a0c      	ldr	r2, [pc, #48]	; (8000a1c <HAL_DMA2D_MspInit+0x4c>)
 80009ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_DMA2D_MspInit+0x4c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2105      	movs	r1, #5
 8000a02:	205a      	movs	r0, #90	; 0x5a
 8000a04:	f001 fbac 	bl	8002160 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000a08:	205a      	movs	r0, #90	; 0x5a
 8000a0a:	f001 fbc5 	bl	8002198 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000a0e:	bf00      	nop
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	4002b000 	.word	0x4002b000
 8000a1c:	40023800 	.word	0x40023800

08000a20 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
 8000a34:	615a      	str	r2, [r3, #20]
 8000a36:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a38:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <MX_FMC_Init+0x98>)
 8000a3a:	4a20      	ldr	r2, [pc, #128]	; (8000abc <MX_FMC_Init+0x9c>)
 8000a3c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <MX_FMC_Init+0x98>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <MX_FMC_Init+0x98>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <MX_FMC_Init+0x98>)
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a50:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <MX_FMC_Init+0x98>)
 8000a52:	2210      	movs	r2, #16
 8000a54:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <MX_FMC_Init+0x98>)
 8000a58:	2240      	movs	r2, #64	; 0x40
 8000a5a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_FMC_Init+0x98>)
 8000a5e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000a62:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_FMC_Init+0x98>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MX_FMC_Init+0x98>)
 8000a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a70:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_FMC_Init+0x98>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_FMC_Init+0x98>)
 8000a7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a7e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a84:	2307      	movs	r3, #7
 8000a86:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a88:	2304      	movs	r3, #4
 8000a8a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a8c:	2307      	movs	r3, #7
 8000a8e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a90:	2303      	movs	r3, #3
 8000a92:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a94:	2302      	movs	r3, #2
 8000a96:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_FMC_Init+0x98>)
 8000aa2:	f004 fdf5 	bl	8005690 <HAL_SDRAM_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000aac:	f000 fd94 	bl	80015d8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000ab0:	bf00      	nop
 8000ab2:	3720      	adds	r7, #32
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000074 	.word	0x20000074
 8000abc:	a0000140 	.word	0xa0000140

08000ac0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000ad4:	4b3b      	ldr	r3, [pc, #236]	; (8000bc4 <HAL_FMC_MspInit+0x104>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d16f      	bne.n	8000bbc <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000adc:	4b39      	ldr	r3, [pc, #228]	; (8000bc4 <HAL_FMC_MspInit+0x104>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	4b38      	ldr	r3, [pc, #224]	; (8000bc8 <HAL_FMC_MspInit+0x108>)
 8000ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aea:	4a37      	ldr	r2, [pc, #220]	; (8000bc8 <HAL_FMC_MspInit+0x108>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6393      	str	r3, [r2, #56]	; 0x38
 8000af2:	4b35      	ldr	r3, [pc, #212]	; (8000bc8 <HAL_FMC_MspInit+0x108>)
 8000af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000afe:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000b02:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b10:	230c      	movs	r3, #12
 8000b12:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	4619      	mov	r1, r3
 8000b18:	482c      	ldr	r0, [pc, #176]	; (8000bcc <HAL_FMC_MspInit+0x10c>)
 8000b1a:	f001 fd53 	bl	80025c4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b2e:	230c      	movs	r3, #12
 8000b30:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	4619      	mov	r1, r3
 8000b36:	4826      	ldr	r0, [pc, #152]	; (8000bd0 <HAL_FMC_MspInit+0x110>)
 8000b38:	f001 fd44 	bl	80025c4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000b3c:	f248 1333 	movw	r3, #33075	; 0x8133
 8000b40:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b4e:	230c      	movs	r3, #12
 8000b50:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	4619      	mov	r1, r3
 8000b56:	481f      	ldr	r0, [pc, #124]	; (8000bd4 <HAL_FMC_MspInit+0x114>)
 8000b58:	f001 fd34 	bl	80025c4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000b5c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000b60:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b6e:	230c      	movs	r3, #12
 8000b70:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	4619      	mov	r1, r3
 8000b76:	4818      	ldr	r0, [pc, #96]	; (8000bd8 <HAL_FMC_MspInit+0x118>)
 8000b78:	f001 fd24 	bl	80025c4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000b7c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000b80:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b8e:	230c      	movs	r3, #12
 8000b90:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	4619      	mov	r1, r3
 8000b96:	4811      	ldr	r0, [pc, #68]	; (8000bdc <HAL_FMC_MspInit+0x11c>)
 8000b98:	f001 fd14 	bl	80025c4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000b9c:	2360      	movs	r3, #96	; 0x60
 8000b9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bac:	230c      	movs	r3, #12
 8000bae:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480a      	ldr	r0, [pc, #40]	; (8000be0 <HAL_FMC_MspInit+0x120>)
 8000bb6:	f001 fd05 	bl	80025c4 <HAL_GPIO_Init>
 8000bba:	e000      	b.n	8000bbe <HAL_FMC_MspInit+0xfe>
    return;
 8000bbc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000028 	.word	0x20000028
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40021400 	.word	0x40021400
 8000bd0:	40020800 	.word	0x40020800
 8000bd4:	40021800 	.word	0x40021800
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40020c00 	.word	0x40020c00
 8000be0:	40020400 	.word	0x40020400

08000be4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000bec:	f7ff ff68 	bl	8000ac0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08e      	sub	sp, #56	; 0x38
 8000bfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
 8000c12:	4b7b      	ldr	r3, [pc, #492]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	4a7a      	ldr	r2, [pc, #488]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c18:	f043 0304 	orr.w	r3, r3, #4
 8000c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1e:	4b78      	ldr	r3, [pc, #480]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	623b      	str	r3, [r7, #32]
 8000c28:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	4b74      	ldr	r3, [pc, #464]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a73      	ldr	r2, [pc, #460]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c34:	f043 0320 	orr.w	r3, r3, #32
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b71      	ldr	r3, [pc, #452]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0320 	and.w	r3, r3, #32
 8000c42:	61fb      	str	r3, [r7, #28]
 8000c44:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	4b6d      	ldr	r3, [pc, #436]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a6c      	ldr	r2, [pc, #432]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b6a      	ldr	r3, [pc, #424]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c5e:	61bb      	str	r3, [r7, #24]
 8000c60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
 8000c66:	4b66      	ldr	r3, [pc, #408]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a65      	ldr	r2, [pc, #404]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b63      	ldr	r3, [pc, #396]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4b5f      	ldr	r3, [pc, #380]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a5e      	ldr	r2, [pc, #376]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b5c      	ldr	r3, [pc, #368]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b58      	ldr	r3, [pc, #352]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a57      	ldr	r2, [pc, #348]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b55      	ldr	r3, [pc, #340]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	4b51      	ldr	r3, [pc, #324]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a50      	ldr	r2, [pc, #320]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000cc0:	f043 0310 	orr.w	r3, r3, #16
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b4e      	ldr	r3, [pc, #312]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0310 	and.w	r3, r3, #16
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	4b4a      	ldr	r3, [pc, #296]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a49      	ldr	r2, [pc, #292]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000cdc:	f043 0308 	orr.w	r3, r3, #8
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b47      	ldr	r3, [pc, #284]	; (8000e00 <MX_GPIO_Init+0x208>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0308 	and.w	r3, r3, #8
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2116      	movs	r1, #22
 8000cf2:	4844      	ldr	r0, [pc, #272]	; (8000e04 <MX_GPIO_Init+0x20c>)
 8000cf4:	f001 fe12 	bl	800291c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2180      	movs	r1, #128	; 0x80
 8000cfc:	4842      	ldr	r0, [pc, #264]	; (8000e08 <MX_GPIO_Init+0x210>)
 8000cfe:	f001 fe0d 	bl	800291c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000d08:	4840      	ldr	r0, [pc, #256]	; (8000e0c <MX_GPIO_Init+0x214>)
 8000d0a:	f001 fe07 	bl	800291c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000d14:	483e      	ldr	r0, [pc, #248]	; (8000e10 <MX_GPIO_Init+0x218>)
 8000d16:	f001 fe01 	bl	800291c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000d1a:	2316      	movs	r3, #22
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4834      	ldr	r0, [pc, #208]	; (8000e04 <MX_GPIO_Init+0x20c>)
 8000d32:	f001 fc47 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000d36:	f248 0307 	movw	r3, #32775	; 0x8007
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d3c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	482e      	ldr	r0, [pc, #184]	; (8000e08 <MX_GPIO_Init+0x210>)
 8000d4e:	f001 fc39 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d66:	4619      	mov	r1, r3
 8000d68:	4827      	ldr	r0, [pc, #156]	; (8000e08 <MX_GPIO_Init+0x210>)
 8000d6a:	f001 fc2b 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000d6e:	2320      	movs	r3, #32
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d72:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d80:	4619      	mov	r1, r3
 8000d82:	4820      	ldr	r0, [pc, #128]	; (8000e04 <MX_GPIO_Init+0x20c>)
 8000d84:	f001 fc1e 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d88:	2304      	movs	r3, #4
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d98:	4619      	mov	r1, r3
 8000d9a:	481e      	ldr	r0, [pc, #120]	; (8000e14 <MX_GPIO_Init+0x21c>)
 8000d9c:	f001 fc12 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000da0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db2:	4619      	mov	r1, r3
 8000db4:	4815      	ldr	r0, [pc, #84]	; (8000e0c <MX_GPIO_Init+0x214>)
 8000db6:	f001 fc05 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000dba:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480e      	ldr	r0, [pc, #56]	; (8000e0c <MX_GPIO_Init+0x214>)
 8000dd4:	f001 fbf6 	bl	80025c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000dd8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dee:	4619      	mov	r1, r3
 8000df0:	4807      	ldr	r0, [pc, #28]	; (8000e10 <MX_GPIO_Init+0x218>)
 8000df2:	f001 fbe7 	bl	80025c4 <HAL_GPIO_Init>

}
 8000df6:	bf00      	nop
 8000df8:	3738      	adds	r7, #56	; 0x38
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020800 	.word	0x40020800
 8000e08:	40020000 	.word	0x40020000
 8000e0c:	40020c00 	.word	0x40020c00
 8000e10:	40021800 	.word	0x40021800
 8000e14:	40020400 	.word	0x40020400

08000e18 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <MX_I2C3_Init+0x74>)
 8000e1e:	4a1c      	ldr	r2, [pc, #112]	; (8000e90 <MX_I2C3_Init+0x78>)
 8000e20:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000e22:	4b1a      	ldr	r3, [pc, #104]	; (8000e8c <MX_I2C3_Init+0x74>)
 8000e24:	4a1b      	ldr	r2, [pc, #108]	; (8000e94 <MX_I2C3_Init+0x7c>)
 8000e26:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e28:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <MX_I2C3_Init+0x74>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000e2e:	4b17      	ldr	r3, [pc, #92]	; (8000e8c <MX_I2C3_Init+0x74>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e34:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <MX_I2C3_Init+0x74>)
 8000e36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e3a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <MX_I2C3_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <MX_I2C3_Init+0x74>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <MX_I2C3_Init+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_I2C3_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e54:	480d      	ldr	r0, [pc, #52]	; (8000e8c <MX_I2C3_Init+0x74>)
 8000e56:	f003 f88f 	bl	8003f78 <HAL_I2C_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000e60:	f000 fbba 	bl	80015d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e64:	2100      	movs	r1, #0
 8000e66:	4809      	ldr	r0, [pc, #36]	; (8000e8c <MX_I2C3_Init+0x74>)
 8000e68:	f003 f9ca 	bl	8004200 <HAL_I2CEx_ConfigAnalogFilter>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000e72:	f000 fbb1 	bl	80015d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e76:	2100      	movs	r1, #0
 8000e78:	4804      	ldr	r0, [pc, #16]	; (8000e8c <MX_I2C3_Init+0x74>)
 8000e7a:	f003 f9fd 	bl	8004278 <HAL_I2CEx_ConfigDigitalFilter>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000e84:	f000 fba8 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	200000a8 	.word	0x200000a8
 8000e90:	40005c00 	.word	0x40005c00
 8000e94:	000186a0 	.word	0x000186a0

08000e98 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a29      	ldr	r2, [pc, #164]	; (8000f5c <HAL_I2C_MspInit+0xc4>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d14b      	bne.n	8000f52 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	4b28      	ldr	r3, [pc, #160]	; (8000f60 <HAL_I2C_MspInit+0xc8>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a27      	ldr	r2, [pc, #156]	; (8000f60 <HAL_I2C_MspInit+0xc8>)
 8000ec4:	f043 0304 	orr.w	r3, r3, #4
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b25      	ldr	r3, [pc, #148]	; (8000f60 <HAL_I2C_MspInit+0xc8>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0304 	and.w	r3, r3, #4
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	4b21      	ldr	r3, [pc, #132]	; (8000f60 <HAL_I2C_MspInit+0xc8>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a20      	ldr	r2, [pc, #128]	; (8000f60 <HAL_I2C_MspInit+0xc8>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b1e      	ldr	r3, [pc, #120]	; (8000f60 <HAL_I2C_MspInit+0xc8>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000ef2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef8:	2312      	movs	r3, #18
 8000efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f00:	2300      	movs	r3, #0
 8000f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f04:	2304      	movs	r3, #4
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4815      	ldr	r0, [pc, #84]	; (8000f64 <HAL_I2C_MspInit+0xcc>)
 8000f10:	f001 fb58 	bl	80025c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f1a:	2312      	movs	r3, #18
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f26:	2304      	movs	r3, #4
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <HAL_I2C_MspInit+0xd0>)
 8000f32:	f001 fb47 	bl	80025c4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_I2C_MspInit+0xc8>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a08      	ldr	r2, [pc, #32]	; (8000f60 <HAL_I2C_MspInit+0xc8>)
 8000f40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_I2C_MspInit+0xc8>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000f52:	bf00      	nop
 8000f54:	3728      	adds	r7, #40	; 0x28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40005c00 	.word	0x40005c00
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020800 	.word	0x40020800
 8000f68:	40020000 	.word	0x40020000

08000f6c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08e      	sub	sp, #56	; 0x38
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2234      	movs	r2, #52	; 0x34
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f006 fc87 	bl	800788c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f7e:	4b39      	ldr	r3, [pc, #228]	; (8001064 <MX_LTDC_Init+0xf8>)
 8000f80:	4a39      	ldr	r2, [pc, #228]	; (8001068 <MX_LTDC_Init+0xfc>)
 8000f82:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f84:	4b37      	ldr	r3, [pc, #220]	; (8001064 <MX_LTDC_Init+0xf8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f8a:	4b36      	ldr	r3, [pc, #216]	; (8001064 <MX_LTDC_Init+0xf8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f90:	4b34      	ldr	r3, [pc, #208]	; (8001064 <MX_LTDC_Init+0xf8>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f96:	4b33      	ldr	r3, [pc, #204]	; (8001064 <MX_LTDC_Init+0xf8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000f9c:	4b31      	ldr	r3, [pc, #196]	; (8001064 <MX_LTDC_Init+0xf8>)
 8000f9e:	2209      	movs	r2, #9
 8000fa0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000fa2:	4b30      	ldr	r3, [pc, #192]	; (8001064 <MX_LTDC_Init+0xf8>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000fa8:	4b2e      	ldr	r3, [pc, #184]	; (8001064 <MX_LTDC_Init+0xf8>)
 8000faa:	221d      	movs	r2, #29
 8000fac:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000fae:	4b2d      	ldr	r3, [pc, #180]	; (8001064 <MX_LTDC_Init+0xf8>)
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000fb4:	4b2b      	ldr	r3, [pc, #172]	; (8001064 <MX_LTDC_Init+0xf8>)
 8000fb6:	f240 120d 	movw	r2, #269	; 0x10d
 8000fba:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000fbc:	4b29      	ldr	r3, [pc, #164]	; (8001064 <MX_LTDC_Init+0xf8>)
 8000fbe:	f240 1243 	movw	r2, #323	; 0x143
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000fc4:	4b27      	ldr	r3, [pc, #156]	; (8001064 <MX_LTDC_Init+0xf8>)
 8000fc6:	f240 1217 	movw	r2, #279	; 0x117
 8000fca:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000fcc:	4b25      	ldr	r3, [pc, #148]	; (8001064 <MX_LTDC_Init+0xf8>)
 8000fce:	f240 1247 	movw	r2, #327	; 0x147
 8000fd2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fd4:	4b23      	ldr	r3, [pc, #140]	; (8001064 <MX_LTDC_Init+0xf8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000fdc:	4b21      	ldr	r3, [pc, #132]	; (8001064 <MX_LTDC_Init+0xf8>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <MX_LTDC_Init+0xf8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fec:	481d      	ldr	r0, [pc, #116]	; (8001064 <MX_LTDC_Init+0xf8>)
 8000fee:	f003 f983 	bl	80042f8 <HAL_LTDC_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000ff8:	f000 faee 	bl	80015d8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8001000:	23f0      	movs	r3, #240	; 0xf0
 8001002:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001008:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800100c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800100e:	2302      	movs	r3, #2
 8001010:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001012:	23ff      	movs	r3, #255	; 0xff
 8001014:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800101a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800101e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001020:	2307      	movs	r3, #7
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001024:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 800102a:	23f0      	movs	r3, #240	; 0xf0
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800102e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001032:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2200      	movs	r2, #0
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_LTDC_Init+0xf8>)
 800104e:	f003 fae5 	bl	800461c <HAL_LTDC_ConfigLayer>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8001058:	f000 fabe 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	3738      	adds	r7, #56	; 0x38
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200000fc 	.word	0x200000fc
 8001068:	40016800 	.word	0x40016800

0800106c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b09a      	sub	sp, #104	; 0x68
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001088:	2230      	movs	r2, #48	; 0x30
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f006 fbfd 	bl	800788c <memset>
  if(ltdcHandle->Instance==LTDC)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a85      	ldr	r2, [pc, #532]	; (80012ac <HAL_LTDC_MspInit+0x240>)
 8001098:	4293      	cmp	r3, r2
 800109a:	f040 8102 	bne.w	80012a2 <HAL_LTDC_MspInit+0x236>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800109e:	2308      	movs	r3, #8
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80010a2:	2332      	movs	r3, #50	; 0x32
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80010a6:	2302      	movs	r3, #2
 80010a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80010aa:	2300      	movs	r3, #0
 80010ac:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b2:	4618      	mov	r0, r3
 80010b4:	f004 f92e 	bl	8005314 <HAL_RCCEx_PeriphCLKConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80010be:	f000 fa8b 	bl	80015d8 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
 80010c6:	4b7a      	ldr	r3, [pc, #488]	; (80012b0 <HAL_LTDC_MspInit+0x244>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	4a79      	ldr	r2, [pc, #484]	; (80012b0 <HAL_LTDC_MspInit+0x244>)
 80010cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010d0:	6453      	str	r3, [r2, #68]	; 0x44
 80010d2:	4b77      	ldr	r3, [pc, #476]	; (80012b0 <HAL_LTDC_MspInit+0x244>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010da:	623b      	str	r3, [r7, #32]
 80010dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
 80010e2:	4b73      	ldr	r3, [pc, #460]	; (80012b0 <HAL_LTDC_MspInit+0x244>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a72      	ldr	r2, [pc, #456]	; (80012b0 <HAL_LTDC_MspInit+0x244>)
 80010e8:	f043 0320 	orr.w	r3, r3, #32
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b70      	ldr	r3, [pc, #448]	; (80012b0 <HAL_LTDC_MspInit+0x244>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0320 	and.w	r3, r3, #32
 80010f6:	61fb      	str	r3, [r7, #28]
 80010f8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
 80010fe:	4b6c      	ldr	r3, [pc, #432]	; (80012b0 <HAL_LTDC_MspInit+0x244>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a6b      	ldr	r2, [pc, #428]	; (80012b0 <HAL_LTDC_MspInit+0x244>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b69      	ldr	r3, [pc, #420]	; (80012b0 <HAL_LTDC_MspInit+0x244>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	61bb      	str	r3, [r7, #24]
 8001114:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
 800111a:	4b65      	ldr	r3, [pc, #404]	; (80012b0 <HAL_LTDC_MspInit+0x244>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a64      	ldr	r2, [pc, #400]	; (80012b0 <HAL_LTDC_MspInit+0x244>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b62      	ldr	r3, [pc, #392]	; (80012b0 <HAL_LTDC_MspInit+0x244>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	4b5e      	ldr	r3, [pc, #376]	; (80012b0 <HAL_LTDC_MspInit+0x244>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a5d      	ldr	r2, [pc, #372]	; (80012b0 <HAL_LTDC_MspInit+0x244>)
 800113c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b5b      	ldr	r3, [pc, #364]	; (80012b0 <HAL_LTDC_MspInit+0x244>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	4b57      	ldr	r3, [pc, #348]	; (80012b0 <HAL_LTDC_MspInit+0x244>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a56      	ldr	r2, [pc, #344]	; (80012b0 <HAL_LTDC_MspInit+0x244>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b54      	ldr	r3, [pc, #336]	; (80012b0 <HAL_LTDC_MspInit+0x244>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	4b50      	ldr	r3, [pc, #320]	; (80012b0 <HAL_LTDC_MspInit+0x244>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a4f      	ldr	r2, [pc, #316]	; (80012b0 <HAL_LTDC_MspInit+0x244>)
 8001174:	f043 0308 	orr.w	r3, r3, #8
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b4d      	ldr	r3, [pc, #308]	; (80012b0 <HAL_LTDC_MspInit+0x244>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800118a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001198:	230e      	movs	r3, #14
 800119a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011a0:	4619      	mov	r1, r3
 80011a2:	4844      	ldr	r0, [pc, #272]	; (80012b4 <HAL_LTDC_MspInit+0x248>)
 80011a4:	f001 fa0e 	bl	80025c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80011a8:	f641 0358 	movw	r3, #6232	; 0x1858
 80011ac:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011ba:	230e      	movs	r3, #14
 80011bc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011c2:	4619      	mov	r1, r3
 80011c4:	483c      	ldr	r0, [pc, #240]	; (80012b8 <HAL_LTDC_MspInit+0x24c>)
 80011c6:	f001 f9fd 	bl	80025c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80011ca:	2303      	movs	r3, #3
 80011cc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011da:	2309      	movs	r3, #9
 80011dc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011e2:	4619      	mov	r1, r3
 80011e4:	4835      	ldr	r0, [pc, #212]	; (80012bc <HAL_LTDC_MspInit+0x250>)
 80011e6:	f001 f9ed 	bl	80025c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80011ea:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80011ee:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011fc:	230e      	movs	r3, #14
 80011fe:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001200:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001204:	4619      	mov	r1, r3
 8001206:	482d      	ldr	r0, [pc, #180]	; (80012bc <HAL_LTDC_MspInit+0x250>)
 8001208:	f001 f9dc 	bl	80025c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800120c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001210:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800121e:	230e      	movs	r3, #14
 8001220:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001222:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001226:	4619      	mov	r1, r3
 8001228:	4825      	ldr	r0, [pc, #148]	; (80012c0 <HAL_LTDC_MspInit+0x254>)
 800122a:	f001 f9cb 	bl	80025c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800122e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001232:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001240:	230e      	movs	r3, #14
 8001242:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001244:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001248:	4619      	mov	r1, r3
 800124a:	481e      	ldr	r0, [pc, #120]	; (80012c4 <HAL_LTDC_MspInit+0x258>)
 800124c:	f001 f9ba 	bl	80025c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001250:	2348      	movs	r3, #72	; 0x48
 8001252:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001260:	230e      	movs	r3, #14
 8001262:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001264:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001268:	4619      	mov	r1, r3
 800126a:	4817      	ldr	r0, [pc, #92]	; (80012c8 <HAL_LTDC_MspInit+0x25c>)
 800126c:	f001 f9aa 	bl	80025c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001270:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001274:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127e:	2300      	movs	r3, #0
 8001280:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001282:	2309      	movs	r3, #9
 8001284:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001286:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800128a:	4619      	mov	r1, r3
 800128c:	480c      	ldr	r0, [pc, #48]	; (80012c0 <HAL_LTDC_MspInit+0x254>)
 800128e:	f001 f999 	bl	80025c4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2105      	movs	r1, #5
 8001296:	2058      	movs	r0, #88	; 0x58
 8001298:	f000 ff62 	bl	8002160 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800129c:	2058      	movs	r0, #88	; 0x58
 800129e:	f000 ff7b 	bl	8002198 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80012a2:	bf00      	nop
 80012a4:	3768      	adds	r7, #104	; 0x68
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40016800 	.word	0x40016800
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40021400 	.word	0x40021400
 80012b8:	40020000 	.word	0x40020000
 80012bc:	40020400 	.word	0x40020400
 80012c0:	40021800 	.word	0x40021800
 80012c4:	40020800 	.word	0x40020800
 80012c8:	40020c00 	.word	0x40020c00
 80012cc:	00000000 	.word	0x00000000

080012d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012d6:	f000 fe25 	bl	8001f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012da:	f000 f8ff 	bl	80014dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012de:	f7ff fc8b 	bl	8000bf8 <MX_GPIO_Init>
  MX_CRC_Init();
 80012e2:	f7ff fb0d 	bl	8000900 <MX_CRC_Init>
  MX_DMA2D_Init();
 80012e6:	f7ff fb41 	bl	800096c <MX_DMA2D_Init>
  MX_FMC_Init();
 80012ea:	f7ff fb99 	bl	8000a20 <MX_FMC_Init>
  MX_I2C3_Init();
 80012ee:	f7ff fd93 	bl	8000e18 <MX_I2C3_Init>
  MX_LTDC_Init();
 80012f2:	f7ff fe3b 	bl	8000f6c <MX_LTDC_Init>
  MX_SPI5_Init();
 80012f6:	f000 f975 	bl	80015e4 <MX_SPI5_Init>
  MX_TIM1_Init();
 80012fa:	f000 fad9 	bl	80018b0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80012fe:	f000 fceb 	bl	8001cd8 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 8001302:	f000 fd5b 	bl	8001dbc <MX_USB_OTG_HS_HCD_Init>
  MX_TIM2_Init();
 8001306:	f000 fb23 	bl	8001950 <MX_TIM2_Init>
  MX_TIM3_Init();
 800130a:	f000 fba3 	bl	8001a54 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  float dutyCycleR = 0.0;
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  float dutyCycleG = 0.0;
 8001314:	f04f 0300 	mov.w	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
  float dutyCycleB = 0.0;
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
//	  HAL_Delay(100);
//	  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
//	  pwm = (GPIOB-> IDR & GPIO_PIN_3) >> 3;

	  //No. 2
	  htim2.Instance -> CCR2 = (10000-1) * dutyCycleR;
 8001320:	edd7 7a03 	vldr	s15, [r7, #12]
 8001324:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80014b8 <main+0x1e8>
 8001328:	ee67 7a87 	vmul.f32	s15, s15, s14
 800132c:	4b63      	ldr	r3, [pc, #396]	; (80014bc <main+0x1ec>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001334:	ee17 2a90 	vmov	r2, s15
 8001338:	639a      	str	r2, [r3, #56]	; 0x38
	  htim2.Instance -> CCR1 = (10000-1) * dutyCycleG;
 800133a:	edd7 7a02 	vldr	s15, [r7, #8]
 800133e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80014b8 <main+0x1e8>
 8001342:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001346:	4b5d      	ldr	r3, [pc, #372]	; (80014bc <main+0x1ec>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800134e:	ee17 2a90 	vmov	r2, s15
 8001352:	635a      	str	r2, [r3, #52]	; 0x34
	  htim3.Instance -> CCR1 = (10000-1) * dutyCycleB;
 8001354:	edd7 7a01 	vldr	s15, [r7, #4]
 8001358:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80014b8 <main+0x1e8>
 800135c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001360:	4b57      	ldr	r3, [pc, #348]	; (80014c0 <main+0x1f0>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001368:	ee17 2a90 	vmov	r2, s15
 800136c:	635a      	str	r2, [r3, #52]	; 0x34

	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800136e:	2104      	movs	r1, #4
 8001370:	4852      	ldr	r0, [pc, #328]	; (80014bc <main+0x1ec>)
 8001372:	f004 fb63 	bl	8005a3c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001376:	2100      	movs	r1, #0
 8001378:	4850      	ldr	r0, [pc, #320]	; (80014bc <main+0x1ec>)
 800137a:	f004 fb5f 	bl	8005a3c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800137e:	2100      	movs	r1, #0
 8001380:	484f      	ldr	r0, [pc, #316]	; (80014c0 <main+0x1f0>)
 8001382:	f004 fb5b 	bl	8005a3c <HAL_TIM_PWM_Start>

	  //Waiting Receive...
	  while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE)== RESET) {
 8001386:	e01e      	b.n	80013c6 <main+0xf6>
		  pwmR = ((GPIOB-> IDR & GPIO_PIN_3) >> 3);
 8001388:	4b4e      	ldr	r3, [pc, #312]	; (80014c4 <main+0x1f4>)
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	08db      	lsrs	r3, r3, #3
 800138e:	b2db      	uxtb	r3, r3
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4b4c      	ldr	r3, [pc, #304]	; (80014c8 <main+0x1f8>)
 8001398:	701a      	strb	r2, [r3, #0]
		  pwmG = ((GPIOA-> IDR & GPIO_PIN_5) >> 5)+1;
 800139a:	4b4c      	ldr	r3, [pc, #304]	; (80014cc <main+0x1fc>)
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	3301      	adds	r3, #1
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	4b48      	ldr	r3, [pc, #288]	; (80014d0 <main+0x200>)
 80013ae:	701a      	strb	r2, [r3, #0]
		  pwmB = ((GPIOB-> IDR & GPIO_PIN_4) >> 4)+2;
 80013b0:	4b44      	ldr	r3, [pc, #272]	; (80014c4 <main+0x1f4>)
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	091b      	lsrs	r3, r3, #4
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	3302      	adds	r3, #2
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	4b44      	ldr	r3, [pc, #272]	; (80014d4 <main+0x204>)
 80013c4:	701a      	strb	r2, [r3, #0]
	  while(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE)== RESET) {
 80013c6:	4b44      	ldr	r3, [pc, #272]	; (80014d8 <main+0x208>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0320 	and.w	r3, r3, #32
 80013d0:	2b20      	cmp	r3, #32
 80013d2:	d1d9      	bne.n	8001388 <main+0xb8>
	  }
	  HAL_UART_Receive(&huart1, (uint8_t*) &ch, 1, 1000);
 80013d4:	1cf9      	adds	r1, r7, #3
 80013d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013da:	2201      	movs	r2, #1
 80013dc:	483e      	ldr	r0, [pc, #248]	; (80014d8 <main+0x208>)
 80013de:	f005 fa9c 	bl	800691a <HAL_UART_Receive>

	  switch(ch){
 80013e2:	78fb      	ldrb	r3, [r7, #3]
 80013e4:	2b72      	cmp	r3, #114	; 0x72
 80013e6:	d006      	beq.n	80013f6 <main+0x126>
 80013e8:	2b72      	cmp	r3, #114	; 0x72
 80013ea:	dc99      	bgt.n	8001320 <main+0x50>
 80013ec:	2b62      	cmp	r3, #98	; 0x62
 80013ee:	d03e      	beq.n	800146e <main+0x19e>
 80013f0:	2b67      	cmp	r3, #103	; 0x67
 80013f2:	d01e      	beq.n	8001432 <main+0x162>
 80013f4:	e059      	b.n	80014aa <main+0x1da>
	  case 'r':
		  dutyCycleR += 0.2;
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f7ff f85e 	bl	80004b8 <__aeabi_f2d>
 80013fc:	a32c      	add	r3, pc, #176	; (adr r3, 80014b0 <main+0x1e0>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	f7fe fefb 	bl	80001fc <__adddf3>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f7ff f8ab 	bl	8000568 <__aeabi_d2f>
 8001412:	4603      	mov	r3, r0
 8001414:	60fb      	str	r3, [r7, #12]
		  if(dutyCycleR > 1.0){
 8001416:	edd7 7a03 	vldr	s15, [r7, #12]
 800141a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800141e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001426:	dc00      	bgt.n	800142a <main+0x15a>
			  dutyCycleR = 0.0;
		  }
		  break;
 8001428:	e03f      	b.n	80014aa <main+0x1da>
			  dutyCycleR = 0.0;
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
		  break;
 8001430:	e03b      	b.n	80014aa <main+0x1da>
	  case 'g':
		  dutyCycleG += 0.2;
 8001432:	68b8      	ldr	r0, [r7, #8]
 8001434:	f7ff f840 	bl	80004b8 <__aeabi_f2d>
 8001438:	a31d      	add	r3, pc, #116	; (adr r3, 80014b0 <main+0x1e0>)
 800143a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143e:	f7fe fedd 	bl	80001fc <__adddf3>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4610      	mov	r0, r2
 8001448:	4619      	mov	r1, r3
 800144a:	f7ff f88d 	bl	8000568 <__aeabi_d2f>
 800144e:	4603      	mov	r3, r0
 8001450:	60bb      	str	r3, [r7, #8]
		  if(dutyCycleG > 1.0){
 8001452:	edd7 7a02 	vldr	s15, [r7, #8]
 8001456:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800145a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800145e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001462:	dc00      	bgt.n	8001466 <main+0x196>
			  dutyCycleG = 0.0;
		  }
		  break;
 8001464:	e021      	b.n	80014aa <main+0x1da>
			  dutyCycleG = 0.0;
 8001466:	f04f 0300 	mov.w	r3, #0
 800146a:	60bb      	str	r3, [r7, #8]
		  break;
 800146c:	e01d      	b.n	80014aa <main+0x1da>
	  case 'b':
		  dutyCycleB += 0.2;
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff f822 	bl	80004b8 <__aeabi_f2d>
 8001474:	a30e      	add	r3, pc, #56	; (adr r3, 80014b0 <main+0x1e0>)
 8001476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147a:	f7fe febf 	bl	80001fc <__adddf3>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f7ff f86f 	bl	8000568 <__aeabi_d2f>
 800148a:	4603      	mov	r3, r0
 800148c:	607b      	str	r3, [r7, #4]
		  if(dutyCycleB > 1.0){
 800148e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800149a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149e:	dc00      	bgt.n	80014a2 <main+0x1d2>
			  dutyCycleB = 0.0;
		  }
		  break;
 80014a0:	e002      	b.n	80014a8 <main+0x1d8>
			  dutyCycleB = 0.0;
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	607b      	str	r3, [r7, #4]
		  break;
 80014a8:	bf00      	nop
  {
 80014aa:	e739      	b.n	8001320 <main+0x50>
 80014ac:	f3af 8000 	nop.w
 80014b0:	9999999a 	.word	0x9999999a
 80014b4:	3fc99999 	.word	0x3fc99999
 80014b8:	461c3c00 	.word	0x461c3c00
 80014bc:	200002d8 	.word	0x200002d8
 80014c0:	20000248 	.word	0x20000248
 80014c4:	40020400 	.word	0x40020400
 80014c8:	200001a5 	.word	0x200001a5
 80014cc:	40020000 	.word	0x40020000
 80014d0:	200001a6 	.word	0x200001a6
 80014d4:	200001a4 	.word	0x200001a4
 80014d8:	20000320 	.word	0x20000320

080014dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b094      	sub	sp, #80	; 0x50
 80014e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e2:	f107 0320 	add.w	r3, r7, #32
 80014e6:	2230      	movs	r2, #48	; 0x30
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f006 f9ce 	bl	800788c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001500:	2300      	movs	r3, #0
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	4b29      	ldr	r3, [pc, #164]	; (80015ac <SystemClock_Config+0xd0>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	4a28      	ldr	r2, [pc, #160]	; (80015ac <SystemClock_Config+0xd0>)
 800150a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150e:	6413      	str	r3, [r2, #64]	; 0x40
 8001510:	4b26      	ldr	r3, [pc, #152]	; (80015ac <SystemClock_Config+0xd0>)
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800151c:	2300      	movs	r3, #0
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <SystemClock_Config+0xd4>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001528:	4a21      	ldr	r2, [pc, #132]	; (80015b0 <SystemClock_Config+0xd4>)
 800152a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <SystemClock_Config+0xd4>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800153c:	2301      	movs	r3, #1
 800153e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001546:	2302      	movs	r3, #2
 8001548:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800154a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800154e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001550:	2304      	movs	r3, #4
 8001552:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001554:	2378      	movs	r3, #120	; 0x78
 8001556:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001558:	2302      	movs	r3, #2
 800155a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800155c:	2305      	movs	r3, #5
 800155e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001560:	f107 0320 	add.w	r3, r7, #32
 8001564:	4618      	mov	r0, r3
 8001566:	f003 fa2f 	bl	80049c8 <HAL_RCC_OscConfig>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001570:	f000 f832 	bl	80015d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001574:	230f      	movs	r3, #15
 8001576:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001578:	2302      	movs	r3, #2
 800157a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001580:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001584:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001586:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	2103      	movs	r1, #3
 8001592:	4618      	mov	r0, r3
 8001594:	f003 fc90 	bl	8004eb8 <HAL_RCC_ClockConfig>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800159e:	f000 f81b 	bl	80015d8 <Error_Handler>
  }
}
 80015a2:	bf00      	nop
 80015a4:	3750      	adds	r7, #80	; 0x50
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40007000 	.word	0x40007000

080015b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015c6:	f000 fccf 	bl	8001f68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40001000 	.word	0x40001000

080015d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015dc:	b672      	cpsid	i
}
 80015de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <Error_Handler+0x8>
	...

080015e4 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <MX_SPI5_Init+0x64>)
 80015ea:	4a18      	ldr	r2, [pc, #96]	; (800164c <MX_SPI5_Init+0x68>)
 80015ec:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80015ee:	4b16      	ldr	r3, [pc, #88]	; (8001648 <MX_SPI5_Init+0x64>)
 80015f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015f4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <MX_SPI5_Init+0x64>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <MX_SPI5_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_SPI5_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <MX_SPI5_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <MX_SPI5_Init+0x64>)
 8001610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001614:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <MX_SPI5_Init+0x64>)
 8001618:	2218      	movs	r2, #24
 800161a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <MX_SPI5_Init+0x64>)
 800161e:	2200      	movs	r2, #0
 8001620:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <MX_SPI5_Init+0x64>)
 8001624:	2200      	movs	r2, #0
 8001626:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001628:	4b07      	ldr	r3, [pc, #28]	; (8001648 <MX_SPI5_Init+0x64>)
 800162a:	2200      	movs	r2, #0
 800162c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <MX_SPI5_Init+0x64>)
 8001630:	220a      	movs	r2, #10
 8001632:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001634:	4804      	ldr	r0, [pc, #16]	; (8001648 <MX_SPI5_Init+0x64>)
 8001636:	f004 f85f 	bl	80056f8 <HAL_SPI_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001640:	f7ff ffca 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200001a8 	.word	0x200001a8
 800164c:	40015000 	.word	0x40015000

08001650 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	; 0x28
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <HAL_SPI_MspInit+0x84>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d12c      	bne.n	80016cc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <HAL_SPI_MspInit+0x88>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <HAL_SPI_MspInit+0x88>)
 800167c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001680:	6453      	str	r3, [r2, #68]	; 0x44
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <HAL_SPI_MspInit+0x88>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168a:	613b      	str	r3, [r7, #16]
 800168c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_SPI_MspInit+0x88>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a10      	ldr	r2, [pc, #64]	; (80016d8 <HAL_SPI_MspInit+0x88>)
 8001698:	f043 0320 	orr.w	r3, r3, #32
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <HAL_SPI_MspInit+0x88>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0320 	and.w	r3, r3, #32
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80016aa:	f44f 7360 	mov.w	r3, #896	; 0x380
 80016ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80016bc:	2305      	movs	r3, #5
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <HAL_SPI_MspInit+0x8c>)
 80016c8:	f000 ff7c 	bl	80025c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80016cc:	bf00      	nop
 80016ce:	3728      	adds	r7, #40	; 0x28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40015000 	.word	0x40015000
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40021400 	.word	0x40021400

080016e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	4b10      	ldr	r3, [pc, #64]	; (800172c <HAL_MspInit+0x4c>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	4a0f      	ldr	r2, [pc, #60]	; (800172c <HAL_MspInit+0x4c>)
 80016f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f4:	6453      	str	r3, [r2, #68]	; 0x44
 80016f6:	4b0d      	ldr	r3, [pc, #52]	; (800172c <HAL_MspInit+0x4c>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	603b      	str	r3, [r7, #0]
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <HAL_MspInit+0x4c>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	4a08      	ldr	r2, [pc, #32]	; (800172c <HAL_MspInit+0x4c>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_MspInit+0x4c>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800

08001730 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08c      	sub	sp, #48	; 0x30
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001740:	2200      	movs	r2, #0
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	2036      	movs	r0, #54	; 0x36
 8001746:	f000 fd0b 	bl	8002160 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800174a:	2036      	movs	r0, #54	; 0x36
 800174c:	f000 fd24 	bl	8002198 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001750:	2300      	movs	r3, #0
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <HAL_InitTick+0xa4>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	4a1e      	ldr	r2, [pc, #120]	; (80017d4 <HAL_InitTick+0xa4>)
 800175a:	f043 0310 	orr.w	r3, r3, #16
 800175e:	6413      	str	r3, [r2, #64]	; 0x40
 8001760:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <HAL_InitTick+0xa4>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800176c:	f107 0210 	add.w	r2, r7, #16
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f003 fd9a 	bl	80052b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800177c:	f003 fd70 	bl	8005260 <HAL_RCC_GetPCLK1Freq>
 8001780:	4603      	mov	r3, r0
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001788:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <HAL_InitTick+0xa8>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	0c9b      	lsrs	r3, r3, #18
 8001790:	3b01      	subs	r3, #1
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <HAL_InitTick+0xac>)
 8001796:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <HAL_InitTick+0xb0>)
 8001798:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <HAL_InitTick+0xac>)
 800179c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017a0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017a2:	4a0e      	ldr	r2, [pc, #56]	; (80017dc <HAL_InitTick+0xac>)
 80017a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <HAL_InitTick+0xac>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_InitTick+0xac>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80017b4:	4809      	ldr	r0, [pc, #36]	; (80017dc <HAL_InitTick+0xac>)
 80017b6:	f004 f828 	bl	800580a <HAL_TIM_Base_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d104      	bne.n	80017ca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80017c0:	4806      	ldr	r0, [pc, #24]	; (80017dc <HAL_InitTick+0xac>)
 80017c2:	f004 f871 	bl	80058a8 <HAL_TIM_Base_Start_IT>
 80017c6:	4603      	mov	r3, r0
 80017c8:	e000      	b.n	80017cc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3730      	adds	r7, #48	; 0x30
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40023800 	.word	0x40023800
 80017d8:	431bde83 	.word	0x431bde83
 80017dc:	20000200 	.word	0x20000200
 80017e0:	40001000 	.word	0x40001000

080017e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017e8:	e7fe      	b.n	80017e8 <NMI_Handler+0x4>

080017ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ee:	e7fe      	b.n	80017ee <HardFault_Handler+0x4>

080017f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <MemManage_Handler+0x4>

080017f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <BusFault_Handler+0x4>

080017fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <UsageFault_Handler+0x4>

08001802 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <TIM6_DAC_IRQHandler+0x10>)
 8001842:	f004 f9c3 	bl	8005bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000200 	.word	0x20000200

08001850 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <OTG_HS_IRQHandler+0x10>)
 8001856:	f001 f8dc 	bl	8002a12 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000364 	.word	0x20000364

08001864 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <LTDC_IRQHandler+0x10>)
 800186a:	f002 fe15 	bl	8004498 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	200000fc 	.word	0x200000fc

08001878 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <DMA2D_IRQHandler+0x10>)
 800187e:	f000 fcfe 	bl	800227e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000034 	.word	0x20000034

0800188c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <SystemInit+0x20>)
 8001892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001896:	4a05      	ldr	r2, [pc, #20]	; (80018ac <SystemInit+0x20>)
 8001898:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800189c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018b6:	f107 0308 	add.w	r3, r7, #8
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c4:	463b      	mov	r3, r7
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018cc:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <MX_TIM1_Init+0x98>)
 80018ce:	4a1f      	ldr	r2, [pc, #124]	; (800194c <MX_TIM1_Init+0x9c>)
 80018d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018d2:	4b1d      	ldr	r3, [pc, #116]	; (8001948 <MX_TIM1_Init+0x98>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d8:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <MX_TIM1_Init+0x98>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018de:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <MX_TIM1_Init+0x98>)
 80018e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e6:	4b18      	ldr	r3, [pc, #96]	; (8001948 <MX_TIM1_Init+0x98>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018ec:	4b16      	ldr	r3, [pc, #88]	; (8001948 <MX_TIM1_Init+0x98>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f2:	4b15      	ldr	r3, [pc, #84]	; (8001948 <MX_TIM1_Init+0x98>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018f8:	4813      	ldr	r0, [pc, #76]	; (8001948 <MX_TIM1_Init+0x98>)
 80018fa:	f003 ff86 	bl	800580a <HAL_TIM_Base_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001904:	f7ff fe68 	bl	80015d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800190e:	f107 0308 	add.w	r3, r7, #8
 8001912:	4619      	mov	r1, r3
 8001914:	480c      	ldr	r0, [pc, #48]	; (8001948 <MX_TIM1_Init+0x98>)
 8001916:	f004 fb23 	bl	8005f60 <HAL_TIM_ConfigClockSource>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001920:	f7ff fe5a 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001924:	2300      	movs	r3, #0
 8001926:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800192c:	463b      	mov	r3, r7
 800192e:	4619      	mov	r1, r3
 8001930:	4805      	ldr	r0, [pc, #20]	; (8001948 <MX_TIM1_Init+0x98>)
 8001932:	f004 ff15 	bl	8006760 <HAL_TIMEx_MasterConfigSynchronization>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800193c:	f7ff fe4c 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000290 	.word	0x20000290
 800194c:	40010000 	.word	0x40010000

08001950 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08e      	sub	sp, #56	; 0x38
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001956:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001964:	f107 0320 	add.w	r3, r7, #32
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
 800197c:	615a      	str	r2, [r3, #20]
 800197e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001980:	4b33      	ldr	r3, [pc, #204]	; (8001a50 <MX_TIM2_Init+0x100>)
 8001982:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001986:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 600-1;
 8001988:	4b31      	ldr	r3, [pc, #196]	; (8001a50 <MX_TIM2_Init+0x100>)
 800198a:	f240 2257 	movw	r2, #599	; 0x257
 800198e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001990:	4b2f      	ldr	r3, [pc, #188]	; (8001a50 <MX_TIM2_Init+0x100>)
 8001992:	2200      	movs	r2, #0
 8001994:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001996:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <MX_TIM2_Init+0x100>)
 8001998:	f242 720f 	movw	r2, #9999	; 0x270f
 800199c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800199e:	4b2c      	ldr	r3, [pc, #176]	; (8001a50 <MX_TIM2_Init+0x100>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a4:	4b2a      	ldr	r3, [pc, #168]	; (8001a50 <MX_TIM2_Init+0x100>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019aa:	4829      	ldr	r0, [pc, #164]	; (8001a50 <MX_TIM2_Init+0x100>)
 80019ac:	f003 ff2d 	bl	800580a <HAL_TIM_Base_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80019b6:	f7ff fe0f 	bl	80015d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019c4:	4619      	mov	r1, r3
 80019c6:	4822      	ldr	r0, [pc, #136]	; (8001a50 <MX_TIM2_Init+0x100>)
 80019c8:	f004 faca 	bl	8005f60 <HAL_TIM_ConfigClockSource>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80019d2:	f7ff fe01 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019d6:	481e      	ldr	r0, [pc, #120]	; (8001a50 <MX_TIM2_Init+0x100>)
 80019d8:	f003 ffd6 	bl	8005988 <HAL_TIM_PWM_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019e2:	f7ff fdf9 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ee:	f107 0320 	add.w	r3, r7, #32
 80019f2:	4619      	mov	r1, r3
 80019f4:	4816      	ldr	r0, [pc, #88]	; (8001a50 <MX_TIM2_Init+0x100>)
 80019f6:	f004 feb3 	bl	8006760 <HAL_TIMEx_MasterConfigSynchronization>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001a00:	f7ff fdea 	bl	80015d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a04:	2360      	movs	r3, #96	; 0x60
 8001a06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = (10000-1)*0.25;
 8001a08:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8001a0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	2200      	movs	r2, #0
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	480c      	ldr	r0, [pc, #48]	; (8001a50 <MX_TIM2_Init+0x100>)
 8001a1e:	f004 f9dd 	bl	8005ddc <HAL_TIM_PWM_ConfigChannel>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001a28:	f7ff fdd6 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	2204      	movs	r2, #4
 8001a30:	4619      	mov	r1, r3
 8001a32:	4807      	ldr	r0, [pc, #28]	; (8001a50 <MX_TIM2_Init+0x100>)
 8001a34:	f004 f9d2 	bl	8005ddc <HAL_TIM_PWM_ConfigChannel>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8001a3e:	f7ff fdcb 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a42:	4803      	ldr	r0, [pc, #12]	; (8001a50 <MX_TIM2_Init+0x100>)
 8001a44:	f000 f8ca 	bl	8001bdc <HAL_TIM_MspPostInit>

}
 8001a48:	bf00      	nop
 8001a4a:	3738      	adds	r7, #56	; 0x38
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	200002d8 	.word	0x200002d8

08001a54 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08e      	sub	sp, #56	; 0x38
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a68:	f107 0320 	add.w	r3, r7, #32
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
 8001a80:	615a      	str	r2, [r3, #20]
 8001a82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a84:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <MX_TIM3_Init+0xe8>)
 8001a86:	4a2e      	ldr	r2, [pc, #184]	; (8001b40 <MX_TIM3_Init+0xec>)
 8001a88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 600-1;
 8001a8a:	4b2c      	ldr	r3, [pc, #176]	; (8001b3c <MX_TIM3_Init+0xe8>)
 8001a8c:	f240 2257 	movw	r2, #599	; 0x257
 8001a90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a92:	4b2a      	ldr	r3, [pc, #168]	; (8001b3c <MX_TIM3_Init+0xe8>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8001a98:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <MX_TIM3_Init+0xe8>)
 8001a9a:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa0:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <MX_TIM3_Init+0xe8>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa6:	4b25      	ldr	r3, [pc, #148]	; (8001b3c <MX_TIM3_Init+0xe8>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001aac:	4823      	ldr	r0, [pc, #140]	; (8001b3c <MX_TIM3_Init+0xe8>)
 8001aae:	f003 feac 	bl	800580a <HAL_TIM_Base_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001ab8:	f7ff fd8e 	bl	80015d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ac2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	481c      	ldr	r0, [pc, #112]	; (8001b3c <MX_TIM3_Init+0xe8>)
 8001aca:	f004 fa49 	bl	8005f60 <HAL_TIM_ConfigClockSource>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001ad4:	f7ff fd80 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ad8:	4818      	ldr	r0, [pc, #96]	; (8001b3c <MX_TIM3_Init+0xe8>)
 8001ada:	f003 ff55 	bl	8005988 <HAL_TIM_PWM_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001ae4:	f7ff fd78 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001af0:	f107 0320 	add.w	r3, r7, #32
 8001af4:	4619      	mov	r1, r3
 8001af6:	4811      	ldr	r0, [pc, #68]	; (8001b3c <MX_TIM3_Init+0xe8>)
 8001af8:	f004 fe32 	bl	8006760 <HAL_TIMEx_MasterConfigSynchronization>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b02:	f7ff fd69 	bl	80015d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b06:	2360      	movs	r3, #96	; 0x60
 8001b08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = (10000-1)*0.25;
 8001b0a:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8001b0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4807      	ldr	r0, [pc, #28]	; (8001b3c <MX_TIM3_Init+0xe8>)
 8001b20:	f004 f95c 	bl	8005ddc <HAL_TIM_PWM_ConfigChannel>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001b2a:	f7ff fd55 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b2e:	4803      	ldr	r0, [pc, #12]	; (8001b3c <MX_TIM3_Init+0xe8>)
 8001b30:	f000 f854 	bl	8001bdc <HAL_TIM_MspPostInit>

}
 8001b34:	bf00      	nop
 8001b36:	3738      	adds	r7, #56	; 0x38
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000248 	.word	0x20000248
 8001b40:	40000400 	.word	0x40000400

08001b44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a1f      	ldr	r2, [pc, #124]	; (8001bd0 <HAL_TIM_Base_MspInit+0x8c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d10e      	bne.n	8001b74 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <HAL_TIM_Base_MspInit+0x90>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	4a1d      	ldr	r2, [pc, #116]	; (8001bd4 <HAL_TIM_Base_MspInit+0x90>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6453      	str	r3, [r2, #68]	; 0x44
 8001b66:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <HAL_TIM_Base_MspInit+0x90>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b72:	e026      	b.n	8001bc2 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b7c:	d10e      	bne.n	8001b9c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <HAL_TIM_Base_MspInit+0x90>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	4a13      	ldr	r2, [pc, #76]	; (8001bd4 <HAL_TIM_Base_MspInit+0x90>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <HAL_TIM_Base_MspInit+0x90>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]
}
 8001b9a:	e012      	b.n	8001bc2 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a0d      	ldr	r2, [pc, #52]	; (8001bd8 <HAL_TIM_Base_MspInit+0x94>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d10d      	bne.n	8001bc2 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <HAL_TIM_Base_MspInit+0x90>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	4a09      	ldr	r2, [pc, #36]	; (8001bd4 <HAL_TIM_Base_MspInit+0x90>)
 8001bb0:	f043 0302 	orr.w	r3, r3, #2
 8001bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb6:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <HAL_TIM_Base_MspInit+0x90>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
}
 8001bc2:	bf00      	nop
 8001bc4:	371c      	adds	r7, #28
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40010000 	.word	0x40010000
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40000400 	.word	0x40000400

08001bdc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08a      	sub	sp, #40	; 0x28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bfc:	d13c      	bne.n	8001c78 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <HAL_TIM_MspPostInit+0xec>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a30      	ldr	r2, [pc, #192]	; (8001cc8 <HAL_TIM_MspPostInit+0xec>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b2e      	ldr	r3, [pc, #184]	; (8001cc8 <HAL_TIM_MspPostInit+0xec>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	4b2a      	ldr	r3, [pc, #168]	; (8001cc8 <HAL_TIM_MspPostInit+0xec>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a29      	ldr	r2, [pc, #164]	; (8001cc8 <HAL_TIM_MspPostInit+0xec>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b27      	ldr	r3, [pc, #156]	; (8001cc8 <HAL_TIM_MspPostInit+0xec>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c36:	2320      	movs	r3, #32
 8001c38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c46:	2301      	movs	r3, #1
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4a:	f107 0314 	add.w	r3, r7, #20
 8001c4e:	4619      	mov	r1, r3
 8001c50:	481e      	ldr	r0, [pc, #120]	; (8001ccc <HAL_TIM_MspPostInit+0xf0>)
 8001c52:	f000 fcb7 	bl	80025c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c56:	2308      	movs	r3, #8
 8001c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c66:	2301      	movs	r3, #1
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4817      	ldr	r0, [pc, #92]	; (8001cd0 <HAL_TIM_MspPostInit+0xf4>)
 8001c72:	f000 fca7 	bl	80025c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c76:	e022      	b.n	8001cbe <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM3)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a15      	ldr	r2, [pc, #84]	; (8001cd4 <HAL_TIM_MspPostInit+0xf8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d11d      	bne.n	8001cbe <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <HAL_TIM_MspPostInit+0xec>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a0f      	ldr	r2, [pc, #60]	; (8001cc8 <HAL_TIM_MspPostInit+0xec>)
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <HAL_TIM_MspPostInit+0xec>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c9e:	2310      	movs	r3, #16
 8001ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <HAL_TIM_MspPostInit+0xf4>)
 8001cba:	f000 fc83 	bl	80025c4 <HAL_GPIO_Init>
}
 8001cbe:	bf00      	nop
 8001cc0:	3728      	adds	r7, #40	; 0x28
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40020000 	.word	0x40020000
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	40000400 	.word	0x40000400

08001cd8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cdc:	4b11      	ldr	r3, [pc, #68]	; (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001cde:	4a12      	ldr	r2, [pc, #72]	; (8001d28 <MX_USART1_UART_Init+0x50>)
 8001ce0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001ce4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ce8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001cfe:	220c      	movs	r2, #12
 8001d00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d02:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d0e:	4805      	ldr	r0, [pc, #20]	; (8001d24 <MX_USART1_UART_Init+0x4c>)
 8001d10:	f004 fdb6 	bl	8006880 <HAL_UART_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d1a:	f7ff fc5d 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000320 	.word	0x20000320
 8001d28:	40011000 	.word	0x40011000

08001d2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	; 0x28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a19      	ldr	r2, [pc, #100]	; (8001db0 <HAL_UART_MspInit+0x84>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d12c      	bne.n	8001da8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <HAL_UART_MspInit+0x88>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	4a17      	ldr	r2, [pc, #92]	; (8001db4 <HAL_UART_MspInit+0x88>)
 8001d58:	f043 0310 	orr.w	r3, r3, #16
 8001d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5e:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <HAL_UART_MspInit+0x88>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f003 0310 	and.w	r3, r3, #16
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <HAL_UART_MspInit+0x88>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a10      	ldr	r2, [pc, #64]	; (8001db4 <HAL_UART_MspInit+0x88>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <HAL_UART_MspInit+0x88>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001d86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d98:	2307      	movs	r3, #7
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4619      	mov	r1, r3
 8001da2:	4805      	ldr	r0, [pc, #20]	; (8001db8 <HAL_UART_MspInit+0x8c>)
 8001da4:	f000 fc0e 	bl	80025c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	; 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40011000 	.word	0x40011000
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40020000 	.word	0x40020000

08001dbc <MX_USB_OTG_HS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_HCD_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001dc2:	4a13      	ldr	r2, [pc, #76]	; (8001e10 <MX_USB_OTG_HS_HCD_Init+0x54>)
 8001dc4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001dc8:	220c      	movs	r2, #12
 8001dca:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001dda:	2202      	movs	r2, #2
 8001ddc:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001df8:	f000 fda9 	bl	800294e <HAL_HCD_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8001e02:	f7ff fbe9 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000364 	.word	0x20000364
 8001e10:	40040000 	.word	0x40040000

08001e14 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08a      	sub	sp, #40	; 0x28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 0314 	add.w	r3, r7, #20
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a24      	ldr	r2, [pc, #144]	; (8001ec4 <HAL_HCD_MspInit+0xb0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d141      	bne.n	8001eba <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	4b23      	ldr	r3, [pc, #140]	; (8001ec8 <HAL_HCD_MspInit+0xb4>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a22      	ldr	r2, [pc, #136]	; (8001ec8 <HAL_HCD_MspInit+0xb4>)
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <HAL_HCD_MspInit+0xb4>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001e52:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8001e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	2300      	movs	r3, #0
 8001e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001e64:	230c      	movs	r3, #12
 8001e66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4817      	ldr	r0, [pc, #92]	; (8001ecc <HAL_HCD_MspInit+0xb8>)
 8001e70:	f000 fba8 	bl	80025c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001e74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001e82:	f107 0314 	add.w	r3, r7, #20
 8001e86:	4619      	mov	r1, r3
 8001e88:	4810      	ldr	r0, [pc, #64]	; (8001ecc <HAL_HCD_MspInit+0xb8>)
 8001e8a:	f000 fb9b 	bl	80025c4 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <HAL_HCD_MspInit+0xb4>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	4a0c      	ldr	r2, [pc, #48]	; (8001ec8 <HAL_HCD_MspInit+0xb4>)
 8001e98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <HAL_HCD_MspInit+0xb4>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	204d      	movs	r0, #77	; 0x4d
 8001eb0:	f000 f956 	bl	8002160 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8001eb4:	204d      	movs	r0, #77	; 0x4d
 8001eb6:	f000 f96f 	bl	8002198 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8001eba:	bf00      	nop
 8001ebc:	3728      	adds	r7, #40	; 0x28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40040000 	.word	0x40040000
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40020400 	.word	0x40020400

08001ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f08 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ed4:	480d      	ldr	r0, [pc, #52]	; (8001f0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ed6:	490e      	ldr	r1, [pc, #56]	; (8001f10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ed8:	4a0e      	ldr	r2, [pc, #56]	; (8001f14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001edc:	e002      	b.n	8001ee4 <LoopCopyDataInit>

08001ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ee2:	3304      	adds	r3, #4

08001ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee8:	d3f9      	bcc.n	8001ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eea:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001eec:	4c0b      	ldr	r4, [pc, #44]	; (8001f1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef0:	e001      	b.n	8001ef6 <LoopFillZerobss>

08001ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ef4:	3204      	adds	r2, #4

08001ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef8:	d3fb      	bcc.n	8001ef2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001efa:	f7ff fcc7 	bl	800188c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001efe:	f005 fca1 	bl	8007844 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f02:	f7ff f9e5 	bl	80012d0 <main>
  bx  lr    
 8001f06:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f08:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001f0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f14:	080078dc 	.word	0x080078dc
  ldr r2, =_sbss
 8001f18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f1c:	2000066c 	.word	0x2000066c

08001f20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f20:	e7fe      	b.n	8001f20 <ADC_IRQHandler>
	...

08001f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f28:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_Init+0x40>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <HAL_Init+0x40>)
 8001f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_Init+0x40>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <HAL_Init+0x40>)
 8001f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_Init+0x40>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a07      	ldr	r2, [pc, #28]	; (8001f64 <HAL_Init+0x40>)
 8001f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f4c:	2003      	movs	r0, #3
 8001f4e:	f000 f8fc 	bl	800214a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f52:	200f      	movs	r0, #15
 8001f54:	f7ff fbec 	bl	8001730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f58:	f7ff fbc2 	bl	80016e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023c00 	.word	0x40023c00

08001f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_IncTick+0x20>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_IncTick+0x24>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <HAL_IncTick+0x24>)
 8001f7a:	6013      	str	r3, [r2, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000008 	.word	0x20000008
 8001f8c:	20000668 	.word	0x20000668

08001f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return uwTick;
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <HAL_GetTick+0x14>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000668 	.word	0x20000668

08001fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff ffee 	bl	8001f90 <HAL_GetTick>
 8001fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc0:	d005      	beq.n	8001fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_Delay+0x44>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4413      	add	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fce:	bf00      	nop
 8001fd0:	f7ff ffde 	bl	8001f90 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d8f7      	bhi.n	8001fd0 <HAL_Delay+0x28>
  {
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000008 	.word	0x20000008

08001ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800200c:	4013      	ands	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800201c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002022:	4a04      	ldr	r2, [pc, #16]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	60d3      	str	r3, [r2, #12]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <__NVIC_GetPriorityGrouping+0x18>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	f003 0307 	and.w	r3, r3, #7
}
 8002046:	4618      	mov	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	2b00      	cmp	r3, #0
 8002064:	db0b      	blt.n	800207e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	f003 021f 	and.w	r2, r3, #31
 800206c:	4907      	ldr	r1, [pc, #28]	; (800208c <__NVIC_EnableIRQ+0x38>)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	2001      	movs	r0, #1
 8002076:	fa00 f202 	lsl.w	r2, r0, r2
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000e100 	.word	0xe000e100

08002090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	db0a      	blt.n	80020ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	490c      	ldr	r1, [pc, #48]	; (80020dc <__NVIC_SetPriority+0x4c>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	0112      	lsls	r2, r2, #4
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	440b      	add	r3, r1
 80020b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b8:	e00a      	b.n	80020d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4908      	ldr	r1, [pc, #32]	; (80020e0 <__NVIC_SetPriority+0x50>)
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	3b04      	subs	r3, #4
 80020c8:	0112      	lsls	r2, r2, #4
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	440b      	add	r3, r1
 80020ce:	761a      	strb	r2, [r3, #24]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000e100 	.word	0xe000e100
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f1c3 0307 	rsb	r3, r3, #7
 80020fe:	2b04      	cmp	r3, #4
 8002100:	bf28      	it	cs
 8002102:	2304      	movcs	r3, #4
 8002104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3304      	adds	r3, #4
 800210a:	2b06      	cmp	r3, #6
 800210c:	d902      	bls.n	8002114 <NVIC_EncodePriority+0x30>
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3b03      	subs	r3, #3
 8002112:	e000      	b.n	8002116 <NVIC_EncodePriority+0x32>
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	f04f 32ff 	mov.w	r2, #4294967295
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43da      	mvns	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	401a      	ands	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800212c:	f04f 31ff 	mov.w	r1, #4294967295
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	43d9      	mvns	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	4313      	orrs	r3, r2
         );
}
 800213e:	4618      	mov	r0, r3
 8002140:	3724      	adds	r7, #36	; 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ff4c 	bl	8001ff0 <__NVIC_SetPriorityGrouping>
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
 800216c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002172:	f7ff ff61 	bl	8002038 <__NVIC_GetPriorityGrouping>
 8002176:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	68b9      	ldr	r1, [r7, #8]
 800217c:	6978      	ldr	r0, [r7, #20]
 800217e:	f7ff ffb1 	bl	80020e4 <NVIC_EncodePriority>
 8002182:	4602      	mov	r2, r0
 8002184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ff80 	bl	8002090 <__NVIC_SetPriority>
}
 8002190:	bf00      	nop
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff ff54 	bl	8002054 <__NVIC_EnableIRQ>
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e00e      	b.n	80021e4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	795b      	ldrb	r3, [r3, #5]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d105      	bne.n	80021dc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7fe fba6 	bl	8000928 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e03b      	b.n	8002276 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d106      	bne.n	8002218 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7fe fbdc 	bl	80009d0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2202      	movs	r2, #2
 800221c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	430a      	orrs	r2, r1
 8002234:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223c:	f023 0107 	bic.w	r1, r3, #7
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002256:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	68d1      	ldr	r1, [r2, #12]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	430b      	orrs	r3, r1
 8002264:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b084      	sub	sp, #16
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d026      	beq.n	80022ee <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d021      	beq.n	80022ee <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022b8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022be:	f043 0201 	orr.w	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2201      	movs	r2, #1
 80022cc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2204      	movs	r2, #4
 80022d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d026      	beq.n	8002346 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d021      	beq.n	8002346 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002310:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2220      	movs	r2, #32
 8002318:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231e:	f043 0202 	orr.w	r2, r3, #2
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2204      	movs	r2, #4
 800232a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b00      	cmp	r3, #0
 800234e:	d026      	beq.n	800239e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002356:	2b00      	cmp	r3, #0
 8002358:	d021      	beq.n	800239e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002368:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2208      	movs	r2, #8
 8002370:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002376:	f043 0204 	orr.w	r2, r3, #4
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2204      	movs	r2, #4
 8002382:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d013      	beq.n	80023d0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00e      	beq.n	80023d0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023c0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2204      	movs	r2, #4
 80023c8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f853 	bl	8002476 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d024      	beq.n	8002424 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d01f      	beq.n	8002424 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023f2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2202      	movs	r2, #2
 80023fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	2b00      	cmp	r3, #0
 800242c:	d01f      	beq.n	800246e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01a      	beq.n	800246e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002446:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2210      	movs	r2, #16
 800244e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 f80e 	bl	800248a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b087      	sub	sp, #28
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_DMA2D_ConfigLayer+0x20>
 80024bc:	2302      	movs	r3, #2
 80024be:	e079      	b.n	80025b4 <HAL_DMA2D_ConfigLayer+0x114>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	3318      	adds	r3, #24
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	041b      	lsls	r3, r3, #16
 80024e6:	4313      	orrs	r3, r2
 80024e8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80024ea:	4b35      	ldr	r3, [pc, #212]	; (80025c0 <HAL_DMA2D_ConfigLayer+0x120>)
 80024ec:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b0a      	cmp	r3, #10
 80024f4:	d003      	beq.n	80024fe <HAL_DMA2D_ConfigLayer+0x5e>
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b09      	cmp	r3, #9
 80024fc:	d107      	bne.n	800250e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	4313      	orrs	r3, r2
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	e005      	b.n	800251a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	061b      	lsls	r3, r3, #24
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d120      	bne.n	8002562 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	43db      	mvns	r3, r3
 800252a:	ea02 0103 	and.w	r1, r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	430a      	orrs	r2, r1
 8002536:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b0a      	cmp	r3, #10
 8002548:	d003      	beq.n	8002552 <HAL_DMA2D_ConfigLayer+0xb2>
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b09      	cmp	r3, #9
 8002550:	d127      	bne.n	80025a2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800255e:	629a      	str	r2, [r3, #40]	; 0x28
 8002560:	e01f      	b.n	80025a2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	69da      	ldr	r2, [r3, #28]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	43db      	mvns	r3, r3
 800256c:	ea02 0103 	and.w	r1, r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	430a      	orrs	r2, r1
 8002578:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b0a      	cmp	r3, #10
 800258a:	d003      	beq.n	8002594 <HAL_DMA2D_ConfigLayer+0xf4>
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b09      	cmp	r3, #9
 8002592:	d106      	bne.n	80025a2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80025a0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	371c      	adds	r7, #28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	ff03000f 	.word	0xff03000f

080025c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b089      	sub	sp, #36	; 0x24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
 80025de:	e177      	b.n	80028d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025e0:	2201      	movs	r2, #1
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	4013      	ands	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	f040 8166 	bne.w	80028ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b01      	cmp	r3, #1
 8002608:	d005      	beq.n	8002616 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002612:	2b02      	cmp	r3, #2
 8002614:	d130      	bne.n	8002678 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	2203      	movs	r2, #3
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68da      	ldr	r2, [r3, #12]
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800264c:	2201      	movs	r2, #1
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	091b      	lsrs	r3, r3, #4
 8002662:	f003 0201 	and.w	r2, r3, #1
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	2b03      	cmp	r3, #3
 8002682:	d017      	beq.n	80026b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	2203      	movs	r2, #3
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d123      	bne.n	8002708 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	08da      	lsrs	r2, r3, #3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3208      	adds	r2, #8
 80026c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	220f      	movs	r2, #15
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	08da      	lsrs	r2, r3, #3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3208      	adds	r2, #8
 8002702:	69b9      	ldr	r1, [r7, #24]
 8002704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	2203      	movs	r2, #3
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 0203 	and.w	r2, r3, #3
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 80c0 	beq.w	80028ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	4b66      	ldr	r3, [pc, #408]	; (80028e8 <HAL_GPIO_Init+0x324>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	4a65      	ldr	r2, [pc, #404]	; (80028e8 <HAL_GPIO_Init+0x324>)
 8002754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002758:	6453      	str	r3, [r2, #68]	; 0x44
 800275a:	4b63      	ldr	r3, [pc, #396]	; (80028e8 <HAL_GPIO_Init+0x324>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002766:	4a61      	ldr	r2, [pc, #388]	; (80028ec <HAL_GPIO_Init+0x328>)
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	089b      	lsrs	r3, r3, #2
 800276c:	3302      	adds	r3, #2
 800276e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002772:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	220f      	movs	r2, #15
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a58      	ldr	r2, [pc, #352]	; (80028f0 <HAL_GPIO_Init+0x32c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d037      	beq.n	8002802 <HAL_GPIO_Init+0x23e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a57      	ldr	r2, [pc, #348]	; (80028f4 <HAL_GPIO_Init+0x330>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d031      	beq.n	80027fe <HAL_GPIO_Init+0x23a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a56      	ldr	r2, [pc, #344]	; (80028f8 <HAL_GPIO_Init+0x334>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d02b      	beq.n	80027fa <HAL_GPIO_Init+0x236>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a55      	ldr	r2, [pc, #340]	; (80028fc <HAL_GPIO_Init+0x338>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d025      	beq.n	80027f6 <HAL_GPIO_Init+0x232>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a54      	ldr	r2, [pc, #336]	; (8002900 <HAL_GPIO_Init+0x33c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d01f      	beq.n	80027f2 <HAL_GPIO_Init+0x22e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a53      	ldr	r2, [pc, #332]	; (8002904 <HAL_GPIO_Init+0x340>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d019      	beq.n	80027ee <HAL_GPIO_Init+0x22a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a52      	ldr	r2, [pc, #328]	; (8002908 <HAL_GPIO_Init+0x344>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d013      	beq.n	80027ea <HAL_GPIO_Init+0x226>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a51      	ldr	r2, [pc, #324]	; (800290c <HAL_GPIO_Init+0x348>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d00d      	beq.n	80027e6 <HAL_GPIO_Init+0x222>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a50      	ldr	r2, [pc, #320]	; (8002910 <HAL_GPIO_Init+0x34c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d007      	beq.n	80027e2 <HAL_GPIO_Init+0x21e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a4f      	ldr	r2, [pc, #316]	; (8002914 <HAL_GPIO_Init+0x350>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d101      	bne.n	80027de <HAL_GPIO_Init+0x21a>
 80027da:	2309      	movs	r3, #9
 80027dc:	e012      	b.n	8002804 <HAL_GPIO_Init+0x240>
 80027de:	230a      	movs	r3, #10
 80027e0:	e010      	b.n	8002804 <HAL_GPIO_Init+0x240>
 80027e2:	2308      	movs	r3, #8
 80027e4:	e00e      	b.n	8002804 <HAL_GPIO_Init+0x240>
 80027e6:	2307      	movs	r3, #7
 80027e8:	e00c      	b.n	8002804 <HAL_GPIO_Init+0x240>
 80027ea:	2306      	movs	r3, #6
 80027ec:	e00a      	b.n	8002804 <HAL_GPIO_Init+0x240>
 80027ee:	2305      	movs	r3, #5
 80027f0:	e008      	b.n	8002804 <HAL_GPIO_Init+0x240>
 80027f2:	2304      	movs	r3, #4
 80027f4:	e006      	b.n	8002804 <HAL_GPIO_Init+0x240>
 80027f6:	2303      	movs	r3, #3
 80027f8:	e004      	b.n	8002804 <HAL_GPIO_Init+0x240>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e002      	b.n	8002804 <HAL_GPIO_Init+0x240>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <HAL_GPIO_Init+0x240>
 8002802:	2300      	movs	r3, #0
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	f002 0203 	and.w	r2, r2, #3
 800280a:	0092      	lsls	r2, r2, #2
 800280c:	4093      	lsls	r3, r2
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002814:	4935      	ldr	r1, [pc, #212]	; (80028ec <HAL_GPIO_Init+0x328>)
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	089b      	lsrs	r3, r3, #2
 800281a:	3302      	adds	r3, #2
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002822:	4b3d      	ldr	r3, [pc, #244]	; (8002918 <HAL_GPIO_Init+0x354>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002846:	4a34      	ldr	r2, [pc, #208]	; (8002918 <HAL_GPIO_Init+0x354>)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800284c:	4b32      	ldr	r3, [pc, #200]	; (8002918 <HAL_GPIO_Init+0x354>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002870:	4a29      	ldr	r2, [pc, #164]	; (8002918 <HAL_GPIO_Init+0x354>)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002876:	4b28      	ldr	r3, [pc, #160]	; (8002918 <HAL_GPIO_Init+0x354>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800289a:	4a1f      	ldr	r2, [pc, #124]	; (8002918 <HAL_GPIO_Init+0x354>)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028a0:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <HAL_GPIO_Init+0x354>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028c4:	4a14      	ldr	r2, [pc, #80]	; (8002918 <HAL_GPIO_Init+0x354>)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3301      	adds	r3, #1
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	2b0f      	cmp	r3, #15
 80028d4:	f67f ae84 	bls.w	80025e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3724      	adds	r7, #36	; 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40013800 	.word	0x40013800
 80028f0:	40020000 	.word	0x40020000
 80028f4:	40020400 	.word	0x40020400
 80028f8:	40020800 	.word	0x40020800
 80028fc:	40020c00 	.word	0x40020c00
 8002900:	40021000 	.word	0x40021000
 8002904:	40021400 	.word	0x40021400
 8002908:	40021800 	.word	0x40021800
 800290c:	40021c00 	.word	0x40021c00
 8002910:	40022000 	.word	0x40022000
 8002914:	40022400 	.word	0x40022400
 8002918:	40013c00 	.word	0x40013c00

0800291c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	807b      	strh	r3, [r7, #2]
 8002928:	4613      	mov	r3, r2
 800292a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800292c:	787b      	ldrb	r3, [r7, #1]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002932:	887a      	ldrh	r2, [r7, #2]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002938:	e003      	b.n	8002942 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800293a:	887b      	ldrh	r3, [r7, #2]
 800293c:	041a      	lsls	r2, r3, #16
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	619a      	str	r2, [r3, #24]
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800294e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002950:	b08f      	sub	sp, #60	; 0x3c
 8002952:	af0a      	add	r7, sp, #40	; 0x28
 8002954:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d101      	bne.n	8002960 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e054      	b.n	8002a0a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7ff fa4a 	bl	8001e14 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2203      	movs	r2, #3
 8002984:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002990:	2b00      	cmp	r3, #0
 8002992:	d102      	bne.n	800299a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f004 fbe7 	bl	8007172 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	603b      	str	r3, [r7, #0]
 80029aa:	687e      	ldr	r6, [r7, #4]
 80029ac:	466d      	mov	r5, sp
 80029ae:	f106 0410 	add.w	r4, r6, #16
 80029b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029be:	e885 0003 	stmia.w	r5, {r0, r1}
 80029c2:	1d33      	adds	r3, r6, #4
 80029c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029c6:	6838      	ldr	r0, [r7, #0]
 80029c8:	f004 fb72 	bl	80070b0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2101      	movs	r1, #1
 80029d2:	4618      	mov	r0, r3
 80029d4:	f004 fbde 	bl	8007194 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	603b      	str	r3, [r7, #0]
 80029de:	687e      	ldr	r6, [r7, #4]
 80029e0:	466d      	mov	r5, sp
 80029e2:	f106 0410 	add.w	r4, r6, #16
 80029e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80029f6:	1d33      	adds	r3, r6, #4
 80029f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029fa:	6838      	ldr	r0, [r7, #0]
 80029fc:	f004 fd06 	bl	800740c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a12 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b086      	sub	sp, #24
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f004 fcae 	bl	800738a <USB_GetMode>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	f040 80f6 	bne.w	8002c22 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f004 fc92 	bl	8007364 <USB_ReadInterrupts>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 80ec 	beq.w	8002c20 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f004 fc89 	bl	8007364 <USB_ReadInterrupts>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a5c:	d104      	bne.n	8002a68 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a66:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f004 fc79 	bl	8007364 <USB_ReadInterrupts>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a7c:	d104      	bne.n	8002a88 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a86:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f004 fc69 	bl	8007364 <USB_ReadInterrupts>
 8002a92:	4603      	mov	r3, r0
 8002a94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a9c:	d104      	bne.n	8002aa8 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002aa6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4618      	mov	r0, r3
 8002aae:	f004 fc59 	bl	8007364 <USB_ReadInterrupts>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d103      	bne.n	8002ac4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f004 fc4b 	bl	8007364 <USB_ReadInterrupts>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ad8:	d11c      	bne.n	8002b14 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002ae2:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10f      	bne.n	8002b14 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002af4:	2110      	movs	r1, #16
 8002af6:	6938      	ldr	r0, [r7, #16]
 8002af8:	f004 fb98 	bl	800722c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002afc:	6938      	ldr	r0, [r7, #16]
 8002afe:	f004 fbb9 	bl	8007274 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2101      	movs	r1, #1
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f004 fd33 	bl	8007574 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f89e 	bl	8002c50 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f004 fc23 	bl	8007364 <USB_ReadInterrupts>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b28:	d102      	bne.n	8002b30 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f001 f9b1 	bl	8003e92 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f004 fc15 	bl	8007364 <USB_ReadInterrupts>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d106      	bne.n	8002b52 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f86f 	bl	8002c28 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2208      	movs	r2, #8
 8002b50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f004 fc04 	bl	8007364 <USB_ReadInterrupts>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	2b10      	cmp	r3, #16
 8002b64:	d101      	bne.n	8002b6a <HAL_HCD_IRQHandler+0x158>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <HAL_HCD_IRQHandler+0x15a>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d012      	beq.n	8002b96 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699a      	ldr	r2, [r3, #24]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0210 	bic.w	r2, r2, #16
 8002b7e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f001 f8b4 	bl	8003cee <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f042 0210 	orr.w	r2, r2, #16
 8002b94:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f004 fbe2 	bl	8007364 <USB_ReadInterrupts>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002baa:	d13a      	bne.n	8002c22 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f004 fd19 	bl	80075e8 <USB_HC_ReadInterrupt>
 8002bb6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	e025      	b.n	8002c0a <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d018      	beq.n	8002c04 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002be8:	d106      	bne.n	8002bf8 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	4619      	mov	r1, r3
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f000 f859 	bl	8002ca8 <HCD_HC_IN_IRQHandler>
 8002bf6:	e005      	b.n	8002c04 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fc74 	bl	80034ec <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	3301      	adds	r3, #1
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d3d4      	bcc.n	8002bbe <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c1c:	615a      	str	r2, [r3, #20]
 8002c1e:	e000      	b.n	8002c22 <HAL_HCD_IRQHandler+0x210>
      return;
 8002c20:	bf00      	nop
    }
  }
}
 8002c22:	3718      	adds	r7, #24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8002c44:	bf00      	nop
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	460b      	mov	r3, r1
 8002c96:	70fb      	strb	r3, [r7, #3]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002cbe:	78fb      	ldrb	r3, [r7, #3]
 8002cc0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d119      	bne.n	8002d0c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	015a      	lsls	r2, r3, #5
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	0151      	lsls	r1, r2, #5
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	440a      	add	r2, r1
 8002d00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d04:	f043 0302 	orr.w	r3, r3, #2
 8002d08:	60d3      	str	r3, [r2, #12]
 8002d0a:	e101      	b.n	8002f10 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d22:	d12b      	bne.n	8002d7c <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d30:	461a      	mov	r2, r3
 8002d32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d36:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	212c      	movs	r1, #44	; 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3361      	adds	r3, #97	; 0x61
 8002d46:	2207      	movs	r2, #7
 8002d48:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	0151      	lsls	r1, r2, #5
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	440a      	add	r2, r1
 8002d60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d64:	f043 0302 	orr.w	r3, r3, #2
 8002d68:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	4611      	mov	r1, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f004 fc48 	bl	800760a <USB_HC_Halt>
 8002d7a:	e0c9      	b.n	8002f10 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b20      	cmp	r3, #32
 8002d90:	d109      	bne.n	8002da6 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	015a      	lsls	r2, r3, #5
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	4413      	add	r3, r2
 8002d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9e:	461a      	mov	r2, r3
 8002da0:	2320      	movs	r3, #32
 8002da2:	6093      	str	r3, [r2, #8]
 8002da4:	e0b4      	b.n	8002f10 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d133      	bne.n	8002e24 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	0151      	lsls	r1, r2, #5
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	440a      	add	r2, r1
 8002dd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dd6:	f043 0302 	orr.w	r3, r3, #2
 8002dda:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	212c      	movs	r1, #44	; 0x2c
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	3361      	adds	r3, #97	; 0x61
 8002dea:	2205      	movs	r2, #5
 8002dec:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	015a      	lsls	r2, r3, #5
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	2310      	movs	r3, #16
 8002dfe:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	2308      	movs	r3, #8
 8002e10:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f004 fbf4 	bl	800760a <USB_HC_Halt>
 8002e22:	e075      	b.n	8002f10 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3a:	d134      	bne.n	8002ea6 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	0151      	lsls	r1, r2, #5
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	440a      	add	r2, r1
 8002e52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e56:	f043 0302 	orr.w	r3, r3, #2
 8002e5a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	212c      	movs	r1, #44	; 0x2c
 8002e62:	fb01 f303 	mul.w	r3, r1, r3
 8002e66:	4413      	add	r3, r2
 8002e68:	3361      	adds	r3, #97	; 0x61
 8002e6a:	2208      	movs	r2, #8
 8002e6c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	2310      	movs	r3, #16
 8002e7e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e92:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f004 fbb3 	bl	800760a <USB_HC_Halt>
 8002ea4:	e034      	b.n	8002f10 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb8:	2b80      	cmp	r3, #128	; 0x80
 8002eba:	d129      	bne.n	8002f10 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	0151      	lsls	r1, r2, #5
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	440a      	add	r2, r1
 8002ed2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ed6:	f043 0302 	orr.w	r3, r3, #2
 8002eda:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	212c      	movs	r1, #44	; 0x2c
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3361      	adds	r3, #97	; 0x61
 8002eea:	2206      	movs	r2, #6
 8002eec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f004 fb86 	bl	800760a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2380      	movs	r3, #128	; 0x80
 8002f0e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f26:	d122      	bne.n	8002f6e <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	0151      	lsls	r1, r2, #5
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	440a      	add	r2, r1
 8002f3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f42:	f043 0302 	orr.w	r3, r3, #2
 8002f46:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	4611      	mov	r1, r2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f004 fb59 	bl	800760a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f64:	461a      	mov	r2, r3
 8002f66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f6a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002f6c:	e2ba      	b.n	80034e4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	015a      	lsls	r2, r3, #5
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4413      	add	r3, r2
 8002f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	f040 811b 	bne.w	80031bc <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d019      	beq.n	8002fc2 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	212c      	movs	r1, #44	; 0x2c
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	4413      	add	r3, r2
 8002f9a:	3348      	adds	r3, #72	; 0x48
 8002f9c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	0159      	lsls	r1, r3, #5
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	440b      	add	r3, r1
 8002fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002fb0:	1ad2      	subs	r2, r2, r3
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	202c      	movs	r0, #44	; 0x2c
 8002fb8:	fb00 f303 	mul.w	r3, r0, r3
 8002fbc:	440b      	add	r3, r1
 8002fbe:	3350      	adds	r3, #80	; 0x50
 8002fc0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	212c      	movs	r1, #44	; 0x2c
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	4413      	add	r3, r2
 8002fce:	3361      	adds	r3, #97	; 0x61
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	212c      	movs	r1, #44	; 0x2c
 8002fda:	fb01 f303 	mul.w	r3, r1, r3
 8002fde:	4413      	add	r3, r2
 8002fe0:	335c      	adds	r3, #92	; 0x5c
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	212c      	movs	r1, #44	; 0x2c
 8002ffe:	fb01 f303 	mul.w	r3, r1, r3
 8003002:	4413      	add	r3, r2
 8003004:	333f      	adds	r3, #63	; 0x3f
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d009      	beq.n	8003020 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	212c      	movs	r1, #44	; 0x2c
 8003012:	fb01 f303 	mul.w	r3, r1, r3
 8003016:	4413      	add	r3, r2
 8003018:	333f      	adds	r3, #63	; 0x3f
 800301a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800301c:	2b02      	cmp	r3, #2
 800301e:	d121      	bne.n	8003064 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4413      	add	r3, r2
 8003028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	0151      	lsls	r1, r2, #5
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	440a      	add	r2, r1
 8003036:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800303a:	f043 0302 	orr.w	r3, r3, #2
 800303e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	4611      	mov	r1, r2
 800304a:	4618      	mov	r0, r3
 800304c:	f004 fadd 	bl	800760a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4413      	add	r3, r2
 8003058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305c:	461a      	mov	r2, r3
 800305e:	2310      	movs	r3, #16
 8003060:	6093      	str	r3, [r2, #8]
 8003062:	e066      	b.n	8003132 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	212c      	movs	r1, #44	; 0x2c
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	4413      	add	r3, r2
 8003070:	333f      	adds	r3, #63	; 0x3f
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b03      	cmp	r3, #3
 8003076:	d127      	bne.n	80030c8 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4413      	add	r3, r2
 8003080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68fa      	ldr	r2, [r7, #12]
 8003088:	0151      	lsls	r1, r2, #5
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	440a      	add	r2, r1
 800308e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003092:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003096:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	212c      	movs	r1, #44	; 0x2c
 800309e:	fb01 f303 	mul.w	r3, r1, r3
 80030a2:	4413      	add	r3, r2
 80030a4:	3360      	adds	r3, #96	; 0x60
 80030a6:	2201      	movs	r2, #1
 80030a8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	b2d9      	uxtb	r1, r3
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	202c      	movs	r0, #44	; 0x2c
 80030b4:	fb00 f303 	mul.w	r3, r0, r3
 80030b8:	4413      	add	r3, r2
 80030ba:	3360      	adds	r3, #96	; 0x60
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	461a      	mov	r2, r3
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff fde3 	bl	8002c8c <HAL_HCD_HC_NotifyURBChange_Callback>
 80030c6:	e034      	b.n	8003132 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	212c      	movs	r1, #44	; 0x2c
 80030ce:	fb01 f303 	mul.w	r3, r1, r3
 80030d2:	4413      	add	r3, r2
 80030d4:	333f      	adds	r3, #63	; 0x3f
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d12a      	bne.n	8003132 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	212c      	movs	r1, #44	; 0x2c
 80030e2:	fb01 f303 	mul.w	r3, r1, r3
 80030e6:	4413      	add	r3, r2
 80030e8:	3360      	adds	r3, #96	; 0x60
 80030ea:	2201      	movs	r2, #1
 80030ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	212c      	movs	r1, #44	; 0x2c
 80030f4:	fb01 f303 	mul.w	r3, r1, r3
 80030f8:	4413      	add	r3, r2
 80030fa:	3354      	adds	r3, #84	; 0x54
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	f083 0301 	eor.w	r3, r3, #1
 8003102:	b2d8      	uxtb	r0, r3
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	212c      	movs	r1, #44	; 0x2c
 800310a:	fb01 f303 	mul.w	r3, r1, r3
 800310e:	4413      	add	r3, r2
 8003110:	3354      	adds	r3, #84	; 0x54
 8003112:	4602      	mov	r2, r0
 8003114:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	b2d9      	uxtb	r1, r3
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	202c      	movs	r0, #44	; 0x2c
 8003120:	fb00 f303 	mul.w	r3, r0, r3
 8003124:	4413      	add	r3, r2
 8003126:	3360      	adds	r3, #96	; 0x60
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff fdad 	bl	8002c8c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d12b      	bne.n	8003192 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	212c      	movs	r1, #44	; 0x2c
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	4413      	add	r3, r2
 8003146:	3348      	adds	r3, #72	; 0x48
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	202c      	movs	r0, #44	; 0x2c
 8003150:	fb00 f202 	mul.w	r2, r0, r2
 8003154:	440a      	add	r2, r1
 8003156:	3240      	adds	r2, #64	; 0x40
 8003158:	8812      	ldrh	r2, [r2, #0]
 800315a:	fbb3 f3f2 	udiv	r3, r3, r2
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 81be 	beq.w	80034e4 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	212c      	movs	r1, #44	; 0x2c
 800316e:	fb01 f303 	mul.w	r3, r1, r3
 8003172:	4413      	add	r3, r2
 8003174:	3354      	adds	r3, #84	; 0x54
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	f083 0301 	eor.w	r3, r3, #1
 800317c:	b2d8      	uxtb	r0, r3
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	212c      	movs	r1, #44	; 0x2c
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	4413      	add	r3, r2
 800318a:	3354      	adds	r3, #84	; 0x54
 800318c:	4602      	mov	r2, r0
 800318e:	701a      	strb	r2, [r3, #0]
}
 8003190:	e1a8      	b.n	80034e4 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	212c      	movs	r1, #44	; 0x2c
 8003198:	fb01 f303 	mul.w	r3, r1, r3
 800319c:	4413      	add	r3, r2
 800319e:	3354      	adds	r3, #84	; 0x54
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	f083 0301 	eor.w	r3, r3, #1
 80031a6:	b2d8      	uxtb	r0, r3
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	212c      	movs	r1, #44	; 0x2c
 80031ae:	fb01 f303 	mul.w	r3, r1, r3
 80031b2:	4413      	add	r3, r2
 80031b4:	3354      	adds	r3, #84	; 0x54
 80031b6:	4602      	mov	r2, r0
 80031b8:	701a      	strb	r2, [r3, #0]
}
 80031ba:	e193      	b.n	80034e4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	f040 8106 	bne.w	80033e0 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	0151      	lsls	r1, r2, #5
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	440a      	add	r2, r1
 80031ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031ee:	f023 0302 	bic.w	r3, r3, #2
 80031f2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	212c      	movs	r1, #44	; 0x2c
 80031fa:	fb01 f303 	mul.w	r3, r1, r3
 80031fe:	4413      	add	r3, r2
 8003200:	3361      	adds	r3, #97	; 0x61
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d109      	bne.n	800321c <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	212c      	movs	r1, #44	; 0x2c
 800320e:	fb01 f303 	mul.w	r3, r1, r3
 8003212:	4413      	add	r3, r2
 8003214:	3360      	adds	r3, #96	; 0x60
 8003216:	2201      	movs	r2, #1
 8003218:	701a      	strb	r2, [r3, #0]
 800321a:	e0c9      	b.n	80033b0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	212c      	movs	r1, #44	; 0x2c
 8003222:	fb01 f303 	mul.w	r3, r1, r3
 8003226:	4413      	add	r3, r2
 8003228:	3361      	adds	r3, #97	; 0x61
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b05      	cmp	r3, #5
 800322e:	d109      	bne.n	8003244 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	212c      	movs	r1, #44	; 0x2c
 8003236:	fb01 f303 	mul.w	r3, r1, r3
 800323a:	4413      	add	r3, r2
 800323c:	3360      	adds	r3, #96	; 0x60
 800323e:	2205      	movs	r2, #5
 8003240:	701a      	strb	r2, [r3, #0]
 8003242:	e0b5      	b.n	80033b0 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	212c      	movs	r1, #44	; 0x2c
 800324a:	fb01 f303 	mul.w	r3, r1, r3
 800324e:	4413      	add	r3, r2
 8003250:	3361      	adds	r3, #97	; 0x61
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b06      	cmp	r3, #6
 8003256:	d009      	beq.n	800326c <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	212c      	movs	r1, #44	; 0x2c
 800325e:	fb01 f303 	mul.w	r3, r1, r3
 8003262:	4413      	add	r3, r2
 8003264:	3361      	adds	r3, #97	; 0x61
 8003266:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003268:	2b08      	cmp	r3, #8
 800326a:	d150      	bne.n	800330e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	212c      	movs	r1, #44	; 0x2c
 8003272:	fb01 f303 	mul.w	r3, r1, r3
 8003276:	4413      	add	r3, r2
 8003278:	335c      	adds	r3, #92	; 0x5c
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	202c      	movs	r0, #44	; 0x2c
 8003284:	fb00 f303 	mul.w	r3, r0, r3
 8003288:	440b      	add	r3, r1
 800328a:	335c      	adds	r3, #92	; 0x5c
 800328c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	212c      	movs	r1, #44	; 0x2c
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	4413      	add	r3, r2
 800329a:	335c      	adds	r3, #92	; 0x5c
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d912      	bls.n	80032c8 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	212c      	movs	r1, #44	; 0x2c
 80032a8:	fb01 f303 	mul.w	r3, r1, r3
 80032ac:	4413      	add	r3, r2
 80032ae:	335c      	adds	r3, #92	; 0x5c
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	212c      	movs	r1, #44	; 0x2c
 80032ba:	fb01 f303 	mul.w	r3, r1, r3
 80032be:	4413      	add	r3, r2
 80032c0:	3360      	adds	r3, #96	; 0x60
 80032c2:	2204      	movs	r2, #4
 80032c4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032c6:	e073      	b.n	80033b0 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	212c      	movs	r1, #44	; 0x2c
 80032ce:	fb01 f303 	mul.w	r3, r1, r3
 80032d2:	4413      	add	r3, r2
 80032d4:	3360      	adds	r3, #96	; 0x60
 80032d6:	2202      	movs	r2, #2
 80032d8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	015a      	lsls	r2, r3, #5
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4413      	add	r3, r2
 80032e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032f0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80032f8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	015a      	lsls	r2, r3, #5
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4413      	add	r3, r2
 8003302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003306:	461a      	mov	r2, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800330c:	e050      	b.n	80033b0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	212c      	movs	r1, #44	; 0x2c
 8003314:	fb01 f303 	mul.w	r3, r1, r3
 8003318:	4413      	add	r3, r2
 800331a:	3361      	adds	r3, #97	; 0x61
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b03      	cmp	r3, #3
 8003320:	d122      	bne.n	8003368 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	212c      	movs	r1, #44	; 0x2c
 8003328:	fb01 f303 	mul.w	r3, r1, r3
 800332c:	4413      	add	r3, r2
 800332e:	3360      	adds	r3, #96	; 0x60
 8003330:	2202      	movs	r2, #2
 8003332:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	015a      	lsls	r2, r3, #5
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4413      	add	r3, r2
 800333c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800334a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003352:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4413      	add	r3, r2
 800335c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003360:	461a      	mov	r2, r3
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	e023      	b.n	80033b0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	212c      	movs	r1, #44	; 0x2c
 800336e:	fb01 f303 	mul.w	r3, r1, r3
 8003372:	4413      	add	r3, r2
 8003374:	3361      	adds	r3, #97	; 0x61
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b07      	cmp	r3, #7
 800337a:	d119      	bne.n	80033b0 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	212c      	movs	r1, #44	; 0x2c
 8003382:	fb01 f303 	mul.w	r3, r1, r3
 8003386:	4413      	add	r3, r2
 8003388:	335c      	adds	r3, #92	; 0x5c
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	202c      	movs	r0, #44	; 0x2c
 8003394:	fb00 f303 	mul.w	r3, r0, r3
 8003398:	440b      	add	r3, r1
 800339a:	335c      	adds	r3, #92	; 0x5c
 800339c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	212c      	movs	r1, #44	; 0x2c
 80033a4:	fb01 f303 	mul.w	r3, r1, r3
 80033a8:	4413      	add	r3, r2
 80033aa:	3360      	adds	r3, #96	; 0x60
 80033ac:	2204      	movs	r2, #4
 80033ae:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033bc:	461a      	mov	r2, r3
 80033be:	2302      	movs	r3, #2
 80033c0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	b2d9      	uxtb	r1, r3
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	202c      	movs	r0, #44	; 0x2c
 80033cc:	fb00 f303 	mul.w	r3, r0, r3
 80033d0:	4413      	add	r3, r2
 80033d2:	3360      	adds	r3, #96	; 0x60
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7ff fc57 	bl	8002c8c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80033de:	e081      	b.n	80034e4 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 0310 	and.w	r3, r3, #16
 80033f2:	2b10      	cmp	r3, #16
 80033f4:	d176      	bne.n	80034e4 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	212c      	movs	r1, #44	; 0x2c
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	4413      	add	r3, r2
 8003402:	333f      	adds	r3, #63	; 0x3f
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b03      	cmp	r3, #3
 8003408:	d121      	bne.n	800344e <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	212c      	movs	r1, #44	; 0x2c
 8003410:	fb01 f303 	mul.w	r3, r1, r3
 8003414:	4413      	add	r3, r2
 8003416:	335c      	adds	r3, #92	; 0x5c
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4413      	add	r3, r2
 8003424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	0151      	lsls	r1, r2, #5
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	440a      	add	r2, r1
 8003432:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003436:	f043 0302 	orr.w	r3, r3, #2
 800343a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	4611      	mov	r1, r2
 8003446:	4618      	mov	r0, r3
 8003448:	f004 f8df 	bl	800760a <USB_HC_Halt>
 800344c:	e041      	b.n	80034d2 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	212c      	movs	r1, #44	; 0x2c
 8003454:	fb01 f303 	mul.w	r3, r1, r3
 8003458:	4413      	add	r3, r2
 800345a:	333f      	adds	r3, #63	; 0x3f
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d009      	beq.n	8003476 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	212c      	movs	r1, #44	; 0x2c
 8003468:	fb01 f303 	mul.w	r3, r1, r3
 800346c:	4413      	add	r3, r2
 800346e:	333f      	adds	r3, #63	; 0x3f
 8003470:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003472:	2b02      	cmp	r3, #2
 8003474:	d12d      	bne.n	80034d2 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	212c      	movs	r1, #44	; 0x2c
 800347c:	fb01 f303 	mul.w	r3, r1, r3
 8003480:	4413      	add	r3, r2
 8003482:	335c      	adds	r3, #92	; 0x5c
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d120      	bne.n	80034d2 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	212c      	movs	r1, #44	; 0x2c
 8003496:	fb01 f303 	mul.w	r3, r1, r3
 800349a:	4413      	add	r3, r2
 800349c:	3361      	adds	r3, #97	; 0x61
 800349e:	2203      	movs	r2, #3
 80034a0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	0151      	lsls	r1, r2, #5
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	440a      	add	r2, r1
 80034b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034bc:	f043 0302 	orr.w	r3, r3, #2
 80034c0:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	4611      	mov	r1, r2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f004 f89c 	bl	800760a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	015a      	lsls	r2, r3, #5
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4413      	add	r3, r2
 80034da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034de:	461a      	mov	r2, r3
 80034e0:	2310      	movs	r3, #16
 80034e2:	6093      	str	r3, [r2, #8]
}
 80034e4:	bf00      	nop
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003502:	78fb      	ldrb	r3, [r7, #3]
 8003504:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	015a      	lsls	r2, r3, #5
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	4413      	add	r3, r2
 800350e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b04      	cmp	r3, #4
 800351a:	d119      	bne.n	8003550 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	4413      	add	r3, r2
 8003524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003528:	461a      	mov	r2, r3
 800352a:	2304      	movs	r3, #4
 800352c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	4413      	add	r3, r2
 8003536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	0151      	lsls	r1, r2, #5
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	440a      	add	r2, r1
 8003544:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003548:	f043 0302 	orr.w	r3, r3, #2
 800354c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800354e:	e3ca      	b.n	8003ce6 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	4413      	add	r3, r2
 8003558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b20      	cmp	r3, #32
 8003564:	d13e      	bne.n	80035e4 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	4413      	add	r3, r2
 800356e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003572:	461a      	mov	r2, r3
 8003574:	2320      	movs	r3, #32
 8003576:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	212c      	movs	r1, #44	; 0x2c
 800357e:	fb01 f303 	mul.w	r3, r1, r3
 8003582:	4413      	add	r3, r2
 8003584:	333d      	adds	r3, #61	; 0x3d
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b01      	cmp	r3, #1
 800358a:	f040 83ac 	bne.w	8003ce6 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	212c      	movs	r1, #44	; 0x2c
 8003594:	fb01 f303 	mul.w	r3, r1, r3
 8003598:	4413      	add	r3, r2
 800359a:	333d      	adds	r3, #61	; 0x3d
 800359c:	2200      	movs	r2, #0
 800359e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	212c      	movs	r1, #44	; 0x2c
 80035a6:	fb01 f303 	mul.w	r3, r1, r3
 80035aa:	4413      	add	r3, r2
 80035ac:	3360      	adds	r3, #96	; 0x60
 80035ae:	2202      	movs	r2, #2
 80035b0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	0151      	lsls	r1, r2, #5
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	440a      	add	r2, r1
 80035c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035cc:	f043 0302 	orr.w	r3, r3, #2
 80035d0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	4611      	mov	r1, r2
 80035dc:	4618      	mov	r0, r3
 80035de:	f004 f814 	bl	800760a <USB_HC_Halt>
}
 80035e2:	e380      	b.n	8003ce6 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035fa:	d122      	bne.n	8003642 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	4413      	add	r3, r2
 8003604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	0151      	lsls	r1, r2, #5
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	440a      	add	r2, r1
 8003612:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003616:	f043 0302 	orr.w	r3, r3, #2
 800361a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	4611      	mov	r1, r2
 8003626:	4618      	mov	r0, r3
 8003628:	f003 ffef 	bl	800760a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	4413      	add	r3, r2
 8003634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003638:	461a      	mov	r2, r3
 800363a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800363e:	6093      	str	r3, [r2, #8]
}
 8003640:	e351      	b.n	8003ce6 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	4413      	add	r3, r2
 800364a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b01      	cmp	r3, #1
 8003656:	d150      	bne.n	80036fa <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	212c      	movs	r1, #44	; 0x2c
 800365e:	fb01 f303 	mul.w	r3, r1, r3
 8003662:	4413      	add	r3, r2
 8003664:	335c      	adds	r3, #92	; 0x5c
 8003666:	2200      	movs	r2, #0
 8003668:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	4413      	add	r3, r2
 8003672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367c:	2b40      	cmp	r3, #64	; 0x40
 800367e:	d111      	bne.n	80036a4 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	212c      	movs	r1, #44	; 0x2c
 8003686:	fb01 f303 	mul.w	r3, r1, r3
 800368a:	4413      	add	r3, r2
 800368c:	333d      	adds	r3, #61	; 0x3d
 800368e:	2201      	movs	r2, #1
 8003690:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	015a      	lsls	r2, r3, #5
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	4413      	add	r3, r2
 800369a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369e:	461a      	mov	r2, r3
 80036a0:	2340      	movs	r3, #64	; 0x40
 80036a2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	015a      	lsls	r2, r3, #5
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	4413      	add	r3, r2
 80036ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	0151      	lsls	r1, r2, #5
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	440a      	add	r2, r1
 80036ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036be:	f043 0302 	orr.w	r3, r3, #2
 80036c2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	4611      	mov	r1, r2
 80036ce:	4618      	mov	r0, r3
 80036d0:	f003 ff9b 	bl	800760a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e0:	461a      	mov	r2, r3
 80036e2:	2301      	movs	r3, #1
 80036e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	212c      	movs	r1, #44	; 0x2c
 80036ec:	fb01 f303 	mul.w	r3, r1, r3
 80036f0:	4413      	add	r3, r2
 80036f2:	3361      	adds	r3, #97	; 0x61
 80036f4:	2201      	movs	r2, #1
 80036f6:	701a      	strb	r2, [r3, #0]
}
 80036f8:	e2f5      	b.n	8003ce6 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	4413      	add	r3, r2
 8003702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370c:	2b40      	cmp	r3, #64	; 0x40
 800370e:	d13c      	bne.n	800378a <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	212c      	movs	r1, #44	; 0x2c
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	4413      	add	r3, r2
 800371c:	3361      	adds	r3, #97	; 0x61
 800371e:	2204      	movs	r2, #4
 8003720:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	212c      	movs	r1, #44	; 0x2c
 8003728:	fb01 f303 	mul.w	r3, r1, r3
 800372c:	4413      	add	r3, r2
 800372e:	333d      	adds	r3, #61	; 0x3d
 8003730:	2201      	movs	r2, #1
 8003732:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	212c      	movs	r1, #44	; 0x2c
 800373a:	fb01 f303 	mul.w	r3, r1, r3
 800373e:	4413      	add	r3, r2
 8003740:	335c      	adds	r3, #92	; 0x5c
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	4413      	add	r3, r2
 800374e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	0151      	lsls	r1, r2, #5
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	440a      	add	r2, r1
 800375c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003760:	f043 0302 	orr.w	r3, r3, #2
 8003764:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	4611      	mov	r1, r2
 8003770:	4618      	mov	r0, r3
 8003772:	f003 ff4a 	bl	800760a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	4413      	add	r3, r2
 800377e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003782:	461a      	mov	r2, r3
 8003784:	2340      	movs	r3, #64	; 0x40
 8003786:	6093      	str	r3, [r2, #8]
}
 8003788:	e2ad      	b.n	8003ce6 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	4413      	add	r3, r2
 8003792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b08      	cmp	r3, #8
 800379e:	d12a      	bne.n	80037f6 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ac:	461a      	mov	r2, r3
 80037ae:	2308      	movs	r3, #8
 80037b0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	0151      	lsls	r1, r2, #5
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	440a      	add	r2, r1
 80037c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037cc:	f043 0302 	orr.w	r3, r3, #2
 80037d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	4611      	mov	r1, r2
 80037dc:	4618      	mov	r0, r3
 80037de:	f003 ff14 	bl	800760a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	212c      	movs	r1, #44	; 0x2c
 80037e8:	fb01 f303 	mul.w	r3, r1, r3
 80037ec:	4413      	add	r3, r2
 80037ee:	3361      	adds	r3, #97	; 0x61
 80037f0:	2205      	movs	r2, #5
 80037f2:	701a      	strb	r2, [r3, #0]
}
 80037f4:	e277      	b.n	8003ce6 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	2b10      	cmp	r3, #16
 800380a:	d150      	bne.n	80038ae <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	212c      	movs	r1, #44	; 0x2c
 8003812:	fb01 f303 	mul.w	r3, r1, r3
 8003816:	4413      	add	r3, r2
 8003818:	335c      	adds	r3, #92	; 0x5c
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	212c      	movs	r1, #44	; 0x2c
 8003824:	fb01 f303 	mul.w	r3, r1, r3
 8003828:	4413      	add	r3, r2
 800382a:	3361      	adds	r3, #97	; 0x61
 800382c:	2203      	movs	r2, #3
 800382e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	212c      	movs	r1, #44	; 0x2c
 8003836:	fb01 f303 	mul.w	r3, r1, r3
 800383a:	4413      	add	r3, r2
 800383c:	333d      	adds	r3, #61	; 0x3d
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d112      	bne.n	800386a <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	212c      	movs	r1, #44	; 0x2c
 800384a:	fb01 f303 	mul.w	r3, r1, r3
 800384e:	4413      	add	r3, r2
 8003850:	333c      	adds	r3, #60	; 0x3c
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d108      	bne.n	800386a <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	212c      	movs	r1, #44	; 0x2c
 800385e:	fb01 f303 	mul.w	r3, r1, r3
 8003862:	4413      	add	r3, r2
 8003864:	333d      	adds	r3, #61	; 0x3d
 8003866:	2201      	movs	r2, #1
 8003868:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	4413      	add	r3, r2
 8003872:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	0151      	lsls	r1, r2, #5
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	440a      	add	r2, r1
 8003880:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003884:	f043 0302 	orr.w	r3, r3, #2
 8003888:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	4611      	mov	r1, r2
 8003894:	4618      	mov	r0, r3
 8003896:	f003 feb8 	bl	800760a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a6:	461a      	mov	r2, r3
 80038a8:	2310      	movs	r3, #16
 80038aa:	6093      	str	r3, [r2, #8]
}
 80038ac:	e21b      	b.n	8003ce6 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c0:	2b80      	cmp	r3, #128	; 0x80
 80038c2:	d174      	bne.n	80039ae <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d121      	bne.n	8003910 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	212c      	movs	r1, #44	; 0x2c
 80038d2:	fb01 f303 	mul.w	r3, r1, r3
 80038d6:	4413      	add	r3, r2
 80038d8:	3361      	adds	r3, #97	; 0x61
 80038da:	2206      	movs	r2, #6
 80038dc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	0151      	lsls	r1, r2, #5
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	440a      	add	r2, r1
 80038f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038f8:	f043 0302 	orr.w	r3, r3, #2
 80038fc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	b2d2      	uxtb	r2, r2
 8003906:	4611      	mov	r1, r2
 8003908:	4618      	mov	r0, r3
 800390a:	f003 fe7e 	bl	800760a <USB_HC_Halt>
 800390e:	e044      	b.n	800399a <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	212c      	movs	r1, #44	; 0x2c
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	4413      	add	r3, r2
 800391c:	335c      	adds	r3, #92	; 0x5c
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	202c      	movs	r0, #44	; 0x2c
 8003928:	fb00 f303 	mul.w	r3, r0, r3
 800392c:	440b      	add	r3, r1
 800392e:	335c      	adds	r3, #92	; 0x5c
 8003930:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	212c      	movs	r1, #44	; 0x2c
 8003938:	fb01 f303 	mul.w	r3, r1, r3
 800393c:	4413      	add	r3, r2
 800393e:	335c      	adds	r3, #92	; 0x5c
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d920      	bls.n	8003988 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	212c      	movs	r1, #44	; 0x2c
 800394c:	fb01 f303 	mul.w	r3, r1, r3
 8003950:	4413      	add	r3, r2
 8003952:	335c      	adds	r3, #92	; 0x5c
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	212c      	movs	r1, #44	; 0x2c
 800395e:	fb01 f303 	mul.w	r3, r1, r3
 8003962:	4413      	add	r3, r2
 8003964:	3360      	adds	r3, #96	; 0x60
 8003966:	2204      	movs	r2, #4
 8003968:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	b2d9      	uxtb	r1, r3
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	202c      	movs	r0, #44	; 0x2c
 8003974:	fb00 f303 	mul.w	r3, r0, r3
 8003978:	4413      	add	r3, r2
 800397a:	3360      	adds	r3, #96	; 0x60
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f7ff f983 	bl	8002c8c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003986:	e008      	b.n	800399a <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	212c      	movs	r1, #44	; 0x2c
 800398e:	fb01 f303 	mul.w	r3, r1, r3
 8003992:	4413      	add	r3, r2
 8003994:	3360      	adds	r3, #96	; 0x60
 8003996:	2202      	movs	r2, #2
 8003998:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a6:	461a      	mov	r2, r3
 80039a8:	2380      	movs	r3, #128	; 0x80
 80039aa:	6093      	str	r3, [r2, #8]
}
 80039ac:	e19b      	b.n	8003ce6 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c4:	d134      	bne.n	8003a30 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	697a      	ldr	r2, [r7, #20]
 80039d6:	0151      	lsls	r1, r2, #5
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	440a      	add	r2, r1
 80039dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039e0:	f043 0302 	orr.w	r3, r3, #2
 80039e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	4611      	mov	r1, r2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f003 fe0a 	bl	800760a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a02:	461a      	mov	r2, r3
 8003a04:	2310      	movs	r3, #16
 8003a06:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a14:	461a      	mov	r2, r3
 8003a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	212c      	movs	r1, #44	; 0x2c
 8003a22:	fb01 f303 	mul.w	r3, r1, r3
 8003a26:	4413      	add	r3, r2
 8003a28:	3361      	adds	r3, #97	; 0x61
 8003a2a:	2208      	movs	r2, #8
 8003a2c:	701a      	strb	r2, [r3, #0]
}
 8003a2e:	e15a      	b.n	8003ce6 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	015a      	lsls	r2, r3, #5
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	f040 814f 	bne.w	8003ce6 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	0151      	lsls	r1, r2, #5
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	440a      	add	r2, r1
 8003a5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a62:	f023 0302 	bic.w	r3, r3, #2
 8003a66:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	212c      	movs	r1, #44	; 0x2c
 8003a6e:	fb01 f303 	mul.w	r3, r1, r3
 8003a72:	4413      	add	r3, r2
 8003a74:	3361      	adds	r3, #97	; 0x61
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d17d      	bne.n	8003b78 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	212c      	movs	r1, #44	; 0x2c
 8003a82:	fb01 f303 	mul.w	r3, r1, r3
 8003a86:	4413      	add	r3, r2
 8003a88:	3360      	adds	r3, #96	; 0x60
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	212c      	movs	r1, #44	; 0x2c
 8003a94:	fb01 f303 	mul.w	r3, r1, r3
 8003a98:	4413      	add	r3, r2
 8003a9a:	333f      	adds	r3, #63	; 0x3f
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d00a      	beq.n	8003ab8 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	212c      	movs	r1, #44	; 0x2c
 8003aa8:	fb01 f303 	mul.w	r3, r1, r3
 8003aac:	4413      	add	r3, r2
 8003aae:	333f      	adds	r3, #63	; 0x3f
 8003ab0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	f040 8100 	bne.w	8003cb8 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d113      	bne.n	8003ae8 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	212c      	movs	r1, #44	; 0x2c
 8003ac6:	fb01 f303 	mul.w	r3, r1, r3
 8003aca:	4413      	add	r3, r2
 8003acc:	3355      	adds	r3, #85	; 0x55
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	f083 0301 	eor.w	r3, r3, #1
 8003ad4:	b2d8      	uxtb	r0, r3
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	212c      	movs	r1, #44	; 0x2c
 8003adc:	fb01 f303 	mul.w	r3, r1, r3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3355      	adds	r3, #85	; 0x55
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	f040 80e3 	bne.w	8003cb8 <HCD_HC_OUT_IRQHandler+0x7cc>
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	212c      	movs	r1, #44	; 0x2c
 8003af8:	fb01 f303 	mul.w	r3, r1, r3
 8003afc:	4413      	add	r3, r2
 8003afe:	334c      	adds	r3, #76	; 0x4c
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 80d8 	beq.w	8003cb8 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	212c      	movs	r1, #44	; 0x2c
 8003b0e:	fb01 f303 	mul.w	r3, r1, r3
 8003b12:	4413      	add	r3, r2
 8003b14:	334c      	adds	r3, #76	; 0x4c
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	202c      	movs	r0, #44	; 0x2c
 8003b1e:	fb00 f202 	mul.w	r2, r0, r2
 8003b22:	440a      	add	r2, r1
 8003b24:	3240      	adds	r2, #64	; 0x40
 8003b26:	8812      	ldrh	r2, [r2, #0]
 8003b28:	4413      	add	r3, r2
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	202c      	movs	r0, #44	; 0x2c
 8003b32:	fb00 f202 	mul.w	r2, r0, r2
 8003b36:	440a      	add	r2, r1
 8003b38:	3240      	adds	r2, #64	; 0x40
 8003b3a:	8812      	ldrh	r2, [r2, #0]
 8003b3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80b5 	beq.w	8003cb8 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	212c      	movs	r1, #44	; 0x2c
 8003b54:	fb01 f303 	mul.w	r3, r1, r3
 8003b58:	4413      	add	r3, r2
 8003b5a:	3355      	adds	r3, #85	; 0x55
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	f083 0301 	eor.w	r3, r3, #1
 8003b62:	b2d8      	uxtb	r0, r3
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	212c      	movs	r1, #44	; 0x2c
 8003b6a:	fb01 f303 	mul.w	r3, r1, r3
 8003b6e:	4413      	add	r3, r2
 8003b70:	3355      	adds	r3, #85	; 0x55
 8003b72:	4602      	mov	r2, r0
 8003b74:	701a      	strb	r2, [r3, #0]
 8003b76:	e09f      	b.n	8003cb8 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	212c      	movs	r1, #44	; 0x2c
 8003b7e:	fb01 f303 	mul.w	r3, r1, r3
 8003b82:	4413      	add	r3, r2
 8003b84:	3361      	adds	r3, #97	; 0x61
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d109      	bne.n	8003ba0 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	212c      	movs	r1, #44	; 0x2c
 8003b92:	fb01 f303 	mul.w	r3, r1, r3
 8003b96:	4413      	add	r3, r2
 8003b98:	3360      	adds	r3, #96	; 0x60
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	701a      	strb	r2, [r3, #0]
 8003b9e:	e08b      	b.n	8003cb8 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	212c      	movs	r1, #44	; 0x2c
 8003ba6:	fb01 f303 	mul.w	r3, r1, r3
 8003baa:	4413      	add	r3, r2
 8003bac:	3361      	adds	r3, #97	; 0x61
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d109      	bne.n	8003bc8 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	212c      	movs	r1, #44	; 0x2c
 8003bba:	fb01 f303 	mul.w	r3, r1, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	3360      	adds	r3, #96	; 0x60
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	701a      	strb	r2, [r3, #0]
 8003bc6:	e077      	b.n	8003cb8 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	212c      	movs	r1, #44	; 0x2c
 8003bce:	fb01 f303 	mul.w	r3, r1, r3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3361      	adds	r3, #97	; 0x61
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b05      	cmp	r3, #5
 8003bda:	d109      	bne.n	8003bf0 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	212c      	movs	r1, #44	; 0x2c
 8003be2:	fb01 f303 	mul.w	r3, r1, r3
 8003be6:	4413      	add	r3, r2
 8003be8:	3360      	adds	r3, #96	; 0x60
 8003bea:	2205      	movs	r2, #5
 8003bec:	701a      	strb	r2, [r3, #0]
 8003bee:	e063      	b.n	8003cb8 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	212c      	movs	r1, #44	; 0x2c
 8003bf6:	fb01 f303 	mul.w	r3, r1, r3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3361      	adds	r3, #97	; 0x61
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b06      	cmp	r3, #6
 8003c02:	d009      	beq.n	8003c18 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	212c      	movs	r1, #44	; 0x2c
 8003c0a:	fb01 f303 	mul.w	r3, r1, r3
 8003c0e:	4413      	add	r3, r2
 8003c10:	3361      	adds	r3, #97	; 0x61
 8003c12:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d14f      	bne.n	8003cb8 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	212c      	movs	r1, #44	; 0x2c
 8003c1e:	fb01 f303 	mul.w	r3, r1, r3
 8003c22:	4413      	add	r3, r2
 8003c24:	335c      	adds	r3, #92	; 0x5c
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	202c      	movs	r0, #44	; 0x2c
 8003c30:	fb00 f303 	mul.w	r3, r0, r3
 8003c34:	440b      	add	r3, r1
 8003c36:	335c      	adds	r3, #92	; 0x5c
 8003c38:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	212c      	movs	r1, #44	; 0x2c
 8003c40:	fb01 f303 	mul.w	r3, r1, r3
 8003c44:	4413      	add	r3, r2
 8003c46:	335c      	adds	r3, #92	; 0x5c
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d912      	bls.n	8003c74 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	212c      	movs	r1, #44	; 0x2c
 8003c54:	fb01 f303 	mul.w	r3, r1, r3
 8003c58:	4413      	add	r3, r2
 8003c5a:	335c      	adds	r3, #92	; 0x5c
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	212c      	movs	r1, #44	; 0x2c
 8003c66:	fb01 f303 	mul.w	r3, r1, r3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	3360      	adds	r3, #96	; 0x60
 8003c6e:	2204      	movs	r2, #4
 8003c70:	701a      	strb	r2, [r3, #0]
 8003c72:	e021      	b.n	8003cb8 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	212c      	movs	r1, #44	; 0x2c
 8003c7a:	fb01 f303 	mul.w	r3, r1, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	3360      	adds	r3, #96	; 0x60
 8003c82:	2202      	movs	r2, #2
 8003c84:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c9c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ca4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	b2d9      	uxtb	r1, r3
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	202c      	movs	r0, #44	; 0x2c
 8003cd4:	fb00 f303 	mul.w	r3, r0, r3
 8003cd8:	4413      	add	r3, r2
 8003cda:	3360      	adds	r3, #96	; 0x60
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7fe ffd3 	bl	8002c8c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003ce6:	bf00      	nop
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b08a      	sub	sp, #40	; 0x28
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	0c5b      	lsrs	r3, r3, #17
 8003d14:	f003 030f 	and.w	r3, r3, #15
 8003d18:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	091b      	lsrs	r3, r3, #4
 8003d1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d22:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d004      	beq.n	8003d34 <HCD_RXQLVL_IRQHandler+0x46>
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2b05      	cmp	r3, #5
 8003d2e:	f000 80a9 	beq.w	8003e84 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003d32:	e0aa      	b.n	8003e8a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 80a6 	beq.w	8003e88 <HCD_RXQLVL_IRQHandler+0x19a>
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	212c      	movs	r1, #44	; 0x2c
 8003d42:	fb01 f303 	mul.w	r3, r1, r3
 8003d46:	4413      	add	r3, r2
 8003d48:	3344      	adds	r3, #68	; 0x44
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 809b 	beq.w	8003e88 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	212c      	movs	r1, #44	; 0x2c
 8003d58:	fb01 f303 	mul.w	r3, r1, r3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	3350      	adds	r3, #80	; 0x50
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	441a      	add	r2, r3
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	202c      	movs	r0, #44	; 0x2c
 8003d6c:	fb00 f303 	mul.w	r3, r0, r3
 8003d70:	440b      	add	r3, r1
 8003d72:	334c      	adds	r3, #76	; 0x4c
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d87a      	bhi.n	8003e70 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6818      	ldr	r0, [r3, #0]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	212c      	movs	r1, #44	; 0x2c
 8003d84:	fb01 f303 	mul.w	r3, r1, r3
 8003d88:	4413      	add	r3, r2
 8003d8a:	3344      	adds	r3, #68	; 0x44
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	693a      	ldr	r2, [r7, #16]
 8003d90:	b292      	uxth	r2, r2
 8003d92:	4619      	mov	r1, r3
 8003d94:	f003 fa8e 	bl	80072b4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	212c      	movs	r1, #44	; 0x2c
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	4413      	add	r3, r2
 8003da4:	3344      	adds	r3, #68	; 0x44
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	441a      	add	r2, r3
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	202c      	movs	r0, #44	; 0x2c
 8003db2:	fb00 f303 	mul.w	r3, r0, r3
 8003db6:	440b      	add	r3, r1
 8003db8:	3344      	adds	r3, #68	; 0x44
 8003dba:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	212c      	movs	r1, #44	; 0x2c
 8003dc2:	fb01 f303 	mul.w	r3, r1, r3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	3350      	adds	r3, #80	; 0x50
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	441a      	add	r2, r3
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	202c      	movs	r0, #44	; 0x2c
 8003dd6:	fb00 f303 	mul.w	r3, r0, r3
 8003dda:	440b      	add	r3, r1
 8003ddc:	3350      	adds	r3, #80	; 0x50
 8003dde:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	0cdb      	lsrs	r3, r3, #19
 8003df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003df4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	212c      	movs	r1, #44	; 0x2c
 8003dfc:	fb01 f303 	mul.w	r3, r1, r3
 8003e00:	4413      	add	r3, r2
 8003e02:	3340      	adds	r3, #64	; 0x40
 8003e04:	881b      	ldrh	r3, [r3, #0]
 8003e06:	461a      	mov	r2, r3
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d13c      	bne.n	8003e88 <HCD_RXQLVL_IRQHandler+0x19a>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d039      	beq.n	8003e88 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e2a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e32:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e40:	461a      	mov	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	212c      	movs	r1, #44	; 0x2c
 8003e4c:	fb01 f303 	mul.w	r3, r1, r3
 8003e50:	4413      	add	r3, r2
 8003e52:	3354      	adds	r3, #84	; 0x54
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	f083 0301 	eor.w	r3, r3, #1
 8003e5a:	b2d8      	uxtb	r0, r3
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	212c      	movs	r1, #44	; 0x2c
 8003e62:	fb01 f303 	mul.w	r3, r1, r3
 8003e66:	4413      	add	r3, r2
 8003e68:	3354      	adds	r3, #84	; 0x54
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	701a      	strb	r2, [r3, #0]
      break;
 8003e6e:	e00b      	b.n	8003e88 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	212c      	movs	r1, #44	; 0x2c
 8003e76:	fb01 f303 	mul.w	r3, r1, r3
 8003e7a:	4413      	add	r3, r2
 8003e7c:	3360      	adds	r3, #96	; 0x60
 8003e7e:	2204      	movs	r2, #4
 8003e80:	701a      	strb	r2, [r3, #0]
      break;
 8003e82:	e001      	b.n	8003e88 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003e84:	bf00      	nop
 8003e86:	e000      	b.n	8003e8a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003e88:	bf00      	nop
  }
}
 8003e8a:	bf00      	nop
 8003e8c:	3728      	adds	r7, #40	; 0x28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b086      	sub	sp, #24
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003ebe:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d10b      	bne.n	8003ee2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d102      	bne.n	8003eda <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7fe feb1 	bl	8002c3c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f043 0302 	orr.w	r3, r3, #2
 8003ee0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d132      	bne.n	8003f52 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	f043 0308 	orr.w	r3, r3, #8
 8003ef2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d126      	bne.n	8003f4c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d113      	bne.n	8003f2e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003f0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f10:	d106      	bne.n	8003f20 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2102      	movs	r1, #2
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f003 fb2b 	bl	8007574 <USB_InitFSLSPClkSel>
 8003f1e:	e011      	b.n	8003f44 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2101      	movs	r1, #1
 8003f26:	4618      	mov	r0, r3
 8003f28:	f003 fb24 	bl	8007574 <USB_InitFSLSPClkSel>
 8003f2c:	e00a      	b.n	8003f44 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d106      	bne.n	8003f44 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003f42:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f7fe fe8d 	bl	8002c64 <HAL_HCD_PortEnabled_Callback>
 8003f4a:	e002      	b.n	8003f52 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7fe fe93 	bl	8002c78 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b20      	cmp	r3, #32
 8003f5a:	d103      	bne.n	8003f64 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f043 0320 	orr.w	r3, r3, #32
 8003f62:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	6013      	str	r3, [r2, #0]
}
 8003f70:	bf00      	nop
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e12b      	b.n	80041e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7fc ff7a 	bl	8000e98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2224      	movs	r2, #36	; 0x24
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0201 	bic.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fdc:	f001 f940 	bl	8005260 <HAL_RCC_GetPCLK1Freq>
 8003fe0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	4a81      	ldr	r2, [pc, #516]	; (80041ec <HAL_I2C_Init+0x274>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d807      	bhi.n	8003ffc <HAL_I2C_Init+0x84>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4a80      	ldr	r2, [pc, #512]	; (80041f0 <HAL_I2C_Init+0x278>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	bf94      	ite	ls
 8003ff4:	2301      	movls	r3, #1
 8003ff6:	2300      	movhi	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	e006      	b.n	800400a <HAL_I2C_Init+0x92>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4a7d      	ldr	r2, [pc, #500]	; (80041f4 <HAL_I2C_Init+0x27c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	bf94      	ite	ls
 8004004:	2301      	movls	r3, #1
 8004006:	2300      	movhi	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e0e7      	b.n	80041e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4a78      	ldr	r2, [pc, #480]	; (80041f8 <HAL_I2C_Init+0x280>)
 8004016:	fba2 2303 	umull	r2, r3, r2, r3
 800401a:	0c9b      	lsrs	r3, r3, #18
 800401c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	430a      	orrs	r2, r1
 8004030:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	4a6a      	ldr	r2, [pc, #424]	; (80041ec <HAL_I2C_Init+0x274>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d802      	bhi.n	800404c <HAL_I2C_Init+0xd4>
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	3301      	adds	r3, #1
 800404a:	e009      	b.n	8004060 <HAL_I2C_Init+0xe8>
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004052:	fb02 f303 	mul.w	r3, r2, r3
 8004056:	4a69      	ldr	r2, [pc, #420]	; (80041fc <HAL_I2C_Init+0x284>)
 8004058:	fba2 2303 	umull	r2, r3, r2, r3
 800405c:	099b      	lsrs	r3, r3, #6
 800405e:	3301      	adds	r3, #1
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	430b      	orrs	r3, r1
 8004066:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004072:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	495c      	ldr	r1, [pc, #368]	; (80041ec <HAL_I2C_Init+0x274>)
 800407c:	428b      	cmp	r3, r1
 800407e:	d819      	bhi.n	80040b4 <HAL_I2C_Init+0x13c>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	1e59      	subs	r1, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	fbb1 f3f3 	udiv	r3, r1, r3
 800408e:	1c59      	adds	r1, r3, #1
 8004090:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004094:	400b      	ands	r3, r1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <HAL_I2C_Init+0x138>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	1e59      	subs	r1, r3, #1
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80040a8:	3301      	adds	r3, #1
 80040aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ae:	e051      	b.n	8004154 <HAL_I2C_Init+0x1dc>
 80040b0:	2304      	movs	r3, #4
 80040b2:	e04f      	b.n	8004154 <HAL_I2C_Init+0x1dc>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d111      	bne.n	80040e0 <HAL_I2C_Init+0x168>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	1e58      	subs	r0, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6859      	ldr	r1, [r3, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	440b      	add	r3, r1
 80040ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ce:	3301      	adds	r3, #1
 80040d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	bf0c      	ite	eq
 80040d8:	2301      	moveq	r3, #1
 80040da:	2300      	movne	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	e012      	b.n	8004106 <HAL_I2C_Init+0x18e>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	1e58      	subs	r0, r3, #1
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6859      	ldr	r1, [r3, #4]
 80040e8:	460b      	mov	r3, r1
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	0099      	lsls	r1, r3, #2
 80040f0:	440b      	add	r3, r1
 80040f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040f6:	3301      	adds	r3, #1
 80040f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	bf0c      	ite	eq
 8004100:	2301      	moveq	r3, #1
 8004102:	2300      	movne	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <HAL_I2C_Init+0x196>
 800410a:	2301      	movs	r3, #1
 800410c:	e022      	b.n	8004154 <HAL_I2C_Init+0x1dc>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10e      	bne.n	8004134 <HAL_I2C_Init+0x1bc>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	1e58      	subs	r0, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6859      	ldr	r1, [r3, #4]
 800411e:	460b      	mov	r3, r1
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	440b      	add	r3, r1
 8004124:	fbb0 f3f3 	udiv	r3, r0, r3
 8004128:	3301      	adds	r3, #1
 800412a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800412e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004132:	e00f      	b.n	8004154 <HAL_I2C_Init+0x1dc>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	1e58      	subs	r0, r3, #1
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6859      	ldr	r1, [r3, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	440b      	add	r3, r1
 8004142:	0099      	lsls	r1, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	fbb0 f3f3 	udiv	r3, r0, r3
 800414a:	3301      	adds	r3, #1
 800414c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004150:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	6809      	ldr	r1, [r1, #0]
 8004158:	4313      	orrs	r3, r2
 800415a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69da      	ldr	r2, [r3, #28]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	431a      	orrs	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004182:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6911      	ldr	r1, [r2, #16]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	68d2      	ldr	r2, [r2, #12]
 800418e:	4311      	orrs	r1, r2
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	6812      	ldr	r2, [r2, #0]
 8004194:	430b      	orrs	r3, r1
 8004196:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695a      	ldr	r2, [r3, #20]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	000186a0 	.word	0x000186a0
 80041f0:	001e847f 	.word	0x001e847f
 80041f4:	003d08ff 	.word	0x003d08ff
 80041f8:	431bde83 	.word	0x431bde83
 80041fc:	10624dd3 	.word	0x10624dd3

08004200 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b20      	cmp	r3, #32
 8004214:	d129      	bne.n	800426a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2224      	movs	r2, #36	; 0x24
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 0201 	bic.w	r2, r2, #1
 800422c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0210 	bic.w	r2, r2, #16
 800423c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f042 0201 	orr.w	r2, r2, #1
 800425c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2220      	movs	r2, #32
 8004262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	e000      	b.n	800426c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800426a:	2302      	movs	r3, #2
  }
}
 800426c:	4618      	mov	r0, r3
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004282:	2300      	movs	r3, #0
 8004284:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b20      	cmp	r3, #32
 8004290:	d12a      	bne.n	80042e8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2224      	movs	r2, #36	; 0x24
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0201 	bic.w	r2, r2, #1
 80042a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80042b2:	89fb      	ldrh	r3, [r7, #14]
 80042b4:	f023 030f 	bic.w	r3, r3, #15
 80042b8:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	b29a      	uxth	r2, r3
 80042be:	89fb      	ldrh	r3, [r7, #14]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	89fa      	ldrh	r2, [r7, #14]
 80042ca:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0201 	orr.w	r2, r2, #1
 80042da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	e000      	b.n	80042ea <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80042e8:	2302      	movs	r3, #2
  }
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3714      	adds	r7, #20
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
	...

080042f8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e0bf      	b.n	800448a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d106      	bne.n	8004324 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7fc fea4 	bl	800106c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	699a      	ldr	r2, [r3, #24]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800433a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6999      	ldr	r1, [r3, #24]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004350:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6899      	ldr	r1, [r3, #8]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	4b4a      	ldr	r3, [pc, #296]	; (8004494 <HAL_LTDC_Init+0x19c>)
 800436c:	400b      	ands	r3, r1
 800436e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	041b      	lsls	r3, r3, #16
 8004376:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6899      	ldr	r1, [r3, #8]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699a      	ldr	r2, [r3, #24]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68d9      	ldr	r1, [r3, #12]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	4b3e      	ldr	r3, [pc, #248]	; (8004494 <HAL_LTDC_Init+0x19c>)
 800439a:	400b      	ands	r3, r1
 800439c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	041b      	lsls	r3, r3, #16
 80043a4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68d9      	ldr	r1, [r3, #12]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a1a      	ldr	r2, [r3, #32]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6919      	ldr	r1, [r3, #16]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	4b33      	ldr	r3, [pc, #204]	; (8004494 <HAL_LTDC_Init+0x19c>)
 80043c8:	400b      	ands	r3, r1
 80043ca:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	041b      	lsls	r3, r3, #16
 80043d2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6919      	ldr	r1, [r3, #16]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6959      	ldr	r1, [r3, #20]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	4b27      	ldr	r3, [pc, #156]	; (8004494 <HAL_LTDC_Init+0x19c>)
 80043f6:	400b      	ands	r3, r1
 80043f8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fe:	041b      	lsls	r3, r3, #16
 8004400:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6959      	ldr	r1, [r3, #20]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800441e:	021b      	lsls	r3, r3, #8
 8004420:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004428:	041b      	lsls	r3, r3, #16
 800442a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800443a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4313      	orrs	r3, r2
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0206 	orr.w	r2, r2, #6
 8004466:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699a      	ldr	r2, [r3, #24]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	f000f800 	.word	0xf000f800

08004498 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ae:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d023      	beq.n	8004502 <HAL_LTDC_IRQHandler+0x6a>
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d01e      	beq.n	8004502 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0204 	bic.w	r2, r2, #4
 80044d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2204      	movs	r2, #4
 80044da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044e2:	f043 0201 	orr.w	r2, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2204      	movs	r2, #4
 80044f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 f86f 	bl	80045e0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d023      	beq.n	8004554 <HAL_LTDC_IRQHandler+0xbc>
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d01e      	beq.n	8004554 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0202 	bic.w	r2, r2, #2
 8004524:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2202      	movs	r2, #2
 800452c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004534:	f043 0202 	orr.w	r2, r3, #2
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2204      	movs	r2, #4
 8004542:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f846 	bl	80045e0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d01b      	beq.n	8004596 <HAL_LTDC_IRQHandler+0xfe>
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d016      	beq.n	8004596 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0201 	bic.w	r2, r2, #1
 8004576:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2201      	movs	r2, #1
 800457e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f82f 	bl	80045f4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b00      	cmp	r3, #0
 800459e:	d01b      	beq.n	80045d8 <HAL_LTDC_IRQHandler+0x140>
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d016      	beq.n	80045d8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0208 	bic.w	r2, r2, #8
 80045b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2208      	movs	r2, #8
 80045c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f818 	bl	8004608 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800461c:	b5b0      	push	{r4, r5, r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800462e:	2b01      	cmp	r3, #1
 8004630:	d101      	bne.n	8004636 <HAL_LTDC_ConfigLayer+0x1a>
 8004632:	2302      	movs	r3, #2
 8004634:	e02c      	b.n	8004690 <HAL_LTDC_ConfigLayer+0x74>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2202      	movs	r2, #2
 8004642:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2134      	movs	r1, #52	; 0x34
 800464c:	fb01 f303 	mul.w	r3, r1, r3
 8004650:	4413      	add	r3, r2
 8004652:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	4614      	mov	r4, r2
 800465a:	461d      	mov	r5, r3
 800465c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800465e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004668:	682b      	ldr	r3, [r5, #0]
 800466a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	68b9      	ldr	r1, [r7, #8]
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 f811 	bl	8004698 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2201      	movs	r2, #1
 800467c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bdb0      	pop	{r4, r5, r7, pc}

08004698 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004698:	b480      	push	{r7}
 800469a:	b089      	sub	sp, #36	; 0x24
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	0c1b      	lsrs	r3, r3, #16
 80046b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b4:	4413      	add	r3, r2
 80046b6:	041b      	lsls	r3, r3, #16
 80046b8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	01db      	lsls	r3, r3, #7
 80046c4:	4413      	add	r3, r2
 80046c6:	3384      	adds	r3, #132	; 0x84
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	6812      	ldr	r2, [r2, #0]
 80046ce:	4611      	mov	r1, r2
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	01d2      	lsls	r2, r2, #7
 80046d4:	440a      	add	r2, r1
 80046d6:	3284      	adds	r2, #132	; 0x84
 80046d8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80046dc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	0c1b      	lsrs	r3, r3, #16
 80046ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ee:	4413      	add	r3, r2
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4619      	mov	r1, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	01db      	lsls	r3, r3, #7
 80046fc:	440b      	add	r3, r1
 80046fe:	3384      	adds	r3, #132	; 0x84
 8004700:	4619      	mov	r1, r3
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	4313      	orrs	r3, r2
 8004706:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004716:	4413      	add	r3, r2
 8004718:	041b      	lsls	r3, r3, #16
 800471a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	461a      	mov	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	01db      	lsls	r3, r3, #7
 8004726:	4413      	add	r3, r2
 8004728:	3384      	adds	r3, #132	; 0x84
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	6812      	ldr	r2, [r2, #0]
 8004730:	4611      	mov	r1, r2
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	01d2      	lsls	r2, r2, #7
 8004736:	440a      	add	r2, r1
 8004738:	3284      	adds	r2, #132	; 0x84
 800473a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800473e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800474e:	4413      	add	r3, r2
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4619      	mov	r1, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	01db      	lsls	r3, r3, #7
 800475c:	440b      	add	r3, r1
 800475e:	3384      	adds	r3, #132	; 0x84
 8004760:	4619      	mov	r1, r3
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	4313      	orrs	r3, r2
 8004766:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	461a      	mov	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	01db      	lsls	r3, r3, #7
 8004772:	4413      	add	r3, r2
 8004774:	3384      	adds	r3, #132	; 0x84
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	6812      	ldr	r2, [r2, #0]
 800477c:	4611      	mov	r1, r2
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	01d2      	lsls	r2, r2, #7
 8004782:	440a      	add	r2, r1
 8004784:	3284      	adds	r2, #132	; 0x84
 8004786:	f023 0307 	bic.w	r3, r3, #7
 800478a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	461a      	mov	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	01db      	lsls	r3, r3, #7
 8004796:	4413      	add	r3, r2
 8004798:	3384      	adds	r3, #132	; 0x84
 800479a:	461a      	mov	r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80047a8:	021b      	lsls	r3, r3, #8
 80047aa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80047b2:	041b      	lsls	r3, r3, #16
 80047b4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	061b      	lsls	r3, r3, #24
 80047bc:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	01db      	lsls	r3, r3, #7
 80047c8:	4413      	add	r3, r2
 80047ca:	3384      	adds	r3, #132	; 0x84
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	461a      	mov	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	01db      	lsls	r3, r3, #7
 80047d8:	4413      	add	r3, r2
 80047da:	3384      	adds	r3, #132	; 0x84
 80047dc:	461a      	mov	r2, r3
 80047de:	2300      	movs	r3, #0
 80047e0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047e8:	461a      	mov	r2, r3
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	431a      	orrs	r2, r3
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	431a      	orrs	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4619      	mov	r1, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	01db      	lsls	r3, r3, #7
 80047fc:	440b      	add	r3, r1
 80047fe:	3384      	adds	r3, #132	; 0x84
 8004800:	4619      	mov	r1, r3
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	4313      	orrs	r3, r2
 8004806:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	461a      	mov	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	01db      	lsls	r3, r3, #7
 8004812:	4413      	add	r3, r2
 8004814:	3384      	adds	r3, #132	; 0x84
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	6812      	ldr	r2, [r2, #0]
 800481c:	4611      	mov	r1, r2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	01d2      	lsls	r2, r2, #7
 8004822:	440a      	add	r2, r1
 8004824:	3284      	adds	r2, #132	; 0x84
 8004826:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800482a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	461a      	mov	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	01db      	lsls	r3, r3, #7
 8004836:	4413      	add	r3, r2
 8004838:	3384      	adds	r3, #132	; 0x84
 800483a:	461a      	mov	r2, r3
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	461a      	mov	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	01db      	lsls	r3, r3, #7
 800484c:	4413      	add	r3, r2
 800484e:	3384      	adds	r3, #132	; 0x84
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	6812      	ldr	r2, [r2, #0]
 8004856:	4611      	mov	r1, r2
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	01d2      	lsls	r2, r2, #7
 800485c:	440a      	add	r2, r1
 800485e:	3284      	adds	r2, #132	; 0x84
 8004860:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004864:	f023 0307 	bic.w	r3, r3, #7
 8004868:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	69da      	ldr	r2, [r3, #28]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	68f9      	ldr	r1, [r7, #12]
 8004874:	6809      	ldr	r1, [r1, #0]
 8004876:	4608      	mov	r0, r1
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	01c9      	lsls	r1, r1, #7
 800487c:	4401      	add	r1, r0
 800487e:	3184      	adds	r1, #132	; 0x84
 8004880:	4313      	orrs	r3, r2
 8004882:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	461a      	mov	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	01db      	lsls	r3, r3, #7
 800488e:	4413      	add	r3, r2
 8004890:	3384      	adds	r3, #132	; 0x84
 8004892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	461a      	mov	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	01db      	lsls	r3, r3, #7
 800489e:	4413      	add	r3, r2
 80048a0:	3384      	adds	r3, #132	; 0x84
 80048a2:	461a      	mov	r2, r3
 80048a4:	2300      	movs	r3, #0
 80048a6:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	461a      	mov	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	01db      	lsls	r3, r3, #7
 80048b2:	4413      	add	r3, r2
 80048b4:	3384      	adds	r3, #132	; 0x84
 80048b6:	461a      	mov	r2, r3
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d102      	bne.n	80048cc <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80048c6:	2304      	movs	r3, #4
 80048c8:	61fb      	str	r3, [r7, #28]
 80048ca:	e01b      	b.n	8004904 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d102      	bne.n	80048da <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80048d4:	2303      	movs	r3, #3
 80048d6:	61fb      	str	r3, [r7, #28]
 80048d8:	e014      	b.n	8004904 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	2b04      	cmp	r3, #4
 80048e0:	d00b      	beq.n	80048fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d007      	beq.n	80048fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d003      	beq.n	80048fa <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80048f6:	2b07      	cmp	r3, #7
 80048f8:	d102      	bne.n	8004900 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80048fa:	2302      	movs	r3, #2
 80048fc:	61fb      	str	r3, [r7, #28]
 80048fe:	e001      	b.n	8004904 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004900:	2301      	movs	r3, #1
 8004902:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	01db      	lsls	r3, r3, #7
 800490e:	4413      	add	r3, r2
 8004910:	3384      	adds	r3, #132	; 0x84
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	6812      	ldr	r2, [r2, #0]
 8004918:	4611      	mov	r1, r2
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	01d2      	lsls	r2, r2, #7
 800491e:	440a      	add	r2, r1
 8004920:	3284      	adds	r2, #132	; 0x84
 8004922:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004926:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	69fa      	ldr	r2, [r7, #28]
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	041a      	lsls	r2, r3, #16
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	6859      	ldr	r1, [r3, #4]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	1acb      	subs	r3, r1, r3
 800493e:	69f9      	ldr	r1, [r7, #28]
 8004940:	fb01 f303 	mul.w	r3, r1, r3
 8004944:	3303      	adds	r3, #3
 8004946:	68f9      	ldr	r1, [r7, #12]
 8004948:	6809      	ldr	r1, [r1, #0]
 800494a:	4608      	mov	r0, r1
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	01c9      	lsls	r1, r1, #7
 8004950:	4401      	add	r1, r0
 8004952:	3184      	adds	r1, #132	; 0x84
 8004954:	4313      	orrs	r3, r2
 8004956:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	461a      	mov	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	01db      	lsls	r3, r3, #7
 8004962:	4413      	add	r3, r2
 8004964:	3384      	adds	r3, #132	; 0x84
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	6812      	ldr	r2, [r2, #0]
 800496c:	4611      	mov	r1, r2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	01d2      	lsls	r2, r2, #7
 8004972:	440a      	add	r2, r1
 8004974:	3284      	adds	r2, #132	; 0x84
 8004976:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800497a:	f023 0307 	bic.w	r3, r3, #7
 800497e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	461a      	mov	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	01db      	lsls	r3, r3, #7
 800498a:	4413      	add	r3, r2
 800498c:	3384      	adds	r3, #132	; 0x84
 800498e:	461a      	mov	r2, r3
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	461a      	mov	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	01db      	lsls	r3, r3, #7
 80049a0:	4413      	add	r3, r2
 80049a2:	3384      	adds	r3, #132	; 0x84
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	6812      	ldr	r2, [r2, #0]
 80049aa:	4611      	mov	r1, r2
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	01d2      	lsls	r2, r2, #7
 80049b0:	440a      	add	r2, r1
 80049b2:	3284      	adds	r2, #132	; 0x84
 80049b4:	f043 0301 	orr.w	r3, r3, #1
 80049b8:	6013      	str	r3, [r2, #0]
}
 80049ba:	bf00      	nop
 80049bc:	3724      	adds	r7, #36	; 0x24
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
	...

080049c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e264      	b.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d075      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049e6:	4ba3      	ldr	r3, [pc, #652]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 030c 	and.w	r3, r3, #12
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d00c      	beq.n	8004a0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049f2:	4ba0      	ldr	r3, [pc, #640]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d112      	bne.n	8004a24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049fe:	4b9d      	ldr	r3, [pc, #628]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a0a:	d10b      	bne.n	8004a24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a0c:	4b99      	ldr	r3, [pc, #612]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d05b      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x108>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d157      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e23f      	b.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a2c:	d106      	bne.n	8004a3c <HAL_RCC_OscConfig+0x74>
 8004a2e:	4b91      	ldr	r3, [pc, #580]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a90      	ldr	r2, [pc, #576]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	e01d      	b.n	8004a78 <HAL_RCC_OscConfig+0xb0>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a44:	d10c      	bne.n	8004a60 <HAL_RCC_OscConfig+0x98>
 8004a46:	4b8b      	ldr	r3, [pc, #556]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a8a      	ldr	r2, [pc, #552]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	4b88      	ldr	r3, [pc, #544]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a87      	ldr	r2, [pc, #540]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	e00b      	b.n	8004a78 <HAL_RCC_OscConfig+0xb0>
 8004a60:	4b84      	ldr	r3, [pc, #528]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a83      	ldr	r2, [pc, #524]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	4b81      	ldr	r3, [pc, #516]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a80      	ldr	r2, [pc, #512]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d013      	beq.n	8004aa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a80:	f7fd fa86 	bl	8001f90 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a88:	f7fd fa82 	bl	8001f90 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b64      	cmp	r3, #100	; 0x64
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e204      	b.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9a:	4b76      	ldr	r3, [pc, #472]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0f0      	beq.n	8004a88 <HAL_RCC_OscConfig+0xc0>
 8004aa6:	e014      	b.n	8004ad2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa8:	f7fd fa72 	bl	8001f90 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ab0:	f7fd fa6e 	bl	8001f90 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b64      	cmp	r3, #100	; 0x64
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e1f0      	b.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ac2:	4b6c      	ldr	r3, [pc, #432]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f0      	bne.n	8004ab0 <HAL_RCC_OscConfig+0xe8>
 8004ace:	e000      	b.n	8004ad2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d063      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ade:	4b65      	ldr	r3, [pc, #404]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 030c 	and.w	r3, r3, #12
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00b      	beq.n	8004b02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aea:	4b62      	ldr	r3, [pc, #392]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004af2:	2b08      	cmp	r3, #8
 8004af4:	d11c      	bne.n	8004b30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004af6:	4b5f      	ldr	r3, [pc, #380]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d116      	bne.n	8004b30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b02:	4b5c      	ldr	r3, [pc, #368]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d005      	beq.n	8004b1a <HAL_RCC_OscConfig+0x152>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d001      	beq.n	8004b1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e1c4      	b.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b1a:	4b56      	ldr	r3, [pc, #344]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	4952      	ldr	r1, [pc, #328]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b2e:	e03a      	b.n	8004ba6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d020      	beq.n	8004b7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b38:	4b4f      	ldr	r3, [pc, #316]	; (8004c78 <HAL_RCC_OscConfig+0x2b0>)
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b3e:	f7fd fa27 	bl	8001f90 <HAL_GetTick>
 8004b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b44:	e008      	b.n	8004b58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b46:	f7fd fa23 	bl	8001f90 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e1a5      	b.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b58:	4b46      	ldr	r3, [pc, #280]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0f0      	beq.n	8004b46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b64:	4b43      	ldr	r3, [pc, #268]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	4940      	ldr	r1, [pc, #256]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	600b      	str	r3, [r1, #0]
 8004b78:	e015      	b.n	8004ba6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b7a:	4b3f      	ldr	r3, [pc, #252]	; (8004c78 <HAL_RCC_OscConfig+0x2b0>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b80:	f7fd fa06 	bl	8001f90 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b88:	f7fd fa02 	bl	8001f90 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e184      	b.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b9a:	4b36      	ldr	r3, [pc, #216]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1f0      	bne.n	8004b88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d030      	beq.n	8004c14 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d016      	beq.n	8004be8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bba:	4b30      	ldr	r3, [pc, #192]	; (8004c7c <HAL_RCC_OscConfig+0x2b4>)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc0:	f7fd f9e6 	bl	8001f90 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bc8:	f7fd f9e2 	bl	8001f90 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e164      	b.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bda:	4b26      	ldr	r3, [pc, #152]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0f0      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x200>
 8004be6:	e015      	b.n	8004c14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004be8:	4b24      	ldr	r3, [pc, #144]	; (8004c7c <HAL_RCC_OscConfig+0x2b4>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bee:	f7fd f9cf 	bl	8001f90 <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bf6:	f7fd f9cb 	bl	8001f90 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e14d      	b.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c08:	4b1a      	ldr	r3, [pc, #104]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1f0      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 80a0 	beq.w	8004d62 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c22:	2300      	movs	r3, #0
 8004c24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c26:	4b13      	ldr	r3, [pc, #76]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10f      	bne.n	8004c52 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c32:	2300      	movs	r3, #0
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	4b0f      	ldr	r3, [pc, #60]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	4a0e      	ldr	r2, [pc, #56]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c40:	6413      	str	r3, [r2, #64]	; 0x40
 8004c42:	4b0c      	ldr	r3, [pc, #48]	; (8004c74 <HAL_RCC_OscConfig+0x2ac>)
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c4a:	60bb      	str	r3, [r7, #8]
 8004c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c52:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <HAL_RCC_OscConfig+0x2b8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d121      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c5e:	4b08      	ldr	r3, [pc, #32]	; (8004c80 <HAL_RCC_OscConfig+0x2b8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a07      	ldr	r2, [pc, #28]	; (8004c80 <HAL_RCC_OscConfig+0x2b8>)
 8004c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c6a:	f7fd f991 	bl	8001f90 <HAL_GetTick>
 8004c6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c70:	e011      	b.n	8004c96 <HAL_RCC_OscConfig+0x2ce>
 8004c72:	bf00      	nop
 8004c74:	40023800 	.word	0x40023800
 8004c78:	42470000 	.word	0x42470000
 8004c7c:	42470e80 	.word	0x42470e80
 8004c80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c84:	f7fd f984 	bl	8001f90 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e106      	b.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c96:	4b85      	ldr	r3, [pc, #532]	; (8004eac <HAL_RCC_OscConfig+0x4e4>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0f0      	beq.n	8004c84 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d106      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x2f0>
 8004caa:	4b81      	ldr	r3, [pc, #516]	; (8004eb0 <HAL_RCC_OscConfig+0x4e8>)
 8004cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cae:	4a80      	ldr	r2, [pc, #512]	; (8004eb0 <HAL_RCC_OscConfig+0x4e8>)
 8004cb0:	f043 0301 	orr.w	r3, r3, #1
 8004cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8004cb6:	e01c      	b.n	8004cf2 <HAL_RCC_OscConfig+0x32a>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	2b05      	cmp	r3, #5
 8004cbe:	d10c      	bne.n	8004cda <HAL_RCC_OscConfig+0x312>
 8004cc0:	4b7b      	ldr	r3, [pc, #492]	; (8004eb0 <HAL_RCC_OscConfig+0x4e8>)
 8004cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc4:	4a7a      	ldr	r2, [pc, #488]	; (8004eb0 <HAL_RCC_OscConfig+0x4e8>)
 8004cc6:	f043 0304 	orr.w	r3, r3, #4
 8004cca:	6713      	str	r3, [r2, #112]	; 0x70
 8004ccc:	4b78      	ldr	r3, [pc, #480]	; (8004eb0 <HAL_RCC_OscConfig+0x4e8>)
 8004cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd0:	4a77      	ldr	r2, [pc, #476]	; (8004eb0 <HAL_RCC_OscConfig+0x4e8>)
 8004cd2:	f043 0301 	orr.w	r3, r3, #1
 8004cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd8:	e00b      	b.n	8004cf2 <HAL_RCC_OscConfig+0x32a>
 8004cda:	4b75      	ldr	r3, [pc, #468]	; (8004eb0 <HAL_RCC_OscConfig+0x4e8>)
 8004cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cde:	4a74      	ldr	r2, [pc, #464]	; (8004eb0 <HAL_RCC_OscConfig+0x4e8>)
 8004ce0:	f023 0301 	bic.w	r3, r3, #1
 8004ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ce6:	4b72      	ldr	r3, [pc, #456]	; (8004eb0 <HAL_RCC_OscConfig+0x4e8>)
 8004ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cea:	4a71      	ldr	r2, [pc, #452]	; (8004eb0 <HAL_RCC_OscConfig+0x4e8>)
 8004cec:	f023 0304 	bic.w	r3, r3, #4
 8004cf0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d015      	beq.n	8004d26 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cfa:	f7fd f949 	bl	8001f90 <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d00:	e00a      	b.n	8004d18 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d02:	f7fd f945 	bl	8001f90 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e0c5      	b.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d18:	4b65      	ldr	r3, [pc, #404]	; (8004eb0 <HAL_RCC_OscConfig+0x4e8>)
 8004d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0ee      	beq.n	8004d02 <HAL_RCC_OscConfig+0x33a>
 8004d24:	e014      	b.n	8004d50 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d26:	f7fd f933 	bl	8001f90 <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d2c:	e00a      	b.n	8004d44 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d2e:	f7fd f92f 	bl	8001f90 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e0af      	b.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d44:	4b5a      	ldr	r3, [pc, #360]	; (8004eb0 <HAL_RCC_OscConfig+0x4e8>)
 8004d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1ee      	bne.n	8004d2e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d50:	7dfb      	ldrb	r3, [r7, #23]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d105      	bne.n	8004d62 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d56:	4b56      	ldr	r3, [pc, #344]	; (8004eb0 <HAL_RCC_OscConfig+0x4e8>)
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	4a55      	ldr	r2, [pc, #340]	; (8004eb0 <HAL_RCC_OscConfig+0x4e8>)
 8004d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 809b 	beq.w	8004ea2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d6c:	4b50      	ldr	r3, [pc, #320]	; (8004eb0 <HAL_RCC_OscConfig+0x4e8>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 030c 	and.w	r3, r3, #12
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d05c      	beq.n	8004e32 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d141      	bne.n	8004e04 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d80:	4b4c      	ldr	r3, [pc, #304]	; (8004eb4 <HAL_RCC_OscConfig+0x4ec>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d86:	f7fd f903 	bl	8001f90 <HAL_GetTick>
 8004d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d8c:	e008      	b.n	8004da0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d8e:	f7fd f8ff 	bl	8001f90 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d901      	bls.n	8004da0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e081      	b.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004da0:	4b43      	ldr	r3, [pc, #268]	; (8004eb0 <HAL_RCC_OscConfig+0x4e8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1f0      	bne.n	8004d8e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	69da      	ldr	r2, [r3, #28]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	431a      	orrs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	019b      	lsls	r3, r3, #6
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc2:	085b      	lsrs	r3, r3, #1
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	041b      	lsls	r3, r3, #16
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dce:	061b      	lsls	r3, r3, #24
 8004dd0:	4937      	ldr	r1, [pc, #220]	; (8004eb0 <HAL_RCC_OscConfig+0x4e8>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dd6:	4b37      	ldr	r3, [pc, #220]	; (8004eb4 <HAL_RCC_OscConfig+0x4ec>)
 8004dd8:	2201      	movs	r2, #1
 8004dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ddc:	f7fd f8d8 	bl	8001f90 <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004de4:	f7fd f8d4 	bl	8001f90 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e056      	b.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df6:	4b2e      	ldr	r3, [pc, #184]	; (8004eb0 <HAL_RCC_OscConfig+0x4e8>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0f0      	beq.n	8004de4 <HAL_RCC_OscConfig+0x41c>
 8004e02:	e04e      	b.n	8004ea2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e04:	4b2b      	ldr	r3, [pc, #172]	; (8004eb4 <HAL_RCC_OscConfig+0x4ec>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e0a:	f7fd f8c1 	bl	8001f90 <HAL_GetTick>
 8004e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e10:	e008      	b.n	8004e24 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e12:	f7fd f8bd 	bl	8001f90 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e03f      	b.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e24:	4b22      	ldr	r3, [pc, #136]	; (8004eb0 <HAL_RCC_OscConfig+0x4e8>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1f0      	bne.n	8004e12 <HAL_RCC_OscConfig+0x44a>
 8004e30:	e037      	b.n	8004ea2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d101      	bne.n	8004e3e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e032      	b.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e3e:	4b1c      	ldr	r3, [pc, #112]	; (8004eb0 <HAL_RCC_OscConfig+0x4e8>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d028      	beq.n	8004e9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d121      	bne.n	8004e9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d11a      	bne.n	8004e9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e6e:	4013      	ands	r3, r2
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e74:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d111      	bne.n	8004e9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e84:	085b      	lsrs	r3, r3, #1
 8004e86:	3b01      	subs	r3, #1
 8004e88:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d107      	bne.n	8004e9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e98:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d001      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e000      	b.n	8004ea4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40007000 	.word	0x40007000
 8004eb0:	40023800 	.word	0x40023800
 8004eb4:	42470060 	.word	0x42470060

08004eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e0cc      	b.n	8005066 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ecc:	4b68      	ldr	r3, [pc, #416]	; (8005070 <HAL_RCC_ClockConfig+0x1b8>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 030f 	and.w	r3, r3, #15
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d90c      	bls.n	8004ef4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eda:	4b65      	ldr	r3, [pc, #404]	; (8005070 <HAL_RCC_ClockConfig+0x1b8>)
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	b2d2      	uxtb	r2, r2
 8004ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee2:	4b63      	ldr	r3, [pc, #396]	; (8005070 <HAL_RCC_ClockConfig+0x1b8>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e0b8      	b.n	8005066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d020      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f0c:	4b59      	ldr	r3, [pc, #356]	; (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	4a58      	ldr	r2, [pc, #352]	; (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0308 	and.w	r3, r3, #8
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d005      	beq.n	8004f30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f24:	4b53      	ldr	r3, [pc, #332]	; (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	4a52      	ldr	r2, [pc, #328]	; (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f30:	4b50      	ldr	r3, [pc, #320]	; (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	494d      	ldr	r1, [pc, #308]	; (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d044      	beq.n	8004fd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d107      	bne.n	8004f66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f56:	4b47      	ldr	r3, [pc, #284]	; (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d119      	bne.n	8004f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e07f      	b.n	8005066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d003      	beq.n	8004f76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	d107      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f76:	4b3f      	ldr	r3, [pc, #252]	; (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d109      	bne.n	8004f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e06f      	b.n	8005066 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f86:	4b3b      	ldr	r3, [pc, #236]	; (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e067      	b.n	8005066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f96:	4b37      	ldr	r3, [pc, #220]	; (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f023 0203 	bic.w	r2, r3, #3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	4934      	ldr	r1, [pc, #208]	; (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fa8:	f7fc fff2 	bl	8001f90 <HAL_GetTick>
 8004fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fae:	e00a      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fb0:	f7fc ffee 	bl	8001f90 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e04f      	b.n	8005066 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fc6:	4b2b      	ldr	r3, [pc, #172]	; (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f003 020c 	and.w	r2, r3, #12
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d1eb      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fd8:	4b25      	ldr	r3, [pc, #148]	; (8005070 <HAL_RCC_ClockConfig+0x1b8>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 030f 	and.w	r3, r3, #15
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d20c      	bcs.n	8005000 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe6:	4b22      	ldr	r3, [pc, #136]	; (8005070 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fee:	4b20      	ldr	r3, [pc, #128]	; (8005070 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	683a      	ldr	r2, [r7, #0]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d001      	beq.n	8005000 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e032      	b.n	8005066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	d008      	beq.n	800501e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800500c:	4b19      	ldr	r3, [pc, #100]	; (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	4916      	ldr	r1, [pc, #88]	; (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 800501a:	4313      	orrs	r3, r2
 800501c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	2b00      	cmp	r3, #0
 8005028:	d009      	beq.n	800503e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800502a:	4b12      	ldr	r3, [pc, #72]	; (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	490e      	ldr	r1, [pc, #56]	; (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 800503a:	4313      	orrs	r3, r2
 800503c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800503e:	f000 f821 	bl	8005084 <HAL_RCC_GetSysClockFreq>
 8005042:	4602      	mov	r2, r0
 8005044:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <HAL_RCC_ClockConfig+0x1bc>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	091b      	lsrs	r3, r3, #4
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	490a      	ldr	r1, [pc, #40]	; (8005078 <HAL_RCC_ClockConfig+0x1c0>)
 8005050:	5ccb      	ldrb	r3, [r1, r3]
 8005052:	fa22 f303 	lsr.w	r3, r2, r3
 8005056:	4a09      	ldr	r2, [pc, #36]	; (800507c <HAL_RCC_ClockConfig+0x1c4>)
 8005058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800505a:	4b09      	ldr	r3, [pc, #36]	; (8005080 <HAL_RCC_ClockConfig+0x1c8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f7fc fb66 	bl	8001730 <HAL_InitTick>

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	40023c00 	.word	0x40023c00
 8005074:	40023800 	.word	0x40023800
 8005078:	080078b4 	.word	0x080078b4
 800507c:	20000000 	.word	0x20000000
 8005080:	20000004 	.word	0x20000004

08005084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005084:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	607b      	str	r3, [r7, #4]
 8005090:	2300      	movs	r3, #0
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	2300      	movs	r3, #0
 8005096:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800509c:	4b67      	ldr	r3, [pc, #412]	; (800523c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f003 030c 	and.w	r3, r3, #12
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d00d      	beq.n	80050c4 <HAL_RCC_GetSysClockFreq+0x40>
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	f200 80bd 	bhi.w	8005228 <HAL_RCC_GetSysClockFreq+0x1a4>
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d002      	beq.n	80050b8 <HAL_RCC_GetSysClockFreq+0x34>
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	d003      	beq.n	80050be <HAL_RCC_GetSysClockFreq+0x3a>
 80050b6:	e0b7      	b.n	8005228 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050b8:	4b61      	ldr	r3, [pc, #388]	; (8005240 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80050ba:	60bb      	str	r3, [r7, #8]
       break;
 80050bc:	e0b7      	b.n	800522e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050be:	4b61      	ldr	r3, [pc, #388]	; (8005244 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80050c0:	60bb      	str	r3, [r7, #8]
      break;
 80050c2:	e0b4      	b.n	800522e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050c4:	4b5d      	ldr	r3, [pc, #372]	; (800523c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050ce:	4b5b      	ldr	r3, [pc, #364]	; (800523c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d04d      	beq.n	8005176 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050da:	4b58      	ldr	r3, [pc, #352]	; (800523c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	099b      	lsrs	r3, r3, #6
 80050e0:	461a      	mov	r2, r3
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80050ea:	f04f 0100 	mov.w	r1, #0
 80050ee:	ea02 0800 	and.w	r8, r2, r0
 80050f2:	ea03 0901 	and.w	r9, r3, r1
 80050f6:	4640      	mov	r0, r8
 80050f8:	4649      	mov	r1, r9
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	f04f 0300 	mov.w	r3, #0
 8005102:	014b      	lsls	r3, r1, #5
 8005104:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005108:	0142      	lsls	r2, r0, #5
 800510a:	4610      	mov	r0, r2
 800510c:	4619      	mov	r1, r3
 800510e:	ebb0 0008 	subs.w	r0, r0, r8
 8005112:	eb61 0109 	sbc.w	r1, r1, r9
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	f04f 0300 	mov.w	r3, #0
 800511e:	018b      	lsls	r3, r1, #6
 8005120:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005124:	0182      	lsls	r2, r0, #6
 8005126:	1a12      	subs	r2, r2, r0
 8005128:	eb63 0301 	sbc.w	r3, r3, r1
 800512c:	f04f 0000 	mov.w	r0, #0
 8005130:	f04f 0100 	mov.w	r1, #0
 8005134:	00d9      	lsls	r1, r3, #3
 8005136:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800513a:	00d0      	lsls	r0, r2, #3
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	eb12 0208 	adds.w	r2, r2, r8
 8005144:	eb43 0309 	adc.w	r3, r3, r9
 8005148:	f04f 0000 	mov.w	r0, #0
 800514c:	f04f 0100 	mov.w	r1, #0
 8005150:	0259      	lsls	r1, r3, #9
 8005152:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005156:	0250      	lsls	r0, r2, #9
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4610      	mov	r0, r2
 800515e:	4619      	mov	r1, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	461a      	mov	r2, r3
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	f7fb fa4e 	bl	8000608 <__aeabi_uldivmod>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	4613      	mov	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	e04a      	b.n	800520c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005176:	4b31      	ldr	r3, [pc, #196]	; (800523c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	099b      	lsrs	r3, r3, #6
 800517c:	461a      	mov	r2, r3
 800517e:	f04f 0300 	mov.w	r3, #0
 8005182:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005186:	f04f 0100 	mov.w	r1, #0
 800518a:	ea02 0400 	and.w	r4, r2, r0
 800518e:	ea03 0501 	and.w	r5, r3, r1
 8005192:	4620      	mov	r0, r4
 8005194:	4629      	mov	r1, r5
 8005196:	f04f 0200 	mov.w	r2, #0
 800519a:	f04f 0300 	mov.w	r3, #0
 800519e:	014b      	lsls	r3, r1, #5
 80051a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80051a4:	0142      	lsls	r2, r0, #5
 80051a6:	4610      	mov	r0, r2
 80051a8:	4619      	mov	r1, r3
 80051aa:	1b00      	subs	r0, r0, r4
 80051ac:	eb61 0105 	sbc.w	r1, r1, r5
 80051b0:	f04f 0200 	mov.w	r2, #0
 80051b4:	f04f 0300 	mov.w	r3, #0
 80051b8:	018b      	lsls	r3, r1, #6
 80051ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051be:	0182      	lsls	r2, r0, #6
 80051c0:	1a12      	subs	r2, r2, r0
 80051c2:	eb63 0301 	sbc.w	r3, r3, r1
 80051c6:	f04f 0000 	mov.w	r0, #0
 80051ca:	f04f 0100 	mov.w	r1, #0
 80051ce:	00d9      	lsls	r1, r3, #3
 80051d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051d4:	00d0      	lsls	r0, r2, #3
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	1912      	adds	r2, r2, r4
 80051dc:	eb45 0303 	adc.w	r3, r5, r3
 80051e0:	f04f 0000 	mov.w	r0, #0
 80051e4:	f04f 0100 	mov.w	r1, #0
 80051e8:	0299      	lsls	r1, r3, #10
 80051ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80051ee:	0290      	lsls	r0, r2, #10
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4610      	mov	r0, r2
 80051f6:	4619      	mov	r1, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	461a      	mov	r2, r3
 80051fc:	f04f 0300 	mov.w	r3, #0
 8005200:	f7fb fa02 	bl	8000608 <__aeabi_uldivmod>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	4613      	mov	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800520c:	4b0b      	ldr	r3, [pc, #44]	; (800523c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	0c1b      	lsrs	r3, r3, #16
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	3301      	adds	r3, #1
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	fbb2 f3f3 	udiv	r3, r2, r3
 8005224:	60bb      	str	r3, [r7, #8]
      break;
 8005226:	e002      	b.n	800522e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005228:	4b05      	ldr	r3, [pc, #20]	; (8005240 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800522a:	60bb      	str	r3, [r7, #8]
      break;
 800522c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800522e:	68bb      	ldr	r3, [r7, #8]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800523a:	bf00      	nop
 800523c:	40023800 	.word	0x40023800
 8005240:	00f42400 	.word	0x00f42400
 8005244:	007a1200 	.word	0x007a1200

08005248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800524c:	4b03      	ldr	r3, [pc, #12]	; (800525c <HAL_RCC_GetHCLKFreq+0x14>)
 800524e:	681b      	ldr	r3, [r3, #0]
}
 8005250:	4618      	mov	r0, r3
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	20000000 	.word	0x20000000

08005260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005264:	f7ff fff0 	bl	8005248 <HAL_RCC_GetHCLKFreq>
 8005268:	4602      	mov	r2, r0
 800526a:	4b05      	ldr	r3, [pc, #20]	; (8005280 <HAL_RCC_GetPCLK1Freq+0x20>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	0a9b      	lsrs	r3, r3, #10
 8005270:	f003 0307 	and.w	r3, r3, #7
 8005274:	4903      	ldr	r1, [pc, #12]	; (8005284 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005276:	5ccb      	ldrb	r3, [r1, r3]
 8005278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800527c:	4618      	mov	r0, r3
 800527e:	bd80      	pop	{r7, pc}
 8005280:	40023800 	.word	0x40023800
 8005284:	080078c4 	.word	0x080078c4

08005288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800528c:	f7ff ffdc 	bl	8005248 <HAL_RCC_GetHCLKFreq>
 8005290:	4602      	mov	r2, r0
 8005292:	4b05      	ldr	r3, [pc, #20]	; (80052a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	0b5b      	lsrs	r3, r3, #13
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	4903      	ldr	r1, [pc, #12]	; (80052ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800529e:	5ccb      	ldrb	r3, [r1, r3]
 80052a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40023800 	.word	0x40023800
 80052ac:	080078c4 	.word	0x080078c4

080052b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	220f      	movs	r2, #15
 80052be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80052c0:	4b12      	ldr	r3, [pc, #72]	; (800530c <HAL_RCC_GetClockConfig+0x5c>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f003 0203 	and.w	r2, r3, #3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80052cc:	4b0f      	ldr	r3, [pc, #60]	; (800530c <HAL_RCC_GetClockConfig+0x5c>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80052d8:	4b0c      	ldr	r3, [pc, #48]	; (800530c <HAL_RCC_GetClockConfig+0x5c>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80052e4:	4b09      	ldr	r3, [pc, #36]	; (800530c <HAL_RCC_GetClockConfig+0x5c>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	08db      	lsrs	r3, r3, #3
 80052ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80052f2:	4b07      	ldr	r3, [pc, #28]	; (8005310 <HAL_RCC_GetClockConfig+0x60>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 020f 	and.w	r2, r3, #15
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	601a      	str	r2, [r3, #0]
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40023800 	.word	0x40023800
 8005310:	40023c00 	.word	0x40023c00

08005314 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10b      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005338:	2b00      	cmp	r3, #0
 800533a:	d105      	bne.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005344:	2b00      	cmp	r3, #0
 8005346:	d075      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005348:	4bad      	ldr	r3, [pc, #692]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800534a:	2200      	movs	r2, #0
 800534c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800534e:	f7fc fe1f 	bl	8001f90 <HAL_GetTick>
 8005352:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005354:	e008      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005356:	f7fc fe1b 	bl	8001f90 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d901      	bls.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e18b      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005368:	4ba6      	ldr	r3, [pc, #664]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1f0      	bne.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d009      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	019a      	lsls	r2, r3, #6
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	071b      	lsls	r3, r3, #28
 800538c:	499d      	ldr	r1, [pc, #628]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800538e:	4313      	orrs	r3, r2
 8005390:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d01f      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053a0:	4b98      	ldr	r3, [pc, #608]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053a6:	0f1b      	lsrs	r3, r3, #28
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	019a      	lsls	r2, r3, #6
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	061b      	lsls	r3, r3, #24
 80053ba:	431a      	orrs	r2, r3
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	071b      	lsls	r3, r3, #28
 80053c0:	4990      	ldr	r1, [pc, #576]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80053c8:	4b8e      	ldr	r3, [pc, #568]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053ce:	f023 021f 	bic.w	r2, r3, #31
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	498a      	ldr	r1, [pc, #552]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00d      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	019a      	lsls	r2, r3, #6
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	061b      	lsls	r3, r3, #24
 80053f8:	431a      	orrs	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	071b      	lsls	r3, r3, #28
 8005400:	4980      	ldr	r1, [pc, #512]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005402:	4313      	orrs	r3, r2
 8005404:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005408:	4b7d      	ldr	r3, [pc, #500]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800540a:	2201      	movs	r2, #1
 800540c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800540e:	f7fc fdbf 	bl	8001f90 <HAL_GetTick>
 8005412:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005414:	e008      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005416:	f7fc fdbb 	bl	8001f90 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d901      	bls.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e12b      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005428:	4b76      	ldr	r3, [pc, #472]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0f0      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b00      	cmp	r3, #0
 800543e:	d105      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005448:	2b00      	cmp	r3, #0
 800544a:	d079      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800544c:	4b6e      	ldr	r3, [pc, #440]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005452:	f7fc fd9d 	bl	8001f90 <HAL_GetTick>
 8005456:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005458:	e008      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800545a:	f7fc fd99 	bl	8001f90 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d901      	bls.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e109      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800546c:	4b65      	ldr	r3, [pc, #404]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005478:	d0ef      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0304 	and.w	r3, r3, #4
 8005482:	2b00      	cmp	r3, #0
 8005484:	d020      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005486:	4b5f      	ldr	r3, [pc, #380]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548c:	0f1b      	lsrs	r3, r3, #28
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	019a      	lsls	r2, r3, #6
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	061b      	lsls	r3, r3, #24
 80054a0:	431a      	orrs	r2, r3
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	071b      	lsls	r3, r3, #28
 80054a6:	4957      	ldr	r1, [pc, #348]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054ae:	4b55      	ldr	r3, [pc, #340]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	3b01      	subs	r3, #1
 80054be:	021b      	lsls	r3, r3, #8
 80054c0:	4950      	ldr	r1, [pc, #320]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0308 	and.w	r3, r3, #8
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d01e      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054d4:	4b4b      	ldr	r3, [pc, #300]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054da:	0e1b      	lsrs	r3, r3, #24
 80054dc:	f003 030f 	and.w	r3, r3, #15
 80054e0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	019a      	lsls	r2, r3, #6
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	061b      	lsls	r3, r3, #24
 80054ec:	431a      	orrs	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	071b      	lsls	r3, r3, #28
 80054f4:	4943      	ldr	r1, [pc, #268]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80054fc:	4b41      	ldr	r3, [pc, #260]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80054fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005502:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550a:	493e      	ldr	r1, [pc, #248]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800550c:	4313      	orrs	r3, r2
 800550e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005512:	4b3d      	ldr	r3, [pc, #244]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005514:	2201      	movs	r2, #1
 8005516:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005518:	f7fc fd3a 	bl	8001f90 <HAL_GetTick>
 800551c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800551e:	e008      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005520:	f7fc fd36 	bl	8001f90 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e0a6      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005532:	4b34      	ldr	r3, [pc, #208]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800553a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800553e:	d1ef      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0320 	and.w	r3, r3, #32
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 808d 	beq.w	8005668 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800554e:	2300      	movs	r3, #0
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	4b2c      	ldr	r3, [pc, #176]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	4a2b      	ldr	r2, [pc, #172]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800555c:	6413      	str	r3, [r2, #64]	; 0x40
 800555e:	4b29      	ldr	r3, [pc, #164]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800556a:	4b28      	ldr	r3, [pc, #160]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a27      	ldr	r2, [pc, #156]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005574:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005576:	f7fc fd0b 	bl	8001f90 <HAL_GetTick>
 800557a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800557c:	e008      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800557e:	f7fc fd07 	bl	8001f90 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d901      	bls.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e077      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005590:	4b1e      	ldr	r3, [pc, #120]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0f0      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800559c:	4b19      	ldr	r3, [pc, #100]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800559e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055a4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d039      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d032      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055ba:	4b12      	ldr	r3, [pc, #72]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055c4:	4b12      	ldr	r3, [pc, #72]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80055c6:	2201      	movs	r2, #1
 80055c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055ca:	4b11      	ldr	r3, [pc, #68]	; (8005610 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80055d0:	4a0c      	ldr	r2, [pc, #48]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055d6:	4b0b      	ldr	r3, [pc, #44]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80055d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d11e      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80055e2:	f7fc fcd5 	bl	8001f90 <HAL_GetTick>
 80055e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e8:	e014      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055ea:	f7fc fcd1 	bl	8001f90 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d90b      	bls.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e03f      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005600:	42470068 	.word	0x42470068
 8005604:	40023800 	.word	0x40023800
 8005608:	42470070 	.word	0x42470070
 800560c:	40007000 	.word	0x40007000
 8005610:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005614:	4b1c      	ldr	r3, [pc, #112]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005618:	f003 0302 	and.w	r3, r3, #2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0e4      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005628:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800562c:	d10d      	bne.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800562e:	4b16      	ldr	r3, [pc, #88]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800563e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005642:	4911      	ldr	r1, [pc, #68]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005644:	4313      	orrs	r3, r2
 8005646:	608b      	str	r3, [r1, #8]
 8005648:	e005      	b.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800564a:	4b0f      	ldr	r3, [pc, #60]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	4a0e      	ldr	r2, [pc, #56]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005650:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005654:	6093      	str	r3, [r2, #8]
 8005656:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005658:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005662:	4909      	ldr	r1, [pc, #36]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005664:	4313      	orrs	r3, r2
 8005666:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0310 	and.w	r3, r3, #16
 8005670:	2b00      	cmp	r3, #0
 8005672:	d004      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800567a:	4b04      	ldr	r3, [pc, #16]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800567c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3718      	adds	r7, #24
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	40023800 	.word	0x40023800
 800568c:	424711e0 	.word	0x424711e0

08005690 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e025      	b.n	80056f0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d106      	bne.n	80056be <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7fb fa93 	bl	8000be4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	3304      	adds	r3, #4
 80056ce:	4619      	mov	r1, r3
 80056d0:	4610      	mov	r0, r2
 80056d2:	f001 fbfb 	bl	8006ecc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6818      	ldr	r0, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	461a      	mov	r2, r3
 80056e0:	6839      	ldr	r1, [r7, #0]
 80056e2:	f001 fc66 	bl	8006fb2 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e07b      	b.n	8005802 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570e:	2b00      	cmp	r3, #0
 8005710:	d108      	bne.n	8005724 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800571a:	d009      	beq.n	8005730 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	61da      	str	r2, [r3, #28]
 8005722:	e005      	b.n	8005730 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d106      	bne.n	8005750 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7fb ff80 	bl	8001650 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005766:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005778:	431a      	orrs	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005782:	431a      	orrs	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	431a      	orrs	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	431a      	orrs	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057aa:	431a      	orrs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a1b      	ldr	r3, [r3, #32]
 80057b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b4:	ea42 0103 	orr.w	r1, r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	0c1b      	lsrs	r3, r3, #16
 80057ce:	f003 0104 	and.w	r1, r3, #4
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	f003 0210 	and.w	r2, r3, #16
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	69da      	ldr	r2, [r3, #28]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b082      	sub	sp, #8
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e041      	b.n	80058a0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005822:	b2db      	uxtb	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	d106      	bne.n	8005836 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f7fc f987 	bl	8001b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2202      	movs	r2, #2
 800583a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	3304      	adds	r3, #4
 8005846:	4619      	mov	r1, r3
 8005848:	4610      	mov	r0, r2
 800584a:	f000 fc79 	bl	8006140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d001      	beq.n	80058c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e04e      	b.n	800595e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a23      	ldr	r2, [pc, #140]	; (800596c <HAL_TIM_Base_Start_IT+0xc4>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d022      	beq.n	8005928 <HAL_TIM_Base_Start_IT+0x80>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ea:	d01d      	beq.n	8005928 <HAL_TIM_Base_Start_IT+0x80>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a1f      	ldr	r2, [pc, #124]	; (8005970 <HAL_TIM_Base_Start_IT+0xc8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d018      	beq.n	8005928 <HAL_TIM_Base_Start_IT+0x80>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a1e      	ldr	r2, [pc, #120]	; (8005974 <HAL_TIM_Base_Start_IT+0xcc>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d013      	beq.n	8005928 <HAL_TIM_Base_Start_IT+0x80>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a1c      	ldr	r2, [pc, #112]	; (8005978 <HAL_TIM_Base_Start_IT+0xd0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d00e      	beq.n	8005928 <HAL_TIM_Base_Start_IT+0x80>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a1b      	ldr	r2, [pc, #108]	; (800597c <HAL_TIM_Base_Start_IT+0xd4>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d009      	beq.n	8005928 <HAL_TIM_Base_Start_IT+0x80>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a19      	ldr	r2, [pc, #100]	; (8005980 <HAL_TIM_Base_Start_IT+0xd8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d004      	beq.n	8005928 <HAL_TIM_Base_Start_IT+0x80>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a18      	ldr	r2, [pc, #96]	; (8005984 <HAL_TIM_Base_Start_IT+0xdc>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d111      	bne.n	800594c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f003 0307 	and.w	r3, r3, #7
 8005932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2b06      	cmp	r3, #6
 8005938:	d010      	beq.n	800595c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f042 0201 	orr.w	r2, r2, #1
 8005948:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800594a:	e007      	b.n	800595c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0201 	orr.w	r2, r2, #1
 800595a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40010000 	.word	0x40010000
 8005970:	40000400 	.word	0x40000400
 8005974:	40000800 	.word	0x40000800
 8005978:	40000c00 	.word	0x40000c00
 800597c:	40010400 	.word	0x40010400
 8005980:	40014000 	.word	0x40014000
 8005984:	40001800 	.word	0x40001800

08005988 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e041      	b.n	8005a1e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d106      	bne.n	80059b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f839 	bl	8005a26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3304      	adds	r3, #4
 80059c4:	4619      	mov	r1, r3
 80059c6:	4610      	mov	r0, r2
 80059c8:	f000 fbba 	bl	8006140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
	...

08005a3c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d109      	bne.n	8005a60 <HAL_TIM_PWM_Start+0x24>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	bf14      	ite	ne
 8005a58:	2301      	movne	r3, #1
 8005a5a:	2300      	moveq	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	e022      	b.n	8005aa6 <HAL_TIM_PWM_Start+0x6a>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d109      	bne.n	8005a7a <HAL_TIM_PWM_Start+0x3e>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	bf14      	ite	ne
 8005a72:	2301      	movne	r3, #1
 8005a74:	2300      	moveq	r3, #0
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	e015      	b.n	8005aa6 <HAL_TIM_PWM_Start+0x6a>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b08      	cmp	r3, #8
 8005a7e:	d109      	bne.n	8005a94 <HAL_TIM_PWM_Start+0x58>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	bf14      	ite	ne
 8005a8c:	2301      	movne	r3, #1
 8005a8e:	2300      	moveq	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	e008      	b.n	8005aa6 <HAL_TIM_PWM_Start+0x6a>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	bf14      	ite	ne
 8005aa0:	2301      	movne	r3, #1
 8005aa2:	2300      	moveq	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e07c      	b.n	8005ba8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d104      	bne.n	8005abe <HAL_TIM_PWM_Start+0x82>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005abc:	e013      	b.n	8005ae6 <HAL_TIM_PWM_Start+0xaa>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	d104      	bne.n	8005ace <HAL_TIM_PWM_Start+0x92>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005acc:	e00b      	b.n	8005ae6 <HAL_TIM_PWM_Start+0xaa>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d104      	bne.n	8005ade <HAL_TIM_PWM_Start+0xa2>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2202      	movs	r2, #2
 8005ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005adc:	e003      	b.n	8005ae6 <HAL_TIM_PWM_Start+0xaa>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2201      	movs	r2, #1
 8005aec:	6839      	ldr	r1, [r7, #0]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fe10 	bl	8006714 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a2d      	ldr	r2, [pc, #180]	; (8005bb0 <HAL_TIM_PWM_Start+0x174>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d004      	beq.n	8005b08 <HAL_TIM_PWM_Start+0xcc>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a2c      	ldr	r2, [pc, #176]	; (8005bb4 <HAL_TIM_PWM_Start+0x178>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d101      	bne.n	8005b0c <HAL_TIM_PWM_Start+0xd0>
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e000      	b.n	8005b0e <HAL_TIM_PWM_Start+0xd2>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d007      	beq.n	8005b22 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a22      	ldr	r2, [pc, #136]	; (8005bb0 <HAL_TIM_PWM_Start+0x174>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d022      	beq.n	8005b72 <HAL_TIM_PWM_Start+0x136>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b34:	d01d      	beq.n	8005b72 <HAL_TIM_PWM_Start+0x136>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a1f      	ldr	r2, [pc, #124]	; (8005bb8 <HAL_TIM_PWM_Start+0x17c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d018      	beq.n	8005b72 <HAL_TIM_PWM_Start+0x136>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a1d      	ldr	r2, [pc, #116]	; (8005bbc <HAL_TIM_PWM_Start+0x180>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d013      	beq.n	8005b72 <HAL_TIM_PWM_Start+0x136>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a1c      	ldr	r2, [pc, #112]	; (8005bc0 <HAL_TIM_PWM_Start+0x184>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d00e      	beq.n	8005b72 <HAL_TIM_PWM_Start+0x136>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a16      	ldr	r2, [pc, #88]	; (8005bb4 <HAL_TIM_PWM_Start+0x178>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d009      	beq.n	8005b72 <HAL_TIM_PWM_Start+0x136>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a18      	ldr	r2, [pc, #96]	; (8005bc4 <HAL_TIM_PWM_Start+0x188>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d004      	beq.n	8005b72 <HAL_TIM_PWM_Start+0x136>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a16      	ldr	r2, [pc, #88]	; (8005bc8 <HAL_TIM_PWM_Start+0x18c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d111      	bne.n	8005b96 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f003 0307 	and.w	r3, r3, #7
 8005b7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2b06      	cmp	r3, #6
 8005b82:	d010      	beq.n	8005ba6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0201 	orr.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b94:	e007      	b.n	8005ba6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f042 0201 	orr.w	r2, r2, #1
 8005ba4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40010000 	.word	0x40010000
 8005bb4:	40010400 	.word	0x40010400
 8005bb8:	40000400 	.word	0x40000400
 8005bbc:	40000800 	.word	0x40000800
 8005bc0:	40000c00 	.word	0x40000c00
 8005bc4:	40014000 	.word	0x40014000
 8005bc8:	40001800 	.word	0x40001800

08005bcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d122      	bne.n	8005c28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d11b      	bne.n	8005c28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f06f 0202 	mvn.w	r2, #2
 8005bf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fa77 	bl	8006102 <HAL_TIM_IC_CaptureCallback>
 8005c14:	e005      	b.n	8005c22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 fa69 	bl	80060ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fa7a 	bl	8006116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f003 0304 	and.w	r3, r3, #4
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d122      	bne.n	8005c7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f003 0304 	and.w	r3, r3, #4
 8005c40:	2b04      	cmp	r3, #4
 8005c42:	d11b      	bne.n	8005c7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f06f 0204 	mvn.w	r2, #4
 8005c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2202      	movs	r2, #2
 8005c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fa4d 	bl	8006102 <HAL_TIM_IC_CaptureCallback>
 8005c68:	e005      	b.n	8005c76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fa3f 	bl	80060ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fa50 	bl	8006116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	f003 0308 	and.w	r3, r3, #8
 8005c86:	2b08      	cmp	r3, #8
 8005c88:	d122      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f003 0308 	and.w	r3, r3, #8
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d11b      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f06f 0208 	mvn.w	r2, #8
 8005ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2204      	movs	r2, #4
 8005ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	f003 0303 	and.w	r3, r3, #3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fa23 	bl	8006102 <HAL_TIM_IC_CaptureCallback>
 8005cbc:	e005      	b.n	8005cca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fa15 	bl	80060ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fa26 	bl	8006116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	f003 0310 	and.w	r3, r3, #16
 8005cda:	2b10      	cmp	r3, #16
 8005cdc:	d122      	bne.n	8005d24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f003 0310 	and.w	r3, r3, #16
 8005ce8:	2b10      	cmp	r3, #16
 8005cea:	d11b      	bne.n	8005d24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f06f 0210 	mvn.w	r2, #16
 8005cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2208      	movs	r2, #8
 8005cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f9f9 	bl	8006102 <HAL_TIM_IC_CaptureCallback>
 8005d10:	e005      	b.n	8005d1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f9eb 	bl	80060ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f9fc 	bl	8006116 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d10e      	bne.n	8005d50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d107      	bne.n	8005d50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f06f 0201 	mvn.w	r2, #1
 8005d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7fb fc32 	bl	80015b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5a:	2b80      	cmp	r3, #128	; 0x80
 8005d5c:	d10e      	bne.n	8005d7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d68:	2b80      	cmp	r3, #128	; 0x80
 8005d6a:	d107      	bne.n	8005d7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fd78 	bl	800686c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d86:	2b40      	cmp	r3, #64	; 0x40
 8005d88:	d10e      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d94:	2b40      	cmp	r3, #64	; 0x40
 8005d96:	d107      	bne.n	8005da8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f9c1 	bl	800612a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f003 0320 	and.w	r3, r3, #32
 8005db2:	2b20      	cmp	r3, #32
 8005db4:	d10e      	bne.n	8005dd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	f003 0320 	and.w	r3, r3, #32
 8005dc0:	2b20      	cmp	r3, #32
 8005dc2:	d107      	bne.n	8005dd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f06f 0220 	mvn.w	r2, #32
 8005dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fd42 	bl	8006858 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dd4:	bf00      	nop
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005de8:	2300      	movs	r3, #0
 8005dea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d101      	bne.n	8005dfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005df6:	2302      	movs	r3, #2
 8005df8:	e0ae      	b.n	8005f58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b0c      	cmp	r3, #12
 8005e06:	f200 809f 	bhi.w	8005f48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005e0a:	a201      	add	r2, pc, #4	; (adr r2, 8005e10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e10:	08005e45 	.word	0x08005e45
 8005e14:	08005f49 	.word	0x08005f49
 8005e18:	08005f49 	.word	0x08005f49
 8005e1c:	08005f49 	.word	0x08005f49
 8005e20:	08005e85 	.word	0x08005e85
 8005e24:	08005f49 	.word	0x08005f49
 8005e28:	08005f49 	.word	0x08005f49
 8005e2c:	08005f49 	.word	0x08005f49
 8005e30:	08005ec7 	.word	0x08005ec7
 8005e34:	08005f49 	.word	0x08005f49
 8005e38:	08005f49 	.word	0x08005f49
 8005e3c:	08005f49 	.word	0x08005f49
 8005e40:	08005f07 	.word	0x08005f07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68b9      	ldr	r1, [r7, #8]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 fa18 	bl	8006280 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699a      	ldr	r2, [r3, #24]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0208 	orr.w	r2, r2, #8
 8005e5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	699a      	ldr	r2, [r3, #24]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0204 	bic.w	r2, r2, #4
 8005e6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	6999      	ldr	r1, [r3, #24]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	691a      	ldr	r2, [r3, #16]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	619a      	str	r2, [r3, #24]
      break;
 8005e82:	e064      	b.n	8005f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68b9      	ldr	r1, [r7, #8]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 fa68 	bl	8006360 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	699a      	ldr	r2, [r3, #24]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	699a      	ldr	r2, [r3, #24]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6999      	ldr	r1, [r3, #24]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	021a      	lsls	r2, r3, #8
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	619a      	str	r2, [r3, #24]
      break;
 8005ec4:	e043      	b.n	8005f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68b9      	ldr	r1, [r7, #8]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 fabd 	bl	800644c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69da      	ldr	r2, [r3, #28]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f042 0208 	orr.w	r2, r2, #8
 8005ee0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69da      	ldr	r2, [r3, #28]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0204 	bic.w	r2, r2, #4
 8005ef0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	69d9      	ldr	r1, [r3, #28]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	691a      	ldr	r2, [r3, #16]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	61da      	str	r2, [r3, #28]
      break;
 8005f04:	e023      	b.n	8005f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68b9      	ldr	r1, [r7, #8]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 fb11 	bl	8006534 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69da      	ldr	r2, [r3, #28]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	69da      	ldr	r2, [r3, #28]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	69d9      	ldr	r1, [r3, #28]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	021a      	lsls	r2, r3, #8
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	61da      	str	r2, [r3, #28]
      break;
 8005f46:	e002      	b.n	8005f4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005f4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3718      	adds	r7, #24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d101      	bne.n	8005f7c <HAL_TIM_ConfigClockSource+0x1c>
 8005f78:	2302      	movs	r3, #2
 8005f7a:	e0b4      	b.n	80060e6 <HAL_TIM_ConfigClockSource+0x186>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fb4:	d03e      	beq.n	8006034 <HAL_TIM_ConfigClockSource+0xd4>
 8005fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fba:	f200 8087 	bhi.w	80060cc <HAL_TIM_ConfigClockSource+0x16c>
 8005fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fc2:	f000 8086 	beq.w	80060d2 <HAL_TIM_ConfigClockSource+0x172>
 8005fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fca:	d87f      	bhi.n	80060cc <HAL_TIM_ConfigClockSource+0x16c>
 8005fcc:	2b70      	cmp	r3, #112	; 0x70
 8005fce:	d01a      	beq.n	8006006 <HAL_TIM_ConfigClockSource+0xa6>
 8005fd0:	2b70      	cmp	r3, #112	; 0x70
 8005fd2:	d87b      	bhi.n	80060cc <HAL_TIM_ConfigClockSource+0x16c>
 8005fd4:	2b60      	cmp	r3, #96	; 0x60
 8005fd6:	d050      	beq.n	800607a <HAL_TIM_ConfigClockSource+0x11a>
 8005fd8:	2b60      	cmp	r3, #96	; 0x60
 8005fda:	d877      	bhi.n	80060cc <HAL_TIM_ConfigClockSource+0x16c>
 8005fdc:	2b50      	cmp	r3, #80	; 0x50
 8005fde:	d03c      	beq.n	800605a <HAL_TIM_ConfigClockSource+0xfa>
 8005fe0:	2b50      	cmp	r3, #80	; 0x50
 8005fe2:	d873      	bhi.n	80060cc <HAL_TIM_ConfigClockSource+0x16c>
 8005fe4:	2b40      	cmp	r3, #64	; 0x40
 8005fe6:	d058      	beq.n	800609a <HAL_TIM_ConfigClockSource+0x13a>
 8005fe8:	2b40      	cmp	r3, #64	; 0x40
 8005fea:	d86f      	bhi.n	80060cc <HAL_TIM_ConfigClockSource+0x16c>
 8005fec:	2b30      	cmp	r3, #48	; 0x30
 8005fee:	d064      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0x15a>
 8005ff0:	2b30      	cmp	r3, #48	; 0x30
 8005ff2:	d86b      	bhi.n	80060cc <HAL_TIM_ConfigClockSource+0x16c>
 8005ff4:	2b20      	cmp	r3, #32
 8005ff6:	d060      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0x15a>
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	d867      	bhi.n	80060cc <HAL_TIM_ConfigClockSource+0x16c>
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d05c      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0x15a>
 8006000:	2b10      	cmp	r3, #16
 8006002:	d05a      	beq.n	80060ba <HAL_TIM_ConfigClockSource+0x15a>
 8006004:	e062      	b.n	80060cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6818      	ldr	r0, [r3, #0]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	6899      	ldr	r1, [r3, #8]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	685a      	ldr	r2, [r3, #4]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f000 fb5d 	bl	80066d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006028:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	609a      	str	r2, [r3, #8]
      break;
 8006032:	e04f      	b.n	80060d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6818      	ldr	r0, [r3, #0]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	6899      	ldr	r1, [r3, #8]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f000 fb46 	bl	80066d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689a      	ldr	r2, [r3, #8]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006056:	609a      	str	r2, [r3, #8]
      break;
 8006058:	e03c      	b.n	80060d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6818      	ldr	r0, [r3, #0]
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	6859      	ldr	r1, [r3, #4]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	461a      	mov	r2, r3
 8006068:	f000 faba 	bl	80065e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2150      	movs	r1, #80	; 0x50
 8006072:	4618      	mov	r0, r3
 8006074:	f000 fb13 	bl	800669e <TIM_ITRx_SetConfig>
      break;
 8006078:	e02c      	b.n	80060d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	6859      	ldr	r1, [r3, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	461a      	mov	r2, r3
 8006088:	f000 fad9 	bl	800663e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2160      	movs	r1, #96	; 0x60
 8006092:	4618      	mov	r0, r3
 8006094:	f000 fb03 	bl	800669e <TIM_ITRx_SetConfig>
      break;
 8006098:	e01c      	b.n	80060d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6818      	ldr	r0, [r3, #0]
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	6859      	ldr	r1, [r3, #4]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	461a      	mov	r2, r3
 80060a8:	f000 fa9a 	bl	80065e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2140      	movs	r1, #64	; 0x40
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 faf3 	bl	800669e <TIM_ITRx_SetConfig>
      break;
 80060b8:	e00c      	b.n	80060d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4619      	mov	r1, r3
 80060c4:	4610      	mov	r0, r2
 80060c6:	f000 faea 	bl	800669e <TIM_ITRx_SetConfig>
      break;
 80060ca:	e003      	b.n	80060d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	73fb      	strb	r3, [r7, #15]
      break;
 80060d0:	e000      	b.n	80060d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80060d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006102:	b480      	push	{r7}
 8006104:	b083      	sub	sp, #12
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800610a:	bf00      	nop
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr

08006116 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr

0800612a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800612a:	b480      	push	{r7}
 800612c:	b083      	sub	sp, #12
 800612e:	af00      	add	r7, sp, #0
 8006130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006132:	bf00      	nop
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
	...

08006140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006140:	b480      	push	{r7}
 8006142:	b085      	sub	sp, #20
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a40      	ldr	r2, [pc, #256]	; (8006254 <TIM_Base_SetConfig+0x114>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d013      	beq.n	8006180 <TIM_Base_SetConfig+0x40>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800615e:	d00f      	beq.n	8006180 <TIM_Base_SetConfig+0x40>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a3d      	ldr	r2, [pc, #244]	; (8006258 <TIM_Base_SetConfig+0x118>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d00b      	beq.n	8006180 <TIM_Base_SetConfig+0x40>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a3c      	ldr	r2, [pc, #240]	; (800625c <TIM_Base_SetConfig+0x11c>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d007      	beq.n	8006180 <TIM_Base_SetConfig+0x40>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a3b      	ldr	r2, [pc, #236]	; (8006260 <TIM_Base_SetConfig+0x120>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d003      	beq.n	8006180 <TIM_Base_SetConfig+0x40>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a3a      	ldr	r2, [pc, #232]	; (8006264 <TIM_Base_SetConfig+0x124>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d108      	bne.n	8006192 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a2f      	ldr	r2, [pc, #188]	; (8006254 <TIM_Base_SetConfig+0x114>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d02b      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a0:	d027      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a2c      	ldr	r2, [pc, #176]	; (8006258 <TIM_Base_SetConfig+0x118>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d023      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a2b      	ldr	r2, [pc, #172]	; (800625c <TIM_Base_SetConfig+0x11c>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d01f      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a2a      	ldr	r2, [pc, #168]	; (8006260 <TIM_Base_SetConfig+0x120>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d01b      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a29      	ldr	r2, [pc, #164]	; (8006264 <TIM_Base_SetConfig+0x124>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d017      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a28      	ldr	r2, [pc, #160]	; (8006268 <TIM_Base_SetConfig+0x128>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d013      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a27      	ldr	r2, [pc, #156]	; (800626c <TIM_Base_SetConfig+0x12c>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d00f      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a26      	ldr	r2, [pc, #152]	; (8006270 <TIM_Base_SetConfig+0x130>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d00b      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a25      	ldr	r2, [pc, #148]	; (8006274 <TIM_Base_SetConfig+0x134>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d007      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a24      	ldr	r2, [pc, #144]	; (8006278 <TIM_Base_SetConfig+0x138>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d003      	beq.n	80061f2 <TIM_Base_SetConfig+0xb2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a23      	ldr	r2, [pc, #140]	; (800627c <TIM_Base_SetConfig+0x13c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d108      	bne.n	8006204 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a0a      	ldr	r2, [pc, #40]	; (8006254 <TIM_Base_SetConfig+0x114>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d003      	beq.n	8006238 <TIM_Base_SetConfig+0xf8>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a0c      	ldr	r2, [pc, #48]	; (8006264 <TIM_Base_SetConfig+0x124>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d103      	bne.n	8006240 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	691a      	ldr	r2, [r3, #16]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	615a      	str	r2, [r3, #20]
}
 8006246:	bf00      	nop
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	40010000 	.word	0x40010000
 8006258:	40000400 	.word	0x40000400
 800625c:	40000800 	.word	0x40000800
 8006260:	40000c00 	.word	0x40000c00
 8006264:	40010400 	.word	0x40010400
 8006268:	40014000 	.word	0x40014000
 800626c:	40014400 	.word	0x40014400
 8006270:	40014800 	.word	0x40014800
 8006274:	40001800 	.word	0x40001800
 8006278:	40001c00 	.word	0x40001c00
 800627c:	40002000 	.word	0x40002000

08006280 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	f023 0201 	bic.w	r2, r3, #1
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0303 	bic.w	r3, r3, #3
 80062b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f023 0302 	bic.w	r3, r3, #2
 80062c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a20      	ldr	r2, [pc, #128]	; (8006358 <TIM_OC1_SetConfig+0xd8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d003      	beq.n	80062e4 <TIM_OC1_SetConfig+0x64>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a1f      	ldr	r2, [pc, #124]	; (800635c <TIM_OC1_SetConfig+0xdc>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d10c      	bne.n	80062fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f023 0308 	bic.w	r3, r3, #8
 80062ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f023 0304 	bic.w	r3, r3, #4
 80062fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a15      	ldr	r2, [pc, #84]	; (8006358 <TIM_OC1_SetConfig+0xd8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d003      	beq.n	800630e <TIM_OC1_SetConfig+0x8e>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a14      	ldr	r2, [pc, #80]	; (800635c <TIM_OC1_SetConfig+0xdc>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d111      	bne.n	8006332 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800631c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4313      	orrs	r3, r2
 8006326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4313      	orrs	r3, r2
 8006330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	621a      	str	r2, [r3, #32]
}
 800634c:	bf00      	nop
 800634e:	371c      	adds	r7, #28
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr
 8006358:	40010000 	.word	0x40010000
 800635c:	40010400 	.word	0x40010400

08006360 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	f023 0210 	bic.w	r2, r3, #16
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800638e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	021b      	lsls	r3, r3, #8
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	f023 0320 	bic.w	r3, r3, #32
 80063aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	011b      	lsls	r3, r3, #4
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a22      	ldr	r2, [pc, #136]	; (8006444 <TIM_OC2_SetConfig+0xe4>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d003      	beq.n	80063c8 <TIM_OC2_SetConfig+0x68>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a21      	ldr	r2, [pc, #132]	; (8006448 <TIM_OC2_SetConfig+0xe8>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d10d      	bne.n	80063e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	011b      	lsls	r3, r3, #4
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	4313      	orrs	r3, r2
 80063da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a17      	ldr	r2, [pc, #92]	; (8006444 <TIM_OC2_SetConfig+0xe4>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d003      	beq.n	80063f4 <TIM_OC2_SetConfig+0x94>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a16      	ldr	r2, [pc, #88]	; (8006448 <TIM_OC2_SetConfig+0xe8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d113      	bne.n	800641c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006402:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	4313      	orrs	r3, r2
 800640e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	621a      	str	r2, [r3, #32]
}
 8006436:	bf00      	nop
 8006438:	371c      	adds	r7, #28
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	40010000 	.word	0x40010000
 8006448:	40010400 	.word	0x40010400

0800644c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800644c:	b480      	push	{r7}
 800644e:	b087      	sub	sp, #28
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 0303 	bic.w	r3, r3, #3
 8006482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	4313      	orrs	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	021b      	lsls	r3, r3, #8
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	4313      	orrs	r3, r2
 80064a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a21      	ldr	r2, [pc, #132]	; (800652c <TIM_OC3_SetConfig+0xe0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d003      	beq.n	80064b2 <TIM_OC3_SetConfig+0x66>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a20      	ldr	r2, [pc, #128]	; (8006530 <TIM_OC3_SetConfig+0xe4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d10d      	bne.n	80064ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	021b      	lsls	r3, r3, #8
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a16      	ldr	r2, [pc, #88]	; (800652c <TIM_OC3_SetConfig+0xe0>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d003      	beq.n	80064de <TIM_OC3_SetConfig+0x92>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a15      	ldr	r2, [pc, #84]	; (8006530 <TIM_OC3_SetConfig+0xe4>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d113      	bne.n	8006506 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	011b      	lsls	r3, r3, #4
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	011b      	lsls	r3, r3, #4
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	4313      	orrs	r3, r2
 8006504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	621a      	str	r2, [r3, #32]
}
 8006520:	bf00      	nop
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	40010000 	.word	0x40010000
 8006530:	40010400 	.word	0x40010400

08006534 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800656a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	021b      	lsls	r3, r3, #8
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	4313      	orrs	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800657e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	031b      	lsls	r3, r3, #12
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	4313      	orrs	r3, r2
 800658a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a12      	ldr	r2, [pc, #72]	; (80065d8 <TIM_OC4_SetConfig+0xa4>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d003      	beq.n	800659c <TIM_OC4_SetConfig+0x68>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a11      	ldr	r2, [pc, #68]	; (80065dc <TIM_OC4_SetConfig+0xa8>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d109      	bne.n	80065b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	019b      	lsls	r3, r3, #6
 80065aa:	697a      	ldr	r2, [r7, #20]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	621a      	str	r2, [r3, #32]
}
 80065ca:	bf00      	nop
 80065cc:	371c      	adds	r7, #28
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	40010000 	.word	0x40010000
 80065dc:	40010400 	.word	0x40010400

080065e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b087      	sub	sp, #28
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	f023 0201 	bic.w	r2, r3, #1
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800660a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	011b      	lsls	r3, r3, #4
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	4313      	orrs	r3, r2
 8006614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f023 030a 	bic.w	r3, r3, #10
 800661c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4313      	orrs	r3, r2
 8006624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	621a      	str	r2, [r3, #32]
}
 8006632:	bf00      	nop
 8006634:	371c      	adds	r7, #28
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800663e:	b480      	push	{r7}
 8006640:	b087      	sub	sp, #28
 8006642:	af00      	add	r7, sp, #0
 8006644:	60f8      	str	r0, [r7, #12]
 8006646:	60b9      	str	r1, [r7, #8]
 8006648:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	f023 0210 	bic.w	r2, r3, #16
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6a1b      	ldr	r3, [r3, #32]
 8006660:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006668:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	031b      	lsls	r3, r3, #12
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	4313      	orrs	r3, r2
 8006672:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800667a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	011b      	lsls	r3, r3, #4
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	4313      	orrs	r3, r2
 8006684:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	621a      	str	r2, [r3, #32]
}
 8006692:	bf00      	nop
 8006694:	371c      	adds	r7, #28
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800669e:	b480      	push	{r7}
 80066a0:	b085      	sub	sp, #20
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	f043 0307 	orr.w	r3, r3, #7
 80066c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	609a      	str	r2, [r3, #8]
}
 80066c8:	bf00      	nop
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	021a      	lsls	r2, r3, #8
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	431a      	orrs	r2, r3
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	697a      	ldr	r2, [r7, #20]
 80066fe:	4313      	orrs	r3, r2
 8006700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	609a      	str	r2, [r3, #8]
}
 8006708:	bf00      	nop
 800670a:	371c      	adds	r7, #28
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006714:	b480      	push	{r7}
 8006716:	b087      	sub	sp, #28
 8006718:	af00      	add	r7, sp, #0
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	f003 031f 	and.w	r3, r3, #31
 8006726:	2201      	movs	r2, #1
 8006728:	fa02 f303 	lsl.w	r3, r2, r3
 800672c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6a1a      	ldr	r2, [r3, #32]
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	43db      	mvns	r3, r3
 8006736:	401a      	ands	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a1a      	ldr	r2, [r3, #32]
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	f003 031f 	and.w	r3, r3, #31
 8006746:	6879      	ldr	r1, [r7, #4]
 8006748:	fa01 f303 	lsl.w	r3, r1, r3
 800674c:	431a      	orrs	r2, r3
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	621a      	str	r2, [r3, #32]
}
 8006752:	bf00      	nop
 8006754:	371c      	adds	r7, #28
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
	...

08006760 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006770:	2b01      	cmp	r3, #1
 8006772:	d101      	bne.n	8006778 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006774:	2302      	movs	r3, #2
 8006776:	e05a      	b.n	800682e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2202      	movs	r2, #2
 8006784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800679e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a21      	ldr	r2, [pc, #132]	; (800683c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d022      	beq.n	8006802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c4:	d01d      	beq.n	8006802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a1d      	ldr	r2, [pc, #116]	; (8006840 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d018      	beq.n	8006802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a1b      	ldr	r2, [pc, #108]	; (8006844 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d013      	beq.n	8006802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a1a      	ldr	r2, [pc, #104]	; (8006848 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00e      	beq.n	8006802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a18      	ldr	r2, [pc, #96]	; (800684c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d009      	beq.n	8006802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a17      	ldr	r2, [pc, #92]	; (8006850 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d004      	beq.n	8006802 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a15      	ldr	r2, [pc, #84]	; (8006854 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d10c      	bne.n	800681c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006808:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	4313      	orrs	r3, r2
 8006812:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	40010000 	.word	0x40010000
 8006840:	40000400 	.word	0x40000400
 8006844:	40000800 	.word	0x40000800
 8006848:	40000c00 	.word	0x40000c00
 800684c:	40010400 	.word	0x40010400
 8006850:	40014000 	.word	0x40014000
 8006854:	40001800 	.word	0x40001800

08006858 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d101      	bne.n	8006892 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e03f      	b.n	8006912 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d106      	bne.n	80068ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7fb fa40 	bl	8001d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2224      	movs	r2, #36	; 0x24
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	68da      	ldr	r2, [r3, #12]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f939 	bl	8006b3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	691a      	ldr	r2, [r3, #16]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	695a      	ldr	r2, [r3, #20]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68da      	ldr	r2, [r3, #12]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2220      	movs	r2, #32
 8006904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2220      	movs	r2, #32
 800690c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b08a      	sub	sp, #40	; 0x28
 800691e:	af02      	add	r7, sp, #8
 8006920:	60f8      	str	r0, [r7, #12]
 8006922:	60b9      	str	r1, [r7, #8]
 8006924:	603b      	str	r3, [r7, #0]
 8006926:	4613      	mov	r3, r2
 8006928:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b20      	cmp	r3, #32
 8006938:	f040 808c 	bne.w	8006a54 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d002      	beq.n	8006948 <HAL_UART_Receive+0x2e>
 8006942:	88fb      	ldrh	r3, [r7, #6]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e084      	b.n	8006a56 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006952:	2b01      	cmp	r3, #1
 8006954:	d101      	bne.n	800695a <HAL_UART_Receive+0x40>
 8006956:	2302      	movs	r3, #2
 8006958:	e07d      	b.n	8006a56 <HAL_UART_Receive+0x13c>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2222      	movs	r2, #34	; 0x22
 800696c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006976:	f7fb fb0b 	bl	8001f90 <HAL_GetTick>
 800697a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	88fa      	ldrh	r2, [r7, #6]
 8006980:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	88fa      	ldrh	r2, [r7, #6]
 8006986:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006990:	d108      	bne.n	80069a4 <HAL_UART_Receive+0x8a>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d104      	bne.n	80069a4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800699a:	2300      	movs	r3, #0
 800699c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	61bb      	str	r3, [r7, #24]
 80069a2:	e003      	b.n	80069ac <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80069a8:	2300      	movs	r3, #0
 80069aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80069b4:	e043      	b.n	8006a3e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2200      	movs	r2, #0
 80069be:	2120      	movs	r1, #32
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 f84c 	bl	8006a5e <UART_WaitOnFlagUntilTimeout>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e042      	b.n	8006a56 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d10c      	bne.n	80069f0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	b29b      	uxth	r3, r3
 80069de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	3302      	adds	r3, #2
 80069ec:	61bb      	str	r3, [r7, #24]
 80069ee:	e01f      	b.n	8006a30 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f8:	d007      	beq.n	8006a0a <HAL_UART_Receive+0xf0>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10a      	bne.n	8006a18 <HAL_UART_Receive+0xfe>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d106      	bne.n	8006a18 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	701a      	strb	r2, [r3, #0]
 8006a16:	e008      	b.n	8006a2a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	3b01      	subs	r3, #1
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1b6      	bne.n	80069b6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006a50:	2300      	movs	r3, #0
 8006a52:	e000      	b.n	8006a56 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006a54:	2302      	movs	r3, #2
  }
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3720      	adds	r7, #32
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b090      	sub	sp, #64	; 0x40
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	60f8      	str	r0, [r7, #12]
 8006a66:	60b9      	str	r1, [r7, #8]
 8006a68:	603b      	str	r3, [r7, #0]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a6e:	e050      	b.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a76:	d04c      	beq.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d007      	beq.n	8006a8e <UART_WaitOnFlagUntilTimeout+0x30>
 8006a7e:	f7fb fa87 	bl	8001f90 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d241      	bcs.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	330c      	adds	r3, #12
 8006a94:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	330c      	adds	r3, #12
 8006aac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006aae:	637a      	str	r2, [r7, #52]	; 0x34
 8006ab0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ab4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e5      	bne.n	8006a8e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3314      	adds	r3, #20
 8006ac8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	e853 3f00 	ldrex	r3, [r3]
 8006ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	f023 0301 	bic.w	r3, r3, #1
 8006ad8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	3314      	adds	r3, #20
 8006ae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ae2:	623a      	str	r2, [r7, #32]
 8006ae4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	69f9      	ldr	r1, [r7, #28]
 8006ae8:	6a3a      	ldr	r2, [r7, #32]
 8006aea:	e841 2300 	strex	r3, r2, [r1]
 8006aee:	61bb      	str	r3, [r7, #24]
   return(result);
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1e5      	bne.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2220      	movs	r2, #32
 8006b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e00f      	b.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	bf0c      	ite	eq
 8006b22:	2301      	moveq	r3, #1
 8006b24:	2300      	movne	r3, #0
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	461a      	mov	r2, r3
 8006b2a:	79fb      	ldrb	r3, [r7, #7]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d09f      	beq.n	8006a70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3740      	adds	r7, #64	; 0x40
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
	...

08006b3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b40:	b09f      	sub	sp, #124	; 0x7c
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b52:	68d9      	ldr	r1, [r3, #12]
 8006b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	ea40 0301 	orr.w	r3, r0, r1
 8006b5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b60:	689a      	ldr	r2, [r3, #8]
 8006b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	431a      	orrs	r2, r3
 8006b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b80:	f021 010c 	bic.w	r1, r1, #12
 8006b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b8a:	430b      	orrs	r3, r1
 8006b8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b9a:	6999      	ldr	r1, [r3, #24]
 8006b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	ea40 0301 	orr.w	r3, r0, r1
 8006ba4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	4bc5      	ldr	r3, [pc, #788]	; (8006ec0 <UART_SetConfig+0x384>)
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d004      	beq.n	8006bba <UART_SetConfig+0x7e>
 8006bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	4bc3      	ldr	r3, [pc, #780]	; (8006ec4 <UART_SetConfig+0x388>)
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d103      	bne.n	8006bc2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bba:	f7fe fb65 	bl	8005288 <HAL_RCC_GetPCLK2Freq>
 8006bbe:	6778      	str	r0, [r7, #116]	; 0x74
 8006bc0:	e002      	b.n	8006bc8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bc2:	f7fe fb4d 	bl	8005260 <HAL_RCC_GetPCLK1Freq>
 8006bc6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bca:	69db      	ldr	r3, [r3, #28]
 8006bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bd0:	f040 80b6 	bne.w	8006d40 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bd6:	461c      	mov	r4, r3
 8006bd8:	f04f 0500 	mov.w	r5, #0
 8006bdc:	4622      	mov	r2, r4
 8006bde:	462b      	mov	r3, r5
 8006be0:	1891      	adds	r1, r2, r2
 8006be2:	6439      	str	r1, [r7, #64]	; 0x40
 8006be4:	415b      	adcs	r3, r3
 8006be6:	647b      	str	r3, [r7, #68]	; 0x44
 8006be8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006bec:	1912      	adds	r2, r2, r4
 8006bee:	eb45 0303 	adc.w	r3, r5, r3
 8006bf2:	f04f 0000 	mov.w	r0, #0
 8006bf6:	f04f 0100 	mov.w	r1, #0
 8006bfa:	00d9      	lsls	r1, r3, #3
 8006bfc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c00:	00d0      	lsls	r0, r2, #3
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
 8006c06:	1911      	adds	r1, r2, r4
 8006c08:	6639      	str	r1, [r7, #96]	; 0x60
 8006c0a:	416b      	adcs	r3, r5
 8006c0c:	667b      	str	r3, [r7, #100]	; 0x64
 8006c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	461a      	mov	r2, r3
 8006c14:	f04f 0300 	mov.w	r3, #0
 8006c18:	1891      	adds	r1, r2, r2
 8006c1a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006c1c:	415b      	adcs	r3, r3
 8006c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c24:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006c28:	f7f9 fcee 	bl	8000608 <__aeabi_uldivmod>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	460b      	mov	r3, r1
 8006c30:	4ba5      	ldr	r3, [pc, #660]	; (8006ec8 <UART_SetConfig+0x38c>)
 8006c32:	fba3 2302 	umull	r2, r3, r3, r2
 8006c36:	095b      	lsrs	r3, r3, #5
 8006c38:	011e      	lsls	r6, r3, #4
 8006c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c3c:	461c      	mov	r4, r3
 8006c3e:	f04f 0500 	mov.w	r5, #0
 8006c42:	4622      	mov	r2, r4
 8006c44:	462b      	mov	r3, r5
 8006c46:	1891      	adds	r1, r2, r2
 8006c48:	6339      	str	r1, [r7, #48]	; 0x30
 8006c4a:	415b      	adcs	r3, r3
 8006c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006c52:	1912      	adds	r2, r2, r4
 8006c54:	eb45 0303 	adc.w	r3, r5, r3
 8006c58:	f04f 0000 	mov.w	r0, #0
 8006c5c:	f04f 0100 	mov.w	r1, #0
 8006c60:	00d9      	lsls	r1, r3, #3
 8006c62:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c66:	00d0      	lsls	r0, r2, #3
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	1911      	adds	r1, r2, r4
 8006c6e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c70:	416b      	adcs	r3, r5
 8006c72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	461a      	mov	r2, r3
 8006c7a:	f04f 0300 	mov.w	r3, #0
 8006c7e:	1891      	adds	r1, r2, r2
 8006c80:	62b9      	str	r1, [r7, #40]	; 0x28
 8006c82:	415b      	adcs	r3, r3
 8006c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c8a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006c8e:	f7f9 fcbb 	bl	8000608 <__aeabi_uldivmod>
 8006c92:	4602      	mov	r2, r0
 8006c94:	460b      	mov	r3, r1
 8006c96:	4b8c      	ldr	r3, [pc, #560]	; (8006ec8 <UART_SetConfig+0x38c>)
 8006c98:	fba3 1302 	umull	r1, r3, r3, r2
 8006c9c:	095b      	lsrs	r3, r3, #5
 8006c9e:	2164      	movs	r1, #100	; 0x64
 8006ca0:	fb01 f303 	mul.w	r3, r1, r3
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	3332      	adds	r3, #50	; 0x32
 8006caa:	4a87      	ldr	r2, [pc, #540]	; (8006ec8 <UART_SetConfig+0x38c>)
 8006cac:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb0:	095b      	lsrs	r3, r3, #5
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006cb8:	441e      	add	r6, r3
 8006cba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f04f 0100 	mov.w	r1, #0
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	1894      	adds	r4, r2, r2
 8006cc8:	623c      	str	r4, [r7, #32]
 8006cca:	415b      	adcs	r3, r3
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8006cce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cd2:	1812      	adds	r2, r2, r0
 8006cd4:	eb41 0303 	adc.w	r3, r1, r3
 8006cd8:	f04f 0400 	mov.w	r4, #0
 8006cdc:	f04f 0500 	mov.w	r5, #0
 8006ce0:	00dd      	lsls	r5, r3, #3
 8006ce2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ce6:	00d4      	lsls	r4, r2, #3
 8006ce8:	4622      	mov	r2, r4
 8006cea:	462b      	mov	r3, r5
 8006cec:	1814      	adds	r4, r2, r0
 8006cee:	653c      	str	r4, [r7, #80]	; 0x50
 8006cf0:	414b      	adcs	r3, r1
 8006cf2:	657b      	str	r3, [r7, #84]	; 0x54
 8006cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	f04f 0300 	mov.w	r3, #0
 8006cfe:	1891      	adds	r1, r2, r2
 8006d00:	61b9      	str	r1, [r7, #24]
 8006d02:	415b      	adcs	r3, r3
 8006d04:	61fb      	str	r3, [r7, #28]
 8006d06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d0a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006d0e:	f7f9 fc7b 	bl	8000608 <__aeabi_uldivmod>
 8006d12:	4602      	mov	r2, r0
 8006d14:	460b      	mov	r3, r1
 8006d16:	4b6c      	ldr	r3, [pc, #432]	; (8006ec8 <UART_SetConfig+0x38c>)
 8006d18:	fba3 1302 	umull	r1, r3, r3, r2
 8006d1c:	095b      	lsrs	r3, r3, #5
 8006d1e:	2164      	movs	r1, #100	; 0x64
 8006d20:	fb01 f303 	mul.w	r3, r1, r3
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	00db      	lsls	r3, r3, #3
 8006d28:	3332      	adds	r3, #50	; 0x32
 8006d2a:	4a67      	ldr	r2, [pc, #412]	; (8006ec8 <UART_SetConfig+0x38c>)
 8006d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d30:	095b      	lsrs	r3, r3, #5
 8006d32:	f003 0207 	and.w	r2, r3, #7
 8006d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4432      	add	r2, r6
 8006d3c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006d3e:	e0b9      	b.n	8006eb4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006d40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d42:	461c      	mov	r4, r3
 8006d44:	f04f 0500 	mov.w	r5, #0
 8006d48:	4622      	mov	r2, r4
 8006d4a:	462b      	mov	r3, r5
 8006d4c:	1891      	adds	r1, r2, r2
 8006d4e:	6139      	str	r1, [r7, #16]
 8006d50:	415b      	adcs	r3, r3
 8006d52:	617b      	str	r3, [r7, #20]
 8006d54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006d58:	1912      	adds	r2, r2, r4
 8006d5a:	eb45 0303 	adc.w	r3, r5, r3
 8006d5e:	f04f 0000 	mov.w	r0, #0
 8006d62:	f04f 0100 	mov.w	r1, #0
 8006d66:	00d9      	lsls	r1, r3, #3
 8006d68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d6c:	00d0      	lsls	r0, r2, #3
 8006d6e:	4602      	mov	r2, r0
 8006d70:	460b      	mov	r3, r1
 8006d72:	eb12 0804 	adds.w	r8, r2, r4
 8006d76:	eb43 0905 	adc.w	r9, r3, r5
 8006d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f04f 0100 	mov.w	r1, #0
 8006d84:	f04f 0200 	mov.w	r2, #0
 8006d88:	f04f 0300 	mov.w	r3, #0
 8006d8c:	008b      	lsls	r3, r1, #2
 8006d8e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d92:	0082      	lsls	r2, r0, #2
 8006d94:	4640      	mov	r0, r8
 8006d96:	4649      	mov	r1, r9
 8006d98:	f7f9 fc36 	bl	8000608 <__aeabi_uldivmod>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4b49      	ldr	r3, [pc, #292]	; (8006ec8 <UART_SetConfig+0x38c>)
 8006da2:	fba3 2302 	umull	r2, r3, r3, r2
 8006da6:	095b      	lsrs	r3, r3, #5
 8006da8:	011e      	lsls	r6, r3, #4
 8006daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dac:	4618      	mov	r0, r3
 8006dae:	f04f 0100 	mov.w	r1, #0
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	1894      	adds	r4, r2, r2
 8006db8:	60bc      	str	r4, [r7, #8]
 8006dba:	415b      	adcs	r3, r3
 8006dbc:	60fb      	str	r3, [r7, #12]
 8006dbe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006dc2:	1812      	adds	r2, r2, r0
 8006dc4:	eb41 0303 	adc.w	r3, r1, r3
 8006dc8:	f04f 0400 	mov.w	r4, #0
 8006dcc:	f04f 0500 	mov.w	r5, #0
 8006dd0:	00dd      	lsls	r5, r3, #3
 8006dd2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006dd6:	00d4      	lsls	r4, r2, #3
 8006dd8:	4622      	mov	r2, r4
 8006dda:	462b      	mov	r3, r5
 8006ddc:	1814      	adds	r4, r2, r0
 8006dde:	64bc      	str	r4, [r7, #72]	; 0x48
 8006de0:	414b      	adcs	r3, r1
 8006de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f04f 0100 	mov.w	r1, #0
 8006dee:	f04f 0200 	mov.w	r2, #0
 8006df2:	f04f 0300 	mov.w	r3, #0
 8006df6:	008b      	lsls	r3, r1, #2
 8006df8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006dfc:	0082      	lsls	r2, r0, #2
 8006dfe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006e02:	f7f9 fc01 	bl	8000608 <__aeabi_uldivmod>
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4b2f      	ldr	r3, [pc, #188]	; (8006ec8 <UART_SetConfig+0x38c>)
 8006e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e10:	095b      	lsrs	r3, r3, #5
 8006e12:	2164      	movs	r1, #100	; 0x64
 8006e14:	fb01 f303 	mul.w	r3, r1, r3
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	011b      	lsls	r3, r3, #4
 8006e1c:	3332      	adds	r3, #50	; 0x32
 8006e1e:	4a2a      	ldr	r2, [pc, #168]	; (8006ec8 <UART_SetConfig+0x38c>)
 8006e20:	fba2 2303 	umull	r2, r3, r2, r3
 8006e24:	095b      	lsrs	r3, r3, #5
 8006e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e2a:	441e      	add	r6, r3
 8006e2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f04f 0100 	mov.w	r1, #0
 8006e34:	4602      	mov	r2, r0
 8006e36:	460b      	mov	r3, r1
 8006e38:	1894      	adds	r4, r2, r2
 8006e3a:	603c      	str	r4, [r7, #0]
 8006e3c:	415b      	adcs	r3, r3
 8006e3e:	607b      	str	r3, [r7, #4]
 8006e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e44:	1812      	adds	r2, r2, r0
 8006e46:	eb41 0303 	adc.w	r3, r1, r3
 8006e4a:	f04f 0400 	mov.w	r4, #0
 8006e4e:	f04f 0500 	mov.w	r5, #0
 8006e52:	00dd      	lsls	r5, r3, #3
 8006e54:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e58:	00d4      	lsls	r4, r2, #3
 8006e5a:	4622      	mov	r2, r4
 8006e5c:	462b      	mov	r3, r5
 8006e5e:	eb12 0a00 	adds.w	sl, r2, r0
 8006e62:	eb43 0b01 	adc.w	fp, r3, r1
 8006e66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f04f 0100 	mov.w	r1, #0
 8006e70:	f04f 0200 	mov.w	r2, #0
 8006e74:	f04f 0300 	mov.w	r3, #0
 8006e78:	008b      	lsls	r3, r1, #2
 8006e7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006e7e:	0082      	lsls	r2, r0, #2
 8006e80:	4650      	mov	r0, sl
 8006e82:	4659      	mov	r1, fp
 8006e84:	f7f9 fbc0 	bl	8000608 <__aeabi_uldivmod>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4b0e      	ldr	r3, [pc, #56]	; (8006ec8 <UART_SetConfig+0x38c>)
 8006e8e:	fba3 1302 	umull	r1, r3, r3, r2
 8006e92:	095b      	lsrs	r3, r3, #5
 8006e94:	2164      	movs	r1, #100	; 0x64
 8006e96:	fb01 f303 	mul.w	r3, r1, r3
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	011b      	lsls	r3, r3, #4
 8006e9e:	3332      	adds	r3, #50	; 0x32
 8006ea0:	4a09      	ldr	r2, [pc, #36]	; (8006ec8 <UART_SetConfig+0x38c>)
 8006ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea6:	095b      	lsrs	r3, r3, #5
 8006ea8:	f003 020f 	and.w	r2, r3, #15
 8006eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4432      	add	r2, r6
 8006eb2:	609a      	str	r2, [r3, #8]
}
 8006eb4:	bf00      	nop
 8006eb6:	377c      	adds	r7, #124	; 0x7c
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ebe:	bf00      	nop
 8006ec0:	40011000 	.word	0x40011000
 8006ec4:	40011400 	.word	0x40011400
 8006ec8:	51eb851f 	.word	0x51eb851f

08006ecc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b085      	sub	sp, #20
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d029      	beq.n	8006f3a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006ef2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ef6:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006f00:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8006f06:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8006f0c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8006f12:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8006f18:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8006f1e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8006f24:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8006f2a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68fa      	ldr	r2, [r7, #12]
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	e034      	b.n	8006fa4 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f46:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006f50:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8006f56:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006f6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f6e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006f78:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8006f7e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8006f84:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8006f8a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8006f90:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	68fa      	ldr	r2, [r7, #12]
 8006f9c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b087      	sub	sp, #28
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	60f8      	str	r0, [r7, #12]
 8006fba:	60b9      	str	r1, [r7, #8]
 8006fbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d02e      	beq.n	800702a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006fd8:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8006fe8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8006ff2:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8006ffc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	3b01      	subs	r3, #1
 8007004:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007006:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	3b01      	subs	r3, #1
 800700e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007010:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	3b01      	subs	r3, #1
 8007018:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800701a:	4313      	orrs	r3, r2
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	4313      	orrs	r3, r2
 8007020:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	609a      	str	r2, [r3, #8]
 8007028:	e03b      	b.n	80070a2 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007036:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800703a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	3b01      	subs	r3, #1
 8007042:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	3b01      	subs	r3, #1
 800704a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800704c:	4313      	orrs	r3, r2
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	4313      	orrs	r3, r2
 8007052:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007060:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	3b01      	subs	r3, #1
 800706e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007070:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	3b01      	subs	r3, #1
 8007078:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800707a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	3b01      	subs	r3, #1
 8007082:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007084:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	3b01      	subs	r3, #1
 800708c:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800708e:	4313      	orrs	r3, r2
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	4313      	orrs	r3, r2
 8007094:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	371c      	adds	r7, #28
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070b0:	b084      	sub	sp, #16
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b084      	sub	sp, #16
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	f107 001c 	add.w	r0, r7, #28
 80070be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d122      	bne.n	800710e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80070dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80070f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d105      	bne.n	8007102 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f950 	bl	80073a8 <USB_CoreReset>
 8007108:	4603      	mov	r3, r0
 800710a:	73fb      	strb	r3, [r7, #15]
 800710c:	e01a      	b.n	8007144 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f944 	bl	80073a8 <USB_CoreReset>
 8007120:	4603      	mov	r3, r0
 8007122:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007126:	2b00      	cmp	r3, #0
 8007128:	d106      	bne.n	8007138 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	639a      	str	r2, [r3, #56]	; 0x38
 8007136:	e005      	b.n	8007144 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007146:	2b01      	cmp	r3, #1
 8007148:	d10b      	bne.n	8007162 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f043 0206 	orr.w	r2, r3, #6
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f043 0220 	orr.w	r2, r3, #32
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007162:	7bfb      	ldrb	r3, [r7, #15]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800716e:	b004      	add	sp, #16
 8007170:	4770      	bx	lr

08007172 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007172:	b480      	push	{r7}
 8007174:	b083      	sub	sp, #12
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f023 0201 	bic.w	r2, r3, #1
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	460b      	mov	r3, r1
 800719e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80071b0:	78fb      	ldrb	r3, [r7, #3]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d115      	bne.n	80071e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80071c2:	2001      	movs	r0, #1
 80071c4:	f7fa fef0 	bl	8001fa8 <HAL_Delay>
      ms++;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	3301      	adds	r3, #1
 80071cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f8db 	bl	800738a <USB_GetMode>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d01e      	beq.n	8007218 <USB_SetCurrentMode+0x84>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2b31      	cmp	r3, #49	; 0x31
 80071de:	d9f0      	bls.n	80071c2 <USB_SetCurrentMode+0x2e>
 80071e0:	e01a      	b.n	8007218 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80071e2:	78fb      	ldrb	r3, [r7, #3]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d115      	bne.n	8007214 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80071f4:	2001      	movs	r0, #1
 80071f6:	f7fa fed7 	bl	8001fa8 <HAL_Delay>
      ms++;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3301      	adds	r3, #1
 80071fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 f8c2 	bl	800738a <USB_GetMode>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d005      	beq.n	8007218 <USB_SetCurrentMode+0x84>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2b31      	cmp	r3, #49	; 0x31
 8007210:	d9f0      	bls.n	80071f4 <USB_SetCurrentMode+0x60>
 8007212:	e001      	b.n	8007218 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e005      	b.n	8007224 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2b32      	cmp	r3, #50	; 0x32
 800721c:	d101      	bne.n	8007222 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e000      	b.n	8007224 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007236:	2300      	movs	r3, #0
 8007238:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	019b      	lsls	r3, r3, #6
 800723e:	f043 0220 	orr.w	r2, r3, #32
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	3301      	adds	r3, #1
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	4a08      	ldr	r2, [pc, #32]	; (8007270 <USB_FlushTxFifo+0x44>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d901      	bls.n	8007256 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e006      	b.n	8007264 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	f003 0320 	and.w	r3, r3, #32
 800725e:	2b20      	cmp	r3, #32
 8007260:	d0f1      	beq.n	8007246 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	00030d40 	.word	0x00030d40

08007274 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800727c:	2300      	movs	r3, #0
 800727e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2210      	movs	r2, #16
 8007284:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	3301      	adds	r3, #1
 800728a:	60fb      	str	r3, [r7, #12]
 800728c:	4a08      	ldr	r2, [pc, #32]	; (80072b0 <USB_FlushRxFifo+0x3c>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d901      	bls.n	8007296 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e006      	b.n	80072a4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	f003 0310 	and.w	r3, r3, #16
 800729e:	2b10      	cmp	r3, #16
 80072a0:	d0f1      	beq.n	8007286 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr
 80072b0:	00030d40 	.word	0x00030d40

080072b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b08b      	sub	sp, #44	; 0x2c
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	4613      	mov	r3, r2
 80072c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80072ca:	88fb      	ldrh	r3, [r7, #6]
 80072cc:	089b      	lsrs	r3, r3, #2
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80072d2:	88fb      	ldrh	r3, [r7, #6]
 80072d4:	f003 0303 	and.w	r3, r3, #3
 80072d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80072da:	2300      	movs	r3, #0
 80072dc:	623b      	str	r3, [r7, #32]
 80072de:	e014      	b.n	800730a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80072ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ee:	3301      	adds	r3, #1
 80072f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80072f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f4:	3301      	adds	r3, #1
 80072f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80072f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fa:	3301      	adds	r3, #1
 80072fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	3301      	adds	r3, #1
 8007302:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	3301      	adds	r3, #1
 8007308:	623b      	str	r3, [r7, #32]
 800730a:	6a3a      	ldr	r2, [r7, #32]
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	429a      	cmp	r2, r3
 8007310:	d3e6      	bcc.n	80072e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007312:	8bfb      	ldrh	r3, [r7, #30]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d01e      	beq.n	8007356 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007318:	2300      	movs	r3, #0
 800731a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007322:	461a      	mov	r2, r3
 8007324:	f107 0310 	add.w	r3, r7, #16
 8007328:	6812      	ldr	r2, [r2, #0]
 800732a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	b2db      	uxtb	r3, r3
 8007332:	00db      	lsls	r3, r3, #3
 8007334:	fa22 f303 	lsr.w	r3, r2, r3
 8007338:	b2da      	uxtb	r2, r3
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	701a      	strb	r2, [r3, #0]
      i++;
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	3301      	adds	r3, #1
 8007342:	623b      	str	r3, [r7, #32]
      pDest++;
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	3301      	adds	r3, #1
 8007348:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800734a:	8bfb      	ldrh	r3, [r7, #30]
 800734c:	3b01      	subs	r3, #1
 800734e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007350:	8bfb      	ldrh	r3, [r7, #30]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1ea      	bne.n	800732c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007358:	4618      	mov	r0, r3
 800735a:	372c      	adds	r7, #44	; 0x2c
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	4013      	ands	r3, r2
 800737a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800737c:	68fb      	ldr	r3, [r7, #12]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800738a:	b480      	push	{r7}
 800738c:	b083      	sub	sp, #12
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	f003 0301 	and.w	r3, r3, #1
}
 800739a:	4618      	mov	r0, r3
 800739c:	370c      	adds	r7, #12
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
	...

080073a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	3301      	adds	r3, #1
 80073b8:	60fb      	str	r3, [r7, #12]
 80073ba:	4a13      	ldr	r2, [pc, #76]	; (8007408 <USB_CoreReset+0x60>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d901      	bls.n	80073c4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e01a      	b.n	80073fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	daf3      	bge.n	80073b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	691b      	ldr	r3, [r3, #16]
 80073d4:	f043 0201 	orr.w	r2, r3, #1
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	3301      	adds	r3, #1
 80073e0:	60fb      	str	r3, [r7, #12]
 80073e2:	4a09      	ldr	r2, [pc, #36]	; (8007408 <USB_CoreReset+0x60>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d901      	bls.n	80073ec <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e006      	b.n	80073fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d0f1      	beq.n	80073dc <USB_CoreReset+0x34>

  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3714      	adds	r7, #20
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	00030d40 	.word	0x00030d40

0800740c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800740c:	b084      	sub	sp, #16
 800740e:	b580      	push	{r7, lr}
 8007410:	b084      	sub	sp, #16
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	f107 001c 	add.w	r0, r7, #28
 800741a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007428:	461a      	mov	r2, r3
 800742a:	2300      	movs	r3, #0
 800742c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007432:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800745a:	2b00      	cmp	r3, #0
 800745c:	d018      	beq.n	8007490 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800745e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007460:	2b01      	cmp	r3, #1
 8007462:	d10a      	bne.n	800747a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007472:	f043 0304 	orr.w	r3, r3, #4
 8007476:	6013      	str	r3, [r2, #0]
 8007478:	e014      	b.n	80074a4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007488:	f023 0304 	bic.w	r3, r3, #4
 800748c:	6013      	str	r3, [r2, #0]
 800748e:	e009      	b.n	80074a4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800749e:	f023 0304 	bic.w	r3, r3, #4
 80074a2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80074a4:	2110      	movs	r1, #16
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7ff fec0 	bl	800722c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7ff fee1 	bl	8007274 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80074b2:	2300      	movs	r3, #0
 80074b4:	60fb      	str	r3, [r7, #12]
 80074b6:	e015      	b.n	80074e4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	015a      	lsls	r2, r3, #5
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	4413      	add	r3, r2
 80074c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074c4:	461a      	mov	r2, r3
 80074c6:	f04f 33ff 	mov.w	r3, #4294967295
 80074ca:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074d8:	461a      	mov	r2, r3
 80074da:	2300      	movs	r3, #0
 80074dc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	3301      	adds	r3, #1
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d3e5      	bcc.n	80074b8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f04f 32ff 	mov.w	r2, #4294967295
 80074f8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00b      	beq.n	800751e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800750c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a13      	ldr	r2, [pc, #76]	; (8007560 <USB_HostInit+0x154>)
 8007512:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a13      	ldr	r2, [pc, #76]	; (8007564 <USB_HostInit+0x158>)
 8007518:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800751c:	e009      	b.n	8007532 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2280      	movs	r2, #128	; 0x80
 8007522:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a10      	ldr	r2, [pc, #64]	; (8007568 <USB_HostInit+0x15c>)
 8007528:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a0f      	ldr	r2, [pc, #60]	; (800756c <USB_HostInit+0x160>)
 800752e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007534:	2b00      	cmp	r3, #0
 8007536:	d105      	bne.n	8007544 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	f043 0210 	orr.w	r2, r3, #16
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	699a      	ldr	r2, [r3, #24]
 8007548:	4b09      	ldr	r3, [pc, #36]	; (8007570 <USB_HostInit+0x164>)
 800754a:	4313      	orrs	r3, r2
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800755c:	b004      	add	sp, #16
 800755e:	4770      	bx	lr
 8007560:	01000200 	.word	0x01000200
 8007564:	00e00300 	.word	0x00e00300
 8007568:	00600080 	.word	0x00600080
 800756c:	004000e0 	.word	0x004000e0
 8007570:	a3200008 	.word	0xa3200008

08007574 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	460b      	mov	r3, r1
 800757e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007592:	f023 0303 	bic.w	r3, r3, #3
 8007596:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	78fb      	ldrb	r3, [r7, #3]
 80075a2:	f003 0303 	and.w	r3, r3, #3
 80075a6:	68f9      	ldr	r1, [r7, #12]
 80075a8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80075ac:	4313      	orrs	r3, r2
 80075ae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80075b0:	78fb      	ldrb	r3, [r7, #3]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d107      	bne.n	80075c6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075bc:	461a      	mov	r2, r3
 80075be:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80075c2:	6053      	str	r3, [r2, #4]
 80075c4:	e009      	b.n	80075da <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80075c6:	78fb      	ldrb	r3, [r7, #3]
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d106      	bne.n	80075da <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075d2:	461a      	mov	r2, r3
 80075d4:	f241 7370 	movw	r3, #6000	; 0x1770
 80075d8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3714      	adds	r7, #20
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075fa:	695b      	ldr	r3, [r3, #20]
 80075fc:	b29b      	uxth	r3, r3
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800760a:	b480      	push	{r7}
 800760c:	b089      	sub	sp, #36	; 0x24
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
 8007612:	460b      	mov	r3, r1
 8007614:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 800761a:	78fb      	ldrb	r3, [r7, #3]
 800761c:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	4413      	add	r3, r2
 800762a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	0c9b      	lsrs	r3, r3, #18
 8007632:	f003 0303 	and.w	r3, r3, #3
 8007636:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	015a      	lsls	r2, r3, #5
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	4413      	add	r3, r2
 8007640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	0fdb      	lsrs	r3, r3, #31
 8007648:	f003 0301 	and.w	r3, r3, #1
 800764c:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f003 0320 	and.w	r3, r3, #32
 8007656:	2b20      	cmp	r3, #32
 8007658:	d104      	bne.n	8007664 <USB_HC_Halt+0x5a>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d101      	bne.n	8007664 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	e0e8      	b.n	8007836 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d002      	beq.n	8007670 <USB_HC_Halt+0x66>
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	2b02      	cmp	r3, #2
 800766e:	d173      	bne.n	8007758 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	4413      	add	r3, r2
 8007678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	0151      	lsls	r1, r2, #5
 8007682:	69ba      	ldr	r2, [r7, #24]
 8007684:	440a      	add	r2, r1
 8007686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800768a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800768e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f003 0320 	and.w	r3, r3, #32
 8007698:	2b00      	cmp	r3, #0
 800769a:	f040 80cb 	bne.w	8007834 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d143      	bne.n	8007732 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	015a      	lsls	r2, r3, #5
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	4413      	add	r3, r2
 80076b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	0151      	lsls	r1, r2, #5
 80076bc:	69ba      	ldr	r2, [r7, #24]
 80076be:	440a      	add	r2, r1
 80076c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076c8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	015a      	lsls	r2, r3, #5
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	697a      	ldr	r2, [r7, #20]
 80076da:	0151      	lsls	r1, r2, #5
 80076dc:	69ba      	ldr	r2, [r7, #24]
 80076de:	440a      	add	r2, r1
 80076e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076e8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	015a      	lsls	r2, r3, #5
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	4413      	add	r3, r2
 80076f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	697a      	ldr	r2, [r7, #20]
 80076fa:	0151      	lsls	r1, r2, #5
 80076fc:	69ba      	ldr	r2, [r7, #24]
 80076fe:	440a      	add	r2, r1
 8007700:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007704:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007708:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	3301      	adds	r3, #1
 800770e:	61fb      	str	r3, [r7, #28]
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007716:	d81d      	bhi.n	8007754 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	015a      	lsls	r2, r3, #5
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	4413      	add	r3, r2
 8007720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800772a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800772e:	d0ec      	beq.n	800770a <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007730:	e080      	b.n	8007834 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	4413      	add	r3, r2
 800773a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	0151      	lsls	r1, r2, #5
 8007744:	69ba      	ldr	r2, [r7, #24]
 8007746:	440a      	add	r2, r1
 8007748:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800774c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007750:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007752:	e06f      	b.n	8007834 <USB_HC_Halt+0x22a>
            break;
 8007754:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007756:	e06d      	b.n	8007834 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	015a      	lsls	r2, r3, #5
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	4413      	add	r3, r2
 8007760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	0151      	lsls	r1, r2, #5
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	440a      	add	r2, r1
 800776e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007772:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007776:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d143      	bne.n	8007810 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	015a      	lsls	r2, r3, #5
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	4413      	add	r3, r2
 8007790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	697a      	ldr	r2, [r7, #20]
 8007798:	0151      	lsls	r1, r2, #5
 800779a:	69ba      	ldr	r2, [r7, #24]
 800779c:	440a      	add	r2, r1
 800779e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80077a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	0151      	lsls	r1, r2, #5
 80077ba:	69ba      	ldr	r2, [r7, #24]
 80077bc:	440a      	add	r2, r1
 80077be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	015a      	lsls	r2, r3, #5
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	0151      	lsls	r1, r2, #5
 80077da:	69ba      	ldr	r2, [r7, #24]
 80077dc:	440a      	add	r2, r1
 80077de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80077e6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	3301      	adds	r3, #1
 80077ec:	61fb      	str	r3, [r7, #28]
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077f4:	d81d      	bhi.n	8007832 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	015a      	lsls	r2, r3, #5
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	4413      	add	r3, r2
 80077fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800780c:	d0ec      	beq.n	80077e8 <USB_HC_Halt+0x1de>
 800780e:	e011      	b.n	8007834 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	4413      	add	r3, r2
 8007818:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	0151      	lsls	r1, r2, #5
 8007822:	69ba      	ldr	r2, [r7, #24]
 8007824:	440a      	add	r2, r1
 8007826:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800782a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800782e:	6013      	str	r3, [r2, #0]
 8007830:	e000      	b.n	8007834 <USB_HC_Halt+0x22a>
          break;
 8007832:	bf00      	nop
    }
  }

  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3724      	adds	r7, #36	; 0x24
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
	...

08007844 <__libc_init_array>:
 8007844:	b570      	push	{r4, r5, r6, lr}
 8007846:	4d0d      	ldr	r5, [pc, #52]	; (800787c <__libc_init_array+0x38>)
 8007848:	4c0d      	ldr	r4, [pc, #52]	; (8007880 <__libc_init_array+0x3c>)
 800784a:	1b64      	subs	r4, r4, r5
 800784c:	10a4      	asrs	r4, r4, #2
 800784e:	2600      	movs	r6, #0
 8007850:	42a6      	cmp	r6, r4
 8007852:	d109      	bne.n	8007868 <__libc_init_array+0x24>
 8007854:	4d0b      	ldr	r5, [pc, #44]	; (8007884 <__libc_init_array+0x40>)
 8007856:	4c0c      	ldr	r4, [pc, #48]	; (8007888 <__libc_init_array+0x44>)
 8007858:	f000 f820 	bl	800789c <_init>
 800785c:	1b64      	subs	r4, r4, r5
 800785e:	10a4      	asrs	r4, r4, #2
 8007860:	2600      	movs	r6, #0
 8007862:	42a6      	cmp	r6, r4
 8007864:	d105      	bne.n	8007872 <__libc_init_array+0x2e>
 8007866:	bd70      	pop	{r4, r5, r6, pc}
 8007868:	f855 3b04 	ldr.w	r3, [r5], #4
 800786c:	4798      	blx	r3
 800786e:	3601      	adds	r6, #1
 8007870:	e7ee      	b.n	8007850 <__libc_init_array+0xc>
 8007872:	f855 3b04 	ldr.w	r3, [r5], #4
 8007876:	4798      	blx	r3
 8007878:	3601      	adds	r6, #1
 800787a:	e7f2      	b.n	8007862 <__libc_init_array+0x1e>
 800787c:	080078d4 	.word	0x080078d4
 8007880:	080078d4 	.word	0x080078d4
 8007884:	080078d4 	.word	0x080078d4
 8007888:	080078d8 	.word	0x080078d8

0800788c <memset>:
 800788c:	4402      	add	r2, r0
 800788e:	4603      	mov	r3, r0
 8007890:	4293      	cmp	r3, r2
 8007892:	d100      	bne.n	8007896 <memset+0xa>
 8007894:	4770      	bx	lr
 8007896:	f803 1b01 	strb.w	r1, [r3], #1
 800789a:	e7f9      	b.n	8007890 <memset+0x4>

0800789c <_init>:
 800789c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789e:	bf00      	nop
 80078a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078a2:	bc08      	pop	{r3}
 80078a4:	469e      	mov	lr, r3
 80078a6:	4770      	bx	lr

080078a8 <_fini>:
 80078a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078aa:	bf00      	nop
 80078ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ae:	bc08      	pop	{r3}
 80078b0:	469e      	mov	lr, r3
 80078b2:	4770      	bx	lr
