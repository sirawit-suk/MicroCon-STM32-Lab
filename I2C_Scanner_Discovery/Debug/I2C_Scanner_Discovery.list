
I2C_Scanner_Discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000300c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080031bc  080031bc  000131bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003210  08003210  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08003210  08003210  00013210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003218  08003218  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003218  08003218  00013218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800321c  0800321c  0001321c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08003220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002009c  2**0
                  CONTENTS
 10 .bss          00000198  2000009c  2000009c  0002009c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000234  20000234  0002009c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c2b0  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001921  00000000  00000000  0002c37c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000928  00000000  00000000  0002dca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008b8  00000000  00000000  0002e5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ff6  00000000  00000000  0002ee80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c03a  00000000  00000000  00051e76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4188  00000000  00000000  0005deb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00132038  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000296c  00000000  00000000  0013208c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080031a4 	.word	0x080031a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	080031a4 	.word	0x080031a4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t i = 0, ret;
 800058e:	2300      	movs	r3, #0
 8000590:	71fb      	strb	r3, [r7, #7]

    HAL_Init();
 8000592:	f000 fbdd 	bl	8000d50 <HAL_Init>
    SystemClock_Config();
 8000596:	f000 f865 	bl	8000664 <SystemClock_Config>
    MX_GPIO_Init();
 800059a:	f000 f9ad 	bl	80008f8 <MX_GPIO_Init>
    MX_I2C1_Init();
 800059e:	f000 f8c1 	bl	8000724 <MX_I2C1_Init>
    MX_USART1_UART_Init();
 80005a2:	f000 f97f 	bl	80008a4 <MX_USART1_UART_Init>

    HAL_Delay(1000);
 80005a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005aa:	f000 fc43 	bl	8000e34 <HAL_Delay>

    /*-[ I2C Bus Scanning ]-*/
    HAL_UART_Transmit(&huart1, StartMSG, sizeof(StartMSG), 10000);
 80005ae:	f242 7310 	movw	r3, #10000	; 0x2710
 80005b2:	221a      	movs	r2, #26
 80005b4:	4924      	ldr	r1, [pc, #144]	; (8000648 <main+0xc0>)
 80005b6:	4825      	ldr	r0, [pc, #148]	; (800064c <main+0xc4>)
 80005b8:	f001 fecb 	bl	8002352 <HAL_UART_Transmit>
    for(i=1; i<128; i++)
 80005bc:	2301      	movs	r3, #1
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	e028      	b.n	8000614 <main+0x8c>
    {
    	ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	b299      	uxth	r1, r3
 80005ca:	2305      	movs	r3, #5
 80005cc:	2203      	movs	r2, #3
 80005ce:	4820      	ldr	r0, [pc, #128]	; (8000650 <main+0xc8>)
 80005d0:	f001 f82a 	bl	8001628 <HAL_I2C_IsDeviceReady>
 80005d4:	4603      	mov	r3, r0
 80005d6:	71bb      	strb	r3, [r7, #6]
    	if (ret != HAL_OK) /* No ACK Received At That Address */
 80005d8:	79bb      	ldrb	r3, [r7, #6]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d007      	beq.n	80005ee <main+0x66>
    	{
    		HAL_UART_Transmit(&huart1, Space, sizeof(Space), 10000);
 80005de:	f242 7310 	movw	r3, #10000	; 0x2710
 80005e2:	2204      	movs	r2, #4
 80005e4:	491b      	ldr	r1, [pc, #108]	; (8000654 <main+0xcc>)
 80005e6:	4819      	ldr	r0, [pc, #100]	; (800064c <main+0xc4>)
 80005e8:	f001 feb3 	bl	8002352 <HAL_UART_Transmit>
 80005ec:	e00f      	b.n	800060e <main+0x86>
        }
    	else if(ret == HAL_OK)
 80005ee:	79bb      	ldrb	r3, [r7, #6]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d10c      	bne.n	800060e <main+0x86>
    	{
    		sprintf(Buffer, "0x%X", i);
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	461a      	mov	r2, r3
 80005f8:	4917      	ldr	r1, [pc, #92]	; (8000658 <main+0xd0>)
 80005fa:	4818      	ldr	r0, [pc, #96]	; (800065c <main+0xd4>)
 80005fc:	f002 f9a4 	bl	8002948 <siprintf>
    		HAL_UART_Transmit(&huart1, Buffer, sizeof(Buffer), 10000);
 8000600:	f242 7310 	movw	r3, #10000	; 0x2710
 8000604:	2219      	movs	r2, #25
 8000606:	4915      	ldr	r1, [pc, #84]	; (800065c <main+0xd4>)
 8000608:	4810      	ldr	r0, [pc, #64]	; (800064c <main+0xc4>)
 800060a:	f001 fea2 	bl	8002352 <HAL_UART_Transmit>
    for(i=1; i<128; i++)
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	3301      	adds	r3, #1
 8000612:	71fb      	strb	r3, [r7, #7]
 8000614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000618:	2b00      	cmp	r3, #0
 800061a:	dad2      	bge.n	80005c2 <main+0x3a>
    	}
    }
    HAL_UART_Transmit(&huart1, EndMSG, sizeof(EndMSG), 10000);
 800061c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000620:	220b      	movs	r2, #11
 8000622:	490f      	ldr	r1, [pc, #60]	; (8000660 <main+0xd8>)
 8000624:	4809      	ldr	r0, [pc, #36]	; (800064c <main+0xc4>)
 8000626:	f001 fe94 	bl	8002352 <HAL_UART_Transmit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 fb91 	bl	8000d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f819 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f000 f961 	bl	80008f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000636:	f000 f875 	bl	8000724 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800063a:	f000 f933 	bl	80008a4 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800063e:	f000 f8b1 	bl	80007a4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000642:	f000 f8ef 	bl	8000824 <MX_I2C3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000646:	e7fe      	b.n	8000646 <main+0xbe>
 8000648:	20000004 	.word	0x20000004
 800064c:	200001dc 	.word	0x200001dc
 8000650:	20000134 	.word	0x20000134
 8000654:	20000000 	.word	0x20000000
 8000658:	080031bc 	.word	0x080031bc
 800065c:	200000b8 	.word	0x200000b8
 8000660:	20000020 	.word	0x20000020

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	; 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2230      	movs	r2, #48	; 0x30
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f002 f960 	bl	8002938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	4b23      	ldr	r3, [pc, #140]	; (800071c <SystemClock_Config+0xb8>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a22      	ldr	r2, [pc, #136]	; (800071c <SystemClock_Config+0xb8>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b20      	ldr	r3, [pc, #128]	; (800071c <SystemClock_Config+0xb8>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <SystemClock_Config+0xbc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b0:	4a1b      	ldr	r2, [pc, #108]	; (8000720 <SystemClock_Config+0xbc>)
 80006b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b19      	ldr	r3, [pc, #100]	; (8000720 <SystemClock_Config+0xbc>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c4:	2302      	movs	r3, #2
 80006c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006cc:	2310      	movs	r3, #16
 80006ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 f9a5 	bl	8001a28 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006e4:	f000 f94c 	bl	8000980 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	230f      	movs	r3, #15
 80006ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ec:	2300      	movs	r3, #0
 80006ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f001 fc08 	bl	8001f18 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800070e:	f000 f937 	bl	8000980 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	; 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_I2C1_Init+0x74>)
 800072a:	4a1c      	ldr	r2, [pc, #112]	; (800079c <MX_I2C1_Init+0x78>)
 800072c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_I2C1_Init+0x74>)
 8000730:	4a1b      	ldr	r2, [pc, #108]	; (80007a0 <MX_I2C1_Init+0x7c>)
 8000732:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <MX_I2C1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_I2C1_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_I2C1_Init+0x74>)
 8000742:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000746:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_I2C1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_I2C1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_I2C1_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000760:	480d      	ldr	r0, [pc, #52]	; (8000798 <MX_I2C1_Init+0x74>)
 8000762:	f000 fe1d 	bl	80013a0 <HAL_I2C_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800076c:	f000 f908 	bl	8000980 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000770:	2100      	movs	r1, #0
 8000772:	4809      	ldr	r0, [pc, #36]	; (8000798 <MX_I2C1_Init+0x74>)
 8000774:	f001 f8dd 	bl	8001932 <HAL_I2CEx_ConfigAnalogFilter>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800077e:	f000 f8ff 	bl	8000980 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000782:	2100      	movs	r1, #0
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_I2C1_Init+0x74>)
 8000786:	f001 f910 	bl	80019aa <HAL_I2CEx_ConfigDigitalFilter>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000790:	f000 f8f6 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000134 	.word	0x20000134
 800079c:	40005400 	.word	0x40005400
 80007a0:	000186a0 	.word	0x000186a0

080007a4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <MX_I2C2_Init+0x74>)
 80007aa:	4a1c      	ldr	r2, [pc, #112]	; (800081c <MX_I2C2_Init+0x78>)
 80007ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80007ae:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <MX_I2C2_Init+0x74>)
 80007b0:	4a1b      	ldr	r2, [pc, #108]	; (8000820 <MX_I2C2_Init+0x7c>)
 80007b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <MX_I2C2_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_I2C2_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_I2C2_Init+0x74>)
 80007c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_I2C2_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_I2C2_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_I2C2_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_I2C2_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <MX_I2C2_Init+0x74>)
 80007e2:	f000 fddd 	bl	80013a0 <HAL_I2C_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80007ec:	f000 f8c8 	bl	8000980 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f0:	2100      	movs	r1, #0
 80007f2:	4809      	ldr	r0, [pc, #36]	; (8000818 <MX_I2C2_Init+0x74>)
 80007f4:	f001 f89d 	bl	8001932 <HAL_I2CEx_ConfigAnalogFilter>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80007fe:	f000 f8bf 	bl	8000980 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000802:	2100      	movs	r1, #0
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_I2C2_Init+0x74>)
 8000806:	f001 f8d0 	bl	80019aa <HAL_I2CEx_ConfigDigitalFilter>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000810:	f000 f8b6 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000188 	.word	0x20000188
 800081c:	40005800 	.word	0x40005800
 8000820:	000186a0 	.word	0x000186a0

08000824 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000828:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MX_I2C3_Init+0x74>)
 800082a:	4a1c      	ldr	r2, [pc, #112]	; (800089c <MX_I2C3_Init+0x78>)
 800082c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_I2C3_Init+0x74>)
 8000830:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <MX_I2C3_Init+0x7c>)
 8000832:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000834:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_I2C3_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_I2C3_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_I2C3_Init+0x74>)
 8000842:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000846:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_I2C3_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_I2C3_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000854:	4b10      	ldr	r3, [pc, #64]	; (8000898 <MX_I2C3_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_I2C3_Init+0x74>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <MX_I2C3_Init+0x74>)
 8000862:	f000 fd9d 	bl	80013a0 <HAL_I2C_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800086c:	f000 f888 	bl	8000980 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000870:	2100      	movs	r1, #0
 8000872:	4809      	ldr	r0, [pc, #36]	; (8000898 <MX_I2C3_Init+0x74>)
 8000874:	f001 f85d 	bl	8001932 <HAL_I2CEx_ConfigAnalogFilter>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800087e:	f000 f87f 	bl	8000980 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000882:	2100      	movs	r1, #0
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_I2C3_Init+0x74>)
 8000886:	f001 f890 	bl	80019aa <HAL_I2CEx_ConfigDigitalFilter>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000890:	f000 f876 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200000e0 	.word	0x200000e0
 800089c:	40005c00 	.word	0x40005c00
 80008a0:	000186a0 	.word	0x000186a0

080008a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_USART1_UART_Init+0x4c>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <MX_USART1_UART_Init+0x50>)
 80008ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <MX_USART1_UART_Init+0x4c>)
 80008b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_USART1_UART_Init+0x4c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_USART1_UART_Init+0x4c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_USART1_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_USART1_UART_Init+0x4c>)
 80008ca:	220c      	movs	r2, #12
 80008cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_USART1_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_USART1_UART_Init+0x4c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_USART1_UART_Init+0x4c>)
 80008dc:	f001 fcec 	bl	80022b8 <HAL_UART_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008e6:	f000 f84b 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200001dc 	.word	0x200001dc
 80008f4:	40011000 	.word	0x40011000

080008f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b1e      	ldr	r3, [pc, #120]	; (800097c <MX_GPIO_Init+0x84>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a1d      	ldr	r2, [pc, #116]	; (800097c <MX_GPIO_Init+0x84>)
 8000908:	f043 0320 	orr.w	r3, r3, #32
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b1b      	ldr	r3, [pc, #108]	; (800097c <MX_GPIO_Init+0x84>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0320 	and.w	r3, r3, #32
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <MX_GPIO_Init+0x84>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a16      	ldr	r2, [pc, #88]	; (800097c <MX_GPIO_Init+0x84>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_GPIO_Init+0x84>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <MX_GPIO_Init+0x84>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a0f      	ldr	r2, [pc, #60]	; (800097c <MX_GPIO_Init+0x84>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <MX_GPIO_Init+0x84>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_GPIO_Init+0x84>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a08      	ldr	r2, [pc, #32]	; (800097c <MX_GPIO_Init+0x84>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_GPIO_Init+0x84>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

}
 800096e:	bf00      	nop
 8000970:	3714      	adds	r7, #20
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	e7fe      	b.n	8000988 <Error_Handler+0x8>
	...

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	4a0f      	ldr	r2, [pc, #60]	; (80009d8 <HAL_MspInit+0x4c>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	; 0x44
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <HAL_MspInit+0x4c>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009bc:	6413      	str	r3, [r2, #64]	; 0x40
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800

080009dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08e      	sub	sp, #56	; 0x38
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a5b      	ldr	r2, [pc, #364]	; (8000b68 <HAL_I2C_MspInit+0x18c>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d12c      	bne.n	8000a58 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
 8000a02:	4b5a      	ldr	r3, [pc, #360]	; (8000b6c <HAL_I2C_MspInit+0x190>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a59      	ldr	r2, [pc, #356]	; (8000b6c <HAL_I2C_MspInit+0x190>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b57      	ldr	r3, [pc, #348]	; (8000b6c <HAL_I2C_MspInit+0x190>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	623b      	str	r3, [r7, #32]
 8000a18:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a1a:	23c0      	movs	r3, #192	; 0xc0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a1e:	2312      	movs	r3, #18
 8000a20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a2a:	2304      	movs	r3, #4
 8000a2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a32:	4619      	mov	r1, r3
 8000a34:	484e      	ldr	r0, [pc, #312]	; (8000b70 <HAL_I2C_MspInit+0x194>)
 8000a36:	f000 fb07 	bl	8001048 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
 8000a3e:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_I2C_MspInit+0x190>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	4a4a      	ldr	r2, [pc, #296]	; (8000b6c <HAL_I2C_MspInit+0x190>)
 8000a44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a48:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4a:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_I2C_MspInit+0x190>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a52:	61fb      	str	r3, [r7, #28]
 8000a54:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000a56:	e082      	b.n	8000b5e <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C2)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a45      	ldr	r2, [pc, #276]	; (8000b74 <HAL_I2C_MspInit+0x198>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d12c      	bne.n	8000abc <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
 8000a66:	4b41      	ldr	r3, [pc, #260]	; (8000b6c <HAL_I2C_MspInit+0x190>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a40      	ldr	r2, [pc, #256]	; (8000b6c <HAL_I2C_MspInit+0x190>)
 8000a6c:	f043 0320 	orr.w	r3, r3, #32
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b3e      	ldr	r3, [pc, #248]	; (8000b6c <HAL_I2C_MspInit+0x190>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0320 	and.w	r3, r3, #32
 8000a7a:	61bb      	str	r3, [r7, #24]
 8000a7c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a82:	2312      	movs	r3, #18
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a8e:	2304      	movs	r3, #4
 8000a90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	4619      	mov	r1, r3
 8000a98:	4837      	ldr	r0, [pc, #220]	; (8000b78 <HAL_I2C_MspInit+0x19c>)
 8000a9a:	f000 fad5 	bl	8001048 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
 8000aa2:	4b32      	ldr	r3, [pc, #200]	; (8000b6c <HAL_I2C_MspInit+0x190>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	4a31      	ldr	r2, [pc, #196]	; (8000b6c <HAL_I2C_MspInit+0x190>)
 8000aa8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000aac:	6413      	str	r3, [r2, #64]	; 0x40
 8000aae:	4b2f      	ldr	r3, [pc, #188]	; (8000b6c <HAL_I2C_MspInit+0x190>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	697b      	ldr	r3, [r7, #20]
}
 8000aba:	e050      	b.n	8000b5e <HAL_I2C_MspInit+0x182>
  else if(hi2c->Instance==I2C3)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a2e      	ldr	r2, [pc, #184]	; (8000b7c <HAL_I2C_MspInit+0x1a0>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d14b      	bne.n	8000b5e <HAL_I2C_MspInit+0x182>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
 8000aca:	4b28      	ldr	r3, [pc, #160]	; (8000b6c <HAL_I2C_MspInit+0x190>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a27      	ldr	r2, [pc, #156]	; (8000b6c <HAL_I2C_MspInit+0x190>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b25      	ldr	r3, [pc, #148]	; (8000b6c <HAL_I2C_MspInit+0x190>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0304 	and.w	r3, r3, #4
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <HAL_I2C_MspInit+0x190>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a20      	ldr	r2, [pc, #128]	; (8000b6c <HAL_I2C_MspInit+0x190>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <HAL_I2C_MspInit+0x190>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000afe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b04:	2312      	movs	r3, #18
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b10:	2304      	movs	r3, #4
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4819      	ldr	r0, [pc, #100]	; (8000b80 <HAL_I2C_MspInit+0x1a4>)
 8000b1c:	f000 fa94 	bl	8001048 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b26:	2312      	movs	r3, #18
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b32:	2304      	movs	r3, #4
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4811      	ldr	r0, [pc, #68]	; (8000b84 <HAL_I2C_MspInit+0x1a8>)
 8000b3e:	f000 fa83 	bl	8001048 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <HAL_I2C_MspInit+0x190>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <HAL_I2C_MspInit+0x190>)
 8000b4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b50:	6413      	str	r3, [r2, #64]	; 0x40
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_I2C_MspInit+0x190>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
}
 8000b5e:	bf00      	nop
 8000b60:	3738      	adds	r7, #56	; 0x38
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40005400 	.word	0x40005400
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020400 	.word	0x40020400
 8000b74:	40005800 	.word	0x40005800
 8000b78:	40021400 	.word	0x40021400
 8000b7c:	40005c00 	.word	0x40005c00
 8000b80:	40020800 	.word	0x40020800
 8000b84:	40020000 	.word	0x40020000

08000b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a19      	ldr	r2, [pc, #100]	; (8000c0c <HAL_UART_MspInit+0x84>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d12c      	bne.n	8000c04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <HAL_UART_MspInit+0x88>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	4a17      	ldr	r2, [pc, #92]	; (8000c10 <HAL_UART_MspInit+0x88>)
 8000bb4:	f043 0310 	orr.w	r3, r3, #16
 8000bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <HAL_UART_MspInit+0x88>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	f003 0310 	and.w	r3, r3, #16
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <HAL_UART_MspInit+0x88>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a10      	ldr	r2, [pc, #64]	; (8000c10 <HAL_UART_MspInit+0x88>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <HAL_UART_MspInit+0x88>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000be2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bf4:	2307      	movs	r3, #7
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <HAL_UART_MspInit+0x8c>)
 8000c00:	f000 fa22 	bl	8001048 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c04:	bf00      	nop
 8000c06:	3728      	adds	r7, #40	; 0x28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40011000 	.word	0x40011000
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020000 	.word	0x40020000

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <NMI_Handler+0x4>

08000c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c64:	f000 f8c6 	bl	8000df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c74:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <_sbrk+0x5c>)
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <_sbrk+0x60>)
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c80:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <_sbrk+0x64>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	; (8000cd4 <_sbrk+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d207      	bcs.n	8000cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c9c:	f001 fe22 	bl	80028e4 <__errno>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	e009      	b.n	8000cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a05      	ldr	r2, [pc, #20]	; (8000cd0 <_sbrk+0x64>)
 8000cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20030000 	.word	0x20030000
 8000ccc:	00000400 	.word	0x00000400
 8000cd0:	200000d4 	.word	0x200000d4
 8000cd4:	20000238 	.word	0x20000238

08000cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d34 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d02:	490e      	ldr	r1, [pc, #56]	; (8000d3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d04:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d08:	e002      	b.n	8000d10 <LoopCopyDataInit>

08000d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0e:	3304      	adds	r3, #4

08000d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d14:	d3f9      	bcc.n	8000d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d18:	4c0b      	ldr	r4, [pc, #44]	; (8000d48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d1c:	e001      	b.n	8000d22 <LoopFillZerobss>

08000d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d20:	3204      	adds	r2, #4

08000d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d24:	d3fb      	bcc.n	8000d1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d26:	f7ff ffd7 	bl	8000cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f001 fde1 	bl	80028f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d2e:	f7ff fc2b 	bl	8000588 <main>
  bx  lr    
 8000d32:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d34:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8000d40:	08003220 	.word	0x08003220
  ldr r2, =_sbss
 8000d44:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8000d48:	20000234 	.word	0x20000234

08000d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC_IRQHandler>
	...

08000d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <HAL_Init+0x40>)
 8000d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <HAL_Init+0x40>)
 8000d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <HAL_Init+0x40>)
 8000d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f000 f931 	bl	8000fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7e:	200f      	movs	r0, #15
 8000d80:	f000 f808 	bl	8000d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d84:	f7ff fe02 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023c00 	.word	0x40023c00

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_InitTick+0x54>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_InitTick+0x58>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 f93b 	bl	800102e <HAL_SYSTICK_Config>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00e      	b.n	8000de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d80a      	bhi.n	8000dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f000 f911 	bl	8000ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd4:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <HAL_InitTick+0x5c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e000      	b.n	8000de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	2000002c 	.word	0x2000002c
 8000dec:	20000034 	.word	0x20000034
 8000df0:	20000030 	.word	0x20000030

08000df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x20>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_IncTick+0x24>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <HAL_IncTick+0x24>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000034 	.word	0x20000034
 8000e18:	20000220 	.word	0x20000220

08000e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <HAL_GetTick+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000220 	.word	0x20000220

08000e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e3c:	f7ff ffee 	bl	8000e1c <HAL_GetTick>
 8000e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e4c:	d005      	beq.n	8000e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <HAL_Delay+0x44>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	461a      	mov	r2, r3
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4413      	add	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e5a:	bf00      	nop
 8000e5c:	f7ff ffde 	bl	8000e1c <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d8f7      	bhi.n	8000e5c <HAL_Delay+0x28>
  {
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000034 	.word	0x20000034

08000e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eae:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	60d3      	str	r3, [r2, #12]
}
 8000eb4:	bf00      	nop
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <__NVIC_GetPriorityGrouping+0x18>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	0a1b      	lsrs	r3, r3, #8
 8000ece:	f003 0307 	and.w	r3, r3, #7
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db0a      	blt.n	8000f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	490c      	ldr	r1, [pc, #48]	; (8000f2c <__NVIC_SetPriority+0x4c>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	0112      	lsls	r2, r2, #4
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	440b      	add	r3, r1
 8000f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f08:	e00a      	b.n	8000f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4908      	ldr	r1, [pc, #32]	; (8000f30 <__NVIC_SetPriority+0x50>)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	3b04      	subs	r3, #4
 8000f18:	0112      	lsls	r2, r2, #4
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	761a      	strb	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	; 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f1c3 0307 	rsb	r3, r3, #7
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	bf28      	it	cs
 8000f52:	2304      	movcs	r3, #4
 8000f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d902      	bls.n	8000f64 <NVIC_EncodePriority+0x30>
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3b03      	subs	r3, #3
 8000f62:	e000      	b.n	8000f66 <NVIC_EncodePriority+0x32>
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43da      	mvns	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	43d9      	mvns	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	4313      	orrs	r3, r2
         );
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3724      	adds	r7, #36	; 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fac:	d301      	bcc.n	8000fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00f      	b.n	8000fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <SysTick_Config+0x40>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fba:	210f      	movs	r1, #15
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f7ff ff8e 	bl	8000ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <SysTick_Config+0x40>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <SysTick_Config+0x40>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff47 	bl	8000e7c <__NVIC_SetPriorityGrouping>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
 8001002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001008:	f7ff ff5c 	bl	8000ec4 <__NVIC_GetPriorityGrouping>
 800100c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	6978      	ldr	r0, [r7, #20]
 8001014:	f7ff ff8e 	bl	8000f34 <NVIC_EncodePriority>
 8001018:	4602      	mov	r2, r0
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff5d 	bl	8000ee0 <__NVIC_SetPriority>
}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffb0 	bl	8000f9c <SysTick_Config>
 800103c:	4603      	mov	r3, r0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
 8001062:	e177      	b.n	8001354 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001064:	2201      	movs	r2, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	4013      	ands	r3, r2
 8001076:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	429a      	cmp	r2, r3
 800107e:	f040 8166 	bne.w	800134e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b01      	cmp	r3, #1
 800108c:	d005      	beq.n	800109a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001096:	2b02      	cmp	r3, #2
 8001098:	d130      	bne.n	80010fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	2203      	movs	r2, #3
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	68da      	ldr	r2, [r3, #12]
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d0:	2201      	movs	r2, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4013      	ands	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	091b      	lsrs	r3, r3, #4
 80010e6:	f003 0201 	and.w	r2, r3, #1
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b03      	cmp	r3, #3
 8001106:	d017      	beq.n	8001138 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d123      	bne.n	800118c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	08da      	lsrs	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001150:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	220f      	movs	r2, #15
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3208      	adds	r2, #8
 8001186:	69b9      	ldr	r1, [r7, #24]
 8001188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	2203      	movs	r2, #3
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0203 	and.w	r2, r3, #3
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80c0 	beq.w	800134e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b66      	ldr	r3, [pc, #408]	; (800136c <HAL_GPIO_Init+0x324>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	4a65      	ldr	r2, [pc, #404]	; (800136c <HAL_GPIO_Init+0x324>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011dc:	6453      	str	r3, [r2, #68]	; 0x44
 80011de:	4b63      	ldr	r3, [pc, #396]	; (800136c <HAL_GPIO_Init+0x324>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ea:	4a61      	ldr	r2, [pc, #388]	; (8001370 <HAL_GPIO_Init+0x328>)
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	3302      	adds	r3, #2
 80011f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	220f      	movs	r2, #15
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a58      	ldr	r2, [pc, #352]	; (8001374 <HAL_GPIO_Init+0x32c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d037      	beq.n	8001286 <HAL_GPIO_Init+0x23e>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a57      	ldr	r2, [pc, #348]	; (8001378 <HAL_GPIO_Init+0x330>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d031      	beq.n	8001282 <HAL_GPIO_Init+0x23a>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a56      	ldr	r2, [pc, #344]	; (800137c <HAL_GPIO_Init+0x334>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d02b      	beq.n	800127e <HAL_GPIO_Init+0x236>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a55      	ldr	r2, [pc, #340]	; (8001380 <HAL_GPIO_Init+0x338>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d025      	beq.n	800127a <HAL_GPIO_Init+0x232>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a54      	ldr	r2, [pc, #336]	; (8001384 <HAL_GPIO_Init+0x33c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d01f      	beq.n	8001276 <HAL_GPIO_Init+0x22e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a53      	ldr	r2, [pc, #332]	; (8001388 <HAL_GPIO_Init+0x340>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d019      	beq.n	8001272 <HAL_GPIO_Init+0x22a>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a52      	ldr	r2, [pc, #328]	; (800138c <HAL_GPIO_Init+0x344>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d013      	beq.n	800126e <HAL_GPIO_Init+0x226>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a51      	ldr	r2, [pc, #324]	; (8001390 <HAL_GPIO_Init+0x348>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d00d      	beq.n	800126a <HAL_GPIO_Init+0x222>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a50      	ldr	r2, [pc, #320]	; (8001394 <HAL_GPIO_Init+0x34c>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d007      	beq.n	8001266 <HAL_GPIO_Init+0x21e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a4f      	ldr	r2, [pc, #316]	; (8001398 <HAL_GPIO_Init+0x350>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d101      	bne.n	8001262 <HAL_GPIO_Init+0x21a>
 800125e:	2309      	movs	r3, #9
 8001260:	e012      	b.n	8001288 <HAL_GPIO_Init+0x240>
 8001262:	230a      	movs	r3, #10
 8001264:	e010      	b.n	8001288 <HAL_GPIO_Init+0x240>
 8001266:	2308      	movs	r3, #8
 8001268:	e00e      	b.n	8001288 <HAL_GPIO_Init+0x240>
 800126a:	2307      	movs	r3, #7
 800126c:	e00c      	b.n	8001288 <HAL_GPIO_Init+0x240>
 800126e:	2306      	movs	r3, #6
 8001270:	e00a      	b.n	8001288 <HAL_GPIO_Init+0x240>
 8001272:	2305      	movs	r3, #5
 8001274:	e008      	b.n	8001288 <HAL_GPIO_Init+0x240>
 8001276:	2304      	movs	r3, #4
 8001278:	e006      	b.n	8001288 <HAL_GPIO_Init+0x240>
 800127a:	2303      	movs	r3, #3
 800127c:	e004      	b.n	8001288 <HAL_GPIO_Init+0x240>
 800127e:	2302      	movs	r3, #2
 8001280:	e002      	b.n	8001288 <HAL_GPIO_Init+0x240>
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_GPIO_Init+0x240>
 8001286:	2300      	movs	r3, #0
 8001288:	69fa      	ldr	r2, [r7, #28]
 800128a:	f002 0203 	and.w	r2, r2, #3
 800128e:	0092      	lsls	r2, r2, #2
 8001290:	4093      	lsls	r3, r2
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001298:	4935      	ldr	r1, [pc, #212]	; (8001370 <HAL_GPIO_Init+0x328>)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a6:	4b3d      	ldr	r3, [pc, #244]	; (800139c <HAL_GPIO_Init+0x354>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ca:	4a34      	ldr	r2, [pc, #208]	; (800139c <HAL_GPIO_Init+0x354>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012d0:	4b32      	ldr	r3, [pc, #200]	; (800139c <HAL_GPIO_Init+0x354>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012f4:	4a29      	ldr	r2, [pc, #164]	; (800139c <HAL_GPIO_Init+0x354>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012fa:	4b28      	ldr	r3, [pc, #160]	; (800139c <HAL_GPIO_Init+0x354>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800131e:	4a1f      	ldr	r2, [pc, #124]	; (800139c <HAL_GPIO_Init+0x354>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <HAL_GPIO_Init+0x354>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001348:	4a14      	ldr	r2, [pc, #80]	; (800139c <HAL_GPIO_Init+0x354>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3301      	adds	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	2b0f      	cmp	r3, #15
 8001358:	f67f ae84 	bls.w	8001064 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	3724      	adds	r7, #36	; 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800
 8001370:	40013800 	.word	0x40013800
 8001374:	40020000 	.word	0x40020000
 8001378:	40020400 	.word	0x40020400
 800137c:	40020800 	.word	0x40020800
 8001380:	40020c00 	.word	0x40020c00
 8001384:	40021000 	.word	0x40021000
 8001388:	40021400 	.word	0x40021400
 800138c:	40021800 	.word	0x40021800
 8001390:	40021c00 	.word	0x40021c00
 8001394:	40022000 	.word	0x40022000
 8001398:	40022400 	.word	0x40022400
 800139c:	40013c00 	.word	0x40013c00

080013a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e12b      	b.n	800160a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d106      	bne.n	80013cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff fb08 	bl	80009dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2224      	movs	r2, #36	; 0x24
 80013d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0201 	bic.w	r2, r2, #1
 80013e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001402:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001404:	f000 ff30 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 8001408:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	4a81      	ldr	r2, [pc, #516]	; (8001614 <HAL_I2C_Init+0x274>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d807      	bhi.n	8001424 <HAL_I2C_Init+0x84>
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4a80      	ldr	r2, [pc, #512]	; (8001618 <HAL_I2C_Init+0x278>)
 8001418:	4293      	cmp	r3, r2
 800141a:	bf94      	ite	ls
 800141c:	2301      	movls	r3, #1
 800141e:	2300      	movhi	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	e006      	b.n	8001432 <HAL_I2C_Init+0x92>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4a7d      	ldr	r2, [pc, #500]	; (800161c <HAL_I2C_Init+0x27c>)
 8001428:	4293      	cmp	r3, r2
 800142a:	bf94      	ite	ls
 800142c:	2301      	movls	r3, #1
 800142e:	2300      	movhi	r3, #0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e0e7      	b.n	800160a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4a78      	ldr	r2, [pc, #480]	; (8001620 <HAL_I2C_Init+0x280>)
 800143e:	fba2 2303 	umull	r2, r3, r2, r3
 8001442:	0c9b      	lsrs	r3, r3, #18
 8001444:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68ba      	ldr	r2, [r7, #8]
 8001456:	430a      	orrs	r2, r1
 8001458:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4a6a      	ldr	r2, [pc, #424]	; (8001614 <HAL_I2C_Init+0x274>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d802      	bhi.n	8001474 <HAL_I2C_Init+0xd4>
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	3301      	adds	r3, #1
 8001472:	e009      	b.n	8001488 <HAL_I2C_Init+0xe8>
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800147a:	fb02 f303 	mul.w	r3, r2, r3
 800147e:	4a69      	ldr	r2, [pc, #420]	; (8001624 <HAL_I2C_Init+0x284>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	099b      	lsrs	r3, r3, #6
 8001486:	3301      	adds	r3, #1
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	430b      	orrs	r3, r1
 800148e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800149a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	495c      	ldr	r1, [pc, #368]	; (8001614 <HAL_I2C_Init+0x274>)
 80014a4:	428b      	cmp	r3, r1
 80014a6:	d819      	bhi.n	80014dc <HAL_I2C_Init+0x13c>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	1e59      	subs	r1, r3, #1
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80014b6:	1c59      	adds	r1, r3, #1
 80014b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014bc:	400b      	ands	r3, r1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d00a      	beq.n	80014d8 <HAL_I2C_Init+0x138>
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	1e59      	subs	r1, r3, #1
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80014d0:	3301      	adds	r3, #1
 80014d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014d6:	e051      	b.n	800157c <HAL_I2C_Init+0x1dc>
 80014d8:	2304      	movs	r3, #4
 80014da:	e04f      	b.n	800157c <HAL_I2C_Init+0x1dc>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d111      	bne.n	8001508 <HAL_I2C_Init+0x168>
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	1e58      	subs	r0, r3, #1
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6859      	ldr	r1, [r3, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	440b      	add	r3, r1
 80014f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014f6:	3301      	adds	r3, #1
 80014f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	bf0c      	ite	eq
 8001500:	2301      	moveq	r3, #1
 8001502:	2300      	movne	r3, #0
 8001504:	b2db      	uxtb	r3, r3
 8001506:	e012      	b.n	800152e <HAL_I2C_Init+0x18e>
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	1e58      	subs	r0, r3, #1
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6859      	ldr	r1, [r3, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	0099      	lsls	r1, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	fbb0 f3f3 	udiv	r3, r0, r3
 800151e:	3301      	adds	r3, #1
 8001520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001524:	2b00      	cmp	r3, #0
 8001526:	bf0c      	ite	eq
 8001528:	2301      	moveq	r3, #1
 800152a:	2300      	movne	r3, #0
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_I2C_Init+0x196>
 8001532:	2301      	movs	r3, #1
 8001534:	e022      	b.n	800157c <HAL_I2C_Init+0x1dc>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10e      	bne.n	800155c <HAL_I2C_Init+0x1bc>
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	1e58      	subs	r0, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6859      	ldr	r1, [r3, #4]
 8001546:	460b      	mov	r3, r1
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	440b      	add	r3, r1
 800154c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001550:	3301      	adds	r3, #1
 8001552:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800155a:	e00f      	b.n	800157c <HAL_I2C_Init+0x1dc>
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	1e58      	subs	r0, r3, #1
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6859      	ldr	r1, [r3, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	0099      	lsls	r1, r3, #2
 800156c:	440b      	add	r3, r1
 800156e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001572:	3301      	adds	r3, #1
 8001574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001578:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	6809      	ldr	r1, [r1, #0]
 8001580:	4313      	orrs	r3, r2
 8001582:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69da      	ldr	r2, [r3, #28]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6911      	ldr	r1, [r2, #16]
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	68d2      	ldr	r2, [r2, #12]
 80015b6:	4311      	orrs	r1, r2
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	430b      	orrs	r3, r1
 80015be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	695a      	ldr	r2, [r3, #20]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	430a      	orrs	r2, r1
 80015da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0201 	orr.w	r2, r2, #1
 80015ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2220      	movs	r2, #32
 80015f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	000186a0 	.word	0x000186a0
 8001618:	001e847f 	.word	0x001e847f
 800161c:	003d08ff 	.word	0x003d08ff
 8001620:	431bde83 	.word	0x431bde83
 8001624:	10624dd3 	.word	0x10624dd3

08001628 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af02      	add	r7, sp, #8
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	460b      	mov	r3, r1
 8001636:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001638:	f7ff fbf0 	bl	8000e1c <HAL_GetTick>
 800163c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800163e:	2301      	movs	r3, #1
 8001640:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b20      	cmp	r3, #32
 800164c:	f040 8111 	bne.w	8001872 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	2319      	movs	r3, #25
 8001656:	2201      	movs	r2, #1
 8001658:	4988      	ldr	r1, [pc, #544]	; (800187c <HAL_I2C_IsDeviceReady+0x254>)
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 f912 	bl	8001884 <I2C_WaitOnFlagUntilTimeout>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001666:	2302      	movs	r3, #2
 8001668:	e104      	b.n	8001874 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_I2C_IsDeviceReady+0x50>
 8001674:	2302      	movs	r3, #2
 8001676:	e0fd      	b.n	8001874 <HAL_I2C_IsDeviceReady+0x24c>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b01      	cmp	r3, #1
 800168c:	d007      	beq.n	800169e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f042 0201 	orr.w	r2, r2, #1
 800169c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2224      	movs	r2, #36	; 0x24
 80016b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2200      	movs	r2, #0
 80016ba:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4a70      	ldr	r2, [pc, #448]	; (8001880 <HAL_I2C_IsDeviceReady+0x258>)
 80016c0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016d0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	2200      	movs	r2, #0
 80016da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f000 f8d0 	bl	8001884 <I2C_WaitOnFlagUntilTimeout>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00d      	beq.n	8001706 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016f8:	d103      	bne.n	8001702 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001700:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e0b6      	b.n	8001874 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001706:	897b      	ldrh	r3, [r7, #10]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	461a      	mov	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001714:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001716:	f7ff fb81 	bl	8000e1c <HAL_GetTick>
 800171a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b02      	cmp	r3, #2
 8001728:	bf0c      	ite	eq
 800172a:	2301      	moveq	r3, #1
 800172c:	2300      	movne	r3, #0
 800172e:	b2db      	uxtb	r3, r3
 8001730:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001740:	bf0c      	ite	eq
 8001742:	2301      	moveq	r3, #1
 8001744:	2300      	movne	r3, #0
 8001746:	b2db      	uxtb	r3, r3
 8001748:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800174a:	e025      	b.n	8001798 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800174c:	f7ff fb66 	bl	8000e1c <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d302      	bcc.n	8001762 <HAL_I2C_IsDeviceReady+0x13a>
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d103      	bne.n	800176a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	22a0      	movs	r2, #160	; 0xa0
 8001766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b02      	cmp	r3, #2
 8001776:	bf0c      	ite	eq
 8001778:	2301      	moveq	r3, #1
 800177a:	2300      	movne	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800178e:	bf0c      	ite	eq
 8001790:	2301      	moveq	r3, #1
 8001792:	2300      	movne	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2ba0      	cmp	r3, #160	; 0xa0
 80017a2:	d005      	beq.n	80017b0 <HAL_I2C_IsDeviceReady+0x188>
 80017a4:	7dfb      	ldrb	r3, [r7, #23]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <HAL_I2C_IsDeviceReady+0x188>
 80017aa:	7dbb      	ldrb	r3, [r7, #22]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0cd      	beq.n	800174c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2220      	movs	r2, #32
 80017b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d129      	bne.n	800181a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017d4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	2319      	movs	r3, #25
 80017f2:	2201      	movs	r2, #1
 80017f4:	4921      	ldr	r1, [pc, #132]	; (800187c <HAL_I2C_IsDeviceReady+0x254>)
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f000 f844 	bl	8001884 <I2C_WaitOnFlagUntilTimeout>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e036      	b.n	8001874 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2220      	movs	r2, #32
 800180a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	e02c      	b.n	8001874 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001828:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001832:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2319      	movs	r3, #25
 800183a:	2201      	movs	r2, #1
 800183c:	490f      	ldr	r1, [pc, #60]	; (800187c <HAL_I2C_IsDeviceReady+0x254>)
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f000 f820 	bl	8001884 <I2C_WaitOnFlagUntilTimeout>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e012      	b.n	8001874 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	3301      	adds	r3, #1
 8001852:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	429a      	cmp	r2, r3
 800185a:	f4ff af32 	bcc.w	80016c2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2220      	movs	r2, #32
 8001862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001872:	2302      	movs	r3, #2
  }
}
 8001874:	4618      	mov	r0, r3
 8001876:	3720      	adds	r7, #32
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	00100002 	.word	0x00100002
 8001880:	ffff0000 	.word	0xffff0000

08001884 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	4613      	mov	r3, r2
 8001892:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001894:	e025      	b.n	80018e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800189c:	d021      	beq.n	80018e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800189e:	f7ff fabd 	bl	8000e1c <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d302      	bcc.n	80018b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d116      	bne.n	80018e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2220      	movs	r2, #32
 80018be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f043 0220 	orr.w	r2, r3, #32
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e023      	b.n	800192a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	0c1b      	lsrs	r3, r3, #16
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d10d      	bne.n	8001908 <I2C_WaitOnFlagUntilTimeout+0x84>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	43da      	mvns	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	4013      	ands	r3, r2
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	bf0c      	ite	eq
 80018fe:	2301      	moveq	r3, #1
 8001900:	2300      	movne	r3, #0
 8001902:	b2db      	uxtb	r3, r3
 8001904:	461a      	mov	r2, r3
 8001906:	e00c      	b.n	8001922 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	43da      	mvns	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	4013      	ands	r3, r2
 8001914:	b29b      	uxth	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	bf0c      	ite	eq
 800191a:	2301      	moveq	r3, #1
 800191c:	2300      	movne	r3, #0
 800191e:	b2db      	uxtb	r3, r3
 8001920:	461a      	mov	r2, r3
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	429a      	cmp	r2, r3
 8001926:	d0b6      	beq.n	8001896 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b20      	cmp	r3, #32
 8001946:	d129      	bne.n	800199c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2224      	movs	r2, #36	; 0x24
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0201 	bic.w	r2, r2, #1
 800195e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 0210 	bic.w	r2, r2, #16
 800196e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0201 	orr.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2220      	movs	r2, #32
 8001994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	e000      	b.n	800199e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800199c:	2302      	movs	r3, #2
  }
}
 800199e:	4618      	mov	r0, r3
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b085      	sub	sp, #20
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b20      	cmp	r3, #32
 80019c2:	d12a      	bne.n	8001a1a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2224      	movs	r2, #36	; 0x24
 80019c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0201 	bic.w	r2, r2, #1
 80019da:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80019e4:	89fb      	ldrh	r3, [r7, #14]
 80019e6:	f023 030f 	bic.w	r3, r3, #15
 80019ea:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	89fb      	ldrh	r3, [r7, #14]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	89fa      	ldrh	r2, [r7, #14]
 80019fc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f042 0201 	orr.w	r2, r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2220      	movs	r2, #32
 8001a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	e000      	b.n	8001a1c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8001a1a:	2302      	movs	r3, #2
  }
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e264      	b.n	8001f04 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d075      	beq.n	8001b32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a46:	4ba3      	ldr	r3, [pc, #652]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d00c      	beq.n	8001a6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a52:	4ba0      	ldr	r3, [pc, #640]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d112      	bne.n	8001a84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a5e:	4b9d      	ldr	r3, [pc, #628]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a6a:	d10b      	bne.n	8001a84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a6c:	4b99      	ldr	r3, [pc, #612]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d05b      	beq.n	8001b30 <HAL_RCC_OscConfig+0x108>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d157      	bne.n	8001b30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e23f      	b.n	8001f04 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a8c:	d106      	bne.n	8001a9c <HAL_RCC_OscConfig+0x74>
 8001a8e:	4b91      	ldr	r3, [pc, #580]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a90      	ldr	r2, [pc, #576]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e01d      	b.n	8001ad8 <HAL_RCC_OscConfig+0xb0>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x98>
 8001aa6:	4b8b      	ldr	r3, [pc, #556]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a8a      	ldr	r2, [pc, #552]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	4b88      	ldr	r3, [pc, #544]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a87      	ldr	r2, [pc, #540]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	e00b      	b.n	8001ad8 <HAL_RCC_OscConfig+0xb0>
 8001ac0:	4b84      	ldr	r3, [pc, #528]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a83      	ldr	r2, [pc, #524]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	4b81      	ldr	r3, [pc, #516]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a80      	ldr	r2, [pc, #512]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d013      	beq.n	8001b08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae0:	f7ff f99c 	bl	8000e1c <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ae8:	f7ff f998 	bl	8000e1c <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b64      	cmp	r3, #100	; 0x64
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e204      	b.n	8001f04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001afa:	4b76      	ldr	r3, [pc, #472]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0xc0>
 8001b06:	e014      	b.n	8001b32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b08:	f7ff f988 	bl	8000e1c <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b10:	f7ff f984 	bl	8000e1c <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b64      	cmp	r3, #100	; 0x64
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e1f0      	b.n	8001f04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b22:	4b6c      	ldr	r3, [pc, #432]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0xe8>
 8001b2e:	e000      	b.n	8001b32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d063      	beq.n	8001c06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b3e:	4b65      	ldr	r3, [pc, #404]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 030c 	and.w	r3, r3, #12
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00b      	beq.n	8001b62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b4a:	4b62      	ldr	r3, [pc, #392]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d11c      	bne.n	8001b90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b56:	4b5f      	ldr	r3, [pc, #380]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d116      	bne.n	8001b90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b62:	4b5c      	ldr	r3, [pc, #368]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d005      	beq.n	8001b7a <HAL_RCC_OscConfig+0x152>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d001      	beq.n	8001b7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e1c4      	b.n	8001f04 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7a:	4b56      	ldr	r3, [pc, #344]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	4952      	ldr	r1, [pc, #328]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8e:	e03a      	b.n	8001c06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d020      	beq.n	8001bda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b98:	4b4f      	ldr	r3, [pc, #316]	; (8001cd8 <HAL_RCC_OscConfig+0x2b0>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9e:	f7ff f93d 	bl	8000e1c <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ba6:	f7ff f939 	bl	8000e1c <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e1a5      	b.n	8001f04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb8:	4b46      	ldr	r3, [pc, #280]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0f0      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc4:	4b43      	ldr	r3, [pc, #268]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4940      	ldr	r1, [pc, #256]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	600b      	str	r3, [r1, #0]
 8001bd8:	e015      	b.n	8001c06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bda:	4b3f      	ldr	r3, [pc, #252]	; (8001cd8 <HAL_RCC_OscConfig+0x2b0>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be0:	f7ff f91c 	bl	8000e1c <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be8:	f7ff f918 	bl	8000e1c <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e184      	b.n	8001f04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bfa:	4b36      	ldr	r3, [pc, #216]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d030      	beq.n	8001c74 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d016      	beq.n	8001c48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c1a:	4b30      	ldr	r3, [pc, #192]	; (8001cdc <HAL_RCC_OscConfig+0x2b4>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c20:	f7ff f8fc 	bl	8000e1c <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c28:	f7ff f8f8 	bl	8000e1c <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e164      	b.n	8001f04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c3a:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x200>
 8001c46:	e015      	b.n	8001c74 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c48:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <HAL_RCC_OscConfig+0x2b4>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c4e:	f7ff f8e5 	bl	8000e1c <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c56:	f7ff f8e1 	bl	8000e1c <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e14d      	b.n	8001f04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c68:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1f0      	bne.n	8001c56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80a0 	beq.w	8001dc2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c86:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10f      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	4b0f      	ldr	r3, [pc, #60]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	4a0e      	ldr	r2, [pc, #56]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <HAL_RCC_OscConfig+0x2ac>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <HAL_RCC_OscConfig+0x2b8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d121      	bne.n	8001d02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cbe:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <HAL_RCC_OscConfig+0x2b8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a07      	ldr	r2, [pc, #28]	; (8001ce0 <HAL_RCC_OscConfig+0x2b8>)
 8001cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cca:	f7ff f8a7 	bl	8000e1c <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	e011      	b.n	8001cf6 <HAL_RCC_OscConfig+0x2ce>
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	42470000 	.word	0x42470000
 8001cdc:	42470e80 	.word	0x42470e80
 8001ce0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce4:	f7ff f89a 	bl	8000e1c <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e106      	b.n	8001f04 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf6:	4b85      	ldr	r3, [pc, #532]	; (8001f0c <HAL_RCC_OscConfig+0x4e4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d106      	bne.n	8001d18 <HAL_RCC_OscConfig+0x2f0>
 8001d0a:	4b81      	ldr	r3, [pc, #516]	; (8001f10 <HAL_RCC_OscConfig+0x4e8>)
 8001d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0e:	4a80      	ldr	r2, [pc, #512]	; (8001f10 <HAL_RCC_OscConfig+0x4e8>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6713      	str	r3, [r2, #112]	; 0x70
 8001d16:	e01c      	b.n	8001d52 <HAL_RCC_OscConfig+0x32a>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b05      	cmp	r3, #5
 8001d1e:	d10c      	bne.n	8001d3a <HAL_RCC_OscConfig+0x312>
 8001d20:	4b7b      	ldr	r3, [pc, #492]	; (8001f10 <HAL_RCC_OscConfig+0x4e8>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d24:	4a7a      	ldr	r2, [pc, #488]	; (8001f10 <HAL_RCC_OscConfig+0x4e8>)
 8001d26:	f043 0304 	orr.w	r3, r3, #4
 8001d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d2c:	4b78      	ldr	r3, [pc, #480]	; (8001f10 <HAL_RCC_OscConfig+0x4e8>)
 8001d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d30:	4a77      	ldr	r2, [pc, #476]	; (8001f10 <HAL_RCC_OscConfig+0x4e8>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	6713      	str	r3, [r2, #112]	; 0x70
 8001d38:	e00b      	b.n	8001d52 <HAL_RCC_OscConfig+0x32a>
 8001d3a:	4b75      	ldr	r3, [pc, #468]	; (8001f10 <HAL_RCC_OscConfig+0x4e8>)
 8001d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3e:	4a74      	ldr	r2, [pc, #464]	; (8001f10 <HAL_RCC_OscConfig+0x4e8>)
 8001d40:	f023 0301 	bic.w	r3, r3, #1
 8001d44:	6713      	str	r3, [r2, #112]	; 0x70
 8001d46:	4b72      	ldr	r3, [pc, #456]	; (8001f10 <HAL_RCC_OscConfig+0x4e8>)
 8001d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4a:	4a71      	ldr	r2, [pc, #452]	; (8001f10 <HAL_RCC_OscConfig+0x4e8>)
 8001d4c:	f023 0304 	bic.w	r3, r3, #4
 8001d50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d015      	beq.n	8001d86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5a:	f7ff f85f 	bl	8000e1c <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d60:	e00a      	b.n	8001d78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d62:	f7ff f85b 	bl	8000e1c <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e0c5      	b.n	8001f04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d78:	4b65      	ldr	r3, [pc, #404]	; (8001f10 <HAL_RCC_OscConfig+0x4e8>)
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ee      	beq.n	8001d62 <HAL_RCC_OscConfig+0x33a>
 8001d84:	e014      	b.n	8001db0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d86:	f7ff f849 	bl	8000e1c <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d8c:	e00a      	b.n	8001da4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d8e:	f7ff f845 	bl	8000e1c <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d901      	bls.n	8001da4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e0af      	b.n	8001f04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da4:	4b5a      	ldr	r3, [pc, #360]	; (8001f10 <HAL_RCC_OscConfig+0x4e8>)
 8001da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1ee      	bne.n	8001d8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001db0:	7dfb      	ldrb	r3, [r7, #23]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d105      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db6:	4b56      	ldr	r3, [pc, #344]	; (8001f10 <HAL_RCC_OscConfig+0x4e8>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	4a55      	ldr	r2, [pc, #340]	; (8001f10 <HAL_RCC_OscConfig+0x4e8>)
 8001dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 809b 	beq.w	8001f02 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dcc:	4b50      	ldr	r3, [pc, #320]	; (8001f10 <HAL_RCC_OscConfig+0x4e8>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 030c 	and.w	r3, r3, #12
 8001dd4:	2b08      	cmp	r3, #8
 8001dd6:	d05c      	beq.n	8001e92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d141      	bne.n	8001e64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de0:	4b4c      	ldr	r3, [pc, #304]	; (8001f14 <HAL_RCC_OscConfig+0x4ec>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de6:	f7ff f819 	bl	8000e1c <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dec:	e008      	b.n	8001e00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dee:	f7ff f815 	bl	8000e1c <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e081      	b.n	8001f04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e00:	4b43      	ldr	r3, [pc, #268]	; (8001f10 <HAL_RCC_OscConfig+0x4e8>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d1f0      	bne.n	8001dee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	69da      	ldr	r2, [r3, #28]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	431a      	orrs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	019b      	lsls	r3, r3, #6
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e22:	085b      	lsrs	r3, r3, #1
 8001e24:	3b01      	subs	r3, #1
 8001e26:	041b      	lsls	r3, r3, #16
 8001e28:	431a      	orrs	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2e:	061b      	lsls	r3, r3, #24
 8001e30:	4937      	ldr	r1, [pc, #220]	; (8001f10 <HAL_RCC_OscConfig+0x4e8>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e36:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <HAL_RCC_OscConfig+0x4ec>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7fe ffee 	bl	8000e1c <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e44:	f7fe ffea 	bl	8000e1c <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e056      	b.n	8001f04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e56:	4b2e      	ldr	r3, [pc, #184]	; (8001f10 <HAL_RCC_OscConfig+0x4e8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x41c>
 8001e62:	e04e      	b.n	8001f02 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e64:	4b2b      	ldr	r3, [pc, #172]	; (8001f14 <HAL_RCC_OscConfig+0x4ec>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6a:	f7fe ffd7 	bl	8000e1c <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e72:	f7fe ffd3 	bl	8000e1c <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e03f      	b.n	8001f04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e84:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <HAL_RCC_OscConfig+0x4e8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f0      	bne.n	8001e72 <HAL_RCC_OscConfig+0x44a>
 8001e90:	e037      	b.n	8001f02 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d101      	bne.n	8001e9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e032      	b.n	8001f04 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e9e:	4b1c      	ldr	r3, [pc, #112]	; (8001f10 <HAL_RCC_OscConfig+0x4e8>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d028      	beq.n	8001efe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d121      	bne.n	8001efe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d11a      	bne.n	8001efe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ece:	4013      	ands	r3, r2
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ed4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d111      	bne.n	8001efe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	085b      	lsrs	r3, r3, #1
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d107      	bne.n	8001efe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d001      	beq.n	8001f02 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40007000 	.word	0x40007000
 8001f10:	40023800 	.word	0x40023800
 8001f14:	42470060 	.word	0x42470060

08001f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0cc      	b.n	80020c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b68      	ldr	r3, [pc, #416]	; (80020d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 030f 	and.w	r3, r3, #15
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d90c      	bls.n	8001f54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b65      	ldr	r3, [pc, #404]	; (80020d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f42:	4b63      	ldr	r3, [pc, #396]	; (80020d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d001      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0b8      	b.n	80020c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d020      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f6c:	4b59      	ldr	r3, [pc, #356]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	4a58      	ldr	r2, [pc, #352]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f84:	4b53      	ldr	r3, [pc, #332]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	4a52      	ldr	r2, [pc, #328]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f90:	4b50      	ldr	r3, [pc, #320]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	494d      	ldr	r1, [pc, #308]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d044      	beq.n	8002038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d107      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb6:	4b47      	ldr	r3, [pc, #284]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d119      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e07f      	b.n	80020c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d003      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d107      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fd6:	4b3f      	ldr	r3, [pc, #252]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d109      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e06f      	b.n	80020c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe6:	4b3b      	ldr	r3, [pc, #236]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e067      	b.n	80020c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ff6:	4b37      	ldr	r3, [pc, #220]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f023 0203 	bic.w	r2, r3, #3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4934      	ldr	r1, [pc, #208]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002004:	4313      	orrs	r3, r2
 8002006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002008:	f7fe ff08 	bl	8000e1c <HAL_GetTick>
 800200c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200e:	e00a      	b.n	8002026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002010:	f7fe ff04 	bl	8000e1c <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	f241 3288 	movw	r2, #5000	; 0x1388
 800201e:	4293      	cmp	r3, r2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e04f      	b.n	80020c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002026:	4b2b      	ldr	r3, [pc, #172]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 020c 	and.w	r2, r3, #12
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	429a      	cmp	r2, r3
 8002036:	d1eb      	bne.n	8002010 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002038:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <HAL_RCC_ClockConfig+0x1b8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 030f 	and.w	r3, r3, #15
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d20c      	bcs.n	8002060 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002046:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800204e:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	429a      	cmp	r2, r3
 800205a:	d001      	beq.n	8002060 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e032      	b.n	80020c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d008      	beq.n	800207e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	4916      	ldr	r1, [pc, #88]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	4313      	orrs	r3, r2
 800207c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d009      	beq.n	800209e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800208a:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	490e      	ldr	r1, [pc, #56]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	4313      	orrs	r3, r2
 800209c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800209e:	f000 f821 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 80020a2:	4602      	mov	r2, r0
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	490a      	ldr	r1, [pc, #40]	; (80020d8 <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	5ccb      	ldrb	r3, [r1, r3]
 80020b2:	fa22 f303 	lsr.w	r3, r2, r3
 80020b6:	4a09      	ldr	r2, [pc, #36]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80020ba:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <HAL_RCC_ClockConfig+0x1c8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fe68 	bl	8000d94 <HAL_InitTick>

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40023c00 	.word	0x40023c00
 80020d4:	40023800 	.word	0x40023800
 80020d8:	080031c4 	.word	0x080031c4
 80020dc:	2000002c 	.word	0x2000002c
 80020e0:	20000030 	.word	0x20000030

080020e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e4:	b5b0      	push	{r4, r5, r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80020ea:	2100      	movs	r1, #0
 80020ec:	6079      	str	r1, [r7, #4]
 80020ee:	2100      	movs	r1, #0
 80020f0:	60f9      	str	r1, [r7, #12]
 80020f2:	2100      	movs	r1, #0
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80020f6:	2100      	movs	r1, #0
 80020f8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020fa:	4952      	ldr	r1, [pc, #328]	; (8002244 <HAL_RCC_GetSysClockFreq+0x160>)
 80020fc:	6889      	ldr	r1, [r1, #8]
 80020fe:	f001 010c 	and.w	r1, r1, #12
 8002102:	2908      	cmp	r1, #8
 8002104:	d00d      	beq.n	8002122 <HAL_RCC_GetSysClockFreq+0x3e>
 8002106:	2908      	cmp	r1, #8
 8002108:	f200 8094 	bhi.w	8002234 <HAL_RCC_GetSysClockFreq+0x150>
 800210c:	2900      	cmp	r1, #0
 800210e:	d002      	beq.n	8002116 <HAL_RCC_GetSysClockFreq+0x32>
 8002110:	2904      	cmp	r1, #4
 8002112:	d003      	beq.n	800211c <HAL_RCC_GetSysClockFreq+0x38>
 8002114:	e08e      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002116:	4b4c      	ldr	r3, [pc, #304]	; (8002248 <HAL_RCC_GetSysClockFreq+0x164>)
 8002118:	60bb      	str	r3, [r7, #8]
       break;
 800211a:	e08e      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800211c:	4b4b      	ldr	r3, [pc, #300]	; (800224c <HAL_RCC_GetSysClockFreq+0x168>)
 800211e:	60bb      	str	r3, [r7, #8]
      break;
 8002120:	e08b      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002122:	4948      	ldr	r1, [pc, #288]	; (8002244 <HAL_RCC_GetSysClockFreq+0x160>)
 8002124:	6849      	ldr	r1, [r1, #4]
 8002126:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800212a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800212c:	4945      	ldr	r1, [pc, #276]	; (8002244 <HAL_RCC_GetSysClockFreq+0x160>)
 800212e:	6849      	ldr	r1, [r1, #4]
 8002130:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002134:	2900      	cmp	r1, #0
 8002136:	d024      	beq.n	8002182 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002138:	4942      	ldr	r1, [pc, #264]	; (8002244 <HAL_RCC_GetSysClockFreq+0x160>)
 800213a:	6849      	ldr	r1, [r1, #4]
 800213c:	0989      	lsrs	r1, r1, #6
 800213e:	4608      	mov	r0, r1
 8002140:	f04f 0100 	mov.w	r1, #0
 8002144:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002148:	f04f 0500 	mov.w	r5, #0
 800214c:	ea00 0204 	and.w	r2, r0, r4
 8002150:	ea01 0305 	and.w	r3, r1, r5
 8002154:	493d      	ldr	r1, [pc, #244]	; (800224c <HAL_RCC_GetSysClockFreq+0x168>)
 8002156:	fb01 f003 	mul.w	r0, r1, r3
 800215a:	2100      	movs	r1, #0
 800215c:	fb01 f102 	mul.w	r1, r1, r2
 8002160:	1844      	adds	r4, r0, r1
 8002162:	493a      	ldr	r1, [pc, #232]	; (800224c <HAL_RCC_GetSysClockFreq+0x168>)
 8002164:	fba2 0101 	umull	r0, r1, r2, r1
 8002168:	1863      	adds	r3, r4, r1
 800216a:	4619      	mov	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	461a      	mov	r2, r3
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	f7fe f88c 	bl	8000290 <__aeabi_uldivmod>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4613      	mov	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	e04a      	b.n	8002218 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002182:	4b30      	ldr	r3, [pc, #192]	; (8002244 <HAL_RCC_GetSysClockFreq+0x160>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	099b      	lsrs	r3, r3, #6
 8002188:	461a      	mov	r2, r3
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002192:	f04f 0100 	mov.w	r1, #0
 8002196:	ea02 0400 	and.w	r4, r2, r0
 800219a:	ea03 0501 	and.w	r5, r3, r1
 800219e:	4620      	mov	r0, r4
 80021a0:	4629      	mov	r1, r5
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	014b      	lsls	r3, r1, #5
 80021ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021b0:	0142      	lsls	r2, r0, #5
 80021b2:	4610      	mov	r0, r2
 80021b4:	4619      	mov	r1, r3
 80021b6:	1b00      	subs	r0, r0, r4
 80021b8:	eb61 0105 	sbc.w	r1, r1, r5
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	018b      	lsls	r3, r1, #6
 80021c6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021ca:	0182      	lsls	r2, r0, #6
 80021cc:	1a12      	subs	r2, r2, r0
 80021ce:	eb63 0301 	sbc.w	r3, r3, r1
 80021d2:	f04f 0000 	mov.w	r0, #0
 80021d6:	f04f 0100 	mov.w	r1, #0
 80021da:	00d9      	lsls	r1, r3, #3
 80021dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021e0:	00d0      	lsls	r0, r2, #3
 80021e2:	4602      	mov	r2, r0
 80021e4:	460b      	mov	r3, r1
 80021e6:	1912      	adds	r2, r2, r4
 80021e8:	eb45 0303 	adc.w	r3, r5, r3
 80021ec:	f04f 0000 	mov.w	r0, #0
 80021f0:	f04f 0100 	mov.w	r1, #0
 80021f4:	0299      	lsls	r1, r3, #10
 80021f6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80021fa:	0290      	lsls	r0, r2, #10
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4610      	mov	r0, r2
 8002202:	4619      	mov	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	461a      	mov	r2, r3
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	f7fe f840 	bl	8000290 <__aeabi_uldivmod>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4613      	mov	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002218:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <HAL_RCC_GetSysClockFreq+0x160>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	0c1b      	lsrs	r3, r3, #16
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	3301      	adds	r3, #1
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002230:	60bb      	str	r3, [r7, #8]
      break;
 8002232:	e002      	b.n	800223a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002234:	4b04      	ldr	r3, [pc, #16]	; (8002248 <HAL_RCC_GetSysClockFreq+0x164>)
 8002236:	60bb      	str	r3, [r7, #8]
      break;
 8002238:	bf00      	nop
    }
  }
  return sysclockfreq;
 800223a:	68bb      	ldr	r3, [r7, #8]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bdb0      	pop	{r4, r5, r7, pc}
 8002244:	40023800 	.word	0x40023800
 8002248:	00f42400 	.word	0x00f42400
 800224c:	017d7840 	.word	0x017d7840

08002250 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <HAL_RCC_GetHCLKFreq+0x14>)
 8002256:	681b      	ldr	r3, [r3, #0]
}
 8002258:	4618      	mov	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	2000002c 	.word	0x2000002c

08002268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800226c:	f7ff fff0 	bl	8002250 <HAL_RCC_GetHCLKFreq>
 8002270:	4602      	mov	r2, r0
 8002272:	4b05      	ldr	r3, [pc, #20]	; (8002288 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	0a9b      	lsrs	r3, r3, #10
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	4903      	ldr	r1, [pc, #12]	; (800228c <HAL_RCC_GetPCLK1Freq+0x24>)
 800227e:	5ccb      	ldrb	r3, [r1, r3]
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002284:	4618      	mov	r0, r3
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40023800 	.word	0x40023800
 800228c:	080031d4 	.word	0x080031d4

08002290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002294:	f7ff ffdc 	bl	8002250 <HAL_RCC_GetHCLKFreq>
 8002298:	4602      	mov	r2, r0
 800229a:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	0b5b      	lsrs	r3, r3, #13
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	4903      	ldr	r1, [pc, #12]	; (80022b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022a6:	5ccb      	ldrb	r3, [r1, r3]
 80022a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40023800 	.word	0x40023800
 80022b4:	080031d4 	.word	0x080031d4

080022b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e03f      	b.n	800234a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d106      	bne.n	80022e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7fe fc52 	bl	8000b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2224      	movs	r2, #36	; 0x24
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 f929 	bl	8002554 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002310:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	695a      	ldr	r2, [r3, #20]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002320:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002330:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b08a      	sub	sp, #40	; 0x28
 8002356:	af02      	add	r7, sp, #8
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	603b      	str	r3, [r7, #0]
 800235e:	4613      	mov	r3, r2
 8002360:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b20      	cmp	r3, #32
 8002370:	d17c      	bne.n	800246c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <HAL_UART_Transmit+0x2c>
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e075      	b.n	800246e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_UART_Transmit+0x3e>
 800238c:	2302      	movs	r3, #2
 800238e:	e06e      	b.n	800246e <HAL_UART_Transmit+0x11c>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2221      	movs	r2, #33	; 0x21
 80023a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023a6:	f7fe fd39 	bl	8000e1c <HAL_GetTick>
 80023aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	88fa      	ldrh	r2, [r7, #6]
 80023b0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	88fa      	ldrh	r2, [r7, #6]
 80023b6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c0:	d108      	bne.n	80023d4 <HAL_UART_Transmit+0x82>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d104      	bne.n	80023d4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	e003      	b.n	80023dc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023e4:	e02a      	b.n	800243c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2200      	movs	r2, #0
 80023ee:	2180      	movs	r1, #128	; 0x80
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f840 	bl	8002476 <UART_WaitOnFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e036      	b.n	800246e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10b      	bne.n	800241e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002414:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	3302      	adds	r3, #2
 800241a:	61bb      	str	r3, [r7, #24]
 800241c:	e007      	b.n	800242e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	781a      	ldrb	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	3301      	adds	r3, #1
 800242c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002432:	b29b      	uxth	r3, r3
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002440:	b29b      	uxth	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1cf      	bne.n	80023e6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2200      	movs	r2, #0
 800244e:	2140      	movs	r1, #64	; 0x40
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 f810 	bl	8002476 <UART_WaitOnFlagUntilTimeout>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e006      	b.n	800246e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2220      	movs	r2, #32
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	e000      	b.n	800246e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800246c:	2302      	movs	r3, #2
  }
}
 800246e:	4618      	mov	r0, r3
 8002470:	3720      	adds	r7, #32
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b090      	sub	sp, #64	; 0x40
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	603b      	str	r3, [r7, #0]
 8002482:	4613      	mov	r3, r2
 8002484:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002486:	e050      	b.n	800252a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800248a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248e:	d04c      	beq.n	800252a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002492:	2b00      	cmp	r3, #0
 8002494:	d007      	beq.n	80024a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002496:	f7fe fcc1 	bl	8000e1c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d241      	bcs.n	800252a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	330c      	adds	r3, #12
 80024ac:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b0:	e853 3f00 	ldrex	r3, [r3]
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	330c      	adds	r3, #12
 80024c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024c6:	637a      	str	r2, [r7, #52]	; 0x34
 80024c8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024ce:	e841 2300 	strex	r3, r2, [r1]
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80024d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1e5      	bne.n	80024a6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	3314      	adds	r3, #20
 80024e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	e853 3f00 	ldrex	r3, [r3]
 80024e8:	613b      	str	r3, [r7, #16]
   return(result);
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	f023 0301 	bic.w	r3, r3, #1
 80024f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	3314      	adds	r3, #20
 80024f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024fa:	623a      	str	r2, [r7, #32]
 80024fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024fe:	69f9      	ldr	r1, [r7, #28]
 8002500:	6a3a      	ldr	r2, [r7, #32]
 8002502:	e841 2300 	strex	r3, r2, [r1]
 8002506:	61bb      	str	r3, [r7, #24]
   return(result);
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1e5      	bne.n	80024da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2220      	movs	r2, #32
 8002512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e00f      	b.n	800254a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	4013      	ands	r3, r2
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	429a      	cmp	r2, r3
 8002538:	bf0c      	ite	eq
 800253a:	2301      	moveq	r3, #1
 800253c:	2300      	movne	r3, #0
 800253e:	b2db      	uxtb	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	429a      	cmp	r2, r3
 8002546:	d09f      	beq.n	8002488 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3740      	adds	r7, #64	; 0x40
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002558:	b09f      	sub	sp, #124	; 0x7c
 800255a:	af00      	add	r7, sp, #0
 800255c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800255e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800256a:	68d9      	ldr	r1, [r3, #12]
 800256c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	ea40 0301 	orr.w	r3, r0, r1
 8002574:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	431a      	orrs	r2, r3
 8002580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	431a      	orrs	r2, r3
 8002586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	4313      	orrs	r3, r2
 800258c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800258e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002598:	f021 010c 	bic.w	r1, r1, #12
 800259c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025a2:	430b      	orrs	r3, r1
 80025a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80025b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b2:	6999      	ldr	r1, [r3, #24]
 80025b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	ea40 0301 	orr.w	r3, r0, r1
 80025bc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80025be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	4bc5      	ldr	r3, [pc, #788]	; (80028d8 <UART_SetConfig+0x384>)
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d004      	beq.n	80025d2 <UART_SetConfig+0x7e>
 80025c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4bc3      	ldr	r3, [pc, #780]	; (80028dc <UART_SetConfig+0x388>)
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d103      	bne.n	80025da <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80025d2:	f7ff fe5d 	bl	8002290 <HAL_RCC_GetPCLK2Freq>
 80025d6:	6778      	str	r0, [r7, #116]	; 0x74
 80025d8:	e002      	b.n	80025e0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80025da:	f7ff fe45 	bl	8002268 <HAL_RCC_GetPCLK1Freq>
 80025de:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80025e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025e8:	f040 80b6 	bne.w	8002758 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ee:	461c      	mov	r4, r3
 80025f0:	f04f 0500 	mov.w	r5, #0
 80025f4:	4622      	mov	r2, r4
 80025f6:	462b      	mov	r3, r5
 80025f8:	1891      	adds	r1, r2, r2
 80025fa:	6439      	str	r1, [r7, #64]	; 0x40
 80025fc:	415b      	adcs	r3, r3
 80025fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002600:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002604:	1912      	adds	r2, r2, r4
 8002606:	eb45 0303 	adc.w	r3, r5, r3
 800260a:	f04f 0000 	mov.w	r0, #0
 800260e:	f04f 0100 	mov.w	r1, #0
 8002612:	00d9      	lsls	r1, r3, #3
 8002614:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002618:	00d0      	lsls	r0, r2, #3
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	1911      	adds	r1, r2, r4
 8002620:	6639      	str	r1, [r7, #96]	; 0x60
 8002622:	416b      	adcs	r3, r5
 8002624:	667b      	str	r3, [r7, #100]	; 0x64
 8002626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	461a      	mov	r2, r3
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	1891      	adds	r1, r2, r2
 8002632:	63b9      	str	r1, [r7, #56]	; 0x38
 8002634:	415b      	adcs	r3, r3
 8002636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002638:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800263c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002640:	f7fd fe26 	bl	8000290 <__aeabi_uldivmod>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4ba5      	ldr	r3, [pc, #660]	; (80028e0 <UART_SetConfig+0x38c>)
 800264a:	fba3 2302 	umull	r2, r3, r3, r2
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	011e      	lsls	r6, r3, #4
 8002652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002654:	461c      	mov	r4, r3
 8002656:	f04f 0500 	mov.w	r5, #0
 800265a:	4622      	mov	r2, r4
 800265c:	462b      	mov	r3, r5
 800265e:	1891      	adds	r1, r2, r2
 8002660:	6339      	str	r1, [r7, #48]	; 0x30
 8002662:	415b      	adcs	r3, r3
 8002664:	637b      	str	r3, [r7, #52]	; 0x34
 8002666:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800266a:	1912      	adds	r2, r2, r4
 800266c:	eb45 0303 	adc.w	r3, r5, r3
 8002670:	f04f 0000 	mov.w	r0, #0
 8002674:	f04f 0100 	mov.w	r1, #0
 8002678:	00d9      	lsls	r1, r3, #3
 800267a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800267e:	00d0      	lsls	r0, r2, #3
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	1911      	adds	r1, r2, r4
 8002686:	65b9      	str	r1, [r7, #88]	; 0x58
 8002688:	416b      	adcs	r3, r5
 800268a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800268c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	461a      	mov	r2, r3
 8002692:	f04f 0300 	mov.w	r3, #0
 8002696:	1891      	adds	r1, r2, r2
 8002698:	62b9      	str	r1, [r7, #40]	; 0x28
 800269a:	415b      	adcs	r3, r3
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800269e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80026a2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80026a6:	f7fd fdf3 	bl	8000290 <__aeabi_uldivmod>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4b8c      	ldr	r3, [pc, #560]	; (80028e0 <UART_SetConfig+0x38c>)
 80026b0:	fba3 1302 	umull	r1, r3, r3, r2
 80026b4:	095b      	lsrs	r3, r3, #5
 80026b6:	2164      	movs	r1, #100	; 0x64
 80026b8:	fb01 f303 	mul.w	r3, r1, r3
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	3332      	adds	r3, #50	; 0x32
 80026c2:	4a87      	ldr	r2, [pc, #540]	; (80028e0 <UART_SetConfig+0x38c>)
 80026c4:	fba2 2303 	umull	r2, r3, r2, r3
 80026c8:	095b      	lsrs	r3, r3, #5
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80026d0:	441e      	add	r6, r3
 80026d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026d4:	4618      	mov	r0, r3
 80026d6:	f04f 0100 	mov.w	r1, #0
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	1894      	adds	r4, r2, r2
 80026e0:	623c      	str	r4, [r7, #32]
 80026e2:	415b      	adcs	r3, r3
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
 80026e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026ea:	1812      	adds	r2, r2, r0
 80026ec:	eb41 0303 	adc.w	r3, r1, r3
 80026f0:	f04f 0400 	mov.w	r4, #0
 80026f4:	f04f 0500 	mov.w	r5, #0
 80026f8:	00dd      	lsls	r5, r3, #3
 80026fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80026fe:	00d4      	lsls	r4, r2, #3
 8002700:	4622      	mov	r2, r4
 8002702:	462b      	mov	r3, r5
 8002704:	1814      	adds	r4, r2, r0
 8002706:	653c      	str	r4, [r7, #80]	; 0x50
 8002708:	414b      	adcs	r3, r1
 800270a:	657b      	str	r3, [r7, #84]	; 0x54
 800270c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	461a      	mov	r2, r3
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	1891      	adds	r1, r2, r2
 8002718:	61b9      	str	r1, [r7, #24]
 800271a:	415b      	adcs	r3, r3
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002722:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002726:	f7fd fdb3 	bl	8000290 <__aeabi_uldivmod>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4b6c      	ldr	r3, [pc, #432]	; (80028e0 <UART_SetConfig+0x38c>)
 8002730:	fba3 1302 	umull	r1, r3, r3, r2
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	2164      	movs	r1, #100	; 0x64
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	3332      	adds	r3, #50	; 0x32
 8002742:	4a67      	ldr	r2, [pc, #412]	; (80028e0 <UART_SetConfig+0x38c>)
 8002744:	fba2 2303 	umull	r2, r3, r2, r3
 8002748:	095b      	lsrs	r3, r3, #5
 800274a:	f003 0207 	and.w	r2, r3, #7
 800274e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4432      	add	r2, r6
 8002754:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002756:	e0b9      	b.n	80028cc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002758:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800275a:	461c      	mov	r4, r3
 800275c:	f04f 0500 	mov.w	r5, #0
 8002760:	4622      	mov	r2, r4
 8002762:	462b      	mov	r3, r5
 8002764:	1891      	adds	r1, r2, r2
 8002766:	6139      	str	r1, [r7, #16]
 8002768:	415b      	adcs	r3, r3
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002770:	1912      	adds	r2, r2, r4
 8002772:	eb45 0303 	adc.w	r3, r5, r3
 8002776:	f04f 0000 	mov.w	r0, #0
 800277a:	f04f 0100 	mov.w	r1, #0
 800277e:	00d9      	lsls	r1, r3, #3
 8002780:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002784:	00d0      	lsls	r0, r2, #3
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	eb12 0804 	adds.w	r8, r2, r4
 800278e:	eb43 0905 	adc.w	r9, r3, r5
 8002792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	4618      	mov	r0, r3
 8002798:	f04f 0100 	mov.w	r1, #0
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	f04f 0300 	mov.w	r3, #0
 80027a4:	008b      	lsls	r3, r1, #2
 80027a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80027aa:	0082      	lsls	r2, r0, #2
 80027ac:	4640      	mov	r0, r8
 80027ae:	4649      	mov	r1, r9
 80027b0:	f7fd fd6e 	bl	8000290 <__aeabi_uldivmod>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4b49      	ldr	r3, [pc, #292]	; (80028e0 <UART_SetConfig+0x38c>)
 80027ba:	fba3 2302 	umull	r2, r3, r3, r2
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	011e      	lsls	r6, r3, #4
 80027c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027c4:	4618      	mov	r0, r3
 80027c6:	f04f 0100 	mov.w	r1, #0
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	1894      	adds	r4, r2, r2
 80027d0:	60bc      	str	r4, [r7, #8]
 80027d2:	415b      	adcs	r3, r3
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027da:	1812      	adds	r2, r2, r0
 80027dc:	eb41 0303 	adc.w	r3, r1, r3
 80027e0:	f04f 0400 	mov.w	r4, #0
 80027e4:	f04f 0500 	mov.w	r5, #0
 80027e8:	00dd      	lsls	r5, r3, #3
 80027ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80027ee:	00d4      	lsls	r4, r2, #3
 80027f0:	4622      	mov	r2, r4
 80027f2:	462b      	mov	r3, r5
 80027f4:	1814      	adds	r4, r2, r0
 80027f6:	64bc      	str	r4, [r7, #72]	; 0x48
 80027f8:	414b      	adcs	r3, r1
 80027fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4618      	mov	r0, r3
 8002802:	f04f 0100 	mov.w	r1, #0
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	008b      	lsls	r3, r1, #2
 8002810:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002814:	0082      	lsls	r2, r0, #2
 8002816:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800281a:	f7fd fd39 	bl	8000290 <__aeabi_uldivmod>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4b2f      	ldr	r3, [pc, #188]	; (80028e0 <UART_SetConfig+0x38c>)
 8002824:	fba3 1302 	umull	r1, r3, r3, r2
 8002828:	095b      	lsrs	r3, r3, #5
 800282a:	2164      	movs	r1, #100	; 0x64
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	3332      	adds	r3, #50	; 0x32
 8002836:	4a2a      	ldr	r2, [pc, #168]	; (80028e0 <UART_SetConfig+0x38c>)
 8002838:	fba2 2303 	umull	r2, r3, r2, r3
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002842:	441e      	add	r6, r3
 8002844:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002846:	4618      	mov	r0, r3
 8002848:	f04f 0100 	mov.w	r1, #0
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	1894      	adds	r4, r2, r2
 8002852:	603c      	str	r4, [r7, #0]
 8002854:	415b      	adcs	r3, r3
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800285c:	1812      	adds	r2, r2, r0
 800285e:	eb41 0303 	adc.w	r3, r1, r3
 8002862:	f04f 0400 	mov.w	r4, #0
 8002866:	f04f 0500 	mov.w	r5, #0
 800286a:	00dd      	lsls	r5, r3, #3
 800286c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002870:	00d4      	lsls	r4, r2, #3
 8002872:	4622      	mov	r2, r4
 8002874:	462b      	mov	r3, r5
 8002876:	eb12 0a00 	adds.w	sl, r2, r0
 800287a:	eb43 0b01 	adc.w	fp, r3, r1
 800287e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	4618      	mov	r0, r3
 8002884:	f04f 0100 	mov.w	r1, #0
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	008b      	lsls	r3, r1, #2
 8002892:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002896:	0082      	lsls	r2, r0, #2
 8002898:	4650      	mov	r0, sl
 800289a:	4659      	mov	r1, fp
 800289c:	f7fd fcf8 	bl	8000290 <__aeabi_uldivmod>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <UART_SetConfig+0x38c>)
 80028a6:	fba3 1302 	umull	r1, r3, r3, r2
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	2164      	movs	r1, #100	; 0x64
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	3332      	adds	r3, #50	; 0x32
 80028b8:	4a09      	ldr	r2, [pc, #36]	; (80028e0 <UART_SetConfig+0x38c>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	095b      	lsrs	r3, r3, #5
 80028c0:	f003 020f 	and.w	r2, r3, #15
 80028c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4432      	add	r2, r6
 80028ca:	609a      	str	r2, [r3, #8]
}
 80028cc:	bf00      	nop
 80028ce:	377c      	adds	r7, #124	; 0x7c
 80028d0:	46bd      	mov	sp, r7
 80028d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028d6:	bf00      	nop
 80028d8:	40011000 	.word	0x40011000
 80028dc:	40011400 	.word	0x40011400
 80028e0:	51eb851f 	.word	0x51eb851f

080028e4 <__errno>:
 80028e4:	4b01      	ldr	r3, [pc, #4]	; (80028ec <__errno+0x8>)
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	20000038 	.word	0x20000038

080028f0 <__libc_init_array>:
 80028f0:	b570      	push	{r4, r5, r6, lr}
 80028f2:	4d0d      	ldr	r5, [pc, #52]	; (8002928 <__libc_init_array+0x38>)
 80028f4:	4c0d      	ldr	r4, [pc, #52]	; (800292c <__libc_init_array+0x3c>)
 80028f6:	1b64      	subs	r4, r4, r5
 80028f8:	10a4      	asrs	r4, r4, #2
 80028fa:	2600      	movs	r6, #0
 80028fc:	42a6      	cmp	r6, r4
 80028fe:	d109      	bne.n	8002914 <__libc_init_array+0x24>
 8002900:	4d0b      	ldr	r5, [pc, #44]	; (8002930 <__libc_init_array+0x40>)
 8002902:	4c0c      	ldr	r4, [pc, #48]	; (8002934 <__libc_init_array+0x44>)
 8002904:	f000 fc4e 	bl	80031a4 <_init>
 8002908:	1b64      	subs	r4, r4, r5
 800290a:	10a4      	asrs	r4, r4, #2
 800290c:	2600      	movs	r6, #0
 800290e:	42a6      	cmp	r6, r4
 8002910:	d105      	bne.n	800291e <__libc_init_array+0x2e>
 8002912:	bd70      	pop	{r4, r5, r6, pc}
 8002914:	f855 3b04 	ldr.w	r3, [r5], #4
 8002918:	4798      	blx	r3
 800291a:	3601      	adds	r6, #1
 800291c:	e7ee      	b.n	80028fc <__libc_init_array+0xc>
 800291e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002922:	4798      	blx	r3
 8002924:	3601      	adds	r6, #1
 8002926:	e7f2      	b.n	800290e <__libc_init_array+0x1e>
 8002928:	08003218 	.word	0x08003218
 800292c:	08003218 	.word	0x08003218
 8002930:	08003218 	.word	0x08003218
 8002934:	0800321c 	.word	0x0800321c

08002938 <memset>:
 8002938:	4402      	add	r2, r0
 800293a:	4603      	mov	r3, r0
 800293c:	4293      	cmp	r3, r2
 800293e:	d100      	bne.n	8002942 <memset+0xa>
 8002940:	4770      	bx	lr
 8002942:	f803 1b01 	strb.w	r1, [r3], #1
 8002946:	e7f9      	b.n	800293c <memset+0x4>

08002948 <siprintf>:
 8002948:	b40e      	push	{r1, r2, r3}
 800294a:	b500      	push	{lr}
 800294c:	b09c      	sub	sp, #112	; 0x70
 800294e:	ab1d      	add	r3, sp, #116	; 0x74
 8002950:	9002      	str	r0, [sp, #8]
 8002952:	9006      	str	r0, [sp, #24]
 8002954:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002958:	4809      	ldr	r0, [pc, #36]	; (8002980 <siprintf+0x38>)
 800295a:	9107      	str	r1, [sp, #28]
 800295c:	9104      	str	r1, [sp, #16]
 800295e:	4909      	ldr	r1, [pc, #36]	; (8002984 <siprintf+0x3c>)
 8002960:	f853 2b04 	ldr.w	r2, [r3], #4
 8002964:	9105      	str	r1, [sp, #20]
 8002966:	6800      	ldr	r0, [r0, #0]
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	a902      	add	r1, sp, #8
 800296c:	f000 f868 	bl	8002a40 <_svfiprintf_r>
 8002970:	9b02      	ldr	r3, [sp, #8]
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]
 8002976:	b01c      	add	sp, #112	; 0x70
 8002978:	f85d eb04 	ldr.w	lr, [sp], #4
 800297c:	b003      	add	sp, #12
 800297e:	4770      	bx	lr
 8002980:	20000038 	.word	0x20000038
 8002984:	ffff0208 	.word	0xffff0208

08002988 <__ssputs_r>:
 8002988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800298c:	688e      	ldr	r6, [r1, #8]
 800298e:	429e      	cmp	r6, r3
 8002990:	4682      	mov	sl, r0
 8002992:	460c      	mov	r4, r1
 8002994:	4690      	mov	r8, r2
 8002996:	461f      	mov	r7, r3
 8002998:	d838      	bhi.n	8002a0c <__ssputs_r+0x84>
 800299a:	898a      	ldrh	r2, [r1, #12]
 800299c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80029a0:	d032      	beq.n	8002a08 <__ssputs_r+0x80>
 80029a2:	6825      	ldr	r5, [r4, #0]
 80029a4:	6909      	ldr	r1, [r1, #16]
 80029a6:	eba5 0901 	sub.w	r9, r5, r1
 80029aa:	6965      	ldr	r5, [r4, #20]
 80029ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80029b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80029b4:	3301      	adds	r3, #1
 80029b6:	444b      	add	r3, r9
 80029b8:	106d      	asrs	r5, r5, #1
 80029ba:	429d      	cmp	r5, r3
 80029bc:	bf38      	it	cc
 80029be:	461d      	movcc	r5, r3
 80029c0:	0553      	lsls	r3, r2, #21
 80029c2:	d531      	bpl.n	8002a28 <__ssputs_r+0xa0>
 80029c4:	4629      	mov	r1, r5
 80029c6:	f000 fb47 	bl	8003058 <_malloc_r>
 80029ca:	4606      	mov	r6, r0
 80029cc:	b950      	cbnz	r0, 80029e4 <__ssputs_r+0x5c>
 80029ce:	230c      	movs	r3, #12
 80029d0:	f8ca 3000 	str.w	r3, [sl]
 80029d4:	89a3      	ldrh	r3, [r4, #12]
 80029d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029da:	81a3      	strh	r3, [r4, #12]
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295
 80029e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029e4:	6921      	ldr	r1, [r4, #16]
 80029e6:	464a      	mov	r2, r9
 80029e8:	f000 fabe 	bl	8002f68 <memcpy>
 80029ec:	89a3      	ldrh	r3, [r4, #12]
 80029ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80029f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f6:	81a3      	strh	r3, [r4, #12]
 80029f8:	6126      	str	r6, [r4, #16]
 80029fa:	6165      	str	r5, [r4, #20]
 80029fc:	444e      	add	r6, r9
 80029fe:	eba5 0509 	sub.w	r5, r5, r9
 8002a02:	6026      	str	r6, [r4, #0]
 8002a04:	60a5      	str	r5, [r4, #8]
 8002a06:	463e      	mov	r6, r7
 8002a08:	42be      	cmp	r6, r7
 8002a0a:	d900      	bls.n	8002a0e <__ssputs_r+0x86>
 8002a0c:	463e      	mov	r6, r7
 8002a0e:	4632      	mov	r2, r6
 8002a10:	6820      	ldr	r0, [r4, #0]
 8002a12:	4641      	mov	r1, r8
 8002a14:	f000 fab6 	bl	8002f84 <memmove>
 8002a18:	68a3      	ldr	r3, [r4, #8]
 8002a1a:	6822      	ldr	r2, [r4, #0]
 8002a1c:	1b9b      	subs	r3, r3, r6
 8002a1e:	4432      	add	r2, r6
 8002a20:	60a3      	str	r3, [r4, #8]
 8002a22:	6022      	str	r2, [r4, #0]
 8002a24:	2000      	movs	r0, #0
 8002a26:	e7db      	b.n	80029e0 <__ssputs_r+0x58>
 8002a28:	462a      	mov	r2, r5
 8002a2a:	f000 fb6f 	bl	800310c <_realloc_r>
 8002a2e:	4606      	mov	r6, r0
 8002a30:	2800      	cmp	r0, #0
 8002a32:	d1e1      	bne.n	80029f8 <__ssputs_r+0x70>
 8002a34:	6921      	ldr	r1, [r4, #16]
 8002a36:	4650      	mov	r0, sl
 8002a38:	f000 fabe 	bl	8002fb8 <_free_r>
 8002a3c:	e7c7      	b.n	80029ce <__ssputs_r+0x46>
	...

08002a40 <_svfiprintf_r>:
 8002a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a44:	4698      	mov	r8, r3
 8002a46:	898b      	ldrh	r3, [r1, #12]
 8002a48:	061b      	lsls	r3, r3, #24
 8002a4a:	b09d      	sub	sp, #116	; 0x74
 8002a4c:	4607      	mov	r7, r0
 8002a4e:	460d      	mov	r5, r1
 8002a50:	4614      	mov	r4, r2
 8002a52:	d50e      	bpl.n	8002a72 <_svfiprintf_r+0x32>
 8002a54:	690b      	ldr	r3, [r1, #16]
 8002a56:	b963      	cbnz	r3, 8002a72 <_svfiprintf_r+0x32>
 8002a58:	2140      	movs	r1, #64	; 0x40
 8002a5a:	f000 fafd 	bl	8003058 <_malloc_r>
 8002a5e:	6028      	str	r0, [r5, #0]
 8002a60:	6128      	str	r0, [r5, #16]
 8002a62:	b920      	cbnz	r0, 8002a6e <_svfiprintf_r+0x2e>
 8002a64:	230c      	movs	r3, #12
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	f04f 30ff 	mov.w	r0, #4294967295
 8002a6c:	e0d1      	b.n	8002c12 <_svfiprintf_r+0x1d2>
 8002a6e:	2340      	movs	r3, #64	; 0x40
 8002a70:	616b      	str	r3, [r5, #20]
 8002a72:	2300      	movs	r3, #0
 8002a74:	9309      	str	r3, [sp, #36]	; 0x24
 8002a76:	2320      	movs	r3, #32
 8002a78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a80:	2330      	movs	r3, #48	; 0x30
 8002a82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002c2c <_svfiprintf_r+0x1ec>
 8002a86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a8a:	f04f 0901 	mov.w	r9, #1
 8002a8e:	4623      	mov	r3, r4
 8002a90:	469a      	mov	sl, r3
 8002a92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a96:	b10a      	cbz	r2, 8002a9c <_svfiprintf_r+0x5c>
 8002a98:	2a25      	cmp	r2, #37	; 0x25
 8002a9a:	d1f9      	bne.n	8002a90 <_svfiprintf_r+0x50>
 8002a9c:	ebba 0b04 	subs.w	fp, sl, r4
 8002aa0:	d00b      	beq.n	8002aba <_svfiprintf_r+0x7a>
 8002aa2:	465b      	mov	r3, fp
 8002aa4:	4622      	mov	r2, r4
 8002aa6:	4629      	mov	r1, r5
 8002aa8:	4638      	mov	r0, r7
 8002aaa:	f7ff ff6d 	bl	8002988 <__ssputs_r>
 8002aae:	3001      	adds	r0, #1
 8002ab0:	f000 80aa 	beq.w	8002c08 <_svfiprintf_r+0x1c8>
 8002ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002ab6:	445a      	add	r2, fp
 8002ab8:	9209      	str	r2, [sp, #36]	; 0x24
 8002aba:	f89a 3000 	ldrb.w	r3, [sl]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 80a2 	beq.w	8002c08 <_svfiprintf_r+0x1c8>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8002aca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ace:	f10a 0a01 	add.w	sl, sl, #1
 8002ad2:	9304      	str	r3, [sp, #16]
 8002ad4:	9307      	str	r3, [sp, #28]
 8002ad6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ada:	931a      	str	r3, [sp, #104]	; 0x68
 8002adc:	4654      	mov	r4, sl
 8002ade:	2205      	movs	r2, #5
 8002ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ae4:	4851      	ldr	r0, [pc, #324]	; (8002c2c <_svfiprintf_r+0x1ec>)
 8002ae6:	f7fd fb83 	bl	80001f0 <memchr>
 8002aea:	9a04      	ldr	r2, [sp, #16]
 8002aec:	b9d8      	cbnz	r0, 8002b26 <_svfiprintf_r+0xe6>
 8002aee:	06d0      	lsls	r0, r2, #27
 8002af0:	bf44      	itt	mi
 8002af2:	2320      	movmi	r3, #32
 8002af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002af8:	0711      	lsls	r1, r2, #28
 8002afa:	bf44      	itt	mi
 8002afc:	232b      	movmi	r3, #43	; 0x2b
 8002afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b02:	f89a 3000 	ldrb.w	r3, [sl]
 8002b06:	2b2a      	cmp	r3, #42	; 0x2a
 8002b08:	d015      	beq.n	8002b36 <_svfiprintf_r+0xf6>
 8002b0a:	9a07      	ldr	r2, [sp, #28]
 8002b0c:	4654      	mov	r4, sl
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f04f 0c0a 	mov.w	ip, #10
 8002b14:	4621      	mov	r1, r4
 8002b16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b1a:	3b30      	subs	r3, #48	; 0x30
 8002b1c:	2b09      	cmp	r3, #9
 8002b1e:	d94e      	bls.n	8002bbe <_svfiprintf_r+0x17e>
 8002b20:	b1b0      	cbz	r0, 8002b50 <_svfiprintf_r+0x110>
 8002b22:	9207      	str	r2, [sp, #28]
 8002b24:	e014      	b.n	8002b50 <_svfiprintf_r+0x110>
 8002b26:	eba0 0308 	sub.w	r3, r0, r8
 8002b2a:	fa09 f303 	lsl.w	r3, r9, r3
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	9304      	str	r3, [sp, #16]
 8002b32:	46a2      	mov	sl, r4
 8002b34:	e7d2      	b.n	8002adc <_svfiprintf_r+0x9c>
 8002b36:	9b03      	ldr	r3, [sp, #12]
 8002b38:	1d19      	adds	r1, r3, #4
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	9103      	str	r1, [sp, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	bfbb      	ittet	lt
 8002b42:	425b      	neglt	r3, r3
 8002b44:	f042 0202 	orrlt.w	r2, r2, #2
 8002b48:	9307      	strge	r3, [sp, #28]
 8002b4a:	9307      	strlt	r3, [sp, #28]
 8002b4c:	bfb8      	it	lt
 8002b4e:	9204      	strlt	r2, [sp, #16]
 8002b50:	7823      	ldrb	r3, [r4, #0]
 8002b52:	2b2e      	cmp	r3, #46	; 0x2e
 8002b54:	d10c      	bne.n	8002b70 <_svfiprintf_r+0x130>
 8002b56:	7863      	ldrb	r3, [r4, #1]
 8002b58:	2b2a      	cmp	r3, #42	; 0x2a
 8002b5a:	d135      	bne.n	8002bc8 <_svfiprintf_r+0x188>
 8002b5c:	9b03      	ldr	r3, [sp, #12]
 8002b5e:	1d1a      	adds	r2, r3, #4
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	9203      	str	r2, [sp, #12]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	bfb8      	it	lt
 8002b68:	f04f 33ff 	movlt.w	r3, #4294967295
 8002b6c:	3402      	adds	r4, #2
 8002b6e:	9305      	str	r3, [sp, #20]
 8002b70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002c3c <_svfiprintf_r+0x1fc>
 8002b74:	7821      	ldrb	r1, [r4, #0]
 8002b76:	2203      	movs	r2, #3
 8002b78:	4650      	mov	r0, sl
 8002b7a:	f7fd fb39 	bl	80001f0 <memchr>
 8002b7e:	b140      	cbz	r0, 8002b92 <_svfiprintf_r+0x152>
 8002b80:	2340      	movs	r3, #64	; 0x40
 8002b82:	eba0 000a 	sub.w	r0, r0, sl
 8002b86:	fa03 f000 	lsl.w	r0, r3, r0
 8002b8a:	9b04      	ldr	r3, [sp, #16]
 8002b8c:	4303      	orrs	r3, r0
 8002b8e:	3401      	adds	r4, #1
 8002b90:	9304      	str	r3, [sp, #16]
 8002b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b96:	4826      	ldr	r0, [pc, #152]	; (8002c30 <_svfiprintf_r+0x1f0>)
 8002b98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b9c:	2206      	movs	r2, #6
 8002b9e:	f7fd fb27 	bl	80001f0 <memchr>
 8002ba2:	2800      	cmp	r0, #0
 8002ba4:	d038      	beq.n	8002c18 <_svfiprintf_r+0x1d8>
 8002ba6:	4b23      	ldr	r3, [pc, #140]	; (8002c34 <_svfiprintf_r+0x1f4>)
 8002ba8:	bb1b      	cbnz	r3, 8002bf2 <_svfiprintf_r+0x1b2>
 8002baa:	9b03      	ldr	r3, [sp, #12]
 8002bac:	3307      	adds	r3, #7
 8002bae:	f023 0307 	bic.w	r3, r3, #7
 8002bb2:	3308      	adds	r3, #8
 8002bb4:	9303      	str	r3, [sp, #12]
 8002bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bb8:	4433      	add	r3, r6
 8002bba:	9309      	str	r3, [sp, #36]	; 0x24
 8002bbc:	e767      	b.n	8002a8e <_svfiprintf_r+0x4e>
 8002bbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8002bc2:	460c      	mov	r4, r1
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	e7a5      	b.n	8002b14 <_svfiprintf_r+0xd4>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	3401      	adds	r4, #1
 8002bcc:	9305      	str	r3, [sp, #20]
 8002bce:	4619      	mov	r1, r3
 8002bd0:	f04f 0c0a 	mov.w	ip, #10
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002bda:	3a30      	subs	r2, #48	; 0x30
 8002bdc:	2a09      	cmp	r2, #9
 8002bde:	d903      	bls.n	8002be8 <_svfiprintf_r+0x1a8>
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0c5      	beq.n	8002b70 <_svfiprintf_r+0x130>
 8002be4:	9105      	str	r1, [sp, #20]
 8002be6:	e7c3      	b.n	8002b70 <_svfiprintf_r+0x130>
 8002be8:	fb0c 2101 	mla	r1, ip, r1, r2
 8002bec:	4604      	mov	r4, r0
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e7f0      	b.n	8002bd4 <_svfiprintf_r+0x194>
 8002bf2:	ab03      	add	r3, sp, #12
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	462a      	mov	r2, r5
 8002bf8:	4b0f      	ldr	r3, [pc, #60]	; (8002c38 <_svfiprintf_r+0x1f8>)
 8002bfa:	a904      	add	r1, sp, #16
 8002bfc:	4638      	mov	r0, r7
 8002bfe:	f3af 8000 	nop.w
 8002c02:	1c42      	adds	r2, r0, #1
 8002c04:	4606      	mov	r6, r0
 8002c06:	d1d6      	bne.n	8002bb6 <_svfiprintf_r+0x176>
 8002c08:	89ab      	ldrh	r3, [r5, #12]
 8002c0a:	065b      	lsls	r3, r3, #25
 8002c0c:	f53f af2c 	bmi.w	8002a68 <_svfiprintf_r+0x28>
 8002c10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c12:	b01d      	add	sp, #116	; 0x74
 8002c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c18:	ab03      	add	r3, sp, #12
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	462a      	mov	r2, r5
 8002c1e:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <_svfiprintf_r+0x1f8>)
 8002c20:	a904      	add	r1, sp, #16
 8002c22:	4638      	mov	r0, r7
 8002c24:	f000 f87a 	bl	8002d1c <_printf_i>
 8002c28:	e7eb      	b.n	8002c02 <_svfiprintf_r+0x1c2>
 8002c2a:	bf00      	nop
 8002c2c:	080031dc 	.word	0x080031dc
 8002c30:	080031e6 	.word	0x080031e6
 8002c34:	00000000 	.word	0x00000000
 8002c38:	08002989 	.word	0x08002989
 8002c3c:	080031e2 	.word	0x080031e2

08002c40 <_printf_common>:
 8002c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c44:	4616      	mov	r6, r2
 8002c46:	4699      	mov	r9, r3
 8002c48:	688a      	ldr	r2, [r1, #8]
 8002c4a:	690b      	ldr	r3, [r1, #16]
 8002c4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002c50:	4293      	cmp	r3, r2
 8002c52:	bfb8      	it	lt
 8002c54:	4613      	movlt	r3, r2
 8002c56:	6033      	str	r3, [r6, #0]
 8002c58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002c5c:	4607      	mov	r7, r0
 8002c5e:	460c      	mov	r4, r1
 8002c60:	b10a      	cbz	r2, 8002c66 <_printf_common+0x26>
 8002c62:	3301      	adds	r3, #1
 8002c64:	6033      	str	r3, [r6, #0]
 8002c66:	6823      	ldr	r3, [r4, #0]
 8002c68:	0699      	lsls	r1, r3, #26
 8002c6a:	bf42      	ittt	mi
 8002c6c:	6833      	ldrmi	r3, [r6, #0]
 8002c6e:	3302      	addmi	r3, #2
 8002c70:	6033      	strmi	r3, [r6, #0]
 8002c72:	6825      	ldr	r5, [r4, #0]
 8002c74:	f015 0506 	ands.w	r5, r5, #6
 8002c78:	d106      	bne.n	8002c88 <_printf_common+0x48>
 8002c7a:	f104 0a19 	add.w	sl, r4, #25
 8002c7e:	68e3      	ldr	r3, [r4, #12]
 8002c80:	6832      	ldr	r2, [r6, #0]
 8002c82:	1a9b      	subs	r3, r3, r2
 8002c84:	42ab      	cmp	r3, r5
 8002c86:	dc26      	bgt.n	8002cd6 <_printf_common+0x96>
 8002c88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002c8c:	1e13      	subs	r3, r2, #0
 8002c8e:	6822      	ldr	r2, [r4, #0]
 8002c90:	bf18      	it	ne
 8002c92:	2301      	movne	r3, #1
 8002c94:	0692      	lsls	r2, r2, #26
 8002c96:	d42b      	bmi.n	8002cf0 <_printf_common+0xb0>
 8002c98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c9c:	4649      	mov	r1, r9
 8002c9e:	4638      	mov	r0, r7
 8002ca0:	47c0      	blx	r8
 8002ca2:	3001      	adds	r0, #1
 8002ca4:	d01e      	beq.n	8002ce4 <_printf_common+0xa4>
 8002ca6:	6823      	ldr	r3, [r4, #0]
 8002ca8:	68e5      	ldr	r5, [r4, #12]
 8002caa:	6832      	ldr	r2, [r6, #0]
 8002cac:	f003 0306 	and.w	r3, r3, #6
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	bf08      	it	eq
 8002cb4:	1aad      	subeq	r5, r5, r2
 8002cb6:	68a3      	ldr	r3, [r4, #8]
 8002cb8:	6922      	ldr	r2, [r4, #16]
 8002cba:	bf0c      	ite	eq
 8002cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002cc0:	2500      	movne	r5, #0
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	bfc4      	itt	gt
 8002cc6:	1a9b      	subgt	r3, r3, r2
 8002cc8:	18ed      	addgt	r5, r5, r3
 8002cca:	2600      	movs	r6, #0
 8002ccc:	341a      	adds	r4, #26
 8002cce:	42b5      	cmp	r5, r6
 8002cd0:	d11a      	bne.n	8002d08 <_printf_common+0xc8>
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	e008      	b.n	8002ce8 <_printf_common+0xa8>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	4652      	mov	r2, sl
 8002cda:	4649      	mov	r1, r9
 8002cdc:	4638      	mov	r0, r7
 8002cde:	47c0      	blx	r8
 8002ce0:	3001      	adds	r0, #1
 8002ce2:	d103      	bne.n	8002cec <_printf_common+0xac>
 8002ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cec:	3501      	adds	r5, #1
 8002cee:	e7c6      	b.n	8002c7e <_printf_common+0x3e>
 8002cf0:	18e1      	adds	r1, r4, r3
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	2030      	movs	r0, #48	; 0x30
 8002cf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002cfa:	4422      	add	r2, r4
 8002cfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d04:	3302      	adds	r3, #2
 8002d06:	e7c7      	b.n	8002c98 <_printf_common+0x58>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	4622      	mov	r2, r4
 8002d0c:	4649      	mov	r1, r9
 8002d0e:	4638      	mov	r0, r7
 8002d10:	47c0      	blx	r8
 8002d12:	3001      	adds	r0, #1
 8002d14:	d0e6      	beq.n	8002ce4 <_printf_common+0xa4>
 8002d16:	3601      	adds	r6, #1
 8002d18:	e7d9      	b.n	8002cce <_printf_common+0x8e>
	...

08002d1c <_printf_i>:
 8002d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d20:	460c      	mov	r4, r1
 8002d22:	4691      	mov	r9, r2
 8002d24:	7e27      	ldrb	r7, [r4, #24]
 8002d26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002d28:	2f78      	cmp	r7, #120	; 0x78
 8002d2a:	4680      	mov	r8, r0
 8002d2c:	469a      	mov	sl, r3
 8002d2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d32:	d807      	bhi.n	8002d44 <_printf_i+0x28>
 8002d34:	2f62      	cmp	r7, #98	; 0x62
 8002d36:	d80a      	bhi.n	8002d4e <_printf_i+0x32>
 8002d38:	2f00      	cmp	r7, #0
 8002d3a:	f000 80d8 	beq.w	8002eee <_printf_i+0x1d2>
 8002d3e:	2f58      	cmp	r7, #88	; 0x58
 8002d40:	f000 80a3 	beq.w	8002e8a <_printf_i+0x16e>
 8002d44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002d48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002d4c:	e03a      	b.n	8002dc4 <_printf_i+0xa8>
 8002d4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002d52:	2b15      	cmp	r3, #21
 8002d54:	d8f6      	bhi.n	8002d44 <_printf_i+0x28>
 8002d56:	a001      	add	r0, pc, #4	; (adr r0, 8002d5c <_printf_i+0x40>)
 8002d58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002d5c:	08002db5 	.word	0x08002db5
 8002d60:	08002dc9 	.word	0x08002dc9
 8002d64:	08002d45 	.word	0x08002d45
 8002d68:	08002d45 	.word	0x08002d45
 8002d6c:	08002d45 	.word	0x08002d45
 8002d70:	08002d45 	.word	0x08002d45
 8002d74:	08002dc9 	.word	0x08002dc9
 8002d78:	08002d45 	.word	0x08002d45
 8002d7c:	08002d45 	.word	0x08002d45
 8002d80:	08002d45 	.word	0x08002d45
 8002d84:	08002d45 	.word	0x08002d45
 8002d88:	08002ed5 	.word	0x08002ed5
 8002d8c:	08002df9 	.word	0x08002df9
 8002d90:	08002eb7 	.word	0x08002eb7
 8002d94:	08002d45 	.word	0x08002d45
 8002d98:	08002d45 	.word	0x08002d45
 8002d9c:	08002ef7 	.word	0x08002ef7
 8002da0:	08002d45 	.word	0x08002d45
 8002da4:	08002df9 	.word	0x08002df9
 8002da8:	08002d45 	.word	0x08002d45
 8002dac:	08002d45 	.word	0x08002d45
 8002db0:	08002ebf 	.word	0x08002ebf
 8002db4:	680b      	ldr	r3, [r1, #0]
 8002db6:	1d1a      	adds	r2, r3, #4
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	600a      	str	r2, [r1, #0]
 8002dbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002dc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0a3      	b.n	8002f10 <_printf_i+0x1f4>
 8002dc8:	6825      	ldr	r5, [r4, #0]
 8002dca:	6808      	ldr	r0, [r1, #0]
 8002dcc:	062e      	lsls	r6, r5, #24
 8002dce:	f100 0304 	add.w	r3, r0, #4
 8002dd2:	d50a      	bpl.n	8002dea <_printf_i+0xce>
 8002dd4:	6805      	ldr	r5, [r0, #0]
 8002dd6:	600b      	str	r3, [r1, #0]
 8002dd8:	2d00      	cmp	r5, #0
 8002dda:	da03      	bge.n	8002de4 <_printf_i+0xc8>
 8002ddc:	232d      	movs	r3, #45	; 0x2d
 8002dde:	426d      	negs	r5, r5
 8002de0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002de4:	485e      	ldr	r0, [pc, #376]	; (8002f60 <_printf_i+0x244>)
 8002de6:	230a      	movs	r3, #10
 8002de8:	e019      	b.n	8002e1e <_printf_i+0x102>
 8002dea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002dee:	6805      	ldr	r5, [r0, #0]
 8002df0:	600b      	str	r3, [r1, #0]
 8002df2:	bf18      	it	ne
 8002df4:	b22d      	sxthne	r5, r5
 8002df6:	e7ef      	b.n	8002dd8 <_printf_i+0xbc>
 8002df8:	680b      	ldr	r3, [r1, #0]
 8002dfa:	6825      	ldr	r5, [r4, #0]
 8002dfc:	1d18      	adds	r0, r3, #4
 8002dfe:	6008      	str	r0, [r1, #0]
 8002e00:	0628      	lsls	r0, r5, #24
 8002e02:	d501      	bpl.n	8002e08 <_printf_i+0xec>
 8002e04:	681d      	ldr	r5, [r3, #0]
 8002e06:	e002      	b.n	8002e0e <_printf_i+0xf2>
 8002e08:	0669      	lsls	r1, r5, #25
 8002e0a:	d5fb      	bpl.n	8002e04 <_printf_i+0xe8>
 8002e0c:	881d      	ldrh	r5, [r3, #0]
 8002e0e:	4854      	ldr	r0, [pc, #336]	; (8002f60 <_printf_i+0x244>)
 8002e10:	2f6f      	cmp	r7, #111	; 0x6f
 8002e12:	bf0c      	ite	eq
 8002e14:	2308      	moveq	r3, #8
 8002e16:	230a      	movne	r3, #10
 8002e18:	2100      	movs	r1, #0
 8002e1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e1e:	6866      	ldr	r6, [r4, #4]
 8002e20:	60a6      	str	r6, [r4, #8]
 8002e22:	2e00      	cmp	r6, #0
 8002e24:	bfa2      	ittt	ge
 8002e26:	6821      	ldrge	r1, [r4, #0]
 8002e28:	f021 0104 	bicge.w	r1, r1, #4
 8002e2c:	6021      	strge	r1, [r4, #0]
 8002e2e:	b90d      	cbnz	r5, 8002e34 <_printf_i+0x118>
 8002e30:	2e00      	cmp	r6, #0
 8002e32:	d04d      	beq.n	8002ed0 <_printf_i+0x1b4>
 8002e34:	4616      	mov	r6, r2
 8002e36:	fbb5 f1f3 	udiv	r1, r5, r3
 8002e3a:	fb03 5711 	mls	r7, r3, r1, r5
 8002e3e:	5dc7      	ldrb	r7, [r0, r7]
 8002e40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002e44:	462f      	mov	r7, r5
 8002e46:	42bb      	cmp	r3, r7
 8002e48:	460d      	mov	r5, r1
 8002e4a:	d9f4      	bls.n	8002e36 <_printf_i+0x11a>
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d10b      	bne.n	8002e68 <_printf_i+0x14c>
 8002e50:	6823      	ldr	r3, [r4, #0]
 8002e52:	07df      	lsls	r7, r3, #31
 8002e54:	d508      	bpl.n	8002e68 <_printf_i+0x14c>
 8002e56:	6923      	ldr	r3, [r4, #16]
 8002e58:	6861      	ldr	r1, [r4, #4]
 8002e5a:	4299      	cmp	r1, r3
 8002e5c:	bfde      	ittt	le
 8002e5e:	2330      	movle	r3, #48	; 0x30
 8002e60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002e64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002e68:	1b92      	subs	r2, r2, r6
 8002e6a:	6122      	str	r2, [r4, #16]
 8002e6c:	f8cd a000 	str.w	sl, [sp]
 8002e70:	464b      	mov	r3, r9
 8002e72:	aa03      	add	r2, sp, #12
 8002e74:	4621      	mov	r1, r4
 8002e76:	4640      	mov	r0, r8
 8002e78:	f7ff fee2 	bl	8002c40 <_printf_common>
 8002e7c:	3001      	adds	r0, #1
 8002e7e:	d14c      	bne.n	8002f1a <_printf_i+0x1fe>
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
 8002e84:	b004      	add	sp, #16
 8002e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e8a:	4835      	ldr	r0, [pc, #212]	; (8002f60 <_printf_i+0x244>)
 8002e8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	680e      	ldr	r6, [r1, #0]
 8002e94:	061f      	lsls	r7, r3, #24
 8002e96:	f856 5b04 	ldr.w	r5, [r6], #4
 8002e9a:	600e      	str	r6, [r1, #0]
 8002e9c:	d514      	bpl.n	8002ec8 <_printf_i+0x1ac>
 8002e9e:	07d9      	lsls	r1, r3, #31
 8002ea0:	bf44      	itt	mi
 8002ea2:	f043 0320 	orrmi.w	r3, r3, #32
 8002ea6:	6023      	strmi	r3, [r4, #0]
 8002ea8:	b91d      	cbnz	r5, 8002eb2 <_printf_i+0x196>
 8002eaa:	6823      	ldr	r3, [r4, #0]
 8002eac:	f023 0320 	bic.w	r3, r3, #32
 8002eb0:	6023      	str	r3, [r4, #0]
 8002eb2:	2310      	movs	r3, #16
 8002eb4:	e7b0      	b.n	8002e18 <_printf_i+0xfc>
 8002eb6:	6823      	ldr	r3, [r4, #0]
 8002eb8:	f043 0320 	orr.w	r3, r3, #32
 8002ebc:	6023      	str	r3, [r4, #0]
 8002ebe:	2378      	movs	r3, #120	; 0x78
 8002ec0:	4828      	ldr	r0, [pc, #160]	; (8002f64 <_printf_i+0x248>)
 8002ec2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ec6:	e7e3      	b.n	8002e90 <_printf_i+0x174>
 8002ec8:	065e      	lsls	r6, r3, #25
 8002eca:	bf48      	it	mi
 8002ecc:	b2ad      	uxthmi	r5, r5
 8002ece:	e7e6      	b.n	8002e9e <_printf_i+0x182>
 8002ed0:	4616      	mov	r6, r2
 8002ed2:	e7bb      	b.n	8002e4c <_printf_i+0x130>
 8002ed4:	680b      	ldr	r3, [r1, #0]
 8002ed6:	6826      	ldr	r6, [r4, #0]
 8002ed8:	6960      	ldr	r0, [r4, #20]
 8002eda:	1d1d      	adds	r5, r3, #4
 8002edc:	600d      	str	r5, [r1, #0]
 8002ede:	0635      	lsls	r5, r6, #24
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	d501      	bpl.n	8002ee8 <_printf_i+0x1cc>
 8002ee4:	6018      	str	r0, [r3, #0]
 8002ee6:	e002      	b.n	8002eee <_printf_i+0x1d2>
 8002ee8:	0671      	lsls	r1, r6, #25
 8002eea:	d5fb      	bpl.n	8002ee4 <_printf_i+0x1c8>
 8002eec:	8018      	strh	r0, [r3, #0]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	6123      	str	r3, [r4, #16]
 8002ef2:	4616      	mov	r6, r2
 8002ef4:	e7ba      	b.n	8002e6c <_printf_i+0x150>
 8002ef6:	680b      	ldr	r3, [r1, #0]
 8002ef8:	1d1a      	adds	r2, r3, #4
 8002efa:	600a      	str	r2, [r1, #0]
 8002efc:	681e      	ldr	r6, [r3, #0]
 8002efe:	6862      	ldr	r2, [r4, #4]
 8002f00:	2100      	movs	r1, #0
 8002f02:	4630      	mov	r0, r6
 8002f04:	f7fd f974 	bl	80001f0 <memchr>
 8002f08:	b108      	cbz	r0, 8002f0e <_printf_i+0x1f2>
 8002f0a:	1b80      	subs	r0, r0, r6
 8002f0c:	6060      	str	r0, [r4, #4]
 8002f0e:	6863      	ldr	r3, [r4, #4]
 8002f10:	6123      	str	r3, [r4, #16]
 8002f12:	2300      	movs	r3, #0
 8002f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f18:	e7a8      	b.n	8002e6c <_printf_i+0x150>
 8002f1a:	6923      	ldr	r3, [r4, #16]
 8002f1c:	4632      	mov	r2, r6
 8002f1e:	4649      	mov	r1, r9
 8002f20:	4640      	mov	r0, r8
 8002f22:	47d0      	blx	sl
 8002f24:	3001      	adds	r0, #1
 8002f26:	d0ab      	beq.n	8002e80 <_printf_i+0x164>
 8002f28:	6823      	ldr	r3, [r4, #0]
 8002f2a:	079b      	lsls	r3, r3, #30
 8002f2c:	d413      	bmi.n	8002f56 <_printf_i+0x23a>
 8002f2e:	68e0      	ldr	r0, [r4, #12]
 8002f30:	9b03      	ldr	r3, [sp, #12]
 8002f32:	4298      	cmp	r0, r3
 8002f34:	bfb8      	it	lt
 8002f36:	4618      	movlt	r0, r3
 8002f38:	e7a4      	b.n	8002e84 <_printf_i+0x168>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	4632      	mov	r2, r6
 8002f3e:	4649      	mov	r1, r9
 8002f40:	4640      	mov	r0, r8
 8002f42:	47d0      	blx	sl
 8002f44:	3001      	adds	r0, #1
 8002f46:	d09b      	beq.n	8002e80 <_printf_i+0x164>
 8002f48:	3501      	adds	r5, #1
 8002f4a:	68e3      	ldr	r3, [r4, #12]
 8002f4c:	9903      	ldr	r1, [sp, #12]
 8002f4e:	1a5b      	subs	r3, r3, r1
 8002f50:	42ab      	cmp	r3, r5
 8002f52:	dcf2      	bgt.n	8002f3a <_printf_i+0x21e>
 8002f54:	e7eb      	b.n	8002f2e <_printf_i+0x212>
 8002f56:	2500      	movs	r5, #0
 8002f58:	f104 0619 	add.w	r6, r4, #25
 8002f5c:	e7f5      	b.n	8002f4a <_printf_i+0x22e>
 8002f5e:	bf00      	nop
 8002f60:	080031ed 	.word	0x080031ed
 8002f64:	080031fe 	.word	0x080031fe

08002f68 <memcpy>:
 8002f68:	440a      	add	r2, r1
 8002f6a:	4291      	cmp	r1, r2
 8002f6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f70:	d100      	bne.n	8002f74 <memcpy+0xc>
 8002f72:	4770      	bx	lr
 8002f74:	b510      	push	{r4, lr}
 8002f76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f7e:	4291      	cmp	r1, r2
 8002f80:	d1f9      	bne.n	8002f76 <memcpy+0xe>
 8002f82:	bd10      	pop	{r4, pc}

08002f84 <memmove>:
 8002f84:	4288      	cmp	r0, r1
 8002f86:	b510      	push	{r4, lr}
 8002f88:	eb01 0402 	add.w	r4, r1, r2
 8002f8c:	d902      	bls.n	8002f94 <memmove+0x10>
 8002f8e:	4284      	cmp	r4, r0
 8002f90:	4623      	mov	r3, r4
 8002f92:	d807      	bhi.n	8002fa4 <memmove+0x20>
 8002f94:	1e43      	subs	r3, r0, #1
 8002f96:	42a1      	cmp	r1, r4
 8002f98:	d008      	beq.n	8002fac <memmove+0x28>
 8002f9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002fa2:	e7f8      	b.n	8002f96 <memmove+0x12>
 8002fa4:	4402      	add	r2, r0
 8002fa6:	4601      	mov	r1, r0
 8002fa8:	428a      	cmp	r2, r1
 8002faa:	d100      	bne.n	8002fae <memmove+0x2a>
 8002fac:	bd10      	pop	{r4, pc}
 8002fae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002fb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002fb6:	e7f7      	b.n	8002fa8 <memmove+0x24>

08002fb8 <_free_r>:
 8002fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002fba:	2900      	cmp	r1, #0
 8002fbc:	d048      	beq.n	8003050 <_free_r+0x98>
 8002fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fc2:	9001      	str	r0, [sp, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f1a1 0404 	sub.w	r4, r1, #4
 8002fca:	bfb8      	it	lt
 8002fcc:	18e4      	addlt	r4, r4, r3
 8002fce:	f000 f8d3 	bl	8003178 <__malloc_lock>
 8002fd2:	4a20      	ldr	r2, [pc, #128]	; (8003054 <_free_r+0x9c>)
 8002fd4:	9801      	ldr	r0, [sp, #4]
 8002fd6:	6813      	ldr	r3, [r2, #0]
 8002fd8:	4615      	mov	r5, r2
 8002fda:	b933      	cbnz	r3, 8002fea <_free_r+0x32>
 8002fdc:	6063      	str	r3, [r4, #4]
 8002fde:	6014      	str	r4, [r2, #0]
 8002fe0:	b003      	add	sp, #12
 8002fe2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002fe6:	f000 b8cd 	b.w	8003184 <__malloc_unlock>
 8002fea:	42a3      	cmp	r3, r4
 8002fec:	d90b      	bls.n	8003006 <_free_r+0x4e>
 8002fee:	6821      	ldr	r1, [r4, #0]
 8002ff0:	1862      	adds	r2, r4, r1
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	bf04      	itt	eq
 8002ff6:	681a      	ldreq	r2, [r3, #0]
 8002ff8:	685b      	ldreq	r3, [r3, #4]
 8002ffa:	6063      	str	r3, [r4, #4]
 8002ffc:	bf04      	itt	eq
 8002ffe:	1852      	addeq	r2, r2, r1
 8003000:	6022      	streq	r2, [r4, #0]
 8003002:	602c      	str	r4, [r5, #0]
 8003004:	e7ec      	b.n	8002fe0 <_free_r+0x28>
 8003006:	461a      	mov	r2, r3
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	b10b      	cbz	r3, 8003010 <_free_r+0x58>
 800300c:	42a3      	cmp	r3, r4
 800300e:	d9fa      	bls.n	8003006 <_free_r+0x4e>
 8003010:	6811      	ldr	r1, [r2, #0]
 8003012:	1855      	adds	r5, r2, r1
 8003014:	42a5      	cmp	r5, r4
 8003016:	d10b      	bne.n	8003030 <_free_r+0x78>
 8003018:	6824      	ldr	r4, [r4, #0]
 800301a:	4421      	add	r1, r4
 800301c:	1854      	adds	r4, r2, r1
 800301e:	42a3      	cmp	r3, r4
 8003020:	6011      	str	r1, [r2, #0]
 8003022:	d1dd      	bne.n	8002fe0 <_free_r+0x28>
 8003024:	681c      	ldr	r4, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	6053      	str	r3, [r2, #4]
 800302a:	4421      	add	r1, r4
 800302c:	6011      	str	r1, [r2, #0]
 800302e:	e7d7      	b.n	8002fe0 <_free_r+0x28>
 8003030:	d902      	bls.n	8003038 <_free_r+0x80>
 8003032:	230c      	movs	r3, #12
 8003034:	6003      	str	r3, [r0, #0]
 8003036:	e7d3      	b.n	8002fe0 <_free_r+0x28>
 8003038:	6825      	ldr	r5, [r4, #0]
 800303a:	1961      	adds	r1, r4, r5
 800303c:	428b      	cmp	r3, r1
 800303e:	bf04      	itt	eq
 8003040:	6819      	ldreq	r1, [r3, #0]
 8003042:	685b      	ldreq	r3, [r3, #4]
 8003044:	6063      	str	r3, [r4, #4]
 8003046:	bf04      	itt	eq
 8003048:	1949      	addeq	r1, r1, r5
 800304a:	6021      	streq	r1, [r4, #0]
 800304c:	6054      	str	r4, [r2, #4]
 800304e:	e7c7      	b.n	8002fe0 <_free_r+0x28>
 8003050:	b003      	add	sp, #12
 8003052:	bd30      	pop	{r4, r5, pc}
 8003054:	200000d8 	.word	0x200000d8

08003058 <_malloc_r>:
 8003058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305a:	1ccd      	adds	r5, r1, #3
 800305c:	f025 0503 	bic.w	r5, r5, #3
 8003060:	3508      	adds	r5, #8
 8003062:	2d0c      	cmp	r5, #12
 8003064:	bf38      	it	cc
 8003066:	250c      	movcc	r5, #12
 8003068:	2d00      	cmp	r5, #0
 800306a:	4606      	mov	r6, r0
 800306c:	db01      	blt.n	8003072 <_malloc_r+0x1a>
 800306e:	42a9      	cmp	r1, r5
 8003070:	d903      	bls.n	800307a <_malloc_r+0x22>
 8003072:	230c      	movs	r3, #12
 8003074:	6033      	str	r3, [r6, #0]
 8003076:	2000      	movs	r0, #0
 8003078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800307a:	f000 f87d 	bl	8003178 <__malloc_lock>
 800307e:	4921      	ldr	r1, [pc, #132]	; (8003104 <_malloc_r+0xac>)
 8003080:	680a      	ldr	r2, [r1, #0]
 8003082:	4614      	mov	r4, r2
 8003084:	b99c      	cbnz	r4, 80030ae <_malloc_r+0x56>
 8003086:	4f20      	ldr	r7, [pc, #128]	; (8003108 <_malloc_r+0xb0>)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	b923      	cbnz	r3, 8003096 <_malloc_r+0x3e>
 800308c:	4621      	mov	r1, r4
 800308e:	4630      	mov	r0, r6
 8003090:	f000 f862 	bl	8003158 <_sbrk_r>
 8003094:	6038      	str	r0, [r7, #0]
 8003096:	4629      	mov	r1, r5
 8003098:	4630      	mov	r0, r6
 800309a:	f000 f85d 	bl	8003158 <_sbrk_r>
 800309e:	1c43      	adds	r3, r0, #1
 80030a0:	d123      	bne.n	80030ea <_malloc_r+0x92>
 80030a2:	230c      	movs	r3, #12
 80030a4:	6033      	str	r3, [r6, #0]
 80030a6:	4630      	mov	r0, r6
 80030a8:	f000 f86c 	bl	8003184 <__malloc_unlock>
 80030ac:	e7e3      	b.n	8003076 <_malloc_r+0x1e>
 80030ae:	6823      	ldr	r3, [r4, #0]
 80030b0:	1b5b      	subs	r3, r3, r5
 80030b2:	d417      	bmi.n	80030e4 <_malloc_r+0x8c>
 80030b4:	2b0b      	cmp	r3, #11
 80030b6:	d903      	bls.n	80030c0 <_malloc_r+0x68>
 80030b8:	6023      	str	r3, [r4, #0]
 80030ba:	441c      	add	r4, r3
 80030bc:	6025      	str	r5, [r4, #0]
 80030be:	e004      	b.n	80030ca <_malloc_r+0x72>
 80030c0:	6863      	ldr	r3, [r4, #4]
 80030c2:	42a2      	cmp	r2, r4
 80030c4:	bf0c      	ite	eq
 80030c6:	600b      	streq	r3, [r1, #0]
 80030c8:	6053      	strne	r3, [r2, #4]
 80030ca:	4630      	mov	r0, r6
 80030cc:	f000 f85a 	bl	8003184 <__malloc_unlock>
 80030d0:	f104 000b 	add.w	r0, r4, #11
 80030d4:	1d23      	adds	r3, r4, #4
 80030d6:	f020 0007 	bic.w	r0, r0, #7
 80030da:	1ac2      	subs	r2, r0, r3
 80030dc:	d0cc      	beq.n	8003078 <_malloc_r+0x20>
 80030de:	1a1b      	subs	r3, r3, r0
 80030e0:	50a3      	str	r3, [r4, r2]
 80030e2:	e7c9      	b.n	8003078 <_malloc_r+0x20>
 80030e4:	4622      	mov	r2, r4
 80030e6:	6864      	ldr	r4, [r4, #4]
 80030e8:	e7cc      	b.n	8003084 <_malloc_r+0x2c>
 80030ea:	1cc4      	adds	r4, r0, #3
 80030ec:	f024 0403 	bic.w	r4, r4, #3
 80030f0:	42a0      	cmp	r0, r4
 80030f2:	d0e3      	beq.n	80030bc <_malloc_r+0x64>
 80030f4:	1a21      	subs	r1, r4, r0
 80030f6:	4630      	mov	r0, r6
 80030f8:	f000 f82e 	bl	8003158 <_sbrk_r>
 80030fc:	3001      	adds	r0, #1
 80030fe:	d1dd      	bne.n	80030bc <_malloc_r+0x64>
 8003100:	e7cf      	b.n	80030a2 <_malloc_r+0x4a>
 8003102:	bf00      	nop
 8003104:	200000d8 	.word	0x200000d8
 8003108:	200000dc 	.word	0x200000dc

0800310c <_realloc_r>:
 800310c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310e:	4607      	mov	r7, r0
 8003110:	4614      	mov	r4, r2
 8003112:	460e      	mov	r6, r1
 8003114:	b921      	cbnz	r1, 8003120 <_realloc_r+0x14>
 8003116:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800311a:	4611      	mov	r1, r2
 800311c:	f7ff bf9c 	b.w	8003058 <_malloc_r>
 8003120:	b922      	cbnz	r2, 800312c <_realloc_r+0x20>
 8003122:	f7ff ff49 	bl	8002fb8 <_free_r>
 8003126:	4625      	mov	r5, r4
 8003128:	4628      	mov	r0, r5
 800312a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800312c:	f000 f830 	bl	8003190 <_malloc_usable_size_r>
 8003130:	42a0      	cmp	r0, r4
 8003132:	d20f      	bcs.n	8003154 <_realloc_r+0x48>
 8003134:	4621      	mov	r1, r4
 8003136:	4638      	mov	r0, r7
 8003138:	f7ff ff8e 	bl	8003058 <_malloc_r>
 800313c:	4605      	mov	r5, r0
 800313e:	2800      	cmp	r0, #0
 8003140:	d0f2      	beq.n	8003128 <_realloc_r+0x1c>
 8003142:	4631      	mov	r1, r6
 8003144:	4622      	mov	r2, r4
 8003146:	f7ff ff0f 	bl	8002f68 <memcpy>
 800314a:	4631      	mov	r1, r6
 800314c:	4638      	mov	r0, r7
 800314e:	f7ff ff33 	bl	8002fb8 <_free_r>
 8003152:	e7e9      	b.n	8003128 <_realloc_r+0x1c>
 8003154:	4635      	mov	r5, r6
 8003156:	e7e7      	b.n	8003128 <_realloc_r+0x1c>

08003158 <_sbrk_r>:
 8003158:	b538      	push	{r3, r4, r5, lr}
 800315a:	4d06      	ldr	r5, [pc, #24]	; (8003174 <_sbrk_r+0x1c>)
 800315c:	2300      	movs	r3, #0
 800315e:	4604      	mov	r4, r0
 8003160:	4608      	mov	r0, r1
 8003162:	602b      	str	r3, [r5, #0]
 8003164:	f7fd fd82 	bl	8000c6c <_sbrk>
 8003168:	1c43      	adds	r3, r0, #1
 800316a:	d102      	bne.n	8003172 <_sbrk_r+0x1a>
 800316c:	682b      	ldr	r3, [r5, #0]
 800316e:	b103      	cbz	r3, 8003172 <_sbrk_r+0x1a>
 8003170:	6023      	str	r3, [r4, #0]
 8003172:	bd38      	pop	{r3, r4, r5, pc}
 8003174:	20000224 	.word	0x20000224

08003178 <__malloc_lock>:
 8003178:	4801      	ldr	r0, [pc, #4]	; (8003180 <__malloc_lock+0x8>)
 800317a:	f000 b811 	b.w	80031a0 <__retarget_lock_acquire_recursive>
 800317e:	bf00      	nop
 8003180:	2000022c 	.word	0x2000022c

08003184 <__malloc_unlock>:
 8003184:	4801      	ldr	r0, [pc, #4]	; (800318c <__malloc_unlock+0x8>)
 8003186:	f000 b80c 	b.w	80031a2 <__retarget_lock_release_recursive>
 800318a:	bf00      	nop
 800318c:	2000022c 	.word	0x2000022c

08003190 <_malloc_usable_size_r>:
 8003190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003194:	1f18      	subs	r0, r3, #4
 8003196:	2b00      	cmp	r3, #0
 8003198:	bfbc      	itt	lt
 800319a:	580b      	ldrlt	r3, [r1, r0]
 800319c:	18c0      	addlt	r0, r0, r3
 800319e:	4770      	bx	lr

080031a0 <__retarget_lock_acquire_recursive>:
 80031a0:	4770      	bx	lr

080031a2 <__retarget_lock_release_recursive>:
 80031a2:	4770      	bx	lr

080031a4 <_init>:
 80031a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a6:	bf00      	nop
 80031a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031aa:	bc08      	pop	{r3}
 80031ac:	469e      	mov	lr, r3
 80031ae:	4770      	bx	lr

080031b0 <_fini>:
 80031b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b2:	bf00      	nop
 80031b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031b6:	bc08      	pop	{r3}
 80031b8:	469e      	mov	lr, r3
 80031ba:	4770      	bx	lr
