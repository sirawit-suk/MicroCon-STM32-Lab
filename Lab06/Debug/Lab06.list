
Lab06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005490  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08005640  08005640  00015640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056a0  080056a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080056a0  080056a0  000156a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056a8  080056a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056a8  080056a8  000156a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056ac  080056ac  000156ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080056b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000638  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006a8  200006a8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000204bf  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004399  00000000  00000000  0004055f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001998  00000000  00000000  000448f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017c8  00000000  00000000  00046290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b28  00000000  00000000  00047a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021db0  00000000  00000000  0006f580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e630e  00000000  00000000  00091330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0017763e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006f70  00000000  00000000  00177694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005628 	.word	0x08005628

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005628 	.word	0x08005628

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <MX_CRC_Init+0x20>)
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <MX_CRC_Init+0x24>)
 80005a0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <MX_CRC_Init+0x20>)
 80005a4:	f001 faa0 	bl	8001ae8 <HAL_CRC_Init>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80005ae:	f000 fda9 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	200000a4 	.word	0x200000a4
 80005bc:	40023000 	.word	0x40023000

080005c0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <HAL_CRC_MspInit+0x3c>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d10d      	bne.n	80005ee <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <HAL_CRC_MspInit+0x40>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a09      	ldr	r2, [pc, #36]	; (8000600 <HAL_CRC_MspInit+0x40>)
 80005dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b07      	ldr	r3, [pc, #28]	; (8000600 <HAL_CRC_MspInit+0x40>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80005ee:	bf00      	nop
 80005f0:	3714      	adds	r7, #20
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40023000 	.word	0x40023000
 8000600:	40023800 	.word	0x40023800

08000604 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000608:	4b15      	ldr	r3, [pc, #84]	; (8000660 <MX_DMA2D_Init+0x5c>)
 800060a:	4a16      	ldr	r2, [pc, #88]	; (8000664 <MX_DMA2D_Init+0x60>)
 800060c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800060e:	4b14      	ldr	r3, [pc, #80]	; (8000660 <MX_DMA2D_Init+0x5c>)
 8000610:	2200      	movs	r2, #0
 8000612:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_DMA2D_Init+0x5c>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800061a:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_DMA2D_Init+0x5c>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_DMA2D_Init+0x5c>)
 8000622:	2200      	movs	r2, #0
 8000624:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_DMA2D_Init+0x5c>)
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_DMA2D_Init+0x5c>)
 800062e:	2200      	movs	r2, #0
 8000630:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <MX_DMA2D_Init+0x5c>)
 8000634:	2200      	movs	r2, #0
 8000636:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000638:	4809      	ldr	r0, [pc, #36]	; (8000660 <MX_DMA2D_Init+0x5c>)
 800063a:	f001 fa71 	bl	8001b20 <HAL_DMA2D_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000644:	f000 fd5e 	bl	8001104 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000648:	2101      	movs	r1, #1
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_DMA2D_Init+0x5c>)
 800064c:	f001 fab2 	bl	8001bb4 <HAL_DMA2D_ConfigLayer>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000656:	f000 fd55 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200000ac 	.word	0x200000ac
 8000664:	4002b000 	.word	0x4002b000

08000668 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0b      	ldr	r2, [pc, #44]	; (80006a4 <HAL_DMA2D_MspInit+0x3c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d10d      	bne.n	8000696 <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <HAL_DMA2D_MspInit+0x40>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a09      	ldr	r2, [pc, #36]	; (80006a8 <HAL_DMA2D_MspInit+0x40>)
 8000684:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <HAL_DMA2D_MspInit+0x40>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000696:	bf00      	nop
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	4002b000 	.word	0x4002b000
 80006a8:	40023800 	.word	0x40023800

080006ac <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
 80006c0:	615a      	str	r2, [r3, #20]
 80006c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80006c4:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <MX_FMC_Init+0x98>)
 80006c6:	4a20      	ldr	r2, [pc, #128]	; (8000748 <MX_FMC_Init+0x9c>)
 80006c8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80006ca:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <MX_FMC_Init+0x98>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80006d0:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <MX_FMC_Init+0x98>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80006d6:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <MX_FMC_Init+0x98>)
 80006d8:	2204      	movs	r2, #4
 80006da:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80006dc:	4b19      	ldr	r3, [pc, #100]	; (8000744 <MX_FMC_Init+0x98>)
 80006de:	2210      	movs	r2, #16
 80006e0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80006e2:	4b18      	ldr	r3, [pc, #96]	; (8000744 <MX_FMC_Init+0x98>)
 80006e4:	2240      	movs	r2, #64	; 0x40
 80006e6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80006e8:	4b16      	ldr	r3, [pc, #88]	; (8000744 <MX_FMC_Init+0x98>)
 80006ea:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80006ee:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_FMC_Init+0x98>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_FMC_Init+0x98>)
 80006f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006fc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_FMC_Init+0x98>)
 8000700:	2200      	movs	r2, #0
 8000702:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_FMC_Init+0x98>)
 8000706:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800070a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800070c:	2302      	movs	r3, #2
 800070e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000710:	2307      	movs	r3, #7
 8000712:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000714:	2304      	movs	r3, #4
 8000716:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000718:	2307      	movs	r3, #7
 800071a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800071c:	2303      	movs	r3, #3
 800071e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000720:	2302      	movs	r3, #2
 8000722:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000724:	2302      	movs	r3, #2
 8000726:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	4619      	mov	r1, r3
 800072c:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_FMC_Init+0x98>)
 800072e:	f002 ffdf 	bl	80036f0 <HAL_SDRAM_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000738:	f000 fce4 	bl	8001104 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800073c:	bf00      	nop
 800073e:	3720      	adds	r7, #32
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000ec 	.word	0x200000ec
 8000748:	a0000140 	.word	0xa0000140

0800074c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000760:	4b3b      	ldr	r3, [pc, #236]	; (8000850 <HAL_FMC_MspInit+0x104>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d16f      	bne.n	8000848 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000768:	4b39      	ldr	r3, [pc, #228]	; (8000850 <HAL_FMC_MspInit+0x104>)
 800076a:	2201      	movs	r2, #1
 800076c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	4b38      	ldr	r3, [pc, #224]	; (8000854 <HAL_FMC_MspInit+0x108>)
 8000774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000776:	4a37      	ldr	r2, [pc, #220]	; (8000854 <HAL_FMC_MspInit+0x108>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6393      	str	r3, [r2, #56]	; 0x38
 800077e:	4b35      	ldr	r3, [pc, #212]	; (8000854 <HAL_FMC_MspInit+0x108>)
 8000780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800078a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800078e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800079c:	230c      	movs	r3, #12
 800079e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	482c      	ldr	r0, [pc, #176]	; (8000858 <HAL_FMC_MspInit+0x10c>)
 80007a6:	f001 fa97 	bl	8001cd8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80007aa:	2301      	movs	r3, #1
 80007ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	2302      	movs	r3, #2
 80007b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b6:	2303      	movs	r3, #3
 80007b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007ba:	230c      	movs	r3, #12
 80007bc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	4619      	mov	r1, r3
 80007c2:	4826      	ldr	r0, [pc, #152]	; (800085c <HAL_FMC_MspInit+0x110>)
 80007c4:	f001 fa88 	bl	8001cd8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80007c8:	f248 1333 	movw	r3, #33075	; 0x8133
 80007cc:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	2302      	movs	r3, #2
 80007d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d6:	2303      	movs	r3, #3
 80007d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007da:	230c      	movs	r3, #12
 80007dc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	4619      	mov	r1, r3
 80007e2:	481f      	ldr	r0, [pc, #124]	; (8000860 <HAL_FMC_MspInit+0x114>)
 80007e4:	f001 fa78 	bl	8001cd8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80007e8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80007ec:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ee:	2302      	movs	r3, #2
 80007f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f6:	2303      	movs	r3, #3
 80007f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007fa:	230c      	movs	r3, #12
 80007fc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	4619      	mov	r1, r3
 8000802:	4818      	ldr	r0, [pc, #96]	; (8000864 <HAL_FMC_MspInit+0x118>)
 8000804:	f001 fa68 	bl	8001cd8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000808:	f24c 7303 	movw	r3, #50947	; 0xc703
 800080c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080e:	2302      	movs	r3, #2
 8000810:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000816:	2303      	movs	r3, #3
 8000818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800081a:	230c      	movs	r3, #12
 800081c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	4619      	mov	r1, r3
 8000822:	4811      	ldr	r0, [pc, #68]	; (8000868 <HAL_FMC_MspInit+0x11c>)
 8000824:	f001 fa58 	bl	8001cd8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000828:	2360      	movs	r3, #96	; 0x60
 800082a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082c:	2302      	movs	r3, #2
 800082e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000834:	2303      	movs	r3, #3
 8000836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000838:	230c      	movs	r3, #12
 800083a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	4619      	mov	r1, r3
 8000840:	480a      	ldr	r0, [pc, #40]	; (800086c <HAL_FMC_MspInit+0x120>)
 8000842:	f001 fa49 	bl	8001cd8 <HAL_GPIO_Init>
 8000846:	e000      	b.n	800084a <HAL_FMC_MspInit+0xfe>
    return;
 8000848:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	2000008c 	.word	0x2000008c
 8000854:	40023800 	.word	0x40023800
 8000858:	40021400 	.word	0x40021400
 800085c:	40020800 	.word	0x40020800
 8000860:	40021800 	.word	0x40021800
 8000864:	40021000 	.word	0x40021000
 8000868:	40020c00 	.word	0x40020c00
 800086c:	40020400 	.word	0x40020400

08000870 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000878:	f7ff ff68 	bl	800074c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800087c:	bf00      	nop
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08e      	sub	sp, #56	; 0x38
 8000888:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
 800089e:	4b7b      	ldr	r3, [pc, #492]	; (8000a8c <MX_GPIO_Init+0x208>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a7a      	ldr	r2, [pc, #488]	; (8000a8c <MX_GPIO_Init+0x208>)
 80008a4:	f043 0304 	orr.w	r3, r3, #4
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b78      	ldr	r3, [pc, #480]	; (8000a8c <MX_GPIO_Init+0x208>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0304 	and.w	r3, r3, #4
 80008b2:	623b      	str	r3, [r7, #32]
 80008b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
 80008ba:	4b74      	ldr	r3, [pc, #464]	; (8000a8c <MX_GPIO_Init+0x208>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a73      	ldr	r2, [pc, #460]	; (8000a8c <MX_GPIO_Init+0x208>)
 80008c0:	f043 0320 	orr.w	r3, r3, #32
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b71      	ldr	r3, [pc, #452]	; (8000a8c <MX_GPIO_Init+0x208>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0320 	and.w	r3, r3, #32
 80008ce:	61fb      	str	r3, [r7, #28]
 80008d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	4b6d      	ldr	r3, [pc, #436]	; (8000a8c <MX_GPIO_Init+0x208>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a6c      	ldr	r2, [pc, #432]	; (8000a8c <MX_GPIO_Init+0x208>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b6a      	ldr	r3, [pc, #424]	; (8000a8c <MX_GPIO_Init+0x208>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	4b66      	ldr	r3, [pc, #408]	; (8000a8c <MX_GPIO_Init+0x208>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a65      	ldr	r2, [pc, #404]	; (8000a8c <MX_GPIO_Init+0x208>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b63      	ldr	r3, [pc, #396]	; (8000a8c <MX_GPIO_Init+0x208>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b5f      	ldr	r3, [pc, #380]	; (8000a8c <MX_GPIO_Init+0x208>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a5e      	ldr	r2, [pc, #376]	; (8000a8c <MX_GPIO_Init+0x208>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b5c      	ldr	r3, [pc, #368]	; (8000a8c <MX_GPIO_Init+0x208>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b58      	ldr	r3, [pc, #352]	; (8000a8c <MX_GPIO_Init+0x208>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a57      	ldr	r2, [pc, #348]	; (8000a8c <MX_GPIO_Init+0x208>)
 8000930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b55      	ldr	r3, [pc, #340]	; (8000a8c <MX_GPIO_Init+0x208>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	4b51      	ldr	r3, [pc, #324]	; (8000a8c <MX_GPIO_Init+0x208>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a50      	ldr	r2, [pc, #320]	; (8000a8c <MX_GPIO_Init+0x208>)
 800094c:	f043 0310 	orr.w	r3, r3, #16
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b4e      	ldr	r3, [pc, #312]	; (8000a8c <MX_GPIO_Init+0x208>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0310 	and.w	r3, r3, #16
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b4a      	ldr	r3, [pc, #296]	; (8000a8c <MX_GPIO_Init+0x208>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a49      	ldr	r2, [pc, #292]	; (8000a8c <MX_GPIO_Init+0x208>)
 8000968:	f043 0308 	orr.w	r3, r3, #8
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b47      	ldr	r3, [pc, #284]	; (8000a8c <MX_GPIO_Init+0x208>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0308 	and.w	r3, r3, #8
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2116      	movs	r1, #22
 800097e:	4844      	ldr	r0, [pc, #272]	; (8000a90 <MX_GPIO_Init+0x20c>)
 8000980:	f001 fb56 	bl	8002030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	2180      	movs	r1, #128	; 0x80
 8000988:	4842      	ldr	r0, [pc, #264]	; (8000a94 <MX_GPIO_Init+0x210>)
 800098a:	f001 fb51 	bl	8002030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000994:	4840      	ldr	r0, [pc, #256]	; (8000a98 <MX_GPIO_Init+0x214>)
 8000996:	f001 fb4b 	bl	8002030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80009a0:	483e      	ldr	r0, [pc, #248]	; (8000a9c <MX_GPIO_Init+0x218>)
 80009a2:	f001 fb45 	bl	8002030 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80009a6:	2316      	movs	r3, #22
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009aa:	2301      	movs	r3, #1
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ba:	4619      	mov	r1, r3
 80009bc:	4834      	ldr	r0, [pc, #208]	; (8000a90 <MX_GPIO_Init+0x20c>)
 80009be:	f001 f98b 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80009c2:	f248 0307 	movw	r3, #32775	; 0x8007
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009c8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	4619      	mov	r1, r3
 80009d8:	482e      	ldr	r0, [pc, #184]	; (8000a94 <MX_GPIO_Init+0x210>)
 80009da:	f001 f97d 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80009de:	2380      	movs	r3, #128	; 0x80
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f2:	4619      	mov	r1, r3
 80009f4:	4827      	ldr	r0, [pc, #156]	; (8000a94 <MX_GPIO_Init+0x210>)
 80009f6:	f001 f96f 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80009fa:	2320      	movs	r3, #32
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009fe:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4820      	ldr	r0, [pc, #128]	; (8000a90 <MX_GPIO_Init+0x20c>)
 8000a10:	f001 f962 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a14:	2304      	movs	r3, #4
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a24:	4619      	mov	r1, r3
 8000a26:	481e      	ldr	r0, [pc, #120]	; (8000aa0 <MX_GPIO_Init+0x21c>)
 8000a28:	f001 f956 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000a2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4815      	ldr	r0, [pc, #84]	; (8000a98 <MX_GPIO_Init+0x214>)
 8000a42:	f001 f949 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000a46:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	480e      	ldr	r0, [pc, #56]	; (8000a98 <MX_GPIO_Init+0x214>)
 8000a60:	f001 f93a 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000a64:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4807      	ldr	r0, [pc, #28]	; (8000a9c <MX_GPIO_Init+0x218>)
 8000a7e:	f001 f92b 	bl	8001cd8 <HAL_GPIO_Init>

}
 8000a82:	bf00      	nop
 8000a84:	3738      	adds	r7, #56	; 0x38
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020800 	.word	0x40020800
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020c00 	.word	0x40020c00
 8000a9c:	40021800 	.word	0x40021800
 8000aa0:	40020400 	.word	0x40020400

08000aa4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <MX_I2C3_Init+0x74>)
 8000aaa:	4a1c      	ldr	r2, [pc, #112]	; (8000b1c <MX_I2C3_Init+0x78>)
 8000aac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_I2C3_Init+0x74>)
 8000ab0:	4a1b      	ldr	r2, [pc, #108]	; (8000b20 <MX_I2C3_Init+0x7c>)
 8000ab2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MX_I2C3_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000aba:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_I2C3_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <MX_I2C3_Init+0x74>)
 8000ac2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ac6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_I2C3_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000ace:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <MX_I2C3_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <MX_I2C3_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_I2C3_Init+0x74>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ae0:	480d      	ldr	r0, [pc, #52]	; (8000b18 <MX_I2C3_Init+0x74>)
 8000ae2:	f001 fb3b 	bl	800215c <HAL_I2C_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000aec:	f000 fb0a 	bl	8001104 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000af0:	2100      	movs	r1, #0
 8000af2:	4809      	ldr	r0, [pc, #36]	; (8000b18 <MX_I2C3_Init+0x74>)
 8000af4:	f001 fc76 	bl	80023e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000afe:	f000 fb01 	bl	8001104 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b02:	2100      	movs	r1, #0
 8000b04:	4804      	ldr	r0, [pc, #16]	; (8000b18 <MX_I2C3_Init+0x74>)
 8000b06:	f001 fca9 	bl	800245c <HAL_I2CEx_ConfigDigitalFilter>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000b10:	f000 faf8 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000120 	.word	0x20000120
 8000b1c:	40005c00 	.word	0x40005c00
 8000b20:	000186a0 	.word	0x000186a0

08000b24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08a      	sub	sp, #40	; 0x28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a29      	ldr	r2, [pc, #164]	; (8000be8 <HAL_I2C_MspInit+0xc4>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d14b      	bne.n	8000bde <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b28      	ldr	r3, [pc, #160]	; (8000bec <HAL_I2C_MspInit+0xc8>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a27      	ldr	r2, [pc, #156]	; (8000bec <HAL_I2C_MspInit+0xc8>)
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b25      	ldr	r3, [pc, #148]	; (8000bec <HAL_I2C_MspInit+0xc8>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0304 	and.w	r3, r3, #4
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b21      	ldr	r3, [pc, #132]	; (8000bec <HAL_I2C_MspInit+0xc8>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a20      	ldr	r2, [pc, #128]	; (8000bec <HAL_I2C_MspInit+0xc8>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <HAL_I2C_MspInit+0xc8>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b84:	2312      	movs	r3, #18
 8000b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b90:	2304      	movs	r3, #4
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4815      	ldr	r0, [pc, #84]	; (8000bf0 <HAL_I2C_MspInit+0xcc>)
 8000b9c:	f001 f89c 	bl	8001cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000ba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba6:	2312      	movs	r3, #18
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	480d      	ldr	r0, [pc, #52]	; (8000bf4 <HAL_I2C_MspInit+0xd0>)
 8000bbe:	f001 f88b 	bl	8001cd8 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <HAL_I2C_MspInit+0xc8>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a08      	ldr	r2, [pc, #32]	; (8000bec <HAL_I2C_MspInit+0xc8>)
 8000bcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_I2C_MspInit+0xc8>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000bde:	bf00      	nop
 8000be0:	3728      	adds	r7, #40	; 0x28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40005c00 	.word	0x40005c00
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020800 	.word	0x40020800
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08e      	sub	sp, #56	; 0x38
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2234      	movs	r2, #52	; 0x34
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f004 f8d9 	bl	8004dbc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000c0a:	4b39      	ldr	r3, [pc, #228]	; (8000cf0 <MX_LTDC_Init+0xf8>)
 8000c0c:	4a39      	ldr	r2, [pc, #228]	; (8000cf4 <MX_LTDC_Init+0xfc>)
 8000c0e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c10:	4b37      	ldr	r3, [pc, #220]	; (8000cf0 <MX_LTDC_Init+0xf8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c16:	4b36      	ldr	r3, [pc, #216]	; (8000cf0 <MX_LTDC_Init+0xf8>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c1c:	4b34      	ldr	r3, [pc, #208]	; (8000cf0 <MX_LTDC_Init+0xf8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c22:	4b33      	ldr	r3, [pc, #204]	; (8000cf0 <MX_LTDC_Init+0xf8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000c28:	4b31      	ldr	r3, [pc, #196]	; (8000cf0 <MX_LTDC_Init+0xf8>)
 8000c2a:	2209      	movs	r2, #9
 8000c2c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000c2e:	4b30      	ldr	r3, [pc, #192]	; (8000cf0 <MX_LTDC_Init+0xf8>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000c34:	4b2e      	ldr	r3, [pc, #184]	; (8000cf0 <MX_LTDC_Init+0xf8>)
 8000c36:	221d      	movs	r2, #29
 8000c38:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000c3a:	4b2d      	ldr	r3, [pc, #180]	; (8000cf0 <MX_LTDC_Init+0xf8>)
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000c40:	4b2b      	ldr	r3, [pc, #172]	; (8000cf0 <MX_LTDC_Init+0xf8>)
 8000c42:	f240 120d 	movw	r2, #269	; 0x10d
 8000c46:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000c48:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <MX_LTDC_Init+0xf8>)
 8000c4a:	f240 1243 	movw	r2, #323	; 0x143
 8000c4e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000c50:	4b27      	ldr	r3, [pc, #156]	; (8000cf0 <MX_LTDC_Init+0xf8>)
 8000c52:	f240 1217 	movw	r2, #279	; 0x117
 8000c56:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000c58:	4b25      	ldr	r3, [pc, #148]	; (8000cf0 <MX_LTDC_Init+0xf8>)
 8000c5a:	f240 1247 	movw	r2, #327	; 0x147
 8000c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c60:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <MX_LTDC_Init+0xf8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c68:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <MX_LTDC_Init+0xf8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c70:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <MX_LTDC_Init+0xf8>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c78:	481d      	ldr	r0, [pc, #116]	; (8000cf0 <MX_LTDC_Init+0xf8>)
 8000c7a:	f001 fc2f 	bl	80024dc <HAL_LTDC_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000c84:	f000 fa3e 	bl	8001104 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000c8c:	23f0      	movs	r3, #240	; 0xf0
 8000c8e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000c94:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000c98:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000c9e:	23ff      	movs	r3, #255	; 0xff
 8000ca0:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000ca6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000caa:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000cac:	2307      	movs	r3, #7
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000cb0:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000cb6:	23f0      	movs	r3, #240	; 0xf0
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000cba:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_LTDC_Init+0xf8>)
 8000cda:	f001 fccf 	bl	800267c <HAL_LTDC_ConfigLayer>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000ce4:	f000 fa0e 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ce8:	bf00      	nop
 8000cea:	3738      	adds	r7, #56	; 0x38
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000174 	.word	0x20000174
 8000cf4:	40016800 	.word	0x40016800

08000cf8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b09a      	sub	sp, #104	; 0x68
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d14:	2230      	movs	r2, #48	; 0x30
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f004 f84f 	bl	8004dbc <memset>
  if(ltdcHandle->Instance==LTDC)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a81      	ldr	r2, [pc, #516]	; (8000f28 <HAL_LTDC_MspInit+0x230>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	f040 80fa 	bne.w	8000f1e <HAL_LTDC_MspInit+0x226>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d2a:	2308      	movs	r3, #8
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000d2e:	2332      	movs	r3, #50	; 0x32
 8000d30:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000d32:	2302      	movs	r3, #2
 8000d34:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000d36:	2300      	movs	r3, #0
 8000d38:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f002 fb18 	bl	8003374 <HAL_RCCEx_PeriphCLKConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000d4a:	f000 f9db 	bl	8001104 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
 8000d52:	4b76      	ldr	r3, [pc, #472]	; (8000f2c <HAL_LTDC_MspInit+0x234>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	4a75      	ldr	r2, [pc, #468]	; (8000f2c <HAL_LTDC_MspInit+0x234>)
 8000d58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5e:	4b73      	ldr	r3, [pc, #460]	; (8000f2c <HAL_LTDC_MspInit+0x234>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d66:	623b      	str	r3, [r7, #32]
 8000d68:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
 8000d6e:	4b6f      	ldr	r3, [pc, #444]	; (8000f2c <HAL_LTDC_MspInit+0x234>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a6e      	ldr	r2, [pc, #440]	; (8000f2c <HAL_LTDC_MspInit+0x234>)
 8000d74:	f043 0320 	orr.w	r3, r3, #32
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b6c      	ldr	r3, [pc, #432]	; (8000f2c <HAL_LTDC_MspInit+0x234>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0320 	and.w	r3, r3, #32
 8000d82:	61fb      	str	r3, [r7, #28]
 8000d84:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
 8000d8a:	4b68      	ldr	r3, [pc, #416]	; (8000f2c <HAL_LTDC_MspInit+0x234>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a67      	ldr	r2, [pc, #412]	; (8000f2c <HAL_LTDC_MspInit+0x234>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b65      	ldr	r3, [pc, #404]	; (8000f2c <HAL_LTDC_MspInit+0x234>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	61bb      	str	r3, [r7, #24]
 8000da0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	4b61      	ldr	r3, [pc, #388]	; (8000f2c <HAL_LTDC_MspInit+0x234>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	4a60      	ldr	r2, [pc, #384]	; (8000f2c <HAL_LTDC_MspInit+0x234>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4b5e      	ldr	r3, [pc, #376]	; (8000f2c <HAL_LTDC_MspInit+0x234>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	4b5a      	ldr	r3, [pc, #360]	; (8000f2c <HAL_LTDC_MspInit+0x234>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a59      	ldr	r2, [pc, #356]	; (8000f2c <HAL_LTDC_MspInit+0x234>)
 8000dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b57      	ldr	r3, [pc, #348]	; (8000f2c <HAL_LTDC_MspInit+0x234>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b53      	ldr	r3, [pc, #332]	; (8000f2c <HAL_LTDC_MspInit+0x234>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a52      	ldr	r2, [pc, #328]	; (8000f2c <HAL_LTDC_MspInit+0x234>)
 8000de4:	f043 0304 	orr.w	r3, r3, #4
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b50      	ldr	r3, [pc, #320]	; (8000f2c <HAL_LTDC_MspInit+0x234>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0304 	and.w	r3, r3, #4
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	4b4c      	ldr	r3, [pc, #304]	; (8000f2c <HAL_LTDC_MspInit+0x234>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a4b      	ldr	r2, [pc, #300]	; (8000f2c <HAL_LTDC_MspInit+0x234>)
 8000e00:	f043 0308 	orr.w	r3, r3, #8
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b49      	ldr	r3, [pc, #292]	; (8000f2c <HAL_LTDC_MspInit+0x234>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0308 	and.w	r3, r3, #8
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e16:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e24:	230e      	movs	r3, #14
 8000e26:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4840      	ldr	r0, [pc, #256]	; (8000f30 <HAL_LTDC_MspInit+0x238>)
 8000e30:	f000 ff52 	bl	8001cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000e34:	f641 0358 	movw	r3, #6232	; 0x1858
 8000e38:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e46:	230e      	movs	r3, #14
 8000e48:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4838      	ldr	r0, [pc, #224]	; (8000f34 <HAL_LTDC_MspInit+0x23c>)
 8000e52:	f000 ff41 	bl	8001cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000e56:	2303      	movs	r3, #3
 8000e58:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000e66:	2309      	movs	r3, #9
 8000e68:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4831      	ldr	r0, [pc, #196]	; (8000f38 <HAL_LTDC_MspInit+0x240>)
 8000e72:	f000 ff31 	bl	8001cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000e76:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000e7a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e88:	230e      	movs	r3, #14
 8000e8a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e90:	4619      	mov	r1, r3
 8000e92:	4829      	ldr	r0, [pc, #164]	; (8000f38 <HAL_LTDC_MspInit+0x240>)
 8000e94:	f000 ff20 	bl	8001cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000e98:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000e9c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eaa:	230e      	movs	r3, #14
 8000eac:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4821      	ldr	r0, [pc, #132]	; (8000f3c <HAL_LTDC_MspInit+0x244>)
 8000eb6:	f000 ff0f 	bl	8001cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000eba:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000ebe:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ecc:	230e      	movs	r3, #14
 8000ece:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	481a      	ldr	r0, [pc, #104]	; (8000f40 <HAL_LTDC_MspInit+0x248>)
 8000ed8:	f000 fefe 	bl	8001cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000edc:	2348      	movs	r3, #72	; 0x48
 8000ede:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eec:	230e      	movs	r3, #14
 8000eee:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4813      	ldr	r0, [pc, #76]	; (8000f44 <HAL_LTDC_MspInit+0x24c>)
 8000ef8:	f000 feee 	bl	8001cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000efc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f00:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f0e:	2309      	movs	r3, #9
 8000f10:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f16:	4619      	mov	r1, r3
 8000f18:	4808      	ldr	r0, [pc, #32]	; (8000f3c <HAL_LTDC_MspInit+0x244>)
 8000f1a:	f000 fedd 	bl	8001cd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000f1e:	bf00      	nop
 8000f20:	3768      	adds	r7, #104	; 0x68
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40016800 	.word	0x40016800
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40021400 	.word	0x40021400
 8000f34:	40020000 	.word	0x40020000
 8000f38:	40020400 	.word	0x40020400
 8000f3c:	40021800 	.word	0x40021800
 8000f40:	40020800 	.word	0x40020800
 8000f44:	40020c00 	.word	0x40020c00

08000f48 <displayNumber>:

uint32_t count = 0;
uint32_t countx = 0;


void displayNumber(uint32_t x, uint32_t y){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]

	char hexString[30];

	//uint32_t sec = x/1000;

	sprintf(hexString,"%d %d\r\n",x,y);
 8000f52:	f107 0008 	add.w	r0, r7, #8
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	490a      	ldr	r1, [pc, #40]	; (8000f84 <displayNumber+0x3c>)
 8000f5c:	f003 ff36 	bl	8004dcc <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) hexString, strlen(hexString), 1000);
 8000f60:	f107 0308 	add.w	r3, r7, #8
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff f943 	bl	80001f0 <strlen>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	f107 0108 	add.w	r1, r7, #8
 8000f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f76:	4804      	ldr	r0, [pc, #16]	; (8000f88 <displayNumber+0x40>)
 8000f78:	f003 f945 	bl	8004206 <HAL_UART_Transmit>

}
 8000f7c:	bf00      	nop
 8000f7e:	3728      	adds	r7, #40	; 0x28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	08005640 	.word	0x08005640
 8000f88:	2000034c 	.word	0x2000034c

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f90:	f000 fc62 	bl	8001858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f94:	f000 f838 	bl	8001008 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f98:	f7ff fc74 	bl	8000884 <MX_GPIO_Init>
  MX_CRC_Init();
 8000f9c:	f7ff fafc 	bl	8000598 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000fa0:	f7ff fb30 	bl	8000604 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000fa4:	f7ff fb82 	bl	80006ac <MX_FMC_Init>
  MX_I2C3_Init();
 8000fa8:	f7ff fd7c 	bl	8000aa4 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000fac:	f7ff fe24 	bl	8000bf8 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000fb0:	f000 f8ae 	bl	8001110 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000fb4:	f000 fa52 	bl	800145c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000fb8:	f000 fb30 	bl	800161c <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 8000fbc:	f000 fba0 	bl	8001700 <MX_USB_OTG_HS_HCD_Init>
  MX_TIM2_Init();
 8000fc0:	f000 fa9c 	bl	80014fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 8000fc4:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <main+0x68>)
 8000fc6:	f002 fc9f 	bl	8003908 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000fca:	480b      	ldr	r0, [pc, #44]	; (8000ff8 <main+0x6c>)
 8000fcc:	f002 fc9c 	bl	8003908 <HAL_TIM_Base_Start_IT>
  {

	  //No.1

	  //HAL_Delay(1000);
	  displayNumber(count,countx);
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <main+0x70>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <main+0x74>)
 8000fd6:	6812      	ldr	r2, [r2, #0]
 8000fd8:	4611      	mov	r1, r2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ffb4 	bl	8000f48 <displayNumber>


      HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8000fe0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fe4:	4807      	ldr	r0, [pc, #28]	; (8001004 <main+0x78>)
 8000fe6:	f001 f83c 	bl	8002062 <HAL_GPIO_TogglePin>
      HAL_Delay(1000);
 8000fea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fee:	f000 fc75 	bl	80018dc <HAL_Delay>
	  displayNumber(count,countx);
 8000ff2:	e7ed      	b.n	8000fd0 <main+0x44>
 8000ff4:	200002bc 	.word	0x200002bc
 8000ff8:	20000304 	.word	0x20000304
 8000ffc:	20000090 	.word	0x20000090
 8001000:	20000094 	.word	0x20000094
 8001004:	40021800 	.word	0x40021800

08001008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b094      	sub	sp, #80	; 0x50
 800100c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100e:	f107 0320 	add.w	r3, r7, #32
 8001012:	2230      	movs	r2, #48	; 0x30
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f003 fed0 	bl	8004dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800101c:	f107 030c 	add.w	r3, r7, #12
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <SystemClock_Config+0xd0>)
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001034:	4a28      	ldr	r2, [pc, #160]	; (80010d8 <SystemClock_Config+0xd0>)
 8001036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103a:	6413      	str	r3, [r2, #64]	; 0x40
 800103c:	4b26      	ldr	r3, [pc, #152]	; (80010d8 <SystemClock_Config+0xd0>)
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001048:	2300      	movs	r3, #0
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	4b23      	ldr	r3, [pc, #140]	; (80010dc <SystemClock_Config+0xd4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001054:	4a21      	ldr	r2, [pc, #132]	; (80010dc <SystemClock_Config+0xd4>)
 8001056:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <SystemClock_Config+0xd4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001068:	2301      	movs	r3, #1
 800106a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800106c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001072:	2302      	movs	r3, #2
 8001074:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001076:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800107a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800107c:	2304      	movs	r3, #4
 800107e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001080:	2378      	movs	r3, #120	; 0x78
 8001082:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001084:	2302      	movs	r3, #2
 8001086:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001088:	2305      	movs	r3, #5
 800108a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108c:	f107 0320 	add.w	r3, r7, #32
 8001090:	4618      	mov	r0, r3
 8001092:	f001 fcc9 	bl	8002a28 <HAL_RCC_OscConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800109c:	f000 f832 	bl	8001104 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a0:	230f      	movs	r3, #15
 80010a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a4:	2302      	movs	r3, #2
 80010a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	2103      	movs	r1, #3
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 ff2a 	bl	8002f18 <HAL_RCC_ClockConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80010ca:	f000 f81b 	bl	8001104 <Error_Handler>
  }
}
 80010ce:	bf00      	nop
 80010d0:	3750      	adds	r7, #80	; 0x50
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40007000 	.word	0x40007000

080010e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d101      	bne.n	80010f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010f2:	f000 fbd3 	bl	800189c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40001000 	.word	0x40001000

08001104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001108:	b672      	cpsid	i
}
 800110a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800110c:	e7fe      	b.n	800110c <Error_Handler+0x8>
	...

08001110 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001114:	4b17      	ldr	r3, [pc, #92]	; (8001174 <MX_SPI5_Init+0x64>)
 8001116:	4a18      	ldr	r2, [pc, #96]	; (8001178 <MX_SPI5_Init+0x68>)
 8001118:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <MX_SPI5_Init+0x64>)
 800111c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001120:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <MX_SPI5_Init+0x64>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <MX_SPI5_Init+0x64>)
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <MX_SPI5_Init+0x64>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <MX_SPI5_Init+0x64>)
 8001136:	2200      	movs	r2, #0
 8001138:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_SPI5_Init+0x64>)
 800113c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001140:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <MX_SPI5_Init+0x64>)
 8001144:	2218      	movs	r2, #24
 8001146:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001148:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <MX_SPI5_Init+0x64>)
 800114a:	2200      	movs	r2, #0
 800114c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_SPI5_Init+0x64>)
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <MX_SPI5_Init+0x64>)
 8001156:	2200      	movs	r2, #0
 8001158:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_SPI5_Init+0x64>)
 800115c:	220a      	movs	r2, #10
 800115e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001160:	4804      	ldr	r0, [pc, #16]	; (8001174 <MX_SPI5_Init+0x64>)
 8001162:	f002 faf9 	bl	8003758 <HAL_SPI_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800116c:	f7ff ffca 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	2000021c 	.word	0x2000021c
 8001178:	40015000 	.word	0x40015000

0800117c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a19      	ldr	r2, [pc, #100]	; (8001200 <HAL_SPI_MspInit+0x84>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d12c      	bne.n	80011f8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <HAL_SPI_MspInit+0x88>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	4a17      	ldr	r2, [pc, #92]	; (8001204 <HAL_SPI_MspInit+0x88>)
 80011a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011ac:	6453      	str	r3, [r2, #68]	; 0x44
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_SPI_MspInit+0x88>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_SPI_MspInit+0x88>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a10      	ldr	r2, [pc, #64]	; (8001204 <HAL_SPI_MspInit+0x88>)
 80011c4:	f043 0320 	orr.w	r3, r3, #32
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_SPI_MspInit+0x88>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0320 	and.w	r3, r3, #32
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80011d6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80011da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80011e8:	2305      	movs	r3, #5
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <HAL_SPI_MspInit+0x8c>)
 80011f4:	f000 fd70 	bl	8001cd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	; 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40015000 	.word	0x40015000
 8001204:	40023800 	.word	0x40023800
 8001208:	40021400 	.word	0x40021400

0800120c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <HAL_MspInit+0x4c>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <HAL_MspInit+0x4c>)
 800121c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001220:	6453      	str	r3, [r2, #68]	; 0x44
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <HAL_MspInit+0x4c>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	603b      	str	r3, [r7, #0]
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_MspInit+0x4c>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	4a08      	ldr	r2, [pc, #32]	; (8001258 <HAL_MspInit+0x4c>)
 8001238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123c:	6413      	str	r3, [r2, #64]	; 0x40
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_MspInit+0x4c>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800124a:	2005      	movs	r0, #5
 800124c:	f000 fc17 	bl	8001a7e <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40023800 	.word	0x40023800

0800125c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	; 0x30
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800126c:	2200      	movs	r2, #0
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	2036      	movs	r0, #54	; 0x36
 8001272:	f000 fc0f 	bl	8001a94 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001276:	2036      	movs	r0, #54	; 0x36
 8001278:	f000 fc28 	bl	8001acc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <HAL_InitTick+0xa4>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	4a1e      	ldr	r2, [pc, #120]	; (8001300 <HAL_InitTick+0xa4>)
 8001286:	f043 0310 	orr.w	r3, r3, #16
 800128a:	6413      	str	r3, [r2, #64]	; 0x40
 800128c:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <HAL_InitTick+0xa4>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	f003 0310 	and.w	r3, r3, #16
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001298:	f107 0210 	add.w	r2, r7, #16
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4611      	mov	r1, r2
 80012a2:	4618      	mov	r0, r3
 80012a4:	f002 f834 	bl	8003310 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80012a8:	f002 f80a 	bl	80032c0 <HAL_RCC_GetPCLK1Freq>
 80012ac:	4603      	mov	r3, r0
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b4:	4a13      	ldr	r2, [pc, #76]	; (8001304 <HAL_InitTick+0xa8>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	0c9b      	lsrs	r3, r3, #18
 80012bc:	3b01      	subs	r3, #1
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <HAL_InitTick+0xac>)
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <HAL_InitTick+0xb0>)
 80012c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <HAL_InitTick+0xac>)
 80012c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012cc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012ce:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <HAL_InitTick+0xac>)
 80012d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <HAL_InitTick+0xac>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <HAL_InitTick+0xac>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80012e0:	4809      	ldr	r0, [pc, #36]	; (8001308 <HAL_InitTick+0xac>)
 80012e2:	f002 fac2 	bl	800386a <HAL_TIM_Base_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d104      	bne.n	80012f6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80012ec:	4806      	ldr	r0, [pc, #24]	; (8001308 <HAL_InitTick+0xac>)
 80012ee:	f002 fb0b 	bl	8003908 <HAL_TIM_Base_Start_IT>
 80012f2:	4603      	mov	r3, r0
 80012f4:	e000      	b.n	80012f8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3730      	adds	r7, #48	; 0x30
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	431bde83 	.word	0x431bde83
 8001308:	20000274 	.word	0x20000274
 800130c:	40001000 	.word	0x40001000

08001310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <NMI_Handler+0x4>

08001316 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131a:	e7fe      	b.n	800131a <HardFault_Handler+0x4>

0800131c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001320:	e7fe      	b.n	8001320 <MemManage_Handler+0x4>

08001322 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001326:	e7fe      	b.n	8001326 <BusFault_Handler+0x4>

08001328 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800132c:	e7fe      	b.n	800132c <UsageFault_Handler+0x4>

0800132e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132e:	b480      	push	{r7}
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800136c:	4804      	ldr	r0, [pc, #16]	; (8001380 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800136e:	f002 fb3b 	bl	80039e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  count++;
 8001372:	4b04      	ldr	r3, [pc, #16]	; (8001384 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	4a02      	ldr	r2, [pc, #8]	; (8001384 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 800137a:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200002bc 	.word	0x200002bc
 8001384:	20000090 	.word	0x20000090

08001388 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800138c:	4807      	ldr	r0, [pc, #28]	; (80013ac <TIM2_IRQHandler+0x24>)
 800138e:	f002 fb2b 	bl	80039e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  countx++;
 8001392:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <TIM2_IRQHandler+0x28>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	3301      	adds	r3, #1
 8001398:	4a05      	ldr	r2, [pc, #20]	; (80013b0 <TIM2_IRQHandler+0x28>)
 800139a:	6013      	str	r3, [r2, #0]
  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 800139c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a0:	4804      	ldr	r0, [pc, #16]	; (80013b4 <TIM2_IRQHandler+0x2c>)
 80013a2:	f000 fe5e 	bl	8002062 <HAL_GPIO_TogglePin>
  //displayClock(count);
  /* USER CODE END TIM2_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000304 	.word	0x20000304
 80013b0:	20000094 	.word	0x20000094
 80013b4:	40021800 	.word	0x40021800

080013b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013bc:	4802      	ldr	r0, [pc, #8]	; (80013c8 <TIM6_DAC_IRQHandler+0x10>)
 80013be:	f002 fb13 	bl	80039e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000274 	.word	0x20000274

080013cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d4:	4a14      	ldr	r2, [pc, #80]	; (8001428 <_sbrk+0x5c>)
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <_sbrk+0x60>)
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e0:	4b13      	ldr	r3, [pc, #76]	; (8001430 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d102      	bne.n	80013ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <_sbrk+0x64>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	; (8001434 <_sbrk+0x68>)
 80013ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <_sbrk+0x64>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d207      	bcs.n	800140c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013fc:	f003 fcb4 	bl	8004d68 <__errno>
 8001400:	4603      	mov	r3, r0
 8001402:	220c      	movs	r2, #12
 8001404:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
 800140a:	e009      	b.n	8001420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <_sbrk+0x64>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001412:	4b07      	ldr	r3, [pc, #28]	; (8001430 <_sbrk+0x64>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	4a05      	ldr	r2, [pc, #20]	; (8001430 <_sbrk+0x64>)
 800141c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20030000 	.word	0x20030000
 800142c:	00000400 	.word	0x00000400
 8001430:	20000098 	.word	0x20000098
 8001434:	200006a8 	.word	0x200006a8

08001438 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <SystemInit+0x20>)
 800143e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001442:	4a05      	ldr	r2, [pc, #20]	; (8001458 <SystemInit+0x20>)
 8001444:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001448:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001470:	463b      	mov	r3, r7
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001478:	4b1e      	ldr	r3, [pc, #120]	; (80014f4 <MX_TIM1_Init+0x98>)
 800147a:	4a1f      	ldr	r2, [pc, #124]	; (80014f8 <MX_TIM1_Init+0x9c>)
 800147c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 120-1;
 800147e:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <MX_TIM1_Init+0x98>)
 8001480:	2277      	movs	r2, #119	; 0x77
 8001482:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <MX_TIM1_Init+0x98>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <MX_TIM1_Init+0x98>)
 800148c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001490:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001492:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_TIM1_Init+0x98>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001498:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <MX_TIM1_Init+0x98>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <MX_TIM1_Init+0x98>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014a4:	4813      	ldr	r0, [pc, #76]	; (80014f4 <MX_TIM1_Init+0x98>)
 80014a6:	f002 f9e0 	bl	800386a <HAL_TIM_Base_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80014b0:	f7ff fe28 	bl	8001104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014ba:	f107 0308 	add.w	r3, r7, #8
 80014be:	4619      	mov	r1, r3
 80014c0:	480c      	ldr	r0, [pc, #48]	; (80014f4 <MX_TIM1_Init+0x98>)
 80014c2:	f002 fb99 	bl	8003bf8 <HAL_TIM_ConfigClockSource>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80014cc:	f7ff fe1a 	bl	8001104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014d0:	2320      	movs	r3, #32
 80014d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014d8:	463b      	mov	r3, r7
 80014da:	4619      	mov	r1, r3
 80014dc:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_TIM1_Init+0x98>)
 80014de:	f002 fdb5 	bl	800404c <HAL_TIMEx_MasterConfigSynchronization>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80014e8:	f7ff fe0c 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014ec:	bf00      	nop
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	200002bc 	.word	0x200002bc
 80014f8:	40010000 	.word	0x40010000

080014fc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001502:	f107 0308 	add.w	r3, r7, #8
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	605a      	str	r2, [r3, #4]
 800150c:	609a      	str	r2, [r3, #8]
 800150e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001510:	463b      	mov	r3, r7
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001518:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <MX_TIM2_Init+0x94>)
 800151a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800151e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60-1;
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <MX_TIM2_Init+0x94>)
 8001522:	223b      	movs	r2, #59	; 0x3b
 8001524:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <MX_TIM2_Init+0x94>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <MX_TIM2_Init+0x94>)
 800152e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001532:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <MX_TIM2_Init+0x94>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <MX_TIM2_Init+0x94>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001540:	4813      	ldr	r0, [pc, #76]	; (8001590 <MX_TIM2_Init+0x94>)
 8001542:	f002 f992 	bl	800386a <HAL_TIM_Base_Init>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800154c:	f7ff fdda 	bl	8001104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001554:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001556:	f107 0308 	add.w	r3, r7, #8
 800155a:	4619      	mov	r1, r3
 800155c:	480c      	ldr	r0, [pc, #48]	; (8001590 <MX_TIM2_Init+0x94>)
 800155e:	f002 fb4b 	bl	8003bf8 <HAL_TIM_ConfigClockSource>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001568:	f7ff fdcc 	bl	8001104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800156c:	2320      	movs	r3, #32
 800156e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001574:	463b      	mov	r3, r7
 8001576:	4619      	mov	r1, r3
 8001578:	4805      	ldr	r0, [pc, #20]	; (8001590 <MX_TIM2_Init+0x94>)
 800157a:	f002 fd67 	bl	800404c <HAL_TIMEx_MasterConfigSynchronization>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001584:	f7ff fdbe 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000304 	.word	0x20000304

08001594 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a1c      	ldr	r2, [pc, #112]	; (8001614 <HAL_TIM_Base_MspInit+0x80>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d116      	bne.n	80015d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <HAL_TIM_Base_MspInit+0x84>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	4a1a      	ldr	r2, [pc, #104]	; (8001618 <HAL_TIM_Base_MspInit+0x84>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6453      	str	r3, [r2, #68]	; 0x44
 80015b6:	4b18      	ldr	r3, [pc, #96]	; (8001618 <HAL_TIM_Base_MspInit+0x84>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2101      	movs	r1, #1
 80015c6:	2019      	movs	r0, #25
 80015c8:	f000 fa64 	bl	8001a94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80015cc:	2019      	movs	r0, #25
 80015ce:	f000 fa7d 	bl	8001acc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80015d2:	e01a      	b.n	800160a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015dc:	d115      	bne.n	800160a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <HAL_TIM_Base_MspInit+0x84>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <HAL_TIM_Base_MspInit+0x84>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6413      	str	r3, [r2, #64]	; 0x40
 80015ee:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <HAL_TIM_Base_MspInit+0x84>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2102      	movs	r1, #2
 80015fe:	201c      	movs	r0, #28
 8001600:	f000 fa48 	bl	8001a94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001604:	201c      	movs	r0, #28
 8001606:	f000 fa61 	bl	8001acc <HAL_NVIC_EnableIRQ>
}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40010000 	.word	0x40010000
 8001618:	40023800 	.word	0x40023800

0800161c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001620:	4b11      	ldr	r3, [pc, #68]	; (8001668 <MX_USART1_UART_Init+0x4c>)
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <MX_USART1_UART_Init+0x50>)
 8001624:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001626:	4b10      	ldr	r3, [pc, #64]	; (8001668 <MX_USART1_UART_Init+0x4c>)
 8001628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800162c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <MX_USART1_UART_Init+0x4c>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <MX_USART1_UART_Init+0x4c>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <MX_USART1_UART_Init+0x4c>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <MX_USART1_UART_Init+0x4c>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b08      	ldr	r3, [pc, #32]	; (8001668 <MX_USART1_UART_Init+0x4c>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <MX_USART1_UART_Init+0x4c>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001652:	4805      	ldr	r0, [pc, #20]	; (8001668 <MX_USART1_UART_Init+0x4c>)
 8001654:	f002 fd8a 	bl	800416c <HAL_UART_Init>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800165e:	f7ff fd51 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	2000034c 	.word	0x2000034c
 800166c:	40011000 	.word	0x40011000

08001670 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08a      	sub	sp, #40	; 0x28
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a19      	ldr	r2, [pc, #100]	; (80016f4 <HAL_UART_MspInit+0x84>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d12c      	bne.n	80016ec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <HAL_UART_MspInit+0x88>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	4a17      	ldr	r2, [pc, #92]	; (80016f8 <HAL_UART_MspInit+0x88>)
 800169c:	f043 0310 	orr.w	r3, r3, #16
 80016a0:	6453      	str	r3, [r2, #68]	; 0x44
 80016a2:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <HAL_UART_MspInit+0x88>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f003 0310 	and.w	r3, r3, #16
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_UART_MspInit+0x88>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a10      	ldr	r2, [pc, #64]	; (80016f8 <HAL_UART_MspInit+0x88>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <HAL_UART_MspInit+0x88>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80016ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016dc:	2307      	movs	r3, #7
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	4805      	ldr	r0, [pc, #20]	; (80016fc <HAL_UART_MspInit+0x8c>)
 80016e8:	f000 faf6 	bl	8001cd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80016ec:	bf00      	nop
 80016ee:	3728      	adds	r7, #40	; 0x28
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40011000 	.word	0x40011000
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40020000 	.word	0x40020000

08001700 <MX_USB_OTG_HS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_HS;

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_HCD_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001706:	4a13      	ldr	r2, [pc, #76]	; (8001754 <MX_USB_OTG_HS_HCD_Init+0x54>)
 8001708:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800170a:	4b11      	ldr	r3, [pc, #68]	; (8001750 <MX_USB_OTG_HS_HCD_Init+0x50>)
 800170c:	220c      	movs	r2, #12
 800170e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001712:	2201      	movs	r2, #1
 8001714:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <MX_USB_OTG_HS_HCD_Init+0x50>)
 800171e:	2202      	movs	r2, #2
 8001720:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001724:	2200      	movs	r2, #0
 8001726:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <MX_USB_OTG_HS_HCD_Init+0x50>)
 800172a:	2200      	movs	r2, #0
 800172c:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001730:	2200      	movs	r2, #0
 8001732:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8001736:	2200      	movs	r2, #0
 8001738:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800173a:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_USB_OTG_HS_HCD_Init+0x50>)
 800173c:	f000 fcab 	bl	8002096 <HAL_HCD_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8001746:	f7ff fcdd 	bl	8001104 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000390 	.word	0x20000390
 8001754:	40040000 	.word	0x40040000

08001758 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a20      	ldr	r2, [pc, #128]	; (80017f8 <HAL_HCD_MspInit+0xa0>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d139      	bne.n	80017ee <HAL_HCD_MspInit+0x96>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b1f      	ldr	r3, [pc, #124]	; (80017fc <HAL_HCD_MspInit+0xa4>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a1e      	ldr	r2, [pc, #120]	; (80017fc <HAL_HCD_MspInit+0xa4>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <HAL_HCD_MspInit+0xa4>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001796:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800179a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80017a8:	230c      	movs	r3, #12
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4619      	mov	r1, r3
 80017b2:	4813      	ldr	r0, [pc, #76]	; (8001800 <HAL_HCD_MspInit+0xa8>)
 80017b4:	f000 fa90 	bl	8001cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80017b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017be:	2300      	movs	r3, #0
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	480c      	ldr	r0, [pc, #48]	; (8001800 <HAL_HCD_MspInit+0xa8>)
 80017ce:	f000 fa83 	bl	8001cd8 <HAL_GPIO_Init>

    /* USB_OTG_HS clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_HCD_MspInit+0xa4>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a08      	ldr	r2, [pc, #32]	; (80017fc <HAL_HCD_MspInit+0xa4>)
 80017dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_HCD_MspInit+0xa4>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80017ee:	bf00      	nop
 80017f0:	3728      	adds	r7, #40	; 0x28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40040000 	.word	0x40040000
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020400 	.word	0x40020400

08001804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800183c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001808:	480d      	ldr	r0, [pc, #52]	; (8001840 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800180a:	490e      	ldr	r1, [pc, #56]	; (8001844 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800180c:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001810:	e002      	b.n	8001818 <LoopCopyDataInit>

08001812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001816:	3304      	adds	r3, #4

08001818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800181c:	d3f9      	bcc.n	8001812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181e:	4a0b      	ldr	r2, [pc, #44]	; (800184c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001820:	4c0b      	ldr	r4, [pc, #44]	; (8001850 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001824:	e001      	b.n	800182a <LoopFillZerobss>

08001826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001828:	3204      	adds	r2, #4

0800182a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800182c:	d3fb      	bcc.n	8001826 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800182e:	f7ff fe03 	bl	8001438 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001832:	f003 fa9f 	bl	8004d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001836:	f7ff fba9 	bl	8000f8c <main>
  bx  lr    
 800183a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800183c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001844:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001848:	080056b0 	.word	0x080056b0
  ldr r2, =_sbss
 800184c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001850:	200006a8 	.word	0x200006a8

08001854 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001854:	e7fe      	b.n	8001854 <ADC_IRQHandler>
	...

08001858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800185c:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <HAL_Init+0x40>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0d      	ldr	r2, [pc, #52]	; (8001898 <HAL_Init+0x40>)
 8001862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001866:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <HAL_Init+0x40>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <HAL_Init+0x40>)
 800186e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001872:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <HAL_Init+0x40>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a07      	ldr	r2, [pc, #28]	; (8001898 <HAL_Init+0x40>)
 800187a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001880:	2003      	movs	r0, #3
 8001882:	f000 f8fc 	bl	8001a7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001886:	2000      	movs	r0, #0
 8001888:	f7ff fce8 	bl	800125c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800188c:	f7ff fcbe 	bl	800120c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023c00 	.word	0x40023c00

0800189c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018a0:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_IncTick+0x20>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	461a      	mov	r2, r3
 80018a6:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_IncTick+0x24>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <HAL_IncTick+0x24>)
 80018ae:	6013      	str	r3, [r2, #0]
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000008 	.word	0x20000008
 80018c0:	20000694 	.word	0x20000694

080018c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return uwTick;
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <HAL_GetTick+0x14>)
 80018ca:	681b      	ldr	r3, [r3, #0]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000694 	.word	0x20000694

080018dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018e4:	f7ff ffee 	bl	80018c4 <HAL_GetTick>
 80018e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f4:	d005      	beq.n	8001902 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018f6:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <HAL_Delay+0x44>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4413      	add	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001902:	bf00      	nop
 8001904:	f7ff ffde 	bl	80018c4 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	429a      	cmp	r2, r3
 8001912:	d8f7      	bhi.n	8001904 <HAL_Delay+0x28>
  {
  }
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000008 	.word	0x20000008

08001924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001934:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <__NVIC_SetPriorityGrouping+0x44>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193a:	68ba      	ldr	r2, [r7, #8]
 800193c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001940:	4013      	ands	r3, r2
 8001942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800194c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001956:	4a04      	ldr	r2, [pc, #16]	; (8001968 <__NVIC_SetPriorityGrouping+0x44>)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	60d3      	str	r3, [r2, #12]
}
 800195c:	bf00      	nop
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <__NVIC_GetPriorityGrouping+0x18>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	0a1b      	lsrs	r3, r3, #8
 8001976:	f003 0307 	and.w	r3, r3, #7
}
 800197a:	4618      	mov	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	2b00      	cmp	r3, #0
 8001998:	db0b      	blt.n	80019b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	f003 021f 	and.w	r2, r3, #31
 80019a0:	4907      	ldr	r1, [pc, #28]	; (80019c0 <__NVIC_EnableIRQ+0x38>)
 80019a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a6:	095b      	lsrs	r3, r3, #5
 80019a8:	2001      	movs	r0, #1
 80019aa:	fa00 f202 	lsl.w	r2, r0, r2
 80019ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000e100 	.word	0xe000e100

080019c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	6039      	str	r1, [r7, #0]
 80019ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	db0a      	blt.n	80019ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	490c      	ldr	r1, [pc, #48]	; (8001a10 <__NVIC_SetPriority+0x4c>)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	0112      	lsls	r2, r2, #4
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	440b      	add	r3, r1
 80019e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019ec:	e00a      	b.n	8001a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	4908      	ldr	r1, [pc, #32]	; (8001a14 <__NVIC_SetPriority+0x50>)
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	3b04      	subs	r3, #4
 80019fc:	0112      	lsls	r2, r2, #4
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	440b      	add	r3, r1
 8001a02:	761a      	strb	r2, [r3, #24]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000e100 	.word	0xe000e100
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b089      	sub	sp, #36	; 0x24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	60b9      	str	r1, [r7, #8]
 8001a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f1c3 0307 	rsb	r3, r3, #7
 8001a32:	2b04      	cmp	r3, #4
 8001a34:	bf28      	it	cs
 8001a36:	2304      	movcs	r3, #4
 8001a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	2b06      	cmp	r3, #6
 8001a40:	d902      	bls.n	8001a48 <NVIC_EncodePriority+0x30>
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3b03      	subs	r3, #3
 8001a46:	e000      	b.n	8001a4a <NVIC_EncodePriority+0x32>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43da      	mvns	r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a60:	f04f 31ff 	mov.w	r1, #4294967295
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6a:	43d9      	mvns	r1, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a70:	4313      	orrs	r3, r2
         );
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3724      	adds	r7, #36	; 0x24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ff4c 	bl	8001924 <__NVIC_SetPriorityGrouping>
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
 8001aa0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa6:	f7ff ff61 	bl	800196c <__NVIC_GetPriorityGrouping>
 8001aaa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	68b9      	ldr	r1, [r7, #8]
 8001ab0:	6978      	ldr	r0, [r7, #20]
 8001ab2:	f7ff ffb1 	bl	8001a18 <NVIC_EncodePriority>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001abc:	4611      	mov	r1, r2
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff ff80 	bl	80019c4 <__NVIC_SetPriority>
}
 8001ac4:	bf00      	nop
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff ff54 	bl	8001988 <__NVIC_EnableIRQ>
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00e      	b.n	8001b18 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	795b      	ldrb	r3, [r3, #5]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d105      	bne.n	8001b10 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7fe fd58 	bl	80005c0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e03b      	b.n	8001baa <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d106      	bne.n	8001b4c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7fe fd8e 	bl	8000668 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b70:	f023 0107 	bic.w	r1, r3, #7
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689a      	ldr	r2, [r3, #8]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b8a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68d1      	ldr	r1, [r2, #12]
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6812      	ldr	r2, [r2, #0]
 8001b96:	430b      	orrs	r3, r1
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b087      	sub	sp, #28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_DMA2D_ConfigLayer+0x20>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e079      	b.n	8001cc8 <HAL_DMA2D_ConfigLayer+0x114>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2202      	movs	r2, #2
 8001be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	3318      	adds	r3, #24
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	041b      	lsls	r3, r3, #16
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001bfe:	4b35      	ldr	r3, [pc, #212]	; (8001cd4 <HAL_DMA2D_ConfigLayer+0x120>)
 8001c00:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b0a      	cmp	r3, #10
 8001c08:	d003      	beq.n	8001c12 <HAL_DMA2D_ConfigLayer+0x5e>
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b09      	cmp	r3, #9
 8001c10:	d107      	bne.n	8001c22 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	e005      	b.n	8001c2e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	061b      	lsls	r3, r3, #24
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d120      	bne.n	8001c76 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	ea02 0103 	and.w	r1, r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	6812      	ldr	r2, [r2, #0]
 8001c54:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b0a      	cmp	r3, #10
 8001c5c:	d003      	beq.n	8001c66 <HAL_DMA2D_ConfigLayer+0xb2>
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b09      	cmp	r3, #9
 8001c64:	d127      	bne.n	8001cb6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001c72:	629a      	str	r2, [r3, #40]	; 0x28
 8001c74:	e01f      	b.n	8001cb6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	69da      	ldr	r2, [r3, #28]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	ea02 0103 	and.w	r1, r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b0a      	cmp	r3, #10
 8001c9e:	d003      	beq.n	8001ca8 <HAL_DMA2D_ConfigLayer+0xf4>
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b09      	cmp	r3, #9
 8001ca6:	d106      	bne.n	8001cb6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	68da      	ldr	r2, [r3, #12]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001cb4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	371c      	adds	r7, #28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	ff03000f 	.word	0xff03000f

08001cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	e177      	b.n	8001fe4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	f040 8166 	bne.w	8001fde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d005      	beq.n	8001d2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d130      	bne.n	8001d8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	2203      	movs	r2, #3
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d60:	2201      	movs	r2, #1
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	f003 0201 	and.w	r2, r3, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d017      	beq.n	8001dc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	2203      	movs	r2, #3
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d123      	bne.n	8001e1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	08da      	lsrs	r2, r3, #3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3208      	adds	r2, #8
 8001ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	220f      	movs	r2, #15
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	08da      	lsrs	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3208      	adds	r2, #8
 8001e16:	69b9      	ldr	r1, [r7, #24]
 8001e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0203 	and.w	r2, r3, #3
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80c0 	beq.w	8001fde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b66      	ldr	r3, [pc, #408]	; (8001ffc <HAL_GPIO_Init+0x324>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	4a65      	ldr	r2, [pc, #404]	; (8001ffc <HAL_GPIO_Init+0x324>)
 8001e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6e:	4b63      	ldr	r3, [pc, #396]	; (8001ffc <HAL_GPIO_Init+0x324>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e7a:	4a61      	ldr	r2, [pc, #388]	; (8002000 <HAL_GPIO_Init+0x328>)
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	3302      	adds	r3, #2
 8001e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	220f      	movs	r2, #15
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a58      	ldr	r2, [pc, #352]	; (8002004 <HAL_GPIO_Init+0x32c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d037      	beq.n	8001f16 <HAL_GPIO_Init+0x23e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a57      	ldr	r2, [pc, #348]	; (8002008 <HAL_GPIO_Init+0x330>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d031      	beq.n	8001f12 <HAL_GPIO_Init+0x23a>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a56      	ldr	r2, [pc, #344]	; (800200c <HAL_GPIO_Init+0x334>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d02b      	beq.n	8001f0e <HAL_GPIO_Init+0x236>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a55      	ldr	r2, [pc, #340]	; (8002010 <HAL_GPIO_Init+0x338>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d025      	beq.n	8001f0a <HAL_GPIO_Init+0x232>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a54      	ldr	r2, [pc, #336]	; (8002014 <HAL_GPIO_Init+0x33c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d01f      	beq.n	8001f06 <HAL_GPIO_Init+0x22e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a53      	ldr	r2, [pc, #332]	; (8002018 <HAL_GPIO_Init+0x340>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d019      	beq.n	8001f02 <HAL_GPIO_Init+0x22a>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a52      	ldr	r2, [pc, #328]	; (800201c <HAL_GPIO_Init+0x344>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d013      	beq.n	8001efe <HAL_GPIO_Init+0x226>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a51      	ldr	r2, [pc, #324]	; (8002020 <HAL_GPIO_Init+0x348>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d00d      	beq.n	8001efa <HAL_GPIO_Init+0x222>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a50      	ldr	r2, [pc, #320]	; (8002024 <HAL_GPIO_Init+0x34c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d007      	beq.n	8001ef6 <HAL_GPIO_Init+0x21e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a4f      	ldr	r2, [pc, #316]	; (8002028 <HAL_GPIO_Init+0x350>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d101      	bne.n	8001ef2 <HAL_GPIO_Init+0x21a>
 8001eee:	2309      	movs	r3, #9
 8001ef0:	e012      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001ef2:	230a      	movs	r3, #10
 8001ef4:	e010      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001ef6:	2308      	movs	r3, #8
 8001ef8:	e00e      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001efa:	2307      	movs	r3, #7
 8001efc:	e00c      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001efe:	2306      	movs	r3, #6
 8001f00:	e00a      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001f02:	2305      	movs	r3, #5
 8001f04:	e008      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001f06:	2304      	movs	r3, #4
 8001f08:	e006      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e004      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e002      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <HAL_GPIO_Init+0x240>
 8001f16:	2300      	movs	r3, #0
 8001f18:	69fa      	ldr	r2, [r7, #28]
 8001f1a:	f002 0203 	and.w	r2, r2, #3
 8001f1e:	0092      	lsls	r2, r2, #2
 8001f20:	4093      	lsls	r3, r2
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f28:	4935      	ldr	r1, [pc, #212]	; (8002000 <HAL_GPIO_Init+0x328>)
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	089b      	lsrs	r3, r3, #2
 8001f2e:	3302      	adds	r3, #2
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f36:	4b3d      	ldr	r3, [pc, #244]	; (800202c <HAL_GPIO_Init+0x354>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4013      	ands	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f5a:	4a34      	ldr	r2, [pc, #208]	; (800202c <HAL_GPIO_Init+0x354>)
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f60:	4b32      	ldr	r3, [pc, #200]	; (800202c <HAL_GPIO_Init+0x354>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f84:	4a29      	ldr	r2, [pc, #164]	; (800202c <HAL_GPIO_Init+0x354>)
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f8a:	4b28      	ldr	r3, [pc, #160]	; (800202c <HAL_GPIO_Init+0x354>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fae:	4a1f      	ldr	r2, [pc, #124]	; (800202c <HAL_GPIO_Init+0x354>)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fb4:	4b1d      	ldr	r3, [pc, #116]	; (800202c <HAL_GPIO_Init+0x354>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fd8:	4a14      	ldr	r2, [pc, #80]	; (800202c <HAL_GPIO_Init+0x354>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	61fb      	str	r3, [r7, #28]
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	2b0f      	cmp	r3, #15
 8001fe8:	f67f ae84 	bls.w	8001cf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
 8001ff0:	3724      	adds	r7, #36	; 0x24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40013800 	.word	0x40013800
 8002004:	40020000 	.word	0x40020000
 8002008:	40020400 	.word	0x40020400
 800200c:	40020800 	.word	0x40020800
 8002010:	40020c00 	.word	0x40020c00
 8002014:	40021000 	.word	0x40021000
 8002018:	40021400 	.word	0x40021400
 800201c:	40021800 	.word	0x40021800
 8002020:	40021c00 	.word	0x40021c00
 8002024:	40022000 	.word	0x40022000
 8002028:	40022400 	.word	0x40022400
 800202c:	40013c00 	.word	0x40013c00

08002030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	807b      	strh	r3, [r7, #2]
 800203c:	4613      	mov	r3, r2
 800203e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002040:	787b      	ldrb	r3, [r7, #1]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002046:	887a      	ldrh	r2, [r7, #2]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800204c:	e003      	b.n	8002056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800204e:	887b      	ldrh	r3, [r7, #2]
 8002050:	041a      	lsls	r2, r3, #16
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	619a      	str	r2, [r3, #24]
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002062:	b480      	push	{r7}
 8002064:	b085      	sub	sp, #20
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002074:	887a      	ldrh	r2, [r7, #2]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4013      	ands	r3, r2
 800207a:	041a      	lsls	r2, r3, #16
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	43d9      	mvns	r1, r3
 8002080:	887b      	ldrh	r3, [r7, #2]
 8002082:	400b      	ands	r3, r1
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	619a      	str	r2, [r3, #24]
}
 800208a:	bf00      	nop
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002096:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002098:	b08f      	sub	sp, #60	; 0x3c
 800209a:	af0a      	add	r7, sp, #40	; 0x28
 800209c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e054      	b.n	8002152 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d106      	bne.n	80020c8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff fb48 	bl	8001758 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2203      	movs	r2, #3
 80020cc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d102      	bne.n	80020e2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f002 fca9 	bl	8004a3e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	603b      	str	r3, [r7, #0]
 80020f2:	687e      	ldr	r6, [r7, #4]
 80020f4:	466d      	mov	r5, sp
 80020f6:	f106 0410 	add.w	r4, r6, #16
 80020fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002100:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002102:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002106:	e885 0003 	stmia.w	r5, {r0, r1}
 800210a:	1d33      	adds	r3, r6, #4
 800210c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800210e:	6838      	ldr	r0, [r7, #0]
 8002110:	f002 fc34 	bl	800497c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2101      	movs	r1, #1
 800211a:	4618      	mov	r0, r3
 800211c:	f002 fca0 	bl	8004a60 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	603b      	str	r3, [r7, #0]
 8002126:	687e      	ldr	r6, [r7, #4]
 8002128:	466d      	mov	r5, sp
 800212a:	f106 0410 	add.w	r4, r6, #16
 800212e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002132:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002136:	e894 0003 	ldmia.w	r4, {r0, r1}
 800213a:	e885 0003 	stmia.w	r5, {r0, r1}
 800213e:	1d33      	adds	r3, r6, #4
 8002140:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002142:	6838      	ldr	r0, [r7, #0]
 8002144:	f002 fd5c 	bl	8004c00 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800215c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e12b      	b.n	80023c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d106      	bne.n	8002188 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7fe fcce 	bl	8000b24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2224      	movs	r2, #36	; 0x24
 800218c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0201 	bic.w	r2, r2, #1
 800219e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021c0:	f001 f87e 	bl	80032c0 <HAL_RCC_GetPCLK1Freq>
 80021c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	4a81      	ldr	r2, [pc, #516]	; (80023d0 <HAL_I2C_Init+0x274>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d807      	bhi.n	80021e0 <HAL_I2C_Init+0x84>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	4a80      	ldr	r2, [pc, #512]	; (80023d4 <HAL_I2C_Init+0x278>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	bf94      	ite	ls
 80021d8:	2301      	movls	r3, #1
 80021da:	2300      	movhi	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	e006      	b.n	80021ee <HAL_I2C_Init+0x92>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4a7d      	ldr	r2, [pc, #500]	; (80023d8 <HAL_I2C_Init+0x27c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	bf94      	ite	ls
 80021e8:	2301      	movls	r3, #1
 80021ea:	2300      	movhi	r3, #0
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e0e7      	b.n	80023c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4a78      	ldr	r2, [pc, #480]	; (80023dc <HAL_I2C_Init+0x280>)
 80021fa:	fba2 2303 	umull	r2, r3, r2, r3
 80021fe:	0c9b      	lsrs	r3, r3, #18
 8002200:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	430a      	orrs	r2, r1
 8002214:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	4a6a      	ldr	r2, [pc, #424]	; (80023d0 <HAL_I2C_Init+0x274>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d802      	bhi.n	8002230 <HAL_I2C_Init+0xd4>
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	3301      	adds	r3, #1
 800222e:	e009      	b.n	8002244 <HAL_I2C_Init+0xe8>
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002236:	fb02 f303 	mul.w	r3, r2, r3
 800223a:	4a69      	ldr	r2, [pc, #420]	; (80023e0 <HAL_I2C_Init+0x284>)
 800223c:	fba2 2303 	umull	r2, r3, r2, r3
 8002240:	099b      	lsrs	r3, r3, #6
 8002242:	3301      	adds	r3, #1
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	430b      	orrs	r3, r1
 800224a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002256:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	495c      	ldr	r1, [pc, #368]	; (80023d0 <HAL_I2C_Init+0x274>)
 8002260:	428b      	cmp	r3, r1
 8002262:	d819      	bhi.n	8002298 <HAL_I2C_Init+0x13c>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1e59      	subs	r1, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002272:	1c59      	adds	r1, r3, #1
 8002274:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002278:	400b      	ands	r3, r1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00a      	beq.n	8002294 <HAL_I2C_Init+0x138>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1e59      	subs	r1, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	fbb1 f3f3 	udiv	r3, r1, r3
 800228c:	3301      	adds	r3, #1
 800228e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002292:	e051      	b.n	8002338 <HAL_I2C_Init+0x1dc>
 8002294:	2304      	movs	r3, #4
 8002296:	e04f      	b.n	8002338 <HAL_I2C_Init+0x1dc>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d111      	bne.n	80022c4 <HAL_I2C_Init+0x168>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	1e58      	subs	r0, r3, #1
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6859      	ldr	r1, [r3, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	440b      	add	r3, r1
 80022ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b2:	3301      	adds	r3, #1
 80022b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	bf0c      	ite	eq
 80022bc:	2301      	moveq	r3, #1
 80022be:	2300      	movne	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	e012      	b.n	80022ea <HAL_I2C_Init+0x18e>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1e58      	subs	r0, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6859      	ldr	r1, [r3, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	0099      	lsls	r1, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022da:	3301      	adds	r3, #1
 80022dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	bf0c      	ite	eq
 80022e4:	2301      	moveq	r3, #1
 80022e6:	2300      	movne	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_I2C_Init+0x196>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e022      	b.n	8002338 <HAL_I2C_Init+0x1dc>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10e      	bne.n	8002318 <HAL_I2C_Init+0x1bc>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	1e58      	subs	r0, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6859      	ldr	r1, [r3, #4]
 8002302:	460b      	mov	r3, r1
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	440b      	add	r3, r1
 8002308:	fbb0 f3f3 	udiv	r3, r0, r3
 800230c:	3301      	adds	r3, #1
 800230e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002316:	e00f      	b.n	8002338 <HAL_I2C_Init+0x1dc>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	1e58      	subs	r0, r3, #1
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6859      	ldr	r1, [r3, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	0099      	lsls	r1, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	fbb0 f3f3 	udiv	r3, r0, r3
 800232e:	3301      	adds	r3, #1
 8002330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002334:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	6809      	ldr	r1, [r1, #0]
 800233c:	4313      	orrs	r3, r2
 800233e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69da      	ldr	r2, [r3, #28]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002366:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	6911      	ldr	r1, [r2, #16]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	4311      	orrs	r1, r2
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	430b      	orrs	r3, r1
 800237a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2220      	movs	r2, #32
 80023b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	000186a0 	.word	0x000186a0
 80023d4:	001e847f 	.word	0x001e847f
 80023d8:	003d08ff 	.word	0x003d08ff
 80023dc:	431bde83 	.word	0x431bde83
 80023e0:	10624dd3 	.word	0x10624dd3

080023e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b20      	cmp	r3, #32
 80023f8:	d129      	bne.n	800244e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2224      	movs	r2, #36	; 0x24
 80023fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0201 	bic.w	r2, r2, #1
 8002410:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0210 	bic.w	r2, r2, #16
 8002420:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0201 	orr.w	r2, r2, #1
 8002440:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2220      	movs	r2, #32
 8002446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800244a:	2300      	movs	r3, #0
 800244c:	e000      	b.n	8002450 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800244e:	2302      	movs	r3, #2
  }
}
 8002450:	4618      	mov	r0, r3
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b20      	cmp	r3, #32
 8002474:	d12a      	bne.n	80024cc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2224      	movs	r2, #36	; 0x24
 800247a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0201 	bic.w	r2, r2, #1
 800248c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002496:	89fb      	ldrh	r3, [r7, #14]
 8002498:	f023 030f 	bic.w	r3, r3, #15
 800249c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	89fb      	ldrh	r3, [r7, #14]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	89fa      	ldrh	r2, [r7, #14]
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2220      	movs	r2, #32
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	e000      	b.n	80024ce <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80024cc:	2302      	movs	r3, #2
  }
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e0bf      	b.n	800266e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d106      	bne.n	8002508 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7fe fbf8 	bl	8000cf8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699a      	ldr	r2, [r3, #24]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800251e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6999      	ldr	r1, [r3, #24]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002534:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6899      	ldr	r1, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4b4a      	ldr	r3, [pc, #296]	; (8002678 <HAL_LTDC_Init+0x19c>)
 8002550:	400b      	ands	r3, r1
 8002552:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	041b      	lsls	r3, r3, #16
 800255a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6899      	ldr	r1, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68d9      	ldr	r1, [r3, #12]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b3e      	ldr	r3, [pc, #248]	; (8002678 <HAL_LTDC_Init+0x19c>)
 800257e:	400b      	ands	r3, r1
 8002580:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	041b      	lsls	r3, r3, #16
 8002588:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68d9      	ldr	r1, [r3, #12]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1a      	ldr	r2, [r3, #32]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6919      	ldr	r1, [r3, #16]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	4b33      	ldr	r3, [pc, #204]	; (8002678 <HAL_LTDC_Init+0x19c>)
 80025ac:	400b      	ands	r3, r1
 80025ae:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	041b      	lsls	r3, r3, #16
 80025b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6919      	ldr	r1, [r3, #16]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6959      	ldr	r1, [r3, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4b27      	ldr	r3, [pc, #156]	; (8002678 <HAL_LTDC_Init+0x19c>)
 80025da:	400b      	ands	r3, r1
 80025dc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e2:	041b      	lsls	r3, r3, #16
 80025e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6959      	ldr	r1, [r3, #20]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002602:	021b      	lsls	r3, r3, #8
 8002604:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800260c:	041b      	lsls	r3, r3, #16
 800260e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800261e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0206 	orr.w	r2, r2, #6
 800264a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0201 	orr.w	r2, r2, #1
 800265a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	f000f800 	.word	0xf000f800

0800267c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800267c:	b5b0      	push	{r4, r5, r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800268e:	2b01      	cmp	r3, #1
 8002690:	d101      	bne.n	8002696 <HAL_LTDC_ConfigLayer+0x1a>
 8002692:	2302      	movs	r3, #2
 8002694:	e02c      	b.n	80026f0 <HAL_LTDC_ConfigLayer+0x74>
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2201      	movs	r2, #1
 800269a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2202      	movs	r2, #2
 80026a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2134      	movs	r1, #52	; 0x34
 80026ac:	fb01 f303 	mul.w	r3, r1, r3
 80026b0:	4413      	add	r3, r2
 80026b2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	4614      	mov	r4, r2
 80026ba:	461d      	mov	r5, r3
 80026bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026c8:	682b      	ldr	r3, [r5, #0]
 80026ca:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	68b9      	ldr	r1, [r7, #8]
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f811 	bl	80026f8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2201      	movs	r2, #1
 80026dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bdb0      	pop	{r4, r5, r7, pc}

080026f8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b089      	sub	sp, #36	; 0x24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	0c1b      	lsrs	r3, r3, #16
 8002710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002714:	4413      	add	r3, r2
 8002716:	041b      	lsls	r3, r3, #16
 8002718:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	01db      	lsls	r3, r3, #7
 8002724:	4413      	add	r3, r2
 8002726:	3384      	adds	r3, #132	; 0x84
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	4611      	mov	r1, r2
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	01d2      	lsls	r2, r2, #7
 8002734:	440a      	add	r2, r1
 8002736:	3284      	adds	r2, #132	; 0x84
 8002738:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800273c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	0c1b      	lsrs	r3, r3, #16
 800274a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800274e:	4413      	add	r3, r2
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4619      	mov	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	01db      	lsls	r3, r3, #7
 800275c:	440b      	add	r3, r1
 800275e:	3384      	adds	r3, #132	; 0x84
 8002760:	4619      	mov	r1, r3
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	4313      	orrs	r3, r2
 8002766:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	68da      	ldr	r2, [r3, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002776:	4413      	add	r3, r2
 8002778:	041b      	lsls	r3, r3, #16
 800277a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	461a      	mov	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	01db      	lsls	r3, r3, #7
 8002786:	4413      	add	r3, r2
 8002788:	3384      	adds	r3, #132	; 0x84
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	4611      	mov	r1, r2
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	01d2      	lsls	r2, r2, #7
 8002796:	440a      	add	r2, r1
 8002798:	3284      	adds	r2, #132	; 0x84
 800279a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800279e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027ae:	4413      	add	r3, r2
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4619      	mov	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	01db      	lsls	r3, r3, #7
 80027bc:	440b      	add	r3, r1
 80027be:	3384      	adds	r3, #132	; 0x84
 80027c0:	4619      	mov	r1, r3
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	01db      	lsls	r3, r3, #7
 80027d2:	4413      	add	r3, r2
 80027d4:	3384      	adds	r3, #132	; 0x84
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	4611      	mov	r1, r2
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	01d2      	lsls	r2, r2, #7
 80027e2:	440a      	add	r2, r1
 80027e4:	3284      	adds	r2, #132	; 0x84
 80027e6:	f023 0307 	bic.w	r3, r3, #7
 80027ea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	01db      	lsls	r3, r3, #7
 80027f6:	4413      	add	r3, r2
 80027f8:	3384      	adds	r3, #132	; 0x84
 80027fa:	461a      	mov	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002808:	021b      	lsls	r3, r3, #8
 800280a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002812:	041b      	lsls	r3, r3, #16
 8002814:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	061b      	lsls	r3, r3, #24
 800281c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	01db      	lsls	r3, r3, #7
 8002828:	4413      	add	r3, r2
 800282a:	3384      	adds	r3, #132	; 0x84
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	01db      	lsls	r3, r3, #7
 8002838:	4413      	add	r3, r2
 800283a:	3384      	adds	r3, #132	; 0x84
 800283c:	461a      	mov	r2, r3
 800283e:	2300      	movs	r3, #0
 8002840:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002848:	461a      	mov	r2, r3
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	431a      	orrs	r2, r3
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	431a      	orrs	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4619      	mov	r1, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	01db      	lsls	r3, r3, #7
 800285c:	440b      	add	r3, r1
 800285e:	3384      	adds	r3, #132	; 0x84
 8002860:	4619      	mov	r1, r3
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	461a      	mov	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	01db      	lsls	r3, r3, #7
 8002872:	4413      	add	r3, r2
 8002874:	3384      	adds	r3, #132	; 0x84
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	4611      	mov	r1, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	01d2      	lsls	r2, r2, #7
 8002882:	440a      	add	r2, r1
 8002884:	3284      	adds	r2, #132	; 0x84
 8002886:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800288a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	01db      	lsls	r3, r3, #7
 8002896:	4413      	add	r3, r2
 8002898:	3384      	adds	r3, #132	; 0x84
 800289a:	461a      	mov	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	461a      	mov	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	01db      	lsls	r3, r3, #7
 80028ac:	4413      	add	r3, r2
 80028ae:	3384      	adds	r3, #132	; 0x84
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	4611      	mov	r1, r2
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	01d2      	lsls	r2, r2, #7
 80028bc:	440a      	add	r2, r1
 80028be:	3284      	adds	r2, #132	; 0x84
 80028c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80028c4:	f023 0307 	bic.w	r3, r3, #7
 80028c8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	69da      	ldr	r2, [r3, #28]
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	68f9      	ldr	r1, [r7, #12]
 80028d4:	6809      	ldr	r1, [r1, #0]
 80028d6:	4608      	mov	r0, r1
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	01c9      	lsls	r1, r1, #7
 80028dc:	4401      	add	r1, r0
 80028de:	3184      	adds	r1, #132	; 0x84
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	461a      	mov	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	01db      	lsls	r3, r3, #7
 80028ee:	4413      	add	r3, r2
 80028f0:	3384      	adds	r3, #132	; 0x84
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	01db      	lsls	r3, r3, #7
 80028fe:	4413      	add	r3, r2
 8002900:	3384      	adds	r3, #132	; 0x84
 8002902:	461a      	mov	r2, r3
 8002904:	2300      	movs	r3, #0
 8002906:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	461a      	mov	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	01db      	lsls	r3, r3, #7
 8002912:	4413      	add	r3, r2
 8002914:	3384      	adds	r3, #132	; 0x84
 8002916:	461a      	mov	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d102      	bne.n	800292c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8002926:	2304      	movs	r3, #4
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	e01b      	b.n	8002964 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d102      	bne.n	800293a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8002934:	2303      	movs	r3, #3
 8002936:	61fb      	str	r3, [r7, #28]
 8002938:	e014      	b.n	8002964 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	2b04      	cmp	r3, #4
 8002940:	d00b      	beq.n	800295a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002946:	2b02      	cmp	r3, #2
 8002948:	d007      	beq.n	800295a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800294e:	2b03      	cmp	r3, #3
 8002950:	d003      	beq.n	800295a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002956:	2b07      	cmp	r3, #7
 8002958:	d102      	bne.n	8002960 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800295a:	2302      	movs	r3, #2
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	e001      	b.n	8002964 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8002960:	2301      	movs	r3, #1
 8002962:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	461a      	mov	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	01db      	lsls	r3, r3, #7
 800296e:	4413      	add	r3, r2
 8002970:	3384      	adds	r3, #132	; 0x84
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	4611      	mov	r1, r2
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	01d2      	lsls	r2, r2, #7
 800297e:	440a      	add	r2, r1
 8002980:	3284      	adds	r2, #132	; 0x84
 8002982:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8002986:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298c:	69fa      	ldr	r2, [r7, #28]
 800298e:	fb02 f303 	mul.w	r3, r2, r3
 8002992:	041a      	lsls	r2, r3, #16
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	1acb      	subs	r3, r1, r3
 800299e:	69f9      	ldr	r1, [r7, #28]
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	3303      	adds	r3, #3
 80029a6:	68f9      	ldr	r1, [r7, #12]
 80029a8:	6809      	ldr	r1, [r1, #0]
 80029aa:	4608      	mov	r0, r1
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	01c9      	lsls	r1, r1, #7
 80029b0:	4401      	add	r1, r0
 80029b2:	3184      	adds	r1, #132	; 0x84
 80029b4:	4313      	orrs	r3, r2
 80029b6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	461a      	mov	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	01db      	lsls	r3, r3, #7
 80029c2:	4413      	add	r3, r2
 80029c4:	3384      	adds	r3, #132	; 0x84
 80029c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	4611      	mov	r1, r2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	01d2      	lsls	r2, r2, #7
 80029d2:	440a      	add	r2, r1
 80029d4:	3284      	adds	r2, #132	; 0x84
 80029d6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80029da:	f023 0307 	bic.w	r3, r3, #7
 80029de:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	01db      	lsls	r3, r3, #7
 80029ea:	4413      	add	r3, r2
 80029ec:	3384      	adds	r3, #132	; 0x84
 80029ee:	461a      	mov	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	01db      	lsls	r3, r3, #7
 8002a00:	4413      	add	r3, r2
 8002a02:	3384      	adds	r3, #132	; 0x84
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	6812      	ldr	r2, [r2, #0]
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	01d2      	lsls	r2, r2, #7
 8002a10:	440a      	add	r2, r1
 8002a12:	3284      	adds	r2, #132	; 0x84
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	6013      	str	r3, [r2, #0]
}
 8002a1a:	bf00      	nop
 8002a1c:	3724      	adds	r7, #36	; 0x24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e264      	b.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d075      	beq.n	8002b32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a46:	4ba3      	ldr	r3, [pc, #652]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d00c      	beq.n	8002a6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a52:	4ba0      	ldr	r3, [pc, #640]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d112      	bne.n	8002a84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a5e:	4b9d      	ldr	r3, [pc, #628]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a6a:	d10b      	bne.n	8002a84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6c:	4b99      	ldr	r3, [pc, #612]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d05b      	beq.n	8002b30 <HAL_RCC_OscConfig+0x108>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d157      	bne.n	8002b30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e23f      	b.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8c:	d106      	bne.n	8002a9c <HAL_RCC_OscConfig+0x74>
 8002a8e:	4b91      	ldr	r3, [pc, #580]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a90      	ldr	r2, [pc, #576]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	e01d      	b.n	8002ad8 <HAL_RCC_OscConfig+0xb0>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002aa4:	d10c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x98>
 8002aa6:	4b8b      	ldr	r3, [pc, #556]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a8a      	ldr	r2, [pc, #552]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	4b88      	ldr	r3, [pc, #544]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a87      	ldr	r2, [pc, #540]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	e00b      	b.n	8002ad8 <HAL_RCC_OscConfig+0xb0>
 8002ac0:	4b84      	ldr	r3, [pc, #528]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a83      	ldr	r2, [pc, #524]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aca:	6013      	str	r3, [r2, #0]
 8002acc:	4b81      	ldr	r3, [pc, #516]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a80      	ldr	r2, [pc, #512]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d013      	beq.n	8002b08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fef0 	bl	80018c4 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ae8:	f7fe feec 	bl	80018c4 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b64      	cmp	r3, #100	; 0x64
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e204      	b.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afa:	4b76      	ldr	r3, [pc, #472]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0xc0>
 8002b06:	e014      	b.n	8002b32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe fedc 	bl	80018c4 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fe fed8 	bl	80018c4 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	; 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e1f0      	b.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b22:	4b6c      	ldr	r3, [pc, #432]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0xe8>
 8002b2e:	e000      	b.n	8002b32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d063      	beq.n	8002c06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b3e:	4b65      	ldr	r3, [pc, #404]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00b      	beq.n	8002b62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b4a:	4b62      	ldr	r3, [pc, #392]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b52:	2b08      	cmp	r3, #8
 8002b54:	d11c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b56:	4b5f      	ldr	r3, [pc, #380]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d116      	bne.n	8002b90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b62:	4b5c      	ldr	r3, [pc, #368]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d005      	beq.n	8002b7a <HAL_RCC_OscConfig+0x152>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d001      	beq.n	8002b7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e1c4      	b.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7a:	4b56      	ldr	r3, [pc, #344]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4952      	ldr	r1, [pc, #328]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8e:	e03a      	b.n	8002c06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d020      	beq.n	8002bda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b98:	4b4f      	ldr	r3, [pc, #316]	; (8002cd8 <HAL_RCC_OscConfig+0x2b0>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9e:	f7fe fe91 	bl	80018c4 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ba6:	f7fe fe8d 	bl	80018c4 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e1a5      	b.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb8:	4b46      	ldr	r3, [pc, #280]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc4:	4b43      	ldr	r3, [pc, #268]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4940      	ldr	r1, [pc, #256]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	600b      	str	r3, [r1, #0]
 8002bd8:	e015      	b.n	8002c06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bda:	4b3f      	ldr	r3, [pc, #252]	; (8002cd8 <HAL_RCC_OscConfig+0x2b0>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7fe fe70 	bl	80018c4 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002be8:	f7fe fe6c 	bl	80018c4 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e184      	b.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bfa:	4b36      	ldr	r3, [pc, #216]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d030      	beq.n	8002c74 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d016      	beq.n	8002c48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1a:	4b30      	ldr	r3, [pc, #192]	; (8002cdc <HAL_RCC_OscConfig+0x2b4>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c20:	f7fe fe50 	bl	80018c4 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c28:	f7fe fe4c 	bl	80018c4 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e164      	b.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c3a:	4b26      	ldr	r3, [pc, #152]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x200>
 8002c46:	e015      	b.n	8002c74 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c48:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <HAL_RCC_OscConfig+0x2b4>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4e:	f7fe fe39 	bl	80018c4 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c54:	e008      	b.n	8002c68 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c56:	f7fe fe35 	bl	80018c4 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e14d      	b.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c68:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1f0      	bne.n	8002c56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80a0 	beq.w	8002dc2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c82:	2300      	movs	r3, #0
 8002c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c86:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10f      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	4a0e      	ldr	r2, [pc, #56]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca2:	4b0c      	ldr	r3, [pc, #48]	; (8002cd4 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002caa:	60bb      	str	r3, [r7, #8]
 8002cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <HAL_RCC_OscConfig+0x2b8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d121      	bne.n	8002d02 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cbe:	4b08      	ldr	r3, [pc, #32]	; (8002ce0 <HAL_RCC_OscConfig+0x2b8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a07      	ldr	r2, [pc, #28]	; (8002ce0 <HAL_RCC_OscConfig+0x2b8>)
 8002cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cca:	f7fe fdfb 	bl	80018c4 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd0:	e011      	b.n	8002cf6 <HAL_RCC_OscConfig+0x2ce>
 8002cd2:	bf00      	nop
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	42470000 	.word	0x42470000
 8002cdc:	42470e80 	.word	0x42470e80
 8002ce0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce4:	f7fe fdee 	bl	80018c4 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e106      	b.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf6:	4b85      	ldr	r3, [pc, #532]	; (8002f0c <HAL_RCC_OscConfig+0x4e4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d106      	bne.n	8002d18 <HAL_RCC_OscConfig+0x2f0>
 8002d0a:	4b81      	ldr	r3, [pc, #516]	; (8002f10 <HAL_RCC_OscConfig+0x4e8>)
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0e:	4a80      	ldr	r2, [pc, #512]	; (8002f10 <HAL_RCC_OscConfig+0x4e8>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	6713      	str	r3, [r2, #112]	; 0x70
 8002d16:	e01c      	b.n	8002d52 <HAL_RCC_OscConfig+0x32a>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b05      	cmp	r3, #5
 8002d1e:	d10c      	bne.n	8002d3a <HAL_RCC_OscConfig+0x312>
 8002d20:	4b7b      	ldr	r3, [pc, #492]	; (8002f10 <HAL_RCC_OscConfig+0x4e8>)
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	4a7a      	ldr	r2, [pc, #488]	; (8002f10 <HAL_RCC_OscConfig+0x4e8>)
 8002d26:	f043 0304 	orr.w	r3, r3, #4
 8002d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d2c:	4b78      	ldr	r3, [pc, #480]	; (8002f10 <HAL_RCC_OscConfig+0x4e8>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	4a77      	ldr	r2, [pc, #476]	; (8002f10 <HAL_RCC_OscConfig+0x4e8>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6713      	str	r3, [r2, #112]	; 0x70
 8002d38:	e00b      	b.n	8002d52 <HAL_RCC_OscConfig+0x32a>
 8002d3a:	4b75      	ldr	r3, [pc, #468]	; (8002f10 <HAL_RCC_OscConfig+0x4e8>)
 8002d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3e:	4a74      	ldr	r2, [pc, #464]	; (8002f10 <HAL_RCC_OscConfig+0x4e8>)
 8002d40:	f023 0301 	bic.w	r3, r3, #1
 8002d44:	6713      	str	r3, [r2, #112]	; 0x70
 8002d46:	4b72      	ldr	r3, [pc, #456]	; (8002f10 <HAL_RCC_OscConfig+0x4e8>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	4a71      	ldr	r2, [pc, #452]	; (8002f10 <HAL_RCC_OscConfig+0x4e8>)
 8002d4c:	f023 0304 	bic.w	r3, r3, #4
 8002d50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d015      	beq.n	8002d86 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5a:	f7fe fdb3 	bl	80018c4 <HAL_GetTick>
 8002d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d60:	e00a      	b.n	8002d78 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d62:	f7fe fdaf 	bl	80018c4 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e0c5      	b.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d78:	4b65      	ldr	r3, [pc, #404]	; (8002f10 <HAL_RCC_OscConfig+0x4e8>)
 8002d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0ee      	beq.n	8002d62 <HAL_RCC_OscConfig+0x33a>
 8002d84:	e014      	b.n	8002db0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d86:	f7fe fd9d 	bl	80018c4 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d8c:	e00a      	b.n	8002da4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d8e:	f7fe fd99 	bl	80018c4 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e0af      	b.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002da4:	4b5a      	ldr	r3, [pc, #360]	; (8002f10 <HAL_RCC_OscConfig+0x4e8>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1ee      	bne.n	8002d8e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002db0:	7dfb      	ldrb	r3, [r7, #23]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d105      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db6:	4b56      	ldr	r3, [pc, #344]	; (8002f10 <HAL_RCC_OscConfig+0x4e8>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	4a55      	ldr	r2, [pc, #340]	; (8002f10 <HAL_RCC_OscConfig+0x4e8>)
 8002dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 809b 	beq.w	8002f02 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dcc:	4b50      	ldr	r3, [pc, #320]	; (8002f10 <HAL_RCC_OscConfig+0x4e8>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 030c 	and.w	r3, r3, #12
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d05c      	beq.n	8002e92 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d141      	bne.n	8002e64 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de0:	4b4c      	ldr	r3, [pc, #304]	; (8002f14 <HAL_RCC_OscConfig+0x4ec>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de6:	f7fe fd6d 	bl	80018c4 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dee:	f7fe fd69 	bl	80018c4 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e081      	b.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e00:	4b43      	ldr	r3, [pc, #268]	; (8002f10 <HAL_RCC_OscConfig+0x4e8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f0      	bne.n	8002dee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69da      	ldr	r2, [r3, #28]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	431a      	orrs	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	019b      	lsls	r3, r3, #6
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e22:	085b      	lsrs	r3, r3, #1
 8002e24:	3b01      	subs	r3, #1
 8002e26:	041b      	lsls	r3, r3, #16
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	061b      	lsls	r3, r3, #24
 8002e30:	4937      	ldr	r1, [pc, #220]	; (8002f10 <HAL_RCC_OscConfig+0x4e8>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e36:	4b37      	ldr	r3, [pc, #220]	; (8002f14 <HAL_RCC_OscConfig+0x4ec>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fd42 	bl	80018c4 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e44:	f7fe fd3e 	bl	80018c4 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e056      	b.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e56:	4b2e      	ldr	r3, [pc, #184]	; (8002f10 <HAL_RCC_OscConfig+0x4e8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x41c>
 8002e62:	e04e      	b.n	8002f02 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e64:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <HAL_RCC_OscConfig+0x4ec>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6a:	f7fe fd2b 	bl	80018c4 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e72:	f7fe fd27 	bl	80018c4 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e03f      	b.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e84:	4b22      	ldr	r3, [pc, #136]	; (8002f10 <HAL_RCC_OscConfig+0x4e8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1f0      	bne.n	8002e72 <HAL_RCC_OscConfig+0x44a>
 8002e90:	e037      	b.n	8002f02 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e032      	b.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e9e:	4b1c      	ldr	r3, [pc, #112]	; (8002f10 <HAL_RCC_OscConfig+0x4e8>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d028      	beq.n	8002efe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d121      	bne.n	8002efe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d11a      	bne.n	8002efe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ece:	4013      	ands	r3, r2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ed4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d111      	bne.n	8002efe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee4:	085b      	lsrs	r3, r3, #1
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d001      	beq.n	8002f02 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40007000 	.word	0x40007000
 8002f10:	40023800 	.word	0x40023800
 8002f14:	42470060 	.word	0x42470060

08002f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0cc      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f2c:	4b68      	ldr	r3, [pc, #416]	; (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 030f 	and.w	r3, r3, #15
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d90c      	bls.n	8002f54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3a:	4b65      	ldr	r3, [pc, #404]	; (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f42:	4b63      	ldr	r3, [pc, #396]	; (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d001      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0b8      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0302 	and.w	r3, r3, #2
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d020      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0304 	and.w	r3, r3, #4
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f6c:	4b59      	ldr	r3, [pc, #356]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4a58      	ldr	r2, [pc, #352]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f84:	4b53      	ldr	r3, [pc, #332]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	4a52      	ldr	r2, [pc, #328]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f90:	4b50      	ldr	r3, [pc, #320]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	494d      	ldr	r1, [pc, #308]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d044      	beq.n	8003038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d107      	bne.n	8002fc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	4b47      	ldr	r3, [pc, #284]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d119      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e07f      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d003      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd2:	2b03      	cmp	r3, #3
 8002fd4:	d107      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd6:	4b3f      	ldr	r3, [pc, #252]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e06f      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe6:	4b3b      	ldr	r3, [pc, #236]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e067      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ff6:	4b37      	ldr	r3, [pc, #220]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f023 0203 	bic.w	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4934      	ldr	r1, [pc, #208]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	4313      	orrs	r3, r2
 8003006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003008:	f7fe fc5c 	bl	80018c4 <HAL_GetTick>
 800300c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300e:	e00a      	b.n	8003026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003010:	f7fe fc58 	bl	80018c4 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	; 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e04f      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003026:	4b2b      	ldr	r3, [pc, #172]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 020c 	and.w	r2, r3, #12
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	429a      	cmp	r2, r3
 8003036:	d1eb      	bne.n	8003010 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003038:	4b25      	ldr	r3, [pc, #148]	; (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 030f 	and.w	r3, r3, #15
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d20c      	bcs.n	8003060 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003046:	4b22      	ldr	r3, [pc, #136]	; (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800304e:	4b20      	ldr	r3, [pc, #128]	; (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e032      	b.n	80030c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0304 	and.w	r3, r3, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	d008      	beq.n	800307e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800306c:	4b19      	ldr	r3, [pc, #100]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4916      	ldr	r1, [pc, #88]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b00      	cmp	r3, #0
 8003088:	d009      	beq.n	800309e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800308a:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	490e      	ldr	r1, [pc, #56]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800309e:	f000 f821 	bl	80030e4 <HAL_RCC_GetSysClockFreq>
 80030a2:	4602      	mov	r2, r0
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	490a      	ldr	r1, [pc, #40]	; (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	5ccb      	ldrb	r3, [r1, r3]
 80030b2:	fa22 f303 	lsr.w	r3, r2, r3
 80030b6:	4a09      	ldr	r2, [pc, #36]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030ba:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fe f8cc 	bl	800125c <HAL_InitTick>

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40023c00 	.word	0x40023c00
 80030d4:	40023800 	.word	0x40023800
 80030d8:	08005654 	.word	0x08005654
 80030dc:	20000000 	.word	0x20000000
 80030e0:	20000004 	.word	0x20000004

080030e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	607b      	str	r3, [r7, #4]
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	2300      	movs	r3, #0
 80030f6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030fc:	4b67      	ldr	r3, [pc, #412]	; (800329c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 030c 	and.w	r3, r3, #12
 8003104:	2b08      	cmp	r3, #8
 8003106:	d00d      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x40>
 8003108:	2b08      	cmp	r3, #8
 800310a:	f200 80bd 	bhi.w	8003288 <HAL_RCC_GetSysClockFreq+0x1a4>
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0x34>
 8003112:	2b04      	cmp	r3, #4
 8003114:	d003      	beq.n	800311e <HAL_RCC_GetSysClockFreq+0x3a>
 8003116:	e0b7      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003118:	4b61      	ldr	r3, [pc, #388]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800311a:	60bb      	str	r3, [r7, #8]
       break;
 800311c:	e0b7      	b.n	800328e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800311e:	4b61      	ldr	r3, [pc, #388]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003120:	60bb      	str	r3, [r7, #8]
      break;
 8003122:	e0b4      	b.n	800328e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003124:	4b5d      	ldr	r3, [pc, #372]	; (800329c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800312c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800312e:	4b5b      	ldr	r3, [pc, #364]	; (800329c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d04d      	beq.n	80031d6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800313a:	4b58      	ldr	r3, [pc, #352]	; (800329c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	099b      	lsrs	r3, r3, #6
 8003140:	461a      	mov	r2, r3
 8003142:	f04f 0300 	mov.w	r3, #0
 8003146:	f240 10ff 	movw	r0, #511	; 0x1ff
 800314a:	f04f 0100 	mov.w	r1, #0
 800314e:	ea02 0800 	and.w	r8, r2, r0
 8003152:	ea03 0901 	and.w	r9, r3, r1
 8003156:	4640      	mov	r0, r8
 8003158:	4649      	mov	r1, r9
 800315a:	f04f 0200 	mov.w	r2, #0
 800315e:	f04f 0300 	mov.w	r3, #0
 8003162:	014b      	lsls	r3, r1, #5
 8003164:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003168:	0142      	lsls	r2, r0, #5
 800316a:	4610      	mov	r0, r2
 800316c:	4619      	mov	r1, r3
 800316e:	ebb0 0008 	subs.w	r0, r0, r8
 8003172:	eb61 0109 	sbc.w	r1, r1, r9
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	018b      	lsls	r3, r1, #6
 8003180:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003184:	0182      	lsls	r2, r0, #6
 8003186:	1a12      	subs	r2, r2, r0
 8003188:	eb63 0301 	sbc.w	r3, r3, r1
 800318c:	f04f 0000 	mov.w	r0, #0
 8003190:	f04f 0100 	mov.w	r1, #0
 8003194:	00d9      	lsls	r1, r3, #3
 8003196:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800319a:	00d0      	lsls	r0, r2, #3
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	eb12 0208 	adds.w	r2, r2, r8
 80031a4:	eb43 0309 	adc.w	r3, r3, r9
 80031a8:	f04f 0000 	mov.w	r0, #0
 80031ac:	f04f 0100 	mov.w	r1, #0
 80031b0:	0259      	lsls	r1, r3, #9
 80031b2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80031b6:	0250      	lsls	r0, r2, #9
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4610      	mov	r0, r2
 80031be:	4619      	mov	r1, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	461a      	mov	r2, r3
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	f7fd f86a 	bl	80002a0 <__aeabi_uldivmod>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4613      	mov	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	e04a      	b.n	800326c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031d6:	4b31      	ldr	r3, [pc, #196]	; (800329c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	099b      	lsrs	r3, r3, #6
 80031dc:	461a      	mov	r2, r3
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031e6:	f04f 0100 	mov.w	r1, #0
 80031ea:	ea02 0400 	and.w	r4, r2, r0
 80031ee:	ea03 0501 	and.w	r5, r3, r1
 80031f2:	4620      	mov	r0, r4
 80031f4:	4629      	mov	r1, r5
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	014b      	lsls	r3, r1, #5
 8003200:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003204:	0142      	lsls	r2, r0, #5
 8003206:	4610      	mov	r0, r2
 8003208:	4619      	mov	r1, r3
 800320a:	1b00      	subs	r0, r0, r4
 800320c:	eb61 0105 	sbc.w	r1, r1, r5
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	018b      	lsls	r3, r1, #6
 800321a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800321e:	0182      	lsls	r2, r0, #6
 8003220:	1a12      	subs	r2, r2, r0
 8003222:	eb63 0301 	sbc.w	r3, r3, r1
 8003226:	f04f 0000 	mov.w	r0, #0
 800322a:	f04f 0100 	mov.w	r1, #0
 800322e:	00d9      	lsls	r1, r3, #3
 8003230:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003234:	00d0      	lsls	r0, r2, #3
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	1912      	adds	r2, r2, r4
 800323c:	eb45 0303 	adc.w	r3, r5, r3
 8003240:	f04f 0000 	mov.w	r0, #0
 8003244:	f04f 0100 	mov.w	r1, #0
 8003248:	0299      	lsls	r1, r3, #10
 800324a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800324e:	0290      	lsls	r0, r2, #10
 8003250:	4602      	mov	r2, r0
 8003252:	460b      	mov	r3, r1
 8003254:	4610      	mov	r0, r2
 8003256:	4619      	mov	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	461a      	mov	r2, r3
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	f7fd f81e 	bl	80002a0 <__aeabi_uldivmod>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4613      	mov	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800326c:	4b0b      	ldr	r3, [pc, #44]	; (800329c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	0c1b      	lsrs	r3, r3, #16
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	3301      	adds	r3, #1
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	fbb2 f3f3 	udiv	r3, r2, r3
 8003284:	60bb      	str	r3, [r7, #8]
      break;
 8003286:	e002      	b.n	800328e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003288:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800328a:	60bb      	str	r3, [r7, #8]
      break;
 800328c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800328e:	68bb      	ldr	r3, [r7, #8]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800329a:	bf00      	nop
 800329c:	40023800 	.word	0x40023800
 80032a0:	00f42400 	.word	0x00f42400
 80032a4:	007a1200 	.word	0x007a1200

080032a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032ac:	4b03      	ldr	r3, [pc, #12]	; (80032bc <HAL_RCC_GetHCLKFreq+0x14>)
 80032ae:	681b      	ldr	r3, [r3, #0]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	20000000 	.word	0x20000000

080032c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032c4:	f7ff fff0 	bl	80032a8 <HAL_RCC_GetHCLKFreq>
 80032c8:	4602      	mov	r2, r0
 80032ca:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	0a9b      	lsrs	r3, r3, #10
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	4903      	ldr	r1, [pc, #12]	; (80032e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032d6:	5ccb      	ldrb	r3, [r1, r3]
 80032d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032dc:	4618      	mov	r0, r3
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40023800 	.word	0x40023800
 80032e4:	08005664 	.word	0x08005664

080032e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032ec:	f7ff ffdc 	bl	80032a8 <HAL_RCC_GetHCLKFreq>
 80032f0:	4602      	mov	r2, r0
 80032f2:	4b05      	ldr	r3, [pc, #20]	; (8003308 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	0b5b      	lsrs	r3, r3, #13
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	4903      	ldr	r1, [pc, #12]	; (800330c <HAL_RCC_GetPCLK2Freq+0x24>)
 80032fe:	5ccb      	ldrb	r3, [r1, r3]
 8003300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003304:	4618      	mov	r0, r3
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40023800 	.word	0x40023800
 800330c:	08005664 	.word	0x08005664

08003310 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	220f      	movs	r2, #15
 800331e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003320:	4b12      	ldr	r3, [pc, #72]	; (800336c <HAL_RCC_GetClockConfig+0x5c>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 0203 	and.w	r2, r3, #3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800332c:	4b0f      	ldr	r3, [pc, #60]	; (800336c <HAL_RCC_GetClockConfig+0x5c>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003338:	4b0c      	ldr	r3, [pc, #48]	; (800336c <HAL_RCC_GetClockConfig+0x5c>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003344:	4b09      	ldr	r3, [pc, #36]	; (800336c <HAL_RCC_GetClockConfig+0x5c>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	08db      	lsrs	r3, r3, #3
 800334a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003352:	4b07      	ldr	r3, [pc, #28]	; (8003370 <HAL_RCC_GetClockConfig+0x60>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 020f 	and.w	r2, r3, #15
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	601a      	str	r2, [r3, #0]
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40023800 	.word	0x40023800
 8003370:	40023c00 	.word	0x40023c00

08003374 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d10b      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003398:	2b00      	cmp	r3, #0
 800339a:	d105      	bne.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d075      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80033a8:	4bad      	ldr	r3, [pc, #692]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80033ae:	f7fe fa89 	bl	80018c4 <HAL_GetTick>
 80033b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033b4:	e008      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80033b6:	f7fe fa85 	bl	80018c4 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e18b      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033c8:	4ba6      	ldr	r3, [pc, #664]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1f0      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d009      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	019a      	lsls	r2, r3, #6
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	071b      	lsls	r3, r3, #28
 80033ec:	499d      	ldr	r1, [pc, #628]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01f      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003400:	4b98      	ldr	r3, [pc, #608]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003406:	0f1b      	lsrs	r3, r3, #28
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	019a      	lsls	r2, r3, #6
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	061b      	lsls	r3, r3, #24
 800341a:	431a      	orrs	r2, r3
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	071b      	lsls	r3, r3, #28
 8003420:	4990      	ldr	r1, [pc, #576]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003422:	4313      	orrs	r3, r2
 8003424:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003428:	4b8e      	ldr	r3, [pc, #568]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800342a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800342e:	f023 021f 	bic.w	r2, r3, #31
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	3b01      	subs	r3, #1
 8003438:	498a      	ldr	r1, [pc, #552]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800343a:	4313      	orrs	r3, r2
 800343c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00d      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	019a      	lsls	r2, r3, #6
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	061b      	lsls	r3, r3, #24
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	071b      	lsls	r3, r3, #28
 8003460:	4980      	ldr	r1, [pc, #512]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003462:	4313      	orrs	r3, r2
 8003464:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003468:	4b7d      	ldr	r3, [pc, #500]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800346a:	2201      	movs	r2, #1
 800346c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800346e:	f7fe fa29 	bl	80018c4 <HAL_GetTick>
 8003472:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003474:	e008      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003476:	f7fe fa25 	bl	80018c4 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b02      	cmp	r3, #2
 8003482:	d901      	bls.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e12b      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003488:	4b76      	ldr	r3, [pc, #472]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d0f0      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d105      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d079      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034ac:	4b6e      	ldr	r3, [pc, #440]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80034b2:	f7fe fa07 	bl	80018c4 <HAL_GetTick>
 80034b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034b8:	e008      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80034ba:	f7fe fa03 	bl	80018c4 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e109      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034cc:	4b65      	ldr	r3, [pc, #404]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034d8:	d0ef      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d020      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034e6:	4b5f      	ldr	r3, [pc, #380]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ec:	0f1b      	lsrs	r3, r3, #28
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	019a      	lsls	r2, r3, #6
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	061b      	lsls	r3, r3, #24
 8003500:	431a      	orrs	r2, r3
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	071b      	lsls	r3, r3, #28
 8003506:	4957      	ldr	r1, [pc, #348]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800350e:	4b55      	ldr	r3, [pc, #340]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003510:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003514:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	3b01      	subs	r3, #1
 800351e:	021b      	lsls	r3, r3, #8
 8003520:	4950      	ldr	r1, [pc, #320]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003522:	4313      	orrs	r3, r2
 8003524:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0308 	and.w	r3, r3, #8
 8003530:	2b00      	cmp	r3, #0
 8003532:	d01e      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003534:	4b4b      	ldr	r3, [pc, #300]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800353a:	0e1b      	lsrs	r3, r3, #24
 800353c:	f003 030f 	and.w	r3, r3, #15
 8003540:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	019a      	lsls	r2, r3, #6
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	061b      	lsls	r3, r3, #24
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	071b      	lsls	r3, r3, #28
 8003554:	4943      	ldr	r1, [pc, #268]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800355c:	4b41      	ldr	r3, [pc, #260]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800355e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003562:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	493e      	ldr	r1, [pc, #248]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003572:	4b3d      	ldr	r3, [pc, #244]	; (8003668 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003574:	2201      	movs	r2, #1
 8003576:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003578:	f7fe f9a4 	bl	80018c4 <HAL_GetTick>
 800357c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003580:	f7fe f9a0 	bl	80018c4 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e0a6      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003592:	4b34      	ldr	r3, [pc, #208]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800359a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800359e:	d1ef      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0320 	and.w	r3, r3, #32
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 808d 	beq.w	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	4b2c      	ldr	r3, [pc, #176]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	4a2b      	ldr	r2, [pc, #172]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035bc:	6413      	str	r3, [r2, #64]	; 0x40
 80035be:	4b29      	ldr	r3, [pc, #164]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80035ca:	4b28      	ldr	r3, [pc, #160]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a27      	ldr	r2, [pc, #156]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80035d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035d6:	f7fe f975 	bl	80018c4 <HAL_GetTick>
 80035da:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80035dc:	e008      	b.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80035de:	f7fe f971 	bl	80018c4 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e077      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80035f0:	4b1e      	ldr	r3, [pc, #120]	; (800366c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d0f0      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035fc:	4b19      	ldr	r3, [pc, #100]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003604:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d039      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	429a      	cmp	r2, r3
 8003618:	d032      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800361a:	4b12      	ldr	r3, [pc, #72]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800361c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003622:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003624:	4b12      	ldr	r3, [pc, #72]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003626:	2201      	movs	r2, #1
 8003628:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800362a:	4b11      	ldr	r3, [pc, #68]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003630:	4a0c      	ldr	r2, [pc, #48]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003636:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b01      	cmp	r3, #1
 8003640:	d11e      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003642:	f7fe f93f 	bl	80018c4 <HAL_GetTick>
 8003646:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003648:	e014      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800364a:	f7fe f93b 	bl	80018c4 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	f241 3288 	movw	r2, #5000	; 0x1388
 8003658:	4293      	cmp	r3, r2
 800365a:	d90b      	bls.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e03f      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8003660:	42470068 	.word	0x42470068
 8003664:	40023800 	.word	0x40023800
 8003668:	42470070 	.word	0x42470070
 800366c:	40007000 	.word	0x40007000
 8003670:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003674:	4b1c      	ldr	r3, [pc, #112]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0e4      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003688:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800368c:	d10d      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x336>
 800368e:	4b16      	ldr	r3, [pc, #88]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800369e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a2:	4911      	ldr	r1, [pc, #68]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	608b      	str	r3, [r1, #8]
 80036a8:	e005      	b.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80036aa:	4b0f      	ldr	r3, [pc, #60]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	4a0e      	ldr	r2, [pc, #56]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80036b0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80036b4:	6093      	str	r3, [r2, #8]
 80036b6:	4b0c      	ldr	r3, [pc, #48]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80036b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c2:	4909      	ldr	r1, [pc, #36]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d004      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80036da:	4b04      	ldr	r3, [pc, #16]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80036dc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40023800 	.word	0x40023800
 80036ec:	424711e0 	.word	0x424711e0

080036f0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e025      	b.n	8003750 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d106      	bne.n	800371e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f7fd f8a9 	bl	8000870 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2202      	movs	r2, #2
 8003722:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	3304      	adds	r3, #4
 800372e:	4619      	mov	r1, r3
 8003730:	4610      	mov	r0, r2
 8003732:	f001 f831 	bl	8004798 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	461a      	mov	r2, r3
 8003740:	6839      	ldr	r1, [r7, #0]
 8003742:	f001 f89c 	bl	800487e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e07b      	b.n	8003862 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	2b00      	cmp	r3, #0
 8003770:	d108      	bne.n	8003784 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800377a:	d009      	beq.n	8003790 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	61da      	str	r2, [r3, #28]
 8003782:	e005      	b.n	8003790 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7fd fce6 	bl	800117c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003800:	431a      	orrs	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003814:	ea42 0103 	orr.w	r1, r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	0c1b      	lsrs	r3, r3, #16
 800382e:	f003 0104 	and.w	r1, r3, #4
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	f003 0210 	and.w	r2, r3, #16
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	69da      	ldr	r2, [r3, #28]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003850:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e041      	b.n	8003900 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d106      	bne.n	8003896 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7fd fe7f 	bl	8001594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2202      	movs	r2, #2
 800389a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3304      	adds	r3, #4
 80038a6:	4619      	mov	r1, r3
 80038a8:	4610      	mov	r0, r2
 80038aa:	f000 fa95 	bl	8003dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b01      	cmp	r3, #1
 800391a:	d001      	beq.n	8003920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e04e      	b.n	80039be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0201 	orr.w	r2, r2, #1
 8003936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a23      	ldr	r2, [pc, #140]	; (80039cc <HAL_TIM_Base_Start_IT+0xc4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d022      	beq.n	8003988 <HAL_TIM_Base_Start_IT+0x80>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800394a:	d01d      	beq.n	8003988 <HAL_TIM_Base_Start_IT+0x80>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1f      	ldr	r2, [pc, #124]	; (80039d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d018      	beq.n	8003988 <HAL_TIM_Base_Start_IT+0x80>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a1e      	ldr	r2, [pc, #120]	; (80039d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d013      	beq.n	8003988 <HAL_TIM_Base_Start_IT+0x80>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a1c      	ldr	r2, [pc, #112]	; (80039d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00e      	beq.n	8003988 <HAL_TIM_Base_Start_IT+0x80>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a1b      	ldr	r2, [pc, #108]	; (80039dc <HAL_TIM_Base_Start_IT+0xd4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d009      	beq.n	8003988 <HAL_TIM_Base_Start_IT+0x80>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a19      	ldr	r2, [pc, #100]	; (80039e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d004      	beq.n	8003988 <HAL_TIM_Base_Start_IT+0x80>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a18      	ldr	r2, [pc, #96]	; (80039e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d111      	bne.n	80039ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b06      	cmp	r3, #6
 8003998:	d010      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 0201 	orr.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039aa:	e007      	b.n	80039bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0201 	orr.w	r2, r2, #1
 80039ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40010000 	.word	0x40010000
 80039d0:	40000400 	.word	0x40000400
 80039d4:	40000800 	.word	0x40000800
 80039d8:	40000c00 	.word	0x40000c00
 80039dc:	40010400 	.word	0x40010400
 80039e0:	40014000 	.word	0x40014000
 80039e4:	40001800 	.word	0x40001800

080039e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d122      	bne.n	8003a44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d11b      	bne.n	8003a44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f06f 0202 	mvn.w	r2, #2
 8003a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f9b5 	bl	8003d9a <HAL_TIM_IC_CaptureCallback>
 8003a30:	e005      	b.n	8003a3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 f9a7 	bl	8003d86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f9b8 	bl	8003dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f003 0304 	and.w	r3, r3, #4
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d122      	bne.n	8003a98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d11b      	bne.n	8003a98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f06f 0204 	mvn.w	r2, #4
 8003a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f98b 	bl	8003d9a <HAL_TIM_IC_CaptureCallback>
 8003a84:	e005      	b.n	8003a92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f97d 	bl	8003d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f98e 	bl	8003dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d122      	bne.n	8003aec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	d11b      	bne.n	8003aec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0208 	mvn.w	r2, #8
 8003abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2204      	movs	r2, #4
 8003ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f961 	bl	8003d9a <HAL_TIM_IC_CaptureCallback>
 8003ad8:	e005      	b.n	8003ae6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 f953 	bl	8003d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f964 	bl	8003dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	2b10      	cmp	r3, #16
 8003af8:	d122      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	2b10      	cmp	r3, #16
 8003b06:	d11b      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f06f 0210 	mvn.w	r2, #16
 8003b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2208      	movs	r2, #8
 8003b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f937 	bl	8003d9a <HAL_TIM_IC_CaptureCallback>
 8003b2c:	e005      	b.n	8003b3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f929 	bl	8003d86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f93a 	bl	8003dae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d10e      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d107      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f06f 0201 	mvn.w	r2, #1
 8003b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fd faba 	bl	80010e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b76:	2b80      	cmp	r3, #128	; 0x80
 8003b78:	d10e      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b84:	2b80      	cmp	r3, #128	; 0x80
 8003b86:	d107      	bne.n	8003b98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 fae0 	bl	8004158 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	2b40      	cmp	r3, #64	; 0x40
 8003ba4:	d10e      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb0:	2b40      	cmp	r3, #64	; 0x40
 8003bb2:	d107      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f8ff 	bl	8003dc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0320 	and.w	r3, r3, #32
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	d10e      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d107      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0220 	mvn.w	r2, #32
 8003be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 faaa 	bl	8004144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bf0:	bf00      	nop
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c02:	2300      	movs	r3, #0
 8003c04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_TIM_ConfigClockSource+0x1c>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e0b4      	b.n	8003d7e <HAL_TIM_ConfigClockSource+0x186>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c4c:	d03e      	beq.n	8003ccc <HAL_TIM_ConfigClockSource+0xd4>
 8003c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c52:	f200 8087 	bhi.w	8003d64 <HAL_TIM_ConfigClockSource+0x16c>
 8003c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5a:	f000 8086 	beq.w	8003d6a <HAL_TIM_ConfigClockSource+0x172>
 8003c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c62:	d87f      	bhi.n	8003d64 <HAL_TIM_ConfigClockSource+0x16c>
 8003c64:	2b70      	cmp	r3, #112	; 0x70
 8003c66:	d01a      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0xa6>
 8003c68:	2b70      	cmp	r3, #112	; 0x70
 8003c6a:	d87b      	bhi.n	8003d64 <HAL_TIM_ConfigClockSource+0x16c>
 8003c6c:	2b60      	cmp	r3, #96	; 0x60
 8003c6e:	d050      	beq.n	8003d12 <HAL_TIM_ConfigClockSource+0x11a>
 8003c70:	2b60      	cmp	r3, #96	; 0x60
 8003c72:	d877      	bhi.n	8003d64 <HAL_TIM_ConfigClockSource+0x16c>
 8003c74:	2b50      	cmp	r3, #80	; 0x50
 8003c76:	d03c      	beq.n	8003cf2 <HAL_TIM_ConfigClockSource+0xfa>
 8003c78:	2b50      	cmp	r3, #80	; 0x50
 8003c7a:	d873      	bhi.n	8003d64 <HAL_TIM_ConfigClockSource+0x16c>
 8003c7c:	2b40      	cmp	r3, #64	; 0x40
 8003c7e:	d058      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0x13a>
 8003c80:	2b40      	cmp	r3, #64	; 0x40
 8003c82:	d86f      	bhi.n	8003d64 <HAL_TIM_ConfigClockSource+0x16c>
 8003c84:	2b30      	cmp	r3, #48	; 0x30
 8003c86:	d064      	beq.n	8003d52 <HAL_TIM_ConfigClockSource+0x15a>
 8003c88:	2b30      	cmp	r3, #48	; 0x30
 8003c8a:	d86b      	bhi.n	8003d64 <HAL_TIM_ConfigClockSource+0x16c>
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d060      	beq.n	8003d52 <HAL_TIM_ConfigClockSource+0x15a>
 8003c90:	2b20      	cmp	r3, #32
 8003c92:	d867      	bhi.n	8003d64 <HAL_TIM_ConfigClockSource+0x16c>
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d05c      	beq.n	8003d52 <HAL_TIM_ConfigClockSource+0x15a>
 8003c98:	2b10      	cmp	r3, #16
 8003c9a:	d05a      	beq.n	8003d52 <HAL_TIM_ConfigClockSource+0x15a>
 8003c9c:	e062      	b.n	8003d64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	6899      	ldr	r1, [r3, #8]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f000 f9ad 	bl	800400c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	609a      	str	r2, [r3, #8]
      break;
 8003cca:	e04f      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	6899      	ldr	r1, [r3, #8]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f000 f996 	bl	800400c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cee:	609a      	str	r2, [r3, #8]
      break;
 8003cf0:	e03c      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6818      	ldr	r0, [r3, #0]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	6859      	ldr	r1, [r3, #4]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	f000 f90a 	bl	8003f18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2150      	movs	r1, #80	; 0x50
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 f963 	bl	8003fd6 <TIM_ITRx_SetConfig>
      break;
 8003d10:	e02c      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6859      	ldr	r1, [r3, #4]
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	461a      	mov	r2, r3
 8003d20:	f000 f929 	bl	8003f76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2160      	movs	r1, #96	; 0x60
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 f953 	bl	8003fd6 <TIM_ITRx_SetConfig>
      break;
 8003d30:	e01c      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	6859      	ldr	r1, [r3, #4]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	f000 f8ea 	bl	8003f18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2140      	movs	r1, #64	; 0x40
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 f943 	bl	8003fd6 <TIM_ITRx_SetConfig>
      break;
 8003d50:	e00c      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	f000 f93a 	bl	8003fd6 <TIM_ITRx_SetConfig>
      break;
 8003d62:	e003      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	73fb      	strb	r3, [r7, #15]
      break;
 8003d68:	e000      	b.n	8003d6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b083      	sub	sp, #12
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dca:	bf00      	nop
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
	...

08003dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a40      	ldr	r2, [pc, #256]	; (8003eec <TIM_Base_SetConfig+0x114>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d013      	beq.n	8003e18 <TIM_Base_SetConfig+0x40>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df6:	d00f      	beq.n	8003e18 <TIM_Base_SetConfig+0x40>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a3d      	ldr	r2, [pc, #244]	; (8003ef0 <TIM_Base_SetConfig+0x118>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00b      	beq.n	8003e18 <TIM_Base_SetConfig+0x40>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a3c      	ldr	r2, [pc, #240]	; (8003ef4 <TIM_Base_SetConfig+0x11c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d007      	beq.n	8003e18 <TIM_Base_SetConfig+0x40>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a3b      	ldr	r2, [pc, #236]	; (8003ef8 <TIM_Base_SetConfig+0x120>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d003      	beq.n	8003e18 <TIM_Base_SetConfig+0x40>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a3a      	ldr	r2, [pc, #232]	; (8003efc <TIM_Base_SetConfig+0x124>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d108      	bne.n	8003e2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a2f      	ldr	r2, [pc, #188]	; (8003eec <TIM_Base_SetConfig+0x114>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d02b      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e38:	d027      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a2c      	ldr	r2, [pc, #176]	; (8003ef0 <TIM_Base_SetConfig+0x118>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d023      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a2b      	ldr	r2, [pc, #172]	; (8003ef4 <TIM_Base_SetConfig+0x11c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d01f      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a2a      	ldr	r2, [pc, #168]	; (8003ef8 <TIM_Base_SetConfig+0x120>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d01b      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a29      	ldr	r2, [pc, #164]	; (8003efc <TIM_Base_SetConfig+0x124>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d017      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a28      	ldr	r2, [pc, #160]	; (8003f00 <TIM_Base_SetConfig+0x128>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d013      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a27      	ldr	r2, [pc, #156]	; (8003f04 <TIM_Base_SetConfig+0x12c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d00f      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a26      	ldr	r2, [pc, #152]	; (8003f08 <TIM_Base_SetConfig+0x130>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00b      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a25      	ldr	r2, [pc, #148]	; (8003f0c <TIM_Base_SetConfig+0x134>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d007      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a24      	ldr	r2, [pc, #144]	; (8003f10 <TIM_Base_SetConfig+0x138>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d003      	beq.n	8003e8a <TIM_Base_SetConfig+0xb2>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a23      	ldr	r2, [pc, #140]	; (8003f14 <TIM_Base_SetConfig+0x13c>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d108      	bne.n	8003e9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a0a      	ldr	r2, [pc, #40]	; (8003eec <TIM_Base_SetConfig+0x114>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d003      	beq.n	8003ed0 <TIM_Base_SetConfig+0xf8>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a0c      	ldr	r2, [pc, #48]	; (8003efc <TIM_Base_SetConfig+0x124>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d103      	bne.n	8003ed8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	691a      	ldr	r2, [r3, #16]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	615a      	str	r2, [r3, #20]
}
 8003ede:	bf00      	nop
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	40010000 	.word	0x40010000
 8003ef0:	40000400 	.word	0x40000400
 8003ef4:	40000800 	.word	0x40000800
 8003ef8:	40000c00 	.word	0x40000c00
 8003efc:	40010400 	.word	0x40010400
 8003f00:	40014000 	.word	0x40014000
 8003f04:	40014400 	.word	0x40014400
 8003f08:	40014800 	.word	0x40014800
 8003f0c:	40001800 	.word	0x40001800
 8003f10:	40001c00 	.word	0x40001c00
 8003f14:	40002000 	.word	0x40002000

08003f18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	f023 0201 	bic.w	r2, r3, #1
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f023 030a 	bic.w	r3, r3, #10
 8003f54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	621a      	str	r2, [r3, #32]
}
 8003f6a:	bf00      	nop
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b087      	sub	sp, #28
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	f023 0210 	bic.w	r2, r3, #16
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	031b      	lsls	r3, r3, #12
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	621a      	str	r2, [r3, #32]
}
 8003fca:	bf00      	nop
 8003fcc:	371c      	adds	r7, #28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b085      	sub	sp, #20
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f043 0307 	orr.w	r3, r3, #7
 8003ff8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	609a      	str	r2, [r3, #8]
}
 8004000:	bf00      	nop
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800400c:	b480      	push	{r7}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004026:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	021a      	lsls	r2, r3, #8
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	431a      	orrs	r2, r3
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	4313      	orrs	r3, r2
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	4313      	orrs	r3, r2
 8004038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	609a      	str	r2, [r3, #8]
}
 8004040:	bf00      	nop
 8004042:	371c      	adds	r7, #28
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004060:	2302      	movs	r3, #2
 8004062:	e05a      	b.n	800411a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800408a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4313      	orrs	r3, r2
 8004094:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a21      	ldr	r2, [pc, #132]	; (8004128 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d022      	beq.n	80040ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b0:	d01d      	beq.n	80040ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a1d      	ldr	r2, [pc, #116]	; (800412c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d018      	beq.n	80040ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a1b      	ldr	r2, [pc, #108]	; (8004130 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d013      	beq.n	80040ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a1a      	ldr	r2, [pc, #104]	; (8004134 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d00e      	beq.n	80040ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a18      	ldr	r2, [pc, #96]	; (8004138 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d009      	beq.n	80040ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a17      	ldr	r2, [pc, #92]	; (800413c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d004      	beq.n	80040ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a15      	ldr	r2, [pc, #84]	; (8004140 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d10c      	bne.n	8004108 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3714      	adds	r7, #20
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	40010000 	.word	0x40010000
 800412c:	40000400 	.word	0x40000400
 8004130:	40000800 	.word	0x40000800
 8004134:	40000c00 	.word	0x40000c00
 8004138:	40010400 	.word	0x40010400
 800413c:	40014000 	.word	0x40014000
 8004140:	40001800 	.word	0x40001800

08004144 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e03f      	b.n	80041fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fd fa6c 	bl	8001670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2224      	movs	r2, #36	; 0x24
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 f929 	bl	8004408 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	695a      	ldr	r2, [r3, #20]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b08a      	sub	sp, #40	; 0x28
 800420a:	af02      	add	r7, sp, #8
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	603b      	str	r3, [r7, #0]
 8004212:	4613      	mov	r3, r2
 8004214:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b20      	cmp	r3, #32
 8004224:	d17c      	bne.n	8004320 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d002      	beq.n	8004232 <HAL_UART_Transmit+0x2c>
 800422c:	88fb      	ldrh	r3, [r7, #6]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e075      	b.n	8004322 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_UART_Transmit+0x3e>
 8004240:	2302      	movs	r3, #2
 8004242:	e06e      	b.n	8004322 <HAL_UART_Transmit+0x11c>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2221      	movs	r2, #33	; 0x21
 8004256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800425a:	f7fd fb33 	bl	80018c4 <HAL_GetTick>
 800425e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	88fa      	ldrh	r2, [r7, #6]
 8004264:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	88fa      	ldrh	r2, [r7, #6]
 800426a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004274:	d108      	bne.n	8004288 <HAL_UART_Transmit+0x82>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d104      	bne.n	8004288 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	61bb      	str	r3, [r7, #24]
 8004286:	e003      	b.n	8004290 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800428c:	2300      	movs	r3, #0
 800428e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004298:	e02a      	b.n	80042f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2200      	movs	r2, #0
 80042a2:	2180      	movs	r1, #128	; 0x80
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f000 f840 	bl	800432a <UART_WaitOnFlagUntilTimeout>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e036      	b.n	8004322 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10b      	bne.n	80042d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	461a      	mov	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	3302      	adds	r3, #2
 80042ce:	61bb      	str	r3, [r7, #24]
 80042d0:	e007      	b.n	80042e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	781a      	ldrb	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	3301      	adds	r3, #1
 80042e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1cf      	bne.n	800429a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2200      	movs	r2, #0
 8004302:	2140      	movs	r1, #64	; 0x40
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 f810 	bl	800432a <UART_WaitOnFlagUntilTimeout>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e006      	b.n	8004322 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	e000      	b.n	8004322 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004320:	2302      	movs	r3, #2
  }
}
 8004322:	4618      	mov	r0, r3
 8004324:	3720      	adds	r7, #32
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b090      	sub	sp, #64	; 0x40
 800432e:	af00      	add	r7, sp, #0
 8004330:	60f8      	str	r0, [r7, #12]
 8004332:	60b9      	str	r1, [r7, #8]
 8004334:	603b      	str	r3, [r7, #0]
 8004336:	4613      	mov	r3, r2
 8004338:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800433a:	e050      	b.n	80043de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800433c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800433e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004342:	d04c      	beq.n	80043de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004346:	2b00      	cmp	r3, #0
 8004348:	d007      	beq.n	800435a <UART_WaitOnFlagUntilTimeout+0x30>
 800434a:	f7fd fabb 	bl	80018c4 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004356:	429a      	cmp	r2, r3
 8004358:	d241      	bcs.n	80043de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	330c      	adds	r3, #12
 8004360:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004364:	e853 3f00 	ldrex	r3, [r3]
 8004368:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004370:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	330c      	adds	r3, #12
 8004378:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800437a:	637a      	str	r2, [r7, #52]	; 0x34
 800437c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004382:	e841 2300 	strex	r3, r2, [r1]
 8004386:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1e5      	bne.n	800435a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	3314      	adds	r3, #20
 8004394:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	e853 3f00 	ldrex	r3, [r3]
 800439c:	613b      	str	r3, [r7, #16]
   return(result);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f023 0301 	bic.w	r3, r3, #1
 80043a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3314      	adds	r3, #20
 80043ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043ae:	623a      	str	r2, [r7, #32]
 80043b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b2:	69f9      	ldr	r1, [r7, #28]
 80043b4:	6a3a      	ldr	r2, [r7, #32]
 80043b6:	e841 2300 	strex	r3, r2, [r1]
 80043ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1e5      	bne.n	800438e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e00f      	b.n	80043fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4013      	ands	r3, r2
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	bf0c      	ite	eq
 80043ee:	2301      	moveq	r3, #1
 80043f0:	2300      	movne	r3, #0
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	461a      	mov	r2, r3
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d09f      	beq.n	800433c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3740      	adds	r7, #64	; 0x40
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800440c:	b09f      	sub	sp, #124	; 0x7c
 800440e:	af00      	add	r7, sp, #0
 8004410:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800441c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800441e:	68d9      	ldr	r1, [r3, #12]
 8004420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	ea40 0301 	orr.w	r3, r0, r1
 8004428:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800442a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	431a      	orrs	r2, r3
 8004434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	431a      	orrs	r2, r3
 800443a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	4313      	orrs	r3, r2
 8004440:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800444c:	f021 010c 	bic.w	r1, r1, #12
 8004450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004456:	430b      	orrs	r3, r1
 8004458:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800445a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004466:	6999      	ldr	r1, [r3, #24]
 8004468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	ea40 0301 	orr.w	r3, r0, r1
 8004470:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	4bc5      	ldr	r3, [pc, #788]	; (800478c <UART_SetConfig+0x384>)
 8004478:	429a      	cmp	r2, r3
 800447a:	d004      	beq.n	8004486 <UART_SetConfig+0x7e>
 800447c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	4bc3      	ldr	r3, [pc, #780]	; (8004790 <UART_SetConfig+0x388>)
 8004482:	429a      	cmp	r2, r3
 8004484:	d103      	bne.n	800448e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004486:	f7fe ff2f 	bl	80032e8 <HAL_RCC_GetPCLK2Freq>
 800448a:	6778      	str	r0, [r7, #116]	; 0x74
 800448c:	e002      	b.n	8004494 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800448e:	f7fe ff17 	bl	80032c0 <HAL_RCC_GetPCLK1Freq>
 8004492:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800449c:	f040 80b6 	bne.w	800460c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044a2:	461c      	mov	r4, r3
 80044a4:	f04f 0500 	mov.w	r5, #0
 80044a8:	4622      	mov	r2, r4
 80044aa:	462b      	mov	r3, r5
 80044ac:	1891      	adds	r1, r2, r2
 80044ae:	6439      	str	r1, [r7, #64]	; 0x40
 80044b0:	415b      	adcs	r3, r3
 80044b2:	647b      	str	r3, [r7, #68]	; 0x44
 80044b4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044b8:	1912      	adds	r2, r2, r4
 80044ba:	eb45 0303 	adc.w	r3, r5, r3
 80044be:	f04f 0000 	mov.w	r0, #0
 80044c2:	f04f 0100 	mov.w	r1, #0
 80044c6:	00d9      	lsls	r1, r3, #3
 80044c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044cc:	00d0      	lsls	r0, r2, #3
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	1911      	adds	r1, r2, r4
 80044d4:	6639      	str	r1, [r7, #96]	; 0x60
 80044d6:	416b      	adcs	r3, r5
 80044d8:	667b      	str	r3, [r7, #100]	; 0x64
 80044da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	461a      	mov	r2, r3
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	1891      	adds	r1, r2, r2
 80044e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80044e8:	415b      	adcs	r3, r3
 80044ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044f0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80044f4:	f7fb fed4 	bl	80002a0 <__aeabi_uldivmod>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4ba5      	ldr	r3, [pc, #660]	; (8004794 <UART_SetConfig+0x38c>)
 80044fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004502:	095b      	lsrs	r3, r3, #5
 8004504:	011e      	lsls	r6, r3, #4
 8004506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004508:	461c      	mov	r4, r3
 800450a:	f04f 0500 	mov.w	r5, #0
 800450e:	4622      	mov	r2, r4
 8004510:	462b      	mov	r3, r5
 8004512:	1891      	adds	r1, r2, r2
 8004514:	6339      	str	r1, [r7, #48]	; 0x30
 8004516:	415b      	adcs	r3, r3
 8004518:	637b      	str	r3, [r7, #52]	; 0x34
 800451a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800451e:	1912      	adds	r2, r2, r4
 8004520:	eb45 0303 	adc.w	r3, r5, r3
 8004524:	f04f 0000 	mov.w	r0, #0
 8004528:	f04f 0100 	mov.w	r1, #0
 800452c:	00d9      	lsls	r1, r3, #3
 800452e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004532:	00d0      	lsls	r0, r2, #3
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	1911      	adds	r1, r2, r4
 800453a:	65b9      	str	r1, [r7, #88]	; 0x58
 800453c:	416b      	adcs	r3, r5
 800453e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	461a      	mov	r2, r3
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	1891      	adds	r1, r2, r2
 800454c:	62b9      	str	r1, [r7, #40]	; 0x28
 800454e:	415b      	adcs	r3, r3
 8004550:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004552:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004556:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800455a:	f7fb fea1 	bl	80002a0 <__aeabi_uldivmod>
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	4b8c      	ldr	r3, [pc, #560]	; (8004794 <UART_SetConfig+0x38c>)
 8004564:	fba3 1302 	umull	r1, r3, r3, r2
 8004568:	095b      	lsrs	r3, r3, #5
 800456a:	2164      	movs	r1, #100	; 0x64
 800456c:	fb01 f303 	mul.w	r3, r1, r3
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	3332      	adds	r3, #50	; 0x32
 8004576:	4a87      	ldr	r2, [pc, #540]	; (8004794 <UART_SetConfig+0x38c>)
 8004578:	fba2 2303 	umull	r2, r3, r2, r3
 800457c:	095b      	lsrs	r3, r3, #5
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004584:	441e      	add	r6, r3
 8004586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004588:	4618      	mov	r0, r3
 800458a:	f04f 0100 	mov.w	r1, #0
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	1894      	adds	r4, r2, r2
 8004594:	623c      	str	r4, [r7, #32]
 8004596:	415b      	adcs	r3, r3
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
 800459a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800459e:	1812      	adds	r2, r2, r0
 80045a0:	eb41 0303 	adc.w	r3, r1, r3
 80045a4:	f04f 0400 	mov.w	r4, #0
 80045a8:	f04f 0500 	mov.w	r5, #0
 80045ac:	00dd      	lsls	r5, r3, #3
 80045ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045b2:	00d4      	lsls	r4, r2, #3
 80045b4:	4622      	mov	r2, r4
 80045b6:	462b      	mov	r3, r5
 80045b8:	1814      	adds	r4, r2, r0
 80045ba:	653c      	str	r4, [r7, #80]	; 0x50
 80045bc:	414b      	adcs	r3, r1
 80045be:	657b      	str	r3, [r7, #84]	; 0x54
 80045c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	461a      	mov	r2, r3
 80045c6:	f04f 0300 	mov.w	r3, #0
 80045ca:	1891      	adds	r1, r2, r2
 80045cc:	61b9      	str	r1, [r7, #24]
 80045ce:	415b      	adcs	r3, r3
 80045d0:	61fb      	str	r3, [r7, #28]
 80045d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80045da:	f7fb fe61 	bl	80002a0 <__aeabi_uldivmod>
 80045de:	4602      	mov	r2, r0
 80045e0:	460b      	mov	r3, r1
 80045e2:	4b6c      	ldr	r3, [pc, #432]	; (8004794 <UART_SetConfig+0x38c>)
 80045e4:	fba3 1302 	umull	r1, r3, r3, r2
 80045e8:	095b      	lsrs	r3, r3, #5
 80045ea:	2164      	movs	r1, #100	; 0x64
 80045ec:	fb01 f303 	mul.w	r3, r1, r3
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	3332      	adds	r3, #50	; 0x32
 80045f6:	4a67      	ldr	r2, [pc, #412]	; (8004794 <UART_SetConfig+0x38c>)
 80045f8:	fba2 2303 	umull	r2, r3, r2, r3
 80045fc:	095b      	lsrs	r3, r3, #5
 80045fe:	f003 0207 	and.w	r2, r3, #7
 8004602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4432      	add	r2, r6
 8004608:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800460a:	e0b9      	b.n	8004780 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800460c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800460e:	461c      	mov	r4, r3
 8004610:	f04f 0500 	mov.w	r5, #0
 8004614:	4622      	mov	r2, r4
 8004616:	462b      	mov	r3, r5
 8004618:	1891      	adds	r1, r2, r2
 800461a:	6139      	str	r1, [r7, #16]
 800461c:	415b      	adcs	r3, r3
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004624:	1912      	adds	r2, r2, r4
 8004626:	eb45 0303 	adc.w	r3, r5, r3
 800462a:	f04f 0000 	mov.w	r0, #0
 800462e:	f04f 0100 	mov.w	r1, #0
 8004632:	00d9      	lsls	r1, r3, #3
 8004634:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004638:	00d0      	lsls	r0, r2, #3
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	eb12 0804 	adds.w	r8, r2, r4
 8004642:	eb43 0905 	adc.w	r9, r3, r5
 8004646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	4618      	mov	r0, r3
 800464c:	f04f 0100 	mov.w	r1, #0
 8004650:	f04f 0200 	mov.w	r2, #0
 8004654:	f04f 0300 	mov.w	r3, #0
 8004658:	008b      	lsls	r3, r1, #2
 800465a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800465e:	0082      	lsls	r2, r0, #2
 8004660:	4640      	mov	r0, r8
 8004662:	4649      	mov	r1, r9
 8004664:	f7fb fe1c 	bl	80002a0 <__aeabi_uldivmod>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	4b49      	ldr	r3, [pc, #292]	; (8004794 <UART_SetConfig+0x38c>)
 800466e:	fba3 2302 	umull	r2, r3, r3, r2
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	011e      	lsls	r6, r3, #4
 8004676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004678:	4618      	mov	r0, r3
 800467a:	f04f 0100 	mov.w	r1, #0
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	1894      	adds	r4, r2, r2
 8004684:	60bc      	str	r4, [r7, #8]
 8004686:	415b      	adcs	r3, r3
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800468e:	1812      	adds	r2, r2, r0
 8004690:	eb41 0303 	adc.w	r3, r1, r3
 8004694:	f04f 0400 	mov.w	r4, #0
 8004698:	f04f 0500 	mov.w	r5, #0
 800469c:	00dd      	lsls	r5, r3, #3
 800469e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046a2:	00d4      	lsls	r4, r2, #3
 80046a4:	4622      	mov	r2, r4
 80046a6:	462b      	mov	r3, r5
 80046a8:	1814      	adds	r4, r2, r0
 80046aa:	64bc      	str	r4, [r7, #72]	; 0x48
 80046ac:	414b      	adcs	r3, r1
 80046ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f04f 0100 	mov.w	r1, #0
 80046ba:	f04f 0200 	mov.w	r2, #0
 80046be:	f04f 0300 	mov.w	r3, #0
 80046c2:	008b      	lsls	r3, r1, #2
 80046c4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046c8:	0082      	lsls	r2, r0, #2
 80046ca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80046ce:	f7fb fde7 	bl	80002a0 <__aeabi_uldivmod>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4b2f      	ldr	r3, [pc, #188]	; (8004794 <UART_SetConfig+0x38c>)
 80046d8:	fba3 1302 	umull	r1, r3, r3, r2
 80046dc:	095b      	lsrs	r3, r3, #5
 80046de:	2164      	movs	r1, #100	; 0x64
 80046e0:	fb01 f303 	mul.w	r3, r1, r3
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	011b      	lsls	r3, r3, #4
 80046e8:	3332      	adds	r3, #50	; 0x32
 80046ea:	4a2a      	ldr	r2, [pc, #168]	; (8004794 <UART_SetConfig+0x38c>)
 80046ec:	fba2 2303 	umull	r2, r3, r2, r3
 80046f0:	095b      	lsrs	r3, r3, #5
 80046f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046f6:	441e      	add	r6, r3
 80046f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046fa:	4618      	mov	r0, r3
 80046fc:	f04f 0100 	mov.w	r1, #0
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	1894      	adds	r4, r2, r2
 8004706:	603c      	str	r4, [r7, #0]
 8004708:	415b      	adcs	r3, r3
 800470a:	607b      	str	r3, [r7, #4]
 800470c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004710:	1812      	adds	r2, r2, r0
 8004712:	eb41 0303 	adc.w	r3, r1, r3
 8004716:	f04f 0400 	mov.w	r4, #0
 800471a:	f04f 0500 	mov.w	r5, #0
 800471e:	00dd      	lsls	r5, r3, #3
 8004720:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004724:	00d4      	lsls	r4, r2, #3
 8004726:	4622      	mov	r2, r4
 8004728:	462b      	mov	r3, r5
 800472a:	eb12 0a00 	adds.w	sl, r2, r0
 800472e:	eb43 0b01 	adc.w	fp, r3, r1
 8004732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	4618      	mov	r0, r3
 8004738:	f04f 0100 	mov.w	r1, #0
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	008b      	lsls	r3, r1, #2
 8004746:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800474a:	0082      	lsls	r2, r0, #2
 800474c:	4650      	mov	r0, sl
 800474e:	4659      	mov	r1, fp
 8004750:	f7fb fda6 	bl	80002a0 <__aeabi_uldivmod>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <UART_SetConfig+0x38c>)
 800475a:	fba3 1302 	umull	r1, r3, r3, r2
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	2164      	movs	r1, #100	; 0x64
 8004762:	fb01 f303 	mul.w	r3, r1, r3
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	3332      	adds	r3, #50	; 0x32
 800476c:	4a09      	ldr	r2, [pc, #36]	; (8004794 <UART_SetConfig+0x38c>)
 800476e:	fba2 2303 	umull	r2, r3, r2, r3
 8004772:	095b      	lsrs	r3, r3, #5
 8004774:	f003 020f 	and.w	r2, r3, #15
 8004778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4432      	add	r2, r6
 800477e:	609a      	str	r2, [r3, #8]
}
 8004780:	bf00      	nop
 8004782:	377c      	adds	r7, #124	; 0x7c
 8004784:	46bd      	mov	sp, r7
 8004786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800478a:	bf00      	nop
 800478c:	40011000 	.word	0x40011000
 8004790:	40011400 	.word	0x40011400
 8004794:	51eb851f 	.word	0x51eb851f

08004798 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d029      	beq.n	8004806 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80047be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80047c2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80047cc:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80047d2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80047d8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80047de:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80047e4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80047ea:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80047f0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80047f6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	e034      	b.n	8004870 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004812:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800481c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8004822:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004836:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800483a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004844:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800484a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8004850:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8004856:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800485c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	4313      	orrs	r3, r2
 8004862:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800487e:	b480      	push	{r7}
 8004880:	b087      	sub	sp, #28
 8004882:	af00      	add	r7, sp, #0
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d02e      	beq.n	80048f6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80048a4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	3b01      	subs	r3, #1
 80048b2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80048b4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80048be:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	3b01      	subs	r3, #1
 80048c6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80048c8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80048d2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	3b01      	subs	r3, #1
 80048da:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80048dc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	3b01      	subs	r3, #1
 80048e4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80048e6:	4313      	orrs	r3, r2
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	609a      	str	r2, [r3, #8]
 80048f4:	e03b      	b.n	800496e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004902:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004906:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	3b01      	subs	r3, #1
 800490e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	3b01      	subs	r3, #1
 8004916:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8004918:	4313      	orrs	r3, r2
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800492c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	3b01      	subs	r3, #1
 800493a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800493c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	3b01      	subs	r3, #1
 8004944:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8004946:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	3b01      	subs	r3, #1
 800494e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8004950:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	3b01      	subs	r3, #1
 8004958:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800495a:	4313      	orrs	r3, r2
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	4313      	orrs	r3, r2
 8004960:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	371c      	adds	r7, #28
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800497c:	b084      	sub	sp, #16
 800497e:	b580      	push	{r7, lr}
 8004980:	b084      	sub	sp, #16
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	f107 001c 	add.w	r0, r7, #28
 800498a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800498e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004990:	2b01      	cmp	r3, #1
 8004992:	d122      	bne.n	80049da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004998:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80049a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d105      	bne.n	80049ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f8e4 	bl	8004b9c <USB_CoreReset>
 80049d4:	4603      	mov	r3, r0
 80049d6:	73fb      	strb	r3, [r7, #15]
 80049d8:	e01a      	b.n	8004a10 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f8d8 	bl	8004b9c <USB_CoreReset>
 80049ec:	4603      	mov	r3, r0
 80049ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80049f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d106      	bne.n	8004a04 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	639a      	str	r2, [r3, #56]	; 0x38
 8004a02:	e005      	b.n	8004a10 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d10b      	bne.n	8004a2e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f043 0206 	orr.w	r2, r3, #6
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f043 0220 	orr.w	r2, r3, #32
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a3a:	b004      	add	sp, #16
 8004a3c:	4770      	bx	lr

08004a3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f023 0201 	bic.w	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a7c:	78fb      	ldrb	r3, [r7, #3]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d115      	bne.n	8004aae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004a8e:	2001      	movs	r0, #1
 8004a90:	f7fc ff24 	bl	80018dc <HAL_Delay>
      ms++;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3301      	adds	r3, #1
 8004a98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f870 	bl	8004b80 <USB_GetMode>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d01e      	beq.n	8004ae4 <USB_SetCurrentMode+0x84>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2b31      	cmp	r3, #49	; 0x31
 8004aaa:	d9f0      	bls.n	8004a8e <USB_SetCurrentMode+0x2e>
 8004aac:	e01a      	b.n	8004ae4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004aae:	78fb      	ldrb	r3, [r7, #3]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d115      	bne.n	8004ae0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ac0:	2001      	movs	r0, #1
 8004ac2:	f7fc ff0b 	bl	80018dc <HAL_Delay>
      ms++;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f857 	bl	8004b80 <USB_GetMode>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <USB_SetCurrentMode+0x84>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b31      	cmp	r3, #49	; 0x31
 8004adc:	d9f0      	bls.n	8004ac0 <USB_SetCurrentMode+0x60>
 8004ade:	e001      	b.n	8004ae4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e005      	b.n	8004af0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b32      	cmp	r3, #50	; 0x32
 8004ae8:	d101      	bne.n	8004aee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b02:	2300      	movs	r3, #0
 8004b04:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	019b      	lsls	r3, r3, #6
 8004b0a:	f043 0220 	orr.w	r2, r3, #32
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	3301      	adds	r3, #1
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	4a08      	ldr	r2, [pc, #32]	; (8004b3c <USB_FlushTxFifo+0x44>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d901      	bls.n	8004b22 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e006      	b.n	8004b30 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f003 0320 	and.w	r3, r3, #32
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	d0f1      	beq.n	8004b12 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	00030d40 	.word	0x00030d40

08004b40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2210      	movs	r2, #16
 8004b50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3301      	adds	r3, #1
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	4a08      	ldr	r2, [pc, #32]	; (8004b7c <USB_FlushRxFifo+0x3c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d901      	bls.n	8004b62 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e006      	b.n	8004b70 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	f003 0310 	and.w	r3, r3, #16
 8004b6a:	2b10      	cmp	r3, #16
 8004b6c:	d0f1      	beq.n	8004b52 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	00030d40 	.word	0x00030d40

08004b80 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3301      	adds	r3, #1
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	4a13      	ldr	r2, [pc, #76]	; (8004bfc <USB_CoreReset+0x60>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d901      	bls.n	8004bb8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e01a      	b.n	8004bee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	daf3      	bge.n	8004ba8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	f043 0201 	orr.w	r2, r3, #1
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	60fb      	str	r3, [r7, #12]
 8004bd6:	4a09      	ldr	r2, [pc, #36]	; (8004bfc <USB_CoreReset+0x60>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d901      	bls.n	8004be0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e006      	b.n	8004bee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d0f1      	beq.n	8004bd0 <USB_CoreReset+0x34>

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	00030d40 	.word	0x00030d40

08004c00 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c00:	b084      	sub	sp, #16
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	f107 001c 	add.w	r0, r7, #28
 8004c0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	2300      	movs	r3, #0
 8004c20:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c32:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d018      	beq.n	8004c84 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d10a      	bne.n	8004c6e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c66:	f043 0304 	orr.w	r3, r3, #4
 8004c6a:	6013      	str	r3, [r2, #0]
 8004c6c:	e014      	b.n	8004c98 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c7c:	f023 0304 	bic.w	r3, r3, #4
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	e009      	b.n	8004c98 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c92:	f023 0304 	bic.w	r3, r3, #4
 8004c96:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004c98:	2110      	movs	r1, #16
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7ff ff2c 	bl	8004af8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f7ff ff4d 	bl	8004b40 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	e015      	b.n	8004cd8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cb8:	461a      	mov	r2, r3
 8004cba:	f04f 33ff 	mov.w	r3, #4294967295
 8004cbe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ccc:	461a      	mov	r2, r3
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d3e5      	bcc.n	8004cac <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8004cec:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00b      	beq.n	8004d12 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d00:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a13      	ldr	r2, [pc, #76]	; (8004d54 <USB_HostInit+0x154>)
 8004d06:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a13      	ldr	r2, [pc, #76]	; (8004d58 <USB_HostInit+0x158>)
 8004d0c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004d10:	e009      	b.n	8004d26 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2280      	movs	r2, #128	; 0x80
 8004d16:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a10      	ldr	r2, [pc, #64]	; (8004d5c <USB_HostInit+0x15c>)
 8004d1c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a0f      	ldr	r2, [pc, #60]	; (8004d60 <USB_HostInit+0x160>)
 8004d22:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d105      	bne.n	8004d38 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	f043 0210 	orr.w	r2, r3, #16
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	699a      	ldr	r2, [r3, #24]
 8004d3c:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <USB_HostInit+0x164>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d50:	b004      	add	sp, #16
 8004d52:	4770      	bx	lr
 8004d54:	01000200 	.word	0x01000200
 8004d58:	00e00300 	.word	0x00e00300
 8004d5c:	00600080 	.word	0x00600080
 8004d60:	004000e0 	.word	0x004000e0
 8004d64:	a3200008 	.word	0xa3200008

08004d68 <__errno>:
 8004d68:	4b01      	ldr	r3, [pc, #4]	; (8004d70 <__errno+0x8>)
 8004d6a:	6818      	ldr	r0, [r3, #0]
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	2000000c 	.word	0x2000000c

08004d74 <__libc_init_array>:
 8004d74:	b570      	push	{r4, r5, r6, lr}
 8004d76:	4d0d      	ldr	r5, [pc, #52]	; (8004dac <__libc_init_array+0x38>)
 8004d78:	4c0d      	ldr	r4, [pc, #52]	; (8004db0 <__libc_init_array+0x3c>)
 8004d7a:	1b64      	subs	r4, r4, r5
 8004d7c:	10a4      	asrs	r4, r4, #2
 8004d7e:	2600      	movs	r6, #0
 8004d80:	42a6      	cmp	r6, r4
 8004d82:	d109      	bne.n	8004d98 <__libc_init_array+0x24>
 8004d84:	4d0b      	ldr	r5, [pc, #44]	; (8004db4 <__libc_init_array+0x40>)
 8004d86:	4c0c      	ldr	r4, [pc, #48]	; (8004db8 <__libc_init_array+0x44>)
 8004d88:	f000 fc4e 	bl	8005628 <_init>
 8004d8c:	1b64      	subs	r4, r4, r5
 8004d8e:	10a4      	asrs	r4, r4, #2
 8004d90:	2600      	movs	r6, #0
 8004d92:	42a6      	cmp	r6, r4
 8004d94:	d105      	bne.n	8004da2 <__libc_init_array+0x2e>
 8004d96:	bd70      	pop	{r4, r5, r6, pc}
 8004d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d9c:	4798      	blx	r3
 8004d9e:	3601      	adds	r6, #1
 8004da0:	e7ee      	b.n	8004d80 <__libc_init_array+0xc>
 8004da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004da6:	4798      	blx	r3
 8004da8:	3601      	adds	r6, #1
 8004daa:	e7f2      	b.n	8004d92 <__libc_init_array+0x1e>
 8004dac:	080056a8 	.word	0x080056a8
 8004db0:	080056a8 	.word	0x080056a8
 8004db4:	080056a8 	.word	0x080056a8
 8004db8:	080056ac 	.word	0x080056ac

08004dbc <memset>:
 8004dbc:	4402      	add	r2, r0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d100      	bne.n	8004dc6 <memset+0xa>
 8004dc4:	4770      	bx	lr
 8004dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dca:	e7f9      	b.n	8004dc0 <memset+0x4>

08004dcc <siprintf>:
 8004dcc:	b40e      	push	{r1, r2, r3}
 8004dce:	b500      	push	{lr}
 8004dd0:	b09c      	sub	sp, #112	; 0x70
 8004dd2:	ab1d      	add	r3, sp, #116	; 0x74
 8004dd4:	9002      	str	r0, [sp, #8]
 8004dd6:	9006      	str	r0, [sp, #24]
 8004dd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ddc:	4809      	ldr	r0, [pc, #36]	; (8004e04 <siprintf+0x38>)
 8004dde:	9107      	str	r1, [sp, #28]
 8004de0:	9104      	str	r1, [sp, #16]
 8004de2:	4909      	ldr	r1, [pc, #36]	; (8004e08 <siprintf+0x3c>)
 8004de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004de8:	9105      	str	r1, [sp, #20]
 8004dea:	6800      	ldr	r0, [r0, #0]
 8004dec:	9301      	str	r3, [sp, #4]
 8004dee:	a902      	add	r1, sp, #8
 8004df0:	f000 f868 	bl	8004ec4 <_svfiprintf_r>
 8004df4:	9b02      	ldr	r3, [sp, #8]
 8004df6:	2200      	movs	r2, #0
 8004df8:	701a      	strb	r2, [r3, #0]
 8004dfa:	b01c      	add	sp, #112	; 0x70
 8004dfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e00:	b003      	add	sp, #12
 8004e02:	4770      	bx	lr
 8004e04:	2000000c 	.word	0x2000000c
 8004e08:	ffff0208 	.word	0xffff0208

08004e0c <__ssputs_r>:
 8004e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e10:	688e      	ldr	r6, [r1, #8]
 8004e12:	429e      	cmp	r6, r3
 8004e14:	4682      	mov	sl, r0
 8004e16:	460c      	mov	r4, r1
 8004e18:	4690      	mov	r8, r2
 8004e1a:	461f      	mov	r7, r3
 8004e1c:	d838      	bhi.n	8004e90 <__ssputs_r+0x84>
 8004e1e:	898a      	ldrh	r2, [r1, #12]
 8004e20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e24:	d032      	beq.n	8004e8c <__ssputs_r+0x80>
 8004e26:	6825      	ldr	r5, [r4, #0]
 8004e28:	6909      	ldr	r1, [r1, #16]
 8004e2a:	eba5 0901 	sub.w	r9, r5, r1
 8004e2e:	6965      	ldr	r5, [r4, #20]
 8004e30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e38:	3301      	adds	r3, #1
 8004e3a:	444b      	add	r3, r9
 8004e3c:	106d      	asrs	r5, r5, #1
 8004e3e:	429d      	cmp	r5, r3
 8004e40:	bf38      	it	cc
 8004e42:	461d      	movcc	r5, r3
 8004e44:	0553      	lsls	r3, r2, #21
 8004e46:	d531      	bpl.n	8004eac <__ssputs_r+0xa0>
 8004e48:	4629      	mov	r1, r5
 8004e4a:	f000 fb47 	bl	80054dc <_malloc_r>
 8004e4e:	4606      	mov	r6, r0
 8004e50:	b950      	cbnz	r0, 8004e68 <__ssputs_r+0x5c>
 8004e52:	230c      	movs	r3, #12
 8004e54:	f8ca 3000 	str.w	r3, [sl]
 8004e58:	89a3      	ldrh	r3, [r4, #12]
 8004e5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e5e:	81a3      	strh	r3, [r4, #12]
 8004e60:	f04f 30ff 	mov.w	r0, #4294967295
 8004e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e68:	6921      	ldr	r1, [r4, #16]
 8004e6a:	464a      	mov	r2, r9
 8004e6c:	f000 fabe 	bl	80053ec <memcpy>
 8004e70:	89a3      	ldrh	r3, [r4, #12]
 8004e72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e7a:	81a3      	strh	r3, [r4, #12]
 8004e7c:	6126      	str	r6, [r4, #16]
 8004e7e:	6165      	str	r5, [r4, #20]
 8004e80:	444e      	add	r6, r9
 8004e82:	eba5 0509 	sub.w	r5, r5, r9
 8004e86:	6026      	str	r6, [r4, #0]
 8004e88:	60a5      	str	r5, [r4, #8]
 8004e8a:	463e      	mov	r6, r7
 8004e8c:	42be      	cmp	r6, r7
 8004e8e:	d900      	bls.n	8004e92 <__ssputs_r+0x86>
 8004e90:	463e      	mov	r6, r7
 8004e92:	4632      	mov	r2, r6
 8004e94:	6820      	ldr	r0, [r4, #0]
 8004e96:	4641      	mov	r1, r8
 8004e98:	f000 fab6 	bl	8005408 <memmove>
 8004e9c:	68a3      	ldr	r3, [r4, #8]
 8004e9e:	6822      	ldr	r2, [r4, #0]
 8004ea0:	1b9b      	subs	r3, r3, r6
 8004ea2:	4432      	add	r2, r6
 8004ea4:	60a3      	str	r3, [r4, #8]
 8004ea6:	6022      	str	r2, [r4, #0]
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	e7db      	b.n	8004e64 <__ssputs_r+0x58>
 8004eac:	462a      	mov	r2, r5
 8004eae:	f000 fb6f 	bl	8005590 <_realloc_r>
 8004eb2:	4606      	mov	r6, r0
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	d1e1      	bne.n	8004e7c <__ssputs_r+0x70>
 8004eb8:	6921      	ldr	r1, [r4, #16]
 8004eba:	4650      	mov	r0, sl
 8004ebc:	f000 fabe 	bl	800543c <_free_r>
 8004ec0:	e7c7      	b.n	8004e52 <__ssputs_r+0x46>
	...

08004ec4 <_svfiprintf_r>:
 8004ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec8:	4698      	mov	r8, r3
 8004eca:	898b      	ldrh	r3, [r1, #12]
 8004ecc:	061b      	lsls	r3, r3, #24
 8004ece:	b09d      	sub	sp, #116	; 0x74
 8004ed0:	4607      	mov	r7, r0
 8004ed2:	460d      	mov	r5, r1
 8004ed4:	4614      	mov	r4, r2
 8004ed6:	d50e      	bpl.n	8004ef6 <_svfiprintf_r+0x32>
 8004ed8:	690b      	ldr	r3, [r1, #16]
 8004eda:	b963      	cbnz	r3, 8004ef6 <_svfiprintf_r+0x32>
 8004edc:	2140      	movs	r1, #64	; 0x40
 8004ede:	f000 fafd 	bl	80054dc <_malloc_r>
 8004ee2:	6028      	str	r0, [r5, #0]
 8004ee4:	6128      	str	r0, [r5, #16]
 8004ee6:	b920      	cbnz	r0, 8004ef2 <_svfiprintf_r+0x2e>
 8004ee8:	230c      	movs	r3, #12
 8004eea:	603b      	str	r3, [r7, #0]
 8004eec:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef0:	e0d1      	b.n	8005096 <_svfiprintf_r+0x1d2>
 8004ef2:	2340      	movs	r3, #64	; 0x40
 8004ef4:	616b      	str	r3, [r5, #20]
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8004efa:	2320      	movs	r3, #32
 8004efc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f00:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f04:	2330      	movs	r3, #48	; 0x30
 8004f06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80050b0 <_svfiprintf_r+0x1ec>
 8004f0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f0e:	f04f 0901 	mov.w	r9, #1
 8004f12:	4623      	mov	r3, r4
 8004f14:	469a      	mov	sl, r3
 8004f16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f1a:	b10a      	cbz	r2, 8004f20 <_svfiprintf_r+0x5c>
 8004f1c:	2a25      	cmp	r2, #37	; 0x25
 8004f1e:	d1f9      	bne.n	8004f14 <_svfiprintf_r+0x50>
 8004f20:	ebba 0b04 	subs.w	fp, sl, r4
 8004f24:	d00b      	beq.n	8004f3e <_svfiprintf_r+0x7a>
 8004f26:	465b      	mov	r3, fp
 8004f28:	4622      	mov	r2, r4
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	4638      	mov	r0, r7
 8004f2e:	f7ff ff6d 	bl	8004e0c <__ssputs_r>
 8004f32:	3001      	adds	r0, #1
 8004f34:	f000 80aa 	beq.w	800508c <_svfiprintf_r+0x1c8>
 8004f38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f3a:	445a      	add	r2, fp
 8004f3c:	9209      	str	r2, [sp, #36]	; 0x24
 8004f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 80a2 	beq.w	800508c <_svfiprintf_r+0x1c8>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f52:	f10a 0a01 	add.w	sl, sl, #1
 8004f56:	9304      	str	r3, [sp, #16]
 8004f58:	9307      	str	r3, [sp, #28]
 8004f5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f5e:	931a      	str	r3, [sp, #104]	; 0x68
 8004f60:	4654      	mov	r4, sl
 8004f62:	2205      	movs	r2, #5
 8004f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f68:	4851      	ldr	r0, [pc, #324]	; (80050b0 <_svfiprintf_r+0x1ec>)
 8004f6a:	f7fb f949 	bl	8000200 <memchr>
 8004f6e:	9a04      	ldr	r2, [sp, #16]
 8004f70:	b9d8      	cbnz	r0, 8004faa <_svfiprintf_r+0xe6>
 8004f72:	06d0      	lsls	r0, r2, #27
 8004f74:	bf44      	itt	mi
 8004f76:	2320      	movmi	r3, #32
 8004f78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f7c:	0711      	lsls	r1, r2, #28
 8004f7e:	bf44      	itt	mi
 8004f80:	232b      	movmi	r3, #43	; 0x2b
 8004f82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f86:	f89a 3000 	ldrb.w	r3, [sl]
 8004f8a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f8c:	d015      	beq.n	8004fba <_svfiprintf_r+0xf6>
 8004f8e:	9a07      	ldr	r2, [sp, #28]
 8004f90:	4654      	mov	r4, sl
 8004f92:	2000      	movs	r0, #0
 8004f94:	f04f 0c0a 	mov.w	ip, #10
 8004f98:	4621      	mov	r1, r4
 8004f9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f9e:	3b30      	subs	r3, #48	; 0x30
 8004fa0:	2b09      	cmp	r3, #9
 8004fa2:	d94e      	bls.n	8005042 <_svfiprintf_r+0x17e>
 8004fa4:	b1b0      	cbz	r0, 8004fd4 <_svfiprintf_r+0x110>
 8004fa6:	9207      	str	r2, [sp, #28]
 8004fa8:	e014      	b.n	8004fd4 <_svfiprintf_r+0x110>
 8004faa:	eba0 0308 	sub.w	r3, r0, r8
 8004fae:	fa09 f303 	lsl.w	r3, r9, r3
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	9304      	str	r3, [sp, #16]
 8004fb6:	46a2      	mov	sl, r4
 8004fb8:	e7d2      	b.n	8004f60 <_svfiprintf_r+0x9c>
 8004fba:	9b03      	ldr	r3, [sp, #12]
 8004fbc:	1d19      	adds	r1, r3, #4
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	9103      	str	r1, [sp, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	bfbb      	ittet	lt
 8004fc6:	425b      	neglt	r3, r3
 8004fc8:	f042 0202 	orrlt.w	r2, r2, #2
 8004fcc:	9307      	strge	r3, [sp, #28]
 8004fce:	9307      	strlt	r3, [sp, #28]
 8004fd0:	bfb8      	it	lt
 8004fd2:	9204      	strlt	r2, [sp, #16]
 8004fd4:	7823      	ldrb	r3, [r4, #0]
 8004fd6:	2b2e      	cmp	r3, #46	; 0x2e
 8004fd8:	d10c      	bne.n	8004ff4 <_svfiprintf_r+0x130>
 8004fda:	7863      	ldrb	r3, [r4, #1]
 8004fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8004fde:	d135      	bne.n	800504c <_svfiprintf_r+0x188>
 8004fe0:	9b03      	ldr	r3, [sp, #12]
 8004fe2:	1d1a      	adds	r2, r3, #4
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	9203      	str	r2, [sp, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	bfb8      	it	lt
 8004fec:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ff0:	3402      	adds	r4, #2
 8004ff2:	9305      	str	r3, [sp, #20]
 8004ff4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80050c0 <_svfiprintf_r+0x1fc>
 8004ff8:	7821      	ldrb	r1, [r4, #0]
 8004ffa:	2203      	movs	r2, #3
 8004ffc:	4650      	mov	r0, sl
 8004ffe:	f7fb f8ff 	bl	8000200 <memchr>
 8005002:	b140      	cbz	r0, 8005016 <_svfiprintf_r+0x152>
 8005004:	2340      	movs	r3, #64	; 0x40
 8005006:	eba0 000a 	sub.w	r0, r0, sl
 800500a:	fa03 f000 	lsl.w	r0, r3, r0
 800500e:	9b04      	ldr	r3, [sp, #16]
 8005010:	4303      	orrs	r3, r0
 8005012:	3401      	adds	r4, #1
 8005014:	9304      	str	r3, [sp, #16]
 8005016:	f814 1b01 	ldrb.w	r1, [r4], #1
 800501a:	4826      	ldr	r0, [pc, #152]	; (80050b4 <_svfiprintf_r+0x1f0>)
 800501c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005020:	2206      	movs	r2, #6
 8005022:	f7fb f8ed 	bl	8000200 <memchr>
 8005026:	2800      	cmp	r0, #0
 8005028:	d038      	beq.n	800509c <_svfiprintf_r+0x1d8>
 800502a:	4b23      	ldr	r3, [pc, #140]	; (80050b8 <_svfiprintf_r+0x1f4>)
 800502c:	bb1b      	cbnz	r3, 8005076 <_svfiprintf_r+0x1b2>
 800502e:	9b03      	ldr	r3, [sp, #12]
 8005030:	3307      	adds	r3, #7
 8005032:	f023 0307 	bic.w	r3, r3, #7
 8005036:	3308      	adds	r3, #8
 8005038:	9303      	str	r3, [sp, #12]
 800503a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800503c:	4433      	add	r3, r6
 800503e:	9309      	str	r3, [sp, #36]	; 0x24
 8005040:	e767      	b.n	8004f12 <_svfiprintf_r+0x4e>
 8005042:	fb0c 3202 	mla	r2, ip, r2, r3
 8005046:	460c      	mov	r4, r1
 8005048:	2001      	movs	r0, #1
 800504a:	e7a5      	b.n	8004f98 <_svfiprintf_r+0xd4>
 800504c:	2300      	movs	r3, #0
 800504e:	3401      	adds	r4, #1
 8005050:	9305      	str	r3, [sp, #20]
 8005052:	4619      	mov	r1, r3
 8005054:	f04f 0c0a 	mov.w	ip, #10
 8005058:	4620      	mov	r0, r4
 800505a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800505e:	3a30      	subs	r2, #48	; 0x30
 8005060:	2a09      	cmp	r2, #9
 8005062:	d903      	bls.n	800506c <_svfiprintf_r+0x1a8>
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0c5      	beq.n	8004ff4 <_svfiprintf_r+0x130>
 8005068:	9105      	str	r1, [sp, #20]
 800506a:	e7c3      	b.n	8004ff4 <_svfiprintf_r+0x130>
 800506c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005070:	4604      	mov	r4, r0
 8005072:	2301      	movs	r3, #1
 8005074:	e7f0      	b.n	8005058 <_svfiprintf_r+0x194>
 8005076:	ab03      	add	r3, sp, #12
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	462a      	mov	r2, r5
 800507c:	4b0f      	ldr	r3, [pc, #60]	; (80050bc <_svfiprintf_r+0x1f8>)
 800507e:	a904      	add	r1, sp, #16
 8005080:	4638      	mov	r0, r7
 8005082:	f3af 8000 	nop.w
 8005086:	1c42      	adds	r2, r0, #1
 8005088:	4606      	mov	r6, r0
 800508a:	d1d6      	bne.n	800503a <_svfiprintf_r+0x176>
 800508c:	89ab      	ldrh	r3, [r5, #12]
 800508e:	065b      	lsls	r3, r3, #25
 8005090:	f53f af2c 	bmi.w	8004eec <_svfiprintf_r+0x28>
 8005094:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005096:	b01d      	add	sp, #116	; 0x74
 8005098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800509c:	ab03      	add	r3, sp, #12
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	462a      	mov	r2, r5
 80050a2:	4b06      	ldr	r3, [pc, #24]	; (80050bc <_svfiprintf_r+0x1f8>)
 80050a4:	a904      	add	r1, sp, #16
 80050a6:	4638      	mov	r0, r7
 80050a8:	f000 f87a 	bl	80051a0 <_printf_i>
 80050ac:	e7eb      	b.n	8005086 <_svfiprintf_r+0x1c2>
 80050ae:	bf00      	nop
 80050b0:	0800566c 	.word	0x0800566c
 80050b4:	08005676 	.word	0x08005676
 80050b8:	00000000 	.word	0x00000000
 80050bc:	08004e0d 	.word	0x08004e0d
 80050c0:	08005672 	.word	0x08005672

080050c4 <_printf_common>:
 80050c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050c8:	4616      	mov	r6, r2
 80050ca:	4699      	mov	r9, r3
 80050cc:	688a      	ldr	r2, [r1, #8]
 80050ce:	690b      	ldr	r3, [r1, #16]
 80050d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050d4:	4293      	cmp	r3, r2
 80050d6:	bfb8      	it	lt
 80050d8:	4613      	movlt	r3, r2
 80050da:	6033      	str	r3, [r6, #0]
 80050dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050e0:	4607      	mov	r7, r0
 80050e2:	460c      	mov	r4, r1
 80050e4:	b10a      	cbz	r2, 80050ea <_printf_common+0x26>
 80050e6:	3301      	adds	r3, #1
 80050e8:	6033      	str	r3, [r6, #0]
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	0699      	lsls	r1, r3, #26
 80050ee:	bf42      	ittt	mi
 80050f0:	6833      	ldrmi	r3, [r6, #0]
 80050f2:	3302      	addmi	r3, #2
 80050f4:	6033      	strmi	r3, [r6, #0]
 80050f6:	6825      	ldr	r5, [r4, #0]
 80050f8:	f015 0506 	ands.w	r5, r5, #6
 80050fc:	d106      	bne.n	800510c <_printf_common+0x48>
 80050fe:	f104 0a19 	add.w	sl, r4, #25
 8005102:	68e3      	ldr	r3, [r4, #12]
 8005104:	6832      	ldr	r2, [r6, #0]
 8005106:	1a9b      	subs	r3, r3, r2
 8005108:	42ab      	cmp	r3, r5
 800510a:	dc26      	bgt.n	800515a <_printf_common+0x96>
 800510c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005110:	1e13      	subs	r3, r2, #0
 8005112:	6822      	ldr	r2, [r4, #0]
 8005114:	bf18      	it	ne
 8005116:	2301      	movne	r3, #1
 8005118:	0692      	lsls	r2, r2, #26
 800511a:	d42b      	bmi.n	8005174 <_printf_common+0xb0>
 800511c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005120:	4649      	mov	r1, r9
 8005122:	4638      	mov	r0, r7
 8005124:	47c0      	blx	r8
 8005126:	3001      	adds	r0, #1
 8005128:	d01e      	beq.n	8005168 <_printf_common+0xa4>
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	68e5      	ldr	r5, [r4, #12]
 800512e:	6832      	ldr	r2, [r6, #0]
 8005130:	f003 0306 	and.w	r3, r3, #6
 8005134:	2b04      	cmp	r3, #4
 8005136:	bf08      	it	eq
 8005138:	1aad      	subeq	r5, r5, r2
 800513a:	68a3      	ldr	r3, [r4, #8]
 800513c:	6922      	ldr	r2, [r4, #16]
 800513e:	bf0c      	ite	eq
 8005140:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005144:	2500      	movne	r5, #0
 8005146:	4293      	cmp	r3, r2
 8005148:	bfc4      	itt	gt
 800514a:	1a9b      	subgt	r3, r3, r2
 800514c:	18ed      	addgt	r5, r5, r3
 800514e:	2600      	movs	r6, #0
 8005150:	341a      	adds	r4, #26
 8005152:	42b5      	cmp	r5, r6
 8005154:	d11a      	bne.n	800518c <_printf_common+0xc8>
 8005156:	2000      	movs	r0, #0
 8005158:	e008      	b.n	800516c <_printf_common+0xa8>
 800515a:	2301      	movs	r3, #1
 800515c:	4652      	mov	r2, sl
 800515e:	4649      	mov	r1, r9
 8005160:	4638      	mov	r0, r7
 8005162:	47c0      	blx	r8
 8005164:	3001      	adds	r0, #1
 8005166:	d103      	bne.n	8005170 <_printf_common+0xac>
 8005168:	f04f 30ff 	mov.w	r0, #4294967295
 800516c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005170:	3501      	adds	r5, #1
 8005172:	e7c6      	b.n	8005102 <_printf_common+0x3e>
 8005174:	18e1      	adds	r1, r4, r3
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	2030      	movs	r0, #48	; 0x30
 800517a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800517e:	4422      	add	r2, r4
 8005180:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005184:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005188:	3302      	adds	r3, #2
 800518a:	e7c7      	b.n	800511c <_printf_common+0x58>
 800518c:	2301      	movs	r3, #1
 800518e:	4622      	mov	r2, r4
 8005190:	4649      	mov	r1, r9
 8005192:	4638      	mov	r0, r7
 8005194:	47c0      	blx	r8
 8005196:	3001      	adds	r0, #1
 8005198:	d0e6      	beq.n	8005168 <_printf_common+0xa4>
 800519a:	3601      	adds	r6, #1
 800519c:	e7d9      	b.n	8005152 <_printf_common+0x8e>
	...

080051a0 <_printf_i>:
 80051a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051a4:	460c      	mov	r4, r1
 80051a6:	4691      	mov	r9, r2
 80051a8:	7e27      	ldrb	r7, [r4, #24]
 80051aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80051ac:	2f78      	cmp	r7, #120	; 0x78
 80051ae:	4680      	mov	r8, r0
 80051b0:	469a      	mov	sl, r3
 80051b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051b6:	d807      	bhi.n	80051c8 <_printf_i+0x28>
 80051b8:	2f62      	cmp	r7, #98	; 0x62
 80051ba:	d80a      	bhi.n	80051d2 <_printf_i+0x32>
 80051bc:	2f00      	cmp	r7, #0
 80051be:	f000 80d8 	beq.w	8005372 <_printf_i+0x1d2>
 80051c2:	2f58      	cmp	r7, #88	; 0x58
 80051c4:	f000 80a3 	beq.w	800530e <_printf_i+0x16e>
 80051c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80051cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051d0:	e03a      	b.n	8005248 <_printf_i+0xa8>
 80051d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051d6:	2b15      	cmp	r3, #21
 80051d8:	d8f6      	bhi.n	80051c8 <_printf_i+0x28>
 80051da:	a001      	add	r0, pc, #4	; (adr r0, 80051e0 <_printf_i+0x40>)
 80051dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80051e0:	08005239 	.word	0x08005239
 80051e4:	0800524d 	.word	0x0800524d
 80051e8:	080051c9 	.word	0x080051c9
 80051ec:	080051c9 	.word	0x080051c9
 80051f0:	080051c9 	.word	0x080051c9
 80051f4:	080051c9 	.word	0x080051c9
 80051f8:	0800524d 	.word	0x0800524d
 80051fc:	080051c9 	.word	0x080051c9
 8005200:	080051c9 	.word	0x080051c9
 8005204:	080051c9 	.word	0x080051c9
 8005208:	080051c9 	.word	0x080051c9
 800520c:	08005359 	.word	0x08005359
 8005210:	0800527d 	.word	0x0800527d
 8005214:	0800533b 	.word	0x0800533b
 8005218:	080051c9 	.word	0x080051c9
 800521c:	080051c9 	.word	0x080051c9
 8005220:	0800537b 	.word	0x0800537b
 8005224:	080051c9 	.word	0x080051c9
 8005228:	0800527d 	.word	0x0800527d
 800522c:	080051c9 	.word	0x080051c9
 8005230:	080051c9 	.word	0x080051c9
 8005234:	08005343 	.word	0x08005343
 8005238:	680b      	ldr	r3, [r1, #0]
 800523a:	1d1a      	adds	r2, r3, #4
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	600a      	str	r2, [r1, #0]
 8005240:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005244:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005248:	2301      	movs	r3, #1
 800524a:	e0a3      	b.n	8005394 <_printf_i+0x1f4>
 800524c:	6825      	ldr	r5, [r4, #0]
 800524e:	6808      	ldr	r0, [r1, #0]
 8005250:	062e      	lsls	r6, r5, #24
 8005252:	f100 0304 	add.w	r3, r0, #4
 8005256:	d50a      	bpl.n	800526e <_printf_i+0xce>
 8005258:	6805      	ldr	r5, [r0, #0]
 800525a:	600b      	str	r3, [r1, #0]
 800525c:	2d00      	cmp	r5, #0
 800525e:	da03      	bge.n	8005268 <_printf_i+0xc8>
 8005260:	232d      	movs	r3, #45	; 0x2d
 8005262:	426d      	negs	r5, r5
 8005264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005268:	485e      	ldr	r0, [pc, #376]	; (80053e4 <_printf_i+0x244>)
 800526a:	230a      	movs	r3, #10
 800526c:	e019      	b.n	80052a2 <_printf_i+0x102>
 800526e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005272:	6805      	ldr	r5, [r0, #0]
 8005274:	600b      	str	r3, [r1, #0]
 8005276:	bf18      	it	ne
 8005278:	b22d      	sxthne	r5, r5
 800527a:	e7ef      	b.n	800525c <_printf_i+0xbc>
 800527c:	680b      	ldr	r3, [r1, #0]
 800527e:	6825      	ldr	r5, [r4, #0]
 8005280:	1d18      	adds	r0, r3, #4
 8005282:	6008      	str	r0, [r1, #0]
 8005284:	0628      	lsls	r0, r5, #24
 8005286:	d501      	bpl.n	800528c <_printf_i+0xec>
 8005288:	681d      	ldr	r5, [r3, #0]
 800528a:	e002      	b.n	8005292 <_printf_i+0xf2>
 800528c:	0669      	lsls	r1, r5, #25
 800528e:	d5fb      	bpl.n	8005288 <_printf_i+0xe8>
 8005290:	881d      	ldrh	r5, [r3, #0]
 8005292:	4854      	ldr	r0, [pc, #336]	; (80053e4 <_printf_i+0x244>)
 8005294:	2f6f      	cmp	r7, #111	; 0x6f
 8005296:	bf0c      	ite	eq
 8005298:	2308      	moveq	r3, #8
 800529a:	230a      	movne	r3, #10
 800529c:	2100      	movs	r1, #0
 800529e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052a2:	6866      	ldr	r6, [r4, #4]
 80052a4:	60a6      	str	r6, [r4, #8]
 80052a6:	2e00      	cmp	r6, #0
 80052a8:	bfa2      	ittt	ge
 80052aa:	6821      	ldrge	r1, [r4, #0]
 80052ac:	f021 0104 	bicge.w	r1, r1, #4
 80052b0:	6021      	strge	r1, [r4, #0]
 80052b2:	b90d      	cbnz	r5, 80052b8 <_printf_i+0x118>
 80052b4:	2e00      	cmp	r6, #0
 80052b6:	d04d      	beq.n	8005354 <_printf_i+0x1b4>
 80052b8:	4616      	mov	r6, r2
 80052ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80052be:	fb03 5711 	mls	r7, r3, r1, r5
 80052c2:	5dc7      	ldrb	r7, [r0, r7]
 80052c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052c8:	462f      	mov	r7, r5
 80052ca:	42bb      	cmp	r3, r7
 80052cc:	460d      	mov	r5, r1
 80052ce:	d9f4      	bls.n	80052ba <_printf_i+0x11a>
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d10b      	bne.n	80052ec <_printf_i+0x14c>
 80052d4:	6823      	ldr	r3, [r4, #0]
 80052d6:	07df      	lsls	r7, r3, #31
 80052d8:	d508      	bpl.n	80052ec <_printf_i+0x14c>
 80052da:	6923      	ldr	r3, [r4, #16]
 80052dc:	6861      	ldr	r1, [r4, #4]
 80052de:	4299      	cmp	r1, r3
 80052e0:	bfde      	ittt	le
 80052e2:	2330      	movle	r3, #48	; 0x30
 80052e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052ec:	1b92      	subs	r2, r2, r6
 80052ee:	6122      	str	r2, [r4, #16]
 80052f0:	f8cd a000 	str.w	sl, [sp]
 80052f4:	464b      	mov	r3, r9
 80052f6:	aa03      	add	r2, sp, #12
 80052f8:	4621      	mov	r1, r4
 80052fa:	4640      	mov	r0, r8
 80052fc:	f7ff fee2 	bl	80050c4 <_printf_common>
 8005300:	3001      	adds	r0, #1
 8005302:	d14c      	bne.n	800539e <_printf_i+0x1fe>
 8005304:	f04f 30ff 	mov.w	r0, #4294967295
 8005308:	b004      	add	sp, #16
 800530a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800530e:	4835      	ldr	r0, [pc, #212]	; (80053e4 <_printf_i+0x244>)
 8005310:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005314:	6823      	ldr	r3, [r4, #0]
 8005316:	680e      	ldr	r6, [r1, #0]
 8005318:	061f      	lsls	r7, r3, #24
 800531a:	f856 5b04 	ldr.w	r5, [r6], #4
 800531e:	600e      	str	r6, [r1, #0]
 8005320:	d514      	bpl.n	800534c <_printf_i+0x1ac>
 8005322:	07d9      	lsls	r1, r3, #31
 8005324:	bf44      	itt	mi
 8005326:	f043 0320 	orrmi.w	r3, r3, #32
 800532a:	6023      	strmi	r3, [r4, #0]
 800532c:	b91d      	cbnz	r5, 8005336 <_printf_i+0x196>
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	f023 0320 	bic.w	r3, r3, #32
 8005334:	6023      	str	r3, [r4, #0]
 8005336:	2310      	movs	r3, #16
 8005338:	e7b0      	b.n	800529c <_printf_i+0xfc>
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	f043 0320 	orr.w	r3, r3, #32
 8005340:	6023      	str	r3, [r4, #0]
 8005342:	2378      	movs	r3, #120	; 0x78
 8005344:	4828      	ldr	r0, [pc, #160]	; (80053e8 <_printf_i+0x248>)
 8005346:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800534a:	e7e3      	b.n	8005314 <_printf_i+0x174>
 800534c:	065e      	lsls	r6, r3, #25
 800534e:	bf48      	it	mi
 8005350:	b2ad      	uxthmi	r5, r5
 8005352:	e7e6      	b.n	8005322 <_printf_i+0x182>
 8005354:	4616      	mov	r6, r2
 8005356:	e7bb      	b.n	80052d0 <_printf_i+0x130>
 8005358:	680b      	ldr	r3, [r1, #0]
 800535a:	6826      	ldr	r6, [r4, #0]
 800535c:	6960      	ldr	r0, [r4, #20]
 800535e:	1d1d      	adds	r5, r3, #4
 8005360:	600d      	str	r5, [r1, #0]
 8005362:	0635      	lsls	r5, r6, #24
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	d501      	bpl.n	800536c <_printf_i+0x1cc>
 8005368:	6018      	str	r0, [r3, #0]
 800536a:	e002      	b.n	8005372 <_printf_i+0x1d2>
 800536c:	0671      	lsls	r1, r6, #25
 800536e:	d5fb      	bpl.n	8005368 <_printf_i+0x1c8>
 8005370:	8018      	strh	r0, [r3, #0]
 8005372:	2300      	movs	r3, #0
 8005374:	6123      	str	r3, [r4, #16]
 8005376:	4616      	mov	r6, r2
 8005378:	e7ba      	b.n	80052f0 <_printf_i+0x150>
 800537a:	680b      	ldr	r3, [r1, #0]
 800537c:	1d1a      	adds	r2, r3, #4
 800537e:	600a      	str	r2, [r1, #0]
 8005380:	681e      	ldr	r6, [r3, #0]
 8005382:	6862      	ldr	r2, [r4, #4]
 8005384:	2100      	movs	r1, #0
 8005386:	4630      	mov	r0, r6
 8005388:	f7fa ff3a 	bl	8000200 <memchr>
 800538c:	b108      	cbz	r0, 8005392 <_printf_i+0x1f2>
 800538e:	1b80      	subs	r0, r0, r6
 8005390:	6060      	str	r0, [r4, #4]
 8005392:	6863      	ldr	r3, [r4, #4]
 8005394:	6123      	str	r3, [r4, #16]
 8005396:	2300      	movs	r3, #0
 8005398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800539c:	e7a8      	b.n	80052f0 <_printf_i+0x150>
 800539e:	6923      	ldr	r3, [r4, #16]
 80053a0:	4632      	mov	r2, r6
 80053a2:	4649      	mov	r1, r9
 80053a4:	4640      	mov	r0, r8
 80053a6:	47d0      	blx	sl
 80053a8:	3001      	adds	r0, #1
 80053aa:	d0ab      	beq.n	8005304 <_printf_i+0x164>
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	079b      	lsls	r3, r3, #30
 80053b0:	d413      	bmi.n	80053da <_printf_i+0x23a>
 80053b2:	68e0      	ldr	r0, [r4, #12]
 80053b4:	9b03      	ldr	r3, [sp, #12]
 80053b6:	4298      	cmp	r0, r3
 80053b8:	bfb8      	it	lt
 80053ba:	4618      	movlt	r0, r3
 80053bc:	e7a4      	b.n	8005308 <_printf_i+0x168>
 80053be:	2301      	movs	r3, #1
 80053c0:	4632      	mov	r2, r6
 80053c2:	4649      	mov	r1, r9
 80053c4:	4640      	mov	r0, r8
 80053c6:	47d0      	blx	sl
 80053c8:	3001      	adds	r0, #1
 80053ca:	d09b      	beq.n	8005304 <_printf_i+0x164>
 80053cc:	3501      	adds	r5, #1
 80053ce:	68e3      	ldr	r3, [r4, #12]
 80053d0:	9903      	ldr	r1, [sp, #12]
 80053d2:	1a5b      	subs	r3, r3, r1
 80053d4:	42ab      	cmp	r3, r5
 80053d6:	dcf2      	bgt.n	80053be <_printf_i+0x21e>
 80053d8:	e7eb      	b.n	80053b2 <_printf_i+0x212>
 80053da:	2500      	movs	r5, #0
 80053dc:	f104 0619 	add.w	r6, r4, #25
 80053e0:	e7f5      	b.n	80053ce <_printf_i+0x22e>
 80053e2:	bf00      	nop
 80053e4:	0800567d 	.word	0x0800567d
 80053e8:	0800568e 	.word	0x0800568e

080053ec <memcpy>:
 80053ec:	440a      	add	r2, r1
 80053ee:	4291      	cmp	r1, r2
 80053f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80053f4:	d100      	bne.n	80053f8 <memcpy+0xc>
 80053f6:	4770      	bx	lr
 80053f8:	b510      	push	{r4, lr}
 80053fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005402:	4291      	cmp	r1, r2
 8005404:	d1f9      	bne.n	80053fa <memcpy+0xe>
 8005406:	bd10      	pop	{r4, pc}

08005408 <memmove>:
 8005408:	4288      	cmp	r0, r1
 800540a:	b510      	push	{r4, lr}
 800540c:	eb01 0402 	add.w	r4, r1, r2
 8005410:	d902      	bls.n	8005418 <memmove+0x10>
 8005412:	4284      	cmp	r4, r0
 8005414:	4623      	mov	r3, r4
 8005416:	d807      	bhi.n	8005428 <memmove+0x20>
 8005418:	1e43      	subs	r3, r0, #1
 800541a:	42a1      	cmp	r1, r4
 800541c:	d008      	beq.n	8005430 <memmove+0x28>
 800541e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005422:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005426:	e7f8      	b.n	800541a <memmove+0x12>
 8005428:	4402      	add	r2, r0
 800542a:	4601      	mov	r1, r0
 800542c:	428a      	cmp	r2, r1
 800542e:	d100      	bne.n	8005432 <memmove+0x2a>
 8005430:	bd10      	pop	{r4, pc}
 8005432:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005436:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800543a:	e7f7      	b.n	800542c <memmove+0x24>

0800543c <_free_r>:
 800543c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800543e:	2900      	cmp	r1, #0
 8005440:	d048      	beq.n	80054d4 <_free_r+0x98>
 8005442:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005446:	9001      	str	r0, [sp, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	f1a1 0404 	sub.w	r4, r1, #4
 800544e:	bfb8      	it	lt
 8005450:	18e4      	addlt	r4, r4, r3
 8005452:	f000 f8d3 	bl	80055fc <__malloc_lock>
 8005456:	4a20      	ldr	r2, [pc, #128]	; (80054d8 <_free_r+0x9c>)
 8005458:	9801      	ldr	r0, [sp, #4]
 800545a:	6813      	ldr	r3, [r2, #0]
 800545c:	4615      	mov	r5, r2
 800545e:	b933      	cbnz	r3, 800546e <_free_r+0x32>
 8005460:	6063      	str	r3, [r4, #4]
 8005462:	6014      	str	r4, [r2, #0]
 8005464:	b003      	add	sp, #12
 8005466:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800546a:	f000 b8cd 	b.w	8005608 <__malloc_unlock>
 800546e:	42a3      	cmp	r3, r4
 8005470:	d90b      	bls.n	800548a <_free_r+0x4e>
 8005472:	6821      	ldr	r1, [r4, #0]
 8005474:	1862      	adds	r2, r4, r1
 8005476:	4293      	cmp	r3, r2
 8005478:	bf04      	itt	eq
 800547a:	681a      	ldreq	r2, [r3, #0]
 800547c:	685b      	ldreq	r3, [r3, #4]
 800547e:	6063      	str	r3, [r4, #4]
 8005480:	bf04      	itt	eq
 8005482:	1852      	addeq	r2, r2, r1
 8005484:	6022      	streq	r2, [r4, #0]
 8005486:	602c      	str	r4, [r5, #0]
 8005488:	e7ec      	b.n	8005464 <_free_r+0x28>
 800548a:	461a      	mov	r2, r3
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	b10b      	cbz	r3, 8005494 <_free_r+0x58>
 8005490:	42a3      	cmp	r3, r4
 8005492:	d9fa      	bls.n	800548a <_free_r+0x4e>
 8005494:	6811      	ldr	r1, [r2, #0]
 8005496:	1855      	adds	r5, r2, r1
 8005498:	42a5      	cmp	r5, r4
 800549a:	d10b      	bne.n	80054b4 <_free_r+0x78>
 800549c:	6824      	ldr	r4, [r4, #0]
 800549e:	4421      	add	r1, r4
 80054a0:	1854      	adds	r4, r2, r1
 80054a2:	42a3      	cmp	r3, r4
 80054a4:	6011      	str	r1, [r2, #0]
 80054a6:	d1dd      	bne.n	8005464 <_free_r+0x28>
 80054a8:	681c      	ldr	r4, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	6053      	str	r3, [r2, #4]
 80054ae:	4421      	add	r1, r4
 80054b0:	6011      	str	r1, [r2, #0]
 80054b2:	e7d7      	b.n	8005464 <_free_r+0x28>
 80054b4:	d902      	bls.n	80054bc <_free_r+0x80>
 80054b6:	230c      	movs	r3, #12
 80054b8:	6003      	str	r3, [r0, #0]
 80054ba:	e7d3      	b.n	8005464 <_free_r+0x28>
 80054bc:	6825      	ldr	r5, [r4, #0]
 80054be:	1961      	adds	r1, r4, r5
 80054c0:	428b      	cmp	r3, r1
 80054c2:	bf04      	itt	eq
 80054c4:	6819      	ldreq	r1, [r3, #0]
 80054c6:	685b      	ldreq	r3, [r3, #4]
 80054c8:	6063      	str	r3, [r4, #4]
 80054ca:	bf04      	itt	eq
 80054cc:	1949      	addeq	r1, r1, r5
 80054ce:	6021      	streq	r1, [r4, #0]
 80054d0:	6054      	str	r4, [r2, #4]
 80054d2:	e7c7      	b.n	8005464 <_free_r+0x28>
 80054d4:	b003      	add	sp, #12
 80054d6:	bd30      	pop	{r4, r5, pc}
 80054d8:	2000009c 	.word	0x2000009c

080054dc <_malloc_r>:
 80054dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054de:	1ccd      	adds	r5, r1, #3
 80054e0:	f025 0503 	bic.w	r5, r5, #3
 80054e4:	3508      	adds	r5, #8
 80054e6:	2d0c      	cmp	r5, #12
 80054e8:	bf38      	it	cc
 80054ea:	250c      	movcc	r5, #12
 80054ec:	2d00      	cmp	r5, #0
 80054ee:	4606      	mov	r6, r0
 80054f0:	db01      	blt.n	80054f6 <_malloc_r+0x1a>
 80054f2:	42a9      	cmp	r1, r5
 80054f4:	d903      	bls.n	80054fe <_malloc_r+0x22>
 80054f6:	230c      	movs	r3, #12
 80054f8:	6033      	str	r3, [r6, #0]
 80054fa:	2000      	movs	r0, #0
 80054fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054fe:	f000 f87d 	bl	80055fc <__malloc_lock>
 8005502:	4921      	ldr	r1, [pc, #132]	; (8005588 <_malloc_r+0xac>)
 8005504:	680a      	ldr	r2, [r1, #0]
 8005506:	4614      	mov	r4, r2
 8005508:	b99c      	cbnz	r4, 8005532 <_malloc_r+0x56>
 800550a:	4f20      	ldr	r7, [pc, #128]	; (800558c <_malloc_r+0xb0>)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	b923      	cbnz	r3, 800551a <_malloc_r+0x3e>
 8005510:	4621      	mov	r1, r4
 8005512:	4630      	mov	r0, r6
 8005514:	f000 f862 	bl	80055dc <_sbrk_r>
 8005518:	6038      	str	r0, [r7, #0]
 800551a:	4629      	mov	r1, r5
 800551c:	4630      	mov	r0, r6
 800551e:	f000 f85d 	bl	80055dc <_sbrk_r>
 8005522:	1c43      	adds	r3, r0, #1
 8005524:	d123      	bne.n	800556e <_malloc_r+0x92>
 8005526:	230c      	movs	r3, #12
 8005528:	6033      	str	r3, [r6, #0]
 800552a:	4630      	mov	r0, r6
 800552c:	f000 f86c 	bl	8005608 <__malloc_unlock>
 8005530:	e7e3      	b.n	80054fa <_malloc_r+0x1e>
 8005532:	6823      	ldr	r3, [r4, #0]
 8005534:	1b5b      	subs	r3, r3, r5
 8005536:	d417      	bmi.n	8005568 <_malloc_r+0x8c>
 8005538:	2b0b      	cmp	r3, #11
 800553a:	d903      	bls.n	8005544 <_malloc_r+0x68>
 800553c:	6023      	str	r3, [r4, #0]
 800553e:	441c      	add	r4, r3
 8005540:	6025      	str	r5, [r4, #0]
 8005542:	e004      	b.n	800554e <_malloc_r+0x72>
 8005544:	6863      	ldr	r3, [r4, #4]
 8005546:	42a2      	cmp	r2, r4
 8005548:	bf0c      	ite	eq
 800554a:	600b      	streq	r3, [r1, #0]
 800554c:	6053      	strne	r3, [r2, #4]
 800554e:	4630      	mov	r0, r6
 8005550:	f000 f85a 	bl	8005608 <__malloc_unlock>
 8005554:	f104 000b 	add.w	r0, r4, #11
 8005558:	1d23      	adds	r3, r4, #4
 800555a:	f020 0007 	bic.w	r0, r0, #7
 800555e:	1ac2      	subs	r2, r0, r3
 8005560:	d0cc      	beq.n	80054fc <_malloc_r+0x20>
 8005562:	1a1b      	subs	r3, r3, r0
 8005564:	50a3      	str	r3, [r4, r2]
 8005566:	e7c9      	b.n	80054fc <_malloc_r+0x20>
 8005568:	4622      	mov	r2, r4
 800556a:	6864      	ldr	r4, [r4, #4]
 800556c:	e7cc      	b.n	8005508 <_malloc_r+0x2c>
 800556e:	1cc4      	adds	r4, r0, #3
 8005570:	f024 0403 	bic.w	r4, r4, #3
 8005574:	42a0      	cmp	r0, r4
 8005576:	d0e3      	beq.n	8005540 <_malloc_r+0x64>
 8005578:	1a21      	subs	r1, r4, r0
 800557a:	4630      	mov	r0, r6
 800557c:	f000 f82e 	bl	80055dc <_sbrk_r>
 8005580:	3001      	adds	r0, #1
 8005582:	d1dd      	bne.n	8005540 <_malloc_r+0x64>
 8005584:	e7cf      	b.n	8005526 <_malloc_r+0x4a>
 8005586:	bf00      	nop
 8005588:	2000009c 	.word	0x2000009c
 800558c:	200000a0 	.word	0x200000a0

08005590 <_realloc_r>:
 8005590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005592:	4607      	mov	r7, r0
 8005594:	4614      	mov	r4, r2
 8005596:	460e      	mov	r6, r1
 8005598:	b921      	cbnz	r1, 80055a4 <_realloc_r+0x14>
 800559a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800559e:	4611      	mov	r1, r2
 80055a0:	f7ff bf9c 	b.w	80054dc <_malloc_r>
 80055a4:	b922      	cbnz	r2, 80055b0 <_realloc_r+0x20>
 80055a6:	f7ff ff49 	bl	800543c <_free_r>
 80055aa:	4625      	mov	r5, r4
 80055ac:	4628      	mov	r0, r5
 80055ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055b0:	f000 f830 	bl	8005614 <_malloc_usable_size_r>
 80055b4:	42a0      	cmp	r0, r4
 80055b6:	d20f      	bcs.n	80055d8 <_realloc_r+0x48>
 80055b8:	4621      	mov	r1, r4
 80055ba:	4638      	mov	r0, r7
 80055bc:	f7ff ff8e 	bl	80054dc <_malloc_r>
 80055c0:	4605      	mov	r5, r0
 80055c2:	2800      	cmp	r0, #0
 80055c4:	d0f2      	beq.n	80055ac <_realloc_r+0x1c>
 80055c6:	4631      	mov	r1, r6
 80055c8:	4622      	mov	r2, r4
 80055ca:	f7ff ff0f 	bl	80053ec <memcpy>
 80055ce:	4631      	mov	r1, r6
 80055d0:	4638      	mov	r0, r7
 80055d2:	f7ff ff33 	bl	800543c <_free_r>
 80055d6:	e7e9      	b.n	80055ac <_realloc_r+0x1c>
 80055d8:	4635      	mov	r5, r6
 80055da:	e7e7      	b.n	80055ac <_realloc_r+0x1c>

080055dc <_sbrk_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	4d06      	ldr	r5, [pc, #24]	; (80055f8 <_sbrk_r+0x1c>)
 80055e0:	2300      	movs	r3, #0
 80055e2:	4604      	mov	r4, r0
 80055e4:	4608      	mov	r0, r1
 80055e6:	602b      	str	r3, [r5, #0]
 80055e8:	f7fb fef0 	bl	80013cc <_sbrk>
 80055ec:	1c43      	adds	r3, r0, #1
 80055ee:	d102      	bne.n	80055f6 <_sbrk_r+0x1a>
 80055f0:	682b      	ldr	r3, [r5, #0]
 80055f2:	b103      	cbz	r3, 80055f6 <_sbrk_r+0x1a>
 80055f4:	6023      	str	r3, [r4, #0]
 80055f6:	bd38      	pop	{r3, r4, r5, pc}
 80055f8:	20000698 	.word	0x20000698

080055fc <__malloc_lock>:
 80055fc:	4801      	ldr	r0, [pc, #4]	; (8005604 <__malloc_lock+0x8>)
 80055fe:	f000 b811 	b.w	8005624 <__retarget_lock_acquire_recursive>
 8005602:	bf00      	nop
 8005604:	200006a0 	.word	0x200006a0

08005608 <__malloc_unlock>:
 8005608:	4801      	ldr	r0, [pc, #4]	; (8005610 <__malloc_unlock+0x8>)
 800560a:	f000 b80c 	b.w	8005626 <__retarget_lock_release_recursive>
 800560e:	bf00      	nop
 8005610:	200006a0 	.word	0x200006a0

08005614 <_malloc_usable_size_r>:
 8005614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005618:	1f18      	subs	r0, r3, #4
 800561a:	2b00      	cmp	r3, #0
 800561c:	bfbc      	itt	lt
 800561e:	580b      	ldrlt	r3, [r1, r0]
 8005620:	18c0      	addlt	r0, r0, r3
 8005622:	4770      	bx	lr

08005624 <__retarget_lock_acquire_recursive>:
 8005624:	4770      	bx	lr

08005626 <__retarget_lock_release_recursive>:
 8005626:	4770      	bx	lr

08005628 <_init>:
 8005628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562a:	bf00      	nop
 800562c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562e:	bc08      	pop	{r3}
 8005630:	469e      	mov	lr, r3
 8005632:	4770      	bx	lr

08005634 <_fini>:
 8005634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005636:	bf00      	nop
 8005638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800563a:	bc08      	pop	{r3}
 800563c:	469e      	mov	lr, r3
 800563e:	4770      	bx	lr
