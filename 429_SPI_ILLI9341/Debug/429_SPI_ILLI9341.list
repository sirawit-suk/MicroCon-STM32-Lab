
429_SPI_ILLI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000878c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002604c  08008940  08008940  00018940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802e98c  0802e98c  000401e0  2**0
                  CONTENTS
  4 .ARM          00000008  0802e98c  0802e98c  0003e98c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802e994  0802e994  000401e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802e994  0802e994  0003e994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802e998  0802e998  0003e998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0802e99c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000401e0  2**0
                  CONTENTS
 10 .bss          00000134  200001e0  200001e0  000401e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000314  20000314  000401e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000401e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001477c  00000000  00000000  00040210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dab  00000000  00000000  0005498c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001050  00000000  00000000  00057738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f08  00000000  00000000  00058788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025f27  00000000  00000000  00059690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000145ee  00000000  00000000  0007f5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de12b  00000000  00000000  00093ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00171cd0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005480  00000000  00000000  00171d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008924 	.word	0x08008924

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	08008924 	.word	0x08008924

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96e 	b.w	8000efc <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468c      	mov	ip, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 8083 	bne.w	8000d4e <__udivmoddi4+0x116>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d947      	bls.n	8000cde <__udivmoddi4+0xa6>
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b142      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	f1c2 0020 	rsb	r0, r2, #32
 8000c58:	fa24 f000 	lsr.w	r0, r4, r0
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4097      	lsls	r7, r2
 8000c60:	ea40 0c01 	orr.w	ip, r0, r1
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c70:	fa1f fe87 	uxth.w	lr, r7
 8000c74:	fb08 c116 	mls	r1, r8, r6, ip
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8a:	f080 8119 	bcs.w	8000ec0 <__udivmoddi4+0x288>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8116 	bls.w	8000ec0 <__udivmoddi4+0x288>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	443b      	add	r3, r7
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	f080 8105 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	f240 8102 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	443c      	add	r4, r7
 8000cc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc8:	eba4 040e 	sub.w	r4, r4, lr
 8000ccc:	2600      	movs	r6, #0
 8000cce:	b11d      	cbz	r5, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	b902      	cbnz	r2, 8000ce2 <__udivmoddi4+0xaa>
 8000ce0:	deff      	udf	#255	; 0xff
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d150      	bne.n	8000d8c <__udivmoddi4+0x154>
 8000cea:	1bcb      	subs	r3, r1, r7
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa1f f887 	uxth.w	r8, r7
 8000cf4:	2601      	movs	r6, #1
 8000cf6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfa:	0c21      	lsrs	r1, r4, #16
 8000cfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d04:	fb08 f30c 	mul.w	r3, r8, ip
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000d0c:	1879      	adds	r1, r7, r1
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0xe2>
 8000d14:	428b      	cmp	r3, r1
 8000d16:	f200 80e9 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1ac9      	subs	r1, r1, r3
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x10c>
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x10a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80d9 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e7bf      	b.n	8000cce <__udivmoddi4+0x96>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x12e>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	f000 80b1 	beq.w	8000eba <__udivmoddi4+0x282>
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f683 	clz	r6, r3
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d14a      	bne.n	8000e04 <__udivmoddi4+0x1cc>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0x140>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80b8 	bhi.w	8000ee8 <__udivmoddi4+0x2b0>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	468c      	mov	ip, r1
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d0a8      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f603 	lsr.w	r6, r0, r3
 8000d94:	4097      	lsls	r7, r2
 8000d96:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9e:	40d9      	lsrs	r1, r3
 8000da0:	4330      	orrs	r0, r6
 8000da2:	0c03      	lsrs	r3, r0, #16
 8000da4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000da8:	fa1f f887 	uxth.w	r8, r7
 8000dac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb06 f108 	mul.w	r1, r6, r8
 8000db8:	4299      	cmp	r1, r3
 8000dba:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x19c>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dc6:	f080 808d 	bcs.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 808a 	bls.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b281      	uxth	r1, r0
 8000dd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ddc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb00 f308 	mul.w	r3, r0, r8
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x1c4>
 8000dec:	1879      	adds	r1, r7, r1
 8000dee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df2:	d273      	bcs.n	8000edc <__udivmoddi4+0x2a4>
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d971      	bls.n	8000edc <__udivmoddi4+0x2a4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4439      	add	r1, r7
 8000dfc:	1acb      	subs	r3, r1, r3
 8000dfe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e02:	e778      	b.n	8000cf6 <__udivmoddi4+0xbe>
 8000e04:	f1c6 0c20 	rsb	ip, r6, #32
 8000e08:	fa03 f406 	lsl.w	r4, r3, r6
 8000e0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e10:	431c      	orrs	r4, r3
 8000e12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e16:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e22:	431f      	orrs	r7, r3
 8000e24:	0c3b      	lsrs	r3, r7, #16
 8000e26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2a:	fa1f f884 	uxth.w	r8, r4
 8000e2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e36:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3a:	458a      	cmp	sl, r1
 8000e3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e40:	fa00 f306 	lsl.w	r3, r0, r6
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x220>
 8000e46:	1861      	adds	r1, r4, r1
 8000e48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e4c:	d248      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	d946      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4421      	add	r1, r4
 8000e58:	eba1 010a 	sub.w	r1, r1, sl
 8000e5c:	b2bf      	uxth	r7, r7
 8000e5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6a:	fb00 f808 	mul.w	r8, r0, r8
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x24a>
 8000e72:	19e7      	adds	r7, r4, r7
 8000e74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e78:	d22e      	bcs.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7a:	45b8      	cmp	r8, r7
 8000e7c:	d92c      	bls.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4427      	add	r7, r4
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	eba7 0708 	sub.w	r7, r7, r8
 8000e8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8e:	454f      	cmp	r7, r9
 8000e90:	46c6      	mov	lr, r8
 8000e92:	4649      	mov	r1, r9
 8000e94:	d31a      	bcc.n	8000ecc <__udivmoddi4+0x294>
 8000e96:	d017      	beq.n	8000ec8 <__udivmoddi4+0x290>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x27a>
 8000e9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ea6:	40f2      	lsrs	r2, r6
 8000ea8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eac:	40f7      	lsrs	r7, r6
 8000eae:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e70b      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6fd      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ec8:	4543      	cmp	r3, r8
 8000eca:	d2e5      	bcs.n	8000e98 <__udivmoddi4+0x260>
 8000ecc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7df      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e7d2      	b.n	8000e82 <__udivmoddi4+0x24a>
 8000edc:	4660      	mov	r0, ip
 8000ede:	e78d      	b.n	8000dfc <__udivmoddi4+0x1c4>
 8000ee0:	4681      	mov	r9, r0
 8000ee2:	e7b9      	b.n	8000e58 <__udivmoddi4+0x220>
 8000ee4:	4666      	mov	r6, ip
 8000ee6:	e775      	b.n	8000dd4 <__udivmoddi4+0x19c>
 8000ee8:	4630      	mov	r0, r6
 8000eea:	e74a      	b.n	8000d82 <__udivmoddi4+0x14a>
 8000eec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef0:	4439      	add	r1, r7
 8000ef2:	e713      	b.n	8000d1c <__udivmoddi4+0xe4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	e724      	b.n	8000d44 <__udivmoddi4+0x10c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b47      	ldr	r3, [pc, #284]	; (8001038 <MX_GPIO_Init+0x138>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a46      	ldr	r2, [pc, #280]	; (8001038 <MX_GPIO_Init+0x138>)
 8000f20:	f043 0320 	orr.w	r3, r3, #32
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b44      	ldr	r3, [pc, #272]	; (8001038 <MX_GPIO_Init+0x138>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0320 	and.w	r3, r3, #32
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b40      	ldr	r3, [pc, #256]	; (8001038 <MX_GPIO_Init+0x138>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a3f      	ldr	r2, [pc, #252]	; (8001038 <MX_GPIO_Init+0x138>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b3d      	ldr	r3, [pc, #244]	; (8001038 <MX_GPIO_Init+0x138>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	4b39      	ldr	r3, [pc, #228]	; (8001038 <MX_GPIO_Init+0x138>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a38      	ldr	r2, [pc, #224]	; (8001038 <MX_GPIO_Init+0x138>)
 8000f58:	f043 0304 	orr.w	r3, r3, #4
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b36      	ldr	r3, [pc, #216]	; (8001038 <MX_GPIO_Init+0x138>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0304 	and.w	r3, r3, #4
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	4b32      	ldr	r3, [pc, #200]	; (8001038 <MX_GPIO_Init+0x138>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a31      	ldr	r2, [pc, #196]	; (8001038 <MX_GPIO_Init+0x138>)
 8000f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b2f      	ldr	r3, [pc, #188]	; (8001038 <MX_GPIO_Init+0x138>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, T_CLK_Pin|T_CS_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	210e      	movs	r1, #14
 8000f8a:	482c      	ldr	r0, [pc, #176]	; (800103c <MX_GPIO_Init+0x13c>)
 8000f8c:	f003 f90a 	bl	80041a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|RST_Pin|DC_Pin, GPIO_PIN_RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000f96:	482a      	ldr	r0, [pc, #168]	; (8001040 <MX_GPIO_Init+0x140>)
 8000f98:	f003 f904 	bl	80041a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000fa2:	4828      	ldr	r0, [pc, #160]	; (8001044 <MX_GPIO_Init+0x144>)
 8000fa4:	f003 f8fe 	bl	80041a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin|T_MOSI_Pin;
 8000fa8:	230e      	movs	r3, #14
 8000faa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	481f      	ldr	r0, [pc, #124]	; (800103c <MX_GPIO_Init+0x13c>)
 8000fc0:	f002 ff2c 	bl	8003e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = T_MISO_Pin|T_IRQ_Pin;
 8000fc4:	2330      	movs	r3, #48	; 0x30
 8000fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fd0:	f107 0314 	add.w	r3, r7, #20
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4819      	ldr	r0, [pc, #100]	; (800103c <MX_GPIO_Init+0x13c>)
 8000fd8:	f002 ff20 	bl	8003e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	4814      	ldr	r0, [pc, #80]	; (8001040 <MX_GPIO_Init+0x140>)
 8000ff0:	f002 ff14 	bl	8003e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin|DC_Pin;
 8000ff4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <MX_GPIO_Init+0x140>)
 800100e:	f002 ff05 	bl	8003e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001012:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001018:	2301      	movs	r3, #1
 800101a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	4806      	ldr	r0, [pc, #24]	; (8001044 <MX_GPIO_Init+0x144>)
 800102c:	f002 fef6 	bl	8003e1c <HAL_GPIO_Init>

}
 8001030:	bf00      	nop
 8001032:	3728      	adds	r7, #40	; 0x28
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40023800 	.word	0x40023800
 800103c:	40021400 	.word	0x40021400
 8001040:	40020000 	.word	0x40020000
 8001044:	40021800 	.word	0x40021800

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b0c7      	sub	sp, #284	; 0x11c
 800104c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104e:	f002 fd69 	bl	8003b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001052:	f000 ff93 	bl	8001f7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001056:	f7ff ff53 	bl	8000f00 <MX_GPIO_Init>
  MX_SPI3_Init();
 800105a:	f001 f837 	bl	80020cc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800105e:	f001 fa4f 	bl	8002500 <MX_USART1_UART_Init>
  MX_RNG_Init();
 8001062:	f000 fffd 	bl	8002060 <MX_RNG_Init>
  MX_TIM1_Init();
 8001066:	f001 f9d9 	bl	800241c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
 800106a:	f002 f885 	bl	8003178 <ILI9341_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //----------------------------------------------------------PERFORMANCE TEST
	  		ILI9341_Fill_Screen(WHITE);
 800106e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001072:	f002 fa29 	bl	80034c8 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001076:	2001      	movs	r0, #1
 8001078:	f002 f820 	bl	80030bc <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("FPS TEST, 40 loop 2 screens", 10, 10, BLACK, 1, WHITE);
 800107c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	2301      	movs	r3, #1
 8001084:	9300      	str	r3, [sp, #0]
 8001086:	2300      	movs	r3, #0
 8001088:	220a      	movs	r2, #10
 800108a:	210a      	movs	r1, #10
 800108c:	489c      	ldr	r0, [pc, #624]	; (8001300 <main+0x2b8>)
 800108e:	f001 fd8b 	bl	8002ba8 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8001092:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001096:	f002 fdb7 	bl	8003c08 <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 800109a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800109e:	f002 fa13 	bl	80034c8 <ILI9341_Fill_Screen>

	  		uint32_t Timer_Counter = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	  		for(uint32_t j = 0; j < 2; j++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80010ae:	e02a      	b.n	8001106 <main+0xbe>
	  		{
	  			HAL_TIM_Base_Start(&htim1);
 80010b0:	4894      	ldr	r0, [pc, #592]	; (8001304 <main+0x2bc>)
 80010b2:	f004 f84d 	bl	8005150 <HAL_TIM_Base_Start>
	  			for(uint16_t i = 0; i < 10; i++)
 80010b6:	2300      	movs	r3, #0
 80010b8:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
 80010bc:	e00b      	b.n	80010d6 <main+0x8e>
	  			{
	  				ILI9341_Fill_Screen(WHITE);
 80010be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80010c2:	f002 fa01 	bl	80034c8 <ILI9341_Fill_Screen>
	  				ILI9341_Fill_Screen(BLACK);
 80010c6:	2000      	movs	r0, #0
 80010c8:	f002 f9fe 	bl	80034c8 <ILI9341_Fill_Screen>
	  			for(uint16_t i = 0; i < 10; i++)
 80010cc:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80010d0:	3301      	adds	r3, #1
 80010d2:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
 80010d6:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80010da:	2b09      	cmp	r3, #9
 80010dc:	d9ef      	bls.n	80010be <main+0x76>
	  			}

	  			//20.000 per second!
	  			HAL_TIM_Base_Stop(&htim1);
 80010de:	4889      	ldr	r0, [pc, #548]	; (8001304 <main+0x2bc>)
 80010e0:	f004 f89e 	bl	8005220 <HAL_TIM_Base_Stop>
	  			Timer_Counter += __HAL_TIM_GET_COUNTER(&htim1);
 80010e4:	4b87      	ldr	r3, [pc, #540]	; (8001304 <main+0x2bc>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ea:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80010ee:	4413      	add	r3, r2
 80010f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	  			__HAL_TIM_SET_COUNTER(&htim1, 0);
 80010f4:	4b83      	ldr	r3, [pc, #524]	; (8001304 <main+0x2bc>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2200      	movs	r2, #0
 80010fa:	625a      	str	r2, [r3, #36]	; 0x24
	  		for(uint32_t j = 0; j < 2; j++)
 80010fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001100:	3301      	adds	r3, #1
 8001102:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001106:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800110a:	2b01      	cmp	r3, #1
 800110c:	d9d0      	bls.n	80010b0 <main+0x68>
	  		}
	  		Timer_Counter /= 2;
 800110e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001112:	085b      	lsrs	r3, r3, #1
 8001114:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	  		char counter_buff[30];
	  		ILI9341_Fill_Screen(WHITE);
 8001118:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800111c:	f002 f9d4 	bl	80034c8 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001120:	2001      	movs	r0, #1
 8001122:	f001 ffcb 	bl	80030bc <ILI9341_Set_Rotation>
	  		sprintf(counter_buff, "Timer counter value: %ld", Timer_Counter*2);
 8001126:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800112a:	005a      	lsls	r2, r3, #1
 800112c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001130:	4975      	ldr	r1, [pc, #468]	; (8001308 <main+0x2c0>)
 8001132:	4618      	mov	r0, r3
 8001134:	f005 f9ca 	bl	80064cc <siprintf>
	  		ILI9341_Draw_Text(counter_buff, 10, 10, BLACK, 1, WHITE);
 8001138:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800113c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	2301      	movs	r3, #1
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2300      	movs	r3, #0
 8001148:	220a      	movs	r2, #10
 800114a:	210a      	movs	r1, #10
 800114c:	f001 fd2c 	bl	8002ba8 <ILI9341_Draw_Text>

	  		double seconds_passed = 2*((float)Timer_Counter / 20000);
 8001150:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001154:	ee07 3a90 	vmov	s15, r3
 8001158:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800115c:	eddf 6a6b 	vldr	s13, [pc, #428]	; 800130c <main+0x2c4>
 8001160:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001164:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001168:	ee17 0a90 	vmov	r0, s15
 800116c:	f7ff f9fc 	bl	8000568 <__aeabi_f2d>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	  		sprintf(counter_buff, "Time: %.3f Sec", seconds_passed);
 8001178:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800117c:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8001180:	4963      	ldr	r1, [pc, #396]	; (8001310 <main+0x2c8>)
 8001182:	f005 f9a3 	bl	80064cc <siprintf>
	  		ILI9341_Draw_Text(counter_buff, 10, 30, BLACK, 2, WHITE);
 8001186:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800118a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800118e:	9301      	str	r3, [sp, #4]
 8001190:	2302      	movs	r3, #2
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2300      	movs	r3, #0
 8001196:	221e      	movs	r2, #30
 8001198:	210a      	movs	r1, #10
 800119a:	f001 fd05 	bl	8002ba8 <ILI9341_Draw_Text>

	  		double timer_float = 20/(((float)Timer_Counter)/20000);	//Frames per sec
 800119e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80011a2:	ee07 3a90 	vmov	s15, r3
 80011a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800130c <main+0x2c4>
 80011ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80011b6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011ba:	ee16 0a90 	vmov	r0, s13
 80011be:	f7ff f9d3 	bl	8000568 <__aeabi_f2d>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

	  		sprintf(counter_buff, "FPS:  %.2f", timer_float);
 80011ca:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80011ce:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80011d2:	4950      	ldr	r1, [pc, #320]	; (8001314 <main+0x2cc>)
 80011d4:	f005 f97a 	bl	80064cc <siprintf>
	  		ILI9341_Draw_Text(counter_buff, 10, 50, BLACK, 2, WHITE);
 80011d8:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80011dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	2302      	movs	r3, #2
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2300      	movs	r3, #0
 80011e8:	2232      	movs	r2, #50	; 0x32
 80011ea:	210a      	movs	r1, #10
 80011ec:	f001 fcdc 	bl	8002ba8 <ILI9341_Draw_Text>
	  		double MB_PS = timer_float*240*320*2/1000000;
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	4b48      	ldr	r3, [pc, #288]	; (8001318 <main+0x2d0>)
 80011f6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80011fa:	f7ff fa0d 	bl	8000618 <__aeabi_dmul>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	4b44      	ldr	r3, [pc, #272]	; (800131c <main+0x2d4>)
 800120c:	f7ff fa04 	bl	8000618 <__aeabi_dmul>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	f7ff f846 	bl	80002ac <__adddf3>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	a333      	add	r3, pc, #204	; (adr r3, 80012f8 <main+0x2b0>)
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	f7ff fb1d 	bl	800086c <__aeabi_ddiv>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
	  		sprintf(counter_buff, "MB/S: %.2f", MB_PS);
 800123a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800123e:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001242:	4937      	ldr	r1, [pc, #220]	; (8001320 <main+0x2d8>)
 8001244:	f005 f942 	bl	80064cc <siprintf>
	  		ILI9341_Draw_Text(counter_buff, 10, 70, BLACK, 2, WHITE);
 8001248:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800124c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	2302      	movs	r3, #2
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2300      	movs	r3, #0
 8001258:	2246      	movs	r2, #70	; 0x46
 800125a:	210a      	movs	r1, #10
 800125c:	f001 fca4 	bl	8002ba8 <ILI9341_Draw_Text>
	  		double SPI_utilized_percentage = (MB_PS/(6.25 ))*100;		//50mbits / 8 bits
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	4b2f      	ldr	r3, [pc, #188]	; (8001324 <main+0x2dc>)
 8001266:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800126a:	f7ff faff 	bl	800086c <__aeabi_ddiv>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4610      	mov	r0, r2
 8001274:	4619      	mov	r1, r3
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <main+0x2e0>)
 800127c:	f7ff f9cc 	bl	8000618 <__aeabi_dmul>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	e9c7 2330 	strd	r2, r3, [r7, #192]	; 0xc0
	  		sprintf(counter_buff, "SPI Utilized: %.2f", SPI_utilized_percentage);
 8001288:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800128c:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8001290:	4926      	ldr	r1, [pc, #152]	; (800132c <main+0x2e4>)
 8001292:	f005 f91b 	bl	80064cc <siprintf>
	  		ILI9341_Draw_Text(counter_buff, 10, 90, BLACK, 2, WHITE);
 8001296:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800129a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800129e:	9301      	str	r3, [sp, #4]
 80012a0:	2302      	movs	r3, #2
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2300      	movs	r3, #0
 80012a6:	225a      	movs	r2, #90	; 0x5a
 80012a8:	210a      	movs	r1, #10
 80012aa:	f001 fc7d 	bl	8002ba8 <ILI9341_Draw_Text>
	  		HAL_Delay(10000);
 80012ae:	f242 7010 	movw	r0, #10000	; 0x2710
 80012b2:	f002 fca9 	bl	8003c08 <HAL_Delay>
	  		static uint16_t y = 0;

	  		char Temp_Buffer_text[40];

	  //----------------------------------------------------------COUNTING MULTIPLE SEGMENTS
	  		ILI9341_Fill_Screen(WHITE);
 80012b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80012ba:	f002 f905 	bl	80034c8 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80012be:	2001      	movs	r0, #1
 80012c0:	f001 fefc 	bl	80030bc <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Counting multiple segments at once", 10, 10, BLACK, 1, WHITE);
 80012c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	2301      	movs	r3, #1
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2300      	movs	r3, #0
 80012d0:	220a      	movs	r2, #10
 80012d2:	210a      	movs	r1, #10
 80012d4:	4816      	ldr	r0, [pc, #88]	; (8001330 <main+0x2e8>)
 80012d6:	f001 fc67 	bl	8002ba8 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 80012da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012de:	f002 fc93 	bl	8003c08 <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 80012e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80012e6:	f002 f8ef 	bl	80034c8 <ILI9341_Fill_Screen>


	  		for(uint16_t i = 0; i <= 10; i++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
 80012f0:	e0a8      	b.n	8001444 <main+0x3fc>
 80012f2:	bf00      	nop
 80012f4:	f3af 8000 	nop.w
 80012f8:	00000000 	.word	0x00000000
 80012fc:	412e8480 	.word	0x412e8480
 8001300:	08008940 	.word	0x08008940
 8001304:	20000274 	.word	0x20000274
 8001308:	0800895c 	.word	0x0800895c
 800130c:	469c4000 	.word	0x469c4000
 8001310:	08008978 	.word	0x08008978
 8001314:	08008988 	.word	0x08008988
 8001318:	406e0000 	.word	0x406e0000
 800131c:	40740000 	.word	0x40740000
 8001320:	08008994 	.word	0x08008994
 8001324:	40190000 	.word	0x40190000
 8001328:	40590000 	.word	0x40590000
 800132c:	080089a0 	.word	0x080089a0
 8001330:	080089b4 	.word	0x080089b4
	  		{
	  		sprintf(Temp_Buffer_text, "Counting: %d", i);
 8001334:	f8b7 2104 	ldrh.w	r2, [r7, #260]	; 0x104
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	49d9      	ldr	r1, [pc, #868]	; (80016a0 <main+0x658>)
 800133c:	4618      	mov	r0, r3
 800133e:	f005 f8c5 	bl	80064cc <siprintf>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 10, BLACK, 2, WHITE);
 8001342:	1d38      	adds	r0, r7, #4
 8001344:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	2302      	movs	r3, #2
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2300      	movs	r3, #0
 8001350:	220a      	movs	r2, #10
 8001352:	210a      	movs	r1, #10
 8001354:	f001 fc28 	bl	8002ba8 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 30, BLUE, 2, WHITE);
 8001358:	1d38      	adds	r0, r7, #4
 800135a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	2302      	movs	r3, #2
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	231f      	movs	r3, #31
 8001366:	221e      	movs	r2, #30
 8001368:	210a      	movs	r1, #10
 800136a:	f001 fc1d 	bl	8002ba8 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 50, RED, 2, WHITE);
 800136e:	1d38      	adds	r0, r7, #4
 8001370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	2302      	movs	r3, #2
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800137e:	2232      	movs	r2, #50	; 0x32
 8001380:	210a      	movs	r1, #10
 8001382:	f001 fc11 	bl	8002ba8 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 70, GREEN, 2, WHITE);
 8001386:	1d38      	adds	r0, r7, #4
 8001388:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800138c:	9301      	str	r3, [sp, #4]
 800138e:	2302      	movs	r3, #2
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001396:	2246      	movs	r2, #70	; 0x46
 8001398:	210a      	movs	r1, #10
 800139a:	f001 fc05 	bl	8002ba8 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 90, BLACK, 2, WHITE);
 800139e:	1d38      	adds	r0, r7, #4
 80013a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	2302      	movs	r3, #2
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2300      	movs	r3, #0
 80013ac:	225a      	movs	r2, #90	; 0x5a
 80013ae:	210a      	movs	r1, #10
 80013b0:	f001 fbfa 	bl	8002ba8 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 110, BLUE, 2, WHITE);
 80013b4:	1d38      	adds	r0, r7, #4
 80013b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	2302      	movs	r3, #2
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	231f      	movs	r3, #31
 80013c2:	226e      	movs	r2, #110	; 0x6e
 80013c4:	210a      	movs	r1, #10
 80013c6:	f001 fbef 	bl	8002ba8 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 130, RED, 2, WHITE);
 80013ca:	1d38      	adds	r0, r7, #4
 80013cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013d0:	9301      	str	r3, [sp, #4]
 80013d2:	2302      	movs	r3, #2
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80013da:	2282      	movs	r2, #130	; 0x82
 80013dc:	210a      	movs	r1, #10
 80013de:	f001 fbe3 	bl	8002ba8 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 150, GREEN, 2, WHITE);
 80013e2:	1d38      	adds	r0, r7, #4
 80013e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	2302      	movs	r3, #2
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80013f2:	2296      	movs	r2, #150	; 0x96
 80013f4:	210a      	movs	r1, #10
 80013f6:	f001 fbd7 	bl	8002ba8 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 170, WHITE, 2, BLACK);
 80013fa:	1d38      	adds	r0, r7, #4
 80013fc:	2300      	movs	r3, #0
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	2302      	movs	r3, #2
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001408:	22aa      	movs	r2, #170	; 0xaa
 800140a:	210a      	movs	r1, #10
 800140c:	f001 fbcc 	bl	8002ba8 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 190, BLUE, 2, BLACK);
 8001410:	1d38      	adds	r0, r7, #4
 8001412:	2300      	movs	r3, #0
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	2302      	movs	r3, #2
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	231f      	movs	r3, #31
 800141c:	22be      	movs	r2, #190	; 0xbe
 800141e:	210a      	movs	r1, #10
 8001420:	f001 fbc2 	bl	8002ba8 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 210, RED, 2, BLACK);
 8001424:	1d38      	adds	r0, r7, #4
 8001426:	2300      	movs	r3, #0
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	2302      	movs	r3, #2
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001432:	22d2      	movs	r2, #210	; 0xd2
 8001434:	210a      	movs	r1, #10
 8001436:	f001 fbb7 	bl	8002ba8 <ILI9341_Draw_Text>
	  		for(uint16_t i = 0; i <= 10; i++)
 800143a:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 800143e:	3301      	adds	r3, #1
 8001440:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
 8001444:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8001448:	2b0a      	cmp	r3, #10
 800144a:	f67f af73 	bls.w	8001334 <main+0x2ec>
	  		}

	  		HAL_Delay(1000);
 800144e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001452:	f002 fbd9 	bl	8003c08 <HAL_Delay>

	  //----------------------------------------------------------COUNTING SINGLE SEGMENT
	  		ILI9341_Fill_Screen(WHITE);
 8001456:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800145a:	f002 f835 	bl	80034c8 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800145e:	2001      	movs	r0, #1
 8001460:	f001 fe2c 	bl	80030bc <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Counting single segment", 10, 10, BLACK, 1, WHITE);
 8001464:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	2301      	movs	r3, #1
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2300      	movs	r3, #0
 8001470:	220a      	movs	r2, #10
 8001472:	210a      	movs	r1, #10
 8001474:	488b      	ldr	r0, [pc, #556]	; (80016a4 <main+0x65c>)
 8001476:	f001 fb97 	bl	8002ba8 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 800147a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800147e:	f002 fbc3 	bl	8003c08 <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 8001482:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001486:	f002 f81f 	bl	80034c8 <ILI9341_Fill_Screen>

	  		for(uint16_t i = 0; i <= 100; i++)
 800148a:	2300      	movs	r3, #0
 800148c:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
 8001490:	e016      	b.n	80014c0 <main+0x478>
	  		{
	  		sprintf(Temp_Buffer_text, "Counting: %d", i);
 8001492:	f8b7 2102 	ldrh.w	r2, [r7, #258]	; 0x102
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	4981      	ldr	r1, [pc, #516]	; (80016a0 <main+0x658>)
 800149a:	4618      	mov	r0, r3
 800149c:	f005 f816 	bl	80064cc <siprintf>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 10, BLACK, 3, WHITE);
 80014a0:	1d38      	adds	r0, r7, #4
 80014a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014a6:	9301      	str	r3, [sp, #4]
 80014a8:	2303      	movs	r3, #3
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2300      	movs	r3, #0
 80014ae:	220a      	movs	r2, #10
 80014b0:	210a      	movs	r1, #10
 80014b2:	f001 fb79 	bl	8002ba8 <ILI9341_Draw_Text>
	  		for(uint16_t i = 0; i <= 100; i++)
 80014b6:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 80014ba:	3301      	adds	r3, #1
 80014bc:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
 80014c0:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 80014c4:	2b64      	cmp	r3, #100	; 0x64
 80014c6:	d9e4      	bls.n	8001492 <main+0x44a>
	  		}

	  		HAL_Delay(1000);
 80014c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014cc:	f002 fb9c 	bl	8003c08 <HAL_Delay>

	  //----------------------------------------------------------ALIGNMENT TEST
	  		ILI9341_Fill_Screen(WHITE);
 80014d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80014d4:	f001 fff8 	bl	80034c8 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80014d8:	2001      	movs	r0, #1
 80014da:	f001 fdef 	bl	80030bc <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Rectangle alignment check", 10, 10, BLACK, 1, WHITE);
 80014de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	2301      	movs	r3, #1
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2300      	movs	r3, #0
 80014ea:	220a      	movs	r2, #10
 80014ec:	210a      	movs	r1, #10
 80014ee:	486e      	ldr	r0, [pc, #440]	; (80016a8 <main+0x660>)
 80014f0:	f001 fb5a 	bl	8002ba8 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 80014f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014f8:	f002 fb86 	bl	8003c08 <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 80014fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001500:	f001 ffe2 	bl	80034c8 <ILI9341_Fill_Screen>

	  		ILI9341_Draw_Hollow_Rectangle_Coord(50, 50, 100, 100, BLACK);
 8001504:	2300      	movs	r3, #0
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2364      	movs	r3, #100	; 0x64
 800150a:	2264      	movs	r2, #100	; 0x64
 800150c:	2132      	movs	r1, #50	; 0x32
 800150e:	2032      	movs	r0, #50	; 0x32
 8001510:	f001 f9cf 	bl	80028b2 <ILI9341_Draw_Hollow_Rectangle_Coord>
	  		ILI9341_Draw_Filled_Rectangle_Coord(20, 20, 50, 50, BLACK);
 8001514:	2300      	movs	r3, #0
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2332      	movs	r3, #50	; 0x32
 800151a:	2232      	movs	r2, #50	; 0x32
 800151c:	2114      	movs	r1, #20
 800151e:	2014      	movs	r0, #20
 8001520:	f001 fa48 	bl	80029b4 <ILI9341_Draw_Filled_Rectangle_Coord>
	  		ILI9341_Draw_Hollow_Rectangle_Coord(10, 10, 19, 19, BLACK);
 8001524:	2300      	movs	r3, #0
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2313      	movs	r3, #19
 800152a:	2213      	movs	r2, #19
 800152c:	210a      	movs	r1, #10
 800152e:	200a      	movs	r0, #10
 8001530:	f001 f9bf 	bl	80028b2 <ILI9341_Draw_Hollow_Rectangle_Coord>
	  		HAL_Delay(1000);
 8001534:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001538:	f002 fb66 	bl	8003c08 <HAL_Delay>

	  //----------------------------------------------------------LINES EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 800153c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001540:	f001 ffc2 	bl	80034c8 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001544:	2001      	movs	r0, #1
 8001546:	f001 fdb9 	bl	80030bc <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 800154a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	2301      	movs	r3, #1
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	2300      	movs	r3, #0
 8001556:	220a      	movs	r2, #10
 8001558:	210a      	movs	r1, #10
 800155a:	4854      	ldr	r0, [pc, #336]	; (80016ac <main+0x664>)
 800155c:	f001 fb24 	bl	8002ba8 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Horizontal and Vertical lines", 10, 20, BLACK, 1, WHITE);
 8001560:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001564:	9301      	str	r3, [sp, #4]
 8001566:	2301      	movs	r3, #1
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	2300      	movs	r3, #0
 800156c:	2214      	movs	r2, #20
 800156e:	210a      	movs	r1, #10
 8001570:	484f      	ldr	r0, [pc, #316]	; (80016b0 <main+0x668>)
 8001572:	f001 fb19 	bl	8002ba8 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8001576:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800157a:	f002 fb45 	bl	8003c08 <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 800157e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001582:	f001 ffa1 	bl	80034c8 <ILI9341_Fill_Screen>

	  		for(uint32_t i = 0; i < 30000; i++)
 8001586:	2300      	movs	r3, #0
 8001588:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800158c:	e054      	b.n	8001638 <main+0x5f0>
	  		{
	  			uint32_t random_num = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	67bb      	str	r3, [r7, #120]	; 0x78
	  			uint16_t xr = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	  			uint16_t yr = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	  			uint16_t radiusr = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	  			uint16_t colourr = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80015aa:	4842      	ldr	r0, [pc, #264]	; (80016b4 <main+0x66c>)
 80015ac:	f003 fadc 	bl	8004b68 <HAL_RNG_GetRandomNumber>
 80015b0:	67b8      	str	r0, [r7, #120]	; 0x78
	  			xr = random_num;
 80015b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015b4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80015b8:	483e      	ldr	r0, [pc, #248]	; (80016b4 <main+0x66c>)
 80015ba:	f003 fad5 	bl	8004b68 <HAL_RNG_GetRandomNumber>
 80015be:	67b8      	str	r0, [r7, #120]	; 0x78
	  			yr = random_num;
 80015c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015c2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80015c6:	483b      	ldr	r0, [pc, #236]	; (80016b4 <main+0x66c>)
 80015c8:	f003 face 	bl	8004b68 <HAL_RNG_GetRandomNumber>
 80015cc:	67b8      	str	r0, [r7, #120]	; 0x78
	  			radiusr = random_num;
 80015ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015d0:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80015d4:	4837      	ldr	r0, [pc, #220]	; (80016b4 <main+0x66c>)
 80015d6:	f003 fac7 	bl	8004b68 <HAL_RNG_GetRandomNumber>
 80015da:	67b8      	str	r0, [r7, #120]	; 0x78
	  			colourr = random_num;
 80015dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015de:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

	  			xr &= 0x01FF;
 80015e2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80015e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015ea:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	  			yr &= 0x01FF;
 80015ee:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80015f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015f6:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	  			radiusr &= 0x001F;
 80015fa:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80015fe:	f003 031f 	and.w	r3, r3, #31
 8001602:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Horizontal_Line(xr, yr, radiusr, colourr);
 8001606:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800160a:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 800160e:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 8001612:	f8b7 0076 	ldrh.w	r0, [r7, #118]	; 0x76
 8001616:	f002 f8b3 	bl	8003780 <ILI9341_Draw_Horizontal_Line>
	  			ILI9341_Draw_Vertical_Line(xr, yr, radiusr, colourr);
 800161a:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 800161e:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8001622:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 8001626:	f8b7 0076 	ldrh.w	r0, [r7, #118]	; 0x76
 800162a:	f002 f8ed 	bl	8003808 <ILI9341_Draw_Vertical_Line>
	  		for(uint32_t i = 0; i < 30000; i++)
 800162e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001632:	3301      	adds	r3, #1
 8001634:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800163c:	f247 522f 	movw	r2, #29999	; 0x752f
 8001640:	4293      	cmp	r3, r2
 8001642:	d9a4      	bls.n	800158e <main+0x546>
	  		}

	  		HAL_Delay(1000);
 8001644:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001648:	f002 fade 	bl	8003c08 <HAL_Delay>

	  //----------------------------------------------------------HOLLOW CIRCLES EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 800164c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001650:	f001 ff3a 	bl	80034c8 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001654:	2001      	movs	r0, #1
 8001656:	f001 fd31 	bl	80030bc <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 800165a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	2301      	movs	r3, #1
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	220a      	movs	r2, #10
 8001668:	210a      	movs	r1, #10
 800166a:	4810      	ldr	r0, [pc, #64]	; (80016ac <main+0x664>)
 800166c:	f001 fa9c 	bl	8002ba8 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Circles", 10, 20, BLACK, 1, WHITE);
 8001670:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	2301      	movs	r3, #1
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2300      	movs	r3, #0
 800167c:	2214      	movs	r2, #20
 800167e:	210a      	movs	r1, #10
 8001680:	480d      	ldr	r0, [pc, #52]	; (80016b8 <main+0x670>)
 8001682:	f001 fa91 	bl	8002ba8 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8001686:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800168a:	f002 fabd 	bl	8003c08 <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 800168e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001692:	f001 ff19 	bl	80034c8 <ILI9341_Fill_Screen>


	  		for(uint32_t i = 0; i < 3000; i++)
 8001696:	2300      	movs	r3, #0
 8001698:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800169c:	e064      	b.n	8001768 <main+0x720>
 800169e:	bf00      	nop
 80016a0:	080089d8 	.word	0x080089d8
 80016a4:	080089e8 	.word	0x080089e8
 80016a8:	08008a00 	.word	0x08008a00
 80016ac:	08008a1c 	.word	0x08008a1c
 80016b0:	08008a38 	.word	0x08008a38
 80016b4:	2000020c 	.word	0x2000020c
 80016b8:	08008a58 	.word	0x08008a58
	  		{
	  			uint32_t random_num = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  			uint16_t xr = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	  			uint16_t yr = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	  			uint16_t radiusr = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	  			uint16_t colourr = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80016da:	48cb      	ldr	r0, [pc, #812]	; (8001a08 <main+0x9c0>)
 80016dc:	f003 fa44 	bl	8004b68 <HAL_RNG_GetRandomNumber>
 80016e0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  			xr = random_num;
 80016e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016e8:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80016ec:	48c6      	ldr	r0, [pc, #792]	; (8001a08 <main+0x9c0>)
 80016ee:	f003 fa3b 	bl	8004b68 <HAL_RNG_GetRandomNumber>
 80016f2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  			yr = random_num;
 80016f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016fa:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80016fe:	48c2      	ldr	r0, [pc, #776]	; (8001a08 <main+0x9c0>)
 8001700:	f003 fa32 	bl	8004b68 <HAL_RNG_GetRandomNumber>
 8001704:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  			radiusr = random_num;
 8001708:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800170c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001710:	48bd      	ldr	r0, [pc, #756]	; (8001a08 <main+0x9c0>)
 8001712:	f003 fa29 	bl	8004b68 <HAL_RNG_GetRandomNumber>
 8001716:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  			colourr = random_num;
 800171a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800171e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

	  			xr &= 0x01FF;
 8001722:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8001726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800172a:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	  			yr &= 0x01FF;
 800172e:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8001732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001736:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	  			radiusr &= 0x001F;
 800173a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800173e:	f003 031f 	and.w	r3, r3, #31
 8001742:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Hollow_Circle(xr, yr, radiusr*2, colourr);
 8001746:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	b29a      	uxth	r2, r3
 800174e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001752:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 8001756:	f8b7 0082 	ldrh.w	r0, [r7, #130]	; 0x82
 800175a:	f000 ff6c 	bl	8002636 <ILI9341_Draw_Hollow_Circle>
	  		for(uint32_t i = 0; i < 3000; i++)
 800175e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001762:	3301      	adds	r3, #1
 8001764:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001768:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800176c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001770:	4293      	cmp	r3, r2
 8001772:	d9a3      	bls.n	80016bc <main+0x674>
	  		}
	  		HAL_Delay(1000);
 8001774:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001778:	f002 fa46 	bl	8003c08 <HAL_Delay>

	  //----------------------------------------------------------FILLED CIRCLES EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 800177c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001780:	f001 fea2 	bl	80034c8 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001784:	2001      	movs	r0, #1
 8001786:	f001 fc99 	bl	80030bc <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 800178a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800178e:	9301      	str	r3, [sp, #4]
 8001790:	2301      	movs	r3, #1
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	2300      	movs	r3, #0
 8001796:	220a      	movs	r2, #10
 8001798:	210a      	movs	r1, #10
 800179a:	489c      	ldr	r0, [pc, #624]	; (8001a0c <main+0x9c4>)
 800179c:	f001 fa04 	bl	8002ba8 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Filled Circles", 10, 20, BLACK, 1, WHITE);
 80017a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017a4:	9301      	str	r3, [sp, #4]
 80017a6:	2301      	movs	r3, #1
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2300      	movs	r3, #0
 80017ac:	2214      	movs	r2, #20
 80017ae:	210a      	movs	r1, #10
 80017b0:	4897      	ldr	r0, [pc, #604]	; (8001a10 <main+0x9c8>)
 80017b2:	f001 f9f9 	bl	8002ba8 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 80017b6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80017ba:	f002 fa25 	bl	8003c08 <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 80017be:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80017c2:	f001 fe81 	bl	80034c8 <ILI9341_Fill_Screen>

	  		for(uint32_t i = 0; i < 1000; i++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80017cc:	e055      	b.n	800187a <main+0x832>
	  		{
	  			uint32_t random_num = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  			uint16_t xr = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	  			uint16_t yr = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	  			uint16_t radiusr = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	  			uint16_t colourr = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80017ec:	4886      	ldr	r0, [pc, #536]	; (8001a08 <main+0x9c0>)
 80017ee:	f003 f9bb 	bl	8004b68 <HAL_RNG_GetRandomNumber>
 80017f2:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	  			xr = random_num;
 80017f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017fa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80017fe:	4882      	ldr	r0, [pc, #520]	; (8001a08 <main+0x9c0>)
 8001800:	f003 f9b2 	bl	8004b68 <HAL_RNG_GetRandomNumber>
 8001804:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	  			yr = random_num;
 8001808:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800180c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001810:	487d      	ldr	r0, [pc, #500]	; (8001a08 <main+0x9c0>)
 8001812:	f003 f9a9 	bl	8004b68 <HAL_RNG_GetRandomNumber>
 8001816:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	  			radiusr = random_num;
 800181a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800181e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001822:	4879      	ldr	r0, [pc, #484]	; (8001a08 <main+0x9c0>)
 8001824:	f003 f9a0 	bl	8004b68 <HAL_RNG_GetRandomNumber>
 8001828:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	  			colourr = random_num;
 800182c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001830:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	  			xr &= 0x01FF;
 8001834:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8001838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800183c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	  			yr &= 0x01FF;
 8001840:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8001844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001848:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	  			radiusr &= 0x001F;
 800184c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001850:	f003 031f 	and.w	r3, r3, #31
 8001854:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Filled_Circle(xr, yr, radiusr/2, colourr);
 8001858:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800185c:	085b      	lsrs	r3, r3, #1
 800185e:	b29a      	uxth	r2, r3
 8001860:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001864:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
 8001868:	f8b7 008e 	ldrh.w	r0, [r7, #142]	; 0x8e
 800186c:	f000 ff99 	bl	80027a2 <ILI9341_Draw_Filled_Circle>
	  		for(uint32_t i = 0; i < 1000; i++)
 8001870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001874:	3301      	adds	r3, #1
 8001876:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800187a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800187e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001882:	d3a4      	bcc.n	80017ce <main+0x786>
	  		}
	  		HAL_Delay(1000);
 8001884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001888:	f002 f9be 	bl	8003c08 <HAL_Delay>

	  //----------------------------------------------------------HOLLOW RECTANGLES EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 800188c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001890:	f001 fe1a 	bl	80034c8 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001894:	2001      	movs	r0, #1
 8001896:	f001 fc11 	bl	80030bc <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 800189a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	2301      	movs	r3, #1
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2300      	movs	r3, #0
 80018a6:	220a      	movs	r2, #10
 80018a8:	210a      	movs	r1, #10
 80018aa:	4858      	ldr	r0, [pc, #352]	; (8001a0c <main+0x9c4>)
 80018ac:	f001 f97c 	bl	8002ba8 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Rectangles", 10, 20, BLACK, 1, WHITE);
 80018b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018b4:	9301      	str	r3, [sp, #4]
 80018b6:	2301      	movs	r3, #1
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2300      	movs	r3, #0
 80018bc:	2214      	movs	r2, #20
 80018be:	210a      	movs	r1, #10
 80018c0:	4854      	ldr	r0, [pc, #336]	; (8001a14 <main+0x9cc>)
 80018c2:	f001 f971 	bl	8002ba8 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 80018c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80018ca:	f002 f99d 	bl	8003c08 <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 80018ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80018d2:	f001 fdf9 	bl	80034c8 <ILI9341_Fill_Screen>

	  		for(uint32_t i = 0; i < 20000; i++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80018dc:	e060      	b.n	80019a0 <main+0x958>
	  		{
	  			uint32_t random_num = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  			uint16_t xr = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	  			uint16_t yr = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	  			uint16_t radiusr = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	  			uint16_t colourr = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80018fc:	4842      	ldr	r0, [pc, #264]	; (8001a08 <main+0x9c0>)
 80018fe:	f003 f933 	bl	8004b68 <HAL_RNG_GetRandomNumber>
 8001902:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	  			xr = random_num;
 8001906:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800190a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 800190e:	483e      	ldr	r0, [pc, #248]	; (8001a08 <main+0x9c0>)
 8001910:	f003 f92a 	bl	8004b68 <HAL_RNG_GetRandomNumber>
 8001914:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	  			yr = random_num;
 8001918:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800191c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001920:	4839      	ldr	r0, [pc, #228]	; (8001a08 <main+0x9c0>)
 8001922:	f003 f921 	bl	8004b68 <HAL_RNG_GetRandomNumber>
 8001926:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	  			radiusr = random_num;
 800192a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800192e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001932:	4835      	ldr	r0, [pc, #212]	; (8001a08 <main+0x9c0>)
 8001934:	f003 f918 	bl	8004b68 <HAL_RNG_GetRandomNumber>
 8001938:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	  			colourr = random_num;
 800193c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001940:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

	  			xr &= 0x01FF;
 8001944:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8001948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800194c:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	  			yr &= 0x01FF;
 8001950:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8001954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001958:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	  			radiusr &= 0x001F;
 800195c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001960:	f003 031f 	and.w	r3, r3, #31
 8001964:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Hollow_Rectangle_Coord(xr, yr, xr+radiusr, yr+radiusr, colourr);
 8001968:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 800196c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001970:	4413      	add	r3, r2
 8001972:	b29c      	uxth	r4, r3
 8001974:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8001978:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800197c:	4413      	add	r3, r2
 800197e:	b29a      	uxth	r2, r3
 8001980:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 8001984:	f8b7 009a 	ldrh.w	r0, [r7, #154]	; 0x9a
 8001988:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	4613      	mov	r3, r2
 8001990:	4622      	mov	r2, r4
 8001992:	f000 ff8e 	bl	80028b2 <ILI9341_Draw_Hollow_Rectangle_Coord>
	  		for(uint32_t i = 0; i < 20000; i++)
 8001996:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800199a:	3301      	adds	r3, #1
 800199c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80019a0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80019a4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d998      	bls.n	80018de <main+0x896>
	  		}
	  		HAL_Delay(1000);
 80019ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019b0:	f002 f92a 	bl	8003c08 <HAL_Delay>

	  //----------------------------------------------------------FILLED RECTANGLES EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 80019b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80019b8:	f001 fd86 	bl	80034c8 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80019bc:	2001      	movs	r0, #1
 80019be:	f001 fb7d 	bl	80030bc <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 80019c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	2301      	movs	r3, #1
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2300      	movs	r3, #0
 80019ce:	220a      	movs	r2, #10
 80019d0:	210a      	movs	r1, #10
 80019d2:	480e      	ldr	r0, [pc, #56]	; (8001a0c <main+0x9c4>)
 80019d4:	f001 f8e8 	bl	8002ba8 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Filled Rectangles", 10, 20, BLACK, 1, WHITE);
 80019d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019dc:	9301      	str	r3, [sp, #4]
 80019de:	2301      	movs	r3, #1
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	2300      	movs	r3, #0
 80019e4:	2214      	movs	r2, #20
 80019e6:	210a      	movs	r1, #10
 80019e8:	480b      	ldr	r0, [pc, #44]	; (8001a18 <main+0x9d0>)
 80019ea:	f001 f8dd 	bl	8002ba8 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 80019ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019f2:	f002 f909 	bl	8003c08 <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 80019f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80019fa:	f001 fd65 	bl	80034c8 <ILI9341_Fill_Screen>

	  		for(uint32_t i = 0; i < 20000; i++)
 80019fe:	2300      	movs	r3, #0
 8001a00:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001a04:	e062      	b.n	8001acc <main+0xa84>
 8001a06:	bf00      	nop
 8001a08:	2000020c 	.word	0x2000020c
 8001a0c:	08008a1c 	.word	0x08008a1c
 8001a10:	08008a60 	.word	0x08008a60
 8001a14:	08008a70 	.word	0x08008a70
 8001a18:	08008a7c 	.word	0x08008a7c
	  		{
	  			uint32_t random_num = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	  			uint16_t xr = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	  			uint16_t yr = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	  			uint16_t radiusr = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	  			uint16_t colourr = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001a3a:	48b9      	ldr	r0, [pc, #740]	; (8001d20 <main+0xcd8>)
 8001a3c:	f003 f894 	bl	8004b68 <HAL_RNG_GetRandomNumber>
 8001a40:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	  			xr = random_num;
 8001a44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a48:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001a4c:	48b4      	ldr	r0, [pc, #720]	; (8001d20 <main+0xcd8>)
 8001a4e:	f003 f88b 	bl	8004b68 <HAL_RNG_GetRandomNumber>
 8001a52:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	  			yr = random_num;
 8001a56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a5a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001a5e:	48b0      	ldr	r0, [pc, #704]	; (8001d20 <main+0xcd8>)
 8001a60:	f003 f882 	bl	8004b68 <HAL_RNG_GetRandomNumber>
 8001a64:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	  			radiusr = random_num;
 8001a68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a6c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001a70:	48ab      	ldr	r0, [pc, #684]	; (8001d20 <main+0xcd8>)
 8001a72:	f003 f879 	bl	8004b68 <HAL_RNG_GetRandomNumber>
 8001a76:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	  			colourr = random_num;
 8001a7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a7e:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0

	  			xr &= 0x01FF;
 8001a82:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a8a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	  			yr &= 0x01FF;
 8001a8e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a96:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	  			radiusr &= 0x001F;
 8001a9a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Rectangle(xr, yr, radiusr, radiusr, colourr);
 8001aa6:	f8b7 40a2 	ldrh.w	r4, [r7, #162]	; 0xa2
 8001aaa:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8001aae:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 8001ab2:	f8b7 00a6 	ldrh.w	r0, [r7, #166]	; 0xa6
 8001ab6:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	4623      	mov	r3, r4
 8001abe:	f001 fe03 	bl	80036c8 <ILI9341_Draw_Rectangle>
	  		for(uint32_t i = 0; i < 20000; i++)
 8001ac2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001acc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001ad0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d9a1      	bls.n	8001a1c <main+0x9d4>
	  		}
	  		HAL_Delay(1000);
 8001ad8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001adc:	f002 f894 	bl	8003c08 <HAL_Delay>

	  //----------------------------------------------------------INDIVIDUAL PIXEL EXAMPLE

	  		ILI9341_Fill_Screen(WHITE);
 8001ae0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ae4:	f001 fcf0 	bl	80034c8 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f001 fae7 	bl	80030bc <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Slow draw by selecting", 10, 10, BLACK, 1, WHITE);
 8001aee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	2301      	movs	r3, #1
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2300      	movs	r3, #0
 8001afa:	220a      	movs	r2, #10
 8001afc:	210a      	movs	r1, #10
 8001afe:	4889      	ldr	r0, [pc, #548]	; (8001d24 <main+0xcdc>)
 8001b00:	f001 f852 	bl	8002ba8 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("and adressing pixels", 10, 20, BLACK, 1, WHITE);
 8001b04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	2214      	movs	r2, #20
 8001b12:	210a      	movs	r1, #10
 8001b14:	4884      	ldr	r0, [pc, #528]	; (8001d28 <main+0xce0>)
 8001b16:	f001 f847 	bl	8002ba8 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8001b1a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b1e:	f002 f873 	bl	8003c08 <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 8001b22:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b26:	f001 fccf 	bl	80034c8 <ILI9341_Fill_Screen>


	  		x = 0;
 8001b2a:	4b80      	ldr	r3, [pc, #512]	; (8001d2c <main+0xce4>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	801a      	strh	r2, [r3, #0]
	  		y = 0;
 8001b30:	4b7f      	ldr	r3, [pc, #508]	; (8001d30 <main+0xce8>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	801a      	strh	r2, [r3, #0]
	  		while (y < 240)
 8001b36:	e026      	b.n	8001b86 <main+0xb3e>
	  		{
	  		while ((x < 320) && (y < 240))
	  		{

	  			if(x % 2)
 8001b38:	4b7c      	ldr	r3, [pc, #496]	; (8001d2c <main+0xce4>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d007      	beq.n	8001b56 <main+0xb0e>
	  			{
	  				ILI9341_Draw_Pixel(x, y, BLACK);
 8001b46:	4b79      	ldr	r3, [pc, #484]	; (8001d2c <main+0xce4>)
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	4a79      	ldr	r2, [pc, #484]	; (8001d30 <main+0xce8>)
 8001b4c:	8811      	ldrh	r1, [r2, #0]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f001 fcdf 	bl	8003514 <ILI9341_Draw_Pixel>
	  			}

	  			x++;
 8001b56:	4b75      	ldr	r3, [pc, #468]	; (8001d2c <main+0xce4>)
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	4b73      	ldr	r3, [pc, #460]	; (8001d2c <main+0xce4>)
 8001b60:	801a      	strh	r2, [r3, #0]
	  		while ((x < 320) && (y < 240))
 8001b62:	4b72      	ldr	r3, [pc, #456]	; (8001d2c <main+0xce4>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001b6a:	d203      	bcs.n	8001b74 <main+0xb2c>
 8001b6c:	4b70      	ldr	r3, [pc, #448]	; (8001d30 <main+0xce8>)
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	2bef      	cmp	r3, #239	; 0xef
 8001b72:	d9e1      	bls.n	8001b38 <main+0xaf0>
	  		}

	  			y++;
 8001b74:	4b6e      	ldr	r3, [pc, #440]	; (8001d30 <main+0xce8>)
 8001b76:	881b      	ldrh	r3, [r3, #0]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	4b6c      	ldr	r3, [pc, #432]	; (8001d30 <main+0xce8>)
 8001b7e:	801a      	strh	r2, [r3, #0]
	  			x = 0;
 8001b80:	4b6a      	ldr	r3, [pc, #424]	; (8001d2c <main+0xce4>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	801a      	strh	r2, [r3, #0]
	  		while (y < 240)
 8001b86:	4b6a      	ldr	r3, [pc, #424]	; (8001d30 <main+0xce8>)
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	2bef      	cmp	r3, #239	; 0xef
 8001b8c:	d9e9      	bls.n	8001b62 <main+0xb1a>
	  		}

	  		x = 0;
 8001b8e:	4b67      	ldr	r3, [pc, #412]	; (8001d2c <main+0xce4>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	801a      	strh	r2, [r3, #0]
	  		y = 0;
 8001b94:	4b66      	ldr	r3, [pc, #408]	; (8001d30 <main+0xce8>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	801a      	strh	r2, [r3, #0]


	  		while (y < 240)
 8001b9a:	e026      	b.n	8001bea <main+0xba2>
	  		{
	  		while ((x < 320) && (y < 240))
	  		{

	  			if(y % 2)
 8001b9c:	4b64      	ldr	r3, [pc, #400]	; (8001d30 <main+0xce8>)
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <main+0xb72>
	  			{
	  				ILI9341_Draw_Pixel(x, y, BLACK);
 8001baa:	4b60      	ldr	r3, [pc, #384]	; (8001d2c <main+0xce4>)
 8001bac:	881b      	ldrh	r3, [r3, #0]
 8001bae:	4a60      	ldr	r2, [pc, #384]	; (8001d30 <main+0xce8>)
 8001bb0:	8811      	ldrh	r1, [r2, #0]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f001 fcad 	bl	8003514 <ILI9341_Draw_Pixel>
	  			}

	  			x++;
 8001bba:	4b5c      	ldr	r3, [pc, #368]	; (8001d2c <main+0xce4>)
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	4b5a      	ldr	r3, [pc, #360]	; (8001d2c <main+0xce4>)
 8001bc4:	801a      	strh	r2, [r3, #0]
	  		while ((x < 320) && (y < 240))
 8001bc6:	4b59      	ldr	r3, [pc, #356]	; (8001d2c <main+0xce4>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001bce:	d203      	bcs.n	8001bd8 <main+0xb90>
 8001bd0:	4b57      	ldr	r3, [pc, #348]	; (8001d30 <main+0xce8>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	2bef      	cmp	r3, #239	; 0xef
 8001bd6:	d9e1      	bls.n	8001b9c <main+0xb54>
	  		}

	  			y++;
 8001bd8:	4b55      	ldr	r3, [pc, #340]	; (8001d30 <main+0xce8>)
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	4b53      	ldr	r3, [pc, #332]	; (8001d30 <main+0xce8>)
 8001be2:	801a      	strh	r2, [r3, #0]
	  			x = 0;
 8001be4:	4b51      	ldr	r3, [pc, #324]	; (8001d2c <main+0xce4>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	801a      	strh	r2, [r3, #0]
	  		while (y < 240)
 8001bea:	4b51      	ldr	r3, [pc, #324]	; (8001d30 <main+0xce8>)
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	2bef      	cmp	r3, #239	; 0xef
 8001bf0:	d9e9      	bls.n	8001bc6 <main+0xb7e>
	  		}
	  		HAL_Delay(2000);
 8001bf2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bf6:	f002 f807 	bl	8003c08 <HAL_Delay>

	  //----------------------------------------------------------INDIVIDUAL PIXEL EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 8001bfa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001bfe:	f001 fc63 	bl	80034c8 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001c02:	2001      	movs	r0, #1
 8001c04:	f001 fa5a 	bl	80030bc <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Random position and colour", 10, 10, BLACK, 1, WHITE);
 8001c08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c0c:	9301      	str	r3, [sp, #4]
 8001c0e:	2301      	movs	r3, #1
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	2300      	movs	r3, #0
 8001c14:	220a      	movs	r2, #10
 8001c16:	210a      	movs	r1, #10
 8001c18:	4846      	ldr	r0, [pc, #280]	; (8001d34 <main+0xcec>)
 8001c1a:	f000 ffc5 	bl	8002ba8 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("500000 pixels", 10, 20, BLACK, 1, WHITE);
 8001c1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	2301      	movs	r3, #1
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	2300      	movs	r3, #0
 8001c2a:	2214      	movs	r2, #20
 8001c2c:	210a      	movs	r1, #10
 8001c2e:	4842      	ldr	r0, [pc, #264]	; (8001d38 <main+0xcf0>)
 8001c30:	f000 ffba 	bl	8002ba8 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8001c34:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c38:	f001 ffe6 	bl	8003c08 <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 8001c3c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c40:	f001 fc42 	bl	80034c8 <ILI9341_Fill_Screen>


	  		for(uint32_t i = 0; i < 500000; i++)
 8001c44:	2300      	movs	r3, #0
 8001c46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001c4a:	e03a      	b.n	8001cc2 <main+0xc7a>
	  		{
	  			uint32_t random_num = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	  			uint16_t xr = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	  			uint16_t yr = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001c5e:	4830      	ldr	r0, [pc, #192]	; (8001d20 <main+0xcd8>)
 8001c60:	f002 ff82 	bl	8004b68 <HAL_RNG_GetRandomNumber>
 8001c64:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
	  			xr = random_num;
 8001c68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c6c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001c70:	482b      	ldr	r0, [pc, #172]	; (8001d20 <main+0xcd8>)
 8001c72:	f002 ff79 	bl	8004b68 <HAL_RNG_GetRandomNumber>
 8001c76:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
	  			yr = random_num;
 8001c7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c7e:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	  			uint16_t color = HAL_RNG_GetRandomNumber(&hrng);
 8001c82:	4827      	ldr	r0, [pc, #156]	; (8001d20 <main+0xcd8>)
 8001c84:	f002 ff70 	bl	8004b68 <HAL_RNG_GetRandomNumber>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

	  			xr &= 0x01FF;
 8001c8e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8001c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c96:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	  			yr &= 0x01FF;
 8001c9a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8001c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ca2:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	  			ILI9341_Draw_Pixel(xr, yr, color);
 8001ca6:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8001caa:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 8001cae:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f001 fc2e 	bl	8003514 <ILI9341_Draw_Pixel>
	  		for(uint32_t i = 0; i < 500000; i++)
 8001cb8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001cc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001cc6:	4a1d      	ldr	r2, [pc, #116]	; (8001d3c <main+0xcf4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d9bf      	bls.n	8001c4c <main+0xc04>
	  		}
	  		HAL_Delay(2000);
 8001ccc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001cd0:	f001 ff9a 	bl	8003c08 <HAL_Delay>

	  //----------------------------------------------------------565 COLOUR EXAMPLE, Grayscale
	  		ILI9341_Fill_Screen(WHITE);
 8001cd4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001cd8:	f001 fbf6 	bl	80034c8 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f001 f9ed 	bl	80030bc <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
 8001ce2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ce6:	9301      	str	r3, [sp, #4]
 8001ce8:	2301      	movs	r3, #1
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	2300      	movs	r3, #0
 8001cee:	220a      	movs	r2, #10
 8001cf0:	210a      	movs	r1, #10
 8001cf2:	4813      	ldr	r0, [pc, #76]	; (8001d40 <main+0xcf8>)
 8001cf4:	f000 ff58 	bl	8002ba8 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);
 8001cf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	2301      	movs	r3, #1
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	2300      	movs	r3, #0
 8001d04:	2214      	movs	r2, #20
 8001d06:	210a      	movs	r1, #10
 8001d08:	480e      	ldr	r0, [pc, #56]	; (8001d44 <main+0xcfc>)
 8001d0a:	f000 ff4d 	bl	8002ba8 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8001d0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d12:	f001 ff79 	bl	8003c08 <HAL_Delay>


	  		for(uint16_t i = 0; i <= (320); i++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
 8001d1c:	e05a      	b.n	8001dd4 <main+0xd8c>
 8001d1e:	bf00      	nop
 8001d20:	2000020c 	.word	0x2000020c
 8001d24:	08008a90 	.word	0x08008a90
 8001d28:	08008aa8 	.word	0x08008aa8
 8001d2c:	200001fc 	.word	0x200001fc
 8001d30:	200001fe 	.word	0x200001fe
 8001d34:	08008ac0 	.word	0x08008ac0
 8001d38:	08008adc 	.word	0x08008adc
 8001d3c:	0007a11f 	.word	0x0007a11f
 8001d40:	08008aec 	.word	0x08008aec
 8001d44:	08008afc 	.word	0x08008afc
	  		{
	  			uint16_t Red = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
	  			uint16_t Green = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
	  			uint16_t Blue = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba

	  			Red = i/(10);
 8001d5a:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001d5e:	4a7d      	ldr	r2, [pc, #500]	; (8001f54 <main+0xf0c>)
 8001d60:	fba2 2303 	umull	r2, r3, r2, r3
 8001d64:	08db      	lsrs	r3, r3, #3
 8001d66:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
	  			Red <<= 11;
 8001d6a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001d6e:	02db      	lsls	r3, r3, #11
 8001d70:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
	  			Green = i/(5);
 8001d74:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001d78:	4a76      	ldr	r2, [pc, #472]	; (8001f54 <main+0xf0c>)
 8001d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7e:	089b      	lsrs	r3, r3, #2
 8001d80:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
	  			Green <<= 5;
 8001d84:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001d88:	015b      	lsls	r3, r3, #5
 8001d8a:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
	  			Blue = i/(10);
 8001d8e:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001d92:	4a70      	ldr	r2, [pc, #448]	; (8001f54 <main+0xf0c>)
 8001d94:	fba2 2303 	umull	r2, r3, r2, r3
 8001d98:	08db      	lsrs	r3, r3, #3
 8001d9a:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba



	  			uint16_t RGB_color = Red + Green + Blue;
 8001d9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001da2:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001da6:	4413      	add	r3, r2
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8001dae:	4413      	add	r3, r2
 8001db0:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
	  			ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color);
 8001db4:	4b68      	ldr	r3, [pc, #416]	; (8001f58 <main+0xf10>)
 8001db6:	8819      	ldrh	r1, [r3, #0]
 8001db8:	f8b7 00e6 	ldrh.w	r0, [r7, #230]	; 0xe6
 8001dbc:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	23f0      	movs	r3, #240	; 0xf0
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f001 fc7f 	bl	80036c8 <ILI9341_Draw_Rectangle>
	  		for(uint16_t i = 0; i <= (320); i++)
 8001dca:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001dce:	3301      	adds	r3, #1
 8001dd0:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
 8001dd4:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001dd8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ddc:	d9b4      	bls.n	8001d48 <main+0xd00>

	  		}
	  		HAL_Delay(2000);
 8001dde:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001de2:	f001 ff11 	bl	8003c08 <HAL_Delay>

	  //----------------------------------------------------------IMAGE EXAMPLE, Snow Tiger
	  		ILI9341_Fill_Screen(WHITE);
 8001de6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001dea:	f001 fb6d 	bl	80034c8 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001dee:	2001      	movs	r0, #1
 8001df0:	f001 f964 	bl	80030bc <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("RGB Picture", 10, 10, BLACK, 1, WHITE);
 8001df4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001df8:	9301      	str	r3, [sp, #4]
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	2300      	movs	r3, #0
 8001e00:	220a      	movs	r2, #10
 8001e02:	210a      	movs	r1, #10
 8001e04:	4855      	ldr	r0, [pc, #340]	; (8001f5c <main+0xf14>)
 8001e06:	f000 fecf 	bl	8002ba8 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("TIGER", 10, 20, BLACK, 1, WHITE);
 8001e0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	2301      	movs	r3, #1
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	2300      	movs	r3, #0
 8001e16:	2214      	movs	r2, #20
 8001e18:	210a      	movs	r1, #10
 8001e1a:	4851      	ldr	r0, [pc, #324]	; (8001f60 <main+0xf18>)
 8001e1c:	f000 fec4 	bl	8002ba8 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8001e20:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e24:	f001 fef0 	bl	8003c08 <HAL_Delay>
	  		ILI9341_Draw_Image((const char*)snow_tiger, SCREEN_VERTICAL_2);
 8001e28:	2102      	movs	r1, #2
 8001e2a:	484e      	ldr	r0, [pc, #312]	; (8001f64 <main+0xf1c>)
 8001e2c:	f000 feec 	bl	8002c08 <ILI9341_Draw_Image>
	  		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001e30:	2000      	movs	r0, #0
 8001e32:	f001 f943 	bl	80030bc <ILI9341_Set_Rotation>
	  		HAL_Delay(5000);
 8001e36:	f241 3088 	movw	r0, #5000	; 0x1388
 8001e3a:	f001 fee5 	bl	8003c08 <HAL_Delay>


	  //----------------------------------------------------------TOUCHSCREEN EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 8001e3e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e42:	f001 fb41 	bl	80034c8 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001e46:	2001      	movs	r0, #1
 8001e48:	f001 f938 	bl	80030bc <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Touchscreen", 10, 10, BLACK, 2, WHITE);
 8001e4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	2302      	movs	r3, #2
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	2300      	movs	r3, #0
 8001e58:	220a      	movs	r2, #10
 8001e5a:	210a      	movs	r1, #10
 8001e5c:	4842      	ldr	r0, [pc, #264]	; (8001f68 <main+0xf20>)
 8001e5e:	f000 fea3 	bl	8002ba8 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Touch to draw", 10, 30, BLACK, 2, WHITE);
 8001e62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	2302      	movs	r3, #2
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	221e      	movs	r2, #30
 8001e70:	210a      	movs	r1, #10
 8001e72:	483e      	ldr	r0, [pc, #248]	; (8001f6c <main+0xf24>)
 8001e74:	f000 fe98 	bl	8002ba8 <ILI9341_Draw_Text>
	  		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f001 f91f 	bl	80030bc <ILI9341_Set_Rotation>


	  		while(1)
	  		{
	  			HAL_Delay(50);
 8001e7e:	2032      	movs	r0, #50	; 0x32
 8001e80:	f001 fec2 	bl	8003c08 <HAL_Delay>

	  			if(TP_Touchpad_Pressed())
 8001e84:	f001 fe3e 	bl	8003b04 <TP_Touchpad_Pressed>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d05a      	beq.n	8001f44 <main+0xefc>
	          {

	  					uint16_t x_pos = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
	  					uint16_t y_pos = 0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2


	  					HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_SET);
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001ea0:	4833      	ldr	r0, [pc, #204]	; (8001f70 <main+0xf28>)
 8001ea2:	f002 f97f 	bl	80041a4 <HAL_GPIO_WritePin>

	  					uint16_t position_array[2];

	  					if(TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 8001ea6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f001 fd54 	bl	8003958 <TP_Read_Coordinates>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d13d      	bne.n	8001f32 <main+0xeea>
	  					{
	  					x_pos = position_array[0];
 8001eb6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001eba:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
	  					y_pos = position_array[1];
 8001ebe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001ec2:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
	  					ILI9341_Draw_Filled_Circle(x_pos, y_pos, 2, BLACK);
 8001ec6:	f8b7 10e2 	ldrh.w	r1, [r7, #226]	; 0xe2
 8001eca:	f8b7 00e4 	ldrh.w	r0, [r7, #228]	; 0xe4
 8001ece:	2300      	movs	r3, #0
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	f000 fc66 	bl	80027a2 <ILI9341_Draw_Filled_Circle>

	  					ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f001 f8f0 	bl	80030bc <ILI9341_Set_Rotation>
	  					char counter_buff[30];
	  					sprintf(counter_buff, "POS X: %.3d", x_pos);
 8001edc:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	; 0xe4
 8001ee0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ee4:	4923      	ldr	r1, [pc, #140]	; (8001f74 <main+0xf2c>)
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f004 faf0 	bl	80064cc <siprintf>
	  					ILI9341_Draw_Text(counter_buff, 10, 80, BLACK, 2, WHITE);
 8001eec:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001ef0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	2300      	movs	r3, #0
 8001efc:	2250      	movs	r2, #80	; 0x50
 8001efe:	210a      	movs	r1, #10
 8001f00:	f000 fe52 	bl	8002ba8 <ILI9341_Draw_Text>
	  					sprintf(counter_buff, "POS Y: %.3d", y_pos);
 8001f04:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	; 0xe2
 8001f08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f0c:	491a      	ldr	r1, [pc, #104]	; (8001f78 <main+0xf30>)
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f004 fadc 	bl	80064cc <siprintf>
	  					ILI9341_Draw_Text(counter_buff, 10, 120, BLACK, 2, WHITE);
 8001f14:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001f18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f1c:	9301      	str	r3, [sp, #4]
 8001f1e:	2302      	movs	r3, #2
 8001f20:	9300      	str	r3, [sp, #0]
 8001f22:	2300      	movs	r3, #0
 8001f24:	2278      	movs	r2, #120	; 0x78
 8001f26:	210a      	movs	r1, #10
 8001f28:	f000 fe3e 	bl	8002ba8 <ILI9341_Draw_Text>
	  					ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f001 f8c5 	bl	80030bc <ILI9341_Set_Rotation>
	  					}

	  					ILI9341_Draw_Pixel(x_pos, y_pos, BLACK);
 8001f32:	f8b7 10e2 	ldrh.w	r1, [r7, #226]	; 0xe2
 8001f36:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f001 fae9 	bl	8003514 <ILI9341_Draw_Pixel>
 8001f42:	e79c      	b.n	8001e7e <main+0xe36>

	          }
	  			else
	  			{
	  				HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001f44:	2200      	movs	r2, #0
 8001f46:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001f4a:	4809      	ldr	r0, [pc, #36]	; (8001f70 <main+0xf28>)
 8001f4c:	f002 f92a 	bl	80041a4 <HAL_GPIO_WritePin>
	  			HAL_Delay(50);
 8001f50:	e795      	b.n	8001e7e <main+0xe36>
 8001f52:	bf00      	nop
 8001f54:	cccccccd 	.word	0xcccccccd
 8001f58:	200001fc 	.word	0x200001fc
 8001f5c:	08008b08 	.word	0x08008b08
 8001f60:	08008b14 	.word	0x08008b14
 8001f64:	08008b50 	.word	0x08008b50
 8001f68:	08008b1c 	.word	0x08008b1c
 8001f6c:	08008b28 	.word	0x08008b28
 8001f70:	40021800 	.word	0x40021800
 8001f74:	08008b38 	.word	0x08008b38
 8001f78:	08008b44 	.word	0x08008b44

08001f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b094      	sub	sp, #80	; 0x50
 8001f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f82:	f107 0320 	add.w	r3, r7, #32
 8001f86:	2230      	movs	r2, #48	; 0x30
 8001f88:	2100      	movs	r1, #0
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f003 fe2c 	bl	8005be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f90:	f107 030c 	add.w	r3, r7, #12
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60bb      	str	r3, [r7, #8]
 8001fa4:	4b29      	ldr	r3, [pc, #164]	; (800204c <SystemClock_Config+0xd0>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	4a28      	ldr	r2, [pc, #160]	; (800204c <SystemClock_Config+0xd0>)
 8001faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fae:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb0:	4b26      	ldr	r3, [pc, #152]	; (800204c <SystemClock_Config+0xd0>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	4b23      	ldr	r3, [pc, #140]	; (8002050 <SystemClock_Config+0xd4>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001fc8:	4a21      	ldr	r2, [pc, #132]	; (8002050 <SystemClock_Config+0xd4>)
 8001fca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <SystemClock_Config+0xd4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fe4:	2310      	movs	r3, #16
 8001fe6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fec:	2300      	movs	r3, #0
 8001fee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ff0:	2308      	movs	r3, #8
 8001ff2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001ff4:	2378      	movs	r3, #120	; 0x78
 8001ff6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001ffc:	2305      	movs	r3, #5
 8001ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002000:	f107 0320 	add.w	r3, r7, #32
 8002004:	4618      	mov	r0, r3
 8002006:	f002 f8e7 	bl	80041d8 <HAL_RCC_OscConfig>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002010:	f000 f820 	bl	8002054 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002014:	230f      	movs	r3, #15
 8002016:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002018:	2302      	movs	r3, #2
 800201a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002020:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002024:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800202a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800202c:	f107 030c 	add.w	r3, r7, #12
 8002030:	2103      	movs	r1, #3
 8002032:	4618      	mov	r0, r3
 8002034:	f002 fb48 	bl	80046c8 <HAL_RCC_ClockConfig>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800203e:	f000 f809 	bl	8002054 <Error_Handler>
  }
}
 8002042:	bf00      	nop
 8002044:	3750      	adds	r7, #80	; 0x50
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800
 8002050:	40007000 	.word	0x40007000

08002054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002058:	b672      	cpsid	i
}
 800205a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800205c:	e7fe      	b.n	800205c <Error_Handler+0x8>
	...

08002060 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <MX_RNG_Init+0x20>)
 8002066:	4a07      	ldr	r2, [pc, #28]	; (8002084 <MX_RNG_Init+0x24>)
 8002068:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800206a:	4805      	ldr	r0, [pc, #20]	; (8002080 <MX_RNG_Init+0x20>)
 800206c:	f002 fcfc 	bl	8004a68 <HAL_RNG_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002076:	f7ff ffed 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	2000020c 	.word	0x2000020c
 8002084:	50060800 	.word	0x50060800

08002088 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0b      	ldr	r2, [pc, #44]	; (80020c4 <HAL_RNG_MspInit+0x3c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d10d      	bne.n	80020b6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <HAL_RNG_MspInit+0x40>)
 80020a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a2:	4a09      	ldr	r2, [pc, #36]	; (80020c8 <HAL_RNG_MspInit+0x40>)
 80020a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020a8:	6353      	str	r3, [r2, #52]	; 0x34
 80020aa:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <HAL_RNG_MspInit+0x40>)
 80020ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	50060800 	.word	0x50060800
 80020c8:	40023800 	.word	0x40023800

080020cc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80020d0:	4b17      	ldr	r3, [pc, #92]	; (8002130 <MX_SPI3_Init+0x64>)
 80020d2:	4a18      	ldr	r2, [pc, #96]	; (8002134 <MX_SPI3_Init+0x68>)
 80020d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80020d6:	4b16      	ldr	r3, [pc, #88]	; (8002130 <MX_SPI3_Init+0x64>)
 80020d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80020de:	4b14      	ldr	r3, [pc, #80]	; (8002130 <MX_SPI3_Init+0x64>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80020e4:	4b12      	ldr	r3, [pc, #72]	; (8002130 <MX_SPI3_Init+0x64>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ea:	4b11      	ldr	r3, [pc, #68]	; (8002130 <MX_SPI3_Init+0x64>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020f0:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <MX_SPI3_Init+0x64>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80020f6:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <MX_SPI3_Init+0x64>)
 80020f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020fc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020fe:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <MX_SPI3_Init+0x64>)
 8002100:	2200      	movs	r2, #0
 8002102:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002104:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <MX_SPI3_Init+0x64>)
 8002106:	2200      	movs	r2, #0
 8002108:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <MX_SPI3_Init+0x64>)
 800210c:	2200      	movs	r2, #0
 800210e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002110:	4b07      	ldr	r3, [pc, #28]	; (8002130 <MX_SPI3_Init+0x64>)
 8002112:	2200      	movs	r2, #0
 8002114:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <MX_SPI3_Init+0x64>)
 8002118:	220a      	movs	r2, #10
 800211a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800211c:	4804      	ldr	r0, [pc, #16]	; (8002130 <MX_SPI3_Init+0x64>)
 800211e:	f002 fd38 	bl	8004b92 <HAL_SPI_Init>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002128:	f7ff ff94 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800212c:	bf00      	nop
 800212e:	bd80      	pop	{r7, pc}
 8002130:	2000021c 	.word	0x2000021c
 8002134:	40003c00 	.word	0x40003c00

08002138 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08a      	sub	sp, #40	; 0x28
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a19      	ldr	r2, [pc, #100]	; (80021bc <HAL_SPI_MspInit+0x84>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d12c      	bne.n	80021b4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	613b      	str	r3, [r7, #16]
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <HAL_SPI_MspInit+0x88>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	4a17      	ldr	r2, [pc, #92]	; (80021c0 <HAL_SPI_MspInit+0x88>)
 8002164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002168:	6413      	str	r3, [r2, #64]	; 0x40
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <HAL_SPI_MspInit+0x88>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60fb      	str	r3, [r7, #12]
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <HAL_SPI_MspInit+0x88>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a10      	ldr	r2, [pc, #64]	; (80021c0 <HAL_SPI_MspInit+0x88>)
 8002180:	f043 0304 	orr.w	r3, r3, #4
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <HAL_SPI_MspInit+0x88>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002192:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002198:	2302      	movs	r3, #2
 800219a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a0:	2303      	movs	r3, #3
 80021a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021a4:	2306      	movs	r3, #6
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	4619      	mov	r1, r3
 80021ae:	4805      	ldr	r0, [pc, #20]	; (80021c4 <HAL_SPI_MspInit+0x8c>)
 80021b0:	f001 fe34 	bl	8003e1c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80021b4:	bf00      	nop
 80021b6:	3728      	adds	r7, #40	; 0x28
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40003c00 	.word	0x40003c00
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40020800 	.word	0x40020800

080021c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <HAL_MspInit+0x4c>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	4a0f      	ldr	r2, [pc, #60]	; (8002214 <HAL_MspInit+0x4c>)
 80021d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021dc:	6453      	str	r3, [r2, #68]	; 0x44
 80021de:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <HAL_MspInit+0x4c>)
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	603b      	str	r3, [r7, #0]
 80021ee:	4b09      	ldr	r3, [pc, #36]	; (8002214 <HAL_MspInit+0x4c>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	4a08      	ldr	r2, [pc, #32]	; (8002214 <HAL_MspInit+0x4c>)
 80021f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f8:	6413      	str	r3, [r2, #64]	; 0x40
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_MspInit+0x4c>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	603b      	str	r3, [r7, #0]
 8002204:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800

08002218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800221c:	e7fe      	b.n	800221c <NMI_Handler+0x4>

0800221e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002222:	e7fe      	b.n	8002222 <HardFault_Handler+0x4>

08002224 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002228:	e7fe      	b.n	8002228 <MemManage_Handler+0x4>

0800222a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800222e:	e7fe      	b.n	800222e <BusFault_Handler+0x4>

08002230 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <UsageFault_Handler+0x4>

08002236 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002264:	f001 fcb0 	bl	8003bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}

0800226c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
	return 1;
 8002270:	2301      	movs	r3, #1
}
 8002272:	4618      	mov	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <_kill>:

int _kill(int pid, int sig)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002286:	f003 fc85 	bl	8005b94 <__errno>
 800228a:	4603      	mov	r3, r0
 800228c:	2216      	movs	r2, #22
 800228e:	601a      	str	r2, [r3, #0]
	return -1;
 8002290:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <_exit>:

void _exit (int status)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022a4:	f04f 31ff 	mov.w	r1, #4294967295
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff ffe7 	bl	800227c <_kill>
	while (1) {}		/* Make sure we hang here */
 80022ae:	e7fe      	b.n	80022ae <_exit+0x12>

080022b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	e00a      	b.n	80022d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022c2:	f3af 8000 	nop.w
 80022c6:	4601      	mov	r1, r0
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	60ba      	str	r2, [r7, #8]
 80022ce:	b2ca      	uxtb	r2, r1
 80022d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	3301      	adds	r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	429a      	cmp	r2, r3
 80022de:	dbf0      	blt.n	80022c2 <_read+0x12>
	}

return len;
 80022e0:	687b      	ldr	r3, [r7, #4]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b086      	sub	sp, #24
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f6:	2300      	movs	r3, #0
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	e009      	b.n	8002310 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	60ba      	str	r2, [r7, #8]
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	3301      	adds	r3, #1
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	429a      	cmp	r2, r3
 8002316:	dbf1      	blt.n	80022fc <_write+0x12>
	}
	return len;
 8002318:	687b      	ldr	r3, [r7, #4]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <_close>:

int _close(int file)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
	return -1;
 800232a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800232e:	4618      	mov	r0, r3
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800234a:	605a      	str	r2, [r3, #4]
	return 0;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <_isatty>:

int _isatty(int file)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
	return 1;
 8002362:	2301      	movs	r3, #1
}
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
	return 0;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
	...

0800238c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002394:	4a14      	ldr	r2, [pc, #80]	; (80023e8 <_sbrk+0x5c>)
 8002396:	4b15      	ldr	r3, [pc, #84]	; (80023ec <_sbrk+0x60>)
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023a0:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <_sbrk+0x64>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d102      	bne.n	80023ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <_sbrk+0x64>)
 80023aa:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <_sbrk+0x68>)
 80023ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <_sbrk+0x64>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d207      	bcs.n	80023cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023bc:	f003 fbea 	bl	8005b94 <__errno>
 80023c0:	4603      	mov	r3, r0
 80023c2:	220c      	movs	r2, #12
 80023c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023c6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ca:	e009      	b.n	80023e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023cc:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <_sbrk+0x64>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023d2:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <_sbrk+0x64>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <_sbrk+0x64>)
 80023dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023de:	68fb      	ldr	r3, [r7, #12]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20030000 	.word	0x20030000
 80023ec:	00000400 	.word	0x00000400
 80023f0:	20000200 	.word	0x20000200
 80023f4:	20000318 	.word	0x20000318

080023f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <SystemInit+0x20>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002402:	4a05      	ldr	r2, [pc, #20]	; (8002418 <SystemInit+0x20>)
 8002404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002422:	f107 0308 	add.w	r3, r7, #8
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	609a      	str	r2, [r3, #8]
 800242e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002430:	463b      	mov	r3, r7
 8002432:	2200      	movs	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
 8002436:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002438:	4b1e      	ldr	r3, [pc, #120]	; (80024b4 <MX_TIM1_Init+0x98>)
 800243a:	4a1f      	ldr	r2, [pc, #124]	; (80024b8 <MX_TIM1_Init+0x9c>)
 800243c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 800243e:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <MX_TIM1_Init+0x98>)
 8002440:	f242 720f 	movw	r2, #9999	; 0x270f
 8002444:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002446:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <MX_TIM1_Init+0x98>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 12-1;
 800244c:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <MX_TIM1_Init+0x98>)
 800244e:	220b      	movs	r2, #11
 8002450:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002452:	4b18      	ldr	r3, [pc, #96]	; (80024b4 <MX_TIM1_Init+0x98>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002458:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <MX_TIM1_Init+0x98>)
 800245a:	2200      	movs	r2, #0
 800245c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <MX_TIM1_Init+0x98>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002464:	4813      	ldr	r0, [pc, #76]	; (80024b4 <MX_TIM1_Init+0x98>)
 8002466:	f002 fe23 	bl	80050b0 <HAL_TIM_Base_Init>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002470:	f7ff fdf0 	bl	8002054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002478:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800247a:	f107 0308 	add.w	r3, r7, #8
 800247e:	4619      	mov	r1, r3
 8002480:	480c      	ldr	r0, [pc, #48]	; (80024b4 <MX_TIM1_Init+0x98>)
 8002482:	f002 fef4 	bl	800526e <HAL_TIM_ConfigClockSource>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800248c:	f7ff fde2 	bl	8002054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002490:	2300      	movs	r3, #0
 8002492:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002494:	2300      	movs	r3, #0
 8002496:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002498:	463b      	mov	r3, r7
 800249a:	4619      	mov	r1, r3
 800249c:	4805      	ldr	r0, [pc, #20]	; (80024b4 <MX_TIM1_Init+0x98>)
 800249e:	f003 f8e7 	bl	8005670 <HAL_TIMEx_MasterConfigSynchronization>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80024a8:	f7ff fdd4 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024ac:	bf00      	nop
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20000274 	.word	0x20000274
 80024b8:	40010000 	.word	0x40010000

080024bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <HAL_TIM_Base_MspInit+0x3c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d10d      	bne.n	80024ea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_TIM_Base_MspInit+0x40>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	4a09      	ldr	r2, [pc, #36]	; (80024fc <HAL_TIM_Base_MspInit+0x40>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6453      	str	r3, [r2, #68]	; 0x44
 80024de:	4b07      	ldr	r3, [pc, #28]	; (80024fc <HAL_TIM_Base_MspInit+0x40>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80024ea:	bf00      	nop
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40010000 	.word	0x40010000
 80024fc:	40023800 	.word	0x40023800

08002500 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <MX_USART1_UART_Init+0x4c>)
 8002506:	4a12      	ldr	r2, [pc, #72]	; (8002550 <MX_USART1_UART_Init+0x50>)
 8002508:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <MX_USART1_UART_Init+0x4c>)
 800250c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002510:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002512:	4b0e      	ldr	r3, [pc, #56]	; (800254c <MX_USART1_UART_Init+0x4c>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <MX_USART1_UART_Init+0x4c>)
 800251a:	2200      	movs	r2, #0
 800251c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800251e:	4b0b      	ldr	r3, [pc, #44]	; (800254c <MX_USART1_UART_Init+0x4c>)
 8002520:	2200      	movs	r2, #0
 8002522:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <MX_USART1_UART_Init+0x4c>)
 8002526:	220c      	movs	r2, #12
 8002528:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <MX_USART1_UART_Init+0x4c>)
 800252c:	2200      	movs	r2, #0
 800252e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <MX_USART1_UART_Init+0x4c>)
 8002532:	2200      	movs	r2, #0
 8002534:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002536:	4805      	ldr	r0, [pc, #20]	; (800254c <MX_USART1_UART_Init+0x4c>)
 8002538:	f003 f916 	bl	8005768 <HAL_UART_Init>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002542:	f7ff fd87 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	200002bc 	.word	0x200002bc
 8002550:	40011000 	.word	0x40011000

08002554 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	; 0x28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a19      	ldr	r2, [pc, #100]	; (80025d8 <HAL_UART_MspInit+0x84>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d12c      	bne.n	80025d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	4b18      	ldr	r3, [pc, #96]	; (80025dc <HAL_UART_MspInit+0x88>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	4a17      	ldr	r2, [pc, #92]	; (80025dc <HAL_UART_MspInit+0x88>)
 8002580:	f043 0310 	orr.w	r3, r3, #16
 8002584:	6453      	str	r3, [r2, #68]	; 0x44
 8002586:	4b15      	ldr	r3, [pc, #84]	; (80025dc <HAL_UART_MspInit+0x88>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	f003 0310 	and.w	r3, r3, #16
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <HAL_UART_MspInit+0x88>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	4a10      	ldr	r2, [pc, #64]	; (80025dc <HAL_UART_MspInit+0x88>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	6313      	str	r3, [r2, #48]	; 0x30
 80025a2:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <HAL_UART_MspInit+0x88>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b4:	2302      	movs	r3, #2
 80025b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025bc:	2303      	movs	r3, #3
 80025be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025c0:	2307      	movs	r3, #7
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	4619      	mov	r1, r3
 80025ca:	4805      	ldr	r0, [pc, #20]	; (80025e0 <HAL_UART_MspInit+0x8c>)
 80025cc:	f001 fc26 	bl	8003e1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80025d0:	bf00      	nop
 80025d2:	3728      	adds	r7, #40	; 0x28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40011000 	.word	0x40011000
 80025dc:	40023800 	.word	0x40023800
 80025e0:	40020000 	.word	0x40020000

080025e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80025e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800261c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025e8:	480d      	ldr	r0, [pc, #52]	; (8002620 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025ea:	490e      	ldr	r1, [pc, #56]	; (8002624 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025ec:	4a0e      	ldr	r2, [pc, #56]	; (8002628 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f0:	e002      	b.n	80025f8 <LoopCopyDataInit>

080025f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025f6:	3304      	adds	r3, #4

080025f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025fc:	d3f9      	bcc.n	80025f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025fe:	4a0b      	ldr	r2, [pc, #44]	; (800262c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002600:	4c0b      	ldr	r4, [pc, #44]	; (8002630 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002604:	e001      	b.n	800260a <LoopFillZerobss>

08002606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002608:	3204      	adds	r2, #4

0800260a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800260a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800260c:	d3fb      	bcc.n	8002606 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800260e:	f7ff fef3 	bl	80023f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002612:	f003 fac5 	bl	8005ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002616:	f7fe fd17 	bl	8001048 <main>
  bx  lr    
 800261a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800261c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002624:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002628:	0802e99c 	.word	0x0802e99c
  ldr r2, =_sbss
 800262c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002630:	20000314 	.word	0x20000314

08002634 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002634:	e7fe      	b.n	8002634 <ADC_IRQHandler>

08002636 <ILI9341_Draw_Hollow_Circle>:
#include "5x5_font.h"
#include "spi.h"

/*Draw hollow circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Hollow_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8002636:	b590      	push	{r4, r7, lr}
 8002638:	b089      	sub	sp, #36	; 0x24
 800263a:	af00      	add	r7, sp, #0
 800263c:	4604      	mov	r4, r0
 800263e:	4608      	mov	r0, r1
 8002640:	4611      	mov	r1, r2
 8002642:	461a      	mov	r2, r3
 8002644:	4623      	mov	r3, r4
 8002646:	80fb      	strh	r3, [r7, #6]
 8002648:	4603      	mov	r3, r0
 800264a:	80bb      	strh	r3, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	807b      	strh	r3, [r7, #2]
 8002650:	4613      	mov	r3, r2
 8002652:	803b      	strh	r3, [r7, #0]
	int x = Radius-1;
 8002654:	887b      	ldrh	r3, [r7, #2]
 8002656:	3b01      	subs	r3, #1
 8002658:	61fb      	str	r3, [r7, #28]
    int y = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	61bb      	str	r3, [r7, #24]
    int dx = 1;
 800265e:	2301      	movs	r3, #1
 8002660:	617b      	str	r3, [r7, #20]
    int dy = 1;
 8002662:	2301      	movs	r3, #1
 8002664:	613b      	str	r3, [r7, #16]
    int err = dx - (Radius << 1);
 8002666:	887b      	ldrh	r3, [r7, #2]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	697a      	ldr	r2, [r7, #20]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	60fb      	str	r3, [r7, #12]

    while (x >= y)
 8002670:	e08d      	b.n	800278e <ILI9341_Draw_Hollow_Circle+0x158>
    {
        ILI9341_Draw_Pixel(X + x, Y + y, Colour);
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	b29a      	uxth	r2, r3
 8002676:	88fb      	ldrh	r3, [r7, #6]
 8002678:	4413      	add	r3, r2
 800267a:	b298      	uxth	r0, r3
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	b29a      	uxth	r2, r3
 8002680:	88bb      	ldrh	r3, [r7, #4]
 8002682:	4413      	add	r3, r2
 8002684:	b29b      	uxth	r3, r3
 8002686:	883a      	ldrh	r2, [r7, #0]
 8002688:	4619      	mov	r1, r3
 800268a:	f000 ff43 	bl	8003514 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + y, Y + x, Colour);
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	b29a      	uxth	r2, r3
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	4413      	add	r3, r2
 8002696:	b298      	uxth	r0, r3
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	b29a      	uxth	r2, r3
 800269c:	88bb      	ldrh	r3, [r7, #4]
 800269e:	4413      	add	r3, r2
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	883a      	ldrh	r2, [r7, #0]
 80026a4:	4619      	mov	r1, r3
 80026a6:	f000 ff35 	bl	8003514 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - y, Y + x, Colour);
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	88fa      	ldrh	r2, [r7, #6]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	b298      	uxth	r0, r3
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	88bb      	ldrh	r3, [r7, #4]
 80026ba:	4413      	add	r3, r2
 80026bc:	b29b      	uxth	r3, r3
 80026be:	883a      	ldrh	r2, [r7, #0]
 80026c0:	4619      	mov	r1, r3
 80026c2:	f000 ff27 	bl	8003514 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - x, Y + y, Colour);
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	88fa      	ldrh	r2, [r7, #6]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	b298      	uxth	r0, r3
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	88bb      	ldrh	r3, [r7, #4]
 80026d6:	4413      	add	r3, r2
 80026d8:	b29b      	uxth	r3, r3
 80026da:	883a      	ldrh	r2, [r7, #0]
 80026dc:	4619      	mov	r1, r3
 80026de:	f000 ff19 	bl	8003514 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - x, Y - y, Colour);
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	88fa      	ldrh	r2, [r7, #6]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	b298      	uxth	r0, r3
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	88ba      	ldrh	r2, [r7, #4]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	883a      	ldrh	r2, [r7, #0]
 80026f8:	4619      	mov	r1, r3
 80026fa:	f000 ff0b 	bl	8003514 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - y, Y - x, Colour);
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	b29b      	uxth	r3, r3
 8002702:	88fa      	ldrh	r2, [r7, #6]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	b298      	uxth	r0, r3
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	b29b      	uxth	r3, r3
 800270c:	88ba      	ldrh	r2, [r7, #4]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	b29b      	uxth	r3, r3
 8002712:	883a      	ldrh	r2, [r7, #0]
 8002714:	4619      	mov	r1, r3
 8002716:	f000 fefd 	bl	8003514 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + y, Y - x, Colour);
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	b29a      	uxth	r2, r3
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	4413      	add	r3, r2
 8002722:	b298      	uxth	r0, r3
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	b29b      	uxth	r3, r3
 8002728:	88ba      	ldrh	r2, [r7, #4]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	b29b      	uxth	r3, r3
 800272e:	883a      	ldrh	r2, [r7, #0]
 8002730:	4619      	mov	r1, r3
 8002732:	f000 feef 	bl	8003514 <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + x, Y - y, Colour);
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	b29a      	uxth	r2, r3
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	4413      	add	r3, r2
 800273e:	b298      	uxth	r0, r3
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	b29b      	uxth	r3, r3
 8002744:	88ba      	ldrh	r2, [r7, #4]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	b29b      	uxth	r3, r3
 800274a:	883a      	ldrh	r2, [r7, #0]
 800274c:	4619      	mov	r1, r3
 800274e:	f000 fee1 	bl	8003514 <ILI9341_Draw_Pixel>

        if (err <= 0)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	dc09      	bgt.n	800276c <ILI9341_Draw_Hollow_Circle+0x136>
        {
            y++;
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	3301      	adds	r3, #1
 800275c:	61bb      	str	r3, [r7, #24]
            err += dy;
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4413      	add	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
            dy += 2;
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	3302      	adds	r3, #2
 800276a:	613b      	str	r3, [r7, #16]
        }
        if (err > 0)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2b00      	cmp	r3, #0
 8002770:	dd0d      	ble.n	800278e <ILI9341_Draw_Hollow_Circle+0x158>
        {
            x--;
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3b01      	subs	r3, #1
 8002776:	61fb      	str	r3, [r7, #28]
            dx += 2;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	3302      	adds	r3, #2
 800277c:	617b      	str	r3, [r7, #20]
            err += (-Radius << 1) + dx;
 800277e:	887b      	ldrh	r3, [r7, #2]
 8002780:	425b      	negs	r3, r3
 8002782:	005a      	lsls	r2, r3, #1
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	4413      	add	r3, r2
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	4413      	add	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
    while (x >= y)
 800278e:	69fa      	ldr	r2, [r7, #28]
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	429a      	cmp	r2, r3
 8002794:	f6bf af6d 	bge.w	8002672 <ILI9341_Draw_Hollow_Circle+0x3c>
        }
    }
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	3724      	adds	r7, #36	; 0x24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd90      	pop	{r4, r7, pc}

080027a2 <ILI9341_Draw_Filled_Circle>:

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80027a2:	b590      	push	{r4, r7, lr}
 80027a4:	b08b      	sub	sp, #44	; 0x2c
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	4604      	mov	r4, r0
 80027aa:	4608      	mov	r0, r1
 80027ac:	4611      	mov	r1, r2
 80027ae:	461a      	mov	r2, r3
 80027b0:	4623      	mov	r3, r4
 80027b2:	80fb      	strh	r3, [r7, #6]
 80027b4:	4603      	mov	r3, r0
 80027b6:	80bb      	strh	r3, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	807b      	strh	r3, [r7, #2]
 80027bc:	4613      	mov	r3, r2
 80027be:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80027c0:	887b      	ldrh	r3, [r7, #2]
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80027c8:	887b      	ldrh	r3, [r7, #2]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	f1c3 0301 	rsb	r3, r3, #1
 80027d0:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80027da:	e061      	b.n	80028a0 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80027dc:	88fa      	ldrh	r2, [r7, #6]
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	e018      	b.n	8002818 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	b298      	uxth	r0, r3
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	88bb      	ldrh	r3, [r7, #4]
 80027f0:	4413      	add	r3, r2
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	883a      	ldrh	r2, [r7, #0]
 80027f6:	4619      	mov	r1, r3
 80027f8:	f000 fe8c 	bl	8003514 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	b298      	uxth	r0, r3
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	b29b      	uxth	r3, r3
 8002804:	88ba      	ldrh	r2, [r7, #4]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	b29b      	uxth	r3, r3
 800280a:	883a      	ldrh	r2, [r7, #0]
 800280c:	4619      	mov	r1, r3
 800280e:	f000 fe81 	bl	8003514 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	3301      	adds	r3, #1
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	88fa      	ldrh	r2, [r7, #6]
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	4413      	add	r3, r2
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	429a      	cmp	r2, r3
 8002822:	dde0      	ble.n	80027e6 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8002824:	88fa      	ldrh	r2, [r7, #6]
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	e018      	b.n	8002860 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	b298      	uxth	r0, r3
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	b29a      	uxth	r2, r3
 8002836:	88bb      	ldrh	r3, [r7, #4]
 8002838:	4413      	add	r3, r2
 800283a:	b29b      	uxth	r3, r3
 800283c:	883a      	ldrh	r2, [r7, #0]
 800283e:	4619      	mov	r1, r3
 8002840:	f000 fe68 	bl	8003514 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	b298      	uxth	r0, r3
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	b29b      	uxth	r3, r3
 800284c:	88ba      	ldrh	r2, [r7, #4]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	b29b      	uxth	r3, r3
 8002852:	883a      	ldrh	r2, [r7, #0]
 8002854:	4619      	mov	r1, r3
 8002856:	f000 fe5d 	bl	8003514 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	3301      	adds	r3, #1
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	88fa      	ldrh	r2, [r7, #6]
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	4413      	add	r3, r2
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	429a      	cmp	r2, r3
 800286a:	dde0      	ble.n	800282e <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	3301      	adds	r3, #1
 8002870:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	4413      	add	r3, r2
 8002878:	617b      	str	r3, [r7, #20]
        yChange += 2;
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	3302      	adds	r3, #2
 800287e:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	005a      	lsls	r2, r3, #1
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	4413      	add	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	dd09      	ble.n	80028a0 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	3b01      	subs	r3, #1
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	4413      	add	r3, r2
 8002898:	617b      	str	r3, [r7, #20]
            xChange += 2;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3302      	adds	r3, #2
 800289e:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80028a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	da99      	bge.n	80027dc <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	372c      	adds	r7, #44	; 0x2c
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd90      	pop	{r4, r7, pc}

080028b2 <ILI9341_Draw_Hollow_Rectangle_Coord>:

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 80028b2:	b590      	push	{r4, r7, lr}
 80028b4:	b087      	sub	sp, #28
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	4604      	mov	r4, r0
 80028ba:	4608      	mov	r0, r1
 80028bc:	4611      	mov	r1, r2
 80028be:	461a      	mov	r2, r3
 80028c0:	4623      	mov	r3, r4
 80028c2:	80fb      	strh	r3, [r7, #6]
 80028c4:	4603      	mov	r3, r0
 80028c6:	80bb      	strh	r3, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	807b      	strh	r3, [r7, #2]
 80028cc:	4613      	mov	r3, r2
 80028ce:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 80028d4:	2300      	movs	r3, #0
 80028d6:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 80028e6:	887a      	ldrh	r2, [r7, #2]
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	ee07 3a90 	vmov	s15, r3
 80028f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028f4:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 80028f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80028fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002904:	d501      	bpl.n	800290a <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 8002906:	2301      	movs	r3, #1
 8002908:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 8002910:	883a      	ldrh	r2, [r7, #0]
 8002912:	88bb      	ldrh	r3, [r7, #4]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	ee07 3a90 	vmov	s15, r3
 800291a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800291e:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 8002922:	edd7 7a03 	vldr	s15, [r7, #12]
 8002926:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800292a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800292e:	d501      	bpl.n	8002934 <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 8002930:	2301      	movs	r3, #1
 8002932:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8002934:	7cfb      	ldrb	r3, [r7, #19]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d104      	bne.n	8002944 <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;		
 800293a:	887a      	ldrh	r2, [r7, #2]
 800293c:	88fb      	ldrh	r3, [r7, #6]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	82fb      	strh	r3, [r7, #22]
 8002942:	e003      	b.n	800294c <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;		
 8002944:	88fa      	ldrh	r2, [r7, #6]
 8002946:	887b      	ldrh	r3, [r7, #2]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 800294c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800294e:	8afa      	ldrh	r2, [r7, #22]
 8002950:	88b9      	ldrh	r1, [r7, #4]
 8002952:	88f8      	ldrh	r0, [r7, #6]
 8002954:	f000 ff14 	bl	8003780 <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8002958:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800295a:	8afa      	ldrh	r2, [r7, #22]
 800295c:	8839      	ldrh	r1, [r7, #0]
 800295e:	88f8      	ldrh	r0, [r7, #6]
 8002960:	f000 ff0e 	bl	8003780 <ILI9341_Draw_Horizontal_Line>
	
	
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8002964:	7cbb      	ldrb	r3, [r7, #18]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d104      	bne.n	8002974 <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;		
 800296a:	883a      	ldrh	r2, [r7, #0]
 800296c:	88bb      	ldrh	r3, [r7, #4]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	82bb      	strh	r3, [r7, #20]
 8002972:	e003      	b.n	800297c <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;		
 8002974:	88ba      	ldrh	r2, [r7, #4]
 8002976:	883b      	ldrh	r3, [r7, #0]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 800297c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800297e:	8aba      	ldrh	r2, [r7, #20]
 8002980:	88b9      	ldrh	r1, [r7, #4]
 8002982:	88f8      	ldrh	r0, [r7, #6]
 8002984:	f000 ff40 	bl	8003808 <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 8002988:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800298a:	8aba      	ldrh	r2, [r7, #20]
 800298c:	88b9      	ldrh	r1, [r7, #4]
 800298e:	8878      	ldrh	r0, [r7, #2]
 8002990:	f000 ff3a 	bl	8003808 <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 8002994:	8afb      	ldrh	r3, [r7, #22]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d102      	bne.n	80029a0 <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 800299a:	8abb      	ldrh	r3, [r7, #20]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 80029a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80029a2:	8839      	ldrh	r1, [r7, #0]
 80029a4:	887b      	ldrh	r3, [r7, #2]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 fdb4 	bl	8003514 <ILI9341_Draw_Pixel>
	}
	
}
 80029ac:	bf00      	nop
 80029ae:	371c      	adds	r7, #28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd90      	pop	{r4, r7, pc}

080029b4 <ILI9341_Draw_Filled_Rectangle_Coord>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b089      	sub	sp, #36	; 0x24
 80029b8:	af02      	add	r7, sp, #8
 80029ba:	4604      	mov	r4, r0
 80029bc:	4608      	mov	r0, r1
 80029be:	4611      	mov	r1, r2
 80029c0:	461a      	mov	r2, r3
 80029c2:	4623      	mov	r3, r4
 80029c4:	80fb      	strh	r3, [r7, #6]
 80029c6:	4603      	mov	r3, r0
 80029c8:	80bb      	strh	r3, [r7, #4]
 80029ca:	460b      	mov	r3, r1
 80029cc:	807b      	strh	r3, [r7, #2]
 80029ce:	4613      	mov	r3, r2
 80029d0:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 80029e6:	2300      	movs	r3, #0
 80029e8:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 80029ee:	887a      	ldrh	r2, [r7, #2]
 80029f0:	88fb      	ldrh	r3, [r7, #6]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	da01      	bge.n	8002a00 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 80029fc:	2301      	movs	r3, #1
 80029fe:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 8002a04:	883a      	ldrh	r2, [r7, #0]
 8002a06:	88bb      	ldrh	r3, [r7, #4]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	da01      	bge.n	8002a16 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8002a12:	2301      	movs	r3, #1
 8002a14:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8002a16:	7cfb      	ldrb	r3, [r7, #19]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d106      	bne.n	8002a2a <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8002a1c:	887a      	ldrh	r2, [r7, #2]
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8002a24:	88fb      	ldrh	r3, [r7, #6]
 8002a26:	823b      	strh	r3, [r7, #16]
 8002a28:	e005      	b.n	8002a36 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8002a2a:	88fa      	ldrh	r2, [r7, #6]
 8002a2c:	887b      	ldrh	r3, [r7, #2]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8002a32:	887b      	ldrh	r3, [r7, #2]
 8002a34:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8002a36:	7cbb      	ldrb	r3, [r7, #18]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d106      	bne.n	8002a4a <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 8002a3c:	883a      	ldrh	r2, [r7, #0]
 8002a3e:	88bb      	ldrh	r3, [r7, #4]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 8002a44:	88bb      	ldrh	r3, [r7, #4]
 8002a46:	81fb      	strh	r3, [r7, #14]
 8002a48:	e005      	b.n	8002a56 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8002a4a:	88ba      	ldrh	r2, [r7, #4]
 8002a4c:	883b      	ldrh	r3, [r7, #0]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 8002a52:	883b      	ldrh	r3, [r7, #0]
 8002a54:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 8002a56:	8abc      	ldrh	r4, [r7, #20]
 8002a58:	8afa      	ldrh	r2, [r7, #22]
 8002a5a:	89f9      	ldrh	r1, [r7, #14]
 8002a5c:	8a38      	ldrh	r0, [r7, #16]
 8002a5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	4623      	mov	r3, r4
 8002a64:	f000 fe30 	bl	80036c8 <ILI9341_Draw_Rectangle>
}
 8002a68:	bf00      	nop
 8002a6a:	371c      	adds	r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd90      	pop	{r4, r7, pc}

08002a70 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b089      	sub	sp, #36	; 0x24
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	4604      	mov	r4, r0
 8002a78:	4608      	mov	r0, r1
 8002a7a:	4611      	mov	r1, r2
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4623      	mov	r3, r4
 8002a80:	71fb      	strb	r3, [r7, #7]
 8002a82:	4603      	mov	r3, r0
 8002a84:	71bb      	strb	r3, [r7, #6]
 8002a86:	460b      	mov	r3, r1
 8002a88:	717b      	strb	r3, [r7, #5]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
		uint8_t 	i,j;
		
		function_char = Character;
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8002a92:	7dfb      	ldrb	r3, [r7, #23]
 8002a94:	2b1f      	cmp	r3, #31
 8002a96:	d802      	bhi.n	8002a9e <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	71fb      	strb	r3, [r7, #7]
 8002a9c:	e002      	b.n	8002aa4 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8002a9e:	7dfb      	ldrb	r3, [r7, #23]
 8002aa0:	3b20      	subs	r3, #32
 8002aa2:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	753b      	strb	r3, [r7, #20]
 8002aa8:	e012      	b.n	8002ad0 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8002aaa:	7dfa      	ldrb	r2, [r7, #23]
 8002aac:	7d38      	ldrb	r0, [r7, #20]
 8002aae:	7d39      	ldrb	r1, [r7, #20]
 8002ab0:	4c3c      	ldr	r4, [pc, #240]	; (8002ba4 <ILI9341_Draw_Char+0x134>)
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4413      	add	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4423      	add	r3, r4
 8002abc:	4403      	add	r3, r0
 8002abe:	781a      	ldrb	r2, [r3, #0]
 8002ac0:	f107 0318 	add.w	r3, r7, #24
 8002ac4:	440b      	add	r3, r1
 8002ac6:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8002aca:	7d3b      	ldrb	r3, [r7, #20]
 8002acc:	3301      	adds	r3, #1
 8002ace:	753b      	strb	r3, [r7, #20]
 8002ad0:	7d3b      	ldrb	r3, [r7, #20]
 8002ad2:	2b05      	cmp	r3, #5
 8002ad4:	d9e9      	bls.n	8002aaa <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8002ad6:	79bb      	ldrb	r3, [r7, #6]
 8002ad8:	b298      	uxth	r0, r3
 8002ada:	797b      	ldrb	r3, [r7, #5]
 8002adc:	b299      	uxth	r1, r3
 8002ade:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	0052      	lsls	r2, r2, #1
 8002ae4:	4413      	add	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	b29c      	uxth	r4, r3
 8002af0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	4623      	mov	r3, r4
 8002af6:	f000 fde7 	bl	80036c8 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8002afa:	2300      	movs	r3, #0
 8002afc:	757b      	strb	r3, [r7, #21]
 8002afe:	e048      	b.n	8002b92 <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002b00:	2300      	movs	r3, #0
 8002b02:	75bb      	strb	r3, [r7, #22]
 8002b04:	e03f      	b.n	8002b86 <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 8002b06:	7d7b      	ldrb	r3, [r7, #21]
 8002b08:	f107 0218 	add.w	r2, r7, #24
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002b12:	461a      	mov	r2, r3
 8002b14:	7dbb      	ldrb	r3, [r7, #22]
 8002b16:	fa42 f303 	asr.w	r3, r2, r3
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d02e      	beq.n	8002b80 <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 8002b22:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d110      	bne.n	8002b4a <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8002b28:	79bb      	ldrb	r3, [r7, #6]
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	7d7b      	ldrb	r3, [r7, #21]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	b298      	uxth	r0, r3
 8002b34:	797b      	ldrb	r3, [r7, #5]
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	7dbb      	ldrb	r3, [r7, #22]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	4413      	add	r3, r2
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	887a      	ldrh	r2, [r7, #2]
 8002b42:	4619      	mov	r1, r3
 8002b44:	f000 fce6 	bl	8003514 <ILI9341_Draw_Pixel>
 8002b48:	e01a      	b.n	8002b80 <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8002b4a:	79bb      	ldrb	r3, [r7, #6]
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	7d7b      	ldrb	r3, [r7, #21]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002b54:	fb11 f303 	smulbb	r3, r1, r3
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	b298      	uxth	r0, r3
 8002b5e:	797b      	ldrb	r3, [r7, #5]
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	7dbb      	ldrb	r3, [r7, #22]
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002b68:	fb11 f303 	smulbb	r3, r1, r3
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	b299      	uxth	r1, r3
 8002b72:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8002b74:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002b76:	887b      	ldrh	r3, [r7, #2]
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	4623      	mov	r3, r4
 8002b7c:	f000 fda4 	bl	80036c8 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002b80:	7dbb      	ldrb	r3, [r7, #22]
 8002b82:	3301      	adds	r3, #1
 8002b84:	75bb      	strb	r3, [r7, #22]
 8002b86:	7dbb      	ldrb	r3, [r7, #22]
 8002b88:	2b07      	cmp	r3, #7
 8002b8a:	d9bc      	bls.n	8002b06 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8002b8c:	7d7b      	ldrb	r3, [r7, #21]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	757b      	strb	r3, [r7, #21]
 8002b92:	7d7b      	ldrb	r3, [r7, #21]
 8002b94:	2b05      	cmp	r3, #5
 8002b96:	d9b3      	bls.n	8002b00 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8002b98:	bf00      	nop
 8002b9a:	bf00      	nop
 8002b9c:	371c      	adds	r7, #28
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd90      	pop	{r4, r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	0802e368 	.word	0x0802e368

08002ba8 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8002ba8:	b590      	push	{r4, r7, lr}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	4608      	mov	r0, r1
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	70fb      	strb	r3, [r7, #3]
 8002bba:	460b      	mov	r3, r1
 8002bbc:	70bb      	strb	r3, [r7, #2]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8002bc2:	e017      	b.n	8002bf4 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	607a      	str	r2, [r7, #4]
 8002bca:	7818      	ldrb	r0, [r3, #0]
 8002bcc:	883c      	ldrh	r4, [r7, #0]
 8002bce:	78ba      	ldrb	r2, [r7, #2]
 8002bd0:	78f9      	ldrb	r1, [r7, #3]
 8002bd2:	8bbb      	ldrh	r3, [r7, #28]
 8002bd4:	9301      	str	r3, [sp, #4]
 8002bd6:	8b3b      	ldrh	r3, [r7, #24]
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	4623      	mov	r3, r4
 8002bdc:	f7ff ff48 	bl	8002a70 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8002be0:	8b3b      	ldrh	r3, [r7, #24]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	0052      	lsls	r2, r2, #1
 8002be8:	4413      	add	r3, r2
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1e3      	bne.n	8002bc4 <ILI9341_Draw_Text+0x1c>
    }
}
 8002bfc:	bf00      	nop
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd90      	pop	{r4, r7, pc}
	...

08002c08 <ILI9341_Draw_Image>:

/*Draws a full screen picture from flash. Image converted from RGB .jpeg/other to C array using online converter*/
//USING CONVERTER: http://www.digole.com/tools/PicturetoC_Hex_converter.php
//65K colour (2Bytes / Pixel)
void ILI9341_Draw_Image(const char* Image_Array, uint8_t Orientation)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	1d3b      	adds	r3, r7, #4
 8002c12:	6018      	str	r0, [r3, #0]
 8002c14:	460a      	mov	r2, r1
 8002c16:	1cfb      	adds	r3, r7, #3
 8002c18:	701a      	strb	r2, [r3, #0]
	if(Orientation == SCREEN_HORIZONTAL_1)
 8002c1a:	1cfb      	adds	r3, r7, #3
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d159      	bne.n	8002cd6 <ILI9341_Draw_Image+0xce>
	{
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8002c22:	2001      	movs	r0, #1
 8002c24:	f000 fa4a 	bl	80030bc <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8002c28:	23f0      	movs	r3, #240	; 0xf0
 8002c2a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c2e:	2100      	movs	r1, #0
 8002c30:	2000      	movs	r0, #0
 8002c32:	f000 f9d9 	bl	8002fe8 <ILI9341_Set_Address>
			
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002c36:	2201      	movs	r2, #1
 8002c38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c3c:	48b5      	ldr	r0, [pc, #724]	; (8002f14 <ILI9341_Draw_Image+0x30c>)
 8002c3e:	f001 fab1 	bl	80041a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002c42:	2200      	movs	r2, #0
 8002c44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c48:	48b2      	ldr	r0, [pc, #712]	; (8002f14 <ILI9341_Draw_Image+0x30c>)
 8002c4a:	f001 faab 	bl	80041a4 <HAL_GPIO_WritePin>
		
		unsigned char Temp_small_buffer[BURST_MAX_SIZE];
		uint32_t counter = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002c54:	2300      	movs	r3, #0
 8002c56:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8002c5a:	e030      	b.n	8002cbe <ILI9341_Draw_Image+0xb6>
		{			
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8002c62:	e014      	b.n	8002c8e <ILI9341_Draw_Image+0x86>
				{
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8002c64:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8002c68:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002c6c:	4413      	add	r3, r2
 8002c6e:	1d3a      	adds	r2, r7, #4
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	4413      	add	r3, r2
 8002c74:	7819      	ldrb	r1, [r3, #0]
 8002c76:	f107 020c 	add.w	r2, r7, #12
 8002c7a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002c7e:	4413      	add	r3, r2
 8002c80:	460a      	mov	r2, r1
 8002c82:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002c84:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002c88:	3301      	adds	r3, #1
 8002c8a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8002c8e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002c92:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c96:	d3e5      	bcc.n	8002c64 <ILI9341_Draw_Image+0x5c>
				}						
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002c98:	f107 010c 	add.w	r1, r7, #12
 8002c9c:	230a      	movs	r3, #10
 8002c9e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002ca2:	489d      	ldr	r0, [pc, #628]	; (8002f18 <ILI9341_Draw_Image+0x310>)
 8002ca4:	f001 fffe 	bl	8004ca4 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8002ca8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8002cac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002cb0:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002cb4:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002cb8:	3301      	adds	r3, #1
 8002cba:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8002cbe:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002cc2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8002cc6:	d9c9      	bls.n	8002c5c <ILI9341_Draw_Image+0x54>
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002cce:	4891      	ldr	r0, [pc, #580]	; (8002f14 <ILI9341_Draw_Image+0x30c>)
 8002cd0:	f001 fa68 	bl	80041a4 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
				counter += BURST_MAX_SIZE;			
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
	}
}
 8002cd4:	e118      	b.n	8002f08 <ILI9341_Draw_Image+0x300>
	else if(Orientation == SCREEN_HORIZONTAL_2)
 8002cd6:	1cfb      	adds	r3, r7, #3
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d159      	bne.n	8002d92 <ILI9341_Draw_Image+0x18a>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8002cde:	2003      	movs	r0, #3
 8002ce0:	f000 f9ec 	bl	80030bc <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8002ce4:	23f0      	movs	r3, #240	; 0xf0
 8002ce6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002cea:	2100      	movs	r1, #0
 8002cec:	2000      	movs	r0, #0
 8002cee:	f000 f97b 	bl	8002fe8 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cf8:	4886      	ldr	r0, [pc, #536]	; (8002f14 <ILI9341_Draw_Image+0x30c>)
 8002cfa:	f001 fa53 	bl	80041a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d04:	4883      	ldr	r0, [pc, #524]	; (8002f14 <ILI9341_Draw_Image+0x30c>)
 8002d06:	f001 fa4d 	bl	80041a4 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002d10:	2300      	movs	r3, #0
 8002d12:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8002d16:	e030      	b.n	8002d7a <ILI9341_Draw_Image+0x172>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8002d1e:	e014      	b.n	8002d4a <ILI9341_Draw_Image+0x142>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8002d20:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8002d24:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002d28:	4413      	add	r3, r2
 8002d2a:	1d3a      	adds	r2, r7, #4
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	4413      	add	r3, r2
 8002d30:	7819      	ldrb	r1, [r3, #0]
 8002d32:	f107 020c 	add.w	r2, r7, #12
 8002d36:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002d3a:	4413      	add	r3, r2
 8002d3c:	460a      	mov	r2, r1
 8002d3e:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002d40:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002d44:	3301      	adds	r3, #1
 8002d46:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8002d4a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002d4e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d52:	d3e5      	bcc.n	8002d20 <ILI9341_Draw_Image+0x118>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002d54:	f107 010c 	add.w	r1, r7, #12
 8002d58:	230a      	movs	r3, #10
 8002d5a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002d5e:	486e      	ldr	r0, [pc, #440]	; (8002f18 <ILI9341_Draw_Image+0x310>)
 8002d60:	f001 ffa0 	bl	8004ca4 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8002d64:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002d68:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002d6c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002d70:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002d74:	3301      	adds	r3, #1
 8002d76:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8002d7a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002d7e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8002d82:	d9c9      	bls.n	8002d18 <ILI9341_Draw_Image+0x110>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002d84:	2201      	movs	r2, #1
 8002d86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d8a:	4862      	ldr	r0, [pc, #392]	; (8002f14 <ILI9341_Draw_Image+0x30c>)
 8002d8c:	f001 fa0a 	bl	80041a4 <HAL_GPIO_WritePin>
}
 8002d90:	e0ba      	b.n	8002f08 <ILI9341_Draw_Image+0x300>
	else if(Orientation == SCREEN_VERTICAL_2)
 8002d92:	1cfb      	adds	r3, r7, #3
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d159      	bne.n	8002e4e <ILI9341_Draw_Image+0x246>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_2);
 8002d9a:	2002      	movs	r0, #2
 8002d9c:	f000 f98e 	bl	80030bc <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8002da0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002da4:	22f0      	movs	r2, #240	; 0xf0
 8002da6:	2100      	movs	r1, #0
 8002da8:	2000      	movs	r0, #0
 8002daa:	f000 f91d 	bl	8002fe8 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002dae:	2201      	movs	r2, #1
 8002db0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002db4:	4857      	ldr	r0, [pc, #348]	; (8002f14 <ILI9341_Draw_Image+0x30c>)
 8002db6:	f001 f9f5 	bl	80041a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dc0:	4854      	ldr	r0, [pc, #336]	; (8002f14 <ILI9341_Draw_Image+0x30c>)
 8002dc2:	f001 f9ef 	bl	80041a4 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002dd2:	e030      	b.n	8002e36 <ILI9341_Draw_Image+0x22e>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002dda:	e014      	b.n	8002e06 <ILI9341_Draw_Image+0x1fe>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8002ddc:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8002de0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002de4:	4413      	add	r3, r2
 8002de6:	1d3a      	adds	r2, r7, #4
 8002de8:	6812      	ldr	r2, [r2, #0]
 8002dea:	4413      	add	r3, r2
 8002dec:	7819      	ldrb	r1, [r3, #0]
 8002dee:	f107 020c 	add.w	r2, r7, #12
 8002df2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002df6:	4413      	add	r3, r2
 8002df8:	460a      	mov	r2, r1
 8002dfa:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002dfc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002e00:	3301      	adds	r3, #1
 8002e02:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002e06:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002e0a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e0e:	d3e5      	bcc.n	8002ddc <ILI9341_Draw_Image+0x1d4>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002e10:	f107 010c 	add.w	r1, r7, #12
 8002e14:	230a      	movs	r3, #10
 8002e16:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002e1a:	483f      	ldr	r0, [pc, #252]	; (8002f18 <ILI9341_Draw_Image+0x310>)
 8002e1c:	f001 ff42 	bl	8004ca4 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8002e20:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002e24:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002e28:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002e2c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002e30:	3301      	adds	r3, #1
 8002e32:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002e36:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002e3a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8002e3e:	d9c9      	bls.n	8002dd4 <ILI9341_Draw_Image+0x1cc>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002e40:	2201      	movs	r2, #1
 8002e42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e46:	4833      	ldr	r0, [pc, #204]	; (8002f14 <ILI9341_Draw_Image+0x30c>)
 8002e48:	f001 f9ac 	bl	80041a4 <HAL_GPIO_WritePin>
}
 8002e4c:	e05c      	b.n	8002f08 <ILI9341_Draw_Image+0x300>
	else if(Orientation == SCREEN_VERTICAL_1)
 8002e4e:	1cfb      	adds	r3, r7, #3
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d158      	bne.n	8002f08 <ILI9341_Draw_Image+0x300>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002e56:	2000      	movs	r0, #0
 8002e58:	f000 f930 	bl	80030bc <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8002e5c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002e60:	22f0      	movs	r2, #240	; 0xf0
 8002e62:	2100      	movs	r1, #0
 8002e64:	2000      	movs	r0, #0
 8002e66:	f000 f8bf 	bl	8002fe8 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e70:	4828      	ldr	r0, [pc, #160]	; (8002f14 <ILI9341_Draw_Image+0x30c>)
 8002e72:	f001 f997 	bl	80041a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002e76:	2200      	movs	r2, #0
 8002e78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e7c:	4825      	ldr	r0, [pc, #148]	; (8002f14 <ILI9341_Draw_Image+0x30c>)
 8002e7e:	f001 f991 	bl	80041a4 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8002e8e:	e030      	b.n	8002ef2 <ILI9341_Draw_Image+0x2ea>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002e90:	2300      	movs	r3, #0
 8002e92:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8002e96:	e014      	b.n	8002ec2 <ILI9341_Draw_Image+0x2ba>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8002e98:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8002e9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ea0:	4413      	add	r3, r2
 8002ea2:	1d3a      	adds	r2, r7, #4
 8002ea4:	6812      	ldr	r2, [r2, #0]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	7819      	ldrb	r1, [r3, #0]
 8002eaa:	f107 020c 	add.w	r2, r7, #12
 8002eae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002eb2:	4413      	add	r3, r2
 8002eb4:	460a      	mov	r2, r1
 8002eb6:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002eb8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8002ec2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ec6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002eca:	d3e5      	bcc.n	8002e98 <ILI9341_Draw_Image+0x290>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002ecc:	f107 010c 	add.w	r1, r7, #12
 8002ed0:	230a      	movs	r3, #10
 8002ed2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002ed6:	4810      	ldr	r0, [pc, #64]	; (8002f18 <ILI9341_Draw_Image+0x310>)
 8002ed8:	f001 fee4 	bl	8004ca4 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8002edc:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002ee0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002ee4:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002ee8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002eec:	3301      	adds	r3, #1
 8002eee:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8002ef2:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002ef6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8002efa:	d9c9      	bls.n	8002e90 <ILI9341_Draw_Image+0x288>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002efc:	2201      	movs	r2, #1
 8002efe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f02:	4804      	ldr	r0, [pc, #16]	; (8002f14 <ILI9341_Draw_Image+0x30c>)
 8002f04:	f001 f94e 	bl	80041a4 <HAL_GPIO_WritePin>
}
 8002f08:	bf00      	nop
 8002f0a:	f507 770c 	add.w	r7, r7, #560	; 0x230
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40020000 	.word	0x40020000
 8002f18:	2000021c 	.word	0x2000021c

08002f1c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
MX_SPI3_Init();																							//SPI INIT
 8002f20:	f7ff f8d4 	bl	80020cc <MX_SPI3_Init>
MX_GPIO_Init();																							//GPIO INIT
 8002f24:	f7fd ffec 	bl	8000f00 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f2e:	4802      	ldr	r0, [pc, #8]	; (8002f38 <ILI9341_SPI_Init+0x1c>)
 8002f30:	f001 f938 	bl	80041a4 <HAL_GPIO_WritePin>
}
 8002f34:	bf00      	nop
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40020000 	.word	0x40020000

08002f3c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8002f46:	1df9      	adds	r1, r7, #7
 8002f48:	2301      	movs	r3, #1
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	4803      	ldr	r0, [pc, #12]	; (8002f5c <ILI9341_SPI_Send+0x20>)
 8002f4e:	f001 fea9 	bl	8004ca4 <HAL_SPI_Transmit>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	2000021c 	.word	0x2000021c

08002f60 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f70:	480b      	ldr	r0, [pc, #44]	; (8002fa0 <ILI9341_Write_Command+0x40>)
 8002f72:	f001 f917 	bl	80041a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002f76:	2200      	movs	r2, #0
 8002f78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f7c:	4808      	ldr	r0, [pc, #32]	; (8002fa0 <ILI9341_Write_Command+0x40>)
 8002f7e:	f001 f911 	bl	80041a4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff ffd9 	bl	8002f3c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f90:	4803      	ldr	r0, [pc, #12]	; (8002fa0 <ILI9341_Write_Command+0x40>)
 8002f92:	f001 f907 	bl	80041a4 <HAL_GPIO_WritePin>
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40020000 	.word	0x40020000

08002fa4 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fb4:	480b      	ldr	r0, [pc, #44]	; (8002fe4 <ILI9341_Write_Data+0x40>)
 8002fb6:	f001 f8f5 	bl	80041a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fc0:	4808      	ldr	r0, [pc, #32]	; (8002fe4 <ILI9341_Write_Data+0x40>)
 8002fc2:	f001 f8ef 	bl	80041a4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff ffb7 	bl	8002f3c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fd4:	4803      	ldr	r0, [pc, #12]	; (8002fe4 <ILI9341_Write_Data+0x40>)
 8002fd6:	f001 f8e5 	bl	80041a4 <HAL_GPIO_WritePin>
}
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40020000 	.word	0x40020000

08002fe8 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002fe8:	b590      	push	{r4, r7, lr}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	4604      	mov	r4, r0
 8002ff0:	4608      	mov	r0, r1
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4623      	mov	r3, r4
 8002ff8:	80fb      	strh	r3, [r7, #6]
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	80bb      	strh	r3, [r7, #4]
 8002ffe:	460b      	mov	r3, r1
 8003000:	807b      	strh	r3, [r7, #2]
 8003002:	4613      	mov	r3, r2
 8003004:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8003006:	202a      	movs	r0, #42	; 0x2a
 8003008:	f7ff ffaa 	bl	8002f60 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 800300c:	88fb      	ldrh	r3, [r7, #6]
 800300e:	0a1b      	lsrs	r3, r3, #8
 8003010:	b29b      	uxth	r3, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ffc5 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff ffc0 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8003024:	887b      	ldrh	r3, [r7, #2]
 8003026:	0a1b      	lsrs	r3, r3, #8
 8003028:	b29b      	uxth	r3, r3
 800302a:	b2db      	uxtb	r3, r3
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff ffb9 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8003032:	887b      	ldrh	r3, [r7, #2]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff ffb4 	bl	8002fa4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 800303c:	202b      	movs	r0, #43	; 0x2b
 800303e:	f7ff ff8f 	bl	8002f60 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8003042:	88bb      	ldrh	r3, [r7, #4]
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	b29b      	uxth	r3, r3
 8003048:	b2db      	uxtb	r3, r3
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff ffaa 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8003050:	88bb      	ldrh	r3, [r7, #4]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff ffa5 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800305a:	883b      	ldrh	r3, [r7, #0]
 800305c:	0a1b      	lsrs	r3, r3, #8
 800305e:	b29b      	uxth	r3, r3
 8003060:	b2db      	uxtb	r3, r3
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff ff9e 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8003068:	883b      	ldrh	r3, [r7, #0]
 800306a:	b2db      	uxtb	r3, r3
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff99 	bl	8002fa4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8003072:	202c      	movs	r0, #44	; 0x2c
 8003074:	f7ff ff74 	bl	8002f60 <ILI9341_Write_Command>
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	bd90      	pop	{r4, r7, pc}

08003080 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8003084:	2201      	movs	r2, #1
 8003086:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800308a:	480b      	ldr	r0, [pc, #44]	; (80030b8 <ILI9341_Reset+0x38>)
 800308c:	f001 f88a 	bl	80041a4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8003090:	20c8      	movs	r0, #200	; 0xc8
 8003092:	f000 fdb9 	bl	8003c08 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003096:	2200      	movs	r2, #0
 8003098:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800309c:	4806      	ldr	r0, [pc, #24]	; (80030b8 <ILI9341_Reset+0x38>)
 800309e:	f001 f881 	bl	80041a4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80030a2:	20c8      	movs	r0, #200	; 0xc8
 80030a4:	f000 fdb0 	bl	8003c08 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80030a8:	2201      	movs	r2, #1
 80030aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030ae:	4802      	ldr	r0, [pc, #8]	; (80030b8 <ILI9341_Reset+0x38>)
 80030b0:	f001 f878 	bl	80041a4 <HAL_GPIO_WritePin>
}
 80030b4:	bf00      	nop
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40020000 	.word	0x40020000

080030bc <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80030ca:	2036      	movs	r0, #54	; 0x36
 80030cc:	f7ff ff48 	bl	8002f60 <ILI9341_Write_Command>
HAL_Delay(1);
 80030d0:	2001      	movs	r0, #1
 80030d2:	f000 fd99 	bl	8003c08 <HAL_Delay>
	
switch(screen_rotation) 
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	2b03      	cmp	r3, #3
 80030da:	d837      	bhi.n	800314c <ILI9341_Set_Rotation+0x90>
 80030dc:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <ILI9341_Set_Rotation+0x28>)
 80030de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e2:	bf00      	nop
 80030e4:	080030f5 	.word	0x080030f5
 80030e8:	0800310b 	.word	0x0800310b
 80030ec:	08003121 	.word	0x08003121
 80030f0:	08003137 	.word	0x08003137
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80030f4:	2048      	movs	r0, #72	; 0x48
 80030f6:	f7ff ff55 	bl	8002fa4 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80030fa:	4b17      	ldr	r3, [pc, #92]	; (8003158 <ILI9341_Set_Rotation+0x9c>)
 80030fc:	22f0      	movs	r2, #240	; 0xf0
 80030fe:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8003100:	4b16      	ldr	r3, [pc, #88]	; (800315c <ILI9341_Set_Rotation+0xa0>)
 8003102:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003106:	801a      	strh	r2, [r3, #0]
			break;
 8003108:	e021      	b.n	800314e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800310a:	2028      	movs	r0, #40	; 0x28
 800310c:	f7ff ff4a 	bl	8002fa4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8003110:	4b11      	ldr	r3, [pc, #68]	; (8003158 <ILI9341_Set_Rotation+0x9c>)
 8003112:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003116:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8003118:	4b10      	ldr	r3, [pc, #64]	; (800315c <ILI9341_Set_Rotation+0xa0>)
 800311a:	22f0      	movs	r2, #240	; 0xf0
 800311c:	801a      	strh	r2, [r3, #0]
			break;
 800311e:	e016      	b.n	800314e <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8003120:	2088      	movs	r0, #136	; 0x88
 8003122:	f7ff ff3f 	bl	8002fa4 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8003126:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <ILI9341_Set_Rotation+0x9c>)
 8003128:	22f0      	movs	r2, #240	; 0xf0
 800312a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800312c:	4b0b      	ldr	r3, [pc, #44]	; (800315c <ILI9341_Set_Rotation+0xa0>)
 800312e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003132:	801a      	strh	r2, [r3, #0]
			break;
 8003134:	e00b      	b.n	800314e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8003136:	20e8      	movs	r0, #232	; 0xe8
 8003138:	f7ff ff34 	bl	8002fa4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800313c:	4b06      	ldr	r3, [pc, #24]	; (8003158 <ILI9341_Set_Rotation+0x9c>)
 800313e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003142:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8003144:	4b05      	ldr	r3, [pc, #20]	; (800315c <ILI9341_Set_Rotation+0xa0>)
 8003146:	22f0      	movs	r2, #240	; 0xf0
 8003148:	801a      	strh	r2, [r3, #0]
			break;
 800314a:	e000      	b.n	800314e <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800314c:	bf00      	nop
	}
}
 800314e:	bf00      	nop
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20000006 	.word	0x20000006
 800315c:	20000004 	.word	0x20000004

08003160 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8003164:	2201      	movs	r2, #1
 8003166:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800316a:	4802      	ldr	r0, [pc, #8]	; (8003174 <ILI9341_Enable+0x14>)
 800316c:	f001 f81a 	bl	80041a4 <HAL_GPIO_WritePin>
}
 8003170:	bf00      	nop
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40020000 	.word	0x40020000

08003178 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0

ILI9341_Enable();
 800317c:	f7ff fff0 	bl	8003160 <ILI9341_Enable>
ILI9341_SPI_Init();
 8003180:	f7ff fecc 	bl	8002f1c <ILI9341_SPI_Init>
ILI9341_Reset();
 8003184:	f7ff ff7c 	bl	8003080 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8003188:	2001      	movs	r0, #1
 800318a:	f7ff fee9 	bl	8002f60 <ILI9341_Write_Command>
HAL_Delay(1000);
 800318e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003192:	f000 fd39 	bl	8003c08 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8003196:	20cb      	movs	r0, #203	; 0xcb
 8003198:	f7ff fee2 	bl	8002f60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 800319c:	2039      	movs	r0, #57	; 0x39
 800319e:	f7ff ff01 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80031a2:	202c      	movs	r0, #44	; 0x2c
 80031a4:	f7ff fefe 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80031a8:	2000      	movs	r0, #0
 80031aa:	f7ff fefb 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80031ae:	2034      	movs	r0, #52	; 0x34
 80031b0:	f7ff fef8 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80031b4:	2002      	movs	r0, #2
 80031b6:	f7ff fef5 	bl	8002fa4 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80031ba:	20cf      	movs	r0, #207	; 0xcf
 80031bc:	f7ff fed0 	bl	8002f60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80031c0:	2000      	movs	r0, #0
 80031c2:	f7ff feef 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80031c6:	20c1      	movs	r0, #193	; 0xc1
 80031c8:	f7ff feec 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80031cc:	2030      	movs	r0, #48	; 0x30
 80031ce:	f7ff fee9 	bl	8002fa4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80031d2:	20e8      	movs	r0, #232	; 0xe8
 80031d4:	f7ff fec4 	bl	8002f60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80031d8:	2085      	movs	r0, #133	; 0x85
 80031da:	f7ff fee3 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80031de:	2000      	movs	r0, #0
 80031e0:	f7ff fee0 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80031e4:	2078      	movs	r0, #120	; 0x78
 80031e6:	f7ff fedd 	bl	8002fa4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80031ea:	20ea      	movs	r0, #234	; 0xea
 80031ec:	f7ff feb8 	bl	8002f60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80031f0:	2000      	movs	r0, #0
 80031f2:	f7ff fed7 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80031f6:	2000      	movs	r0, #0
 80031f8:	f7ff fed4 	bl	8002fa4 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80031fc:	20ed      	movs	r0, #237	; 0xed
 80031fe:	f7ff feaf 	bl	8002f60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8003202:	2064      	movs	r0, #100	; 0x64
 8003204:	f7ff fece 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8003208:	2003      	movs	r0, #3
 800320a:	f7ff fecb 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800320e:	2012      	movs	r0, #18
 8003210:	f7ff fec8 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8003214:	2081      	movs	r0, #129	; 0x81
 8003216:	f7ff fec5 	bl	8002fa4 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800321a:	20f7      	movs	r0, #247	; 0xf7
 800321c:	f7ff fea0 	bl	8002f60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8003220:	2020      	movs	r0, #32
 8003222:	f7ff febf 	bl	8002fa4 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8003226:	20c0      	movs	r0, #192	; 0xc0
 8003228:	f7ff fe9a 	bl	8002f60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 800322c:	2023      	movs	r0, #35	; 0x23
 800322e:	f7ff feb9 	bl	8002fa4 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8003232:	20c1      	movs	r0, #193	; 0xc1
 8003234:	f7ff fe94 	bl	8002f60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8003238:	2010      	movs	r0, #16
 800323a:	f7ff feb3 	bl	8002fa4 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800323e:	20c5      	movs	r0, #197	; 0xc5
 8003240:	f7ff fe8e 	bl	8002f60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8003244:	203e      	movs	r0, #62	; 0x3e
 8003246:	f7ff fead 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800324a:	2028      	movs	r0, #40	; 0x28
 800324c:	f7ff feaa 	bl	8002fa4 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8003250:	20c7      	movs	r0, #199	; 0xc7
 8003252:	f7ff fe85 	bl	8002f60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8003256:	2086      	movs	r0, #134	; 0x86
 8003258:	f7ff fea4 	bl	8002fa4 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 800325c:	2036      	movs	r0, #54	; 0x36
 800325e:	f7ff fe7f 	bl	8002f60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8003262:	2048      	movs	r0, #72	; 0x48
 8003264:	f7ff fe9e 	bl	8002fa4 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8003268:	203a      	movs	r0, #58	; 0x3a
 800326a:	f7ff fe79 	bl	8002f60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800326e:	2055      	movs	r0, #85	; 0x55
 8003270:	f7ff fe98 	bl	8002fa4 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8003274:	20b1      	movs	r0, #177	; 0xb1
 8003276:	f7ff fe73 	bl	8002f60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800327a:	2000      	movs	r0, #0
 800327c:	f7ff fe92 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8003280:	2018      	movs	r0, #24
 8003282:	f7ff fe8f 	bl	8002fa4 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8003286:	20b6      	movs	r0, #182	; 0xb6
 8003288:	f7ff fe6a 	bl	8002f60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 800328c:	2008      	movs	r0, #8
 800328e:	f7ff fe89 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8003292:	2082      	movs	r0, #130	; 0x82
 8003294:	f7ff fe86 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8003298:	2027      	movs	r0, #39	; 0x27
 800329a:	f7ff fe83 	bl	8002fa4 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 800329e:	20f2      	movs	r0, #242	; 0xf2
 80032a0:	f7ff fe5e 	bl	8002f60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80032a4:	2000      	movs	r0, #0
 80032a6:	f7ff fe7d 	bl	8002fa4 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80032aa:	2026      	movs	r0, #38	; 0x26
 80032ac:	f7ff fe58 	bl	8002f60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80032b0:	2001      	movs	r0, #1
 80032b2:	f7ff fe77 	bl	8002fa4 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80032b6:	20e0      	movs	r0, #224	; 0xe0
 80032b8:	f7ff fe52 	bl	8002f60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80032bc:	200f      	movs	r0, #15
 80032be:	f7ff fe71 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80032c2:	2031      	movs	r0, #49	; 0x31
 80032c4:	f7ff fe6e 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80032c8:	202b      	movs	r0, #43	; 0x2b
 80032ca:	f7ff fe6b 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80032ce:	200c      	movs	r0, #12
 80032d0:	f7ff fe68 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80032d4:	200e      	movs	r0, #14
 80032d6:	f7ff fe65 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80032da:	2008      	movs	r0, #8
 80032dc:	f7ff fe62 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80032e0:	204e      	movs	r0, #78	; 0x4e
 80032e2:	f7ff fe5f 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80032e6:	20f1      	movs	r0, #241	; 0xf1
 80032e8:	f7ff fe5c 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80032ec:	2037      	movs	r0, #55	; 0x37
 80032ee:	f7ff fe59 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80032f2:	2007      	movs	r0, #7
 80032f4:	f7ff fe56 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80032f8:	2010      	movs	r0, #16
 80032fa:	f7ff fe53 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80032fe:	2003      	movs	r0, #3
 8003300:	f7ff fe50 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8003304:	200e      	movs	r0, #14
 8003306:	f7ff fe4d 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800330a:	2009      	movs	r0, #9
 800330c:	f7ff fe4a 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8003310:	2000      	movs	r0, #0
 8003312:	f7ff fe47 	bl	8002fa4 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8003316:	20e1      	movs	r0, #225	; 0xe1
 8003318:	f7ff fe22 	bl	8002f60 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800331c:	2000      	movs	r0, #0
 800331e:	f7ff fe41 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8003322:	200e      	movs	r0, #14
 8003324:	f7ff fe3e 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8003328:	2014      	movs	r0, #20
 800332a:	f7ff fe3b 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800332e:	2003      	movs	r0, #3
 8003330:	f7ff fe38 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8003334:	2011      	movs	r0, #17
 8003336:	f7ff fe35 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800333a:	2007      	movs	r0, #7
 800333c:	f7ff fe32 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8003340:	2031      	movs	r0, #49	; 0x31
 8003342:	f7ff fe2f 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8003346:	20c1      	movs	r0, #193	; 0xc1
 8003348:	f7ff fe2c 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 800334c:	2048      	movs	r0, #72	; 0x48
 800334e:	f7ff fe29 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8003352:	2008      	movs	r0, #8
 8003354:	f7ff fe26 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8003358:	200f      	movs	r0, #15
 800335a:	f7ff fe23 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800335e:	200c      	movs	r0, #12
 8003360:	f7ff fe20 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8003364:	2031      	movs	r0, #49	; 0x31
 8003366:	f7ff fe1d 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800336a:	2036      	movs	r0, #54	; 0x36
 800336c:	f7ff fe1a 	bl	8002fa4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8003370:	200f      	movs	r0, #15
 8003372:	f7ff fe17 	bl	8002fa4 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8003376:	2011      	movs	r0, #17
 8003378:	f7ff fdf2 	bl	8002f60 <ILI9341_Write_Command>
HAL_Delay(120);
 800337c:	2078      	movs	r0, #120	; 0x78
 800337e:	f000 fc43 	bl	8003c08 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8003382:	2029      	movs	r0, #41	; 0x29
 8003384:	f7ff fdec 	bl	8002f60 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8003388:	2000      	movs	r0, #0
 800338a:	f7ff fe97 	bl	80030bc <ILI9341_Set_Rotation>
}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
	...

08003394 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8003394:	b5b0      	push	{r4, r5, r7, lr}
 8003396:	b08c      	sub	sp, #48	; 0x30
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	6039      	str	r1, [r7, #0]
 800339e:	80fb      	strh	r3, [r7, #6]
 80033a0:	466b      	mov	r3, sp
 80033a2:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80033b0:	d202      	bcs.n	80033b8 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
 80033b6:	e002      	b.n	80033be <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80033b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80033be:	2201      	movs	r2, #1
 80033c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033c4:	483e      	ldr	r0, [pc, #248]	; (80034c0 <ILI9341_Draw_Colour_Burst+0x12c>)
 80033c6:	f000 feed 	bl	80041a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80033ca:	2200      	movs	r2, #0
 80033cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033d0:	483b      	ldr	r0, [pc, #236]	; (80034c0 <ILI9341_Draw_Colour_Burst+0x12c>)
 80033d2:	f000 fee7 	bl	80041a4 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80033d6:	88fb      	ldrh	r3, [r7, #6]
 80033d8:	0a1b      	lsrs	r3, r3, #8
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 80033e0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80033e2:	4623      	mov	r3, r4
 80033e4:	3b01      	subs	r3, #1
 80033e6:	61fb      	str	r3, [r7, #28]
 80033e8:	4620      	mov	r0, r4
 80033ea:	f04f 0100 	mov.w	r1, #0
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	00cb      	lsls	r3, r1, #3
 80033f8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80033fc:	00c2      	lsls	r2, r0, #3
 80033fe:	4620      	mov	r0, r4
 8003400:	f04f 0100 	mov.w	r1, #0
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	00cb      	lsls	r3, r1, #3
 800340e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003412:	00c2      	lsls	r2, r0, #3
 8003414:	1de3      	adds	r3, r4, #7
 8003416:	08db      	lsrs	r3, r3, #3
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	ebad 0d03 	sub.w	sp, sp, r3
 800341e:	466b      	mov	r3, sp
 8003420:	3300      	adds	r3, #0
 8003422:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8003424:	2300      	movs	r3, #0
 8003426:	62bb      	str	r3, [r7, #40]	; 0x28
 8003428:	e00e      	b.n	8003448 <ILI9341_Draw_Colour_Burst+0xb4>
	{
		burst_buffer[j] = 	chifted;
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342e:	4413      	add	r3, r2
 8003430:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003434:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	3301      	adds	r3, #1
 800343a:	88fa      	ldrh	r2, [r7, #6]
 800343c:	b2d1      	uxtb	r1, r2
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8003442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003444:	3302      	adds	r3, #2
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
 8003448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	429a      	cmp	r2, r3
 800344e:	d3ec      	bcc.n	800342a <ILI9341_Draw_Colour_Burst+0x96>
	}

uint32_t Sending_Size = Size*2;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	fbb2 f3f3 	udiv	r3, r2, r3
 800345e:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003464:	fbb3 f2f2 	udiv	r2, r3, r2
 8003468:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800346a:	fb01 f202 	mul.w	r2, r1, r2
 800346e:	1a9b      	subs	r3, r3, r2
 8003470:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d010      	beq.n	800349a <ILI9341_Draw_Colour_Burst+0x106>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8003478:	2300      	movs	r3, #0
 800347a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800347c:	e009      	b.n	8003492 <ILI9341_Draw_Colour_Burst+0xfe>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 800347e:	69b9      	ldr	r1, [r7, #24]
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	b29a      	uxth	r2, r3
 8003484:	230a      	movs	r3, #10
 8003486:	480f      	ldr	r0, [pc, #60]	; (80034c4 <ILI9341_Draw_Colour_Burst+0x130>)
 8003488:	f001 fc0c 	bl	8004ca4 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800348c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348e:	3301      	adds	r3, #1
 8003490:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	429a      	cmp	r2, r3
 8003498:	d3f1      	bcc.n	800347e <ILI9341_Draw_Colour_Burst+0xea>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 800349a:	69b9      	ldr	r1, [r7, #24]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	b29a      	uxth	r2, r3
 80034a0:	230a      	movs	r3, #10
 80034a2:	4808      	ldr	r0, [pc, #32]	; (80034c4 <ILI9341_Draw_Colour_Burst+0x130>)
 80034a4:	f001 fbfe 	bl	8004ca4 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80034a8:	2201      	movs	r2, #1
 80034aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034ae:	4804      	ldr	r0, [pc, #16]	; (80034c0 <ILI9341_Draw_Colour_Burst+0x12c>)
 80034b0:	f000 fe78 	bl	80041a4 <HAL_GPIO_WritePin>
 80034b4:	46ad      	mov	sp, r5
}
 80034b6:	bf00      	nop
 80034b8:	3730      	adds	r7, #48	; 0x30
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bdb0      	pop	{r4, r5, r7, pc}
 80034be:	bf00      	nop
 80034c0:	40020000 	.word	0x40020000
 80034c4:	2000021c 	.word	0x2000021c

080034c8 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80034d2:	4b0e      	ldr	r3, [pc, #56]	; (800350c <ILI9341_Fill_Screen+0x44>)
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <ILI9341_Fill_Screen+0x48>)
 80034da:	881b      	ldrh	r3, [r3, #0]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2100      	movs	r1, #0
 80034e0:	2000      	movs	r0, #0
 80034e2:	f7ff fd81 	bl	8002fe8 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80034e6:	4b09      	ldr	r3, [pc, #36]	; (800350c <ILI9341_Fill_Screen+0x44>)
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	461a      	mov	r2, r3
 80034ee:	4b08      	ldr	r3, [pc, #32]	; (8003510 <ILI9341_Fill_Screen+0x48>)
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	fb03 f302 	mul.w	r3, r3, r2
 80034f8:	461a      	mov	r2, r3
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	4611      	mov	r1, r2
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff ff48 	bl	8003394 <ILI9341_Draw_Colour_Burst>
}
 8003504:	bf00      	nop
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20000006 	.word	0x20000006
 8003510:	20000004 	.word	0x20000004

08003514 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	80fb      	strh	r3, [r7, #6]
 800351e:	460b      	mov	r3, r1
 8003520:	80bb      	strh	r3, [r7, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8003526:	4b64      	ldr	r3, [pc, #400]	; (80036b8 <ILI9341_Draw_Pixel+0x1a4>)
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	b29b      	uxth	r3, r3
 800352c:	88fa      	ldrh	r2, [r7, #6]
 800352e:	429a      	cmp	r2, r3
 8003530:	f080 80be 	bcs.w	80036b0 <ILI9341_Draw_Pixel+0x19c>
 8003534:	4b61      	ldr	r3, [pc, #388]	; (80036bc <ILI9341_Draw_Pixel+0x1a8>)
 8003536:	881b      	ldrh	r3, [r3, #0]
 8003538:	b29b      	uxth	r3, r3
 800353a:	88ba      	ldrh	r2, [r7, #4]
 800353c:	429a      	cmp	r2, r3
 800353e:	f080 80b7 	bcs.w	80036b0 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8003542:	2200      	movs	r2, #0
 8003544:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003548:	485d      	ldr	r0, [pc, #372]	; (80036c0 <ILI9341_Draw_Pixel+0x1ac>)
 800354a:	f000 fe2b 	bl	80041a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800354e:	2200      	movs	r2, #0
 8003550:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003554:	485a      	ldr	r0, [pc, #360]	; (80036c0 <ILI9341_Draw_Pixel+0x1ac>)
 8003556:	f000 fe25 	bl	80041a4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 800355a:	202a      	movs	r0, #42	; 0x2a
 800355c:	f7ff fcee 	bl	8002f3c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8003560:	2201      	movs	r2, #1
 8003562:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003566:	4856      	ldr	r0, [pc, #344]	; (80036c0 <ILI9341_Draw_Pixel+0x1ac>)
 8003568:	f000 fe1c 	bl	80041a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800356c:	2201      	movs	r2, #1
 800356e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003572:	4853      	ldr	r0, [pc, #332]	; (80036c0 <ILI9341_Draw_Pixel+0x1ac>)
 8003574:	f000 fe16 	bl	80041a4 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8003578:	2200      	movs	r2, #0
 800357a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800357e:	4850      	ldr	r0, [pc, #320]	; (80036c0 <ILI9341_Draw_Pixel+0x1ac>)
 8003580:	f000 fe10 	bl	80041a4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8003584:	88fb      	ldrh	r3, [r7, #6]
 8003586:	0a1b      	lsrs	r3, r3, #8
 8003588:	b29b      	uxth	r3, r3
 800358a:	b2db      	uxtb	r3, r3
 800358c:	753b      	strb	r3, [r7, #20]
 800358e:	88fb      	ldrh	r3, [r7, #6]
 8003590:	b2db      	uxtb	r3, r3
 8003592:	757b      	strb	r3, [r7, #21]
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	3301      	adds	r3, #1
 8003598:	121b      	asrs	r3, r3, #8
 800359a:	b2db      	uxtb	r3, r3
 800359c:	75bb      	strb	r3, [r7, #22]
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	3301      	adds	r3, #1
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80035a8:	f107 0114 	add.w	r1, r7, #20
 80035ac:	2301      	movs	r3, #1
 80035ae:	2204      	movs	r2, #4
 80035b0:	4844      	ldr	r0, [pc, #272]	; (80036c4 <ILI9341_Draw_Pixel+0x1b0>)
 80035b2:	f001 fb77 	bl	8004ca4 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80035b6:	2201      	movs	r2, #1
 80035b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035bc:	4840      	ldr	r0, [pc, #256]	; (80036c0 <ILI9341_Draw_Pixel+0x1ac>)
 80035be:	f000 fdf1 	bl	80041a4 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80035c2:	2200      	movs	r2, #0
 80035c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035c8:	483d      	ldr	r0, [pc, #244]	; (80036c0 <ILI9341_Draw_Pixel+0x1ac>)
 80035ca:	f000 fdeb 	bl	80041a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80035ce:	2200      	movs	r2, #0
 80035d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035d4:	483a      	ldr	r0, [pc, #232]	; (80036c0 <ILI9341_Draw_Pixel+0x1ac>)
 80035d6:	f000 fde5 	bl	80041a4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80035da:	202b      	movs	r0, #43	; 0x2b
 80035dc:	f7ff fcae 	bl	8002f3c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80035e0:	2201      	movs	r2, #1
 80035e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035e6:	4836      	ldr	r0, [pc, #216]	; (80036c0 <ILI9341_Draw_Pixel+0x1ac>)
 80035e8:	f000 fddc 	bl	80041a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80035ec:	2201      	movs	r2, #1
 80035ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035f2:	4833      	ldr	r0, [pc, #204]	; (80036c0 <ILI9341_Draw_Pixel+0x1ac>)
 80035f4:	f000 fdd6 	bl	80041a4 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80035f8:	2200      	movs	r2, #0
 80035fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035fe:	4830      	ldr	r0, [pc, #192]	; (80036c0 <ILI9341_Draw_Pixel+0x1ac>)
 8003600:	f000 fdd0 	bl	80041a4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8003604:	88bb      	ldrh	r3, [r7, #4]
 8003606:	0a1b      	lsrs	r3, r3, #8
 8003608:	b29b      	uxth	r3, r3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	743b      	strb	r3, [r7, #16]
 800360e:	88bb      	ldrh	r3, [r7, #4]
 8003610:	b2db      	uxtb	r3, r3
 8003612:	747b      	strb	r3, [r7, #17]
 8003614:	88bb      	ldrh	r3, [r7, #4]
 8003616:	3301      	adds	r3, #1
 8003618:	121b      	asrs	r3, r3, #8
 800361a:	b2db      	uxtb	r3, r3
 800361c:	74bb      	strb	r3, [r7, #18]
 800361e:	88bb      	ldrh	r3, [r7, #4]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	3301      	adds	r3, #1
 8003624:	b2db      	uxtb	r3, r3
 8003626:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8003628:	f107 0110 	add.w	r1, r7, #16
 800362c:	2301      	movs	r3, #1
 800362e:	2204      	movs	r2, #4
 8003630:	4824      	ldr	r0, [pc, #144]	; (80036c4 <ILI9341_Draw_Pixel+0x1b0>)
 8003632:	f001 fb37 	bl	8004ca4 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003636:	2201      	movs	r2, #1
 8003638:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800363c:	4820      	ldr	r0, [pc, #128]	; (80036c0 <ILI9341_Draw_Pixel+0x1ac>)
 800363e:	f000 fdb1 	bl	80041a4 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8003642:	2200      	movs	r2, #0
 8003644:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003648:	481d      	ldr	r0, [pc, #116]	; (80036c0 <ILI9341_Draw_Pixel+0x1ac>)
 800364a:	f000 fdab 	bl	80041a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800364e:	2200      	movs	r2, #0
 8003650:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003654:	481a      	ldr	r0, [pc, #104]	; (80036c0 <ILI9341_Draw_Pixel+0x1ac>)
 8003656:	f000 fda5 	bl	80041a4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 800365a:	202c      	movs	r0, #44	; 0x2c
 800365c:	f7ff fc6e 	bl	8002f3c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8003660:	2201      	movs	r2, #1
 8003662:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003666:	4816      	ldr	r0, [pc, #88]	; (80036c0 <ILI9341_Draw_Pixel+0x1ac>)
 8003668:	f000 fd9c 	bl	80041a4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800366c:	2201      	movs	r2, #1
 800366e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003672:	4813      	ldr	r0, [pc, #76]	; (80036c0 <ILI9341_Draw_Pixel+0x1ac>)
 8003674:	f000 fd96 	bl	80041a4 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003678:	2200      	movs	r2, #0
 800367a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800367e:	4810      	ldr	r0, [pc, #64]	; (80036c0 <ILI9341_Draw_Pixel+0x1ac>)
 8003680:	f000 fd90 	bl	80041a4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8003684:	887b      	ldrh	r3, [r7, #2]
 8003686:	0a1b      	lsrs	r3, r3, #8
 8003688:	b29b      	uxth	r3, r3
 800368a:	b2db      	uxtb	r3, r3
 800368c:	733b      	strb	r3, [r7, #12]
 800368e:	887b      	ldrh	r3, [r7, #2]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8003694:	f107 010c 	add.w	r1, r7, #12
 8003698:	2301      	movs	r3, #1
 800369a:	2202      	movs	r2, #2
 800369c:	4809      	ldr	r0, [pc, #36]	; (80036c4 <ILI9341_Draw_Pixel+0x1b0>)
 800369e:	f001 fb01 	bl	8004ca4 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80036a2:	2201      	movs	r2, #1
 80036a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036a8:	4805      	ldr	r0, [pc, #20]	; (80036c0 <ILI9341_Draw_Pixel+0x1ac>)
 80036aa:	f000 fd7b 	bl	80041a4 <HAL_GPIO_WritePin>
 80036ae:	e000      	b.n	80036b2 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80036b0:	bf00      	nop
	
}
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	20000006 	.word	0x20000006
 80036bc:	20000004 	.word	0x20000004
 80036c0:	40020000 	.word	0x40020000
 80036c4:	2000021c 	.word	0x2000021c

080036c8 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 80036c8:	b590      	push	{r4, r7, lr}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4604      	mov	r4, r0
 80036d0:	4608      	mov	r0, r1
 80036d2:	4611      	mov	r1, r2
 80036d4:	461a      	mov	r2, r3
 80036d6:	4623      	mov	r3, r4
 80036d8:	80fb      	strh	r3, [r7, #6]
 80036da:	4603      	mov	r3, r0
 80036dc:	80bb      	strh	r3, [r7, #4]
 80036de:	460b      	mov	r3, r1
 80036e0:	807b      	strh	r3, [r7, #2]
 80036e2:	4613      	mov	r3, r2
 80036e4:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80036e6:	4b24      	ldr	r3, [pc, #144]	; (8003778 <ILI9341_Draw_Rectangle+0xb0>)
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	88fa      	ldrh	r2, [r7, #6]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d23d      	bcs.n	800376e <ILI9341_Draw_Rectangle+0xa6>
 80036f2:	4b22      	ldr	r3, [pc, #136]	; (800377c <ILI9341_Draw_Rectangle+0xb4>)
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	88ba      	ldrh	r2, [r7, #4]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d237      	bcs.n	800376e <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 80036fe:	88fa      	ldrh	r2, [r7, #6]
 8003700:	887b      	ldrh	r3, [r7, #2]
 8003702:	4413      	add	r3, r2
 8003704:	4a1c      	ldr	r2, [pc, #112]	; (8003778 <ILI9341_Draw_Rectangle+0xb0>)
 8003706:	8812      	ldrh	r2, [r2, #0]
 8003708:	b292      	uxth	r2, r2
 800370a:	4293      	cmp	r3, r2
 800370c:	dd05      	ble.n	800371a <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 800370e:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <ILI9341_Draw_Rectangle+0xb0>)
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	b29a      	uxth	r2, r3
 8003714:	88fb      	ldrh	r3, [r7, #6]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 800371a:	88ba      	ldrh	r2, [r7, #4]
 800371c:	883b      	ldrh	r3, [r7, #0]
 800371e:	4413      	add	r3, r2
 8003720:	4a16      	ldr	r2, [pc, #88]	; (800377c <ILI9341_Draw_Rectangle+0xb4>)
 8003722:	8812      	ldrh	r2, [r2, #0]
 8003724:	b292      	uxth	r2, r2
 8003726:	4293      	cmp	r3, r2
 8003728:	dd05      	ble.n	8003736 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 800372a:	4b14      	ldr	r3, [pc, #80]	; (800377c <ILI9341_Draw_Rectangle+0xb4>)
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	b29a      	uxth	r2, r3
 8003730:	88bb      	ldrh	r3, [r7, #4]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8003736:	88fa      	ldrh	r2, [r7, #6]
 8003738:	887b      	ldrh	r3, [r7, #2]
 800373a:	4413      	add	r3, r2
 800373c:	b29b      	uxth	r3, r3
 800373e:	3b01      	subs	r3, #1
 8003740:	b29c      	uxth	r4, r3
 8003742:	88ba      	ldrh	r2, [r7, #4]
 8003744:	883b      	ldrh	r3, [r7, #0]
 8003746:	4413      	add	r3, r2
 8003748:	b29b      	uxth	r3, r3
 800374a:	3b01      	subs	r3, #1
 800374c:	b29b      	uxth	r3, r3
 800374e:	88b9      	ldrh	r1, [r7, #4]
 8003750:	88f8      	ldrh	r0, [r7, #6]
 8003752:	4622      	mov	r2, r4
 8003754:	f7ff fc48 	bl	8002fe8 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8003758:	883b      	ldrh	r3, [r7, #0]
 800375a:	887a      	ldrh	r2, [r7, #2]
 800375c:	fb02 f303 	mul.w	r3, r2, r3
 8003760:	461a      	mov	r2, r3
 8003762:	8b3b      	ldrh	r3, [r7, #24]
 8003764:	4611      	mov	r1, r2
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff fe14 	bl	8003394 <ILI9341_Draw_Colour_Burst>
 800376c:	e000      	b.n	8003770 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800376e:	bf00      	nop
}
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	bd90      	pop	{r4, r7, pc}
 8003776:	bf00      	nop
 8003778:	20000006 	.word	0x20000006
 800377c:	20000004 	.word	0x20000004

08003780 <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 8003780:	b590      	push	{r4, r7, lr}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	4604      	mov	r4, r0
 8003788:	4608      	mov	r0, r1
 800378a:	4611      	mov	r1, r2
 800378c:	461a      	mov	r2, r3
 800378e:	4623      	mov	r3, r4
 8003790:	80fb      	strh	r3, [r7, #6]
 8003792:	4603      	mov	r3, r0
 8003794:	80bb      	strh	r3, [r7, #4]
 8003796:	460b      	mov	r3, r1
 8003798:	807b      	strh	r3, [r7, #2]
 800379a:	4613      	mov	r3, r2
 800379c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800379e:	4b18      	ldr	r3, [pc, #96]	; (8003800 <ILI9341_Draw_Horizontal_Line+0x80>)
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	88fa      	ldrh	r2, [r7, #6]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d225      	bcs.n	80037f6 <ILI9341_Draw_Horizontal_Line+0x76>
 80037aa:	4b16      	ldr	r3, [pc, #88]	; (8003804 <ILI9341_Draw_Horizontal_Line+0x84>)
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	88ba      	ldrh	r2, [r7, #4]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d21f      	bcs.n	80037f6 <ILI9341_Draw_Horizontal_Line+0x76>
if((X+Width-1)>=LCD_WIDTH)
 80037b6:	88fa      	ldrh	r2, [r7, #6]
 80037b8:	887b      	ldrh	r3, [r7, #2]
 80037ba:	4413      	add	r3, r2
 80037bc:	4a10      	ldr	r2, [pc, #64]	; (8003800 <ILI9341_Draw_Horizontal_Line+0x80>)
 80037be:	8812      	ldrh	r2, [r2, #0]
 80037c0:	b292      	uxth	r2, r2
 80037c2:	4293      	cmp	r3, r2
 80037c4:	dd05      	ble.n	80037d2 <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width=LCD_WIDTH-X;
 80037c6:	4b0e      	ldr	r3, [pc, #56]	; (8003800 <ILI9341_Draw_Horizontal_Line+0x80>)
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	88fb      	ldrh	r3, [r7, #6]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 80037d2:	88fa      	ldrh	r2, [r7, #6]
 80037d4:	887b      	ldrh	r3, [r7, #2]
 80037d6:	4413      	add	r3, r2
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	88bb      	ldrh	r3, [r7, #4]
 80037e0:	88b9      	ldrh	r1, [r7, #4]
 80037e2:	88f8      	ldrh	r0, [r7, #6]
 80037e4:	f7ff fc00 	bl	8002fe8 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 80037e8:	887a      	ldrh	r2, [r7, #2]
 80037ea:	883b      	ldrh	r3, [r7, #0]
 80037ec:	4611      	mov	r1, r2
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fdd0 	bl	8003394 <ILI9341_Draw_Colour_Burst>
 80037f4:	e000      	b.n	80037f8 <ILI9341_Draw_Horizontal_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80037f6:	bf00      	nop
}
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd90      	pop	{r4, r7, pc}
 80037fe:	bf00      	nop
 8003800:	20000006 	.word	0x20000006
 8003804:	20000004 	.word	0x20000004

08003808 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 8003808:	b590      	push	{r4, r7, lr}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4604      	mov	r4, r0
 8003810:	4608      	mov	r0, r1
 8003812:	4611      	mov	r1, r2
 8003814:	461a      	mov	r2, r3
 8003816:	4623      	mov	r3, r4
 8003818:	80fb      	strh	r3, [r7, #6]
 800381a:	4603      	mov	r3, r0
 800381c:	80bb      	strh	r3, [r7, #4]
 800381e:	460b      	mov	r3, r1
 8003820:	807b      	strh	r3, [r7, #2]
 8003822:	4613      	mov	r3, r2
 8003824:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8003826:	4b18      	ldr	r3, [pc, #96]	; (8003888 <ILI9341_Draw_Vertical_Line+0x80>)
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	b29b      	uxth	r3, r3
 800382c:	88fa      	ldrh	r2, [r7, #6]
 800382e:	429a      	cmp	r2, r3
 8003830:	d225      	bcs.n	800387e <ILI9341_Draw_Vertical_Line+0x76>
 8003832:	4b16      	ldr	r3, [pc, #88]	; (800388c <ILI9341_Draw_Vertical_Line+0x84>)
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	b29b      	uxth	r3, r3
 8003838:	88ba      	ldrh	r2, [r7, #4]
 800383a:	429a      	cmp	r2, r3
 800383c:	d21f      	bcs.n	800387e <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 800383e:	88ba      	ldrh	r2, [r7, #4]
 8003840:	887b      	ldrh	r3, [r7, #2]
 8003842:	4413      	add	r3, r2
 8003844:	4a11      	ldr	r2, [pc, #68]	; (800388c <ILI9341_Draw_Vertical_Line+0x84>)
 8003846:	8812      	ldrh	r2, [r2, #0]
 8003848:	b292      	uxth	r2, r2
 800384a:	4293      	cmp	r3, r2
 800384c:	dd05      	ble.n	800385a <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 800384e:	4b0f      	ldr	r3, [pc, #60]	; (800388c <ILI9341_Draw_Vertical_Line+0x84>)
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	b29a      	uxth	r2, r3
 8003854:	88bb      	ldrh	r3, [r7, #4]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 800385a:	88ba      	ldrh	r2, [r7, #4]
 800385c:	887b      	ldrh	r3, [r7, #2]
 800385e:	4413      	add	r3, r2
 8003860:	b29b      	uxth	r3, r3
 8003862:	3b01      	subs	r3, #1
 8003864:	b29b      	uxth	r3, r3
 8003866:	88fa      	ldrh	r2, [r7, #6]
 8003868:	88b9      	ldrh	r1, [r7, #4]
 800386a:	88f8      	ldrh	r0, [r7, #6]
 800386c:	f7ff fbbc 	bl	8002fe8 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 8003870:	887a      	ldrh	r2, [r7, #2]
 8003872:	883b      	ldrh	r3, [r7, #0]
 8003874:	4611      	mov	r1, r2
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff fd8c 	bl	8003394 <ILI9341_Draw_Colour_Burst>
 800387c:	e000      	b.n	8003880 <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800387e:	bf00      	nop
}
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	bd90      	pop	{r4, r7, pc}
 8003886:	bf00      	nop
 8003888:	20000006 	.word	0x20000006
 800388c:	20000004 	.word	0x20000004

08003890 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f4xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8003896:	2310      	movs	r3, #16
 8003898:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 800389a:	2300      	movs	r3, #0
 800389c:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 800389e:	e019      	b.n	80038d4 <TP_Read+0x44>
    {
        value <<= 1;
 80038a0:	88bb      	ldrh	r3, [r7, #4]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 80038a6:	2201      	movs	r2, #1
 80038a8:	2102      	movs	r1, #2
 80038aa:	480e      	ldr	r0, [pc, #56]	; (80038e4 <TP_Read+0x54>)
 80038ac:	f000 fc7a 	bl	80041a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 80038b0:	2200      	movs	r2, #0
 80038b2:	2102      	movs	r1, #2
 80038b4:	480b      	ldr	r0, [pc, #44]	; (80038e4 <TP_Read+0x54>)
 80038b6:	f000 fc75 	bl	80041a4 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 80038ba:	2110      	movs	r1, #16
 80038bc:	4809      	ldr	r0, [pc, #36]	; (80038e4 <TP_Read+0x54>)
 80038be:	f000 fc59 	bl	8004174 <HAL_GPIO_ReadPin>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <TP_Read+0x3e>
        {
            value++;
 80038c8:	88bb      	ldrh	r3, [r7, #4]
 80038ca:	3301      	adds	r3, #1
 80038cc:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 80038ce:	79fb      	ldrb	r3, [r7, #7]
 80038d0:	3b01      	subs	r3, #1
 80038d2:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1e2      	bne.n	80038a0 <TP_Read+0x10>
    };

    return value;
 80038da:	88bb      	ldrh	r3, [r7, #4]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40021400 	.word	0x40021400

080038e8 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 80038f2:	2308      	movs	r3, #8
 80038f4:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 80038f6:	2200      	movs	r2, #0
 80038f8:	2102      	movs	r1, #2
 80038fa:	4815      	ldr	r0, [pc, #84]	; (8003950 <TP_Write+0x68>)
 80038fc:	f000 fc52 	bl	80041a4 <HAL_GPIO_WritePin>
	
    while(i > 0)
 8003900:	e01e      	b.n	8003940 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 8003902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003906:	2b00      	cmp	r3, #0
 8003908:	da05      	bge.n	8003916 <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 800390a:	2201      	movs	r2, #1
 800390c:	2108      	movs	r1, #8
 800390e:	4810      	ldr	r0, [pc, #64]	; (8003950 <TP_Write+0x68>)
 8003910:	f000 fc48 	bl	80041a4 <HAL_GPIO_WritePin>
 8003914:	e004      	b.n	8003920 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8003916:	2200      	movs	r2, #0
 8003918:	2108      	movs	r1, #8
 800391a:	480d      	ldr	r0, [pc, #52]	; (8003950 <TP_Write+0x68>)
 800391c:	f000 fc42 	bl	80041a4 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8003920:	79fb      	ldrb	r3, [r7, #7]
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8003926:	2201      	movs	r2, #1
 8003928:	2102      	movs	r1, #2
 800392a:	4809      	ldr	r0, [pc, #36]	; (8003950 <TP_Write+0x68>)
 800392c:	f000 fc3a 	bl	80041a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8003930:	2200      	movs	r2, #0
 8003932:	2102      	movs	r1, #2
 8003934:	4806      	ldr	r0, [pc, #24]	; (8003950 <TP_Write+0x68>)
 8003936:	f000 fc35 	bl	80041a4 <HAL_GPIO_WritePin>
        i--;
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	3b01      	subs	r3, #1
 800393e:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1dd      	bne.n	8003902 <TP_Write+0x1a>
    };
}
 8003946:	bf00      	nop
 8003948:	bf00      	nop
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40021400 	.word	0x40021400
 8003954:	00000000 	.word	0x00000000

08003958 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8003958:	b590      	push	{r4, r7, lr}
 800395a:	b08b      	sub	sp, #44	; 0x2c
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 8003960:	2201      	movs	r2, #1
 8003962:	2102      	movs	r1, #2
 8003964:	4864      	ldr	r0, [pc, #400]	; (8003af8 <TP_Read_Coordinates+0x1a0>)
 8003966:	f000 fc1d 	bl	80041a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 800396a:	2201      	movs	r2, #1
 800396c:	2108      	movs	r1, #8
 800396e:	4862      	ldr	r0, [pc, #392]	; (8003af8 <TP_Read_Coordinates+0x1a0>)
 8003970:	f000 fc18 	bl	80041a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 8003974:	2201      	movs	r2, #1
 8003976:	2104      	movs	r1, #4
 8003978:	485f      	ldr	r0, [pc, #380]	; (8003af8 <TP_Read_Coordinates+0x1a0>)
 800397a:	f000 fc13 	bl	80041a4 <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 800397e:	2300      	movs	r3, #0
 8003980:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 8003982:	2300      	movs	r3, #0
 8003984:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 8003986:	2300      	movs	r3, #0
 8003988:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 800398a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800398e:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8003990:	2300      	movs	r3, #0
 8003992:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8003994:	2200      	movs	r2, #0
 8003996:	2104      	movs	r1, #4
 8003998:	4857      	ldr	r0, [pc, #348]	; (8003af8 <TP_Read_Coordinates+0x1a0>)
 800399a:	f000 fc03 	bl	80041a4 <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 800399e:	e023      	b.n	80039e8 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 80039a0:	2090      	movs	r0, #144	; 0x90
 80039a2:	f7ff ffa1 	bl	80038e8 <TP_Write>

				rawy = TP_Read();	
 80039a6:	f7ff ff73 	bl	8003890 <TP_Read>
 80039aa:	4603      	mov	r3, r0
 80039ac:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 80039ae:	89fb      	ldrh	r3, [r7, #14]
 80039b0:	6a3a      	ldr	r2, [r7, #32]
 80039b2:	4413      	add	r3, r2
 80039b4:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 80039b6:	89fb      	ldrh	r3, [r7, #14]
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4413      	add	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 80039be:	20d0      	movs	r0, #208	; 0xd0
 80039c0:	f7ff ff92 	bl	80038e8 <TP_Write>
        rawx = TP_Read();
 80039c4:	f7ff ff64 	bl	8003890 <TP_Read>
 80039c8:	4603      	mov	r3, r0
 80039ca:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 80039cc:	89bb      	ldrh	r3, [r7, #12]
 80039ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d0:	4413      	add	r3, r2
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
				calculating_x += rawx;
 80039d4:	89bb      	ldrh	r3, [r7, #12]
 80039d6:	69fa      	ldr	r2, [r7, #28]
 80039d8:	4413      	add	r3, r2
 80039da:	61fb      	str	r3, [r7, #28]
        samples--;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	3b01      	subs	r3, #1
 80039e0:	617b      	str	r3, [r7, #20]
				counted_samples++;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	3301      	adds	r3, #1
 80039e6:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d006      	beq.n	80039fc <TP_Read_Coordinates+0xa4>
 80039ee:	2120      	movs	r1, #32
 80039f0:	4841      	ldr	r0, [pc, #260]	; (8003af8 <TP_Read_Coordinates+0x1a0>)
 80039f2:	f000 fbbf 	bl	8004174 <HAL_GPIO_ReadPin>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0d1      	beq.n	80039a0 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 80039fc:	2201      	movs	r2, #1
 80039fe:	2104      	movs	r1, #4
 8003a00:	483d      	ldr	r0, [pc, #244]	; (8003af8 <TP_Read_Coordinates+0x1a0>)
 8003a02:	f000 fbcf 	bl	80041a4 <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a0c:	d164      	bne.n	8003ad8 <TP_Read_Coordinates+0x180>
 8003a0e:	2120      	movs	r1, #32
 8003a10:	4839      	ldr	r0, [pc, #228]	; (8003af8 <TP_Read_Coordinates+0x1a0>)
 8003a12:	f000 fbaf 	bl	8004174 <HAL_GPIO_ReadPin>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d15d      	bne.n	8003ad8 <TP_Read_Coordinates+0x180>
		{
		
		calculating_x /= counted_samples;
 8003a1c:	69fa      	ldr	r2, [r7, #28]
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a24:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2e:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8003a38:	89bb      	ldrh	r3, [r7, #12]
 8003a3a:	425b      	negs	r3, r3
 8003a3c:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8003a3e:	89fb      	ldrh	r3, [r7, #14]
 8003a40:	425b      	negs	r3, r3
 8003a42:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
		// 65535/273 = 240!
		// 65535/204 = 320!
		Coordinates[0] = (((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE);
 8003a44:	89ba      	ldrh	r2, [r7, #12]
 8003a46:	4b2d      	ldr	r3, [pc, #180]	; (8003afc <TP_Read_Coordinates+0x1a4>)
 8003a48:	fba3 1302 	umull	r1, r3, r3, r2
 8003a4c:	1ad2      	subs	r2, r2, r3
 8003a4e:	0852      	lsrs	r2, r2, #1
 8003a50:	4413      	add	r3, r2
 8003a52:	0a1b      	lsrs	r3, r3, #8
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fc fd72 	bl	8000544 <__aeabi_i2d>
 8003a60:	a323      	add	r3, pc, #140	; (adr r3, 8003af0 <TP_Read_Coordinates+0x198>)
 8003a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a66:	f7fc fdd7 	bl	8000618 <__aeabi_dmul>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4610      	mov	r0, r2
 8003a70:	4619      	mov	r1, r3
 8003a72:	f7fd f8a9 	bl	8000bc8 <__aeabi_d2uiz>
 8003a76:	4603      	mov	r3, r0
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	801a      	strh	r2, [r3, #0]
		if (Coordinates[0] >= 105)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	881b      	ldrh	r3, [r3, #0]
 8003a82:	2b68      	cmp	r3, #104	; 0x68
 8003a84:	d906      	bls.n	8003a94 <TP_Read_Coordinates+0x13c>
		{
			Coordinates[0] -= 105;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	3b69      	subs	r3, #105	; 0x69
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	e005      	b.n	8003aa0 <TP_Read_Coordinates+0x148>
		} else {
			Coordinates[0] += 160;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	33a0      	adds	r3, #160	; 0xa0
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	801a      	strh	r2, [r3, #0]
		}
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 8003aa0:	89fb      	ldrh	r3, [r7, #14]
 8003aa2:	4a17      	ldr	r2, [pc, #92]	; (8003b00 <TP_Read_Coordinates+0x1a8>)
 8003aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa8:	09db      	lsrs	r3, r3, #7
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b0f      	subs	r3, #15
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fc fd48 	bl	8000544 <__aeabi_i2d>
 8003ab4:	a30e      	add	r3, pc, #56	; (adr r3, 8003af0 <TP_Read_Coordinates+0x198>)
 8003ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aba:	f7fc fdad 	bl	8000618 <__aeabi_dmul>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	1c9c      	adds	r4, r3, #2
 8003aca:	f7fd f87d 	bl	8000bc8 <__aeabi_d2uiz>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	8023      	strh	r3, [r4, #0]
		
		return TOUCHPAD_DATA_OK;			
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e007      	b.n	8003ae8 <TP_Read_Coordinates+0x190>
		}
		else
		{
			Coordinates[0] = 0;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3302      	adds	r3, #2
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8003ae6:	2300      	movs	r3, #0
		}
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	372c      	adds	r7, #44	; 0x2c
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd90      	pop	{r4, r7, pc}
 8003af0:	28f5c28f 	.word	0x28f5c28f
 8003af4:	3ff28f5c 	.word	0x3ff28f5c
 8003af8:	40021400 	.word	0x40021400
 8003afc:	e01e01e1 	.word	0xe01e01e1
 8003b00:	a0a0a0a1 	.word	0xa0a0a0a1

08003b04 <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8003b08:	2120      	movs	r1, #32
 8003b0a:	4805      	ldr	r0, [pc, #20]	; (8003b20 <TP_Touchpad_Pressed+0x1c>)
 8003b0c:	f000 fb32 	bl	8004174 <HAL_GPIO_ReadPin>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e000      	b.n	8003b1c <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8003b1a:	2300      	movs	r3, #0
	}
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40021400 	.word	0x40021400

08003b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b28:	4b0e      	ldr	r3, [pc, #56]	; (8003b64 <HAL_Init+0x40>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a0d      	ldr	r2, [pc, #52]	; (8003b64 <HAL_Init+0x40>)
 8003b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b34:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <HAL_Init+0x40>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a0a      	ldr	r2, [pc, #40]	; (8003b64 <HAL_Init+0x40>)
 8003b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b40:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <HAL_Init+0x40>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a07      	ldr	r2, [pc, #28]	; (8003b64 <HAL_Init+0x40>)
 8003b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b4c:	2003      	movs	r0, #3
 8003b4e:	f000 f931 	bl	8003db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b52:	200f      	movs	r0, #15
 8003b54:	f000 f808 	bl	8003b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b58:	f7fe fb36 	bl	80021c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40023c00 	.word	0x40023c00

08003b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b70:	4b12      	ldr	r3, [pc, #72]	; (8003bbc <HAL_InitTick+0x54>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <HAL_InitTick+0x58>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	4619      	mov	r1, r3
 8003b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 f93b 	bl	8003e02 <HAL_SYSTICK_Config>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e00e      	b.n	8003bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2b0f      	cmp	r3, #15
 8003b9a:	d80a      	bhi.n	8003bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba4:	f000 f911 	bl	8003dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ba8:	4a06      	ldr	r2, [pc, #24]	; (8003bc4 <HAL_InitTick+0x5c>)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	e000      	b.n	8003bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3708      	adds	r7, #8
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	20000000 	.word	0x20000000
 8003bc0:	2000000c 	.word	0x2000000c
 8003bc4:	20000008 	.word	0x20000008

08003bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bcc:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <HAL_IncTick+0x20>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <HAL_IncTick+0x24>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	4a04      	ldr	r2, [pc, #16]	; (8003bec <HAL_IncTick+0x24>)
 8003bda:	6013      	str	r3, [r2, #0]
}
 8003bdc:	bf00      	nop
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	2000000c 	.word	0x2000000c
 8003bec:	20000300 	.word	0x20000300

08003bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8003bf4:	4b03      	ldr	r3, [pc, #12]	; (8003c04 <HAL_GetTick+0x14>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	20000300 	.word	0x20000300

08003c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c10:	f7ff ffee 	bl	8003bf0 <HAL_GetTick>
 8003c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c20:	d005      	beq.n	8003c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c22:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <HAL_Delay+0x44>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c2e:	bf00      	nop
 8003c30:	f7ff ffde 	bl	8003bf0 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d8f7      	bhi.n	8003c30 <HAL_Delay+0x28>
  {
  }
}
 8003c40:	bf00      	nop
 8003c42:	bf00      	nop
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	2000000c 	.word	0x2000000c

08003c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c60:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <__NVIC_SetPriorityGrouping+0x44>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c82:	4a04      	ldr	r2, [pc, #16]	; (8003c94 <__NVIC_SetPriorityGrouping+0x44>)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	60d3      	str	r3, [r2, #12]
}
 8003c88:	bf00      	nop
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c9c:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	0a1b      	lsrs	r3, r3, #8
 8003ca2:	f003 0307 	and.w	r3, r3, #7
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	e000ed00 	.word	0xe000ed00

08003cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	4603      	mov	r3, r0
 8003cbc:	6039      	str	r1, [r7, #0]
 8003cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	db0a      	blt.n	8003cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	490c      	ldr	r1, [pc, #48]	; (8003d00 <__NVIC_SetPriority+0x4c>)
 8003cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd2:	0112      	lsls	r2, r2, #4
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cdc:	e00a      	b.n	8003cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	4908      	ldr	r1, [pc, #32]	; (8003d04 <__NVIC_SetPriority+0x50>)
 8003ce4:	79fb      	ldrb	r3, [r7, #7]
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	3b04      	subs	r3, #4
 8003cec:	0112      	lsls	r2, r2, #4
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	761a      	strb	r2, [r3, #24]
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	e000e100 	.word	0xe000e100
 8003d04:	e000ed00 	.word	0xe000ed00

08003d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b089      	sub	sp, #36	; 0x24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f1c3 0307 	rsb	r3, r3, #7
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	bf28      	it	cs
 8003d26:	2304      	movcs	r3, #4
 8003d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	2b06      	cmp	r3, #6
 8003d30:	d902      	bls.n	8003d38 <NVIC_EncodePriority+0x30>
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	3b03      	subs	r3, #3
 8003d36:	e000      	b.n	8003d3a <NVIC_EncodePriority+0x32>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	43da      	mvns	r2, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	401a      	ands	r2, r3
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d50:	f04f 31ff 	mov.w	r1, #4294967295
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5a:	43d9      	mvns	r1, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d60:	4313      	orrs	r3, r2
         );
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3724      	adds	r7, #36	; 0x24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
	...

08003d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d80:	d301      	bcc.n	8003d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d82:	2301      	movs	r3, #1
 8003d84:	e00f      	b.n	8003da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d86:	4a0a      	ldr	r2, [pc, #40]	; (8003db0 <SysTick_Config+0x40>)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d8e:	210f      	movs	r1, #15
 8003d90:	f04f 30ff 	mov.w	r0, #4294967295
 8003d94:	f7ff ff8e 	bl	8003cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <SysTick_Config+0x40>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d9e:	4b04      	ldr	r3, [pc, #16]	; (8003db0 <SysTick_Config+0x40>)
 8003da0:	2207      	movs	r2, #7
 8003da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	e000e010 	.word	0xe000e010

08003db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff ff47 	bl	8003c50 <__NVIC_SetPriorityGrouping>
}
 8003dc2:	bf00      	nop
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b086      	sub	sp, #24
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	607a      	str	r2, [r7, #4]
 8003dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ddc:	f7ff ff5c 	bl	8003c98 <__NVIC_GetPriorityGrouping>
 8003de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	68b9      	ldr	r1, [r7, #8]
 8003de6:	6978      	ldr	r0, [r7, #20]
 8003de8:	f7ff ff8e 	bl	8003d08 <NVIC_EncodePriority>
 8003dec:	4602      	mov	r2, r0
 8003dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003df2:	4611      	mov	r1, r2
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff ff5d 	bl	8003cb4 <__NVIC_SetPriority>
}
 8003dfa:	bf00      	nop
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b082      	sub	sp, #8
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7ff ffb0 	bl	8003d70 <SysTick_Config>
 8003e10:	4603      	mov	r3, r0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b089      	sub	sp, #36	; 0x24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e32:	2300      	movs	r3, #0
 8003e34:	61fb      	str	r3, [r7, #28]
 8003e36:	e177      	b.n	8004128 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e38:	2201      	movs	r2, #1
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	f040 8166 	bne.w	8004122 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d005      	beq.n	8003e6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d130      	bne.n	8003ed0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	2203      	movs	r2, #3
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4013      	ands	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	43db      	mvns	r3, r3
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	091b      	lsrs	r3, r3, #4
 8003eba:	f003 0201 	and.w	r2, r3, #1
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f003 0303 	and.w	r3, r3, #3
 8003ed8:	2b03      	cmp	r3, #3
 8003eda:	d017      	beq.n	8003f0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	2203      	movs	r2, #3
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 0303 	and.w	r3, r3, #3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d123      	bne.n	8003f60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	08da      	lsrs	r2, r3, #3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3208      	adds	r2, #8
 8003f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	f003 0307 	and.w	r3, r3, #7
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	220f      	movs	r2, #15
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	43db      	mvns	r3, r3
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	08da      	lsrs	r2, r3, #3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3208      	adds	r2, #8
 8003f5a:	69b9      	ldr	r1, [r7, #24]
 8003f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	2203      	movs	r2, #3
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	43db      	mvns	r3, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4013      	ands	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f003 0203 	and.w	r2, r3, #3
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 80c0 	beq.w	8004122 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	4b66      	ldr	r3, [pc, #408]	; (8004140 <HAL_GPIO_Init+0x324>)
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003faa:	4a65      	ldr	r2, [pc, #404]	; (8004140 <HAL_GPIO_Init+0x324>)
 8003fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8003fb2:	4b63      	ldr	r3, [pc, #396]	; (8004140 <HAL_GPIO_Init+0x324>)
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fbe:	4a61      	ldr	r2, [pc, #388]	; (8004144 <HAL_GPIO_Init+0x328>)
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	089b      	lsrs	r3, r3, #2
 8003fc4:	3302      	adds	r3, #2
 8003fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	220f      	movs	r2, #15
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a58      	ldr	r2, [pc, #352]	; (8004148 <HAL_GPIO_Init+0x32c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d037      	beq.n	800405a <HAL_GPIO_Init+0x23e>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a57      	ldr	r2, [pc, #348]	; (800414c <HAL_GPIO_Init+0x330>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d031      	beq.n	8004056 <HAL_GPIO_Init+0x23a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a56      	ldr	r2, [pc, #344]	; (8004150 <HAL_GPIO_Init+0x334>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d02b      	beq.n	8004052 <HAL_GPIO_Init+0x236>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a55      	ldr	r2, [pc, #340]	; (8004154 <HAL_GPIO_Init+0x338>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d025      	beq.n	800404e <HAL_GPIO_Init+0x232>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a54      	ldr	r2, [pc, #336]	; (8004158 <HAL_GPIO_Init+0x33c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d01f      	beq.n	800404a <HAL_GPIO_Init+0x22e>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a53      	ldr	r2, [pc, #332]	; (800415c <HAL_GPIO_Init+0x340>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d019      	beq.n	8004046 <HAL_GPIO_Init+0x22a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a52      	ldr	r2, [pc, #328]	; (8004160 <HAL_GPIO_Init+0x344>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d013      	beq.n	8004042 <HAL_GPIO_Init+0x226>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a51      	ldr	r2, [pc, #324]	; (8004164 <HAL_GPIO_Init+0x348>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00d      	beq.n	800403e <HAL_GPIO_Init+0x222>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a50      	ldr	r2, [pc, #320]	; (8004168 <HAL_GPIO_Init+0x34c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d007      	beq.n	800403a <HAL_GPIO_Init+0x21e>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a4f      	ldr	r2, [pc, #316]	; (800416c <HAL_GPIO_Init+0x350>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d101      	bne.n	8004036 <HAL_GPIO_Init+0x21a>
 8004032:	2309      	movs	r3, #9
 8004034:	e012      	b.n	800405c <HAL_GPIO_Init+0x240>
 8004036:	230a      	movs	r3, #10
 8004038:	e010      	b.n	800405c <HAL_GPIO_Init+0x240>
 800403a:	2308      	movs	r3, #8
 800403c:	e00e      	b.n	800405c <HAL_GPIO_Init+0x240>
 800403e:	2307      	movs	r3, #7
 8004040:	e00c      	b.n	800405c <HAL_GPIO_Init+0x240>
 8004042:	2306      	movs	r3, #6
 8004044:	e00a      	b.n	800405c <HAL_GPIO_Init+0x240>
 8004046:	2305      	movs	r3, #5
 8004048:	e008      	b.n	800405c <HAL_GPIO_Init+0x240>
 800404a:	2304      	movs	r3, #4
 800404c:	e006      	b.n	800405c <HAL_GPIO_Init+0x240>
 800404e:	2303      	movs	r3, #3
 8004050:	e004      	b.n	800405c <HAL_GPIO_Init+0x240>
 8004052:	2302      	movs	r3, #2
 8004054:	e002      	b.n	800405c <HAL_GPIO_Init+0x240>
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <HAL_GPIO_Init+0x240>
 800405a:	2300      	movs	r3, #0
 800405c:	69fa      	ldr	r2, [r7, #28]
 800405e:	f002 0203 	and.w	r2, r2, #3
 8004062:	0092      	lsls	r2, r2, #2
 8004064:	4093      	lsls	r3, r2
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4313      	orrs	r3, r2
 800406a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800406c:	4935      	ldr	r1, [pc, #212]	; (8004144 <HAL_GPIO_Init+0x328>)
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	089b      	lsrs	r3, r3, #2
 8004072:	3302      	adds	r3, #2
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800407a:	4b3d      	ldr	r3, [pc, #244]	; (8004170 <HAL_GPIO_Init+0x354>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	43db      	mvns	r3, r3
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	4013      	ands	r3, r2
 8004088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800409e:	4a34      	ldr	r2, [pc, #208]	; (8004170 <HAL_GPIO_Init+0x354>)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040a4:	4b32      	ldr	r3, [pc, #200]	; (8004170 <HAL_GPIO_Init+0x354>)
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	43db      	mvns	r3, r3
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	4013      	ands	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040c8:	4a29      	ldr	r2, [pc, #164]	; (8004170 <HAL_GPIO_Init+0x354>)
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040ce:	4b28      	ldr	r3, [pc, #160]	; (8004170 <HAL_GPIO_Init+0x354>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	43db      	mvns	r3, r3
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	4013      	ands	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040f2:	4a1f      	ldr	r2, [pc, #124]	; (8004170 <HAL_GPIO_Init+0x354>)
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040f8:	4b1d      	ldr	r3, [pc, #116]	; (8004170 <HAL_GPIO_Init+0x354>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	43db      	mvns	r3, r3
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4013      	ands	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4313      	orrs	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800411c:	4a14      	ldr	r2, [pc, #80]	; (8004170 <HAL_GPIO_Init+0x354>)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	3301      	adds	r3, #1
 8004126:	61fb      	str	r3, [r7, #28]
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	2b0f      	cmp	r3, #15
 800412c:	f67f ae84 	bls.w	8003e38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004130:	bf00      	nop
 8004132:	bf00      	nop
 8004134:	3724      	adds	r7, #36	; 0x24
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40023800 	.word	0x40023800
 8004144:	40013800 	.word	0x40013800
 8004148:	40020000 	.word	0x40020000
 800414c:	40020400 	.word	0x40020400
 8004150:	40020800 	.word	0x40020800
 8004154:	40020c00 	.word	0x40020c00
 8004158:	40021000 	.word	0x40021000
 800415c:	40021400 	.word	0x40021400
 8004160:	40021800 	.word	0x40021800
 8004164:	40021c00 	.word	0x40021c00
 8004168:	40022000 	.word	0x40022000
 800416c:	40022400 	.word	0x40022400
 8004170:	40013c00 	.word	0x40013c00

08004174 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	887b      	ldrh	r3, [r7, #2]
 8004186:	4013      	ands	r3, r2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
 8004190:	e001      	b.n	8004196 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004192:	2300      	movs	r3, #0
 8004194:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004196:	7bfb      	ldrb	r3, [r7, #15]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	460b      	mov	r3, r1
 80041ae:	807b      	strh	r3, [r7, #2]
 80041b0:	4613      	mov	r3, r2
 80041b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041b4:	787b      	ldrb	r3, [r7, #1]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041ba:	887a      	ldrh	r2, [r7, #2]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041c0:	e003      	b.n	80041ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041c2:	887b      	ldrh	r3, [r7, #2]
 80041c4:	041a      	lsls	r2, r3, #16
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	619a      	str	r2, [r3, #24]
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
	...

080041d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e264      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d075      	beq.n	80042e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041f6:	4ba3      	ldr	r3, [pc, #652]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d00c      	beq.n	800421c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004202:	4ba0      	ldr	r3, [pc, #640]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800420a:	2b08      	cmp	r3, #8
 800420c:	d112      	bne.n	8004234 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800420e:	4b9d      	ldr	r3, [pc, #628]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800421a:	d10b      	bne.n	8004234 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800421c:	4b99      	ldr	r3, [pc, #612]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d05b      	beq.n	80042e0 <HAL_RCC_OscConfig+0x108>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d157      	bne.n	80042e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e23f      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800423c:	d106      	bne.n	800424c <HAL_RCC_OscConfig+0x74>
 800423e:	4b91      	ldr	r3, [pc, #580]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a90      	ldr	r2, [pc, #576]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	e01d      	b.n	8004288 <HAL_RCC_OscConfig+0xb0>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004254:	d10c      	bne.n	8004270 <HAL_RCC_OscConfig+0x98>
 8004256:	4b8b      	ldr	r3, [pc, #556]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a8a      	ldr	r2, [pc, #552]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800425c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	4b88      	ldr	r3, [pc, #544]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a87      	ldr	r2, [pc, #540]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	e00b      	b.n	8004288 <HAL_RCC_OscConfig+0xb0>
 8004270:	4b84      	ldr	r3, [pc, #528]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a83      	ldr	r2, [pc, #524]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	4b81      	ldr	r3, [pc, #516]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a80      	ldr	r2, [pc, #512]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d013      	beq.n	80042b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004290:	f7ff fcae 	bl	8003bf0 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004298:	f7ff fcaa 	bl	8003bf0 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b64      	cmp	r3, #100	; 0x64
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e204      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042aa:	4b76      	ldr	r3, [pc, #472]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCC_OscConfig+0xc0>
 80042b6:	e014      	b.n	80042e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b8:	f7ff fc9a 	bl	8003bf0 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042c0:	f7ff fc96 	bl	8003bf0 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b64      	cmp	r3, #100	; 0x64
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e1f0      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042d2:	4b6c      	ldr	r3, [pc, #432]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f0      	bne.n	80042c0 <HAL_RCC_OscConfig+0xe8>
 80042de:	e000      	b.n	80042e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d063      	beq.n	80043b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ee:	4b65      	ldr	r3, [pc, #404]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00b      	beq.n	8004312 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042fa:	4b62      	ldr	r3, [pc, #392]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004302:	2b08      	cmp	r3, #8
 8004304:	d11c      	bne.n	8004340 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004306:	4b5f      	ldr	r3, [pc, #380]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d116      	bne.n	8004340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004312:	4b5c      	ldr	r3, [pc, #368]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d005      	beq.n	800432a <HAL_RCC_OscConfig+0x152>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d001      	beq.n	800432a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e1c4      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432a:	4b56      	ldr	r3, [pc, #344]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	4952      	ldr	r1, [pc, #328]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800433a:	4313      	orrs	r3, r2
 800433c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800433e:	e03a      	b.n	80043b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d020      	beq.n	800438a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004348:	4b4f      	ldr	r3, [pc, #316]	; (8004488 <HAL_RCC_OscConfig+0x2b0>)
 800434a:	2201      	movs	r2, #1
 800434c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434e:	f7ff fc4f 	bl	8003bf0 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004356:	f7ff fc4b 	bl	8003bf0 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e1a5      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004368:	4b46      	ldr	r3, [pc, #280]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004374:	4b43      	ldr	r3, [pc, #268]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	4940      	ldr	r1, [pc, #256]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004384:	4313      	orrs	r3, r2
 8004386:	600b      	str	r3, [r1, #0]
 8004388:	e015      	b.n	80043b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800438a:	4b3f      	ldr	r3, [pc, #252]	; (8004488 <HAL_RCC_OscConfig+0x2b0>)
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004390:	f7ff fc2e 	bl	8003bf0 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004398:	f7ff fc2a 	bl	8003bf0 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e184      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043aa:	4b36      	ldr	r3, [pc, #216]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d030      	beq.n	8004424 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d016      	beq.n	80043f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ca:	4b30      	ldr	r3, [pc, #192]	; (800448c <HAL_RCC_OscConfig+0x2b4>)
 80043cc:	2201      	movs	r2, #1
 80043ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d0:	f7ff fc0e 	bl	8003bf0 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043d8:	f7ff fc0a 	bl	8003bf0 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e164      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ea:	4b26      	ldr	r3, [pc, #152]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 80043ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f0      	beq.n	80043d8 <HAL_RCC_OscConfig+0x200>
 80043f6:	e015      	b.n	8004424 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043f8:	4b24      	ldr	r3, [pc, #144]	; (800448c <HAL_RCC_OscConfig+0x2b4>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043fe:	f7ff fbf7 	bl	8003bf0 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004406:	f7ff fbf3 	bl	8003bf0 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e14d      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004418:	4b1a      	ldr	r3, [pc, #104]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800441a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1f0      	bne.n	8004406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 80a0 	beq.w	8004572 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004432:	2300      	movs	r3, #0
 8004434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004436:	4b13      	ldr	r3, [pc, #76]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10f      	bne.n	8004462 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004442:	2300      	movs	r3, #0
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	4a0e      	ldr	r2, [pc, #56]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 800444c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004450:	6413      	str	r3, [r2, #64]	; 0x40
 8004452:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <HAL_RCC_OscConfig+0x2ac>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445a:	60bb      	str	r3, [r7, #8]
 800445c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800445e:	2301      	movs	r3, #1
 8004460:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004462:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <HAL_RCC_OscConfig+0x2b8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d121      	bne.n	80044b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800446e:	4b08      	ldr	r3, [pc, #32]	; (8004490 <HAL_RCC_OscConfig+0x2b8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a07      	ldr	r2, [pc, #28]	; (8004490 <HAL_RCC_OscConfig+0x2b8>)
 8004474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800447a:	f7ff fbb9 	bl	8003bf0 <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004480:	e011      	b.n	80044a6 <HAL_RCC_OscConfig+0x2ce>
 8004482:	bf00      	nop
 8004484:	40023800 	.word	0x40023800
 8004488:	42470000 	.word	0x42470000
 800448c:	42470e80 	.word	0x42470e80
 8004490:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004494:	f7ff fbac 	bl	8003bf0 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e106      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a6:	4b85      	ldr	r3, [pc, #532]	; (80046bc <HAL_RCC_OscConfig+0x4e4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f0      	beq.n	8004494 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d106      	bne.n	80044c8 <HAL_RCC_OscConfig+0x2f0>
 80044ba:	4b81      	ldr	r3, [pc, #516]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	4a80      	ldr	r2, [pc, #512]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044c0:	f043 0301 	orr.w	r3, r3, #1
 80044c4:	6713      	str	r3, [r2, #112]	; 0x70
 80044c6:	e01c      	b.n	8004502 <HAL_RCC_OscConfig+0x32a>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b05      	cmp	r3, #5
 80044ce:	d10c      	bne.n	80044ea <HAL_RCC_OscConfig+0x312>
 80044d0:	4b7b      	ldr	r3, [pc, #492]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d4:	4a7a      	ldr	r2, [pc, #488]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044d6:	f043 0304 	orr.w	r3, r3, #4
 80044da:	6713      	str	r3, [r2, #112]	; 0x70
 80044dc:	4b78      	ldr	r3, [pc, #480]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	4a77      	ldr	r2, [pc, #476]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044e2:	f043 0301 	orr.w	r3, r3, #1
 80044e6:	6713      	str	r3, [r2, #112]	; 0x70
 80044e8:	e00b      	b.n	8004502 <HAL_RCC_OscConfig+0x32a>
 80044ea:	4b75      	ldr	r3, [pc, #468]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ee:	4a74      	ldr	r2, [pc, #464]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044f0:	f023 0301 	bic.w	r3, r3, #1
 80044f4:	6713      	str	r3, [r2, #112]	; 0x70
 80044f6:	4b72      	ldr	r3, [pc, #456]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fa:	4a71      	ldr	r2, [pc, #452]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80044fc:	f023 0304 	bic.w	r3, r3, #4
 8004500:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d015      	beq.n	8004536 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800450a:	f7ff fb71 	bl	8003bf0 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004510:	e00a      	b.n	8004528 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004512:	f7ff fb6d 	bl	8003bf0 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004520:	4293      	cmp	r3, r2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e0c5      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004528:	4b65      	ldr	r3, [pc, #404]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0ee      	beq.n	8004512 <HAL_RCC_OscConfig+0x33a>
 8004534:	e014      	b.n	8004560 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004536:	f7ff fb5b 	bl	8003bf0 <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800453c:	e00a      	b.n	8004554 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800453e:	f7ff fb57 	bl	8003bf0 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	f241 3288 	movw	r2, #5000	; 0x1388
 800454c:	4293      	cmp	r3, r2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e0af      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004554:	4b5a      	ldr	r3, [pc, #360]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1ee      	bne.n	800453e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004560:	7dfb      	ldrb	r3, [r7, #23]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d105      	bne.n	8004572 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004566:	4b56      	ldr	r3, [pc, #344]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 8004568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456a:	4a55      	ldr	r2, [pc, #340]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 800456c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004570:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	2b00      	cmp	r3, #0
 8004578:	f000 809b 	beq.w	80046b2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800457c:	4b50      	ldr	r3, [pc, #320]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f003 030c 	and.w	r3, r3, #12
 8004584:	2b08      	cmp	r3, #8
 8004586:	d05c      	beq.n	8004642 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	2b02      	cmp	r3, #2
 800458e:	d141      	bne.n	8004614 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004590:	4b4c      	ldr	r3, [pc, #304]	; (80046c4 <HAL_RCC_OscConfig+0x4ec>)
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004596:	f7ff fb2b 	bl	8003bf0 <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800459e:	f7ff fb27 	bl	8003bf0 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e081      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045b0:	4b43      	ldr	r3, [pc, #268]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1f0      	bne.n	800459e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	69da      	ldr	r2, [r3, #28]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	019b      	lsls	r3, r3, #6
 80045cc:	431a      	orrs	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d2:	085b      	lsrs	r3, r3, #1
 80045d4:	3b01      	subs	r3, #1
 80045d6:	041b      	lsls	r3, r3, #16
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045de:	061b      	lsls	r3, r3, #24
 80045e0:	4937      	ldr	r1, [pc, #220]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045e6:	4b37      	ldr	r3, [pc, #220]	; (80046c4 <HAL_RCC_OscConfig+0x4ec>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ec:	f7ff fb00 	bl	8003bf0 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f4:	f7ff fafc 	bl	8003bf0 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e056      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004606:	4b2e      	ldr	r3, [pc, #184]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCC_OscConfig+0x41c>
 8004612:	e04e      	b.n	80046b2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004614:	4b2b      	ldr	r3, [pc, #172]	; (80046c4 <HAL_RCC_OscConfig+0x4ec>)
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461a:	f7ff fae9 	bl	8003bf0 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004620:	e008      	b.n	8004634 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004622:	f7ff fae5 	bl	8003bf0 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e03f      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004634:	4b22      	ldr	r3, [pc, #136]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1f0      	bne.n	8004622 <HAL_RCC_OscConfig+0x44a>
 8004640:	e037      	b.n	80046b2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e032      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800464e:	4b1c      	ldr	r3, [pc, #112]	; (80046c0 <HAL_RCC_OscConfig+0x4e8>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d028      	beq.n	80046ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004666:	429a      	cmp	r2, r3
 8004668:	d121      	bne.n	80046ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d11a      	bne.n	80046ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800467e:	4013      	ands	r3, r2
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004684:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004686:	4293      	cmp	r3, r2
 8004688:	d111      	bne.n	80046ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004694:	085b      	lsrs	r3, r3, #1
 8004696:	3b01      	subs	r3, #1
 8004698:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800469a:	429a      	cmp	r2, r3
 800469c:	d107      	bne.n	80046ae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d001      	beq.n	80046b2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3718      	adds	r7, #24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40007000 	.word	0x40007000
 80046c0:	40023800 	.word	0x40023800
 80046c4:	42470060 	.word	0x42470060

080046c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e0cc      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046dc:	4b68      	ldr	r3, [pc, #416]	; (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 030f 	and.w	r3, r3, #15
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d90c      	bls.n	8004704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ea:	4b65      	ldr	r3, [pc, #404]	; (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f2:	4b63      	ldr	r3, [pc, #396]	; (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d001      	beq.n	8004704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0b8      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d020      	beq.n	8004752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800471c:	4b59      	ldr	r3, [pc, #356]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	4a58      	ldr	r2, [pc, #352]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004726:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004734:	4b53      	ldr	r3, [pc, #332]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	4a52      	ldr	r2, [pc, #328]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800473e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004740:	4b50      	ldr	r3, [pc, #320]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	494d      	ldr	r1, [pc, #308]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	4313      	orrs	r3, r2
 8004750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d044      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d107      	bne.n	8004776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004766:	4b47      	ldr	r3, [pc, #284]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d119      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e07f      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b02      	cmp	r3, #2
 800477c:	d003      	beq.n	8004786 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004782:	2b03      	cmp	r3, #3
 8004784:	d107      	bne.n	8004796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004786:	4b3f      	ldr	r3, [pc, #252]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d109      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e06f      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004796:	4b3b      	ldr	r3, [pc, #236]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e067      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047a6:	4b37      	ldr	r3, [pc, #220]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f023 0203 	bic.w	r2, r3, #3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	4934      	ldr	r1, [pc, #208]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047b8:	f7ff fa1a 	bl	8003bf0 <HAL_GetTick>
 80047bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047be:	e00a      	b.n	80047d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c0:	f7ff fa16 	bl	8003bf0 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e04f      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d6:	4b2b      	ldr	r3, [pc, #172]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 020c 	and.w	r2, r3, #12
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d1eb      	bne.n	80047c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047e8:	4b25      	ldr	r3, [pc, #148]	; (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 030f 	and.w	r3, r3, #15
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d20c      	bcs.n	8004810 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f6:	4b22      	ldr	r3, [pc, #136]	; (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fe:	4b20      	ldr	r3, [pc, #128]	; (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d001      	beq.n	8004810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e032      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d008      	beq.n	800482e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800481c:	4b19      	ldr	r3, [pc, #100]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	4916      	ldr	r1, [pc, #88]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	4313      	orrs	r3, r2
 800482c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d009      	beq.n	800484e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800483a:	4b12      	ldr	r3, [pc, #72]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	490e      	ldr	r1, [pc, #56]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	4313      	orrs	r3, r2
 800484c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800484e:	f000 f821 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 8004852:	4602      	mov	r2, r0
 8004854:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	490a      	ldr	r1, [pc, #40]	; (8004888 <HAL_RCC_ClockConfig+0x1c0>)
 8004860:	5ccb      	ldrb	r3, [r1, r3]
 8004862:	fa22 f303 	lsr.w	r3, r2, r3
 8004866:	4a09      	ldr	r2, [pc, #36]	; (800488c <HAL_RCC_ClockConfig+0x1c4>)
 8004868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800486a:	4b09      	ldr	r3, [pc, #36]	; (8004890 <HAL_RCC_ClockConfig+0x1c8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff f97a 	bl	8003b68 <HAL_InitTick>

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40023c00 	.word	0x40023c00
 8004884:	40023800 	.word	0x40023800
 8004888:	0802e350 	.word	0x0802e350
 800488c:	20000000 	.word	0x20000000
 8004890:	20000008 	.word	0x20000008

08004894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004894:	b5b0      	push	{r4, r5, r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800489a:	2100      	movs	r1, #0
 800489c:	6079      	str	r1, [r7, #4]
 800489e:	2100      	movs	r1, #0
 80048a0:	60f9      	str	r1, [r7, #12]
 80048a2:	2100      	movs	r1, #0
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048a6:	2100      	movs	r1, #0
 80048a8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048aa:	4952      	ldr	r1, [pc, #328]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80048ac:	6889      	ldr	r1, [r1, #8]
 80048ae:	f001 010c 	and.w	r1, r1, #12
 80048b2:	2908      	cmp	r1, #8
 80048b4:	d00d      	beq.n	80048d2 <HAL_RCC_GetSysClockFreq+0x3e>
 80048b6:	2908      	cmp	r1, #8
 80048b8:	f200 8094 	bhi.w	80049e4 <HAL_RCC_GetSysClockFreq+0x150>
 80048bc:	2900      	cmp	r1, #0
 80048be:	d002      	beq.n	80048c6 <HAL_RCC_GetSysClockFreq+0x32>
 80048c0:	2904      	cmp	r1, #4
 80048c2:	d003      	beq.n	80048cc <HAL_RCC_GetSysClockFreq+0x38>
 80048c4:	e08e      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048c6:	4b4c      	ldr	r3, [pc, #304]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80048c8:	60bb      	str	r3, [r7, #8]
       break;
 80048ca:	e08e      	b.n	80049ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048cc:	4b4b      	ldr	r3, [pc, #300]	; (80049fc <HAL_RCC_GetSysClockFreq+0x168>)
 80048ce:	60bb      	str	r3, [r7, #8]
      break;
 80048d0:	e08b      	b.n	80049ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048d2:	4948      	ldr	r1, [pc, #288]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80048d4:	6849      	ldr	r1, [r1, #4]
 80048d6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80048da:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048dc:	4945      	ldr	r1, [pc, #276]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80048de:	6849      	ldr	r1, [r1, #4]
 80048e0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80048e4:	2900      	cmp	r1, #0
 80048e6:	d024      	beq.n	8004932 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048e8:	4942      	ldr	r1, [pc, #264]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80048ea:	6849      	ldr	r1, [r1, #4]
 80048ec:	0989      	lsrs	r1, r1, #6
 80048ee:	4608      	mov	r0, r1
 80048f0:	f04f 0100 	mov.w	r1, #0
 80048f4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80048f8:	f04f 0500 	mov.w	r5, #0
 80048fc:	ea00 0204 	and.w	r2, r0, r4
 8004900:	ea01 0305 	and.w	r3, r1, r5
 8004904:	493d      	ldr	r1, [pc, #244]	; (80049fc <HAL_RCC_GetSysClockFreq+0x168>)
 8004906:	fb01 f003 	mul.w	r0, r1, r3
 800490a:	2100      	movs	r1, #0
 800490c:	fb01 f102 	mul.w	r1, r1, r2
 8004910:	1844      	adds	r4, r0, r1
 8004912:	493a      	ldr	r1, [pc, #232]	; (80049fc <HAL_RCC_GetSysClockFreq+0x168>)
 8004914:	fba2 0101 	umull	r0, r1, r2, r1
 8004918:	1863      	adds	r3, r4, r1
 800491a:	4619      	mov	r1, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	461a      	mov	r2, r3
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	f7fc f970 	bl	8000c08 <__aeabi_uldivmod>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4613      	mov	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	e04a      	b.n	80049c8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004932:	4b30      	ldr	r3, [pc, #192]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	099b      	lsrs	r3, r3, #6
 8004938:	461a      	mov	r2, r3
 800493a:	f04f 0300 	mov.w	r3, #0
 800493e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004942:	f04f 0100 	mov.w	r1, #0
 8004946:	ea02 0400 	and.w	r4, r2, r0
 800494a:	ea03 0501 	and.w	r5, r3, r1
 800494e:	4620      	mov	r0, r4
 8004950:	4629      	mov	r1, r5
 8004952:	f04f 0200 	mov.w	r2, #0
 8004956:	f04f 0300 	mov.w	r3, #0
 800495a:	014b      	lsls	r3, r1, #5
 800495c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004960:	0142      	lsls	r2, r0, #5
 8004962:	4610      	mov	r0, r2
 8004964:	4619      	mov	r1, r3
 8004966:	1b00      	subs	r0, r0, r4
 8004968:	eb61 0105 	sbc.w	r1, r1, r5
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	f04f 0300 	mov.w	r3, #0
 8004974:	018b      	lsls	r3, r1, #6
 8004976:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800497a:	0182      	lsls	r2, r0, #6
 800497c:	1a12      	subs	r2, r2, r0
 800497e:	eb63 0301 	sbc.w	r3, r3, r1
 8004982:	f04f 0000 	mov.w	r0, #0
 8004986:	f04f 0100 	mov.w	r1, #0
 800498a:	00d9      	lsls	r1, r3, #3
 800498c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004990:	00d0      	lsls	r0, r2, #3
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	1912      	adds	r2, r2, r4
 8004998:	eb45 0303 	adc.w	r3, r5, r3
 800499c:	f04f 0000 	mov.w	r0, #0
 80049a0:	f04f 0100 	mov.w	r1, #0
 80049a4:	0299      	lsls	r1, r3, #10
 80049a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80049aa:	0290      	lsls	r0, r2, #10
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4610      	mov	r0, r2
 80049b2:	4619      	mov	r1, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	461a      	mov	r2, r3
 80049b8:	f04f 0300 	mov.w	r3, #0
 80049bc:	f7fc f924 	bl	8000c08 <__aeabi_uldivmod>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4613      	mov	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049c8:	4b0a      	ldr	r3, [pc, #40]	; (80049f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	0c1b      	lsrs	r3, r3, #16
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	3301      	adds	r3, #1
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e0:	60bb      	str	r3, [r7, #8]
      break;
 80049e2:	e002      	b.n	80049ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049e4:	4b04      	ldr	r3, [pc, #16]	; (80049f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80049e6:	60bb      	str	r3, [r7, #8]
      break;
 80049e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ea:	68bb      	ldr	r3, [r7, #8]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bdb0      	pop	{r4, r5, r7, pc}
 80049f4:	40023800 	.word	0x40023800
 80049f8:	00f42400 	.word	0x00f42400
 80049fc:	017d7840 	.word	0x017d7840

08004a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a04:	4b03      	ldr	r3, [pc, #12]	; (8004a14 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a06:	681b      	ldr	r3, [r3, #0]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	20000000 	.word	0x20000000

08004a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a1c:	f7ff fff0 	bl	8004a00 <HAL_RCC_GetHCLKFreq>
 8004a20:	4602      	mov	r2, r0
 8004a22:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	0a9b      	lsrs	r3, r3, #10
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	4903      	ldr	r1, [pc, #12]	; (8004a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a2e:	5ccb      	ldrb	r3, [r1, r3]
 8004a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	0802e360 	.word	0x0802e360

08004a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a44:	f7ff ffdc 	bl	8004a00 <HAL_RCC_GetHCLKFreq>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	0b5b      	lsrs	r3, r3, #13
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	4903      	ldr	r1, [pc, #12]	; (8004a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a56:	5ccb      	ldrb	r3, [r1, r3]
 8004a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40023800 	.word	0x40023800
 8004a64:	0802e360 	.word	0x0802e360

08004a68 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e01c      	b.n	8004ab4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	795b      	ldrb	r3, [r3, #5]
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d105      	bne.n	8004a90 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7fd fafc 	bl	8002088 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f042 0204 	orr.w	r2, r2, #4
 8004aa4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	791b      	ldrb	r3, [r3, #4]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d101      	bne.n	8004ad6 <HAL_RNG_GenerateRandomNumber+0x1a>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e044      	b.n	8004b60 <HAL_RNG_GenerateRandomNumber+0xa4>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	795b      	ldrb	r3, [r3, #5]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d133      	bne.n	8004b4e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2202      	movs	r2, #2
 8004aea:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004aec:	f7ff f880 	bl	8003bf0 <HAL_GetTick>
 8004af0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004af2:	e018      	b.n	8004b26 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004af4:	f7ff f87c 	bl	8003bf0 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d911      	bls.n	8004b26 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d00a      	beq.n	8004b26 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2202      	movs	r2, #2
 8004b1a:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e01c      	b.n	8004b60 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d1df      	bne.n	8004af4 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	715a      	strb	r2, [r3, #5]
 8004b4c:	e004      	b.n	8004b58 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2204      	movs	r2, #4
 8004b52:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	711a      	strb	r2, [r3, #4]

  return status;
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	330c      	adds	r3, #12
 8004b74:	4619      	mov	r1, r3
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff ffa0 	bl	8004abc <HAL_RNG_GenerateRandomNumber>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d102      	bne.n	8004b88 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	e000      	b.n	8004b8a <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8004b88:	2300      	movs	r3, #0
  }
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b082      	sub	sp, #8
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e07b      	b.n	8004c9c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d108      	bne.n	8004bbe <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bb4:	d009      	beq.n	8004bca <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	61da      	str	r2, [r3, #28]
 8004bbc:	e005      	b.n	8004bca <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d106      	bne.n	8004bea <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7fd faa7 	bl	8002138 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2202      	movs	r2, #2
 8004bee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c00:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	431a      	orrs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c44:	431a      	orrs	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4e:	ea42 0103 	orr.w	r1, r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c56:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	0c1b      	lsrs	r3, r3, #16
 8004c68:	f003 0104 	and.w	r1, r3, #4
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	f003 0210 	and.w	r2, r3, #16
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	69da      	ldr	r2, [r3, #28]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	603b      	str	r3, [r7, #0]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d101      	bne.n	8004cc6 <HAL_SPI_Transmit+0x22>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e126      	b.n	8004f14 <HAL_SPI_Transmit+0x270>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cce:	f7fe ff8f 	bl	8003bf0 <HAL_GetTick>
 8004cd2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004cd4:	88fb      	ldrh	r3, [r7, #6]
 8004cd6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d002      	beq.n	8004cea <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ce8:	e10b      	b.n	8004f02 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <HAL_SPI_Transmit+0x52>
 8004cf0:	88fb      	ldrh	r3, [r7, #6]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d102      	bne.n	8004cfc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004cfa:	e102      	b.n	8004f02 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2203      	movs	r2, #3
 8004d00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	88fa      	ldrh	r2, [r7, #6]
 8004d14:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	88fa      	ldrh	r2, [r7, #6]
 8004d1a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d42:	d10f      	bne.n	8004d64 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d62:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6e:	2b40      	cmp	r3, #64	; 0x40
 8004d70:	d007      	beq.n	8004d82 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d8a:	d14b      	bne.n	8004e24 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <HAL_SPI_Transmit+0xf6>
 8004d94:	8afb      	ldrh	r3, [r7, #22]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d13e      	bne.n	8004e18 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9e:	881a      	ldrh	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004daa:	1c9a      	adds	r2, r3, #2
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004dbe:	e02b      	b.n	8004e18 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d112      	bne.n	8004df4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	881a      	ldrh	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	1c9a      	adds	r2, r3, #2
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	86da      	strh	r2, [r3, #54]	; 0x36
 8004df2:	e011      	b.n	8004e18 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004df4:	f7fe fefc 	bl	8003bf0 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d803      	bhi.n	8004e0c <HAL_SPI_Transmit+0x168>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0a:	d102      	bne.n	8004e12 <HAL_SPI_Transmit+0x16e>
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d102      	bne.n	8004e18 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e16:	e074      	b.n	8004f02 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1ce      	bne.n	8004dc0 <HAL_SPI_Transmit+0x11c>
 8004e22:	e04c      	b.n	8004ebe <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <HAL_SPI_Transmit+0x18e>
 8004e2c:	8afb      	ldrh	r3, [r7, #22]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d140      	bne.n	8004eb4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	330c      	adds	r3, #12
 8004e3c:	7812      	ldrb	r2, [r2, #0]
 8004e3e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e58:	e02c      	b.n	8004eb4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d113      	bne.n	8004e90 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	330c      	adds	r3, #12
 8004e72:	7812      	ldrb	r2, [r2, #0]
 8004e74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7a:	1c5a      	adds	r2, r3, #1
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	3b01      	subs	r3, #1
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e8e:	e011      	b.n	8004eb4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e90:	f7fe feae 	bl	8003bf0 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d803      	bhi.n	8004ea8 <HAL_SPI_Transmit+0x204>
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea6:	d102      	bne.n	8004eae <HAL_SPI_Transmit+0x20a>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d102      	bne.n	8004eb4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004eb2:	e026      	b.n	8004f02 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1cd      	bne.n	8004e5a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	6839      	ldr	r1, [r7, #0]
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 f8b2 	bl	800502c <SPI_EndRxTxTransaction>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004edc:	2300      	movs	r3, #0
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	613b      	str	r3, [r7, #16]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	613b      	str	r3, [r7, #16]
 8004ef0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d002      	beq.n	8004f00 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	77fb      	strb	r3, [r7, #31]
 8004efe:	e000      	b.n	8004f02 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004f00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f12:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3720      	adds	r7, #32
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b088      	sub	sp, #32
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	603b      	str	r3, [r7, #0]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f2c:	f7fe fe60 	bl	8003bf0 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f34:	1a9b      	subs	r3, r3, r2
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	4413      	add	r3, r2
 8004f3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f3c:	f7fe fe58 	bl	8003bf0 <HAL_GetTick>
 8004f40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f42:	4b39      	ldr	r3, [pc, #228]	; (8005028 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	015b      	lsls	r3, r3, #5
 8004f48:	0d1b      	lsrs	r3, r3, #20
 8004f4a:	69fa      	ldr	r2, [r7, #28]
 8004f4c:	fb02 f303 	mul.w	r3, r2, r3
 8004f50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f52:	e054      	b.n	8004ffe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5a:	d050      	beq.n	8004ffe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f5c:	f7fe fe48 	bl	8003bf0 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	69fa      	ldr	r2, [r7, #28]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d902      	bls.n	8004f72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d13d      	bne.n	8004fee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f8a:	d111      	bne.n	8004fb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f94:	d004      	beq.n	8004fa0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9e:	d107      	bne.n	8004fb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fb8:	d10f      	bne.n	8004fda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e017      	b.n	800501e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	4013      	ands	r3, r2
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	429a      	cmp	r2, r3
 800500c:	bf0c      	ite	eq
 800500e:	2301      	moveq	r3, #1
 8005010:	2300      	movne	r3, #0
 8005012:	b2db      	uxtb	r3, r3
 8005014:	461a      	mov	r2, r3
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	429a      	cmp	r2, r3
 800501a:	d19b      	bne.n	8004f54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3720      	adds	r7, #32
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	20000000 	.word	0x20000000

0800502c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b088      	sub	sp, #32
 8005030:	af02      	add	r7, sp, #8
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005038:	4b1b      	ldr	r3, [pc, #108]	; (80050a8 <SPI_EndRxTxTransaction+0x7c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a1b      	ldr	r2, [pc, #108]	; (80050ac <SPI_EndRxTxTransaction+0x80>)
 800503e:	fba2 2303 	umull	r2, r3, r2, r3
 8005042:	0d5b      	lsrs	r3, r3, #21
 8005044:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005048:	fb02 f303 	mul.w	r3, r2, r3
 800504c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005056:	d112      	bne.n	800507e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2200      	movs	r2, #0
 8005060:	2180      	movs	r1, #128	; 0x80
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f7ff ff5a 	bl	8004f1c <SPI_WaitFlagStateUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d016      	beq.n	800509c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005072:	f043 0220 	orr.w	r2, r3, #32
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e00f      	b.n	800509e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00a      	beq.n	800509a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	3b01      	subs	r3, #1
 8005088:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005094:	2b80      	cmp	r3, #128	; 0x80
 8005096:	d0f2      	beq.n	800507e <SPI_EndRxTxTransaction+0x52>
 8005098:	e000      	b.n	800509c <SPI_EndRxTxTransaction+0x70>
        break;
 800509a:	bf00      	nop
  }

  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	20000000 	.word	0x20000000
 80050ac:	165e9f81 	.word	0x165e9f81

080050b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e041      	b.n	8005146 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d106      	bne.n	80050dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7fd f9f0 	bl	80024bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3304      	adds	r3, #4
 80050ec:	4619      	mov	r1, r3
 80050ee:	4610      	mov	r0, r2
 80050f0:	f000 f984 	bl	80053fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b01      	cmp	r3, #1
 8005162:	d001      	beq.n	8005168 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e046      	b.n	80051f6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a23      	ldr	r2, [pc, #140]	; (8005204 <HAL_TIM_Base_Start+0xb4>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d022      	beq.n	80051c0 <HAL_TIM_Base_Start+0x70>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005182:	d01d      	beq.n	80051c0 <HAL_TIM_Base_Start+0x70>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a1f      	ldr	r2, [pc, #124]	; (8005208 <HAL_TIM_Base_Start+0xb8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d018      	beq.n	80051c0 <HAL_TIM_Base_Start+0x70>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a1e      	ldr	r2, [pc, #120]	; (800520c <HAL_TIM_Base_Start+0xbc>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d013      	beq.n	80051c0 <HAL_TIM_Base_Start+0x70>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1c      	ldr	r2, [pc, #112]	; (8005210 <HAL_TIM_Base_Start+0xc0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00e      	beq.n	80051c0 <HAL_TIM_Base_Start+0x70>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1b      	ldr	r2, [pc, #108]	; (8005214 <HAL_TIM_Base_Start+0xc4>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d009      	beq.n	80051c0 <HAL_TIM_Base_Start+0x70>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a19      	ldr	r2, [pc, #100]	; (8005218 <HAL_TIM_Base_Start+0xc8>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d004      	beq.n	80051c0 <HAL_TIM_Base_Start+0x70>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a18      	ldr	r2, [pc, #96]	; (800521c <HAL_TIM_Base_Start+0xcc>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d111      	bne.n	80051e4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2b06      	cmp	r3, #6
 80051d0:	d010      	beq.n	80051f4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f042 0201 	orr.w	r2, r2, #1
 80051e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e2:	e007      	b.n	80051f4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0201 	orr.w	r2, r2, #1
 80051f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	40010000 	.word	0x40010000
 8005208:	40000400 	.word	0x40000400
 800520c:	40000800 	.word	0x40000800
 8005210:	40000c00 	.word	0x40000c00
 8005214:	40010400 	.word	0x40010400
 8005218:	40014000 	.word	0x40014000
 800521c:	40001800 	.word	0x40001800

08005220 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6a1a      	ldr	r2, [r3, #32]
 800522e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005232:	4013      	ands	r3, r2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10f      	bne.n	8005258 <HAL_TIM_Base_Stop+0x38>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6a1a      	ldr	r2, [r3, #32]
 800523e:	f240 4344 	movw	r3, #1092	; 0x444
 8005242:	4013      	ands	r3, r2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d107      	bne.n	8005258 <HAL_TIM_Base_Stop+0x38>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0201 	bic.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b084      	sub	sp, #16
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
 8005276:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005278:	2300      	movs	r3, #0
 800527a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005282:	2b01      	cmp	r3, #1
 8005284:	d101      	bne.n	800528a <HAL_TIM_ConfigClockSource+0x1c>
 8005286:	2302      	movs	r3, #2
 8005288:	e0b4      	b.n	80053f4 <HAL_TIM_ConfigClockSource+0x186>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2202      	movs	r2, #2
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052a8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052b0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052c2:	d03e      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0xd4>
 80052c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052c8:	f200 8087 	bhi.w	80053da <HAL_TIM_ConfigClockSource+0x16c>
 80052cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d0:	f000 8086 	beq.w	80053e0 <HAL_TIM_ConfigClockSource+0x172>
 80052d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052d8:	d87f      	bhi.n	80053da <HAL_TIM_ConfigClockSource+0x16c>
 80052da:	2b70      	cmp	r3, #112	; 0x70
 80052dc:	d01a      	beq.n	8005314 <HAL_TIM_ConfigClockSource+0xa6>
 80052de:	2b70      	cmp	r3, #112	; 0x70
 80052e0:	d87b      	bhi.n	80053da <HAL_TIM_ConfigClockSource+0x16c>
 80052e2:	2b60      	cmp	r3, #96	; 0x60
 80052e4:	d050      	beq.n	8005388 <HAL_TIM_ConfigClockSource+0x11a>
 80052e6:	2b60      	cmp	r3, #96	; 0x60
 80052e8:	d877      	bhi.n	80053da <HAL_TIM_ConfigClockSource+0x16c>
 80052ea:	2b50      	cmp	r3, #80	; 0x50
 80052ec:	d03c      	beq.n	8005368 <HAL_TIM_ConfigClockSource+0xfa>
 80052ee:	2b50      	cmp	r3, #80	; 0x50
 80052f0:	d873      	bhi.n	80053da <HAL_TIM_ConfigClockSource+0x16c>
 80052f2:	2b40      	cmp	r3, #64	; 0x40
 80052f4:	d058      	beq.n	80053a8 <HAL_TIM_ConfigClockSource+0x13a>
 80052f6:	2b40      	cmp	r3, #64	; 0x40
 80052f8:	d86f      	bhi.n	80053da <HAL_TIM_ConfigClockSource+0x16c>
 80052fa:	2b30      	cmp	r3, #48	; 0x30
 80052fc:	d064      	beq.n	80053c8 <HAL_TIM_ConfigClockSource+0x15a>
 80052fe:	2b30      	cmp	r3, #48	; 0x30
 8005300:	d86b      	bhi.n	80053da <HAL_TIM_ConfigClockSource+0x16c>
 8005302:	2b20      	cmp	r3, #32
 8005304:	d060      	beq.n	80053c8 <HAL_TIM_ConfigClockSource+0x15a>
 8005306:	2b20      	cmp	r3, #32
 8005308:	d867      	bhi.n	80053da <HAL_TIM_ConfigClockSource+0x16c>
 800530a:	2b00      	cmp	r3, #0
 800530c:	d05c      	beq.n	80053c8 <HAL_TIM_ConfigClockSource+0x15a>
 800530e:	2b10      	cmp	r3, #16
 8005310:	d05a      	beq.n	80053c8 <HAL_TIM_ConfigClockSource+0x15a>
 8005312:	e062      	b.n	80053da <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6818      	ldr	r0, [r3, #0]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	6899      	ldr	r1, [r3, #8]
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f000 f984 	bl	8005630 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005336:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	609a      	str	r2, [r3, #8]
      break;
 8005340:	e04f      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6818      	ldr	r0, [r3, #0]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	6899      	ldr	r1, [r3, #8]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f000 f96d 	bl	8005630 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689a      	ldr	r2, [r3, #8]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005364:	609a      	str	r2, [r3, #8]
      break;
 8005366:	e03c      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6818      	ldr	r0, [r3, #0]
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	6859      	ldr	r1, [r3, #4]
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	461a      	mov	r2, r3
 8005376:	f000 f8e1 	bl	800553c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2150      	movs	r1, #80	; 0x50
 8005380:	4618      	mov	r0, r3
 8005382:	f000 f93a 	bl	80055fa <TIM_ITRx_SetConfig>
      break;
 8005386:	e02c      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6818      	ldr	r0, [r3, #0]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	6859      	ldr	r1, [r3, #4]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	461a      	mov	r2, r3
 8005396:	f000 f900 	bl	800559a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2160      	movs	r1, #96	; 0x60
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 f92a 	bl	80055fa <TIM_ITRx_SetConfig>
      break;
 80053a6:	e01c      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6818      	ldr	r0, [r3, #0]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	6859      	ldr	r1, [r3, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	461a      	mov	r2, r3
 80053b6:	f000 f8c1 	bl	800553c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2140      	movs	r1, #64	; 0x40
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 f91a 	bl	80055fa <TIM_ITRx_SetConfig>
      break;
 80053c6:	e00c      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4619      	mov	r1, r3
 80053d2:	4610      	mov	r0, r2
 80053d4:	f000 f911 	bl	80055fa <TIM_ITRx_SetConfig>
      break;
 80053d8:	e003      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	73fb      	strb	r3, [r7, #15]
      break;
 80053de:	e000      	b.n	80053e2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80053e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a40      	ldr	r2, [pc, #256]	; (8005510 <TIM_Base_SetConfig+0x114>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d013      	beq.n	800543c <TIM_Base_SetConfig+0x40>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541a:	d00f      	beq.n	800543c <TIM_Base_SetConfig+0x40>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a3d      	ldr	r2, [pc, #244]	; (8005514 <TIM_Base_SetConfig+0x118>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d00b      	beq.n	800543c <TIM_Base_SetConfig+0x40>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a3c      	ldr	r2, [pc, #240]	; (8005518 <TIM_Base_SetConfig+0x11c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d007      	beq.n	800543c <TIM_Base_SetConfig+0x40>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a3b      	ldr	r2, [pc, #236]	; (800551c <TIM_Base_SetConfig+0x120>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d003      	beq.n	800543c <TIM_Base_SetConfig+0x40>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a3a      	ldr	r2, [pc, #232]	; (8005520 <TIM_Base_SetConfig+0x124>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d108      	bne.n	800544e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a2f      	ldr	r2, [pc, #188]	; (8005510 <TIM_Base_SetConfig+0x114>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d02b      	beq.n	80054ae <TIM_Base_SetConfig+0xb2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545c:	d027      	beq.n	80054ae <TIM_Base_SetConfig+0xb2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a2c      	ldr	r2, [pc, #176]	; (8005514 <TIM_Base_SetConfig+0x118>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d023      	beq.n	80054ae <TIM_Base_SetConfig+0xb2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a2b      	ldr	r2, [pc, #172]	; (8005518 <TIM_Base_SetConfig+0x11c>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d01f      	beq.n	80054ae <TIM_Base_SetConfig+0xb2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a2a      	ldr	r2, [pc, #168]	; (800551c <TIM_Base_SetConfig+0x120>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d01b      	beq.n	80054ae <TIM_Base_SetConfig+0xb2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a29      	ldr	r2, [pc, #164]	; (8005520 <TIM_Base_SetConfig+0x124>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d017      	beq.n	80054ae <TIM_Base_SetConfig+0xb2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a28      	ldr	r2, [pc, #160]	; (8005524 <TIM_Base_SetConfig+0x128>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d013      	beq.n	80054ae <TIM_Base_SetConfig+0xb2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a27      	ldr	r2, [pc, #156]	; (8005528 <TIM_Base_SetConfig+0x12c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d00f      	beq.n	80054ae <TIM_Base_SetConfig+0xb2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a26      	ldr	r2, [pc, #152]	; (800552c <TIM_Base_SetConfig+0x130>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d00b      	beq.n	80054ae <TIM_Base_SetConfig+0xb2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a25      	ldr	r2, [pc, #148]	; (8005530 <TIM_Base_SetConfig+0x134>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d007      	beq.n	80054ae <TIM_Base_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a24      	ldr	r2, [pc, #144]	; (8005534 <TIM_Base_SetConfig+0x138>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d003      	beq.n	80054ae <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a23      	ldr	r2, [pc, #140]	; (8005538 <TIM_Base_SetConfig+0x13c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d108      	bne.n	80054c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	695b      	ldr	r3, [r3, #20]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	689a      	ldr	r2, [r3, #8]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a0a      	ldr	r2, [pc, #40]	; (8005510 <TIM_Base_SetConfig+0x114>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d003      	beq.n	80054f4 <TIM_Base_SetConfig+0xf8>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a0c      	ldr	r2, [pc, #48]	; (8005520 <TIM_Base_SetConfig+0x124>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d103      	bne.n	80054fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	691a      	ldr	r2, [r3, #16]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	615a      	str	r2, [r3, #20]
}
 8005502:	bf00      	nop
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	40010000 	.word	0x40010000
 8005514:	40000400 	.word	0x40000400
 8005518:	40000800 	.word	0x40000800
 800551c:	40000c00 	.word	0x40000c00
 8005520:	40010400 	.word	0x40010400
 8005524:	40014000 	.word	0x40014000
 8005528:	40014400 	.word	0x40014400
 800552c:	40014800 	.word	0x40014800
 8005530:	40001800 	.word	0x40001800
 8005534:	40001c00 	.word	0x40001c00
 8005538:	40002000 	.word	0x40002000

0800553c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	f023 0201 	bic.w	r2, r3, #1
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005566:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4313      	orrs	r3, r2
 8005570:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f023 030a 	bic.w	r3, r3, #10
 8005578:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4313      	orrs	r3, r2
 8005580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	621a      	str	r2, [r3, #32]
}
 800558e:	bf00      	nop
 8005590:	371c      	adds	r7, #28
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800559a:	b480      	push	{r7}
 800559c:	b087      	sub	sp, #28
 800559e:	af00      	add	r7, sp, #0
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	f023 0210 	bic.w	r2, r3, #16
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	031b      	lsls	r3, r3, #12
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	4313      	orrs	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	621a      	str	r2, [r3, #32]
}
 80055ee:	bf00      	nop
 80055f0:	371c      	adds	r7, #28
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055fa:	b480      	push	{r7}
 80055fc:	b085      	sub	sp, #20
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005610:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4313      	orrs	r3, r2
 8005618:	f043 0307 	orr.w	r3, r3, #7
 800561c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	609a      	str	r2, [r3, #8]
}
 8005624:	bf00      	nop
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
 800563c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800564a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	021a      	lsls	r2, r3, #8
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	431a      	orrs	r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	4313      	orrs	r3, r2
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	4313      	orrs	r3, r2
 800565c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	609a      	str	r2, [r3, #8]
}
 8005664:	bf00      	nop
 8005666:	371c      	adds	r7, #28
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005670:	b480      	push	{r7}
 8005672:	b085      	sub	sp, #20
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005684:	2302      	movs	r3, #2
 8005686:	e05a      	b.n	800573e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a21      	ldr	r2, [pc, #132]	; (800574c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d022      	beq.n	8005712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d4:	d01d      	beq.n	8005712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a1d      	ldr	r2, [pc, #116]	; (8005750 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d018      	beq.n	8005712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a1b      	ldr	r2, [pc, #108]	; (8005754 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d013      	beq.n	8005712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a1a      	ldr	r2, [pc, #104]	; (8005758 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00e      	beq.n	8005712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a18      	ldr	r2, [pc, #96]	; (800575c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d009      	beq.n	8005712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a17      	ldr	r2, [pc, #92]	; (8005760 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d004      	beq.n	8005712 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a15      	ldr	r2, [pc, #84]	; (8005764 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d10c      	bne.n	800572c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005718:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	4313      	orrs	r3, r2
 8005722:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	40010000 	.word	0x40010000
 8005750:	40000400 	.word	0x40000400
 8005754:	40000800 	.word	0x40000800
 8005758:	40000c00 	.word	0x40000c00
 800575c:	40010400 	.word	0x40010400
 8005760:	40014000 	.word	0x40014000
 8005764:	40001800 	.word	0x40001800

08005768 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e03f      	b.n	80057fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7fc fee0 	bl	8002554 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2224      	movs	r2, #36	; 0x24
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f829 	bl	8005804 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	691a      	ldr	r2, [r3, #16]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695a      	ldr	r2, [r3, #20]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68da      	ldr	r2, [r3, #12]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005808:	b09f      	sub	sp, #124	; 0x7c
 800580a:	af00      	add	r7, sp, #0
 800580c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800580e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800581a:	68d9      	ldr	r1, [r3, #12]
 800581c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	ea40 0301 	orr.w	r3, r0, r1
 8005824:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005828:	689a      	ldr	r2, [r3, #8]
 800582a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	431a      	orrs	r2, r3
 8005830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	431a      	orrs	r2, r3
 8005836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	4313      	orrs	r3, r2
 800583c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800583e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005848:	f021 010c 	bic.w	r1, r1, #12
 800584c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005852:	430b      	orrs	r3, r1
 8005854:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005862:	6999      	ldr	r1, [r3, #24]
 8005864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	ea40 0301 	orr.w	r3, r0, r1
 800586c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800586e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	4bc5      	ldr	r3, [pc, #788]	; (8005b88 <UART_SetConfig+0x384>)
 8005874:	429a      	cmp	r2, r3
 8005876:	d004      	beq.n	8005882 <UART_SetConfig+0x7e>
 8005878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	4bc3      	ldr	r3, [pc, #780]	; (8005b8c <UART_SetConfig+0x388>)
 800587e:	429a      	cmp	r2, r3
 8005880:	d103      	bne.n	800588a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005882:	f7ff f8dd 	bl	8004a40 <HAL_RCC_GetPCLK2Freq>
 8005886:	6778      	str	r0, [r7, #116]	; 0x74
 8005888:	e002      	b.n	8005890 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800588a:	f7ff f8c5 	bl	8004a18 <HAL_RCC_GetPCLK1Freq>
 800588e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005890:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005898:	f040 80b6 	bne.w	8005a08 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800589c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800589e:	461c      	mov	r4, r3
 80058a0:	f04f 0500 	mov.w	r5, #0
 80058a4:	4622      	mov	r2, r4
 80058a6:	462b      	mov	r3, r5
 80058a8:	1891      	adds	r1, r2, r2
 80058aa:	6439      	str	r1, [r7, #64]	; 0x40
 80058ac:	415b      	adcs	r3, r3
 80058ae:	647b      	str	r3, [r7, #68]	; 0x44
 80058b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058b4:	1912      	adds	r2, r2, r4
 80058b6:	eb45 0303 	adc.w	r3, r5, r3
 80058ba:	f04f 0000 	mov.w	r0, #0
 80058be:	f04f 0100 	mov.w	r1, #0
 80058c2:	00d9      	lsls	r1, r3, #3
 80058c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058c8:	00d0      	lsls	r0, r2, #3
 80058ca:	4602      	mov	r2, r0
 80058cc:	460b      	mov	r3, r1
 80058ce:	1911      	adds	r1, r2, r4
 80058d0:	6639      	str	r1, [r7, #96]	; 0x60
 80058d2:	416b      	adcs	r3, r5
 80058d4:	667b      	str	r3, [r7, #100]	; 0x64
 80058d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	461a      	mov	r2, r3
 80058dc:	f04f 0300 	mov.w	r3, #0
 80058e0:	1891      	adds	r1, r2, r2
 80058e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80058e4:	415b      	adcs	r3, r3
 80058e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80058ec:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80058f0:	f7fb f98a 	bl	8000c08 <__aeabi_uldivmod>
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	4ba5      	ldr	r3, [pc, #660]	; (8005b90 <UART_SetConfig+0x38c>)
 80058fa:	fba3 2302 	umull	r2, r3, r3, r2
 80058fe:	095b      	lsrs	r3, r3, #5
 8005900:	011e      	lsls	r6, r3, #4
 8005902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005904:	461c      	mov	r4, r3
 8005906:	f04f 0500 	mov.w	r5, #0
 800590a:	4622      	mov	r2, r4
 800590c:	462b      	mov	r3, r5
 800590e:	1891      	adds	r1, r2, r2
 8005910:	6339      	str	r1, [r7, #48]	; 0x30
 8005912:	415b      	adcs	r3, r3
 8005914:	637b      	str	r3, [r7, #52]	; 0x34
 8005916:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800591a:	1912      	adds	r2, r2, r4
 800591c:	eb45 0303 	adc.w	r3, r5, r3
 8005920:	f04f 0000 	mov.w	r0, #0
 8005924:	f04f 0100 	mov.w	r1, #0
 8005928:	00d9      	lsls	r1, r3, #3
 800592a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800592e:	00d0      	lsls	r0, r2, #3
 8005930:	4602      	mov	r2, r0
 8005932:	460b      	mov	r3, r1
 8005934:	1911      	adds	r1, r2, r4
 8005936:	65b9      	str	r1, [r7, #88]	; 0x58
 8005938:	416b      	adcs	r3, r5
 800593a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800593c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	461a      	mov	r2, r3
 8005942:	f04f 0300 	mov.w	r3, #0
 8005946:	1891      	adds	r1, r2, r2
 8005948:	62b9      	str	r1, [r7, #40]	; 0x28
 800594a:	415b      	adcs	r3, r3
 800594c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800594e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005952:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005956:	f7fb f957 	bl	8000c08 <__aeabi_uldivmod>
 800595a:	4602      	mov	r2, r0
 800595c:	460b      	mov	r3, r1
 800595e:	4b8c      	ldr	r3, [pc, #560]	; (8005b90 <UART_SetConfig+0x38c>)
 8005960:	fba3 1302 	umull	r1, r3, r3, r2
 8005964:	095b      	lsrs	r3, r3, #5
 8005966:	2164      	movs	r1, #100	; 0x64
 8005968:	fb01 f303 	mul.w	r3, r1, r3
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	00db      	lsls	r3, r3, #3
 8005970:	3332      	adds	r3, #50	; 0x32
 8005972:	4a87      	ldr	r2, [pc, #540]	; (8005b90 <UART_SetConfig+0x38c>)
 8005974:	fba2 2303 	umull	r2, r3, r2, r3
 8005978:	095b      	lsrs	r3, r3, #5
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005980:	441e      	add	r6, r3
 8005982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005984:	4618      	mov	r0, r3
 8005986:	f04f 0100 	mov.w	r1, #0
 800598a:	4602      	mov	r2, r0
 800598c:	460b      	mov	r3, r1
 800598e:	1894      	adds	r4, r2, r2
 8005990:	623c      	str	r4, [r7, #32]
 8005992:	415b      	adcs	r3, r3
 8005994:	627b      	str	r3, [r7, #36]	; 0x24
 8005996:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800599a:	1812      	adds	r2, r2, r0
 800599c:	eb41 0303 	adc.w	r3, r1, r3
 80059a0:	f04f 0400 	mov.w	r4, #0
 80059a4:	f04f 0500 	mov.w	r5, #0
 80059a8:	00dd      	lsls	r5, r3, #3
 80059aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059ae:	00d4      	lsls	r4, r2, #3
 80059b0:	4622      	mov	r2, r4
 80059b2:	462b      	mov	r3, r5
 80059b4:	1814      	adds	r4, r2, r0
 80059b6:	653c      	str	r4, [r7, #80]	; 0x50
 80059b8:	414b      	adcs	r3, r1
 80059ba:	657b      	str	r3, [r7, #84]	; 0x54
 80059bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	461a      	mov	r2, r3
 80059c2:	f04f 0300 	mov.w	r3, #0
 80059c6:	1891      	adds	r1, r2, r2
 80059c8:	61b9      	str	r1, [r7, #24]
 80059ca:	415b      	adcs	r3, r3
 80059cc:	61fb      	str	r3, [r7, #28]
 80059ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059d2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80059d6:	f7fb f917 	bl	8000c08 <__aeabi_uldivmod>
 80059da:	4602      	mov	r2, r0
 80059dc:	460b      	mov	r3, r1
 80059de:	4b6c      	ldr	r3, [pc, #432]	; (8005b90 <UART_SetConfig+0x38c>)
 80059e0:	fba3 1302 	umull	r1, r3, r3, r2
 80059e4:	095b      	lsrs	r3, r3, #5
 80059e6:	2164      	movs	r1, #100	; 0x64
 80059e8:	fb01 f303 	mul.w	r3, r1, r3
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	3332      	adds	r3, #50	; 0x32
 80059f2:	4a67      	ldr	r2, [pc, #412]	; (8005b90 <UART_SetConfig+0x38c>)
 80059f4:	fba2 2303 	umull	r2, r3, r2, r3
 80059f8:	095b      	lsrs	r3, r3, #5
 80059fa:	f003 0207 	and.w	r2, r3, #7
 80059fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4432      	add	r2, r6
 8005a04:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a06:	e0b9      	b.n	8005b7c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a0a:	461c      	mov	r4, r3
 8005a0c:	f04f 0500 	mov.w	r5, #0
 8005a10:	4622      	mov	r2, r4
 8005a12:	462b      	mov	r3, r5
 8005a14:	1891      	adds	r1, r2, r2
 8005a16:	6139      	str	r1, [r7, #16]
 8005a18:	415b      	adcs	r3, r3
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005a20:	1912      	adds	r2, r2, r4
 8005a22:	eb45 0303 	adc.w	r3, r5, r3
 8005a26:	f04f 0000 	mov.w	r0, #0
 8005a2a:	f04f 0100 	mov.w	r1, #0
 8005a2e:	00d9      	lsls	r1, r3, #3
 8005a30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a34:	00d0      	lsls	r0, r2, #3
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	eb12 0804 	adds.w	r8, r2, r4
 8005a3e:	eb43 0905 	adc.w	r9, r3, r5
 8005a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f04f 0100 	mov.w	r1, #0
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	008b      	lsls	r3, r1, #2
 8005a56:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a5a:	0082      	lsls	r2, r0, #2
 8005a5c:	4640      	mov	r0, r8
 8005a5e:	4649      	mov	r1, r9
 8005a60:	f7fb f8d2 	bl	8000c08 <__aeabi_uldivmod>
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	4b49      	ldr	r3, [pc, #292]	; (8005b90 <UART_SetConfig+0x38c>)
 8005a6a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a6e:	095b      	lsrs	r3, r3, #5
 8005a70:	011e      	lsls	r6, r3, #4
 8005a72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a74:	4618      	mov	r0, r3
 8005a76:	f04f 0100 	mov.w	r1, #0
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	1894      	adds	r4, r2, r2
 8005a80:	60bc      	str	r4, [r7, #8]
 8005a82:	415b      	adcs	r3, r3
 8005a84:	60fb      	str	r3, [r7, #12]
 8005a86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a8a:	1812      	adds	r2, r2, r0
 8005a8c:	eb41 0303 	adc.w	r3, r1, r3
 8005a90:	f04f 0400 	mov.w	r4, #0
 8005a94:	f04f 0500 	mov.w	r5, #0
 8005a98:	00dd      	lsls	r5, r3, #3
 8005a9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a9e:	00d4      	lsls	r4, r2, #3
 8005aa0:	4622      	mov	r2, r4
 8005aa2:	462b      	mov	r3, r5
 8005aa4:	1814      	adds	r4, r2, r0
 8005aa6:	64bc      	str	r4, [r7, #72]	; 0x48
 8005aa8:	414b      	adcs	r3, r1
 8005aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f04f 0100 	mov.w	r1, #0
 8005ab6:	f04f 0200 	mov.w	r2, #0
 8005aba:	f04f 0300 	mov.w	r3, #0
 8005abe:	008b      	lsls	r3, r1, #2
 8005ac0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ac4:	0082      	lsls	r2, r0, #2
 8005ac6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005aca:	f7fb f89d 	bl	8000c08 <__aeabi_uldivmod>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4b2f      	ldr	r3, [pc, #188]	; (8005b90 <UART_SetConfig+0x38c>)
 8005ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ad8:	095b      	lsrs	r3, r3, #5
 8005ada:	2164      	movs	r1, #100	; 0x64
 8005adc:	fb01 f303 	mul.w	r3, r1, r3
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	3332      	adds	r3, #50	; 0x32
 8005ae6:	4a2a      	ldr	r2, [pc, #168]	; (8005b90 <UART_SetConfig+0x38c>)
 8005ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005af2:	441e      	add	r6, r3
 8005af4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005af6:	4618      	mov	r0, r3
 8005af8:	f04f 0100 	mov.w	r1, #0
 8005afc:	4602      	mov	r2, r0
 8005afe:	460b      	mov	r3, r1
 8005b00:	1894      	adds	r4, r2, r2
 8005b02:	603c      	str	r4, [r7, #0]
 8005b04:	415b      	adcs	r3, r3
 8005b06:	607b      	str	r3, [r7, #4]
 8005b08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b0c:	1812      	adds	r2, r2, r0
 8005b0e:	eb41 0303 	adc.w	r3, r1, r3
 8005b12:	f04f 0400 	mov.w	r4, #0
 8005b16:	f04f 0500 	mov.w	r5, #0
 8005b1a:	00dd      	lsls	r5, r3, #3
 8005b1c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b20:	00d4      	lsls	r4, r2, #3
 8005b22:	4622      	mov	r2, r4
 8005b24:	462b      	mov	r3, r5
 8005b26:	eb12 0a00 	adds.w	sl, r2, r0
 8005b2a:	eb43 0b01 	adc.w	fp, r3, r1
 8005b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f04f 0100 	mov.w	r1, #0
 8005b38:	f04f 0200 	mov.w	r2, #0
 8005b3c:	f04f 0300 	mov.w	r3, #0
 8005b40:	008b      	lsls	r3, r1, #2
 8005b42:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b46:	0082      	lsls	r2, r0, #2
 8005b48:	4650      	mov	r0, sl
 8005b4a:	4659      	mov	r1, fp
 8005b4c:	f7fb f85c 	bl	8000c08 <__aeabi_uldivmod>
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	4b0e      	ldr	r3, [pc, #56]	; (8005b90 <UART_SetConfig+0x38c>)
 8005b56:	fba3 1302 	umull	r1, r3, r3, r2
 8005b5a:	095b      	lsrs	r3, r3, #5
 8005b5c:	2164      	movs	r1, #100	; 0x64
 8005b5e:	fb01 f303 	mul.w	r3, r1, r3
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	011b      	lsls	r3, r3, #4
 8005b66:	3332      	adds	r3, #50	; 0x32
 8005b68:	4a09      	ldr	r2, [pc, #36]	; (8005b90 <UART_SetConfig+0x38c>)
 8005b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6e:	095b      	lsrs	r3, r3, #5
 8005b70:	f003 020f 	and.w	r2, r3, #15
 8005b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4432      	add	r2, r6
 8005b7a:	609a      	str	r2, [r3, #8]
}
 8005b7c:	bf00      	nop
 8005b7e:	377c      	adds	r7, #124	; 0x7c
 8005b80:	46bd      	mov	sp, r7
 8005b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b86:	bf00      	nop
 8005b88:	40011000 	.word	0x40011000
 8005b8c:	40011400 	.word	0x40011400
 8005b90:	51eb851f 	.word	0x51eb851f

08005b94 <__errno>:
 8005b94:	4b01      	ldr	r3, [pc, #4]	; (8005b9c <__errno+0x8>)
 8005b96:	6818      	ldr	r0, [r3, #0]
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	20000010 	.word	0x20000010

08005ba0 <__libc_init_array>:
 8005ba0:	b570      	push	{r4, r5, r6, lr}
 8005ba2:	4d0d      	ldr	r5, [pc, #52]	; (8005bd8 <__libc_init_array+0x38>)
 8005ba4:	4c0d      	ldr	r4, [pc, #52]	; (8005bdc <__libc_init_array+0x3c>)
 8005ba6:	1b64      	subs	r4, r4, r5
 8005ba8:	10a4      	asrs	r4, r4, #2
 8005baa:	2600      	movs	r6, #0
 8005bac:	42a6      	cmp	r6, r4
 8005bae:	d109      	bne.n	8005bc4 <__libc_init_array+0x24>
 8005bb0:	4d0b      	ldr	r5, [pc, #44]	; (8005be0 <__libc_init_array+0x40>)
 8005bb2:	4c0c      	ldr	r4, [pc, #48]	; (8005be4 <__libc_init_array+0x44>)
 8005bb4:	f002 feb6 	bl	8008924 <_init>
 8005bb8:	1b64      	subs	r4, r4, r5
 8005bba:	10a4      	asrs	r4, r4, #2
 8005bbc:	2600      	movs	r6, #0
 8005bbe:	42a6      	cmp	r6, r4
 8005bc0:	d105      	bne.n	8005bce <__libc_init_array+0x2e>
 8005bc2:	bd70      	pop	{r4, r5, r6, pc}
 8005bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bc8:	4798      	blx	r3
 8005bca:	3601      	adds	r6, #1
 8005bcc:	e7ee      	b.n	8005bac <__libc_init_array+0xc>
 8005bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd2:	4798      	blx	r3
 8005bd4:	3601      	adds	r6, #1
 8005bd6:	e7f2      	b.n	8005bbe <__libc_init_array+0x1e>
 8005bd8:	0802e994 	.word	0x0802e994
 8005bdc:	0802e994 	.word	0x0802e994
 8005be0:	0802e994 	.word	0x0802e994
 8005be4:	0802e998 	.word	0x0802e998

08005be8 <memset>:
 8005be8:	4402      	add	r2, r0
 8005bea:	4603      	mov	r3, r0
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d100      	bne.n	8005bf2 <memset+0xa>
 8005bf0:	4770      	bx	lr
 8005bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8005bf6:	e7f9      	b.n	8005bec <memset+0x4>

08005bf8 <__cvt>:
 8005bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bfc:	ec55 4b10 	vmov	r4, r5, d0
 8005c00:	2d00      	cmp	r5, #0
 8005c02:	460e      	mov	r6, r1
 8005c04:	4619      	mov	r1, r3
 8005c06:	462b      	mov	r3, r5
 8005c08:	bfbb      	ittet	lt
 8005c0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005c0e:	461d      	movlt	r5, r3
 8005c10:	2300      	movge	r3, #0
 8005c12:	232d      	movlt	r3, #45	; 0x2d
 8005c14:	700b      	strb	r3, [r1, #0]
 8005c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005c1c:	4691      	mov	r9, r2
 8005c1e:	f023 0820 	bic.w	r8, r3, #32
 8005c22:	bfbc      	itt	lt
 8005c24:	4622      	movlt	r2, r4
 8005c26:	4614      	movlt	r4, r2
 8005c28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c2c:	d005      	beq.n	8005c3a <__cvt+0x42>
 8005c2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005c32:	d100      	bne.n	8005c36 <__cvt+0x3e>
 8005c34:	3601      	adds	r6, #1
 8005c36:	2102      	movs	r1, #2
 8005c38:	e000      	b.n	8005c3c <__cvt+0x44>
 8005c3a:	2103      	movs	r1, #3
 8005c3c:	ab03      	add	r3, sp, #12
 8005c3e:	9301      	str	r3, [sp, #4]
 8005c40:	ab02      	add	r3, sp, #8
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	ec45 4b10 	vmov	d0, r4, r5
 8005c48:	4653      	mov	r3, sl
 8005c4a:	4632      	mov	r2, r6
 8005c4c:	f000 fcec 	bl	8006628 <_dtoa_r>
 8005c50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005c54:	4607      	mov	r7, r0
 8005c56:	d102      	bne.n	8005c5e <__cvt+0x66>
 8005c58:	f019 0f01 	tst.w	r9, #1
 8005c5c:	d022      	beq.n	8005ca4 <__cvt+0xac>
 8005c5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005c62:	eb07 0906 	add.w	r9, r7, r6
 8005c66:	d110      	bne.n	8005c8a <__cvt+0x92>
 8005c68:	783b      	ldrb	r3, [r7, #0]
 8005c6a:	2b30      	cmp	r3, #48	; 0x30
 8005c6c:	d10a      	bne.n	8005c84 <__cvt+0x8c>
 8005c6e:	2200      	movs	r2, #0
 8005c70:	2300      	movs	r3, #0
 8005c72:	4620      	mov	r0, r4
 8005c74:	4629      	mov	r1, r5
 8005c76:	f7fa ff37 	bl	8000ae8 <__aeabi_dcmpeq>
 8005c7a:	b918      	cbnz	r0, 8005c84 <__cvt+0x8c>
 8005c7c:	f1c6 0601 	rsb	r6, r6, #1
 8005c80:	f8ca 6000 	str.w	r6, [sl]
 8005c84:	f8da 3000 	ldr.w	r3, [sl]
 8005c88:	4499      	add	r9, r3
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	4620      	mov	r0, r4
 8005c90:	4629      	mov	r1, r5
 8005c92:	f7fa ff29 	bl	8000ae8 <__aeabi_dcmpeq>
 8005c96:	b108      	cbz	r0, 8005c9c <__cvt+0xa4>
 8005c98:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c9c:	2230      	movs	r2, #48	; 0x30
 8005c9e:	9b03      	ldr	r3, [sp, #12]
 8005ca0:	454b      	cmp	r3, r9
 8005ca2:	d307      	bcc.n	8005cb4 <__cvt+0xbc>
 8005ca4:	9b03      	ldr	r3, [sp, #12]
 8005ca6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ca8:	1bdb      	subs	r3, r3, r7
 8005caa:	4638      	mov	r0, r7
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	b004      	add	sp, #16
 8005cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb4:	1c59      	adds	r1, r3, #1
 8005cb6:	9103      	str	r1, [sp, #12]
 8005cb8:	701a      	strb	r2, [r3, #0]
 8005cba:	e7f0      	b.n	8005c9e <__cvt+0xa6>

08005cbc <__exponent>:
 8005cbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2900      	cmp	r1, #0
 8005cc2:	bfb8      	it	lt
 8005cc4:	4249      	neglt	r1, r1
 8005cc6:	f803 2b02 	strb.w	r2, [r3], #2
 8005cca:	bfb4      	ite	lt
 8005ccc:	222d      	movlt	r2, #45	; 0x2d
 8005cce:	222b      	movge	r2, #43	; 0x2b
 8005cd0:	2909      	cmp	r1, #9
 8005cd2:	7042      	strb	r2, [r0, #1]
 8005cd4:	dd2a      	ble.n	8005d2c <__exponent+0x70>
 8005cd6:	f10d 0407 	add.w	r4, sp, #7
 8005cda:	46a4      	mov	ip, r4
 8005cdc:	270a      	movs	r7, #10
 8005cde:	46a6      	mov	lr, r4
 8005ce0:	460a      	mov	r2, r1
 8005ce2:	fb91 f6f7 	sdiv	r6, r1, r7
 8005ce6:	fb07 1516 	mls	r5, r7, r6, r1
 8005cea:	3530      	adds	r5, #48	; 0x30
 8005cec:	2a63      	cmp	r2, #99	; 0x63
 8005cee:	f104 34ff 	add.w	r4, r4, #4294967295
 8005cf2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005cf6:	4631      	mov	r1, r6
 8005cf8:	dcf1      	bgt.n	8005cde <__exponent+0x22>
 8005cfa:	3130      	adds	r1, #48	; 0x30
 8005cfc:	f1ae 0502 	sub.w	r5, lr, #2
 8005d00:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005d04:	1c44      	adds	r4, r0, #1
 8005d06:	4629      	mov	r1, r5
 8005d08:	4561      	cmp	r1, ip
 8005d0a:	d30a      	bcc.n	8005d22 <__exponent+0x66>
 8005d0c:	f10d 0209 	add.w	r2, sp, #9
 8005d10:	eba2 020e 	sub.w	r2, r2, lr
 8005d14:	4565      	cmp	r5, ip
 8005d16:	bf88      	it	hi
 8005d18:	2200      	movhi	r2, #0
 8005d1a:	4413      	add	r3, r2
 8005d1c:	1a18      	subs	r0, r3, r0
 8005d1e:	b003      	add	sp, #12
 8005d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d26:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005d2a:	e7ed      	b.n	8005d08 <__exponent+0x4c>
 8005d2c:	2330      	movs	r3, #48	; 0x30
 8005d2e:	3130      	adds	r1, #48	; 0x30
 8005d30:	7083      	strb	r3, [r0, #2]
 8005d32:	70c1      	strb	r1, [r0, #3]
 8005d34:	1d03      	adds	r3, r0, #4
 8005d36:	e7f1      	b.n	8005d1c <__exponent+0x60>

08005d38 <_printf_float>:
 8005d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d3c:	ed2d 8b02 	vpush	{d8}
 8005d40:	b08d      	sub	sp, #52	; 0x34
 8005d42:	460c      	mov	r4, r1
 8005d44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005d48:	4616      	mov	r6, r2
 8005d4a:	461f      	mov	r7, r3
 8005d4c:	4605      	mov	r5, r0
 8005d4e:	f001 fa57 	bl	8007200 <_localeconv_r>
 8005d52:	f8d0 a000 	ldr.w	sl, [r0]
 8005d56:	4650      	mov	r0, sl
 8005d58:	f7fa fa4a 	bl	80001f0 <strlen>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	9305      	str	r3, [sp, #20]
 8005d64:	f8d8 3000 	ldr.w	r3, [r8]
 8005d68:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005d6c:	3307      	adds	r3, #7
 8005d6e:	f023 0307 	bic.w	r3, r3, #7
 8005d72:	f103 0208 	add.w	r2, r3, #8
 8005d76:	f8c8 2000 	str.w	r2, [r8]
 8005d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005d82:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005d86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005d8a:	9307      	str	r3, [sp, #28]
 8005d8c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d90:	ee08 0a10 	vmov	s16, r0
 8005d94:	4b9f      	ldr	r3, [pc, #636]	; (8006014 <_printf_float+0x2dc>)
 8005d96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d9e:	f7fa fed5 	bl	8000b4c <__aeabi_dcmpun>
 8005da2:	bb88      	cbnz	r0, 8005e08 <_printf_float+0xd0>
 8005da4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005da8:	4b9a      	ldr	r3, [pc, #616]	; (8006014 <_printf_float+0x2dc>)
 8005daa:	f04f 32ff 	mov.w	r2, #4294967295
 8005dae:	f7fa feaf 	bl	8000b10 <__aeabi_dcmple>
 8005db2:	bb48      	cbnz	r0, 8005e08 <_printf_float+0xd0>
 8005db4:	2200      	movs	r2, #0
 8005db6:	2300      	movs	r3, #0
 8005db8:	4640      	mov	r0, r8
 8005dba:	4649      	mov	r1, r9
 8005dbc:	f7fa fe9e 	bl	8000afc <__aeabi_dcmplt>
 8005dc0:	b110      	cbz	r0, 8005dc8 <_printf_float+0x90>
 8005dc2:	232d      	movs	r3, #45	; 0x2d
 8005dc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dc8:	4b93      	ldr	r3, [pc, #588]	; (8006018 <_printf_float+0x2e0>)
 8005dca:	4894      	ldr	r0, [pc, #592]	; (800601c <_printf_float+0x2e4>)
 8005dcc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005dd0:	bf94      	ite	ls
 8005dd2:	4698      	movls	r8, r3
 8005dd4:	4680      	movhi	r8, r0
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	6123      	str	r3, [r4, #16]
 8005dda:	9b05      	ldr	r3, [sp, #20]
 8005ddc:	f023 0204 	bic.w	r2, r3, #4
 8005de0:	6022      	str	r2, [r4, #0]
 8005de2:	f04f 0900 	mov.w	r9, #0
 8005de6:	9700      	str	r7, [sp, #0]
 8005de8:	4633      	mov	r3, r6
 8005dea:	aa0b      	add	r2, sp, #44	; 0x2c
 8005dec:	4621      	mov	r1, r4
 8005dee:	4628      	mov	r0, r5
 8005df0:	f000 f9d8 	bl	80061a4 <_printf_common>
 8005df4:	3001      	adds	r0, #1
 8005df6:	f040 8090 	bne.w	8005f1a <_printf_float+0x1e2>
 8005dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8005dfe:	b00d      	add	sp, #52	; 0x34
 8005e00:	ecbd 8b02 	vpop	{d8}
 8005e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e08:	4642      	mov	r2, r8
 8005e0a:	464b      	mov	r3, r9
 8005e0c:	4640      	mov	r0, r8
 8005e0e:	4649      	mov	r1, r9
 8005e10:	f7fa fe9c 	bl	8000b4c <__aeabi_dcmpun>
 8005e14:	b140      	cbz	r0, 8005e28 <_printf_float+0xf0>
 8005e16:	464b      	mov	r3, r9
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	bfbc      	itt	lt
 8005e1c:	232d      	movlt	r3, #45	; 0x2d
 8005e1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005e22:	487f      	ldr	r0, [pc, #508]	; (8006020 <_printf_float+0x2e8>)
 8005e24:	4b7f      	ldr	r3, [pc, #508]	; (8006024 <_printf_float+0x2ec>)
 8005e26:	e7d1      	b.n	8005dcc <_printf_float+0x94>
 8005e28:	6863      	ldr	r3, [r4, #4]
 8005e2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005e2e:	9206      	str	r2, [sp, #24]
 8005e30:	1c5a      	adds	r2, r3, #1
 8005e32:	d13f      	bne.n	8005eb4 <_printf_float+0x17c>
 8005e34:	2306      	movs	r3, #6
 8005e36:	6063      	str	r3, [r4, #4]
 8005e38:	9b05      	ldr	r3, [sp, #20]
 8005e3a:	6861      	ldr	r1, [r4, #4]
 8005e3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005e40:	2300      	movs	r3, #0
 8005e42:	9303      	str	r3, [sp, #12]
 8005e44:	ab0a      	add	r3, sp, #40	; 0x28
 8005e46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005e4a:	ab09      	add	r3, sp, #36	; 0x24
 8005e4c:	ec49 8b10 	vmov	d0, r8, r9
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	6022      	str	r2, [r4, #0]
 8005e54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005e58:	4628      	mov	r0, r5
 8005e5a:	f7ff fecd 	bl	8005bf8 <__cvt>
 8005e5e:	9b06      	ldr	r3, [sp, #24]
 8005e60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e62:	2b47      	cmp	r3, #71	; 0x47
 8005e64:	4680      	mov	r8, r0
 8005e66:	d108      	bne.n	8005e7a <_printf_float+0x142>
 8005e68:	1cc8      	adds	r0, r1, #3
 8005e6a:	db02      	blt.n	8005e72 <_printf_float+0x13a>
 8005e6c:	6863      	ldr	r3, [r4, #4]
 8005e6e:	4299      	cmp	r1, r3
 8005e70:	dd41      	ble.n	8005ef6 <_printf_float+0x1be>
 8005e72:	f1ab 0b02 	sub.w	fp, fp, #2
 8005e76:	fa5f fb8b 	uxtb.w	fp, fp
 8005e7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e7e:	d820      	bhi.n	8005ec2 <_printf_float+0x18a>
 8005e80:	3901      	subs	r1, #1
 8005e82:	465a      	mov	r2, fp
 8005e84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e88:	9109      	str	r1, [sp, #36]	; 0x24
 8005e8a:	f7ff ff17 	bl	8005cbc <__exponent>
 8005e8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e90:	1813      	adds	r3, r2, r0
 8005e92:	2a01      	cmp	r2, #1
 8005e94:	4681      	mov	r9, r0
 8005e96:	6123      	str	r3, [r4, #16]
 8005e98:	dc02      	bgt.n	8005ea0 <_printf_float+0x168>
 8005e9a:	6822      	ldr	r2, [r4, #0]
 8005e9c:	07d2      	lsls	r2, r2, #31
 8005e9e:	d501      	bpl.n	8005ea4 <_printf_float+0x16c>
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	6123      	str	r3, [r4, #16]
 8005ea4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d09c      	beq.n	8005de6 <_printf_float+0xae>
 8005eac:	232d      	movs	r3, #45	; 0x2d
 8005eae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eb2:	e798      	b.n	8005de6 <_printf_float+0xae>
 8005eb4:	9a06      	ldr	r2, [sp, #24]
 8005eb6:	2a47      	cmp	r2, #71	; 0x47
 8005eb8:	d1be      	bne.n	8005e38 <_printf_float+0x100>
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1bc      	bne.n	8005e38 <_printf_float+0x100>
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e7b9      	b.n	8005e36 <_printf_float+0xfe>
 8005ec2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005ec6:	d118      	bne.n	8005efa <_printf_float+0x1c2>
 8005ec8:	2900      	cmp	r1, #0
 8005eca:	6863      	ldr	r3, [r4, #4]
 8005ecc:	dd0b      	ble.n	8005ee6 <_printf_float+0x1ae>
 8005ece:	6121      	str	r1, [r4, #16]
 8005ed0:	b913      	cbnz	r3, 8005ed8 <_printf_float+0x1a0>
 8005ed2:	6822      	ldr	r2, [r4, #0]
 8005ed4:	07d0      	lsls	r0, r2, #31
 8005ed6:	d502      	bpl.n	8005ede <_printf_float+0x1a6>
 8005ed8:	3301      	adds	r3, #1
 8005eda:	440b      	add	r3, r1
 8005edc:	6123      	str	r3, [r4, #16]
 8005ede:	65a1      	str	r1, [r4, #88]	; 0x58
 8005ee0:	f04f 0900 	mov.w	r9, #0
 8005ee4:	e7de      	b.n	8005ea4 <_printf_float+0x16c>
 8005ee6:	b913      	cbnz	r3, 8005eee <_printf_float+0x1b6>
 8005ee8:	6822      	ldr	r2, [r4, #0]
 8005eea:	07d2      	lsls	r2, r2, #31
 8005eec:	d501      	bpl.n	8005ef2 <_printf_float+0x1ba>
 8005eee:	3302      	adds	r3, #2
 8005ef0:	e7f4      	b.n	8005edc <_printf_float+0x1a4>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e7f2      	b.n	8005edc <_printf_float+0x1a4>
 8005ef6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005efa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005efc:	4299      	cmp	r1, r3
 8005efe:	db05      	blt.n	8005f0c <_printf_float+0x1d4>
 8005f00:	6823      	ldr	r3, [r4, #0]
 8005f02:	6121      	str	r1, [r4, #16]
 8005f04:	07d8      	lsls	r0, r3, #31
 8005f06:	d5ea      	bpl.n	8005ede <_printf_float+0x1a6>
 8005f08:	1c4b      	adds	r3, r1, #1
 8005f0a:	e7e7      	b.n	8005edc <_printf_float+0x1a4>
 8005f0c:	2900      	cmp	r1, #0
 8005f0e:	bfd4      	ite	le
 8005f10:	f1c1 0202 	rsble	r2, r1, #2
 8005f14:	2201      	movgt	r2, #1
 8005f16:	4413      	add	r3, r2
 8005f18:	e7e0      	b.n	8005edc <_printf_float+0x1a4>
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	055a      	lsls	r2, r3, #21
 8005f1e:	d407      	bmi.n	8005f30 <_printf_float+0x1f8>
 8005f20:	6923      	ldr	r3, [r4, #16]
 8005f22:	4642      	mov	r2, r8
 8005f24:	4631      	mov	r1, r6
 8005f26:	4628      	mov	r0, r5
 8005f28:	47b8      	blx	r7
 8005f2a:	3001      	adds	r0, #1
 8005f2c:	d12c      	bne.n	8005f88 <_printf_float+0x250>
 8005f2e:	e764      	b.n	8005dfa <_printf_float+0xc2>
 8005f30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f34:	f240 80e0 	bls.w	80060f8 <_printf_float+0x3c0>
 8005f38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	2300      	movs	r3, #0
 8005f40:	f7fa fdd2 	bl	8000ae8 <__aeabi_dcmpeq>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	d034      	beq.n	8005fb2 <_printf_float+0x27a>
 8005f48:	4a37      	ldr	r2, [pc, #220]	; (8006028 <_printf_float+0x2f0>)
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	4631      	mov	r1, r6
 8005f4e:	4628      	mov	r0, r5
 8005f50:	47b8      	blx	r7
 8005f52:	3001      	adds	r0, #1
 8005f54:	f43f af51 	beq.w	8005dfa <_printf_float+0xc2>
 8005f58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	db02      	blt.n	8005f66 <_printf_float+0x22e>
 8005f60:	6823      	ldr	r3, [r4, #0]
 8005f62:	07d8      	lsls	r0, r3, #31
 8005f64:	d510      	bpl.n	8005f88 <_printf_float+0x250>
 8005f66:	ee18 3a10 	vmov	r3, s16
 8005f6a:	4652      	mov	r2, sl
 8005f6c:	4631      	mov	r1, r6
 8005f6e:	4628      	mov	r0, r5
 8005f70:	47b8      	blx	r7
 8005f72:	3001      	adds	r0, #1
 8005f74:	f43f af41 	beq.w	8005dfa <_printf_float+0xc2>
 8005f78:	f04f 0800 	mov.w	r8, #0
 8005f7c:	f104 091a 	add.w	r9, r4, #26
 8005f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f82:	3b01      	subs	r3, #1
 8005f84:	4543      	cmp	r3, r8
 8005f86:	dc09      	bgt.n	8005f9c <_printf_float+0x264>
 8005f88:	6823      	ldr	r3, [r4, #0]
 8005f8a:	079b      	lsls	r3, r3, #30
 8005f8c:	f100 8105 	bmi.w	800619a <_printf_float+0x462>
 8005f90:	68e0      	ldr	r0, [r4, #12]
 8005f92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f94:	4298      	cmp	r0, r3
 8005f96:	bfb8      	it	lt
 8005f98:	4618      	movlt	r0, r3
 8005f9a:	e730      	b.n	8005dfe <_printf_float+0xc6>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	464a      	mov	r2, r9
 8005fa0:	4631      	mov	r1, r6
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	47b8      	blx	r7
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	f43f af27 	beq.w	8005dfa <_printf_float+0xc2>
 8005fac:	f108 0801 	add.w	r8, r8, #1
 8005fb0:	e7e6      	b.n	8005f80 <_printf_float+0x248>
 8005fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	dc39      	bgt.n	800602c <_printf_float+0x2f4>
 8005fb8:	4a1b      	ldr	r2, [pc, #108]	; (8006028 <_printf_float+0x2f0>)
 8005fba:	2301      	movs	r3, #1
 8005fbc:	4631      	mov	r1, r6
 8005fbe:	4628      	mov	r0, r5
 8005fc0:	47b8      	blx	r7
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	f43f af19 	beq.w	8005dfa <_printf_float+0xc2>
 8005fc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	d102      	bne.n	8005fd6 <_printf_float+0x29e>
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	07d9      	lsls	r1, r3, #31
 8005fd4:	d5d8      	bpl.n	8005f88 <_printf_float+0x250>
 8005fd6:	ee18 3a10 	vmov	r3, s16
 8005fda:	4652      	mov	r2, sl
 8005fdc:	4631      	mov	r1, r6
 8005fde:	4628      	mov	r0, r5
 8005fe0:	47b8      	blx	r7
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	f43f af09 	beq.w	8005dfa <_printf_float+0xc2>
 8005fe8:	f04f 0900 	mov.w	r9, #0
 8005fec:	f104 0a1a 	add.w	sl, r4, #26
 8005ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff2:	425b      	negs	r3, r3
 8005ff4:	454b      	cmp	r3, r9
 8005ff6:	dc01      	bgt.n	8005ffc <_printf_float+0x2c4>
 8005ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ffa:	e792      	b.n	8005f22 <_printf_float+0x1ea>
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	4652      	mov	r2, sl
 8006000:	4631      	mov	r1, r6
 8006002:	4628      	mov	r0, r5
 8006004:	47b8      	blx	r7
 8006006:	3001      	adds	r0, #1
 8006008:	f43f aef7 	beq.w	8005dfa <_printf_float+0xc2>
 800600c:	f109 0901 	add.w	r9, r9, #1
 8006010:	e7ee      	b.n	8005ff0 <_printf_float+0x2b8>
 8006012:	bf00      	nop
 8006014:	7fefffff 	.word	0x7fefffff
 8006018:	0802e5ac 	.word	0x0802e5ac
 800601c:	0802e5b0 	.word	0x0802e5b0
 8006020:	0802e5b8 	.word	0x0802e5b8
 8006024:	0802e5b4 	.word	0x0802e5b4
 8006028:	0802e5bc 	.word	0x0802e5bc
 800602c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800602e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006030:	429a      	cmp	r2, r3
 8006032:	bfa8      	it	ge
 8006034:	461a      	movge	r2, r3
 8006036:	2a00      	cmp	r2, #0
 8006038:	4691      	mov	r9, r2
 800603a:	dc37      	bgt.n	80060ac <_printf_float+0x374>
 800603c:	f04f 0b00 	mov.w	fp, #0
 8006040:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006044:	f104 021a 	add.w	r2, r4, #26
 8006048:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800604a:	9305      	str	r3, [sp, #20]
 800604c:	eba3 0309 	sub.w	r3, r3, r9
 8006050:	455b      	cmp	r3, fp
 8006052:	dc33      	bgt.n	80060bc <_printf_float+0x384>
 8006054:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006058:	429a      	cmp	r2, r3
 800605a:	db3b      	blt.n	80060d4 <_printf_float+0x39c>
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	07da      	lsls	r2, r3, #31
 8006060:	d438      	bmi.n	80060d4 <_printf_float+0x39c>
 8006062:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006064:	9b05      	ldr	r3, [sp, #20]
 8006066:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	eba2 0901 	sub.w	r9, r2, r1
 800606e:	4599      	cmp	r9, r3
 8006070:	bfa8      	it	ge
 8006072:	4699      	movge	r9, r3
 8006074:	f1b9 0f00 	cmp.w	r9, #0
 8006078:	dc35      	bgt.n	80060e6 <_printf_float+0x3ae>
 800607a:	f04f 0800 	mov.w	r8, #0
 800607e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006082:	f104 0a1a 	add.w	sl, r4, #26
 8006086:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800608a:	1a9b      	subs	r3, r3, r2
 800608c:	eba3 0309 	sub.w	r3, r3, r9
 8006090:	4543      	cmp	r3, r8
 8006092:	f77f af79 	ble.w	8005f88 <_printf_float+0x250>
 8006096:	2301      	movs	r3, #1
 8006098:	4652      	mov	r2, sl
 800609a:	4631      	mov	r1, r6
 800609c:	4628      	mov	r0, r5
 800609e:	47b8      	blx	r7
 80060a0:	3001      	adds	r0, #1
 80060a2:	f43f aeaa 	beq.w	8005dfa <_printf_float+0xc2>
 80060a6:	f108 0801 	add.w	r8, r8, #1
 80060aa:	e7ec      	b.n	8006086 <_printf_float+0x34e>
 80060ac:	4613      	mov	r3, r2
 80060ae:	4631      	mov	r1, r6
 80060b0:	4642      	mov	r2, r8
 80060b2:	4628      	mov	r0, r5
 80060b4:	47b8      	blx	r7
 80060b6:	3001      	adds	r0, #1
 80060b8:	d1c0      	bne.n	800603c <_printf_float+0x304>
 80060ba:	e69e      	b.n	8005dfa <_printf_float+0xc2>
 80060bc:	2301      	movs	r3, #1
 80060be:	4631      	mov	r1, r6
 80060c0:	4628      	mov	r0, r5
 80060c2:	9205      	str	r2, [sp, #20]
 80060c4:	47b8      	blx	r7
 80060c6:	3001      	adds	r0, #1
 80060c8:	f43f ae97 	beq.w	8005dfa <_printf_float+0xc2>
 80060cc:	9a05      	ldr	r2, [sp, #20]
 80060ce:	f10b 0b01 	add.w	fp, fp, #1
 80060d2:	e7b9      	b.n	8006048 <_printf_float+0x310>
 80060d4:	ee18 3a10 	vmov	r3, s16
 80060d8:	4652      	mov	r2, sl
 80060da:	4631      	mov	r1, r6
 80060dc:	4628      	mov	r0, r5
 80060de:	47b8      	blx	r7
 80060e0:	3001      	adds	r0, #1
 80060e2:	d1be      	bne.n	8006062 <_printf_float+0x32a>
 80060e4:	e689      	b.n	8005dfa <_printf_float+0xc2>
 80060e6:	9a05      	ldr	r2, [sp, #20]
 80060e8:	464b      	mov	r3, r9
 80060ea:	4442      	add	r2, r8
 80060ec:	4631      	mov	r1, r6
 80060ee:	4628      	mov	r0, r5
 80060f0:	47b8      	blx	r7
 80060f2:	3001      	adds	r0, #1
 80060f4:	d1c1      	bne.n	800607a <_printf_float+0x342>
 80060f6:	e680      	b.n	8005dfa <_printf_float+0xc2>
 80060f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060fa:	2a01      	cmp	r2, #1
 80060fc:	dc01      	bgt.n	8006102 <_printf_float+0x3ca>
 80060fe:	07db      	lsls	r3, r3, #31
 8006100:	d538      	bpl.n	8006174 <_printf_float+0x43c>
 8006102:	2301      	movs	r3, #1
 8006104:	4642      	mov	r2, r8
 8006106:	4631      	mov	r1, r6
 8006108:	4628      	mov	r0, r5
 800610a:	47b8      	blx	r7
 800610c:	3001      	adds	r0, #1
 800610e:	f43f ae74 	beq.w	8005dfa <_printf_float+0xc2>
 8006112:	ee18 3a10 	vmov	r3, s16
 8006116:	4652      	mov	r2, sl
 8006118:	4631      	mov	r1, r6
 800611a:	4628      	mov	r0, r5
 800611c:	47b8      	blx	r7
 800611e:	3001      	adds	r0, #1
 8006120:	f43f ae6b 	beq.w	8005dfa <_printf_float+0xc2>
 8006124:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006128:	2200      	movs	r2, #0
 800612a:	2300      	movs	r3, #0
 800612c:	f7fa fcdc 	bl	8000ae8 <__aeabi_dcmpeq>
 8006130:	b9d8      	cbnz	r0, 800616a <_printf_float+0x432>
 8006132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006134:	f108 0201 	add.w	r2, r8, #1
 8006138:	3b01      	subs	r3, #1
 800613a:	4631      	mov	r1, r6
 800613c:	4628      	mov	r0, r5
 800613e:	47b8      	blx	r7
 8006140:	3001      	adds	r0, #1
 8006142:	d10e      	bne.n	8006162 <_printf_float+0x42a>
 8006144:	e659      	b.n	8005dfa <_printf_float+0xc2>
 8006146:	2301      	movs	r3, #1
 8006148:	4652      	mov	r2, sl
 800614a:	4631      	mov	r1, r6
 800614c:	4628      	mov	r0, r5
 800614e:	47b8      	blx	r7
 8006150:	3001      	adds	r0, #1
 8006152:	f43f ae52 	beq.w	8005dfa <_printf_float+0xc2>
 8006156:	f108 0801 	add.w	r8, r8, #1
 800615a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800615c:	3b01      	subs	r3, #1
 800615e:	4543      	cmp	r3, r8
 8006160:	dcf1      	bgt.n	8006146 <_printf_float+0x40e>
 8006162:	464b      	mov	r3, r9
 8006164:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006168:	e6dc      	b.n	8005f24 <_printf_float+0x1ec>
 800616a:	f04f 0800 	mov.w	r8, #0
 800616e:	f104 0a1a 	add.w	sl, r4, #26
 8006172:	e7f2      	b.n	800615a <_printf_float+0x422>
 8006174:	2301      	movs	r3, #1
 8006176:	4642      	mov	r2, r8
 8006178:	e7df      	b.n	800613a <_printf_float+0x402>
 800617a:	2301      	movs	r3, #1
 800617c:	464a      	mov	r2, r9
 800617e:	4631      	mov	r1, r6
 8006180:	4628      	mov	r0, r5
 8006182:	47b8      	blx	r7
 8006184:	3001      	adds	r0, #1
 8006186:	f43f ae38 	beq.w	8005dfa <_printf_float+0xc2>
 800618a:	f108 0801 	add.w	r8, r8, #1
 800618e:	68e3      	ldr	r3, [r4, #12]
 8006190:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006192:	1a5b      	subs	r3, r3, r1
 8006194:	4543      	cmp	r3, r8
 8006196:	dcf0      	bgt.n	800617a <_printf_float+0x442>
 8006198:	e6fa      	b.n	8005f90 <_printf_float+0x258>
 800619a:	f04f 0800 	mov.w	r8, #0
 800619e:	f104 0919 	add.w	r9, r4, #25
 80061a2:	e7f4      	b.n	800618e <_printf_float+0x456>

080061a4 <_printf_common>:
 80061a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061a8:	4616      	mov	r6, r2
 80061aa:	4699      	mov	r9, r3
 80061ac:	688a      	ldr	r2, [r1, #8]
 80061ae:	690b      	ldr	r3, [r1, #16]
 80061b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061b4:	4293      	cmp	r3, r2
 80061b6:	bfb8      	it	lt
 80061b8:	4613      	movlt	r3, r2
 80061ba:	6033      	str	r3, [r6, #0]
 80061bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061c0:	4607      	mov	r7, r0
 80061c2:	460c      	mov	r4, r1
 80061c4:	b10a      	cbz	r2, 80061ca <_printf_common+0x26>
 80061c6:	3301      	adds	r3, #1
 80061c8:	6033      	str	r3, [r6, #0]
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	0699      	lsls	r1, r3, #26
 80061ce:	bf42      	ittt	mi
 80061d0:	6833      	ldrmi	r3, [r6, #0]
 80061d2:	3302      	addmi	r3, #2
 80061d4:	6033      	strmi	r3, [r6, #0]
 80061d6:	6825      	ldr	r5, [r4, #0]
 80061d8:	f015 0506 	ands.w	r5, r5, #6
 80061dc:	d106      	bne.n	80061ec <_printf_common+0x48>
 80061de:	f104 0a19 	add.w	sl, r4, #25
 80061e2:	68e3      	ldr	r3, [r4, #12]
 80061e4:	6832      	ldr	r2, [r6, #0]
 80061e6:	1a9b      	subs	r3, r3, r2
 80061e8:	42ab      	cmp	r3, r5
 80061ea:	dc26      	bgt.n	800623a <_printf_common+0x96>
 80061ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061f0:	1e13      	subs	r3, r2, #0
 80061f2:	6822      	ldr	r2, [r4, #0]
 80061f4:	bf18      	it	ne
 80061f6:	2301      	movne	r3, #1
 80061f8:	0692      	lsls	r2, r2, #26
 80061fa:	d42b      	bmi.n	8006254 <_printf_common+0xb0>
 80061fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006200:	4649      	mov	r1, r9
 8006202:	4638      	mov	r0, r7
 8006204:	47c0      	blx	r8
 8006206:	3001      	adds	r0, #1
 8006208:	d01e      	beq.n	8006248 <_printf_common+0xa4>
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	68e5      	ldr	r5, [r4, #12]
 800620e:	6832      	ldr	r2, [r6, #0]
 8006210:	f003 0306 	and.w	r3, r3, #6
 8006214:	2b04      	cmp	r3, #4
 8006216:	bf08      	it	eq
 8006218:	1aad      	subeq	r5, r5, r2
 800621a:	68a3      	ldr	r3, [r4, #8]
 800621c:	6922      	ldr	r2, [r4, #16]
 800621e:	bf0c      	ite	eq
 8006220:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006224:	2500      	movne	r5, #0
 8006226:	4293      	cmp	r3, r2
 8006228:	bfc4      	itt	gt
 800622a:	1a9b      	subgt	r3, r3, r2
 800622c:	18ed      	addgt	r5, r5, r3
 800622e:	2600      	movs	r6, #0
 8006230:	341a      	adds	r4, #26
 8006232:	42b5      	cmp	r5, r6
 8006234:	d11a      	bne.n	800626c <_printf_common+0xc8>
 8006236:	2000      	movs	r0, #0
 8006238:	e008      	b.n	800624c <_printf_common+0xa8>
 800623a:	2301      	movs	r3, #1
 800623c:	4652      	mov	r2, sl
 800623e:	4649      	mov	r1, r9
 8006240:	4638      	mov	r0, r7
 8006242:	47c0      	blx	r8
 8006244:	3001      	adds	r0, #1
 8006246:	d103      	bne.n	8006250 <_printf_common+0xac>
 8006248:	f04f 30ff 	mov.w	r0, #4294967295
 800624c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006250:	3501      	adds	r5, #1
 8006252:	e7c6      	b.n	80061e2 <_printf_common+0x3e>
 8006254:	18e1      	adds	r1, r4, r3
 8006256:	1c5a      	adds	r2, r3, #1
 8006258:	2030      	movs	r0, #48	; 0x30
 800625a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800625e:	4422      	add	r2, r4
 8006260:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006264:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006268:	3302      	adds	r3, #2
 800626a:	e7c7      	b.n	80061fc <_printf_common+0x58>
 800626c:	2301      	movs	r3, #1
 800626e:	4622      	mov	r2, r4
 8006270:	4649      	mov	r1, r9
 8006272:	4638      	mov	r0, r7
 8006274:	47c0      	blx	r8
 8006276:	3001      	adds	r0, #1
 8006278:	d0e6      	beq.n	8006248 <_printf_common+0xa4>
 800627a:	3601      	adds	r6, #1
 800627c:	e7d9      	b.n	8006232 <_printf_common+0x8e>
	...

08006280 <_printf_i>:
 8006280:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006284:	460c      	mov	r4, r1
 8006286:	4691      	mov	r9, r2
 8006288:	7e27      	ldrb	r7, [r4, #24]
 800628a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800628c:	2f78      	cmp	r7, #120	; 0x78
 800628e:	4680      	mov	r8, r0
 8006290:	469a      	mov	sl, r3
 8006292:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006296:	d807      	bhi.n	80062a8 <_printf_i+0x28>
 8006298:	2f62      	cmp	r7, #98	; 0x62
 800629a:	d80a      	bhi.n	80062b2 <_printf_i+0x32>
 800629c:	2f00      	cmp	r7, #0
 800629e:	f000 80d8 	beq.w	8006452 <_printf_i+0x1d2>
 80062a2:	2f58      	cmp	r7, #88	; 0x58
 80062a4:	f000 80a3 	beq.w	80063ee <_printf_i+0x16e>
 80062a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80062ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80062b0:	e03a      	b.n	8006328 <_printf_i+0xa8>
 80062b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80062b6:	2b15      	cmp	r3, #21
 80062b8:	d8f6      	bhi.n	80062a8 <_printf_i+0x28>
 80062ba:	a001      	add	r0, pc, #4	; (adr r0, 80062c0 <_printf_i+0x40>)
 80062bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80062c0:	08006319 	.word	0x08006319
 80062c4:	0800632d 	.word	0x0800632d
 80062c8:	080062a9 	.word	0x080062a9
 80062cc:	080062a9 	.word	0x080062a9
 80062d0:	080062a9 	.word	0x080062a9
 80062d4:	080062a9 	.word	0x080062a9
 80062d8:	0800632d 	.word	0x0800632d
 80062dc:	080062a9 	.word	0x080062a9
 80062e0:	080062a9 	.word	0x080062a9
 80062e4:	080062a9 	.word	0x080062a9
 80062e8:	080062a9 	.word	0x080062a9
 80062ec:	08006439 	.word	0x08006439
 80062f0:	0800635d 	.word	0x0800635d
 80062f4:	0800641b 	.word	0x0800641b
 80062f8:	080062a9 	.word	0x080062a9
 80062fc:	080062a9 	.word	0x080062a9
 8006300:	0800645b 	.word	0x0800645b
 8006304:	080062a9 	.word	0x080062a9
 8006308:	0800635d 	.word	0x0800635d
 800630c:	080062a9 	.word	0x080062a9
 8006310:	080062a9 	.word	0x080062a9
 8006314:	08006423 	.word	0x08006423
 8006318:	680b      	ldr	r3, [r1, #0]
 800631a:	1d1a      	adds	r2, r3, #4
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	600a      	str	r2, [r1, #0]
 8006320:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006324:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006328:	2301      	movs	r3, #1
 800632a:	e0a3      	b.n	8006474 <_printf_i+0x1f4>
 800632c:	6825      	ldr	r5, [r4, #0]
 800632e:	6808      	ldr	r0, [r1, #0]
 8006330:	062e      	lsls	r6, r5, #24
 8006332:	f100 0304 	add.w	r3, r0, #4
 8006336:	d50a      	bpl.n	800634e <_printf_i+0xce>
 8006338:	6805      	ldr	r5, [r0, #0]
 800633a:	600b      	str	r3, [r1, #0]
 800633c:	2d00      	cmp	r5, #0
 800633e:	da03      	bge.n	8006348 <_printf_i+0xc8>
 8006340:	232d      	movs	r3, #45	; 0x2d
 8006342:	426d      	negs	r5, r5
 8006344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006348:	485e      	ldr	r0, [pc, #376]	; (80064c4 <_printf_i+0x244>)
 800634a:	230a      	movs	r3, #10
 800634c:	e019      	b.n	8006382 <_printf_i+0x102>
 800634e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006352:	6805      	ldr	r5, [r0, #0]
 8006354:	600b      	str	r3, [r1, #0]
 8006356:	bf18      	it	ne
 8006358:	b22d      	sxthne	r5, r5
 800635a:	e7ef      	b.n	800633c <_printf_i+0xbc>
 800635c:	680b      	ldr	r3, [r1, #0]
 800635e:	6825      	ldr	r5, [r4, #0]
 8006360:	1d18      	adds	r0, r3, #4
 8006362:	6008      	str	r0, [r1, #0]
 8006364:	0628      	lsls	r0, r5, #24
 8006366:	d501      	bpl.n	800636c <_printf_i+0xec>
 8006368:	681d      	ldr	r5, [r3, #0]
 800636a:	e002      	b.n	8006372 <_printf_i+0xf2>
 800636c:	0669      	lsls	r1, r5, #25
 800636e:	d5fb      	bpl.n	8006368 <_printf_i+0xe8>
 8006370:	881d      	ldrh	r5, [r3, #0]
 8006372:	4854      	ldr	r0, [pc, #336]	; (80064c4 <_printf_i+0x244>)
 8006374:	2f6f      	cmp	r7, #111	; 0x6f
 8006376:	bf0c      	ite	eq
 8006378:	2308      	moveq	r3, #8
 800637a:	230a      	movne	r3, #10
 800637c:	2100      	movs	r1, #0
 800637e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006382:	6866      	ldr	r6, [r4, #4]
 8006384:	60a6      	str	r6, [r4, #8]
 8006386:	2e00      	cmp	r6, #0
 8006388:	bfa2      	ittt	ge
 800638a:	6821      	ldrge	r1, [r4, #0]
 800638c:	f021 0104 	bicge.w	r1, r1, #4
 8006390:	6021      	strge	r1, [r4, #0]
 8006392:	b90d      	cbnz	r5, 8006398 <_printf_i+0x118>
 8006394:	2e00      	cmp	r6, #0
 8006396:	d04d      	beq.n	8006434 <_printf_i+0x1b4>
 8006398:	4616      	mov	r6, r2
 800639a:	fbb5 f1f3 	udiv	r1, r5, r3
 800639e:	fb03 5711 	mls	r7, r3, r1, r5
 80063a2:	5dc7      	ldrb	r7, [r0, r7]
 80063a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063a8:	462f      	mov	r7, r5
 80063aa:	42bb      	cmp	r3, r7
 80063ac:	460d      	mov	r5, r1
 80063ae:	d9f4      	bls.n	800639a <_printf_i+0x11a>
 80063b0:	2b08      	cmp	r3, #8
 80063b2:	d10b      	bne.n	80063cc <_printf_i+0x14c>
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	07df      	lsls	r7, r3, #31
 80063b8:	d508      	bpl.n	80063cc <_printf_i+0x14c>
 80063ba:	6923      	ldr	r3, [r4, #16]
 80063bc:	6861      	ldr	r1, [r4, #4]
 80063be:	4299      	cmp	r1, r3
 80063c0:	bfde      	ittt	le
 80063c2:	2330      	movle	r3, #48	; 0x30
 80063c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063cc:	1b92      	subs	r2, r2, r6
 80063ce:	6122      	str	r2, [r4, #16]
 80063d0:	f8cd a000 	str.w	sl, [sp]
 80063d4:	464b      	mov	r3, r9
 80063d6:	aa03      	add	r2, sp, #12
 80063d8:	4621      	mov	r1, r4
 80063da:	4640      	mov	r0, r8
 80063dc:	f7ff fee2 	bl	80061a4 <_printf_common>
 80063e0:	3001      	adds	r0, #1
 80063e2:	d14c      	bne.n	800647e <_printf_i+0x1fe>
 80063e4:	f04f 30ff 	mov.w	r0, #4294967295
 80063e8:	b004      	add	sp, #16
 80063ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ee:	4835      	ldr	r0, [pc, #212]	; (80064c4 <_printf_i+0x244>)
 80063f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80063f4:	6823      	ldr	r3, [r4, #0]
 80063f6:	680e      	ldr	r6, [r1, #0]
 80063f8:	061f      	lsls	r7, r3, #24
 80063fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80063fe:	600e      	str	r6, [r1, #0]
 8006400:	d514      	bpl.n	800642c <_printf_i+0x1ac>
 8006402:	07d9      	lsls	r1, r3, #31
 8006404:	bf44      	itt	mi
 8006406:	f043 0320 	orrmi.w	r3, r3, #32
 800640a:	6023      	strmi	r3, [r4, #0]
 800640c:	b91d      	cbnz	r5, 8006416 <_printf_i+0x196>
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	f023 0320 	bic.w	r3, r3, #32
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	2310      	movs	r3, #16
 8006418:	e7b0      	b.n	800637c <_printf_i+0xfc>
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	f043 0320 	orr.w	r3, r3, #32
 8006420:	6023      	str	r3, [r4, #0]
 8006422:	2378      	movs	r3, #120	; 0x78
 8006424:	4828      	ldr	r0, [pc, #160]	; (80064c8 <_printf_i+0x248>)
 8006426:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800642a:	e7e3      	b.n	80063f4 <_printf_i+0x174>
 800642c:	065e      	lsls	r6, r3, #25
 800642e:	bf48      	it	mi
 8006430:	b2ad      	uxthmi	r5, r5
 8006432:	e7e6      	b.n	8006402 <_printf_i+0x182>
 8006434:	4616      	mov	r6, r2
 8006436:	e7bb      	b.n	80063b0 <_printf_i+0x130>
 8006438:	680b      	ldr	r3, [r1, #0]
 800643a:	6826      	ldr	r6, [r4, #0]
 800643c:	6960      	ldr	r0, [r4, #20]
 800643e:	1d1d      	adds	r5, r3, #4
 8006440:	600d      	str	r5, [r1, #0]
 8006442:	0635      	lsls	r5, r6, #24
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	d501      	bpl.n	800644c <_printf_i+0x1cc>
 8006448:	6018      	str	r0, [r3, #0]
 800644a:	e002      	b.n	8006452 <_printf_i+0x1d2>
 800644c:	0671      	lsls	r1, r6, #25
 800644e:	d5fb      	bpl.n	8006448 <_printf_i+0x1c8>
 8006450:	8018      	strh	r0, [r3, #0]
 8006452:	2300      	movs	r3, #0
 8006454:	6123      	str	r3, [r4, #16]
 8006456:	4616      	mov	r6, r2
 8006458:	e7ba      	b.n	80063d0 <_printf_i+0x150>
 800645a:	680b      	ldr	r3, [r1, #0]
 800645c:	1d1a      	adds	r2, r3, #4
 800645e:	600a      	str	r2, [r1, #0]
 8006460:	681e      	ldr	r6, [r3, #0]
 8006462:	6862      	ldr	r2, [r4, #4]
 8006464:	2100      	movs	r1, #0
 8006466:	4630      	mov	r0, r6
 8006468:	f7f9 feca 	bl	8000200 <memchr>
 800646c:	b108      	cbz	r0, 8006472 <_printf_i+0x1f2>
 800646e:	1b80      	subs	r0, r0, r6
 8006470:	6060      	str	r0, [r4, #4]
 8006472:	6863      	ldr	r3, [r4, #4]
 8006474:	6123      	str	r3, [r4, #16]
 8006476:	2300      	movs	r3, #0
 8006478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800647c:	e7a8      	b.n	80063d0 <_printf_i+0x150>
 800647e:	6923      	ldr	r3, [r4, #16]
 8006480:	4632      	mov	r2, r6
 8006482:	4649      	mov	r1, r9
 8006484:	4640      	mov	r0, r8
 8006486:	47d0      	blx	sl
 8006488:	3001      	adds	r0, #1
 800648a:	d0ab      	beq.n	80063e4 <_printf_i+0x164>
 800648c:	6823      	ldr	r3, [r4, #0]
 800648e:	079b      	lsls	r3, r3, #30
 8006490:	d413      	bmi.n	80064ba <_printf_i+0x23a>
 8006492:	68e0      	ldr	r0, [r4, #12]
 8006494:	9b03      	ldr	r3, [sp, #12]
 8006496:	4298      	cmp	r0, r3
 8006498:	bfb8      	it	lt
 800649a:	4618      	movlt	r0, r3
 800649c:	e7a4      	b.n	80063e8 <_printf_i+0x168>
 800649e:	2301      	movs	r3, #1
 80064a0:	4632      	mov	r2, r6
 80064a2:	4649      	mov	r1, r9
 80064a4:	4640      	mov	r0, r8
 80064a6:	47d0      	blx	sl
 80064a8:	3001      	adds	r0, #1
 80064aa:	d09b      	beq.n	80063e4 <_printf_i+0x164>
 80064ac:	3501      	adds	r5, #1
 80064ae:	68e3      	ldr	r3, [r4, #12]
 80064b0:	9903      	ldr	r1, [sp, #12]
 80064b2:	1a5b      	subs	r3, r3, r1
 80064b4:	42ab      	cmp	r3, r5
 80064b6:	dcf2      	bgt.n	800649e <_printf_i+0x21e>
 80064b8:	e7eb      	b.n	8006492 <_printf_i+0x212>
 80064ba:	2500      	movs	r5, #0
 80064bc:	f104 0619 	add.w	r6, r4, #25
 80064c0:	e7f5      	b.n	80064ae <_printf_i+0x22e>
 80064c2:	bf00      	nop
 80064c4:	0802e5be 	.word	0x0802e5be
 80064c8:	0802e5cf 	.word	0x0802e5cf

080064cc <siprintf>:
 80064cc:	b40e      	push	{r1, r2, r3}
 80064ce:	b500      	push	{lr}
 80064d0:	b09c      	sub	sp, #112	; 0x70
 80064d2:	ab1d      	add	r3, sp, #116	; 0x74
 80064d4:	9002      	str	r0, [sp, #8]
 80064d6:	9006      	str	r0, [sp, #24]
 80064d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064dc:	4809      	ldr	r0, [pc, #36]	; (8006504 <siprintf+0x38>)
 80064de:	9107      	str	r1, [sp, #28]
 80064e0:	9104      	str	r1, [sp, #16]
 80064e2:	4909      	ldr	r1, [pc, #36]	; (8006508 <siprintf+0x3c>)
 80064e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80064e8:	9105      	str	r1, [sp, #20]
 80064ea:	6800      	ldr	r0, [r0, #0]
 80064ec:	9301      	str	r3, [sp, #4]
 80064ee:	a902      	add	r1, sp, #8
 80064f0:	f001 fb34 	bl	8007b5c <_svfiprintf_r>
 80064f4:	9b02      	ldr	r3, [sp, #8]
 80064f6:	2200      	movs	r2, #0
 80064f8:	701a      	strb	r2, [r3, #0]
 80064fa:	b01c      	add	sp, #112	; 0x70
 80064fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006500:	b003      	add	sp, #12
 8006502:	4770      	bx	lr
 8006504:	20000010 	.word	0x20000010
 8006508:	ffff0208 	.word	0xffff0208

0800650c <quorem>:
 800650c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006510:	6903      	ldr	r3, [r0, #16]
 8006512:	690c      	ldr	r4, [r1, #16]
 8006514:	42a3      	cmp	r3, r4
 8006516:	4607      	mov	r7, r0
 8006518:	f2c0 8081 	blt.w	800661e <quorem+0x112>
 800651c:	3c01      	subs	r4, #1
 800651e:	f101 0814 	add.w	r8, r1, #20
 8006522:	f100 0514 	add.w	r5, r0, #20
 8006526:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800652a:	9301      	str	r3, [sp, #4]
 800652c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006530:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006534:	3301      	adds	r3, #1
 8006536:	429a      	cmp	r2, r3
 8006538:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800653c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006540:	fbb2 f6f3 	udiv	r6, r2, r3
 8006544:	d331      	bcc.n	80065aa <quorem+0x9e>
 8006546:	f04f 0e00 	mov.w	lr, #0
 800654a:	4640      	mov	r0, r8
 800654c:	46ac      	mov	ip, r5
 800654e:	46f2      	mov	sl, lr
 8006550:	f850 2b04 	ldr.w	r2, [r0], #4
 8006554:	b293      	uxth	r3, r2
 8006556:	fb06 e303 	mla	r3, r6, r3, lr
 800655a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800655e:	b29b      	uxth	r3, r3
 8006560:	ebaa 0303 	sub.w	r3, sl, r3
 8006564:	0c12      	lsrs	r2, r2, #16
 8006566:	f8dc a000 	ldr.w	sl, [ip]
 800656a:	fb06 e202 	mla	r2, r6, r2, lr
 800656e:	fa13 f38a 	uxtah	r3, r3, sl
 8006572:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006576:	fa1f fa82 	uxth.w	sl, r2
 800657a:	f8dc 2000 	ldr.w	r2, [ip]
 800657e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006582:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006586:	b29b      	uxth	r3, r3
 8006588:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800658c:	4581      	cmp	r9, r0
 800658e:	f84c 3b04 	str.w	r3, [ip], #4
 8006592:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006596:	d2db      	bcs.n	8006550 <quorem+0x44>
 8006598:	f855 300b 	ldr.w	r3, [r5, fp]
 800659c:	b92b      	cbnz	r3, 80065aa <quorem+0x9e>
 800659e:	9b01      	ldr	r3, [sp, #4]
 80065a0:	3b04      	subs	r3, #4
 80065a2:	429d      	cmp	r5, r3
 80065a4:	461a      	mov	r2, r3
 80065a6:	d32e      	bcc.n	8006606 <quorem+0xfa>
 80065a8:	613c      	str	r4, [r7, #16]
 80065aa:	4638      	mov	r0, r7
 80065ac:	f001 f8c0 	bl	8007730 <__mcmp>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	db24      	blt.n	80065fe <quorem+0xf2>
 80065b4:	3601      	adds	r6, #1
 80065b6:	4628      	mov	r0, r5
 80065b8:	f04f 0c00 	mov.w	ip, #0
 80065bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80065c0:	f8d0 e000 	ldr.w	lr, [r0]
 80065c4:	b293      	uxth	r3, r2
 80065c6:	ebac 0303 	sub.w	r3, ip, r3
 80065ca:	0c12      	lsrs	r2, r2, #16
 80065cc:	fa13 f38e 	uxtah	r3, r3, lr
 80065d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80065d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065d8:	b29b      	uxth	r3, r3
 80065da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065de:	45c1      	cmp	r9, r8
 80065e0:	f840 3b04 	str.w	r3, [r0], #4
 80065e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80065e8:	d2e8      	bcs.n	80065bc <quorem+0xb0>
 80065ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065f2:	b922      	cbnz	r2, 80065fe <quorem+0xf2>
 80065f4:	3b04      	subs	r3, #4
 80065f6:	429d      	cmp	r5, r3
 80065f8:	461a      	mov	r2, r3
 80065fa:	d30a      	bcc.n	8006612 <quorem+0x106>
 80065fc:	613c      	str	r4, [r7, #16]
 80065fe:	4630      	mov	r0, r6
 8006600:	b003      	add	sp, #12
 8006602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006606:	6812      	ldr	r2, [r2, #0]
 8006608:	3b04      	subs	r3, #4
 800660a:	2a00      	cmp	r2, #0
 800660c:	d1cc      	bne.n	80065a8 <quorem+0x9c>
 800660e:	3c01      	subs	r4, #1
 8006610:	e7c7      	b.n	80065a2 <quorem+0x96>
 8006612:	6812      	ldr	r2, [r2, #0]
 8006614:	3b04      	subs	r3, #4
 8006616:	2a00      	cmp	r2, #0
 8006618:	d1f0      	bne.n	80065fc <quorem+0xf0>
 800661a:	3c01      	subs	r4, #1
 800661c:	e7eb      	b.n	80065f6 <quorem+0xea>
 800661e:	2000      	movs	r0, #0
 8006620:	e7ee      	b.n	8006600 <quorem+0xf4>
 8006622:	0000      	movs	r0, r0
 8006624:	0000      	movs	r0, r0
	...

08006628 <_dtoa_r>:
 8006628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662c:	ed2d 8b02 	vpush	{d8}
 8006630:	ec57 6b10 	vmov	r6, r7, d0
 8006634:	b095      	sub	sp, #84	; 0x54
 8006636:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006638:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800663c:	9105      	str	r1, [sp, #20]
 800663e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006642:	4604      	mov	r4, r0
 8006644:	9209      	str	r2, [sp, #36]	; 0x24
 8006646:	930f      	str	r3, [sp, #60]	; 0x3c
 8006648:	b975      	cbnz	r5, 8006668 <_dtoa_r+0x40>
 800664a:	2010      	movs	r0, #16
 800664c:	f000 fddc 	bl	8007208 <malloc>
 8006650:	4602      	mov	r2, r0
 8006652:	6260      	str	r0, [r4, #36]	; 0x24
 8006654:	b920      	cbnz	r0, 8006660 <_dtoa_r+0x38>
 8006656:	4bb2      	ldr	r3, [pc, #712]	; (8006920 <_dtoa_r+0x2f8>)
 8006658:	21ea      	movs	r1, #234	; 0xea
 800665a:	48b2      	ldr	r0, [pc, #712]	; (8006924 <_dtoa_r+0x2fc>)
 800665c:	f001 fb8e 	bl	8007d7c <__assert_func>
 8006660:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006664:	6005      	str	r5, [r0, #0]
 8006666:	60c5      	str	r5, [r0, #12]
 8006668:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800666a:	6819      	ldr	r1, [r3, #0]
 800666c:	b151      	cbz	r1, 8006684 <_dtoa_r+0x5c>
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	604a      	str	r2, [r1, #4]
 8006672:	2301      	movs	r3, #1
 8006674:	4093      	lsls	r3, r2
 8006676:	608b      	str	r3, [r1, #8]
 8006678:	4620      	mov	r0, r4
 800667a:	f000 fe1b 	bl	80072b4 <_Bfree>
 800667e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006680:	2200      	movs	r2, #0
 8006682:	601a      	str	r2, [r3, #0]
 8006684:	1e3b      	subs	r3, r7, #0
 8006686:	bfb9      	ittee	lt
 8006688:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800668c:	9303      	strlt	r3, [sp, #12]
 800668e:	2300      	movge	r3, #0
 8006690:	f8c8 3000 	strge.w	r3, [r8]
 8006694:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006698:	4ba3      	ldr	r3, [pc, #652]	; (8006928 <_dtoa_r+0x300>)
 800669a:	bfbc      	itt	lt
 800669c:	2201      	movlt	r2, #1
 800669e:	f8c8 2000 	strlt.w	r2, [r8]
 80066a2:	ea33 0309 	bics.w	r3, r3, r9
 80066a6:	d11b      	bne.n	80066e0 <_dtoa_r+0xb8>
 80066a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80066ae:	6013      	str	r3, [r2, #0]
 80066b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80066b4:	4333      	orrs	r3, r6
 80066b6:	f000 857a 	beq.w	80071ae <_dtoa_r+0xb86>
 80066ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066bc:	b963      	cbnz	r3, 80066d8 <_dtoa_r+0xb0>
 80066be:	4b9b      	ldr	r3, [pc, #620]	; (800692c <_dtoa_r+0x304>)
 80066c0:	e024      	b.n	800670c <_dtoa_r+0xe4>
 80066c2:	4b9b      	ldr	r3, [pc, #620]	; (8006930 <_dtoa_r+0x308>)
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	3308      	adds	r3, #8
 80066c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80066ca:	6013      	str	r3, [r2, #0]
 80066cc:	9800      	ldr	r0, [sp, #0]
 80066ce:	b015      	add	sp, #84	; 0x54
 80066d0:	ecbd 8b02 	vpop	{d8}
 80066d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d8:	4b94      	ldr	r3, [pc, #592]	; (800692c <_dtoa_r+0x304>)
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	3303      	adds	r3, #3
 80066de:	e7f3      	b.n	80066c8 <_dtoa_r+0xa0>
 80066e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066e4:	2200      	movs	r2, #0
 80066e6:	ec51 0b17 	vmov	r0, r1, d7
 80066ea:	2300      	movs	r3, #0
 80066ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80066f0:	f7fa f9fa 	bl	8000ae8 <__aeabi_dcmpeq>
 80066f4:	4680      	mov	r8, r0
 80066f6:	b158      	cbz	r0, 8006710 <_dtoa_r+0xe8>
 80066f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80066fa:	2301      	movs	r3, #1
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 8551 	beq.w	80071a8 <_dtoa_r+0xb80>
 8006706:	488b      	ldr	r0, [pc, #556]	; (8006934 <_dtoa_r+0x30c>)
 8006708:	6018      	str	r0, [r3, #0]
 800670a:	1e43      	subs	r3, r0, #1
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	e7dd      	b.n	80066cc <_dtoa_r+0xa4>
 8006710:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006714:	aa12      	add	r2, sp, #72	; 0x48
 8006716:	a913      	add	r1, sp, #76	; 0x4c
 8006718:	4620      	mov	r0, r4
 800671a:	f001 f8ad 	bl	8007878 <__d2b>
 800671e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006722:	4683      	mov	fp, r0
 8006724:	2d00      	cmp	r5, #0
 8006726:	d07c      	beq.n	8006822 <_dtoa_r+0x1fa>
 8006728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800672a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800672e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006732:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006736:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800673a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800673e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006742:	4b7d      	ldr	r3, [pc, #500]	; (8006938 <_dtoa_r+0x310>)
 8006744:	2200      	movs	r2, #0
 8006746:	4630      	mov	r0, r6
 8006748:	4639      	mov	r1, r7
 800674a:	f7f9 fdad 	bl	80002a8 <__aeabi_dsub>
 800674e:	a36e      	add	r3, pc, #440	; (adr r3, 8006908 <_dtoa_r+0x2e0>)
 8006750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006754:	f7f9 ff60 	bl	8000618 <__aeabi_dmul>
 8006758:	a36d      	add	r3, pc, #436	; (adr r3, 8006910 <_dtoa_r+0x2e8>)
 800675a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675e:	f7f9 fda5 	bl	80002ac <__adddf3>
 8006762:	4606      	mov	r6, r0
 8006764:	4628      	mov	r0, r5
 8006766:	460f      	mov	r7, r1
 8006768:	f7f9 feec 	bl	8000544 <__aeabi_i2d>
 800676c:	a36a      	add	r3, pc, #424	; (adr r3, 8006918 <_dtoa_r+0x2f0>)
 800676e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006772:	f7f9 ff51 	bl	8000618 <__aeabi_dmul>
 8006776:	4602      	mov	r2, r0
 8006778:	460b      	mov	r3, r1
 800677a:	4630      	mov	r0, r6
 800677c:	4639      	mov	r1, r7
 800677e:	f7f9 fd95 	bl	80002ac <__adddf3>
 8006782:	4606      	mov	r6, r0
 8006784:	460f      	mov	r7, r1
 8006786:	f7fa f9f7 	bl	8000b78 <__aeabi_d2iz>
 800678a:	2200      	movs	r2, #0
 800678c:	4682      	mov	sl, r0
 800678e:	2300      	movs	r3, #0
 8006790:	4630      	mov	r0, r6
 8006792:	4639      	mov	r1, r7
 8006794:	f7fa f9b2 	bl	8000afc <__aeabi_dcmplt>
 8006798:	b148      	cbz	r0, 80067ae <_dtoa_r+0x186>
 800679a:	4650      	mov	r0, sl
 800679c:	f7f9 fed2 	bl	8000544 <__aeabi_i2d>
 80067a0:	4632      	mov	r2, r6
 80067a2:	463b      	mov	r3, r7
 80067a4:	f7fa f9a0 	bl	8000ae8 <__aeabi_dcmpeq>
 80067a8:	b908      	cbnz	r0, 80067ae <_dtoa_r+0x186>
 80067aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067ae:	f1ba 0f16 	cmp.w	sl, #22
 80067b2:	d854      	bhi.n	800685e <_dtoa_r+0x236>
 80067b4:	4b61      	ldr	r3, [pc, #388]	; (800693c <_dtoa_r+0x314>)
 80067b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80067ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80067c2:	f7fa f99b 	bl	8000afc <__aeabi_dcmplt>
 80067c6:	2800      	cmp	r0, #0
 80067c8:	d04b      	beq.n	8006862 <_dtoa_r+0x23a>
 80067ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80067ce:	2300      	movs	r3, #0
 80067d0:	930e      	str	r3, [sp, #56]	; 0x38
 80067d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80067d4:	1b5d      	subs	r5, r3, r5
 80067d6:	1e6b      	subs	r3, r5, #1
 80067d8:	9304      	str	r3, [sp, #16]
 80067da:	bf43      	ittte	mi
 80067dc:	2300      	movmi	r3, #0
 80067de:	f1c5 0801 	rsbmi	r8, r5, #1
 80067e2:	9304      	strmi	r3, [sp, #16]
 80067e4:	f04f 0800 	movpl.w	r8, #0
 80067e8:	f1ba 0f00 	cmp.w	sl, #0
 80067ec:	db3b      	blt.n	8006866 <_dtoa_r+0x23e>
 80067ee:	9b04      	ldr	r3, [sp, #16]
 80067f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80067f4:	4453      	add	r3, sl
 80067f6:	9304      	str	r3, [sp, #16]
 80067f8:	2300      	movs	r3, #0
 80067fa:	9306      	str	r3, [sp, #24]
 80067fc:	9b05      	ldr	r3, [sp, #20]
 80067fe:	2b09      	cmp	r3, #9
 8006800:	d869      	bhi.n	80068d6 <_dtoa_r+0x2ae>
 8006802:	2b05      	cmp	r3, #5
 8006804:	bfc4      	itt	gt
 8006806:	3b04      	subgt	r3, #4
 8006808:	9305      	strgt	r3, [sp, #20]
 800680a:	9b05      	ldr	r3, [sp, #20]
 800680c:	f1a3 0302 	sub.w	r3, r3, #2
 8006810:	bfcc      	ite	gt
 8006812:	2500      	movgt	r5, #0
 8006814:	2501      	movle	r5, #1
 8006816:	2b03      	cmp	r3, #3
 8006818:	d869      	bhi.n	80068ee <_dtoa_r+0x2c6>
 800681a:	e8df f003 	tbb	[pc, r3]
 800681e:	4e2c      	.short	0x4e2c
 8006820:	5a4c      	.short	0x5a4c
 8006822:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006826:	441d      	add	r5, r3
 8006828:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800682c:	2b20      	cmp	r3, #32
 800682e:	bfc1      	itttt	gt
 8006830:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006834:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006838:	fa09 f303 	lslgt.w	r3, r9, r3
 800683c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006840:	bfda      	itte	le
 8006842:	f1c3 0320 	rsble	r3, r3, #32
 8006846:	fa06 f003 	lslle.w	r0, r6, r3
 800684a:	4318      	orrgt	r0, r3
 800684c:	f7f9 fe6a 	bl	8000524 <__aeabi_ui2d>
 8006850:	2301      	movs	r3, #1
 8006852:	4606      	mov	r6, r0
 8006854:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006858:	3d01      	subs	r5, #1
 800685a:	9310      	str	r3, [sp, #64]	; 0x40
 800685c:	e771      	b.n	8006742 <_dtoa_r+0x11a>
 800685e:	2301      	movs	r3, #1
 8006860:	e7b6      	b.n	80067d0 <_dtoa_r+0x1a8>
 8006862:	900e      	str	r0, [sp, #56]	; 0x38
 8006864:	e7b5      	b.n	80067d2 <_dtoa_r+0x1aa>
 8006866:	f1ca 0300 	rsb	r3, sl, #0
 800686a:	9306      	str	r3, [sp, #24]
 800686c:	2300      	movs	r3, #0
 800686e:	eba8 080a 	sub.w	r8, r8, sl
 8006872:	930d      	str	r3, [sp, #52]	; 0x34
 8006874:	e7c2      	b.n	80067fc <_dtoa_r+0x1d4>
 8006876:	2300      	movs	r3, #0
 8006878:	9308      	str	r3, [sp, #32]
 800687a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800687c:	2b00      	cmp	r3, #0
 800687e:	dc39      	bgt.n	80068f4 <_dtoa_r+0x2cc>
 8006880:	f04f 0901 	mov.w	r9, #1
 8006884:	f8cd 9004 	str.w	r9, [sp, #4]
 8006888:	464b      	mov	r3, r9
 800688a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800688e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006890:	2200      	movs	r2, #0
 8006892:	6042      	str	r2, [r0, #4]
 8006894:	2204      	movs	r2, #4
 8006896:	f102 0614 	add.w	r6, r2, #20
 800689a:	429e      	cmp	r6, r3
 800689c:	6841      	ldr	r1, [r0, #4]
 800689e:	d92f      	bls.n	8006900 <_dtoa_r+0x2d8>
 80068a0:	4620      	mov	r0, r4
 80068a2:	f000 fcc7 	bl	8007234 <_Balloc>
 80068a6:	9000      	str	r0, [sp, #0]
 80068a8:	2800      	cmp	r0, #0
 80068aa:	d14b      	bne.n	8006944 <_dtoa_r+0x31c>
 80068ac:	4b24      	ldr	r3, [pc, #144]	; (8006940 <_dtoa_r+0x318>)
 80068ae:	4602      	mov	r2, r0
 80068b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80068b4:	e6d1      	b.n	800665a <_dtoa_r+0x32>
 80068b6:	2301      	movs	r3, #1
 80068b8:	e7de      	b.n	8006878 <_dtoa_r+0x250>
 80068ba:	2300      	movs	r3, #0
 80068bc:	9308      	str	r3, [sp, #32]
 80068be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c0:	eb0a 0903 	add.w	r9, sl, r3
 80068c4:	f109 0301 	add.w	r3, r9, #1
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	9301      	str	r3, [sp, #4]
 80068cc:	bfb8      	it	lt
 80068ce:	2301      	movlt	r3, #1
 80068d0:	e7dd      	b.n	800688e <_dtoa_r+0x266>
 80068d2:	2301      	movs	r3, #1
 80068d4:	e7f2      	b.n	80068bc <_dtoa_r+0x294>
 80068d6:	2501      	movs	r5, #1
 80068d8:	2300      	movs	r3, #0
 80068da:	9305      	str	r3, [sp, #20]
 80068dc:	9508      	str	r5, [sp, #32]
 80068de:	f04f 39ff 	mov.w	r9, #4294967295
 80068e2:	2200      	movs	r2, #0
 80068e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80068e8:	2312      	movs	r3, #18
 80068ea:	9209      	str	r2, [sp, #36]	; 0x24
 80068ec:	e7cf      	b.n	800688e <_dtoa_r+0x266>
 80068ee:	2301      	movs	r3, #1
 80068f0:	9308      	str	r3, [sp, #32]
 80068f2:	e7f4      	b.n	80068de <_dtoa_r+0x2b6>
 80068f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80068f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80068fc:	464b      	mov	r3, r9
 80068fe:	e7c6      	b.n	800688e <_dtoa_r+0x266>
 8006900:	3101      	adds	r1, #1
 8006902:	6041      	str	r1, [r0, #4]
 8006904:	0052      	lsls	r2, r2, #1
 8006906:	e7c6      	b.n	8006896 <_dtoa_r+0x26e>
 8006908:	636f4361 	.word	0x636f4361
 800690c:	3fd287a7 	.word	0x3fd287a7
 8006910:	8b60c8b3 	.word	0x8b60c8b3
 8006914:	3fc68a28 	.word	0x3fc68a28
 8006918:	509f79fb 	.word	0x509f79fb
 800691c:	3fd34413 	.word	0x3fd34413
 8006920:	0802e5ed 	.word	0x0802e5ed
 8006924:	0802e604 	.word	0x0802e604
 8006928:	7ff00000 	.word	0x7ff00000
 800692c:	0802e5e9 	.word	0x0802e5e9
 8006930:	0802e5e0 	.word	0x0802e5e0
 8006934:	0802e5bd 	.word	0x0802e5bd
 8006938:	3ff80000 	.word	0x3ff80000
 800693c:	0802e700 	.word	0x0802e700
 8006940:	0802e663 	.word	0x0802e663
 8006944:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006946:	9a00      	ldr	r2, [sp, #0]
 8006948:	601a      	str	r2, [r3, #0]
 800694a:	9b01      	ldr	r3, [sp, #4]
 800694c:	2b0e      	cmp	r3, #14
 800694e:	f200 80ad 	bhi.w	8006aac <_dtoa_r+0x484>
 8006952:	2d00      	cmp	r5, #0
 8006954:	f000 80aa 	beq.w	8006aac <_dtoa_r+0x484>
 8006958:	f1ba 0f00 	cmp.w	sl, #0
 800695c:	dd36      	ble.n	80069cc <_dtoa_r+0x3a4>
 800695e:	4ac3      	ldr	r2, [pc, #780]	; (8006c6c <_dtoa_r+0x644>)
 8006960:	f00a 030f 	and.w	r3, sl, #15
 8006964:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006968:	ed93 7b00 	vldr	d7, [r3]
 800696c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006970:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006974:	eeb0 8a47 	vmov.f32	s16, s14
 8006978:	eef0 8a67 	vmov.f32	s17, s15
 800697c:	d016      	beq.n	80069ac <_dtoa_r+0x384>
 800697e:	4bbc      	ldr	r3, [pc, #752]	; (8006c70 <_dtoa_r+0x648>)
 8006980:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006984:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006988:	f7f9 ff70 	bl	800086c <__aeabi_ddiv>
 800698c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006990:	f007 070f 	and.w	r7, r7, #15
 8006994:	2503      	movs	r5, #3
 8006996:	4eb6      	ldr	r6, [pc, #728]	; (8006c70 <_dtoa_r+0x648>)
 8006998:	b957      	cbnz	r7, 80069b0 <_dtoa_r+0x388>
 800699a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800699e:	ec53 2b18 	vmov	r2, r3, d8
 80069a2:	f7f9 ff63 	bl	800086c <__aeabi_ddiv>
 80069a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069aa:	e029      	b.n	8006a00 <_dtoa_r+0x3d8>
 80069ac:	2502      	movs	r5, #2
 80069ae:	e7f2      	b.n	8006996 <_dtoa_r+0x36e>
 80069b0:	07f9      	lsls	r1, r7, #31
 80069b2:	d508      	bpl.n	80069c6 <_dtoa_r+0x39e>
 80069b4:	ec51 0b18 	vmov	r0, r1, d8
 80069b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80069bc:	f7f9 fe2c 	bl	8000618 <__aeabi_dmul>
 80069c0:	ec41 0b18 	vmov	d8, r0, r1
 80069c4:	3501      	adds	r5, #1
 80069c6:	107f      	asrs	r7, r7, #1
 80069c8:	3608      	adds	r6, #8
 80069ca:	e7e5      	b.n	8006998 <_dtoa_r+0x370>
 80069cc:	f000 80a6 	beq.w	8006b1c <_dtoa_r+0x4f4>
 80069d0:	f1ca 0600 	rsb	r6, sl, #0
 80069d4:	4ba5      	ldr	r3, [pc, #660]	; (8006c6c <_dtoa_r+0x644>)
 80069d6:	4fa6      	ldr	r7, [pc, #664]	; (8006c70 <_dtoa_r+0x648>)
 80069d8:	f006 020f 	and.w	r2, r6, #15
 80069dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80069e8:	f7f9 fe16 	bl	8000618 <__aeabi_dmul>
 80069ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069f0:	1136      	asrs	r6, r6, #4
 80069f2:	2300      	movs	r3, #0
 80069f4:	2502      	movs	r5, #2
 80069f6:	2e00      	cmp	r6, #0
 80069f8:	f040 8085 	bne.w	8006b06 <_dtoa_r+0x4de>
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1d2      	bne.n	80069a6 <_dtoa_r+0x37e>
 8006a00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 808c 	beq.w	8006b20 <_dtoa_r+0x4f8>
 8006a08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006a0c:	4b99      	ldr	r3, [pc, #612]	; (8006c74 <_dtoa_r+0x64c>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	4630      	mov	r0, r6
 8006a12:	4639      	mov	r1, r7
 8006a14:	f7fa f872 	bl	8000afc <__aeabi_dcmplt>
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	f000 8081 	beq.w	8006b20 <_dtoa_r+0x4f8>
 8006a1e:	9b01      	ldr	r3, [sp, #4]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d07d      	beq.n	8006b20 <_dtoa_r+0x4f8>
 8006a24:	f1b9 0f00 	cmp.w	r9, #0
 8006a28:	dd3c      	ble.n	8006aa4 <_dtoa_r+0x47c>
 8006a2a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006a2e:	9307      	str	r3, [sp, #28]
 8006a30:	2200      	movs	r2, #0
 8006a32:	4b91      	ldr	r3, [pc, #580]	; (8006c78 <_dtoa_r+0x650>)
 8006a34:	4630      	mov	r0, r6
 8006a36:	4639      	mov	r1, r7
 8006a38:	f7f9 fdee 	bl	8000618 <__aeabi_dmul>
 8006a3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a40:	3501      	adds	r5, #1
 8006a42:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006a46:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	f7f9 fd7a 	bl	8000544 <__aeabi_i2d>
 8006a50:	4632      	mov	r2, r6
 8006a52:	463b      	mov	r3, r7
 8006a54:	f7f9 fde0 	bl	8000618 <__aeabi_dmul>
 8006a58:	4b88      	ldr	r3, [pc, #544]	; (8006c7c <_dtoa_r+0x654>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f7f9 fc26 	bl	80002ac <__adddf3>
 8006a60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006a64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a68:	9303      	str	r3, [sp, #12]
 8006a6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d15c      	bne.n	8006b2a <_dtoa_r+0x502>
 8006a70:	4b83      	ldr	r3, [pc, #524]	; (8006c80 <_dtoa_r+0x658>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	4630      	mov	r0, r6
 8006a76:	4639      	mov	r1, r7
 8006a78:	f7f9 fc16 	bl	80002a8 <__aeabi_dsub>
 8006a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a80:	4606      	mov	r6, r0
 8006a82:	460f      	mov	r7, r1
 8006a84:	f7fa f858 	bl	8000b38 <__aeabi_dcmpgt>
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	f040 8296 	bne.w	8006fba <_dtoa_r+0x992>
 8006a8e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006a92:	4630      	mov	r0, r6
 8006a94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a98:	4639      	mov	r1, r7
 8006a9a:	f7fa f82f 	bl	8000afc <__aeabi_dcmplt>
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	f040 8288 	bne.w	8006fb4 <_dtoa_r+0x98c>
 8006aa4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006aa8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006aac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f2c0 8158 	blt.w	8006d64 <_dtoa_r+0x73c>
 8006ab4:	f1ba 0f0e 	cmp.w	sl, #14
 8006ab8:	f300 8154 	bgt.w	8006d64 <_dtoa_r+0x73c>
 8006abc:	4b6b      	ldr	r3, [pc, #428]	; (8006c6c <_dtoa_r+0x644>)
 8006abe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006ac2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f280 80e3 	bge.w	8006c94 <_dtoa_r+0x66c>
 8006ace:	9b01      	ldr	r3, [sp, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f300 80df 	bgt.w	8006c94 <_dtoa_r+0x66c>
 8006ad6:	f040 826d 	bne.w	8006fb4 <_dtoa_r+0x98c>
 8006ada:	4b69      	ldr	r3, [pc, #420]	; (8006c80 <_dtoa_r+0x658>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	4640      	mov	r0, r8
 8006ae0:	4649      	mov	r1, r9
 8006ae2:	f7f9 fd99 	bl	8000618 <__aeabi_dmul>
 8006ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006aea:	f7fa f81b 	bl	8000b24 <__aeabi_dcmpge>
 8006aee:	9e01      	ldr	r6, [sp, #4]
 8006af0:	4637      	mov	r7, r6
 8006af2:	2800      	cmp	r0, #0
 8006af4:	f040 8243 	bne.w	8006f7e <_dtoa_r+0x956>
 8006af8:	9d00      	ldr	r5, [sp, #0]
 8006afa:	2331      	movs	r3, #49	; 0x31
 8006afc:	f805 3b01 	strb.w	r3, [r5], #1
 8006b00:	f10a 0a01 	add.w	sl, sl, #1
 8006b04:	e23f      	b.n	8006f86 <_dtoa_r+0x95e>
 8006b06:	07f2      	lsls	r2, r6, #31
 8006b08:	d505      	bpl.n	8006b16 <_dtoa_r+0x4ee>
 8006b0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b0e:	f7f9 fd83 	bl	8000618 <__aeabi_dmul>
 8006b12:	3501      	adds	r5, #1
 8006b14:	2301      	movs	r3, #1
 8006b16:	1076      	asrs	r6, r6, #1
 8006b18:	3708      	adds	r7, #8
 8006b1a:	e76c      	b.n	80069f6 <_dtoa_r+0x3ce>
 8006b1c:	2502      	movs	r5, #2
 8006b1e:	e76f      	b.n	8006a00 <_dtoa_r+0x3d8>
 8006b20:	9b01      	ldr	r3, [sp, #4]
 8006b22:	f8cd a01c 	str.w	sl, [sp, #28]
 8006b26:	930c      	str	r3, [sp, #48]	; 0x30
 8006b28:	e78d      	b.n	8006a46 <_dtoa_r+0x41e>
 8006b2a:	9900      	ldr	r1, [sp, #0]
 8006b2c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006b2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b30:	4b4e      	ldr	r3, [pc, #312]	; (8006c6c <_dtoa_r+0x644>)
 8006b32:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006b36:	4401      	add	r1, r0
 8006b38:	9102      	str	r1, [sp, #8]
 8006b3a:	9908      	ldr	r1, [sp, #32]
 8006b3c:	eeb0 8a47 	vmov.f32	s16, s14
 8006b40:	eef0 8a67 	vmov.f32	s17, s15
 8006b44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b4c:	2900      	cmp	r1, #0
 8006b4e:	d045      	beq.n	8006bdc <_dtoa_r+0x5b4>
 8006b50:	494c      	ldr	r1, [pc, #304]	; (8006c84 <_dtoa_r+0x65c>)
 8006b52:	2000      	movs	r0, #0
 8006b54:	f7f9 fe8a 	bl	800086c <__aeabi_ddiv>
 8006b58:	ec53 2b18 	vmov	r2, r3, d8
 8006b5c:	f7f9 fba4 	bl	80002a8 <__aeabi_dsub>
 8006b60:	9d00      	ldr	r5, [sp, #0]
 8006b62:	ec41 0b18 	vmov	d8, r0, r1
 8006b66:	4639      	mov	r1, r7
 8006b68:	4630      	mov	r0, r6
 8006b6a:	f7fa f805 	bl	8000b78 <__aeabi_d2iz>
 8006b6e:	900c      	str	r0, [sp, #48]	; 0x30
 8006b70:	f7f9 fce8 	bl	8000544 <__aeabi_i2d>
 8006b74:	4602      	mov	r2, r0
 8006b76:	460b      	mov	r3, r1
 8006b78:	4630      	mov	r0, r6
 8006b7a:	4639      	mov	r1, r7
 8006b7c:	f7f9 fb94 	bl	80002a8 <__aeabi_dsub>
 8006b80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b82:	3330      	adds	r3, #48	; 0x30
 8006b84:	f805 3b01 	strb.w	r3, [r5], #1
 8006b88:	ec53 2b18 	vmov	r2, r3, d8
 8006b8c:	4606      	mov	r6, r0
 8006b8e:	460f      	mov	r7, r1
 8006b90:	f7f9 ffb4 	bl	8000afc <__aeabi_dcmplt>
 8006b94:	2800      	cmp	r0, #0
 8006b96:	d165      	bne.n	8006c64 <_dtoa_r+0x63c>
 8006b98:	4632      	mov	r2, r6
 8006b9a:	463b      	mov	r3, r7
 8006b9c:	4935      	ldr	r1, [pc, #212]	; (8006c74 <_dtoa_r+0x64c>)
 8006b9e:	2000      	movs	r0, #0
 8006ba0:	f7f9 fb82 	bl	80002a8 <__aeabi_dsub>
 8006ba4:	ec53 2b18 	vmov	r2, r3, d8
 8006ba8:	f7f9 ffa8 	bl	8000afc <__aeabi_dcmplt>
 8006bac:	2800      	cmp	r0, #0
 8006bae:	f040 80b9 	bne.w	8006d24 <_dtoa_r+0x6fc>
 8006bb2:	9b02      	ldr	r3, [sp, #8]
 8006bb4:	429d      	cmp	r5, r3
 8006bb6:	f43f af75 	beq.w	8006aa4 <_dtoa_r+0x47c>
 8006bba:	4b2f      	ldr	r3, [pc, #188]	; (8006c78 <_dtoa_r+0x650>)
 8006bbc:	ec51 0b18 	vmov	r0, r1, d8
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f7f9 fd29 	bl	8000618 <__aeabi_dmul>
 8006bc6:	4b2c      	ldr	r3, [pc, #176]	; (8006c78 <_dtoa_r+0x650>)
 8006bc8:	ec41 0b18 	vmov	d8, r0, r1
 8006bcc:	2200      	movs	r2, #0
 8006bce:	4630      	mov	r0, r6
 8006bd0:	4639      	mov	r1, r7
 8006bd2:	f7f9 fd21 	bl	8000618 <__aeabi_dmul>
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	460f      	mov	r7, r1
 8006bda:	e7c4      	b.n	8006b66 <_dtoa_r+0x53e>
 8006bdc:	ec51 0b17 	vmov	r0, r1, d7
 8006be0:	f7f9 fd1a 	bl	8000618 <__aeabi_dmul>
 8006be4:	9b02      	ldr	r3, [sp, #8]
 8006be6:	9d00      	ldr	r5, [sp, #0]
 8006be8:	930c      	str	r3, [sp, #48]	; 0x30
 8006bea:	ec41 0b18 	vmov	d8, r0, r1
 8006bee:	4639      	mov	r1, r7
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	f7f9 ffc1 	bl	8000b78 <__aeabi_d2iz>
 8006bf6:	9011      	str	r0, [sp, #68]	; 0x44
 8006bf8:	f7f9 fca4 	bl	8000544 <__aeabi_i2d>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4630      	mov	r0, r6
 8006c02:	4639      	mov	r1, r7
 8006c04:	f7f9 fb50 	bl	80002a8 <__aeabi_dsub>
 8006c08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c0a:	3330      	adds	r3, #48	; 0x30
 8006c0c:	f805 3b01 	strb.w	r3, [r5], #1
 8006c10:	9b02      	ldr	r3, [sp, #8]
 8006c12:	429d      	cmp	r5, r3
 8006c14:	4606      	mov	r6, r0
 8006c16:	460f      	mov	r7, r1
 8006c18:	f04f 0200 	mov.w	r2, #0
 8006c1c:	d134      	bne.n	8006c88 <_dtoa_r+0x660>
 8006c1e:	4b19      	ldr	r3, [pc, #100]	; (8006c84 <_dtoa_r+0x65c>)
 8006c20:	ec51 0b18 	vmov	r0, r1, d8
 8006c24:	f7f9 fb42 	bl	80002ac <__adddf3>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4630      	mov	r0, r6
 8006c2e:	4639      	mov	r1, r7
 8006c30:	f7f9 ff82 	bl	8000b38 <__aeabi_dcmpgt>
 8006c34:	2800      	cmp	r0, #0
 8006c36:	d175      	bne.n	8006d24 <_dtoa_r+0x6fc>
 8006c38:	ec53 2b18 	vmov	r2, r3, d8
 8006c3c:	4911      	ldr	r1, [pc, #68]	; (8006c84 <_dtoa_r+0x65c>)
 8006c3e:	2000      	movs	r0, #0
 8006c40:	f7f9 fb32 	bl	80002a8 <__aeabi_dsub>
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	4630      	mov	r0, r6
 8006c4a:	4639      	mov	r1, r7
 8006c4c:	f7f9 ff56 	bl	8000afc <__aeabi_dcmplt>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	f43f af27 	beq.w	8006aa4 <_dtoa_r+0x47c>
 8006c56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c58:	1e6b      	subs	r3, r5, #1
 8006c5a:	930c      	str	r3, [sp, #48]	; 0x30
 8006c5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c60:	2b30      	cmp	r3, #48	; 0x30
 8006c62:	d0f8      	beq.n	8006c56 <_dtoa_r+0x62e>
 8006c64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006c68:	e04a      	b.n	8006d00 <_dtoa_r+0x6d8>
 8006c6a:	bf00      	nop
 8006c6c:	0802e700 	.word	0x0802e700
 8006c70:	0802e6d8 	.word	0x0802e6d8
 8006c74:	3ff00000 	.word	0x3ff00000
 8006c78:	40240000 	.word	0x40240000
 8006c7c:	401c0000 	.word	0x401c0000
 8006c80:	40140000 	.word	0x40140000
 8006c84:	3fe00000 	.word	0x3fe00000
 8006c88:	4baf      	ldr	r3, [pc, #700]	; (8006f48 <_dtoa_r+0x920>)
 8006c8a:	f7f9 fcc5 	bl	8000618 <__aeabi_dmul>
 8006c8e:	4606      	mov	r6, r0
 8006c90:	460f      	mov	r7, r1
 8006c92:	e7ac      	b.n	8006bee <_dtoa_r+0x5c6>
 8006c94:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c98:	9d00      	ldr	r5, [sp, #0]
 8006c9a:	4642      	mov	r2, r8
 8006c9c:	464b      	mov	r3, r9
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	4639      	mov	r1, r7
 8006ca2:	f7f9 fde3 	bl	800086c <__aeabi_ddiv>
 8006ca6:	f7f9 ff67 	bl	8000b78 <__aeabi_d2iz>
 8006caa:	9002      	str	r0, [sp, #8]
 8006cac:	f7f9 fc4a 	bl	8000544 <__aeabi_i2d>
 8006cb0:	4642      	mov	r2, r8
 8006cb2:	464b      	mov	r3, r9
 8006cb4:	f7f9 fcb0 	bl	8000618 <__aeabi_dmul>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	460b      	mov	r3, r1
 8006cbc:	4630      	mov	r0, r6
 8006cbe:	4639      	mov	r1, r7
 8006cc0:	f7f9 faf2 	bl	80002a8 <__aeabi_dsub>
 8006cc4:	9e02      	ldr	r6, [sp, #8]
 8006cc6:	9f01      	ldr	r7, [sp, #4]
 8006cc8:	3630      	adds	r6, #48	; 0x30
 8006cca:	f805 6b01 	strb.w	r6, [r5], #1
 8006cce:	9e00      	ldr	r6, [sp, #0]
 8006cd0:	1bae      	subs	r6, r5, r6
 8006cd2:	42b7      	cmp	r7, r6
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	d137      	bne.n	8006d4a <_dtoa_r+0x722>
 8006cda:	f7f9 fae7 	bl	80002ac <__adddf3>
 8006cde:	4642      	mov	r2, r8
 8006ce0:	464b      	mov	r3, r9
 8006ce2:	4606      	mov	r6, r0
 8006ce4:	460f      	mov	r7, r1
 8006ce6:	f7f9 ff27 	bl	8000b38 <__aeabi_dcmpgt>
 8006cea:	b9c8      	cbnz	r0, 8006d20 <_dtoa_r+0x6f8>
 8006cec:	4642      	mov	r2, r8
 8006cee:	464b      	mov	r3, r9
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	4639      	mov	r1, r7
 8006cf4:	f7f9 fef8 	bl	8000ae8 <__aeabi_dcmpeq>
 8006cf8:	b110      	cbz	r0, 8006d00 <_dtoa_r+0x6d8>
 8006cfa:	9b02      	ldr	r3, [sp, #8]
 8006cfc:	07d9      	lsls	r1, r3, #31
 8006cfe:	d40f      	bmi.n	8006d20 <_dtoa_r+0x6f8>
 8006d00:	4620      	mov	r0, r4
 8006d02:	4659      	mov	r1, fp
 8006d04:	f000 fad6 	bl	80072b4 <_Bfree>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	702b      	strb	r3, [r5, #0]
 8006d0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d0e:	f10a 0001 	add.w	r0, sl, #1
 8006d12:	6018      	str	r0, [r3, #0]
 8006d14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f43f acd8 	beq.w	80066cc <_dtoa_r+0xa4>
 8006d1c:	601d      	str	r5, [r3, #0]
 8006d1e:	e4d5      	b.n	80066cc <_dtoa_r+0xa4>
 8006d20:	f8cd a01c 	str.w	sl, [sp, #28]
 8006d24:	462b      	mov	r3, r5
 8006d26:	461d      	mov	r5, r3
 8006d28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d2c:	2a39      	cmp	r2, #57	; 0x39
 8006d2e:	d108      	bne.n	8006d42 <_dtoa_r+0x71a>
 8006d30:	9a00      	ldr	r2, [sp, #0]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d1f7      	bne.n	8006d26 <_dtoa_r+0x6fe>
 8006d36:	9a07      	ldr	r2, [sp, #28]
 8006d38:	9900      	ldr	r1, [sp, #0]
 8006d3a:	3201      	adds	r2, #1
 8006d3c:	9207      	str	r2, [sp, #28]
 8006d3e:	2230      	movs	r2, #48	; 0x30
 8006d40:	700a      	strb	r2, [r1, #0]
 8006d42:	781a      	ldrb	r2, [r3, #0]
 8006d44:	3201      	adds	r2, #1
 8006d46:	701a      	strb	r2, [r3, #0]
 8006d48:	e78c      	b.n	8006c64 <_dtoa_r+0x63c>
 8006d4a:	4b7f      	ldr	r3, [pc, #508]	; (8006f48 <_dtoa_r+0x920>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f7f9 fc63 	bl	8000618 <__aeabi_dmul>
 8006d52:	2200      	movs	r2, #0
 8006d54:	2300      	movs	r3, #0
 8006d56:	4606      	mov	r6, r0
 8006d58:	460f      	mov	r7, r1
 8006d5a:	f7f9 fec5 	bl	8000ae8 <__aeabi_dcmpeq>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	d09b      	beq.n	8006c9a <_dtoa_r+0x672>
 8006d62:	e7cd      	b.n	8006d00 <_dtoa_r+0x6d8>
 8006d64:	9a08      	ldr	r2, [sp, #32]
 8006d66:	2a00      	cmp	r2, #0
 8006d68:	f000 80c4 	beq.w	8006ef4 <_dtoa_r+0x8cc>
 8006d6c:	9a05      	ldr	r2, [sp, #20]
 8006d6e:	2a01      	cmp	r2, #1
 8006d70:	f300 80a8 	bgt.w	8006ec4 <_dtoa_r+0x89c>
 8006d74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006d76:	2a00      	cmp	r2, #0
 8006d78:	f000 80a0 	beq.w	8006ebc <_dtoa_r+0x894>
 8006d7c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d80:	9e06      	ldr	r6, [sp, #24]
 8006d82:	4645      	mov	r5, r8
 8006d84:	9a04      	ldr	r2, [sp, #16]
 8006d86:	2101      	movs	r1, #1
 8006d88:	441a      	add	r2, r3
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	4498      	add	r8, r3
 8006d8e:	9204      	str	r2, [sp, #16]
 8006d90:	f000 fb4c 	bl	800742c <__i2b>
 8006d94:	4607      	mov	r7, r0
 8006d96:	2d00      	cmp	r5, #0
 8006d98:	dd0b      	ble.n	8006db2 <_dtoa_r+0x78a>
 8006d9a:	9b04      	ldr	r3, [sp, #16]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	dd08      	ble.n	8006db2 <_dtoa_r+0x78a>
 8006da0:	42ab      	cmp	r3, r5
 8006da2:	9a04      	ldr	r2, [sp, #16]
 8006da4:	bfa8      	it	ge
 8006da6:	462b      	movge	r3, r5
 8006da8:	eba8 0803 	sub.w	r8, r8, r3
 8006dac:	1aed      	subs	r5, r5, r3
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	9304      	str	r3, [sp, #16]
 8006db2:	9b06      	ldr	r3, [sp, #24]
 8006db4:	b1fb      	cbz	r3, 8006df6 <_dtoa_r+0x7ce>
 8006db6:	9b08      	ldr	r3, [sp, #32]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 809f 	beq.w	8006efc <_dtoa_r+0x8d4>
 8006dbe:	2e00      	cmp	r6, #0
 8006dc0:	dd11      	ble.n	8006de6 <_dtoa_r+0x7be>
 8006dc2:	4639      	mov	r1, r7
 8006dc4:	4632      	mov	r2, r6
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f000 fbec 	bl	80075a4 <__pow5mult>
 8006dcc:	465a      	mov	r2, fp
 8006dce:	4601      	mov	r1, r0
 8006dd0:	4607      	mov	r7, r0
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f000 fb40 	bl	8007458 <__multiply>
 8006dd8:	4659      	mov	r1, fp
 8006dda:	9007      	str	r0, [sp, #28]
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f000 fa69 	bl	80072b4 <_Bfree>
 8006de2:	9b07      	ldr	r3, [sp, #28]
 8006de4:	469b      	mov	fp, r3
 8006de6:	9b06      	ldr	r3, [sp, #24]
 8006de8:	1b9a      	subs	r2, r3, r6
 8006dea:	d004      	beq.n	8006df6 <_dtoa_r+0x7ce>
 8006dec:	4659      	mov	r1, fp
 8006dee:	4620      	mov	r0, r4
 8006df0:	f000 fbd8 	bl	80075a4 <__pow5mult>
 8006df4:	4683      	mov	fp, r0
 8006df6:	2101      	movs	r1, #1
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f000 fb17 	bl	800742c <__i2b>
 8006dfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	4606      	mov	r6, r0
 8006e04:	dd7c      	ble.n	8006f00 <_dtoa_r+0x8d8>
 8006e06:	461a      	mov	r2, r3
 8006e08:	4601      	mov	r1, r0
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	f000 fbca 	bl	80075a4 <__pow5mult>
 8006e10:	9b05      	ldr	r3, [sp, #20]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	4606      	mov	r6, r0
 8006e16:	dd76      	ble.n	8006f06 <_dtoa_r+0x8de>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	9306      	str	r3, [sp, #24]
 8006e1c:	6933      	ldr	r3, [r6, #16]
 8006e1e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e22:	6918      	ldr	r0, [r3, #16]
 8006e24:	f000 fab2 	bl	800738c <__hi0bits>
 8006e28:	f1c0 0020 	rsb	r0, r0, #32
 8006e2c:	9b04      	ldr	r3, [sp, #16]
 8006e2e:	4418      	add	r0, r3
 8006e30:	f010 001f 	ands.w	r0, r0, #31
 8006e34:	f000 8086 	beq.w	8006f44 <_dtoa_r+0x91c>
 8006e38:	f1c0 0320 	rsb	r3, r0, #32
 8006e3c:	2b04      	cmp	r3, #4
 8006e3e:	dd7f      	ble.n	8006f40 <_dtoa_r+0x918>
 8006e40:	f1c0 001c 	rsb	r0, r0, #28
 8006e44:	9b04      	ldr	r3, [sp, #16]
 8006e46:	4403      	add	r3, r0
 8006e48:	4480      	add	r8, r0
 8006e4a:	4405      	add	r5, r0
 8006e4c:	9304      	str	r3, [sp, #16]
 8006e4e:	f1b8 0f00 	cmp.w	r8, #0
 8006e52:	dd05      	ble.n	8006e60 <_dtoa_r+0x838>
 8006e54:	4659      	mov	r1, fp
 8006e56:	4642      	mov	r2, r8
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f000 fbfd 	bl	8007658 <__lshift>
 8006e5e:	4683      	mov	fp, r0
 8006e60:	9b04      	ldr	r3, [sp, #16]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	dd05      	ble.n	8006e72 <_dtoa_r+0x84a>
 8006e66:	4631      	mov	r1, r6
 8006e68:	461a      	mov	r2, r3
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f000 fbf4 	bl	8007658 <__lshift>
 8006e70:	4606      	mov	r6, r0
 8006e72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d069      	beq.n	8006f4c <_dtoa_r+0x924>
 8006e78:	4631      	mov	r1, r6
 8006e7a:	4658      	mov	r0, fp
 8006e7c:	f000 fc58 	bl	8007730 <__mcmp>
 8006e80:	2800      	cmp	r0, #0
 8006e82:	da63      	bge.n	8006f4c <_dtoa_r+0x924>
 8006e84:	2300      	movs	r3, #0
 8006e86:	4659      	mov	r1, fp
 8006e88:	220a      	movs	r2, #10
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f000 fa34 	bl	80072f8 <__multadd>
 8006e90:	9b08      	ldr	r3, [sp, #32]
 8006e92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e96:	4683      	mov	fp, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 818f 	beq.w	80071bc <_dtoa_r+0xb94>
 8006e9e:	4639      	mov	r1, r7
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	220a      	movs	r2, #10
 8006ea4:	4620      	mov	r0, r4
 8006ea6:	f000 fa27 	bl	80072f8 <__multadd>
 8006eaa:	f1b9 0f00 	cmp.w	r9, #0
 8006eae:	4607      	mov	r7, r0
 8006eb0:	f300 808e 	bgt.w	8006fd0 <_dtoa_r+0x9a8>
 8006eb4:	9b05      	ldr	r3, [sp, #20]
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	dc50      	bgt.n	8006f5c <_dtoa_r+0x934>
 8006eba:	e089      	b.n	8006fd0 <_dtoa_r+0x9a8>
 8006ebc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ebe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006ec2:	e75d      	b.n	8006d80 <_dtoa_r+0x758>
 8006ec4:	9b01      	ldr	r3, [sp, #4]
 8006ec6:	1e5e      	subs	r6, r3, #1
 8006ec8:	9b06      	ldr	r3, [sp, #24]
 8006eca:	42b3      	cmp	r3, r6
 8006ecc:	bfbf      	itttt	lt
 8006ece:	9b06      	ldrlt	r3, [sp, #24]
 8006ed0:	9606      	strlt	r6, [sp, #24]
 8006ed2:	1af2      	sublt	r2, r6, r3
 8006ed4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006ed6:	bfb6      	itet	lt
 8006ed8:	189b      	addlt	r3, r3, r2
 8006eda:	1b9e      	subge	r6, r3, r6
 8006edc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006ede:	9b01      	ldr	r3, [sp, #4]
 8006ee0:	bfb8      	it	lt
 8006ee2:	2600      	movlt	r6, #0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	bfb5      	itete	lt
 8006ee8:	eba8 0503 	sublt.w	r5, r8, r3
 8006eec:	9b01      	ldrge	r3, [sp, #4]
 8006eee:	2300      	movlt	r3, #0
 8006ef0:	4645      	movge	r5, r8
 8006ef2:	e747      	b.n	8006d84 <_dtoa_r+0x75c>
 8006ef4:	9e06      	ldr	r6, [sp, #24]
 8006ef6:	9f08      	ldr	r7, [sp, #32]
 8006ef8:	4645      	mov	r5, r8
 8006efa:	e74c      	b.n	8006d96 <_dtoa_r+0x76e>
 8006efc:	9a06      	ldr	r2, [sp, #24]
 8006efe:	e775      	b.n	8006dec <_dtoa_r+0x7c4>
 8006f00:	9b05      	ldr	r3, [sp, #20]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	dc18      	bgt.n	8006f38 <_dtoa_r+0x910>
 8006f06:	9b02      	ldr	r3, [sp, #8]
 8006f08:	b9b3      	cbnz	r3, 8006f38 <_dtoa_r+0x910>
 8006f0a:	9b03      	ldr	r3, [sp, #12]
 8006f0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f10:	b9a3      	cbnz	r3, 8006f3c <_dtoa_r+0x914>
 8006f12:	9b03      	ldr	r3, [sp, #12]
 8006f14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f18:	0d1b      	lsrs	r3, r3, #20
 8006f1a:	051b      	lsls	r3, r3, #20
 8006f1c:	b12b      	cbz	r3, 8006f2a <_dtoa_r+0x902>
 8006f1e:	9b04      	ldr	r3, [sp, #16]
 8006f20:	3301      	adds	r3, #1
 8006f22:	9304      	str	r3, [sp, #16]
 8006f24:	f108 0801 	add.w	r8, r8, #1
 8006f28:	2301      	movs	r3, #1
 8006f2a:	9306      	str	r3, [sp, #24]
 8006f2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f47f af74 	bne.w	8006e1c <_dtoa_r+0x7f4>
 8006f34:	2001      	movs	r0, #1
 8006f36:	e779      	b.n	8006e2c <_dtoa_r+0x804>
 8006f38:	2300      	movs	r3, #0
 8006f3a:	e7f6      	b.n	8006f2a <_dtoa_r+0x902>
 8006f3c:	9b02      	ldr	r3, [sp, #8]
 8006f3e:	e7f4      	b.n	8006f2a <_dtoa_r+0x902>
 8006f40:	d085      	beq.n	8006e4e <_dtoa_r+0x826>
 8006f42:	4618      	mov	r0, r3
 8006f44:	301c      	adds	r0, #28
 8006f46:	e77d      	b.n	8006e44 <_dtoa_r+0x81c>
 8006f48:	40240000 	.word	0x40240000
 8006f4c:	9b01      	ldr	r3, [sp, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	dc38      	bgt.n	8006fc4 <_dtoa_r+0x99c>
 8006f52:	9b05      	ldr	r3, [sp, #20]
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	dd35      	ble.n	8006fc4 <_dtoa_r+0x99c>
 8006f58:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006f5c:	f1b9 0f00 	cmp.w	r9, #0
 8006f60:	d10d      	bne.n	8006f7e <_dtoa_r+0x956>
 8006f62:	4631      	mov	r1, r6
 8006f64:	464b      	mov	r3, r9
 8006f66:	2205      	movs	r2, #5
 8006f68:	4620      	mov	r0, r4
 8006f6a:	f000 f9c5 	bl	80072f8 <__multadd>
 8006f6e:	4601      	mov	r1, r0
 8006f70:	4606      	mov	r6, r0
 8006f72:	4658      	mov	r0, fp
 8006f74:	f000 fbdc 	bl	8007730 <__mcmp>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	f73f adbd 	bgt.w	8006af8 <_dtoa_r+0x4d0>
 8006f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f80:	9d00      	ldr	r5, [sp, #0]
 8006f82:	ea6f 0a03 	mvn.w	sl, r3
 8006f86:	f04f 0800 	mov.w	r8, #0
 8006f8a:	4631      	mov	r1, r6
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	f000 f991 	bl	80072b4 <_Bfree>
 8006f92:	2f00      	cmp	r7, #0
 8006f94:	f43f aeb4 	beq.w	8006d00 <_dtoa_r+0x6d8>
 8006f98:	f1b8 0f00 	cmp.w	r8, #0
 8006f9c:	d005      	beq.n	8006faa <_dtoa_r+0x982>
 8006f9e:	45b8      	cmp	r8, r7
 8006fa0:	d003      	beq.n	8006faa <_dtoa_r+0x982>
 8006fa2:	4641      	mov	r1, r8
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	f000 f985 	bl	80072b4 <_Bfree>
 8006faa:	4639      	mov	r1, r7
 8006fac:	4620      	mov	r0, r4
 8006fae:	f000 f981 	bl	80072b4 <_Bfree>
 8006fb2:	e6a5      	b.n	8006d00 <_dtoa_r+0x6d8>
 8006fb4:	2600      	movs	r6, #0
 8006fb6:	4637      	mov	r7, r6
 8006fb8:	e7e1      	b.n	8006f7e <_dtoa_r+0x956>
 8006fba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006fbc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006fc0:	4637      	mov	r7, r6
 8006fc2:	e599      	b.n	8006af8 <_dtoa_r+0x4d0>
 8006fc4:	9b08      	ldr	r3, [sp, #32]
 8006fc6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 80fd 	beq.w	80071ca <_dtoa_r+0xba2>
 8006fd0:	2d00      	cmp	r5, #0
 8006fd2:	dd05      	ble.n	8006fe0 <_dtoa_r+0x9b8>
 8006fd4:	4639      	mov	r1, r7
 8006fd6:	462a      	mov	r2, r5
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f000 fb3d 	bl	8007658 <__lshift>
 8006fde:	4607      	mov	r7, r0
 8006fe0:	9b06      	ldr	r3, [sp, #24]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d05c      	beq.n	80070a0 <_dtoa_r+0xa78>
 8006fe6:	6879      	ldr	r1, [r7, #4]
 8006fe8:	4620      	mov	r0, r4
 8006fea:	f000 f923 	bl	8007234 <_Balloc>
 8006fee:	4605      	mov	r5, r0
 8006ff0:	b928      	cbnz	r0, 8006ffe <_dtoa_r+0x9d6>
 8006ff2:	4b80      	ldr	r3, [pc, #512]	; (80071f4 <_dtoa_r+0xbcc>)
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006ffa:	f7ff bb2e 	b.w	800665a <_dtoa_r+0x32>
 8006ffe:	693a      	ldr	r2, [r7, #16]
 8007000:	3202      	adds	r2, #2
 8007002:	0092      	lsls	r2, r2, #2
 8007004:	f107 010c 	add.w	r1, r7, #12
 8007008:	300c      	adds	r0, #12
 800700a:	f000 f905 	bl	8007218 <memcpy>
 800700e:	2201      	movs	r2, #1
 8007010:	4629      	mov	r1, r5
 8007012:	4620      	mov	r0, r4
 8007014:	f000 fb20 	bl	8007658 <__lshift>
 8007018:	9b00      	ldr	r3, [sp, #0]
 800701a:	3301      	adds	r3, #1
 800701c:	9301      	str	r3, [sp, #4]
 800701e:	9b00      	ldr	r3, [sp, #0]
 8007020:	444b      	add	r3, r9
 8007022:	9307      	str	r3, [sp, #28]
 8007024:	9b02      	ldr	r3, [sp, #8]
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	46b8      	mov	r8, r7
 800702c:	9306      	str	r3, [sp, #24]
 800702e:	4607      	mov	r7, r0
 8007030:	9b01      	ldr	r3, [sp, #4]
 8007032:	4631      	mov	r1, r6
 8007034:	3b01      	subs	r3, #1
 8007036:	4658      	mov	r0, fp
 8007038:	9302      	str	r3, [sp, #8]
 800703a:	f7ff fa67 	bl	800650c <quorem>
 800703e:	4603      	mov	r3, r0
 8007040:	3330      	adds	r3, #48	; 0x30
 8007042:	9004      	str	r0, [sp, #16]
 8007044:	4641      	mov	r1, r8
 8007046:	4658      	mov	r0, fp
 8007048:	9308      	str	r3, [sp, #32]
 800704a:	f000 fb71 	bl	8007730 <__mcmp>
 800704e:	463a      	mov	r2, r7
 8007050:	4681      	mov	r9, r0
 8007052:	4631      	mov	r1, r6
 8007054:	4620      	mov	r0, r4
 8007056:	f000 fb87 	bl	8007768 <__mdiff>
 800705a:	68c2      	ldr	r2, [r0, #12]
 800705c:	9b08      	ldr	r3, [sp, #32]
 800705e:	4605      	mov	r5, r0
 8007060:	bb02      	cbnz	r2, 80070a4 <_dtoa_r+0xa7c>
 8007062:	4601      	mov	r1, r0
 8007064:	4658      	mov	r0, fp
 8007066:	f000 fb63 	bl	8007730 <__mcmp>
 800706a:	9b08      	ldr	r3, [sp, #32]
 800706c:	4602      	mov	r2, r0
 800706e:	4629      	mov	r1, r5
 8007070:	4620      	mov	r0, r4
 8007072:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007076:	f000 f91d 	bl	80072b4 <_Bfree>
 800707a:	9b05      	ldr	r3, [sp, #20]
 800707c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800707e:	9d01      	ldr	r5, [sp, #4]
 8007080:	ea43 0102 	orr.w	r1, r3, r2
 8007084:	9b06      	ldr	r3, [sp, #24]
 8007086:	430b      	orrs	r3, r1
 8007088:	9b08      	ldr	r3, [sp, #32]
 800708a:	d10d      	bne.n	80070a8 <_dtoa_r+0xa80>
 800708c:	2b39      	cmp	r3, #57	; 0x39
 800708e:	d029      	beq.n	80070e4 <_dtoa_r+0xabc>
 8007090:	f1b9 0f00 	cmp.w	r9, #0
 8007094:	dd01      	ble.n	800709a <_dtoa_r+0xa72>
 8007096:	9b04      	ldr	r3, [sp, #16]
 8007098:	3331      	adds	r3, #49	; 0x31
 800709a:	9a02      	ldr	r2, [sp, #8]
 800709c:	7013      	strb	r3, [r2, #0]
 800709e:	e774      	b.n	8006f8a <_dtoa_r+0x962>
 80070a0:	4638      	mov	r0, r7
 80070a2:	e7b9      	b.n	8007018 <_dtoa_r+0x9f0>
 80070a4:	2201      	movs	r2, #1
 80070a6:	e7e2      	b.n	800706e <_dtoa_r+0xa46>
 80070a8:	f1b9 0f00 	cmp.w	r9, #0
 80070ac:	db06      	blt.n	80070bc <_dtoa_r+0xa94>
 80070ae:	9905      	ldr	r1, [sp, #20]
 80070b0:	ea41 0909 	orr.w	r9, r1, r9
 80070b4:	9906      	ldr	r1, [sp, #24]
 80070b6:	ea59 0101 	orrs.w	r1, r9, r1
 80070ba:	d120      	bne.n	80070fe <_dtoa_r+0xad6>
 80070bc:	2a00      	cmp	r2, #0
 80070be:	ddec      	ble.n	800709a <_dtoa_r+0xa72>
 80070c0:	4659      	mov	r1, fp
 80070c2:	2201      	movs	r2, #1
 80070c4:	4620      	mov	r0, r4
 80070c6:	9301      	str	r3, [sp, #4]
 80070c8:	f000 fac6 	bl	8007658 <__lshift>
 80070cc:	4631      	mov	r1, r6
 80070ce:	4683      	mov	fp, r0
 80070d0:	f000 fb2e 	bl	8007730 <__mcmp>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	9b01      	ldr	r3, [sp, #4]
 80070d8:	dc02      	bgt.n	80070e0 <_dtoa_r+0xab8>
 80070da:	d1de      	bne.n	800709a <_dtoa_r+0xa72>
 80070dc:	07da      	lsls	r2, r3, #31
 80070de:	d5dc      	bpl.n	800709a <_dtoa_r+0xa72>
 80070e0:	2b39      	cmp	r3, #57	; 0x39
 80070e2:	d1d8      	bne.n	8007096 <_dtoa_r+0xa6e>
 80070e4:	9a02      	ldr	r2, [sp, #8]
 80070e6:	2339      	movs	r3, #57	; 0x39
 80070e8:	7013      	strb	r3, [r2, #0]
 80070ea:	462b      	mov	r3, r5
 80070ec:	461d      	mov	r5, r3
 80070ee:	3b01      	subs	r3, #1
 80070f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80070f4:	2a39      	cmp	r2, #57	; 0x39
 80070f6:	d050      	beq.n	800719a <_dtoa_r+0xb72>
 80070f8:	3201      	adds	r2, #1
 80070fa:	701a      	strb	r2, [r3, #0]
 80070fc:	e745      	b.n	8006f8a <_dtoa_r+0x962>
 80070fe:	2a00      	cmp	r2, #0
 8007100:	dd03      	ble.n	800710a <_dtoa_r+0xae2>
 8007102:	2b39      	cmp	r3, #57	; 0x39
 8007104:	d0ee      	beq.n	80070e4 <_dtoa_r+0xabc>
 8007106:	3301      	adds	r3, #1
 8007108:	e7c7      	b.n	800709a <_dtoa_r+0xa72>
 800710a:	9a01      	ldr	r2, [sp, #4]
 800710c:	9907      	ldr	r1, [sp, #28]
 800710e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007112:	428a      	cmp	r2, r1
 8007114:	d02a      	beq.n	800716c <_dtoa_r+0xb44>
 8007116:	4659      	mov	r1, fp
 8007118:	2300      	movs	r3, #0
 800711a:	220a      	movs	r2, #10
 800711c:	4620      	mov	r0, r4
 800711e:	f000 f8eb 	bl	80072f8 <__multadd>
 8007122:	45b8      	cmp	r8, r7
 8007124:	4683      	mov	fp, r0
 8007126:	f04f 0300 	mov.w	r3, #0
 800712a:	f04f 020a 	mov.w	r2, #10
 800712e:	4641      	mov	r1, r8
 8007130:	4620      	mov	r0, r4
 8007132:	d107      	bne.n	8007144 <_dtoa_r+0xb1c>
 8007134:	f000 f8e0 	bl	80072f8 <__multadd>
 8007138:	4680      	mov	r8, r0
 800713a:	4607      	mov	r7, r0
 800713c:	9b01      	ldr	r3, [sp, #4]
 800713e:	3301      	adds	r3, #1
 8007140:	9301      	str	r3, [sp, #4]
 8007142:	e775      	b.n	8007030 <_dtoa_r+0xa08>
 8007144:	f000 f8d8 	bl	80072f8 <__multadd>
 8007148:	4639      	mov	r1, r7
 800714a:	4680      	mov	r8, r0
 800714c:	2300      	movs	r3, #0
 800714e:	220a      	movs	r2, #10
 8007150:	4620      	mov	r0, r4
 8007152:	f000 f8d1 	bl	80072f8 <__multadd>
 8007156:	4607      	mov	r7, r0
 8007158:	e7f0      	b.n	800713c <_dtoa_r+0xb14>
 800715a:	f1b9 0f00 	cmp.w	r9, #0
 800715e:	9a00      	ldr	r2, [sp, #0]
 8007160:	bfcc      	ite	gt
 8007162:	464d      	movgt	r5, r9
 8007164:	2501      	movle	r5, #1
 8007166:	4415      	add	r5, r2
 8007168:	f04f 0800 	mov.w	r8, #0
 800716c:	4659      	mov	r1, fp
 800716e:	2201      	movs	r2, #1
 8007170:	4620      	mov	r0, r4
 8007172:	9301      	str	r3, [sp, #4]
 8007174:	f000 fa70 	bl	8007658 <__lshift>
 8007178:	4631      	mov	r1, r6
 800717a:	4683      	mov	fp, r0
 800717c:	f000 fad8 	bl	8007730 <__mcmp>
 8007180:	2800      	cmp	r0, #0
 8007182:	dcb2      	bgt.n	80070ea <_dtoa_r+0xac2>
 8007184:	d102      	bne.n	800718c <_dtoa_r+0xb64>
 8007186:	9b01      	ldr	r3, [sp, #4]
 8007188:	07db      	lsls	r3, r3, #31
 800718a:	d4ae      	bmi.n	80070ea <_dtoa_r+0xac2>
 800718c:	462b      	mov	r3, r5
 800718e:	461d      	mov	r5, r3
 8007190:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007194:	2a30      	cmp	r2, #48	; 0x30
 8007196:	d0fa      	beq.n	800718e <_dtoa_r+0xb66>
 8007198:	e6f7      	b.n	8006f8a <_dtoa_r+0x962>
 800719a:	9a00      	ldr	r2, [sp, #0]
 800719c:	429a      	cmp	r2, r3
 800719e:	d1a5      	bne.n	80070ec <_dtoa_r+0xac4>
 80071a0:	f10a 0a01 	add.w	sl, sl, #1
 80071a4:	2331      	movs	r3, #49	; 0x31
 80071a6:	e779      	b.n	800709c <_dtoa_r+0xa74>
 80071a8:	4b13      	ldr	r3, [pc, #76]	; (80071f8 <_dtoa_r+0xbd0>)
 80071aa:	f7ff baaf 	b.w	800670c <_dtoa_r+0xe4>
 80071ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f47f aa86 	bne.w	80066c2 <_dtoa_r+0x9a>
 80071b6:	4b11      	ldr	r3, [pc, #68]	; (80071fc <_dtoa_r+0xbd4>)
 80071b8:	f7ff baa8 	b.w	800670c <_dtoa_r+0xe4>
 80071bc:	f1b9 0f00 	cmp.w	r9, #0
 80071c0:	dc03      	bgt.n	80071ca <_dtoa_r+0xba2>
 80071c2:	9b05      	ldr	r3, [sp, #20]
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	f73f aec9 	bgt.w	8006f5c <_dtoa_r+0x934>
 80071ca:	9d00      	ldr	r5, [sp, #0]
 80071cc:	4631      	mov	r1, r6
 80071ce:	4658      	mov	r0, fp
 80071d0:	f7ff f99c 	bl	800650c <quorem>
 80071d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80071d8:	f805 3b01 	strb.w	r3, [r5], #1
 80071dc:	9a00      	ldr	r2, [sp, #0]
 80071de:	1aaa      	subs	r2, r5, r2
 80071e0:	4591      	cmp	r9, r2
 80071e2:	ddba      	ble.n	800715a <_dtoa_r+0xb32>
 80071e4:	4659      	mov	r1, fp
 80071e6:	2300      	movs	r3, #0
 80071e8:	220a      	movs	r2, #10
 80071ea:	4620      	mov	r0, r4
 80071ec:	f000 f884 	bl	80072f8 <__multadd>
 80071f0:	4683      	mov	fp, r0
 80071f2:	e7eb      	b.n	80071cc <_dtoa_r+0xba4>
 80071f4:	0802e663 	.word	0x0802e663
 80071f8:	0802e5bc 	.word	0x0802e5bc
 80071fc:	0802e5e0 	.word	0x0802e5e0

08007200 <_localeconv_r>:
 8007200:	4800      	ldr	r0, [pc, #0]	; (8007204 <_localeconv_r+0x4>)
 8007202:	4770      	bx	lr
 8007204:	20000164 	.word	0x20000164

08007208 <malloc>:
 8007208:	4b02      	ldr	r3, [pc, #8]	; (8007214 <malloc+0xc>)
 800720a:	4601      	mov	r1, r0
 800720c:	6818      	ldr	r0, [r3, #0]
 800720e:	f000 bbef 	b.w	80079f0 <_malloc_r>
 8007212:	bf00      	nop
 8007214:	20000010 	.word	0x20000010

08007218 <memcpy>:
 8007218:	440a      	add	r2, r1
 800721a:	4291      	cmp	r1, r2
 800721c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007220:	d100      	bne.n	8007224 <memcpy+0xc>
 8007222:	4770      	bx	lr
 8007224:	b510      	push	{r4, lr}
 8007226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800722a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800722e:	4291      	cmp	r1, r2
 8007230:	d1f9      	bne.n	8007226 <memcpy+0xe>
 8007232:	bd10      	pop	{r4, pc}

08007234 <_Balloc>:
 8007234:	b570      	push	{r4, r5, r6, lr}
 8007236:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007238:	4604      	mov	r4, r0
 800723a:	460d      	mov	r5, r1
 800723c:	b976      	cbnz	r6, 800725c <_Balloc+0x28>
 800723e:	2010      	movs	r0, #16
 8007240:	f7ff ffe2 	bl	8007208 <malloc>
 8007244:	4602      	mov	r2, r0
 8007246:	6260      	str	r0, [r4, #36]	; 0x24
 8007248:	b920      	cbnz	r0, 8007254 <_Balloc+0x20>
 800724a:	4b18      	ldr	r3, [pc, #96]	; (80072ac <_Balloc+0x78>)
 800724c:	4818      	ldr	r0, [pc, #96]	; (80072b0 <_Balloc+0x7c>)
 800724e:	2166      	movs	r1, #102	; 0x66
 8007250:	f000 fd94 	bl	8007d7c <__assert_func>
 8007254:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007258:	6006      	str	r6, [r0, #0]
 800725a:	60c6      	str	r6, [r0, #12]
 800725c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800725e:	68f3      	ldr	r3, [r6, #12]
 8007260:	b183      	cbz	r3, 8007284 <_Balloc+0x50>
 8007262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800726a:	b9b8      	cbnz	r0, 800729c <_Balloc+0x68>
 800726c:	2101      	movs	r1, #1
 800726e:	fa01 f605 	lsl.w	r6, r1, r5
 8007272:	1d72      	adds	r2, r6, #5
 8007274:	0092      	lsls	r2, r2, #2
 8007276:	4620      	mov	r0, r4
 8007278:	f000 fb5a 	bl	8007930 <_calloc_r>
 800727c:	b160      	cbz	r0, 8007298 <_Balloc+0x64>
 800727e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007282:	e00e      	b.n	80072a2 <_Balloc+0x6e>
 8007284:	2221      	movs	r2, #33	; 0x21
 8007286:	2104      	movs	r1, #4
 8007288:	4620      	mov	r0, r4
 800728a:	f000 fb51 	bl	8007930 <_calloc_r>
 800728e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007290:	60f0      	str	r0, [r6, #12]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1e4      	bne.n	8007262 <_Balloc+0x2e>
 8007298:	2000      	movs	r0, #0
 800729a:	bd70      	pop	{r4, r5, r6, pc}
 800729c:	6802      	ldr	r2, [r0, #0]
 800729e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072a2:	2300      	movs	r3, #0
 80072a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072a8:	e7f7      	b.n	800729a <_Balloc+0x66>
 80072aa:	bf00      	nop
 80072ac:	0802e5ed 	.word	0x0802e5ed
 80072b0:	0802e674 	.word	0x0802e674

080072b4 <_Bfree>:
 80072b4:	b570      	push	{r4, r5, r6, lr}
 80072b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80072b8:	4605      	mov	r5, r0
 80072ba:	460c      	mov	r4, r1
 80072bc:	b976      	cbnz	r6, 80072dc <_Bfree+0x28>
 80072be:	2010      	movs	r0, #16
 80072c0:	f7ff ffa2 	bl	8007208 <malloc>
 80072c4:	4602      	mov	r2, r0
 80072c6:	6268      	str	r0, [r5, #36]	; 0x24
 80072c8:	b920      	cbnz	r0, 80072d4 <_Bfree+0x20>
 80072ca:	4b09      	ldr	r3, [pc, #36]	; (80072f0 <_Bfree+0x3c>)
 80072cc:	4809      	ldr	r0, [pc, #36]	; (80072f4 <_Bfree+0x40>)
 80072ce:	218a      	movs	r1, #138	; 0x8a
 80072d0:	f000 fd54 	bl	8007d7c <__assert_func>
 80072d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072d8:	6006      	str	r6, [r0, #0]
 80072da:	60c6      	str	r6, [r0, #12]
 80072dc:	b13c      	cbz	r4, 80072ee <_Bfree+0x3a>
 80072de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80072e0:	6862      	ldr	r2, [r4, #4]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072e8:	6021      	str	r1, [r4, #0]
 80072ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072ee:	bd70      	pop	{r4, r5, r6, pc}
 80072f0:	0802e5ed 	.word	0x0802e5ed
 80072f4:	0802e674 	.word	0x0802e674

080072f8 <__multadd>:
 80072f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072fc:	690e      	ldr	r6, [r1, #16]
 80072fe:	4607      	mov	r7, r0
 8007300:	4698      	mov	r8, r3
 8007302:	460c      	mov	r4, r1
 8007304:	f101 0014 	add.w	r0, r1, #20
 8007308:	2300      	movs	r3, #0
 800730a:	6805      	ldr	r5, [r0, #0]
 800730c:	b2a9      	uxth	r1, r5
 800730e:	fb02 8101 	mla	r1, r2, r1, r8
 8007312:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007316:	0c2d      	lsrs	r5, r5, #16
 8007318:	fb02 c505 	mla	r5, r2, r5, ip
 800731c:	b289      	uxth	r1, r1
 800731e:	3301      	adds	r3, #1
 8007320:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007324:	429e      	cmp	r6, r3
 8007326:	f840 1b04 	str.w	r1, [r0], #4
 800732a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800732e:	dcec      	bgt.n	800730a <__multadd+0x12>
 8007330:	f1b8 0f00 	cmp.w	r8, #0
 8007334:	d022      	beq.n	800737c <__multadd+0x84>
 8007336:	68a3      	ldr	r3, [r4, #8]
 8007338:	42b3      	cmp	r3, r6
 800733a:	dc19      	bgt.n	8007370 <__multadd+0x78>
 800733c:	6861      	ldr	r1, [r4, #4]
 800733e:	4638      	mov	r0, r7
 8007340:	3101      	adds	r1, #1
 8007342:	f7ff ff77 	bl	8007234 <_Balloc>
 8007346:	4605      	mov	r5, r0
 8007348:	b928      	cbnz	r0, 8007356 <__multadd+0x5e>
 800734a:	4602      	mov	r2, r0
 800734c:	4b0d      	ldr	r3, [pc, #52]	; (8007384 <__multadd+0x8c>)
 800734e:	480e      	ldr	r0, [pc, #56]	; (8007388 <__multadd+0x90>)
 8007350:	21b5      	movs	r1, #181	; 0xb5
 8007352:	f000 fd13 	bl	8007d7c <__assert_func>
 8007356:	6922      	ldr	r2, [r4, #16]
 8007358:	3202      	adds	r2, #2
 800735a:	f104 010c 	add.w	r1, r4, #12
 800735e:	0092      	lsls	r2, r2, #2
 8007360:	300c      	adds	r0, #12
 8007362:	f7ff ff59 	bl	8007218 <memcpy>
 8007366:	4621      	mov	r1, r4
 8007368:	4638      	mov	r0, r7
 800736a:	f7ff ffa3 	bl	80072b4 <_Bfree>
 800736e:	462c      	mov	r4, r5
 8007370:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007374:	3601      	adds	r6, #1
 8007376:	f8c3 8014 	str.w	r8, [r3, #20]
 800737a:	6126      	str	r6, [r4, #16]
 800737c:	4620      	mov	r0, r4
 800737e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007382:	bf00      	nop
 8007384:	0802e663 	.word	0x0802e663
 8007388:	0802e674 	.word	0x0802e674

0800738c <__hi0bits>:
 800738c:	0c03      	lsrs	r3, r0, #16
 800738e:	041b      	lsls	r3, r3, #16
 8007390:	b9d3      	cbnz	r3, 80073c8 <__hi0bits+0x3c>
 8007392:	0400      	lsls	r0, r0, #16
 8007394:	2310      	movs	r3, #16
 8007396:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800739a:	bf04      	itt	eq
 800739c:	0200      	lsleq	r0, r0, #8
 800739e:	3308      	addeq	r3, #8
 80073a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80073a4:	bf04      	itt	eq
 80073a6:	0100      	lsleq	r0, r0, #4
 80073a8:	3304      	addeq	r3, #4
 80073aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80073ae:	bf04      	itt	eq
 80073b0:	0080      	lsleq	r0, r0, #2
 80073b2:	3302      	addeq	r3, #2
 80073b4:	2800      	cmp	r0, #0
 80073b6:	db05      	blt.n	80073c4 <__hi0bits+0x38>
 80073b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80073bc:	f103 0301 	add.w	r3, r3, #1
 80073c0:	bf08      	it	eq
 80073c2:	2320      	moveq	r3, #32
 80073c4:	4618      	mov	r0, r3
 80073c6:	4770      	bx	lr
 80073c8:	2300      	movs	r3, #0
 80073ca:	e7e4      	b.n	8007396 <__hi0bits+0xa>

080073cc <__lo0bits>:
 80073cc:	6803      	ldr	r3, [r0, #0]
 80073ce:	f013 0207 	ands.w	r2, r3, #7
 80073d2:	4601      	mov	r1, r0
 80073d4:	d00b      	beq.n	80073ee <__lo0bits+0x22>
 80073d6:	07da      	lsls	r2, r3, #31
 80073d8:	d424      	bmi.n	8007424 <__lo0bits+0x58>
 80073da:	0798      	lsls	r0, r3, #30
 80073dc:	bf49      	itett	mi
 80073de:	085b      	lsrmi	r3, r3, #1
 80073e0:	089b      	lsrpl	r3, r3, #2
 80073e2:	2001      	movmi	r0, #1
 80073e4:	600b      	strmi	r3, [r1, #0]
 80073e6:	bf5c      	itt	pl
 80073e8:	600b      	strpl	r3, [r1, #0]
 80073ea:	2002      	movpl	r0, #2
 80073ec:	4770      	bx	lr
 80073ee:	b298      	uxth	r0, r3
 80073f0:	b9b0      	cbnz	r0, 8007420 <__lo0bits+0x54>
 80073f2:	0c1b      	lsrs	r3, r3, #16
 80073f4:	2010      	movs	r0, #16
 80073f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80073fa:	bf04      	itt	eq
 80073fc:	0a1b      	lsreq	r3, r3, #8
 80073fe:	3008      	addeq	r0, #8
 8007400:	071a      	lsls	r2, r3, #28
 8007402:	bf04      	itt	eq
 8007404:	091b      	lsreq	r3, r3, #4
 8007406:	3004      	addeq	r0, #4
 8007408:	079a      	lsls	r2, r3, #30
 800740a:	bf04      	itt	eq
 800740c:	089b      	lsreq	r3, r3, #2
 800740e:	3002      	addeq	r0, #2
 8007410:	07da      	lsls	r2, r3, #31
 8007412:	d403      	bmi.n	800741c <__lo0bits+0x50>
 8007414:	085b      	lsrs	r3, r3, #1
 8007416:	f100 0001 	add.w	r0, r0, #1
 800741a:	d005      	beq.n	8007428 <__lo0bits+0x5c>
 800741c:	600b      	str	r3, [r1, #0]
 800741e:	4770      	bx	lr
 8007420:	4610      	mov	r0, r2
 8007422:	e7e8      	b.n	80073f6 <__lo0bits+0x2a>
 8007424:	2000      	movs	r0, #0
 8007426:	4770      	bx	lr
 8007428:	2020      	movs	r0, #32
 800742a:	4770      	bx	lr

0800742c <__i2b>:
 800742c:	b510      	push	{r4, lr}
 800742e:	460c      	mov	r4, r1
 8007430:	2101      	movs	r1, #1
 8007432:	f7ff feff 	bl	8007234 <_Balloc>
 8007436:	4602      	mov	r2, r0
 8007438:	b928      	cbnz	r0, 8007446 <__i2b+0x1a>
 800743a:	4b05      	ldr	r3, [pc, #20]	; (8007450 <__i2b+0x24>)
 800743c:	4805      	ldr	r0, [pc, #20]	; (8007454 <__i2b+0x28>)
 800743e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007442:	f000 fc9b 	bl	8007d7c <__assert_func>
 8007446:	2301      	movs	r3, #1
 8007448:	6144      	str	r4, [r0, #20]
 800744a:	6103      	str	r3, [r0, #16]
 800744c:	bd10      	pop	{r4, pc}
 800744e:	bf00      	nop
 8007450:	0802e663 	.word	0x0802e663
 8007454:	0802e674 	.word	0x0802e674

08007458 <__multiply>:
 8007458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800745c:	4614      	mov	r4, r2
 800745e:	690a      	ldr	r2, [r1, #16]
 8007460:	6923      	ldr	r3, [r4, #16]
 8007462:	429a      	cmp	r2, r3
 8007464:	bfb8      	it	lt
 8007466:	460b      	movlt	r3, r1
 8007468:	460d      	mov	r5, r1
 800746a:	bfbc      	itt	lt
 800746c:	4625      	movlt	r5, r4
 800746e:	461c      	movlt	r4, r3
 8007470:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007474:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007478:	68ab      	ldr	r3, [r5, #8]
 800747a:	6869      	ldr	r1, [r5, #4]
 800747c:	eb0a 0709 	add.w	r7, sl, r9
 8007480:	42bb      	cmp	r3, r7
 8007482:	b085      	sub	sp, #20
 8007484:	bfb8      	it	lt
 8007486:	3101      	addlt	r1, #1
 8007488:	f7ff fed4 	bl	8007234 <_Balloc>
 800748c:	b930      	cbnz	r0, 800749c <__multiply+0x44>
 800748e:	4602      	mov	r2, r0
 8007490:	4b42      	ldr	r3, [pc, #264]	; (800759c <__multiply+0x144>)
 8007492:	4843      	ldr	r0, [pc, #268]	; (80075a0 <__multiply+0x148>)
 8007494:	f240 115d 	movw	r1, #349	; 0x15d
 8007498:	f000 fc70 	bl	8007d7c <__assert_func>
 800749c:	f100 0614 	add.w	r6, r0, #20
 80074a0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80074a4:	4633      	mov	r3, r6
 80074a6:	2200      	movs	r2, #0
 80074a8:	4543      	cmp	r3, r8
 80074aa:	d31e      	bcc.n	80074ea <__multiply+0x92>
 80074ac:	f105 0c14 	add.w	ip, r5, #20
 80074b0:	f104 0314 	add.w	r3, r4, #20
 80074b4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80074b8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80074bc:	9202      	str	r2, [sp, #8]
 80074be:	ebac 0205 	sub.w	r2, ip, r5
 80074c2:	3a15      	subs	r2, #21
 80074c4:	f022 0203 	bic.w	r2, r2, #3
 80074c8:	3204      	adds	r2, #4
 80074ca:	f105 0115 	add.w	r1, r5, #21
 80074ce:	458c      	cmp	ip, r1
 80074d0:	bf38      	it	cc
 80074d2:	2204      	movcc	r2, #4
 80074d4:	9201      	str	r2, [sp, #4]
 80074d6:	9a02      	ldr	r2, [sp, #8]
 80074d8:	9303      	str	r3, [sp, #12]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d808      	bhi.n	80074f0 <__multiply+0x98>
 80074de:	2f00      	cmp	r7, #0
 80074e0:	dc55      	bgt.n	800758e <__multiply+0x136>
 80074e2:	6107      	str	r7, [r0, #16]
 80074e4:	b005      	add	sp, #20
 80074e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ea:	f843 2b04 	str.w	r2, [r3], #4
 80074ee:	e7db      	b.n	80074a8 <__multiply+0x50>
 80074f0:	f8b3 a000 	ldrh.w	sl, [r3]
 80074f4:	f1ba 0f00 	cmp.w	sl, #0
 80074f8:	d020      	beq.n	800753c <__multiply+0xe4>
 80074fa:	f105 0e14 	add.w	lr, r5, #20
 80074fe:	46b1      	mov	r9, r6
 8007500:	2200      	movs	r2, #0
 8007502:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007506:	f8d9 b000 	ldr.w	fp, [r9]
 800750a:	b2a1      	uxth	r1, r4
 800750c:	fa1f fb8b 	uxth.w	fp, fp
 8007510:	fb0a b101 	mla	r1, sl, r1, fp
 8007514:	4411      	add	r1, r2
 8007516:	f8d9 2000 	ldr.w	r2, [r9]
 800751a:	0c24      	lsrs	r4, r4, #16
 800751c:	0c12      	lsrs	r2, r2, #16
 800751e:	fb0a 2404 	mla	r4, sl, r4, r2
 8007522:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007526:	b289      	uxth	r1, r1
 8007528:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800752c:	45f4      	cmp	ip, lr
 800752e:	f849 1b04 	str.w	r1, [r9], #4
 8007532:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007536:	d8e4      	bhi.n	8007502 <__multiply+0xaa>
 8007538:	9901      	ldr	r1, [sp, #4]
 800753a:	5072      	str	r2, [r6, r1]
 800753c:	9a03      	ldr	r2, [sp, #12]
 800753e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007542:	3304      	adds	r3, #4
 8007544:	f1b9 0f00 	cmp.w	r9, #0
 8007548:	d01f      	beq.n	800758a <__multiply+0x132>
 800754a:	6834      	ldr	r4, [r6, #0]
 800754c:	f105 0114 	add.w	r1, r5, #20
 8007550:	46b6      	mov	lr, r6
 8007552:	f04f 0a00 	mov.w	sl, #0
 8007556:	880a      	ldrh	r2, [r1, #0]
 8007558:	f8be b002 	ldrh.w	fp, [lr, #2]
 800755c:	fb09 b202 	mla	r2, r9, r2, fp
 8007560:	4492      	add	sl, r2
 8007562:	b2a4      	uxth	r4, r4
 8007564:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007568:	f84e 4b04 	str.w	r4, [lr], #4
 800756c:	f851 4b04 	ldr.w	r4, [r1], #4
 8007570:	f8be 2000 	ldrh.w	r2, [lr]
 8007574:	0c24      	lsrs	r4, r4, #16
 8007576:	fb09 2404 	mla	r4, r9, r4, r2
 800757a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800757e:	458c      	cmp	ip, r1
 8007580:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007584:	d8e7      	bhi.n	8007556 <__multiply+0xfe>
 8007586:	9a01      	ldr	r2, [sp, #4]
 8007588:	50b4      	str	r4, [r6, r2]
 800758a:	3604      	adds	r6, #4
 800758c:	e7a3      	b.n	80074d6 <__multiply+0x7e>
 800758e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1a5      	bne.n	80074e2 <__multiply+0x8a>
 8007596:	3f01      	subs	r7, #1
 8007598:	e7a1      	b.n	80074de <__multiply+0x86>
 800759a:	bf00      	nop
 800759c:	0802e663 	.word	0x0802e663
 80075a0:	0802e674 	.word	0x0802e674

080075a4 <__pow5mult>:
 80075a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075a8:	4615      	mov	r5, r2
 80075aa:	f012 0203 	ands.w	r2, r2, #3
 80075ae:	4606      	mov	r6, r0
 80075b0:	460f      	mov	r7, r1
 80075b2:	d007      	beq.n	80075c4 <__pow5mult+0x20>
 80075b4:	4c25      	ldr	r4, [pc, #148]	; (800764c <__pow5mult+0xa8>)
 80075b6:	3a01      	subs	r2, #1
 80075b8:	2300      	movs	r3, #0
 80075ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80075be:	f7ff fe9b 	bl	80072f8 <__multadd>
 80075c2:	4607      	mov	r7, r0
 80075c4:	10ad      	asrs	r5, r5, #2
 80075c6:	d03d      	beq.n	8007644 <__pow5mult+0xa0>
 80075c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80075ca:	b97c      	cbnz	r4, 80075ec <__pow5mult+0x48>
 80075cc:	2010      	movs	r0, #16
 80075ce:	f7ff fe1b 	bl	8007208 <malloc>
 80075d2:	4602      	mov	r2, r0
 80075d4:	6270      	str	r0, [r6, #36]	; 0x24
 80075d6:	b928      	cbnz	r0, 80075e4 <__pow5mult+0x40>
 80075d8:	4b1d      	ldr	r3, [pc, #116]	; (8007650 <__pow5mult+0xac>)
 80075da:	481e      	ldr	r0, [pc, #120]	; (8007654 <__pow5mult+0xb0>)
 80075dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80075e0:	f000 fbcc 	bl	8007d7c <__assert_func>
 80075e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075e8:	6004      	str	r4, [r0, #0]
 80075ea:	60c4      	str	r4, [r0, #12]
 80075ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80075f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075f4:	b94c      	cbnz	r4, 800760a <__pow5mult+0x66>
 80075f6:	f240 2171 	movw	r1, #625	; 0x271
 80075fa:	4630      	mov	r0, r6
 80075fc:	f7ff ff16 	bl	800742c <__i2b>
 8007600:	2300      	movs	r3, #0
 8007602:	f8c8 0008 	str.w	r0, [r8, #8]
 8007606:	4604      	mov	r4, r0
 8007608:	6003      	str	r3, [r0, #0]
 800760a:	f04f 0900 	mov.w	r9, #0
 800760e:	07eb      	lsls	r3, r5, #31
 8007610:	d50a      	bpl.n	8007628 <__pow5mult+0x84>
 8007612:	4639      	mov	r1, r7
 8007614:	4622      	mov	r2, r4
 8007616:	4630      	mov	r0, r6
 8007618:	f7ff ff1e 	bl	8007458 <__multiply>
 800761c:	4639      	mov	r1, r7
 800761e:	4680      	mov	r8, r0
 8007620:	4630      	mov	r0, r6
 8007622:	f7ff fe47 	bl	80072b4 <_Bfree>
 8007626:	4647      	mov	r7, r8
 8007628:	106d      	asrs	r5, r5, #1
 800762a:	d00b      	beq.n	8007644 <__pow5mult+0xa0>
 800762c:	6820      	ldr	r0, [r4, #0]
 800762e:	b938      	cbnz	r0, 8007640 <__pow5mult+0x9c>
 8007630:	4622      	mov	r2, r4
 8007632:	4621      	mov	r1, r4
 8007634:	4630      	mov	r0, r6
 8007636:	f7ff ff0f 	bl	8007458 <__multiply>
 800763a:	6020      	str	r0, [r4, #0]
 800763c:	f8c0 9000 	str.w	r9, [r0]
 8007640:	4604      	mov	r4, r0
 8007642:	e7e4      	b.n	800760e <__pow5mult+0x6a>
 8007644:	4638      	mov	r0, r7
 8007646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800764a:	bf00      	nop
 800764c:	0802e7c8 	.word	0x0802e7c8
 8007650:	0802e5ed 	.word	0x0802e5ed
 8007654:	0802e674 	.word	0x0802e674

08007658 <__lshift>:
 8007658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800765c:	460c      	mov	r4, r1
 800765e:	6849      	ldr	r1, [r1, #4]
 8007660:	6923      	ldr	r3, [r4, #16]
 8007662:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007666:	68a3      	ldr	r3, [r4, #8]
 8007668:	4607      	mov	r7, r0
 800766a:	4691      	mov	r9, r2
 800766c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007670:	f108 0601 	add.w	r6, r8, #1
 8007674:	42b3      	cmp	r3, r6
 8007676:	db0b      	blt.n	8007690 <__lshift+0x38>
 8007678:	4638      	mov	r0, r7
 800767a:	f7ff fddb 	bl	8007234 <_Balloc>
 800767e:	4605      	mov	r5, r0
 8007680:	b948      	cbnz	r0, 8007696 <__lshift+0x3e>
 8007682:	4602      	mov	r2, r0
 8007684:	4b28      	ldr	r3, [pc, #160]	; (8007728 <__lshift+0xd0>)
 8007686:	4829      	ldr	r0, [pc, #164]	; (800772c <__lshift+0xd4>)
 8007688:	f240 11d9 	movw	r1, #473	; 0x1d9
 800768c:	f000 fb76 	bl	8007d7c <__assert_func>
 8007690:	3101      	adds	r1, #1
 8007692:	005b      	lsls	r3, r3, #1
 8007694:	e7ee      	b.n	8007674 <__lshift+0x1c>
 8007696:	2300      	movs	r3, #0
 8007698:	f100 0114 	add.w	r1, r0, #20
 800769c:	f100 0210 	add.w	r2, r0, #16
 80076a0:	4618      	mov	r0, r3
 80076a2:	4553      	cmp	r3, sl
 80076a4:	db33      	blt.n	800770e <__lshift+0xb6>
 80076a6:	6920      	ldr	r0, [r4, #16]
 80076a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076ac:	f104 0314 	add.w	r3, r4, #20
 80076b0:	f019 091f 	ands.w	r9, r9, #31
 80076b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80076b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80076bc:	d02b      	beq.n	8007716 <__lshift+0xbe>
 80076be:	f1c9 0e20 	rsb	lr, r9, #32
 80076c2:	468a      	mov	sl, r1
 80076c4:	2200      	movs	r2, #0
 80076c6:	6818      	ldr	r0, [r3, #0]
 80076c8:	fa00 f009 	lsl.w	r0, r0, r9
 80076cc:	4302      	orrs	r2, r0
 80076ce:	f84a 2b04 	str.w	r2, [sl], #4
 80076d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80076d6:	459c      	cmp	ip, r3
 80076d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80076dc:	d8f3      	bhi.n	80076c6 <__lshift+0x6e>
 80076de:	ebac 0304 	sub.w	r3, ip, r4
 80076e2:	3b15      	subs	r3, #21
 80076e4:	f023 0303 	bic.w	r3, r3, #3
 80076e8:	3304      	adds	r3, #4
 80076ea:	f104 0015 	add.w	r0, r4, #21
 80076ee:	4584      	cmp	ip, r0
 80076f0:	bf38      	it	cc
 80076f2:	2304      	movcc	r3, #4
 80076f4:	50ca      	str	r2, [r1, r3]
 80076f6:	b10a      	cbz	r2, 80076fc <__lshift+0xa4>
 80076f8:	f108 0602 	add.w	r6, r8, #2
 80076fc:	3e01      	subs	r6, #1
 80076fe:	4638      	mov	r0, r7
 8007700:	612e      	str	r6, [r5, #16]
 8007702:	4621      	mov	r1, r4
 8007704:	f7ff fdd6 	bl	80072b4 <_Bfree>
 8007708:	4628      	mov	r0, r5
 800770a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800770e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007712:	3301      	adds	r3, #1
 8007714:	e7c5      	b.n	80076a2 <__lshift+0x4a>
 8007716:	3904      	subs	r1, #4
 8007718:	f853 2b04 	ldr.w	r2, [r3], #4
 800771c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007720:	459c      	cmp	ip, r3
 8007722:	d8f9      	bhi.n	8007718 <__lshift+0xc0>
 8007724:	e7ea      	b.n	80076fc <__lshift+0xa4>
 8007726:	bf00      	nop
 8007728:	0802e663 	.word	0x0802e663
 800772c:	0802e674 	.word	0x0802e674

08007730 <__mcmp>:
 8007730:	b530      	push	{r4, r5, lr}
 8007732:	6902      	ldr	r2, [r0, #16]
 8007734:	690c      	ldr	r4, [r1, #16]
 8007736:	1b12      	subs	r2, r2, r4
 8007738:	d10e      	bne.n	8007758 <__mcmp+0x28>
 800773a:	f100 0314 	add.w	r3, r0, #20
 800773e:	3114      	adds	r1, #20
 8007740:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007744:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007748:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800774c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007750:	42a5      	cmp	r5, r4
 8007752:	d003      	beq.n	800775c <__mcmp+0x2c>
 8007754:	d305      	bcc.n	8007762 <__mcmp+0x32>
 8007756:	2201      	movs	r2, #1
 8007758:	4610      	mov	r0, r2
 800775a:	bd30      	pop	{r4, r5, pc}
 800775c:	4283      	cmp	r3, r0
 800775e:	d3f3      	bcc.n	8007748 <__mcmp+0x18>
 8007760:	e7fa      	b.n	8007758 <__mcmp+0x28>
 8007762:	f04f 32ff 	mov.w	r2, #4294967295
 8007766:	e7f7      	b.n	8007758 <__mcmp+0x28>

08007768 <__mdiff>:
 8007768:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800776c:	460c      	mov	r4, r1
 800776e:	4606      	mov	r6, r0
 8007770:	4611      	mov	r1, r2
 8007772:	4620      	mov	r0, r4
 8007774:	4617      	mov	r7, r2
 8007776:	f7ff ffdb 	bl	8007730 <__mcmp>
 800777a:	1e05      	subs	r5, r0, #0
 800777c:	d110      	bne.n	80077a0 <__mdiff+0x38>
 800777e:	4629      	mov	r1, r5
 8007780:	4630      	mov	r0, r6
 8007782:	f7ff fd57 	bl	8007234 <_Balloc>
 8007786:	b930      	cbnz	r0, 8007796 <__mdiff+0x2e>
 8007788:	4b39      	ldr	r3, [pc, #228]	; (8007870 <__mdiff+0x108>)
 800778a:	4602      	mov	r2, r0
 800778c:	f240 2132 	movw	r1, #562	; 0x232
 8007790:	4838      	ldr	r0, [pc, #224]	; (8007874 <__mdiff+0x10c>)
 8007792:	f000 faf3 	bl	8007d7c <__assert_func>
 8007796:	2301      	movs	r3, #1
 8007798:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800779c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a0:	bfa4      	itt	ge
 80077a2:	463b      	movge	r3, r7
 80077a4:	4627      	movge	r7, r4
 80077a6:	4630      	mov	r0, r6
 80077a8:	6879      	ldr	r1, [r7, #4]
 80077aa:	bfa6      	itte	ge
 80077ac:	461c      	movge	r4, r3
 80077ae:	2500      	movge	r5, #0
 80077b0:	2501      	movlt	r5, #1
 80077b2:	f7ff fd3f 	bl	8007234 <_Balloc>
 80077b6:	b920      	cbnz	r0, 80077c2 <__mdiff+0x5a>
 80077b8:	4b2d      	ldr	r3, [pc, #180]	; (8007870 <__mdiff+0x108>)
 80077ba:	4602      	mov	r2, r0
 80077bc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80077c0:	e7e6      	b.n	8007790 <__mdiff+0x28>
 80077c2:	693e      	ldr	r6, [r7, #16]
 80077c4:	60c5      	str	r5, [r0, #12]
 80077c6:	6925      	ldr	r5, [r4, #16]
 80077c8:	f107 0114 	add.w	r1, r7, #20
 80077cc:	f104 0914 	add.w	r9, r4, #20
 80077d0:	f100 0e14 	add.w	lr, r0, #20
 80077d4:	f107 0210 	add.w	r2, r7, #16
 80077d8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80077dc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80077e0:	46f2      	mov	sl, lr
 80077e2:	2700      	movs	r7, #0
 80077e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80077e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80077ec:	fa1f f883 	uxth.w	r8, r3
 80077f0:	fa17 f78b 	uxtah	r7, r7, fp
 80077f4:	0c1b      	lsrs	r3, r3, #16
 80077f6:	eba7 0808 	sub.w	r8, r7, r8
 80077fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80077fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007802:	fa1f f888 	uxth.w	r8, r8
 8007806:	141f      	asrs	r7, r3, #16
 8007808:	454d      	cmp	r5, r9
 800780a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800780e:	f84a 3b04 	str.w	r3, [sl], #4
 8007812:	d8e7      	bhi.n	80077e4 <__mdiff+0x7c>
 8007814:	1b2b      	subs	r3, r5, r4
 8007816:	3b15      	subs	r3, #21
 8007818:	f023 0303 	bic.w	r3, r3, #3
 800781c:	3304      	adds	r3, #4
 800781e:	3415      	adds	r4, #21
 8007820:	42a5      	cmp	r5, r4
 8007822:	bf38      	it	cc
 8007824:	2304      	movcc	r3, #4
 8007826:	4419      	add	r1, r3
 8007828:	4473      	add	r3, lr
 800782a:	469e      	mov	lr, r3
 800782c:	460d      	mov	r5, r1
 800782e:	4565      	cmp	r5, ip
 8007830:	d30e      	bcc.n	8007850 <__mdiff+0xe8>
 8007832:	f10c 0203 	add.w	r2, ip, #3
 8007836:	1a52      	subs	r2, r2, r1
 8007838:	f022 0203 	bic.w	r2, r2, #3
 800783c:	3903      	subs	r1, #3
 800783e:	458c      	cmp	ip, r1
 8007840:	bf38      	it	cc
 8007842:	2200      	movcc	r2, #0
 8007844:	441a      	add	r2, r3
 8007846:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800784a:	b17b      	cbz	r3, 800786c <__mdiff+0x104>
 800784c:	6106      	str	r6, [r0, #16]
 800784e:	e7a5      	b.n	800779c <__mdiff+0x34>
 8007850:	f855 8b04 	ldr.w	r8, [r5], #4
 8007854:	fa17 f488 	uxtah	r4, r7, r8
 8007858:	1422      	asrs	r2, r4, #16
 800785a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800785e:	b2a4      	uxth	r4, r4
 8007860:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007864:	f84e 4b04 	str.w	r4, [lr], #4
 8007868:	1417      	asrs	r7, r2, #16
 800786a:	e7e0      	b.n	800782e <__mdiff+0xc6>
 800786c:	3e01      	subs	r6, #1
 800786e:	e7ea      	b.n	8007846 <__mdiff+0xde>
 8007870:	0802e663 	.word	0x0802e663
 8007874:	0802e674 	.word	0x0802e674

08007878 <__d2b>:
 8007878:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800787c:	4689      	mov	r9, r1
 800787e:	2101      	movs	r1, #1
 8007880:	ec57 6b10 	vmov	r6, r7, d0
 8007884:	4690      	mov	r8, r2
 8007886:	f7ff fcd5 	bl	8007234 <_Balloc>
 800788a:	4604      	mov	r4, r0
 800788c:	b930      	cbnz	r0, 800789c <__d2b+0x24>
 800788e:	4602      	mov	r2, r0
 8007890:	4b25      	ldr	r3, [pc, #148]	; (8007928 <__d2b+0xb0>)
 8007892:	4826      	ldr	r0, [pc, #152]	; (800792c <__d2b+0xb4>)
 8007894:	f240 310a 	movw	r1, #778	; 0x30a
 8007898:	f000 fa70 	bl	8007d7c <__assert_func>
 800789c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80078a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80078a4:	bb35      	cbnz	r5, 80078f4 <__d2b+0x7c>
 80078a6:	2e00      	cmp	r6, #0
 80078a8:	9301      	str	r3, [sp, #4]
 80078aa:	d028      	beq.n	80078fe <__d2b+0x86>
 80078ac:	4668      	mov	r0, sp
 80078ae:	9600      	str	r6, [sp, #0]
 80078b0:	f7ff fd8c 	bl	80073cc <__lo0bits>
 80078b4:	9900      	ldr	r1, [sp, #0]
 80078b6:	b300      	cbz	r0, 80078fa <__d2b+0x82>
 80078b8:	9a01      	ldr	r2, [sp, #4]
 80078ba:	f1c0 0320 	rsb	r3, r0, #32
 80078be:	fa02 f303 	lsl.w	r3, r2, r3
 80078c2:	430b      	orrs	r3, r1
 80078c4:	40c2      	lsrs	r2, r0
 80078c6:	6163      	str	r3, [r4, #20]
 80078c8:	9201      	str	r2, [sp, #4]
 80078ca:	9b01      	ldr	r3, [sp, #4]
 80078cc:	61a3      	str	r3, [r4, #24]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	bf14      	ite	ne
 80078d2:	2202      	movne	r2, #2
 80078d4:	2201      	moveq	r2, #1
 80078d6:	6122      	str	r2, [r4, #16]
 80078d8:	b1d5      	cbz	r5, 8007910 <__d2b+0x98>
 80078da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80078de:	4405      	add	r5, r0
 80078e0:	f8c9 5000 	str.w	r5, [r9]
 80078e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80078e8:	f8c8 0000 	str.w	r0, [r8]
 80078ec:	4620      	mov	r0, r4
 80078ee:	b003      	add	sp, #12
 80078f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078f8:	e7d5      	b.n	80078a6 <__d2b+0x2e>
 80078fa:	6161      	str	r1, [r4, #20]
 80078fc:	e7e5      	b.n	80078ca <__d2b+0x52>
 80078fe:	a801      	add	r0, sp, #4
 8007900:	f7ff fd64 	bl	80073cc <__lo0bits>
 8007904:	9b01      	ldr	r3, [sp, #4]
 8007906:	6163      	str	r3, [r4, #20]
 8007908:	2201      	movs	r2, #1
 800790a:	6122      	str	r2, [r4, #16]
 800790c:	3020      	adds	r0, #32
 800790e:	e7e3      	b.n	80078d8 <__d2b+0x60>
 8007910:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007914:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007918:	f8c9 0000 	str.w	r0, [r9]
 800791c:	6918      	ldr	r0, [r3, #16]
 800791e:	f7ff fd35 	bl	800738c <__hi0bits>
 8007922:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007926:	e7df      	b.n	80078e8 <__d2b+0x70>
 8007928:	0802e663 	.word	0x0802e663
 800792c:	0802e674 	.word	0x0802e674

08007930 <_calloc_r>:
 8007930:	b513      	push	{r0, r1, r4, lr}
 8007932:	434a      	muls	r2, r1
 8007934:	4611      	mov	r1, r2
 8007936:	9201      	str	r2, [sp, #4]
 8007938:	f000 f85a 	bl	80079f0 <_malloc_r>
 800793c:	4604      	mov	r4, r0
 800793e:	b118      	cbz	r0, 8007948 <_calloc_r+0x18>
 8007940:	9a01      	ldr	r2, [sp, #4]
 8007942:	2100      	movs	r1, #0
 8007944:	f7fe f950 	bl	8005be8 <memset>
 8007948:	4620      	mov	r0, r4
 800794a:	b002      	add	sp, #8
 800794c:	bd10      	pop	{r4, pc}
	...

08007950 <_free_r>:
 8007950:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007952:	2900      	cmp	r1, #0
 8007954:	d048      	beq.n	80079e8 <_free_r+0x98>
 8007956:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800795a:	9001      	str	r0, [sp, #4]
 800795c:	2b00      	cmp	r3, #0
 800795e:	f1a1 0404 	sub.w	r4, r1, #4
 8007962:	bfb8      	it	lt
 8007964:	18e4      	addlt	r4, r4, r3
 8007966:	f000 fa65 	bl	8007e34 <__malloc_lock>
 800796a:	4a20      	ldr	r2, [pc, #128]	; (80079ec <_free_r+0x9c>)
 800796c:	9801      	ldr	r0, [sp, #4]
 800796e:	6813      	ldr	r3, [r2, #0]
 8007970:	4615      	mov	r5, r2
 8007972:	b933      	cbnz	r3, 8007982 <_free_r+0x32>
 8007974:	6063      	str	r3, [r4, #4]
 8007976:	6014      	str	r4, [r2, #0]
 8007978:	b003      	add	sp, #12
 800797a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800797e:	f000 ba5f 	b.w	8007e40 <__malloc_unlock>
 8007982:	42a3      	cmp	r3, r4
 8007984:	d90b      	bls.n	800799e <_free_r+0x4e>
 8007986:	6821      	ldr	r1, [r4, #0]
 8007988:	1862      	adds	r2, r4, r1
 800798a:	4293      	cmp	r3, r2
 800798c:	bf04      	itt	eq
 800798e:	681a      	ldreq	r2, [r3, #0]
 8007990:	685b      	ldreq	r3, [r3, #4]
 8007992:	6063      	str	r3, [r4, #4]
 8007994:	bf04      	itt	eq
 8007996:	1852      	addeq	r2, r2, r1
 8007998:	6022      	streq	r2, [r4, #0]
 800799a:	602c      	str	r4, [r5, #0]
 800799c:	e7ec      	b.n	8007978 <_free_r+0x28>
 800799e:	461a      	mov	r2, r3
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	b10b      	cbz	r3, 80079a8 <_free_r+0x58>
 80079a4:	42a3      	cmp	r3, r4
 80079a6:	d9fa      	bls.n	800799e <_free_r+0x4e>
 80079a8:	6811      	ldr	r1, [r2, #0]
 80079aa:	1855      	adds	r5, r2, r1
 80079ac:	42a5      	cmp	r5, r4
 80079ae:	d10b      	bne.n	80079c8 <_free_r+0x78>
 80079b0:	6824      	ldr	r4, [r4, #0]
 80079b2:	4421      	add	r1, r4
 80079b4:	1854      	adds	r4, r2, r1
 80079b6:	42a3      	cmp	r3, r4
 80079b8:	6011      	str	r1, [r2, #0]
 80079ba:	d1dd      	bne.n	8007978 <_free_r+0x28>
 80079bc:	681c      	ldr	r4, [r3, #0]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	6053      	str	r3, [r2, #4]
 80079c2:	4421      	add	r1, r4
 80079c4:	6011      	str	r1, [r2, #0]
 80079c6:	e7d7      	b.n	8007978 <_free_r+0x28>
 80079c8:	d902      	bls.n	80079d0 <_free_r+0x80>
 80079ca:	230c      	movs	r3, #12
 80079cc:	6003      	str	r3, [r0, #0]
 80079ce:	e7d3      	b.n	8007978 <_free_r+0x28>
 80079d0:	6825      	ldr	r5, [r4, #0]
 80079d2:	1961      	adds	r1, r4, r5
 80079d4:	428b      	cmp	r3, r1
 80079d6:	bf04      	itt	eq
 80079d8:	6819      	ldreq	r1, [r3, #0]
 80079da:	685b      	ldreq	r3, [r3, #4]
 80079dc:	6063      	str	r3, [r4, #4]
 80079de:	bf04      	itt	eq
 80079e0:	1949      	addeq	r1, r1, r5
 80079e2:	6021      	streq	r1, [r4, #0]
 80079e4:	6054      	str	r4, [r2, #4]
 80079e6:	e7c7      	b.n	8007978 <_free_r+0x28>
 80079e8:	b003      	add	sp, #12
 80079ea:	bd30      	pop	{r4, r5, pc}
 80079ec:	20000204 	.word	0x20000204

080079f0 <_malloc_r>:
 80079f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f2:	1ccd      	adds	r5, r1, #3
 80079f4:	f025 0503 	bic.w	r5, r5, #3
 80079f8:	3508      	adds	r5, #8
 80079fa:	2d0c      	cmp	r5, #12
 80079fc:	bf38      	it	cc
 80079fe:	250c      	movcc	r5, #12
 8007a00:	2d00      	cmp	r5, #0
 8007a02:	4606      	mov	r6, r0
 8007a04:	db01      	blt.n	8007a0a <_malloc_r+0x1a>
 8007a06:	42a9      	cmp	r1, r5
 8007a08:	d903      	bls.n	8007a12 <_malloc_r+0x22>
 8007a0a:	230c      	movs	r3, #12
 8007a0c:	6033      	str	r3, [r6, #0]
 8007a0e:	2000      	movs	r0, #0
 8007a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a12:	f000 fa0f 	bl	8007e34 <__malloc_lock>
 8007a16:	4921      	ldr	r1, [pc, #132]	; (8007a9c <_malloc_r+0xac>)
 8007a18:	680a      	ldr	r2, [r1, #0]
 8007a1a:	4614      	mov	r4, r2
 8007a1c:	b99c      	cbnz	r4, 8007a46 <_malloc_r+0x56>
 8007a1e:	4f20      	ldr	r7, [pc, #128]	; (8007aa0 <_malloc_r+0xb0>)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	b923      	cbnz	r3, 8007a2e <_malloc_r+0x3e>
 8007a24:	4621      	mov	r1, r4
 8007a26:	4630      	mov	r0, r6
 8007a28:	f000 f998 	bl	8007d5c <_sbrk_r>
 8007a2c:	6038      	str	r0, [r7, #0]
 8007a2e:	4629      	mov	r1, r5
 8007a30:	4630      	mov	r0, r6
 8007a32:	f000 f993 	bl	8007d5c <_sbrk_r>
 8007a36:	1c43      	adds	r3, r0, #1
 8007a38:	d123      	bne.n	8007a82 <_malloc_r+0x92>
 8007a3a:	230c      	movs	r3, #12
 8007a3c:	6033      	str	r3, [r6, #0]
 8007a3e:	4630      	mov	r0, r6
 8007a40:	f000 f9fe 	bl	8007e40 <__malloc_unlock>
 8007a44:	e7e3      	b.n	8007a0e <_malloc_r+0x1e>
 8007a46:	6823      	ldr	r3, [r4, #0]
 8007a48:	1b5b      	subs	r3, r3, r5
 8007a4a:	d417      	bmi.n	8007a7c <_malloc_r+0x8c>
 8007a4c:	2b0b      	cmp	r3, #11
 8007a4e:	d903      	bls.n	8007a58 <_malloc_r+0x68>
 8007a50:	6023      	str	r3, [r4, #0]
 8007a52:	441c      	add	r4, r3
 8007a54:	6025      	str	r5, [r4, #0]
 8007a56:	e004      	b.n	8007a62 <_malloc_r+0x72>
 8007a58:	6863      	ldr	r3, [r4, #4]
 8007a5a:	42a2      	cmp	r2, r4
 8007a5c:	bf0c      	ite	eq
 8007a5e:	600b      	streq	r3, [r1, #0]
 8007a60:	6053      	strne	r3, [r2, #4]
 8007a62:	4630      	mov	r0, r6
 8007a64:	f000 f9ec 	bl	8007e40 <__malloc_unlock>
 8007a68:	f104 000b 	add.w	r0, r4, #11
 8007a6c:	1d23      	adds	r3, r4, #4
 8007a6e:	f020 0007 	bic.w	r0, r0, #7
 8007a72:	1ac2      	subs	r2, r0, r3
 8007a74:	d0cc      	beq.n	8007a10 <_malloc_r+0x20>
 8007a76:	1a1b      	subs	r3, r3, r0
 8007a78:	50a3      	str	r3, [r4, r2]
 8007a7a:	e7c9      	b.n	8007a10 <_malloc_r+0x20>
 8007a7c:	4622      	mov	r2, r4
 8007a7e:	6864      	ldr	r4, [r4, #4]
 8007a80:	e7cc      	b.n	8007a1c <_malloc_r+0x2c>
 8007a82:	1cc4      	adds	r4, r0, #3
 8007a84:	f024 0403 	bic.w	r4, r4, #3
 8007a88:	42a0      	cmp	r0, r4
 8007a8a:	d0e3      	beq.n	8007a54 <_malloc_r+0x64>
 8007a8c:	1a21      	subs	r1, r4, r0
 8007a8e:	4630      	mov	r0, r6
 8007a90:	f000 f964 	bl	8007d5c <_sbrk_r>
 8007a94:	3001      	adds	r0, #1
 8007a96:	d1dd      	bne.n	8007a54 <_malloc_r+0x64>
 8007a98:	e7cf      	b.n	8007a3a <_malloc_r+0x4a>
 8007a9a:	bf00      	nop
 8007a9c:	20000204 	.word	0x20000204
 8007aa0:	20000208 	.word	0x20000208

08007aa4 <__ssputs_r>:
 8007aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aa8:	688e      	ldr	r6, [r1, #8]
 8007aaa:	429e      	cmp	r6, r3
 8007aac:	4682      	mov	sl, r0
 8007aae:	460c      	mov	r4, r1
 8007ab0:	4690      	mov	r8, r2
 8007ab2:	461f      	mov	r7, r3
 8007ab4:	d838      	bhi.n	8007b28 <__ssputs_r+0x84>
 8007ab6:	898a      	ldrh	r2, [r1, #12]
 8007ab8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007abc:	d032      	beq.n	8007b24 <__ssputs_r+0x80>
 8007abe:	6825      	ldr	r5, [r4, #0]
 8007ac0:	6909      	ldr	r1, [r1, #16]
 8007ac2:	eba5 0901 	sub.w	r9, r5, r1
 8007ac6:	6965      	ldr	r5, [r4, #20]
 8007ac8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007acc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	444b      	add	r3, r9
 8007ad4:	106d      	asrs	r5, r5, #1
 8007ad6:	429d      	cmp	r5, r3
 8007ad8:	bf38      	it	cc
 8007ada:	461d      	movcc	r5, r3
 8007adc:	0553      	lsls	r3, r2, #21
 8007ade:	d531      	bpl.n	8007b44 <__ssputs_r+0xa0>
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	f7ff ff85 	bl	80079f0 <_malloc_r>
 8007ae6:	4606      	mov	r6, r0
 8007ae8:	b950      	cbnz	r0, 8007b00 <__ssputs_r+0x5c>
 8007aea:	230c      	movs	r3, #12
 8007aec:	f8ca 3000 	str.w	r3, [sl]
 8007af0:	89a3      	ldrh	r3, [r4, #12]
 8007af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007af6:	81a3      	strh	r3, [r4, #12]
 8007af8:	f04f 30ff 	mov.w	r0, #4294967295
 8007afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b00:	6921      	ldr	r1, [r4, #16]
 8007b02:	464a      	mov	r2, r9
 8007b04:	f7ff fb88 	bl	8007218 <memcpy>
 8007b08:	89a3      	ldrh	r3, [r4, #12]
 8007b0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b12:	81a3      	strh	r3, [r4, #12]
 8007b14:	6126      	str	r6, [r4, #16]
 8007b16:	6165      	str	r5, [r4, #20]
 8007b18:	444e      	add	r6, r9
 8007b1a:	eba5 0509 	sub.w	r5, r5, r9
 8007b1e:	6026      	str	r6, [r4, #0]
 8007b20:	60a5      	str	r5, [r4, #8]
 8007b22:	463e      	mov	r6, r7
 8007b24:	42be      	cmp	r6, r7
 8007b26:	d900      	bls.n	8007b2a <__ssputs_r+0x86>
 8007b28:	463e      	mov	r6, r7
 8007b2a:	4632      	mov	r2, r6
 8007b2c:	6820      	ldr	r0, [r4, #0]
 8007b2e:	4641      	mov	r1, r8
 8007b30:	f000 f966 	bl	8007e00 <memmove>
 8007b34:	68a3      	ldr	r3, [r4, #8]
 8007b36:	6822      	ldr	r2, [r4, #0]
 8007b38:	1b9b      	subs	r3, r3, r6
 8007b3a:	4432      	add	r2, r6
 8007b3c:	60a3      	str	r3, [r4, #8]
 8007b3e:	6022      	str	r2, [r4, #0]
 8007b40:	2000      	movs	r0, #0
 8007b42:	e7db      	b.n	8007afc <__ssputs_r+0x58>
 8007b44:	462a      	mov	r2, r5
 8007b46:	f000 f981 	bl	8007e4c <_realloc_r>
 8007b4a:	4606      	mov	r6, r0
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	d1e1      	bne.n	8007b14 <__ssputs_r+0x70>
 8007b50:	6921      	ldr	r1, [r4, #16]
 8007b52:	4650      	mov	r0, sl
 8007b54:	f7ff fefc 	bl	8007950 <_free_r>
 8007b58:	e7c7      	b.n	8007aea <__ssputs_r+0x46>
	...

08007b5c <_svfiprintf_r>:
 8007b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b60:	4698      	mov	r8, r3
 8007b62:	898b      	ldrh	r3, [r1, #12]
 8007b64:	061b      	lsls	r3, r3, #24
 8007b66:	b09d      	sub	sp, #116	; 0x74
 8007b68:	4607      	mov	r7, r0
 8007b6a:	460d      	mov	r5, r1
 8007b6c:	4614      	mov	r4, r2
 8007b6e:	d50e      	bpl.n	8007b8e <_svfiprintf_r+0x32>
 8007b70:	690b      	ldr	r3, [r1, #16]
 8007b72:	b963      	cbnz	r3, 8007b8e <_svfiprintf_r+0x32>
 8007b74:	2140      	movs	r1, #64	; 0x40
 8007b76:	f7ff ff3b 	bl	80079f0 <_malloc_r>
 8007b7a:	6028      	str	r0, [r5, #0]
 8007b7c:	6128      	str	r0, [r5, #16]
 8007b7e:	b920      	cbnz	r0, 8007b8a <_svfiprintf_r+0x2e>
 8007b80:	230c      	movs	r3, #12
 8007b82:	603b      	str	r3, [r7, #0]
 8007b84:	f04f 30ff 	mov.w	r0, #4294967295
 8007b88:	e0d1      	b.n	8007d2e <_svfiprintf_r+0x1d2>
 8007b8a:	2340      	movs	r3, #64	; 0x40
 8007b8c:	616b      	str	r3, [r5, #20]
 8007b8e:	2300      	movs	r3, #0
 8007b90:	9309      	str	r3, [sp, #36]	; 0x24
 8007b92:	2320      	movs	r3, #32
 8007b94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b98:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b9c:	2330      	movs	r3, #48	; 0x30
 8007b9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007d48 <_svfiprintf_r+0x1ec>
 8007ba2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ba6:	f04f 0901 	mov.w	r9, #1
 8007baa:	4623      	mov	r3, r4
 8007bac:	469a      	mov	sl, r3
 8007bae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bb2:	b10a      	cbz	r2, 8007bb8 <_svfiprintf_r+0x5c>
 8007bb4:	2a25      	cmp	r2, #37	; 0x25
 8007bb6:	d1f9      	bne.n	8007bac <_svfiprintf_r+0x50>
 8007bb8:	ebba 0b04 	subs.w	fp, sl, r4
 8007bbc:	d00b      	beq.n	8007bd6 <_svfiprintf_r+0x7a>
 8007bbe:	465b      	mov	r3, fp
 8007bc0:	4622      	mov	r2, r4
 8007bc2:	4629      	mov	r1, r5
 8007bc4:	4638      	mov	r0, r7
 8007bc6:	f7ff ff6d 	bl	8007aa4 <__ssputs_r>
 8007bca:	3001      	adds	r0, #1
 8007bcc:	f000 80aa 	beq.w	8007d24 <_svfiprintf_r+0x1c8>
 8007bd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bd2:	445a      	add	r2, fp
 8007bd4:	9209      	str	r2, [sp, #36]	; 0x24
 8007bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f000 80a2 	beq.w	8007d24 <_svfiprintf_r+0x1c8>
 8007be0:	2300      	movs	r3, #0
 8007be2:	f04f 32ff 	mov.w	r2, #4294967295
 8007be6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bea:	f10a 0a01 	add.w	sl, sl, #1
 8007bee:	9304      	str	r3, [sp, #16]
 8007bf0:	9307      	str	r3, [sp, #28]
 8007bf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bf6:	931a      	str	r3, [sp, #104]	; 0x68
 8007bf8:	4654      	mov	r4, sl
 8007bfa:	2205      	movs	r2, #5
 8007bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c00:	4851      	ldr	r0, [pc, #324]	; (8007d48 <_svfiprintf_r+0x1ec>)
 8007c02:	f7f8 fafd 	bl	8000200 <memchr>
 8007c06:	9a04      	ldr	r2, [sp, #16]
 8007c08:	b9d8      	cbnz	r0, 8007c42 <_svfiprintf_r+0xe6>
 8007c0a:	06d0      	lsls	r0, r2, #27
 8007c0c:	bf44      	itt	mi
 8007c0e:	2320      	movmi	r3, #32
 8007c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c14:	0711      	lsls	r1, r2, #28
 8007c16:	bf44      	itt	mi
 8007c18:	232b      	movmi	r3, #43	; 0x2b
 8007c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c1e:	f89a 3000 	ldrb.w	r3, [sl]
 8007c22:	2b2a      	cmp	r3, #42	; 0x2a
 8007c24:	d015      	beq.n	8007c52 <_svfiprintf_r+0xf6>
 8007c26:	9a07      	ldr	r2, [sp, #28]
 8007c28:	4654      	mov	r4, sl
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	f04f 0c0a 	mov.w	ip, #10
 8007c30:	4621      	mov	r1, r4
 8007c32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c36:	3b30      	subs	r3, #48	; 0x30
 8007c38:	2b09      	cmp	r3, #9
 8007c3a:	d94e      	bls.n	8007cda <_svfiprintf_r+0x17e>
 8007c3c:	b1b0      	cbz	r0, 8007c6c <_svfiprintf_r+0x110>
 8007c3e:	9207      	str	r2, [sp, #28]
 8007c40:	e014      	b.n	8007c6c <_svfiprintf_r+0x110>
 8007c42:	eba0 0308 	sub.w	r3, r0, r8
 8007c46:	fa09 f303 	lsl.w	r3, r9, r3
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	9304      	str	r3, [sp, #16]
 8007c4e:	46a2      	mov	sl, r4
 8007c50:	e7d2      	b.n	8007bf8 <_svfiprintf_r+0x9c>
 8007c52:	9b03      	ldr	r3, [sp, #12]
 8007c54:	1d19      	adds	r1, r3, #4
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	9103      	str	r1, [sp, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	bfbb      	ittet	lt
 8007c5e:	425b      	neglt	r3, r3
 8007c60:	f042 0202 	orrlt.w	r2, r2, #2
 8007c64:	9307      	strge	r3, [sp, #28]
 8007c66:	9307      	strlt	r3, [sp, #28]
 8007c68:	bfb8      	it	lt
 8007c6a:	9204      	strlt	r2, [sp, #16]
 8007c6c:	7823      	ldrb	r3, [r4, #0]
 8007c6e:	2b2e      	cmp	r3, #46	; 0x2e
 8007c70:	d10c      	bne.n	8007c8c <_svfiprintf_r+0x130>
 8007c72:	7863      	ldrb	r3, [r4, #1]
 8007c74:	2b2a      	cmp	r3, #42	; 0x2a
 8007c76:	d135      	bne.n	8007ce4 <_svfiprintf_r+0x188>
 8007c78:	9b03      	ldr	r3, [sp, #12]
 8007c7a:	1d1a      	adds	r2, r3, #4
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	9203      	str	r2, [sp, #12]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	bfb8      	it	lt
 8007c84:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c88:	3402      	adds	r4, #2
 8007c8a:	9305      	str	r3, [sp, #20]
 8007c8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007d58 <_svfiprintf_r+0x1fc>
 8007c90:	7821      	ldrb	r1, [r4, #0]
 8007c92:	2203      	movs	r2, #3
 8007c94:	4650      	mov	r0, sl
 8007c96:	f7f8 fab3 	bl	8000200 <memchr>
 8007c9a:	b140      	cbz	r0, 8007cae <_svfiprintf_r+0x152>
 8007c9c:	2340      	movs	r3, #64	; 0x40
 8007c9e:	eba0 000a 	sub.w	r0, r0, sl
 8007ca2:	fa03 f000 	lsl.w	r0, r3, r0
 8007ca6:	9b04      	ldr	r3, [sp, #16]
 8007ca8:	4303      	orrs	r3, r0
 8007caa:	3401      	adds	r4, #1
 8007cac:	9304      	str	r3, [sp, #16]
 8007cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cb2:	4826      	ldr	r0, [pc, #152]	; (8007d4c <_svfiprintf_r+0x1f0>)
 8007cb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cb8:	2206      	movs	r2, #6
 8007cba:	f7f8 faa1 	bl	8000200 <memchr>
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	d038      	beq.n	8007d34 <_svfiprintf_r+0x1d8>
 8007cc2:	4b23      	ldr	r3, [pc, #140]	; (8007d50 <_svfiprintf_r+0x1f4>)
 8007cc4:	bb1b      	cbnz	r3, 8007d0e <_svfiprintf_r+0x1b2>
 8007cc6:	9b03      	ldr	r3, [sp, #12]
 8007cc8:	3307      	adds	r3, #7
 8007cca:	f023 0307 	bic.w	r3, r3, #7
 8007cce:	3308      	adds	r3, #8
 8007cd0:	9303      	str	r3, [sp, #12]
 8007cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd4:	4433      	add	r3, r6
 8007cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd8:	e767      	b.n	8007baa <_svfiprintf_r+0x4e>
 8007cda:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cde:	460c      	mov	r4, r1
 8007ce0:	2001      	movs	r0, #1
 8007ce2:	e7a5      	b.n	8007c30 <_svfiprintf_r+0xd4>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	3401      	adds	r4, #1
 8007ce8:	9305      	str	r3, [sp, #20]
 8007cea:	4619      	mov	r1, r3
 8007cec:	f04f 0c0a 	mov.w	ip, #10
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cf6:	3a30      	subs	r2, #48	; 0x30
 8007cf8:	2a09      	cmp	r2, #9
 8007cfa:	d903      	bls.n	8007d04 <_svfiprintf_r+0x1a8>
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d0c5      	beq.n	8007c8c <_svfiprintf_r+0x130>
 8007d00:	9105      	str	r1, [sp, #20]
 8007d02:	e7c3      	b.n	8007c8c <_svfiprintf_r+0x130>
 8007d04:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d08:	4604      	mov	r4, r0
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e7f0      	b.n	8007cf0 <_svfiprintf_r+0x194>
 8007d0e:	ab03      	add	r3, sp, #12
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	462a      	mov	r2, r5
 8007d14:	4b0f      	ldr	r3, [pc, #60]	; (8007d54 <_svfiprintf_r+0x1f8>)
 8007d16:	a904      	add	r1, sp, #16
 8007d18:	4638      	mov	r0, r7
 8007d1a:	f7fe f80d 	bl	8005d38 <_printf_float>
 8007d1e:	1c42      	adds	r2, r0, #1
 8007d20:	4606      	mov	r6, r0
 8007d22:	d1d6      	bne.n	8007cd2 <_svfiprintf_r+0x176>
 8007d24:	89ab      	ldrh	r3, [r5, #12]
 8007d26:	065b      	lsls	r3, r3, #25
 8007d28:	f53f af2c 	bmi.w	8007b84 <_svfiprintf_r+0x28>
 8007d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d2e:	b01d      	add	sp, #116	; 0x74
 8007d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d34:	ab03      	add	r3, sp, #12
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	462a      	mov	r2, r5
 8007d3a:	4b06      	ldr	r3, [pc, #24]	; (8007d54 <_svfiprintf_r+0x1f8>)
 8007d3c:	a904      	add	r1, sp, #16
 8007d3e:	4638      	mov	r0, r7
 8007d40:	f7fe fa9e 	bl	8006280 <_printf_i>
 8007d44:	e7eb      	b.n	8007d1e <_svfiprintf_r+0x1c2>
 8007d46:	bf00      	nop
 8007d48:	0802e7d4 	.word	0x0802e7d4
 8007d4c:	0802e7de 	.word	0x0802e7de
 8007d50:	08005d39 	.word	0x08005d39
 8007d54:	08007aa5 	.word	0x08007aa5
 8007d58:	0802e7da 	.word	0x0802e7da

08007d5c <_sbrk_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d06      	ldr	r5, [pc, #24]	; (8007d78 <_sbrk_r+0x1c>)
 8007d60:	2300      	movs	r3, #0
 8007d62:	4604      	mov	r4, r0
 8007d64:	4608      	mov	r0, r1
 8007d66:	602b      	str	r3, [r5, #0]
 8007d68:	f7fa fb10 	bl	800238c <_sbrk>
 8007d6c:	1c43      	adds	r3, r0, #1
 8007d6e:	d102      	bne.n	8007d76 <_sbrk_r+0x1a>
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	b103      	cbz	r3, 8007d76 <_sbrk_r+0x1a>
 8007d74:	6023      	str	r3, [r4, #0]
 8007d76:	bd38      	pop	{r3, r4, r5, pc}
 8007d78:	20000304 	.word	0x20000304

08007d7c <__assert_func>:
 8007d7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d7e:	4614      	mov	r4, r2
 8007d80:	461a      	mov	r2, r3
 8007d82:	4b09      	ldr	r3, [pc, #36]	; (8007da8 <__assert_func+0x2c>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4605      	mov	r5, r0
 8007d88:	68d8      	ldr	r0, [r3, #12]
 8007d8a:	b14c      	cbz	r4, 8007da0 <__assert_func+0x24>
 8007d8c:	4b07      	ldr	r3, [pc, #28]	; (8007dac <__assert_func+0x30>)
 8007d8e:	9100      	str	r1, [sp, #0]
 8007d90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d94:	4906      	ldr	r1, [pc, #24]	; (8007db0 <__assert_func+0x34>)
 8007d96:	462b      	mov	r3, r5
 8007d98:	f000 f80e 	bl	8007db8 <fiprintf>
 8007d9c:	f000 faa4 	bl	80082e8 <abort>
 8007da0:	4b04      	ldr	r3, [pc, #16]	; (8007db4 <__assert_func+0x38>)
 8007da2:	461c      	mov	r4, r3
 8007da4:	e7f3      	b.n	8007d8e <__assert_func+0x12>
 8007da6:	bf00      	nop
 8007da8:	20000010 	.word	0x20000010
 8007dac:	0802e7e5 	.word	0x0802e7e5
 8007db0:	0802e7f2 	.word	0x0802e7f2
 8007db4:	0802e820 	.word	0x0802e820

08007db8 <fiprintf>:
 8007db8:	b40e      	push	{r1, r2, r3}
 8007dba:	b503      	push	{r0, r1, lr}
 8007dbc:	4601      	mov	r1, r0
 8007dbe:	ab03      	add	r3, sp, #12
 8007dc0:	4805      	ldr	r0, [pc, #20]	; (8007dd8 <fiprintf+0x20>)
 8007dc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dc6:	6800      	ldr	r0, [r0, #0]
 8007dc8:	9301      	str	r3, [sp, #4]
 8007dca:	f000 f88f 	bl	8007eec <_vfiprintf_r>
 8007dce:	b002      	add	sp, #8
 8007dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dd4:	b003      	add	sp, #12
 8007dd6:	4770      	bx	lr
 8007dd8:	20000010 	.word	0x20000010

08007ddc <__ascii_mbtowc>:
 8007ddc:	b082      	sub	sp, #8
 8007dde:	b901      	cbnz	r1, 8007de2 <__ascii_mbtowc+0x6>
 8007de0:	a901      	add	r1, sp, #4
 8007de2:	b142      	cbz	r2, 8007df6 <__ascii_mbtowc+0x1a>
 8007de4:	b14b      	cbz	r3, 8007dfa <__ascii_mbtowc+0x1e>
 8007de6:	7813      	ldrb	r3, [r2, #0]
 8007de8:	600b      	str	r3, [r1, #0]
 8007dea:	7812      	ldrb	r2, [r2, #0]
 8007dec:	1e10      	subs	r0, r2, #0
 8007dee:	bf18      	it	ne
 8007df0:	2001      	movne	r0, #1
 8007df2:	b002      	add	sp, #8
 8007df4:	4770      	bx	lr
 8007df6:	4610      	mov	r0, r2
 8007df8:	e7fb      	b.n	8007df2 <__ascii_mbtowc+0x16>
 8007dfa:	f06f 0001 	mvn.w	r0, #1
 8007dfe:	e7f8      	b.n	8007df2 <__ascii_mbtowc+0x16>

08007e00 <memmove>:
 8007e00:	4288      	cmp	r0, r1
 8007e02:	b510      	push	{r4, lr}
 8007e04:	eb01 0402 	add.w	r4, r1, r2
 8007e08:	d902      	bls.n	8007e10 <memmove+0x10>
 8007e0a:	4284      	cmp	r4, r0
 8007e0c:	4623      	mov	r3, r4
 8007e0e:	d807      	bhi.n	8007e20 <memmove+0x20>
 8007e10:	1e43      	subs	r3, r0, #1
 8007e12:	42a1      	cmp	r1, r4
 8007e14:	d008      	beq.n	8007e28 <memmove+0x28>
 8007e16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e1e:	e7f8      	b.n	8007e12 <memmove+0x12>
 8007e20:	4402      	add	r2, r0
 8007e22:	4601      	mov	r1, r0
 8007e24:	428a      	cmp	r2, r1
 8007e26:	d100      	bne.n	8007e2a <memmove+0x2a>
 8007e28:	bd10      	pop	{r4, pc}
 8007e2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e32:	e7f7      	b.n	8007e24 <memmove+0x24>

08007e34 <__malloc_lock>:
 8007e34:	4801      	ldr	r0, [pc, #4]	; (8007e3c <__malloc_lock+0x8>)
 8007e36:	f000 bc17 	b.w	8008668 <__retarget_lock_acquire_recursive>
 8007e3a:	bf00      	nop
 8007e3c:	2000030c 	.word	0x2000030c

08007e40 <__malloc_unlock>:
 8007e40:	4801      	ldr	r0, [pc, #4]	; (8007e48 <__malloc_unlock+0x8>)
 8007e42:	f000 bc12 	b.w	800866a <__retarget_lock_release_recursive>
 8007e46:	bf00      	nop
 8007e48:	2000030c 	.word	0x2000030c

08007e4c <_realloc_r>:
 8007e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e4e:	4607      	mov	r7, r0
 8007e50:	4614      	mov	r4, r2
 8007e52:	460e      	mov	r6, r1
 8007e54:	b921      	cbnz	r1, 8007e60 <_realloc_r+0x14>
 8007e56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e5a:	4611      	mov	r1, r2
 8007e5c:	f7ff bdc8 	b.w	80079f0 <_malloc_r>
 8007e60:	b922      	cbnz	r2, 8007e6c <_realloc_r+0x20>
 8007e62:	f7ff fd75 	bl	8007950 <_free_r>
 8007e66:	4625      	mov	r5, r4
 8007e68:	4628      	mov	r0, r5
 8007e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e6c:	f000 fc62 	bl	8008734 <_malloc_usable_size_r>
 8007e70:	42a0      	cmp	r0, r4
 8007e72:	d20f      	bcs.n	8007e94 <_realloc_r+0x48>
 8007e74:	4621      	mov	r1, r4
 8007e76:	4638      	mov	r0, r7
 8007e78:	f7ff fdba 	bl	80079f0 <_malloc_r>
 8007e7c:	4605      	mov	r5, r0
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	d0f2      	beq.n	8007e68 <_realloc_r+0x1c>
 8007e82:	4631      	mov	r1, r6
 8007e84:	4622      	mov	r2, r4
 8007e86:	f7ff f9c7 	bl	8007218 <memcpy>
 8007e8a:	4631      	mov	r1, r6
 8007e8c:	4638      	mov	r0, r7
 8007e8e:	f7ff fd5f 	bl	8007950 <_free_r>
 8007e92:	e7e9      	b.n	8007e68 <_realloc_r+0x1c>
 8007e94:	4635      	mov	r5, r6
 8007e96:	e7e7      	b.n	8007e68 <_realloc_r+0x1c>

08007e98 <__sfputc_r>:
 8007e98:	6893      	ldr	r3, [r2, #8]
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	b410      	push	{r4}
 8007ea0:	6093      	str	r3, [r2, #8]
 8007ea2:	da08      	bge.n	8007eb6 <__sfputc_r+0x1e>
 8007ea4:	6994      	ldr	r4, [r2, #24]
 8007ea6:	42a3      	cmp	r3, r4
 8007ea8:	db01      	blt.n	8007eae <__sfputc_r+0x16>
 8007eaa:	290a      	cmp	r1, #10
 8007eac:	d103      	bne.n	8007eb6 <__sfputc_r+0x1e>
 8007eae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eb2:	f000 b94b 	b.w	800814c <__swbuf_r>
 8007eb6:	6813      	ldr	r3, [r2, #0]
 8007eb8:	1c58      	adds	r0, r3, #1
 8007eba:	6010      	str	r0, [r2, #0]
 8007ebc:	7019      	strb	r1, [r3, #0]
 8007ebe:	4608      	mov	r0, r1
 8007ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <__sfputs_r>:
 8007ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ec8:	4606      	mov	r6, r0
 8007eca:	460f      	mov	r7, r1
 8007ecc:	4614      	mov	r4, r2
 8007ece:	18d5      	adds	r5, r2, r3
 8007ed0:	42ac      	cmp	r4, r5
 8007ed2:	d101      	bne.n	8007ed8 <__sfputs_r+0x12>
 8007ed4:	2000      	movs	r0, #0
 8007ed6:	e007      	b.n	8007ee8 <__sfputs_r+0x22>
 8007ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007edc:	463a      	mov	r2, r7
 8007ede:	4630      	mov	r0, r6
 8007ee0:	f7ff ffda 	bl	8007e98 <__sfputc_r>
 8007ee4:	1c43      	adds	r3, r0, #1
 8007ee6:	d1f3      	bne.n	8007ed0 <__sfputs_r+0xa>
 8007ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007eec <_vfiprintf_r>:
 8007eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef0:	460d      	mov	r5, r1
 8007ef2:	b09d      	sub	sp, #116	; 0x74
 8007ef4:	4614      	mov	r4, r2
 8007ef6:	4698      	mov	r8, r3
 8007ef8:	4606      	mov	r6, r0
 8007efa:	b118      	cbz	r0, 8007f04 <_vfiprintf_r+0x18>
 8007efc:	6983      	ldr	r3, [r0, #24]
 8007efe:	b90b      	cbnz	r3, 8007f04 <_vfiprintf_r+0x18>
 8007f00:	f000 fb14 	bl	800852c <__sinit>
 8007f04:	4b89      	ldr	r3, [pc, #548]	; (800812c <_vfiprintf_r+0x240>)
 8007f06:	429d      	cmp	r5, r3
 8007f08:	d11b      	bne.n	8007f42 <_vfiprintf_r+0x56>
 8007f0a:	6875      	ldr	r5, [r6, #4]
 8007f0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f0e:	07d9      	lsls	r1, r3, #31
 8007f10:	d405      	bmi.n	8007f1e <_vfiprintf_r+0x32>
 8007f12:	89ab      	ldrh	r3, [r5, #12]
 8007f14:	059a      	lsls	r2, r3, #22
 8007f16:	d402      	bmi.n	8007f1e <_vfiprintf_r+0x32>
 8007f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f1a:	f000 fba5 	bl	8008668 <__retarget_lock_acquire_recursive>
 8007f1e:	89ab      	ldrh	r3, [r5, #12]
 8007f20:	071b      	lsls	r3, r3, #28
 8007f22:	d501      	bpl.n	8007f28 <_vfiprintf_r+0x3c>
 8007f24:	692b      	ldr	r3, [r5, #16]
 8007f26:	b9eb      	cbnz	r3, 8007f64 <_vfiprintf_r+0x78>
 8007f28:	4629      	mov	r1, r5
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	f000 f96e 	bl	800820c <__swsetup_r>
 8007f30:	b1c0      	cbz	r0, 8007f64 <_vfiprintf_r+0x78>
 8007f32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f34:	07dc      	lsls	r4, r3, #31
 8007f36:	d50e      	bpl.n	8007f56 <_vfiprintf_r+0x6a>
 8007f38:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3c:	b01d      	add	sp, #116	; 0x74
 8007f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f42:	4b7b      	ldr	r3, [pc, #492]	; (8008130 <_vfiprintf_r+0x244>)
 8007f44:	429d      	cmp	r5, r3
 8007f46:	d101      	bne.n	8007f4c <_vfiprintf_r+0x60>
 8007f48:	68b5      	ldr	r5, [r6, #8]
 8007f4a:	e7df      	b.n	8007f0c <_vfiprintf_r+0x20>
 8007f4c:	4b79      	ldr	r3, [pc, #484]	; (8008134 <_vfiprintf_r+0x248>)
 8007f4e:	429d      	cmp	r5, r3
 8007f50:	bf08      	it	eq
 8007f52:	68f5      	ldreq	r5, [r6, #12]
 8007f54:	e7da      	b.n	8007f0c <_vfiprintf_r+0x20>
 8007f56:	89ab      	ldrh	r3, [r5, #12]
 8007f58:	0598      	lsls	r0, r3, #22
 8007f5a:	d4ed      	bmi.n	8007f38 <_vfiprintf_r+0x4c>
 8007f5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f5e:	f000 fb84 	bl	800866a <__retarget_lock_release_recursive>
 8007f62:	e7e9      	b.n	8007f38 <_vfiprintf_r+0x4c>
 8007f64:	2300      	movs	r3, #0
 8007f66:	9309      	str	r3, [sp, #36]	; 0x24
 8007f68:	2320      	movs	r3, #32
 8007f6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f72:	2330      	movs	r3, #48	; 0x30
 8007f74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008138 <_vfiprintf_r+0x24c>
 8007f78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f7c:	f04f 0901 	mov.w	r9, #1
 8007f80:	4623      	mov	r3, r4
 8007f82:	469a      	mov	sl, r3
 8007f84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f88:	b10a      	cbz	r2, 8007f8e <_vfiprintf_r+0xa2>
 8007f8a:	2a25      	cmp	r2, #37	; 0x25
 8007f8c:	d1f9      	bne.n	8007f82 <_vfiprintf_r+0x96>
 8007f8e:	ebba 0b04 	subs.w	fp, sl, r4
 8007f92:	d00b      	beq.n	8007fac <_vfiprintf_r+0xc0>
 8007f94:	465b      	mov	r3, fp
 8007f96:	4622      	mov	r2, r4
 8007f98:	4629      	mov	r1, r5
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	f7ff ff93 	bl	8007ec6 <__sfputs_r>
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	f000 80aa 	beq.w	80080fa <_vfiprintf_r+0x20e>
 8007fa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fa8:	445a      	add	r2, fp
 8007faa:	9209      	str	r2, [sp, #36]	; 0x24
 8007fac:	f89a 3000 	ldrb.w	r3, [sl]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f000 80a2 	beq.w	80080fa <_vfiprintf_r+0x20e>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fc0:	f10a 0a01 	add.w	sl, sl, #1
 8007fc4:	9304      	str	r3, [sp, #16]
 8007fc6:	9307      	str	r3, [sp, #28]
 8007fc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fcc:	931a      	str	r3, [sp, #104]	; 0x68
 8007fce:	4654      	mov	r4, sl
 8007fd0:	2205      	movs	r2, #5
 8007fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fd6:	4858      	ldr	r0, [pc, #352]	; (8008138 <_vfiprintf_r+0x24c>)
 8007fd8:	f7f8 f912 	bl	8000200 <memchr>
 8007fdc:	9a04      	ldr	r2, [sp, #16]
 8007fde:	b9d8      	cbnz	r0, 8008018 <_vfiprintf_r+0x12c>
 8007fe0:	06d1      	lsls	r1, r2, #27
 8007fe2:	bf44      	itt	mi
 8007fe4:	2320      	movmi	r3, #32
 8007fe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fea:	0713      	lsls	r3, r2, #28
 8007fec:	bf44      	itt	mi
 8007fee:	232b      	movmi	r3, #43	; 0x2b
 8007ff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8007ffa:	d015      	beq.n	8008028 <_vfiprintf_r+0x13c>
 8007ffc:	9a07      	ldr	r2, [sp, #28]
 8007ffe:	4654      	mov	r4, sl
 8008000:	2000      	movs	r0, #0
 8008002:	f04f 0c0a 	mov.w	ip, #10
 8008006:	4621      	mov	r1, r4
 8008008:	f811 3b01 	ldrb.w	r3, [r1], #1
 800800c:	3b30      	subs	r3, #48	; 0x30
 800800e:	2b09      	cmp	r3, #9
 8008010:	d94e      	bls.n	80080b0 <_vfiprintf_r+0x1c4>
 8008012:	b1b0      	cbz	r0, 8008042 <_vfiprintf_r+0x156>
 8008014:	9207      	str	r2, [sp, #28]
 8008016:	e014      	b.n	8008042 <_vfiprintf_r+0x156>
 8008018:	eba0 0308 	sub.w	r3, r0, r8
 800801c:	fa09 f303 	lsl.w	r3, r9, r3
 8008020:	4313      	orrs	r3, r2
 8008022:	9304      	str	r3, [sp, #16]
 8008024:	46a2      	mov	sl, r4
 8008026:	e7d2      	b.n	8007fce <_vfiprintf_r+0xe2>
 8008028:	9b03      	ldr	r3, [sp, #12]
 800802a:	1d19      	adds	r1, r3, #4
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	9103      	str	r1, [sp, #12]
 8008030:	2b00      	cmp	r3, #0
 8008032:	bfbb      	ittet	lt
 8008034:	425b      	neglt	r3, r3
 8008036:	f042 0202 	orrlt.w	r2, r2, #2
 800803a:	9307      	strge	r3, [sp, #28]
 800803c:	9307      	strlt	r3, [sp, #28]
 800803e:	bfb8      	it	lt
 8008040:	9204      	strlt	r2, [sp, #16]
 8008042:	7823      	ldrb	r3, [r4, #0]
 8008044:	2b2e      	cmp	r3, #46	; 0x2e
 8008046:	d10c      	bne.n	8008062 <_vfiprintf_r+0x176>
 8008048:	7863      	ldrb	r3, [r4, #1]
 800804a:	2b2a      	cmp	r3, #42	; 0x2a
 800804c:	d135      	bne.n	80080ba <_vfiprintf_r+0x1ce>
 800804e:	9b03      	ldr	r3, [sp, #12]
 8008050:	1d1a      	adds	r2, r3, #4
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	9203      	str	r2, [sp, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	bfb8      	it	lt
 800805a:	f04f 33ff 	movlt.w	r3, #4294967295
 800805e:	3402      	adds	r4, #2
 8008060:	9305      	str	r3, [sp, #20]
 8008062:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008148 <_vfiprintf_r+0x25c>
 8008066:	7821      	ldrb	r1, [r4, #0]
 8008068:	2203      	movs	r2, #3
 800806a:	4650      	mov	r0, sl
 800806c:	f7f8 f8c8 	bl	8000200 <memchr>
 8008070:	b140      	cbz	r0, 8008084 <_vfiprintf_r+0x198>
 8008072:	2340      	movs	r3, #64	; 0x40
 8008074:	eba0 000a 	sub.w	r0, r0, sl
 8008078:	fa03 f000 	lsl.w	r0, r3, r0
 800807c:	9b04      	ldr	r3, [sp, #16]
 800807e:	4303      	orrs	r3, r0
 8008080:	3401      	adds	r4, #1
 8008082:	9304      	str	r3, [sp, #16]
 8008084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008088:	482c      	ldr	r0, [pc, #176]	; (800813c <_vfiprintf_r+0x250>)
 800808a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800808e:	2206      	movs	r2, #6
 8008090:	f7f8 f8b6 	bl	8000200 <memchr>
 8008094:	2800      	cmp	r0, #0
 8008096:	d03f      	beq.n	8008118 <_vfiprintf_r+0x22c>
 8008098:	4b29      	ldr	r3, [pc, #164]	; (8008140 <_vfiprintf_r+0x254>)
 800809a:	bb1b      	cbnz	r3, 80080e4 <_vfiprintf_r+0x1f8>
 800809c:	9b03      	ldr	r3, [sp, #12]
 800809e:	3307      	adds	r3, #7
 80080a0:	f023 0307 	bic.w	r3, r3, #7
 80080a4:	3308      	adds	r3, #8
 80080a6:	9303      	str	r3, [sp, #12]
 80080a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080aa:	443b      	add	r3, r7
 80080ac:	9309      	str	r3, [sp, #36]	; 0x24
 80080ae:	e767      	b.n	8007f80 <_vfiprintf_r+0x94>
 80080b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80080b4:	460c      	mov	r4, r1
 80080b6:	2001      	movs	r0, #1
 80080b8:	e7a5      	b.n	8008006 <_vfiprintf_r+0x11a>
 80080ba:	2300      	movs	r3, #0
 80080bc:	3401      	adds	r4, #1
 80080be:	9305      	str	r3, [sp, #20]
 80080c0:	4619      	mov	r1, r3
 80080c2:	f04f 0c0a 	mov.w	ip, #10
 80080c6:	4620      	mov	r0, r4
 80080c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080cc:	3a30      	subs	r2, #48	; 0x30
 80080ce:	2a09      	cmp	r2, #9
 80080d0:	d903      	bls.n	80080da <_vfiprintf_r+0x1ee>
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d0c5      	beq.n	8008062 <_vfiprintf_r+0x176>
 80080d6:	9105      	str	r1, [sp, #20]
 80080d8:	e7c3      	b.n	8008062 <_vfiprintf_r+0x176>
 80080da:	fb0c 2101 	mla	r1, ip, r1, r2
 80080de:	4604      	mov	r4, r0
 80080e0:	2301      	movs	r3, #1
 80080e2:	e7f0      	b.n	80080c6 <_vfiprintf_r+0x1da>
 80080e4:	ab03      	add	r3, sp, #12
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	462a      	mov	r2, r5
 80080ea:	4b16      	ldr	r3, [pc, #88]	; (8008144 <_vfiprintf_r+0x258>)
 80080ec:	a904      	add	r1, sp, #16
 80080ee:	4630      	mov	r0, r6
 80080f0:	f7fd fe22 	bl	8005d38 <_printf_float>
 80080f4:	4607      	mov	r7, r0
 80080f6:	1c78      	adds	r0, r7, #1
 80080f8:	d1d6      	bne.n	80080a8 <_vfiprintf_r+0x1bc>
 80080fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080fc:	07d9      	lsls	r1, r3, #31
 80080fe:	d405      	bmi.n	800810c <_vfiprintf_r+0x220>
 8008100:	89ab      	ldrh	r3, [r5, #12]
 8008102:	059a      	lsls	r2, r3, #22
 8008104:	d402      	bmi.n	800810c <_vfiprintf_r+0x220>
 8008106:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008108:	f000 faaf 	bl	800866a <__retarget_lock_release_recursive>
 800810c:	89ab      	ldrh	r3, [r5, #12]
 800810e:	065b      	lsls	r3, r3, #25
 8008110:	f53f af12 	bmi.w	8007f38 <_vfiprintf_r+0x4c>
 8008114:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008116:	e711      	b.n	8007f3c <_vfiprintf_r+0x50>
 8008118:	ab03      	add	r3, sp, #12
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	462a      	mov	r2, r5
 800811e:	4b09      	ldr	r3, [pc, #36]	; (8008144 <_vfiprintf_r+0x258>)
 8008120:	a904      	add	r1, sp, #16
 8008122:	4630      	mov	r0, r6
 8008124:	f7fe f8ac 	bl	8006280 <_printf_i>
 8008128:	e7e4      	b.n	80080f4 <_vfiprintf_r+0x208>
 800812a:	bf00      	nop
 800812c:	0802e94c 	.word	0x0802e94c
 8008130:	0802e96c 	.word	0x0802e96c
 8008134:	0802e92c 	.word	0x0802e92c
 8008138:	0802e7d4 	.word	0x0802e7d4
 800813c:	0802e7de 	.word	0x0802e7de
 8008140:	08005d39 	.word	0x08005d39
 8008144:	08007ec7 	.word	0x08007ec7
 8008148:	0802e7da 	.word	0x0802e7da

0800814c <__swbuf_r>:
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814e:	460e      	mov	r6, r1
 8008150:	4614      	mov	r4, r2
 8008152:	4605      	mov	r5, r0
 8008154:	b118      	cbz	r0, 800815e <__swbuf_r+0x12>
 8008156:	6983      	ldr	r3, [r0, #24]
 8008158:	b90b      	cbnz	r3, 800815e <__swbuf_r+0x12>
 800815a:	f000 f9e7 	bl	800852c <__sinit>
 800815e:	4b21      	ldr	r3, [pc, #132]	; (80081e4 <__swbuf_r+0x98>)
 8008160:	429c      	cmp	r4, r3
 8008162:	d12b      	bne.n	80081bc <__swbuf_r+0x70>
 8008164:	686c      	ldr	r4, [r5, #4]
 8008166:	69a3      	ldr	r3, [r4, #24]
 8008168:	60a3      	str	r3, [r4, #8]
 800816a:	89a3      	ldrh	r3, [r4, #12]
 800816c:	071a      	lsls	r2, r3, #28
 800816e:	d52f      	bpl.n	80081d0 <__swbuf_r+0x84>
 8008170:	6923      	ldr	r3, [r4, #16]
 8008172:	b36b      	cbz	r3, 80081d0 <__swbuf_r+0x84>
 8008174:	6923      	ldr	r3, [r4, #16]
 8008176:	6820      	ldr	r0, [r4, #0]
 8008178:	1ac0      	subs	r0, r0, r3
 800817a:	6963      	ldr	r3, [r4, #20]
 800817c:	b2f6      	uxtb	r6, r6
 800817e:	4283      	cmp	r3, r0
 8008180:	4637      	mov	r7, r6
 8008182:	dc04      	bgt.n	800818e <__swbuf_r+0x42>
 8008184:	4621      	mov	r1, r4
 8008186:	4628      	mov	r0, r5
 8008188:	f000 f93c 	bl	8008404 <_fflush_r>
 800818c:	bb30      	cbnz	r0, 80081dc <__swbuf_r+0x90>
 800818e:	68a3      	ldr	r3, [r4, #8]
 8008190:	3b01      	subs	r3, #1
 8008192:	60a3      	str	r3, [r4, #8]
 8008194:	6823      	ldr	r3, [r4, #0]
 8008196:	1c5a      	adds	r2, r3, #1
 8008198:	6022      	str	r2, [r4, #0]
 800819a:	701e      	strb	r6, [r3, #0]
 800819c:	6963      	ldr	r3, [r4, #20]
 800819e:	3001      	adds	r0, #1
 80081a0:	4283      	cmp	r3, r0
 80081a2:	d004      	beq.n	80081ae <__swbuf_r+0x62>
 80081a4:	89a3      	ldrh	r3, [r4, #12]
 80081a6:	07db      	lsls	r3, r3, #31
 80081a8:	d506      	bpl.n	80081b8 <__swbuf_r+0x6c>
 80081aa:	2e0a      	cmp	r6, #10
 80081ac:	d104      	bne.n	80081b8 <__swbuf_r+0x6c>
 80081ae:	4621      	mov	r1, r4
 80081b0:	4628      	mov	r0, r5
 80081b2:	f000 f927 	bl	8008404 <_fflush_r>
 80081b6:	b988      	cbnz	r0, 80081dc <__swbuf_r+0x90>
 80081b8:	4638      	mov	r0, r7
 80081ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081bc:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <__swbuf_r+0x9c>)
 80081be:	429c      	cmp	r4, r3
 80081c0:	d101      	bne.n	80081c6 <__swbuf_r+0x7a>
 80081c2:	68ac      	ldr	r4, [r5, #8]
 80081c4:	e7cf      	b.n	8008166 <__swbuf_r+0x1a>
 80081c6:	4b09      	ldr	r3, [pc, #36]	; (80081ec <__swbuf_r+0xa0>)
 80081c8:	429c      	cmp	r4, r3
 80081ca:	bf08      	it	eq
 80081cc:	68ec      	ldreq	r4, [r5, #12]
 80081ce:	e7ca      	b.n	8008166 <__swbuf_r+0x1a>
 80081d0:	4621      	mov	r1, r4
 80081d2:	4628      	mov	r0, r5
 80081d4:	f000 f81a 	bl	800820c <__swsetup_r>
 80081d8:	2800      	cmp	r0, #0
 80081da:	d0cb      	beq.n	8008174 <__swbuf_r+0x28>
 80081dc:	f04f 37ff 	mov.w	r7, #4294967295
 80081e0:	e7ea      	b.n	80081b8 <__swbuf_r+0x6c>
 80081e2:	bf00      	nop
 80081e4:	0802e94c 	.word	0x0802e94c
 80081e8:	0802e96c 	.word	0x0802e96c
 80081ec:	0802e92c 	.word	0x0802e92c

080081f0 <__ascii_wctomb>:
 80081f0:	b149      	cbz	r1, 8008206 <__ascii_wctomb+0x16>
 80081f2:	2aff      	cmp	r2, #255	; 0xff
 80081f4:	bf85      	ittet	hi
 80081f6:	238a      	movhi	r3, #138	; 0x8a
 80081f8:	6003      	strhi	r3, [r0, #0]
 80081fa:	700a      	strbls	r2, [r1, #0]
 80081fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8008200:	bf98      	it	ls
 8008202:	2001      	movls	r0, #1
 8008204:	4770      	bx	lr
 8008206:	4608      	mov	r0, r1
 8008208:	4770      	bx	lr
	...

0800820c <__swsetup_r>:
 800820c:	4b32      	ldr	r3, [pc, #200]	; (80082d8 <__swsetup_r+0xcc>)
 800820e:	b570      	push	{r4, r5, r6, lr}
 8008210:	681d      	ldr	r5, [r3, #0]
 8008212:	4606      	mov	r6, r0
 8008214:	460c      	mov	r4, r1
 8008216:	b125      	cbz	r5, 8008222 <__swsetup_r+0x16>
 8008218:	69ab      	ldr	r3, [r5, #24]
 800821a:	b913      	cbnz	r3, 8008222 <__swsetup_r+0x16>
 800821c:	4628      	mov	r0, r5
 800821e:	f000 f985 	bl	800852c <__sinit>
 8008222:	4b2e      	ldr	r3, [pc, #184]	; (80082dc <__swsetup_r+0xd0>)
 8008224:	429c      	cmp	r4, r3
 8008226:	d10f      	bne.n	8008248 <__swsetup_r+0x3c>
 8008228:	686c      	ldr	r4, [r5, #4]
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008230:	0719      	lsls	r1, r3, #28
 8008232:	d42c      	bmi.n	800828e <__swsetup_r+0x82>
 8008234:	06dd      	lsls	r5, r3, #27
 8008236:	d411      	bmi.n	800825c <__swsetup_r+0x50>
 8008238:	2309      	movs	r3, #9
 800823a:	6033      	str	r3, [r6, #0]
 800823c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008240:	81a3      	strh	r3, [r4, #12]
 8008242:	f04f 30ff 	mov.w	r0, #4294967295
 8008246:	e03e      	b.n	80082c6 <__swsetup_r+0xba>
 8008248:	4b25      	ldr	r3, [pc, #148]	; (80082e0 <__swsetup_r+0xd4>)
 800824a:	429c      	cmp	r4, r3
 800824c:	d101      	bne.n	8008252 <__swsetup_r+0x46>
 800824e:	68ac      	ldr	r4, [r5, #8]
 8008250:	e7eb      	b.n	800822a <__swsetup_r+0x1e>
 8008252:	4b24      	ldr	r3, [pc, #144]	; (80082e4 <__swsetup_r+0xd8>)
 8008254:	429c      	cmp	r4, r3
 8008256:	bf08      	it	eq
 8008258:	68ec      	ldreq	r4, [r5, #12]
 800825a:	e7e6      	b.n	800822a <__swsetup_r+0x1e>
 800825c:	0758      	lsls	r0, r3, #29
 800825e:	d512      	bpl.n	8008286 <__swsetup_r+0x7a>
 8008260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008262:	b141      	cbz	r1, 8008276 <__swsetup_r+0x6a>
 8008264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008268:	4299      	cmp	r1, r3
 800826a:	d002      	beq.n	8008272 <__swsetup_r+0x66>
 800826c:	4630      	mov	r0, r6
 800826e:	f7ff fb6f 	bl	8007950 <_free_r>
 8008272:	2300      	movs	r3, #0
 8008274:	6363      	str	r3, [r4, #52]	; 0x34
 8008276:	89a3      	ldrh	r3, [r4, #12]
 8008278:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800827c:	81a3      	strh	r3, [r4, #12]
 800827e:	2300      	movs	r3, #0
 8008280:	6063      	str	r3, [r4, #4]
 8008282:	6923      	ldr	r3, [r4, #16]
 8008284:	6023      	str	r3, [r4, #0]
 8008286:	89a3      	ldrh	r3, [r4, #12]
 8008288:	f043 0308 	orr.w	r3, r3, #8
 800828c:	81a3      	strh	r3, [r4, #12]
 800828e:	6923      	ldr	r3, [r4, #16]
 8008290:	b94b      	cbnz	r3, 80082a6 <__swsetup_r+0x9a>
 8008292:	89a3      	ldrh	r3, [r4, #12]
 8008294:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800829c:	d003      	beq.n	80082a6 <__swsetup_r+0x9a>
 800829e:	4621      	mov	r1, r4
 80082a0:	4630      	mov	r0, r6
 80082a2:	f000 fa07 	bl	80086b4 <__smakebuf_r>
 80082a6:	89a0      	ldrh	r0, [r4, #12]
 80082a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082ac:	f010 0301 	ands.w	r3, r0, #1
 80082b0:	d00a      	beq.n	80082c8 <__swsetup_r+0xbc>
 80082b2:	2300      	movs	r3, #0
 80082b4:	60a3      	str	r3, [r4, #8]
 80082b6:	6963      	ldr	r3, [r4, #20]
 80082b8:	425b      	negs	r3, r3
 80082ba:	61a3      	str	r3, [r4, #24]
 80082bc:	6923      	ldr	r3, [r4, #16]
 80082be:	b943      	cbnz	r3, 80082d2 <__swsetup_r+0xc6>
 80082c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80082c4:	d1ba      	bne.n	800823c <__swsetup_r+0x30>
 80082c6:	bd70      	pop	{r4, r5, r6, pc}
 80082c8:	0781      	lsls	r1, r0, #30
 80082ca:	bf58      	it	pl
 80082cc:	6963      	ldrpl	r3, [r4, #20]
 80082ce:	60a3      	str	r3, [r4, #8]
 80082d0:	e7f4      	b.n	80082bc <__swsetup_r+0xb0>
 80082d2:	2000      	movs	r0, #0
 80082d4:	e7f7      	b.n	80082c6 <__swsetup_r+0xba>
 80082d6:	bf00      	nop
 80082d8:	20000010 	.word	0x20000010
 80082dc:	0802e94c 	.word	0x0802e94c
 80082e0:	0802e96c 	.word	0x0802e96c
 80082e4:	0802e92c 	.word	0x0802e92c

080082e8 <abort>:
 80082e8:	b508      	push	{r3, lr}
 80082ea:	2006      	movs	r0, #6
 80082ec:	f000 fa52 	bl	8008794 <raise>
 80082f0:	2001      	movs	r0, #1
 80082f2:	f7f9 ffd3 	bl	800229c <_exit>
	...

080082f8 <__sflush_r>:
 80082f8:	898a      	ldrh	r2, [r1, #12]
 80082fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082fe:	4605      	mov	r5, r0
 8008300:	0710      	lsls	r0, r2, #28
 8008302:	460c      	mov	r4, r1
 8008304:	d458      	bmi.n	80083b8 <__sflush_r+0xc0>
 8008306:	684b      	ldr	r3, [r1, #4]
 8008308:	2b00      	cmp	r3, #0
 800830a:	dc05      	bgt.n	8008318 <__sflush_r+0x20>
 800830c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800830e:	2b00      	cmp	r3, #0
 8008310:	dc02      	bgt.n	8008318 <__sflush_r+0x20>
 8008312:	2000      	movs	r0, #0
 8008314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008318:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800831a:	2e00      	cmp	r6, #0
 800831c:	d0f9      	beq.n	8008312 <__sflush_r+0x1a>
 800831e:	2300      	movs	r3, #0
 8008320:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008324:	682f      	ldr	r7, [r5, #0]
 8008326:	602b      	str	r3, [r5, #0]
 8008328:	d032      	beq.n	8008390 <__sflush_r+0x98>
 800832a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800832c:	89a3      	ldrh	r3, [r4, #12]
 800832e:	075a      	lsls	r2, r3, #29
 8008330:	d505      	bpl.n	800833e <__sflush_r+0x46>
 8008332:	6863      	ldr	r3, [r4, #4]
 8008334:	1ac0      	subs	r0, r0, r3
 8008336:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008338:	b10b      	cbz	r3, 800833e <__sflush_r+0x46>
 800833a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800833c:	1ac0      	subs	r0, r0, r3
 800833e:	2300      	movs	r3, #0
 8008340:	4602      	mov	r2, r0
 8008342:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008344:	6a21      	ldr	r1, [r4, #32]
 8008346:	4628      	mov	r0, r5
 8008348:	47b0      	blx	r6
 800834a:	1c43      	adds	r3, r0, #1
 800834c:	89a3      	ldrh	r3, [r4, #12]
 800834e:	d106      	bne.n	800835e <__sflush_r+0x66>
 8008350:	6829      	ldr	r1, [r5, #0]
 8008352:	291d      	cmp	r1, #29
 8008354:	d82c      	bhi.n	80083b0 <__sflush_r+0xb8>
 8008356:	4a2a      	ldr	r2, [pc, #168]	; (8008400 <__sflush_r+0x108>)
 8008358:	40ca      	lsrs	r2, r1
 800835a:	07d6      	lsls	r6, r2, #31
 800835c:	d528      	bpl.n	80083b0 <__sflush_r+0xb8>
 800835e:	2200      	movs	r2, #0
 8008360:	6062      	str	r2, [r4, #4]
 8008362:	04d9      	lsls	r1, r3, #19
 8008364:	6922      	ldr	r2, [r4, #16]
 8008366:	6022      	str	r2, [r4, #0]
 8008368:	d504      	bpl.n	8008374 <__sflush_r+0x7c>
 800836a:	1c42      	adds	r2, r0, #1
 800836c:	d101      	bne.n	8008372 <__sflush_r+0x7a>
 800836e:	682b      	ldr	r3, [r5, #0]
 8008370:	b903      	cbnz	r3, 8008374 <__sflush_r+0x7c>
 8008372:	6560      	str	r0, [r4, #84]	; 0x54
 8008374:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008376:	602f      	str	r7, [r5, #0]
 8008378:	2900      	cmp	r1, #0
 800837a:	d0ca      	beq.n	8008312 <__sflush_r+0x1a>
 800837c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008380:	4299      	cmp	r1, r3
 8008382:	d002      	beq.n	800838a <__sflush_r+0x92>
 8008384:	4628      	mov	r0, r5
 8008386:	f7ff fae3 	bl	8007950 <_free_r>
 800838a:	2000      	movs	r0, #0
 800838c:	6360      	str	r0, [r4, #52]	; 0x34
 800838e:	e7c1      	b.n	8008314 <__sflush_r+0x1c>
 8008390:	6a21      	ldr	r1, [r4, #32]
 8008392:	2301      	movs	r3, #1
 8008394:	4628      	mov	r0, r5
 8008396:	47b0      	blx	r6
 8008398:	1c41      	adds	r1, r0, #1
 800839a:	d1c7      	bne.n	800832c <__sflush_r+0x34>
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d0c4      	beq.n	800832c <__sflush_r+0x34>
 80083a2:	2b1d      	cmp	r3, #29
 80083a4:	d001      	beq.n	80083aa <__sflush_r+0xb2>
 80083a6:	2b16      	cmp	r3, #22
 80083a8:	d101      	bne.n	80083ae <__sflush_r+0xb6>
 80083aa:	602f      	str	r7, [r5, #0]
 80083ac:	e7b1      	b.n	8008312 <__sflush_r+0x1a>
 80083ae:	89a3      	ldrh	r3, [r4, #12]
 80083b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083b4:	81a3      	strh	r3, [r4, #12]
 80083b6:	e7ad      	b.n	8008314 <__sflush_r+0x1c>
 80083b8:	690f      	ldr	r7, [r1, #16]
 80083ba:	2f00      	cmp	r7, #0
 80083bc:	d0a9      	beq.n	8008312 <__sflush_r+0x1a>
 80083be:	0793      	lsls	r3, r2, #30
 80083c0:	680e      	ldr	r6, [r1, #0]
 80083c2:	bf08      	it	eq
 80083c4:	694b      	ldreq	r3, [r1, #20]
 80083c6:	600f      	str	r7, [r1, #0]
 80083c8:	bf18      	it	ne
 80083ca:	2300      	movne	r3, #0
 80083cc:	eba6 0807 	sub.w	r8, r6, r7
 80083d0:	608b      	str	r3, [r1, #8]
 80083d2:	f1b8 0f00 	cmp.w	r8, #0
 80083d6:	dd9c      	ble.n	8008312 <__sflush_r+0x1a>
 80083d8:	6a21      	ldr	r1, [r4, #32]
 80083da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083dc:	4643      	mov	r3, r8
 80083de:	463a      	mov	r2, r7
 80083e0:	4628      	mov	r0, r5
 80083e2:	47b0      	blx	r6
 80083e4:	2800      	cmp	r0, #0
 80083e6:	dc06      	bgt.n	80083f6 <__sflush_r+0xfe>
 80083e8:	89a3      	ldrh	r3, [r4, #12]
 80083ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ee:	81a3      	strh	r3, [r4, #12]
 80083f0:	f04f 30ff 	mov.w	r0, #4294967295
 80083f4:	e78e      	b.n	8008314 <__sflush_r+0x1c>
 80083f6:	4407      	add	r7, r0
 80083f8:	eba8 0800 	sub.w	r8, r8, r0
 80083fc:	e7e9      	b.n	80083d2 <__sflush_r+0xda>
 80083fe:	bf00      	nop
 8008400:	20400001 	.word	0x20400001

08008404 <_fflush_r>:
 8008404:	b538      	push	{r3, r4, r5, lr}
 8008406:	690b      	ldr	r3, [r1, #16]
 8008408:	4605      	mov	r5, r0
 800840a:	460c      	mov	r4, r1
 800840c:	b913      	cbnz	r3, 8008414 <_fflush_r+0x10>
 800840e:	2500      	movs	r5, #0
 8008410:	4628      	mov	r0, r5
 8008412:	bd38      	pop	{r3, r4, r5, pc}
 8008414:	b118      	cbz	r0, 800841e <_fflush_r+0x1a>
 8008416:	6983      	ldr	r3, [r0, #24]
 8008418:	b90b      	cbnz	r3, 800841e <_fflush_r+0x1a>
 800841a:	f000 f887 	bl	800852c <__sinit>
 800841e:	4b14      	ldr	r3, [pc, #80]	; (8008470 <_fflush_r+0x6c>)
 8008420:	429c      	cmp	r4, r3
 8008422:	d11b      	bne.n	800845c <_fflush_r+0x58>
 8008424:	686c      	ldr	r4, [r5, #4]
 8008426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d0ef      	beq.n	800840e <_fflush_r+0xa>
 800842e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008430:	07d0      	lsls	r0, r2, #31
 8008432:	d404      	bmi.n	800843e <_fflush_r+0x3a>
 8008434:	0599      	lsls	r1, r3, #22
 8008436:	d402      	bmi.n	800843e <_fflush_r+0x3a>
 8008438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800843a:	f000 f915 	bl	8008668 <__retarget_lock_acquire_recursive>
 800843e:	4628      	mov	r0, r5
 8008440:	4621      	mov	r1, r4
 8008442:	f7ff ff59 	bl	80082f8 <__sflush_r>
 8008446:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008448:	07da      	lsls	r2, r3, #31
 800844a:	4605      	mov	r5, r0
 800844c:	d4e0      	bmi.n	8008410 <_fflush_r+0xc>
 800844e:	89a3      	ldrh	r3, [r4, #12]
 8008450:	059b      	lsls	r3, r3, #22
 8008452:	d4dd      	bmi.n	8008410 <_fflush_r+0xc>
 8008454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008456:	f000 f908 	bl	800866a <__retarget_lock_release_recursive>
 800845a:	e7d9      	b.n	8008410 <_fflush_r+0xc>
 800845c:	4b05      	ldr	r3, [pc, #20]	; (8008474 <_fflush_r+0x70>)
 800845e:	429c      	cmp	r4, r3
 8008460:	d101      	bne.n	8008466 <_fflush_r+0x62>
 8008462:	68ac      	ldr	r4, [r5, #8]
 8008464:	e7df      	b.n	8008426 <_fflush_r+0x22>
 8008466:	4b04      	ldr	r3, [pc, #16]	; (8008478 <_fflush_r+0x74>)
 8008468:	429c      	cmp	r4, r3
 800846a:	bf08      	it	eq
 800846c:	68ec      	ldreq	r4, [r5, #12]
 800846e:	e7da      	b.n	8008426 <_fflush_r+0x22>
 8008470:	0802e94c 	.word	0x0802e94c
 8008474:	0802e96c 	.word	0x0802e96c
 8008478:	0802e92c 	.word	0x0802e92c

0800847c <std>:
 800847c:	2300      	movs	r3, #0
 800847e:	b510      	push	{r4, lr}
 8008480:	4604      	mov	r4, r0
 8008482:	e9c0 3300 	strd	r3, r3, [r0]
 8008486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800848a:	6083      	str	r3, [r0, #8]
 800848c:	8181      	strh	r1, [r0, #12]
 800848e:	6643      	str	r3, [r0, #100]	; 0x64
 8008490:	81c2      	strh	r2, [r0, #14]
 8008492:	6183      	str	r3, [r0, #24]
 8008494:	4619      	mov	r1, r3
 8008496:	2208      	movs	r2, #8
 8008498:	305c      	adds	r0, #92	; 0x5c
 800849a:	f7fd fba5 	bl	8005be8 <memset>
 800849e:	4b05      	ldr	r3, [pc, #20]	; (80084b4 <std+0x38>)
 80084a0:	6263      	str	r3, [r4, #36]	; 0x24
 80084a2:	4b05      	ldr	r3, [pc, #20]	; (80084b8 <std+0x3c>)
 80084a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80084a6:	4b05      	ldr	r3, [pc, #20]	; (80084bc <std+0x40>)
 80084a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084aa:	4b05      	ldr	r3, [pc, #20]	; (80084c0 <std+0x44>)
 80084ac:	6224      	str	r4, [r4, #32]
 80084ae:	6323      	str	r3, [r4, #48]	; 0x30
 80084b0:	bd10      	pop	{r4, pc}
 80084b2:	bf00      	nop
 80084b4:	080087cd 	.word	0x080087cd
 80084b8:	080087ef 	.word	0x080087ef
 80084bc:	08008827 	.word	0x08008827
 80084c0:	0800884b 	.word	0x0800884b

080084c4 <_cleanup_r>:
 80084c4:	4901      	ldr	r1, [pc, #4]	; (80084cc <_cleanup_r+0x8>)
 80084c6:	f000 b8af 	b.w	8008628 <_fwalk_reent>
 80084ca:	bf00      	nop
 80084cc:	08008405 	.word	0x08008405

080084d0 <__sfmoreglue>:
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	1e4a      	subs	r2, r1, #1
 80084d4:	2568      	movs	r5, #104	; 0x68
 80084d6:	4355      	muls	r5, r2
 80084d8:	460e      	mov	r6, r1
 80084da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80084de:	f7ff fa87 	bl	80079f0 <_malloc_r>
 80084e2:	4604      	mov	r4, r0
 80084e4:	b140      	cbz	r0, 80084f8 <__sfmoreglue+0x28>
 80084e6:	2100      	movs	r1, #0
 80084e8:	e9c0 1600 	strd	r1, r6, [r0]
 80084ec:	300c      	adds	r0, #12
 80084ee:	60a0      	str	r0, [r4, #8]
 80084f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80084f4:	f7fd fb78 	bl	8005be8 <memset>
 80084f8:	4620      	mov	r0, r4
 80084fa:	bd70      	pop	{r4, r5, r6, pc}

080084fc <__sfp_lock_acquire>:
 80084fc:	4801      	ldr	r0, [pc, #4]	; (8008504 <__sfp_lock_acquire+0x8>)
 80084fe:	f000 b8b3 	b.w	8008668 <__retarget_lock_acquire_recursive>
 8008502:	bf00      	nop
 8008504:	20000310 	.word	0x20000310

08008508 <__sfp_lock_release>:
 8008508:	4801      	ldr	r0, [pc, #4]	; (8008510 <__sfp_lock_release+0x8>)
 800850a:	f000 b8ae 	b.w	800866a <__retarget_lock_release_recursive>
 800850e:	bf00      	nop
 8008510:	20000310 	.word	0x20000310

08008514 <__sinit_lock_acquire>:
 8008514:	4801      	ldr	r0, [pc, #4]	; (800851c <__sinit_lock_acquire+0x8>)
 8008516:	f000 b8a7 	b.w	8008668 <__retarget_lock_acquire_recursive>
 800851a:	bf00      	nop
 800851c:	2000030b 	.word	0x2000030b

08008520 <__sinit_lock_release>:
 8008520:	4801      	ldr	r0, [pc, #4]	; (8008528 <__sinit_lock_release+0x8>)
 8008522:	f000 b8a2 	b.w	800866a <__retarget_lock_release_recursive>
 8008526:	bf00      	nop
 8008528:	2000030b 	.word	0x2000030b

0800852c <__sinit>:
 800852c:	b510      	push	{r4, lr}
 800852e:	4604      	mov	r4, r0
 8008530:	f7ff fff0 	bl	8008514 <__sinit_lock_acquire>
 8008534:	69a3      	ldr	r3, [r4, #24]
 8008536:	b11b      	cbz	r3, 8008540 <__sinit+0x14>
 8008538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800853c:	f7ff bff0 	b.w	8008520 <__sinit_lock_release>
 8008540:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008544:	6523      	str	r3, [r4, #80]	; 0x50
 8008546:	4b13      	ldr	r3, [pc, #76]	; (8008594 <__sinit+0x68>)
 8008548:	4a13      	ldr	r2, [pc, #76]	; (8008598 <__sinit+0x6c>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	62a2      	str	r2, [r4, #40]	; 0x28
 800854e:	42a3      	cmp	r3, r4
 8008550:	bf04      	itt	eq
 8008552:	2301      	moveq	r3, #1
 8008554:	61a3      	streq	r3, [r4, #24]
 8008556:	4620      	mov	r0, r4
 8008558:	f000 f820 	bl	800859c <__sfp>
 800855c:	6060      	str	r0, [r4, #4]
 800855e:	4620      	mov	r0, r4
 8008560:	f000 f81c 	bl	800859c <__sfp>
 8008564:	60a0      	str	r0, [r4, #8]
 8008566:	4620      	mov	r0, r4
 8008568:	f000 f818 	bl	800859c <__sfp>
 800856c:	2200      	movs	r2, #0
 800856e:	60e0      	str	r0, [r4, #12]
 8008570:	2104      	movs	r1, #4
 8008572:	6860      	ldr	r0, [r4, #4]
 8008574:	f7ff ff82 	bl	800847c <std>
 8008578:	68a0      	ldr	r0, [r4, #8]
 800857a:	2201      	movs	r2, #1
 800857c:	2109      	movs	r1, #9
 800857e:	f7ff ff7d 	bl	800847c <std>
 8008582:	68e0      	ldr	r0, [r4, #12]
 8008584:	2202      	movs	r2, #2
 8008586:	2112      	movs	r1, #18
 8008588:	f7ff ff78 	bl	800847c <std>
 800858c:	2301      	movs	r3, #1
 800858e:	61a3      	str	r3, [r4, #24]
 8008590:	e7d2      	b.n	8008538 <__sinit+0xc>
 8008592:	bf00      	nop
 8008594:	0802e5a8 	.word	0x0802e5a8
 8008598:	080084c5 	.word	0x080084c5

0800859c <__sfp>:
 800859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859e:	4607      	mov	r7, r0
 80085a0:	f7ff ffac 	bl	80084fc <__sfp_lock_acquire>
 80085a4:	4b1e      	ldr	r3, [pc, #120]	; (8008620 <__sfp+0x84>)
 80085a6:	681e      	ldr	r6, [r3, #0]
 80085a8:	69b3      	ldr	r3, [r6, #24]
 80085aa:	b913      	cbnz	r3, 80085b2 <__sfp+0x16>
 80085ac:	4630      	mov	r0, r6
 80085ae:	f7ff ffbd 	bl	800852c <__sinit>
 80085b2:	3648      	adds	r6, #72	; 0x48
 80085b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80085b8:	3b01      	subs	r3, #1
 80085ba:	d503      	bpl.n	80085c4 <__sfp+0x28>
 80085bc:	6833      	ldr	r3, [r6, #0]
 80085be:	b30b      	cbz	r3, 8008604 <__sfp+0x68>
 80085c0:	6836      	ldr	r6, [r6, #0]
 80085c2:	e7f7      	b.n	80085b4 <__sfp+0x18>
 80085c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80085c8:	b9d5      	cbnz	r5, 8008600 <__sfp+0x64>
 80085ca:	4b16      	ldr	r3, [pc, #88]	; (8008624 <__sfp+0x88>)
 80085cc:	60e3      	str	r3, [r4, #12]
 80085ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80085d2:	6665      	str	r5, [r4, #100]	; 0x64
 80085d4:	f000 f847 	bl	8008666 <__retarget_lock_init_recursive>
 80085d8:	f7ff ff96 	bl	8008508 <__sfp_lock_release>
 80085dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80085e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80085e4:	6025      	str	r5, [r4, #0]
 80085e6:	61a5      	str	r5, [r4, #24]
 80085e8:	2208      	movs	r2, #8
 80085ea:	4629      	mov	r1, r5
 80085ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80085f0:	f7fd fafa 	bl	8005be8 <memset>
 80085f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80085f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80085fc:	4620      	mov	r0, r4
 80085fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008600:	3468      	adds	r4, #104	; 0x68
 8008602:	e7d9      	b.n	80085b8 <__sfp+0x1c>
 8008604:	2104      	movs	r1, #4
 8008606:	4638      	mov	r0, r7
 8008608:	f7ff ff62 	bl	80084d0 <__sfmoreglue>
 800860c:	4604      	mov	r4, r0
 800860e:	6030      	str	r0, [r6, #0]
 8008610:	2800      	cmp	r0, #0
 8008612:	d1d5      	bne.n	80085c0 <__sfp+0x24>
 8008614:	f7ff ff78 	bl	8008508 <__sfp_lock_release>
 8008618:	230c      	movs	r3, #12
 800861a:	603b      	str	r3, [r7, #0]
 800861c:	e7ee      	b.n	80085fc <__sfp+0x60>
 800861e:	bf00      	nop
 8008620:	0802e5a8 	.word	0x0802e5a8
 8008624:	ffff0001 	.word	0xffff0001

08008628 <_fwalk_reent>:
 8008628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800862c:	4606      	mov	r6, r0
 800862e:	4688      	mov	r8, r1
 8008630:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008634:	2700      	movs	r7, #0
 8008636:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800863a:	f1b9 0901 	subs.w	r9, r9, #1
 800863e:	d505      	bpl.n	800864c <_fwalk_reent+0x24>
 8008640:	6824      	ldr	r4, [r4, #0]
 8008642:	2c00      	cmp	r4, #0
 8008644:	d1f7      	bne.n	8008636 <_fwalk_reent+0xe>
 8008646:	4638      	mov	r0, r7
 8008648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800864c:	89ab      	ldrh	r3, [r5, #12]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d907      	bls.n	8008662 <_fwalk_reent+0x3a>
 8008652:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008656:	3301      	adds	r3, #1
 8008658:	d003      	beq.n	8008662 <_fwalk_reent+0x3a>
 800865a:	4629      	mov	r1, r5
 800865c:	4630      	mov	r0, r6
 800865e:	47c0      	blx	r8
 8008660:	4307      	orrs	r7, r0
 8008662:	3568      	adds	r5, #104	; 0x68
 8008664:	e7e9      	b.n	800863a <_fwalk_reent+0x12>

08008666 <__retarget_lock_init_recursive>:
 8008666:	4770      	bx	lr

08008668 <__retarget_lock_acquire_recursive>:
 8008668:	4770      	bx	lr

0800866a <__retarget_lock_release_recursive>:
 800866a:	4770      	bx	lr

0800866c <__swhatbuf_r>:
 800866c:	b570      	push	{r4, r5, r6, lr}
 800866e:	460e      	mov	r6, r1
 8008670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008674:	2900      	cmp	r1, #0
 8008676:	b096      	sub	sp, #88	; 0x58
 8008678:	4614      	mov	r4, r2
 800867a:	461d      	mov	r5, r3
 800867c:	da07      	bge.n	800868e <__swhatbuf_r+0x22>
 800867e:	2300      	movs	r3, #0
 8008680:	602b      	str	r3, [r5, #0]
 8008682:	89b3      	ldrh	r3, [r6, #12]
 8008684:	061a      	lsls	r2, r3, #24
 8008686:	d410      	bmi.n	80086aa <__swhatbuf_r+0x3e>
 8008688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800868c:	e00e      	b.n	80086ac <__swhatbuf_r+0x40>
 800868e:	466a      	mov	r2, sp
 8008690:	f000 f902 	bl	8008898 <_fstat_r>
 8008694:	2800      	cmp	r0, #0
 8008696:	dbf2      	blt.n	800867e <__swhatbuf_r+0x12>
 8008698:	9a01      	ldr	r2, [sp, #4]
 800869a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800869e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80086a2:	425a      	negs	r2, r3
 80086a4:	415a      	adcs	r2, r3
 80086a6:	602a      	str	r2, [r5, #0]
 80086a8:	e7ee      	b.n	8008688 <__swhatbuf_r+0x1c>
 80086aa:	2340      	movs	r3, #64	; 0x40
 80086ac:	2000      	movs	r0, #0
 80086ae:	6023      	str	r3, [r4, #0]
 80086b0:	b016      	add	sp, #88	; 0x58
 80086b2:	bd70      	pop	{r4, r5, r6, pc}

080086b4 <__smakebuf_r>:
 80086b4:	898b      	ldrh	r3, [r1, #12]
 80086b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086b8:	079d      	lsls	r5, r3, #30
 80086ba:	4606      	mov	r6, r0
 80086bc:	460c      	mov	r4, r1
 80086be:	d507      	bpl.n	80086d0 <__smakebuf_r+0x1c>
 80086c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80086c4:	6023      	str	r3, [r4, #0]
 80086c6:	6123      	str	r3, [r4, #16]
 80086c8:	2301      	movs	r3, #1
 80086ca:	6163      	str	r3, [r4, #20]
 80086cc:	b002      	add	sp, #8
 80086ce:	bd70      	pop	{r4, r5, r6, pc}
 80086d0:	ab01      	add	r3, sp, #4
 80086d2:	466a      	mov	r2, sp
 80086d4:	f7ff ffca 	bl	800866c <__swhatbuf_r>
 80086d8:	9900      	ldr	r1, [sp, #0]
 80086da:	4605      	mov	r5, r0
 80086dc:	4630      	mov	r0, r6
 80086de:	f7ff f987 	bl	80079f0 <_malloc_r>
 80086e2:	b948      	cbnz	r0, 80086f8 <__smakebuf_r+0x44>
 80086e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086e8:	059a      	lsls	r2, r3, #22
 80086ea:	d4ef      	bmi.n	80086cc <__smakebuf_r+0x18>
 80086ec:	f023 0303 	bic.w	r3, r3, #3
 80086f0:	f043 0302 	orr.w	r3, r3, #2
 80086f4:	81a3      	strh	r3, [r4, #12]
 80086f6:	e7e3      	b.n	80086c0 <__smakebuf_r+0xc>
 80086f8:	4b0d      	ldr	r3, [pc, #52]	; (8008730 <__smakebuf_r+0x7c>)
 80086fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80086fc:	89a3      	ldrh	r3, [r4, #12]
 80086fe:	6020      	str	r0, [r4, #0]
 8008700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008704:	81a3      	strh	r3, [r4, #12]
 8008706:	9b00      	ldr	r3, [sp, #0]
 8008708:	6163      	str	r3, [r4, #20]
 800870a:	9b01      	ldr	r3, [sp, #4]
 800870c:	6120      	str	r0, [r4, #16]
 800870e:	b15b      	cbz	r3, 8008728 <__smakebuf_r+0x74>
 8008710:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008714:	4630      	mov	r0, r6
 8008716:	f000 f8d1 	bl	80088bc <_isatty_r>
 800871a:	b128      	cbz	r0, 8008728 <__smakebuf_r+0x74>
 800871c:	89a3      	ldrh	r3, [r4, #12]
 800871e:	f023 0303 	bic.w	r3, r3, #3
 8008722:	f043 0301 	orr.w	r3, r3, #1
 8008726:	81a3      	strh	r3, [r4, #12]
 8008728:	89a0      	ldrh	r0, [r4, #12]
 800872a:	4305      	orrs	r5, r0
 800872c:	81a5      	strh	r5, [r4, #12]
 800872e:	e7cd      	b.n	80086cc <__smakebuf_r+0x18>
 8008730:	080084c5 	.word	0x080084c5

08008734 <_malloc_usable_size_r>:
 8008734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008738:	1f18      	subs	r0, r3, #4
 800873a:	2b00      	cmp	r3, #0
 800873c:	bfbc      	itt	lt
 800873e:	580b      	ldrlt	r3, [r1, r0]
 8008740:	18c0      	addlt	r0, r0, r3
 8008742:	4770      	bx	lr

08008744 <_raise_r>:
 8008744:	291f      	cmp	r1, #31
 8008746:	b538      	push	{r3, r4, r5, lr}
 8008748:	4604      	mov	r4, r0
 800874a:	460d      	mov	r5, r1
 800874c:	d904      	bls.n	8008758 <_raise_r+0x14>
 800874e:	2316      	movs	r3, #22
 8008750:	6003      	str	r3, [r0, #0]
 8008752:	f04f 30ff 	mov.w	r0, #4294967295
 8008756:	bd38      	pop	{r3, r4, r5, pc}
 8008758:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800875a:	b112      	cbz	r2, 8008762 <_raise_r+0x1e>
 800875c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008760:	b94b      	cbnz	r3, 8008776 <_raise_r+0x32>
 8008762:	4620      	mov	r0, r4
 8008764:	f000 f830 	bl	80087c8 <_getpid_r>
 8008768:	462a      	mov	r2, r5
 800876a:	4601      	mov	r1, r0
 800876c:	4620      	mov	r0, r4
 800876e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008772:	f000 b817 	b.w	80087a4 <_kill_r>
 8008776:	2b01      	cmp	r3, #1
 8008778:	d00a      	beq.n	8008790 <_raise_r+0x4c>
 800877a:	1c59      	adds	r1, r3, #1
 800877c:	d103      	bne.n	8008786 <_raise_r+0x42>
 800877e:	2316      	movs	r3, #22
 8008780:	6003      	str	r3, [r0, #0]
 8008782:	2001      	movs	r0, #1
 8008784:	e7e7      	b.n	8008756 <_raise_r+0x12>
 8008786:	2400      	movs	r4, #0
 8008788:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800878c:	4628      	mov	r0, r5
 800878e:	4798      	blx	r3
 8008790:	2000      	movs	r0, #0
 8008792:	e7e0      	b.n	8008756 <_raise_r+0x12>

08008794 <raise>:
 8008794:	4b02      	ldr	r3, [pc, #8]	; (80087a0 <raise+0xc>)
 8008796:	4601      	mov	r1, r0
 8008798:	6818      	ldr	r0, [r3, #0]
 800879a:	f7ff bfd3 	b.w	8008744 <_raise_r>
 800879e:	bf00      	nop
 80087a0:	20000010 	.word	0x20000010

080087a4 <_kill_r>:
 80087a4:	b538      	push	{r3, r4, r5, lr}
 80087a6:	4d07      	ldr	r5, [pc, #28]	; (80087c4 <_kill_r+0x20>)
 80087a8:	2300      	movs	r3, #0
 80087aa:	4604      	mov	r4, r0
 80087ac:	4608      	mov	r0, r1
 80087ae:	4611      	mov	r1, r2
 80087b0:	602b      	str	r3, [r5, #0]
 80087b2:	f7f9 fd63 	bl	800227c <_kill>
 80087b6:	1c43      	adds	r3, r0, #1
 80087b8:	d102      	bne.n	80087c0 <_kill_r+0x1c>
 80087ba:	682b      	ldr	r3, [r5, #0]
 80087bc:	b103      	cbz	r3, 80087c0 <_kill_r+0x1c>
 80087be:	6023      	str	r3, [r4, #0]
 80087c0:	bd38      	pop	{r3, r4, r5, pc}
 80087c2:	bf00      	nop
 80087c4:	20000304 	.word	0x20000304

080087c8 <_getpid_r>:
 80087c8:	f7f9 bd50 	b.w	800226c <_getpid>

080087cc <__sread>:
 80087cc:	b510      	push	{r4, lr}
 80087ce:	460c      	mov	r4, r1
 80087d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087d4:	f000 f894 	bl	8008900 <_read_r>
 80087d8:	2800      	cmp	r0, #0
 80087da:	bfab      	itete	ge
 80087dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087de:	89a3      	ldrhlt	r3, [r4, #12]
 80087e0:	181b      	addge	r3, r3, r0
 80087e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087e6:	bfac      	ite	ge
 80087e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80087ea:	81a3      	strhlt	r3, [r4, #12]
 80087ec:	bd10      	pop	{r4, pc}

080087ee <__swrite>:
 80087ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f2:	461f      	mov	r7, r3
 80087f4:	898b      	ldrh	r3, [r1, #12]
 80087f6:	05db      	lsls	r3, r3, #23
 80087f8:	4605      	mov	r5, r0
 80087fa:	460c      	mov	r4, r1
 80087fc:	4616      	mov	r6, r2
 80087fe:	d505      	bpl.n	800880c <__swrite+0x1e>
 8008800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008804:	2302      	movs	r3, #2
 8008806:	2200      	movs	r2, #0
 8008808:	f000 f868 	bl	80088dc <_lseek_r>
 800880c:	89a3      	ldrh	r3, [r4, #12]
 800880e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008812:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008816:	81a3      	strh	r3, [r4, #12]
 8008818:	4632      	mov	r2, r6
 800881a:	463b      	mov	r3, r7
 800881c:	4628      	mov	r0, r5
 800881e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008822:	f000 b817 	b.w	8008854 <_write_r>

08008826 <__sseek>:
 8008826:	b510      	push	{r4, lr}
 8008828:	460c      	mov	r4, r1
 800882a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800882e:	f000 f855 	bl	80088dc <_lseek_r>
 8008832:	1c43      	adds	r3, r0, #1
 8008834:	89a3      	ldrh	r3, [r4, #12]
 8008836:	bf15      	itete	ne
 8008838:	6560      	strne	r0, [r4, #84]	; 0x54
 800883a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800883e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008842:	81a3      	strheq	r3, [r4, #12]
 8008844:	bf18      	it	ne
 8008846:	81a3      	strhne	r3, [r4, #12]
 8008848:	bd10      	pop	{r4, pc}

0800884a <__sclose>:
 800884a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800884e:	f000 b813 	b.w	8008878 <_close_r>
	...

08008854 <_write_r>:
 8008854:	b538      	push	{r3, r4, r5, lr}
 8008856:	4d07      	ldr	r5, [pc, #28]	; (8008874 <_write_r+0x20>)
 8008858:	4604      	mov	r4, r0
 800885a:	4608      	mov	r0, r1
 800885c:	4611      	mov	r1, r2
 800885e:	2200      	movs	r2, #0
 8008860:	602a      	str	r2, [r5, #0]
 8008862:	461a      	mov	r2, r3
 8008864:	f7f9 fd41 	bl	80022ea <_write>
 8008868:	1c43      	adds	r3, r0, #1
 800886a:	d102      	bne.n	8008872 <_write_r+0x1e>
 800886c:	682b      	ldr	r3, [r5, #0]
 800886e:	b103      	cbz	r3, 8008872 <_write_r+0x1e>
 8008870:	6023      	str	r3, [r4, #0]
 8008872:	bd38      	pop	{r3, r4, r5, pc}
 8008874:	20000304 	.word	0x20000304

08008878 <_close_r>:
 8008878:	b538      	push	{r3, r4, r5, lr}
 800887a:	4d06      	ldr	r5, [pc, #24]	; (8008894 <_close_r+0x1c>)
 800887c:	2300      	movs	r3, #0
 800887e:	4604      	mov	r4, r0
 8008880:	4608      	mov	r0, r1
 8008882:	602b      	str	r3, [r5, #0]
 8008884:	f7f9 fd4d 	bl	8002322 <_close>
 8008888:	1c43      	adds	r3, r0, #1
 800888a:	d102      	bne.n	8008892 <_close_r+0x1a>
 800888c:	682b      	ldr	r3, [r5, #0]
 800888e:	b103      	cbz	r3, 8008892 <_close_r+0x1a>
 8008890:	6023      	str	r3, [r4, #0]
 8008892:	bd38      	pop	{r3, r4, r5, pc}
 8008894:	20000304 	.word	0x20000304

08008898 <_fstat_r>:
 8008898:	b538      	push	{r3, r4, r5, lr}
 800889a:	4d07      	ldr	r5, [pc, #28]	; (80088b8 <_fstat_r+0x20>)
 800889c:	2300      	movs	r3, #0
 800889e:	4604      	mov	r4, r0
 80088a0:	4608      	mov	r0, r1
 80088a2:	4611      	mov	r1, r2
 80088a4:	602b      	str	r3, [r5, #0]
 80088a6:	f7f9 fd48 	bl	800233a <_fstat>
 80088aa:	1c43      	adds	r3, r0, #1
 80088ac:	d102      	bne.n	80088b4 <_fstat_r+0x1c>
 80088ae:	682b      	ldr	r3, [r5, #0]
 80088b0:	b103      	cbz	r3, 80088b4 <_fstat_r+0x1c>
 80088b2:	6023      	str	r3, [r4, #0]
 80088b4:	bd38      	pop	{r3, r4, r5, pc}
 80088b6:	bf00      	nop
 80088b8:	20000304 	.word	0x20000304

080088bc <_isatty_r>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	4d06      	ldr	r5, [pc, #24]	; (80088d8 <_isatty_r+0x1c>)
 80088c0:	2300      	movs	r3, #0
 80088c2:	4604      	mov	r4, r0
 80088c4:	4608      	mov	r0, r1
 80088c6:	602b      	str	r3, [r5, #0]
 80088c8:	f7f9 fd47 	bl	800235a <_isatty>
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	d102      	bne.n	80088d6 <_isatty_r+0x1a>
 80088d0:	682b      	ldr	r3, [r5, #0]
 80088d2:	b103      	cbz	r3, 80088d6 <_isatty_r+0x1a>
 80088d4:	6023      	str	r3, [r4, #0]
 80088d6:	bd38      	pop	{r3, r4, r5, pc}
 80088d8:	20000304 	.word	0x20000304

080088dc <_lseek_r>:
 80088dc:	b538      	push	{r3, r4, r5, lr}
 80088de:	4d07      	ldr	r5, [pc, #28]	; (80088fc <_lseek_r+0x20>)
 80088e0:	4604      	mov	r4, r0
 80088e2:	4608      	mov	r0, r1
 80088e4:	4611      	mov	r1, r2
 80088e6:	2200      	movs	r2, #0
 80088e8:	602a      	str	r2, [r5, #0]
 80088ea:	461a      	mov	r2, r3
 80088ec:	f7f9 fd40 	bl	8002370 <_lseek>
 80088f0:	1c43      	adds	r3, r0, #1
 80088f2:	d102      	bne.n	80088fa <_lseek_r+0x1e>
 80088f4:	682b      	ldr	r3, [r5, #0]
 80088f6:	b103      	cbz	r3, 80088fa <_lseek_r+0x1e>
 80088f8:	6023      	str	r3, [r4, #0]
 80088fa:	bd38      	pop	{r3, r4, r5, pc}
 80088fc:	20000304 	.word	0x20000304

08008900 <_read_r>:
 8008900:	b538      	push	{r3, r4, r5, lr}
 8008902:	4d07      	ldr	r5, [pc, #28]	; (8008920 <_read_r+0x20>)
 8008904:	4604      	mov	r4, r0
 8008906:	4608      	mov	r0, r1
 8008908:	4611      	mov	r1, r2
 800890a:	2200      	movs	r2, #0
 800890c:	602a      	str	r2, [r5, #0]
 800890e:	461a      	mov	r2, r3
 8008910:	f7f9 fcce 	bl	80022b0 <_read>
 8008914:	1c43      	adds	r3, r0, #1
 8008916:	d102      	bne.n	800891e <_read_r+0x1e>
 8008918:	682b      	ldr	r3, [r5, #0]
 800891a:	b103      	cbz	r3, 800891e <_read_r+0x1e>
 800891c:	6023      	str	r3, [r4, #0]
 800891e:	bd38      	pop	{r3, r4, r5, pc}
 8008920:	20000304 	.word	0x20000304

08008924 <_init>:
 8008924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008926:	bf00      	nop
 8008928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800892a:	bc08      	pop	{r3}
 800892c:	469e      	mov	lr, r3
 800892e:	4770      	bx	lr

08008930 <_fini>:
 8008930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008932:	bf00      	nop
 8008934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008936:	bc08      	pop	{r3}
 8008938:	469e      	mov	lr, r3
 800893a:	4770      	bx	lr
