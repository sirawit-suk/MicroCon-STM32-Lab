
Lab08.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c268  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025fe4  0800c418  0800c418  0001c418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080323fc  080323fc  000501f4  2**0
                  CONTENTS
  4 .ARM          00000008  080323fc  080323fc  000423fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08032404  08032404  000501f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08032404  08032404  00042404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08032408  08032408  00042408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0803240c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000501f4  2**0
                  CONTENTS
 10 .bss          00000288  200001f4  200001f4  000501f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000047c  2000047c  000501f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000501f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a962  00000000  00000000  00050224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000039de  00000000  00000000  0006ab86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d8  00000000  00000000  0006e568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013b8  00000000  00000000  0006fa40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028693  00000000  00000000  00070df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bce5  00000000  00000000  0009948b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed34b  00000000  00000000  000b5170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001a24bb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006bc8  00000000  00000000  001a2510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c400 	.word	0x0800c400

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	0800c400 	.word	0x0800c400

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001012:	463b      	mov	r3, r7
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800101e:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001020:	4a21      	ldr	r2, [pc, #132]	; (80010a8 <MX_ADC1_Init+0x9c>)
 8001022:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001026:	2200      	movs	r2, #0
 8001028:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800102a:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <MX_ADC1_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001038:	2201      	movs	r2, #1
 800103a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <MX_ADC1_Init+0x98>)
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001046:	2200      	movs	r2, #0
 8001048:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_ADC1_Init+0x98>)
 800104c:	4a17      	ldr	r2, [pc, #92]	; (80010ac <MX_ADC1_Init+0xa0>)
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001058:	2201      	movs	r2, #1
 800105a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_ADC1_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800106a:	480e      	ldr	r0, [pc, #56]	; (80010a4 <MX_ADC1_Init+0x98>)
 800106c:	f002 fe2e 	bl	8003ccc <HAL_ADC_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001076:	f001 f8e7 	bl	8002248 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800107a:	230d      	movs	r3, #13
 800107c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800107e:	2301      	movs	r3, #1
 8001080:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <MX_ADC1_Init+0x98>)
 800108c:	f002 ffcc 	bl	8004028 <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001096:	f001 f8d7 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000023c 	.word	0x2000023c
 80010a8:	40012000 	.word	0x40012000
 80010ac:	0f000001 	.word	0x0f000001

080010b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a17      	ldr	r2, [pc, #92]	; (800112c <HAL_ADC_MspInit+0x7c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d127      	bne.n	8001122 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <HAL_ADC_MspInit+0x80>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a15      	ldr	r2, [pc, #84]	; (8001130 <HAL_ADC_MspInit+0x80>)
 80010dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <HAL_ADC_MspInit+0x80>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_ADC_MspInit+0x80>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <HAL_ADC_MspInit+0x80>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_ADC_MspInit+0x80>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800110a:	2308      	movs	r3, #8
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110e:	2303      	movs	r3, #3
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <HAL_ADC_MspInit+0x84>)
 800111e:	f003 fa97 	bl	8004650 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40012000 	.word	0x40012000
 8001130:	40023800 	.word	0x40023800
 8001134:	40020800 	.word	0x40020800

08001138 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b4e      	ldr	r3, [pc, #312]	; (800128c <MX_GPIO_Init+0x154>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a4d      	ldr	r2, [pc, #308]	; (800128c <MX_GPIO_Init+0x154>)
 8001158:	f043 0320 	orr.w	r3, r3, #32
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b4b      	ldr	r3, [pc, #300]	; (800128c <MX_GPIO_Init+0x154>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0320 	and.w	r3, r3, #32
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b47      	ldr	r3, [pc, #284]	; (800128c <MX_GPIO_Init+0x154>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a46      	ldr	r2, [pc, #280]	; (800128c <MX_GPIO_Init+0x154>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b44      	ldr	r3, [pc, #272]	; (800128c <MX_GPIO_Init+0x154>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	4b40      	ldr	r3, [pc, #256]	; (800128c <MX_GPIO_Init+0x154>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a3f      	ldr	r2, [pc, #252]	; (800128c <MX_GPIO_Init+0x154>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b3d      	ldr	r3, [pc, #244]	; (800128c <MX_GPIO_Init+0x154>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b39      	ldr	r3, [pc, #228]	; (800128c <MX_GPIO_Init+0x154>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a38      	ldr	r2, [pc, #224]	; (800128c <MX_GPIO_Init+0x154>)
 80011ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b36      	ldr	r3, [pc, #216]	; (800128c <MX_GPIO_Init+0x154>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	4b32      	ldr	r3, [pc, #200]	; (800128c <MX_GPIO_Init+0x154>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a31      	ldr	r2, [pc, #196]	; (800128c <MX_GPIO_Init+0x154>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b2f      	ldr	r3, [pc, #188]	; (800128c <MX_GPIO_Init+0x154>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, T_CLK_Pin|T_CS_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	210e      	movs	r1, #14
 80011de:	482c      	ldr	r0, [pc, #176]	; (8001290 <MX_GPIO_Init+0x158>)
 80011e0:	f003 fbfa 	bl	80049d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|RST_Pin|DC_Pin, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80011ea:	482a      	ldr	r0, [pc, #168]	; (8001294 <MX_GPIO_Init+0x15c>)
 80011ec:	f003 fbf4 	bl	80049d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80011f6:	4828      	ldr	r0, [pc, #160]	; (8001298 <MX_GPIO_Init+0x160>)
 80011f8:	f003 fbee 	bl	80049d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin|T_MOSI_Pin;
 80011fc:	230e      	movs	r3, #14
 80011fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001208:	2303      	movs	r3, #3
 800120a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	481f      	ldr	r0, [pc, #124]	; (8001290 <MX_GPIO_Init+0x158>)
 8001214:	f003 fa1c 	bl	8004650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = T_MISO_Pin|T_IRQ_Pin;
 8001218:	2330      	movs	r3, #48	; 0x30
 800121a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4819      	ldr	r0, [pc, #100]	; (8001290 <MX_GPIO_Init+0x158>)
 800122c:	f003 fa10 	bl	8004650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001230:	2301      	movs	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001234:	2300      	movs	r3, #0
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4814      	ldr	r0, [pc, #80]	; (8001294 <MX_GPIO_Init+0x15c>)
 8001244:	f003 fa04 	bl	8004650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin|DC_Pin;
 8001248:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800124c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	2301      	movs	r3, #1
 8001250:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001256:	2303      	movs	r3, #3
 8001258:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	480c      	ldr	r0, [pc, #48]	; (8001294 <MX_GPIO_Init+0x15c>)
 8001262:	f003 f9f5 	bl	8004650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8001266:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800126a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800126c:	2301      	movs	r3, #1
 800126e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	4619      	mov	r1, r3
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <MX_GPIO_Init+0x160>)
 8001280:	f003 f9e6 	bl	8004650 <HAL_GPIO_Init>

}
 8001284:	bf00      	nop
 8001286:	3728      	adds	r7, #40	; 0x28
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40023800 	.word	0x40023800
 8001290:	40021400 	.word	0x40021400
 8001294:	40020000 	.word	0x40020000
 8001298:	40021800 	.word	0x40021800

0800129c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <MX_I2C1_Init+0x74>)
 80012a2:	4a1c      	ldr	r2, [pc, #112]	; (8001314 <MX_I2C1_Init+0x78>)
 80012a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012a6:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <MX_I2C1_Init+0x74>)
 80012a8:	4a1b      	ldr	r2, [pc, #108]	; (8001318 <MX_I2C1_Init+0x7c>)
 80012aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012ac:	4b18      	ldr	r3, [pc, #96]	; (8001310 <MX_I2C1_Init+0x74>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <MX_I2C1_Init+0x74>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <MX_I2C1_Init+0x74>)
 80012ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <MX_I2C1_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <MX_I2C1_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <MX_I2C1_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <MX_I2C1_Init+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012d8:	480d      	ldr	r0, [pc, #52]	; (8001310 <MX_I2C1_Init+0x74>)
 80012da:	f003 fb97 	bl	8004a0c <HAL_I2C_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012e4:	f000 ffb0 	bl	8002248 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012e8:	2100      	movs	r1, #0
 80012ea:	4809      	ldr	r0, [pc, #36]	; (8001310 <MX_I2C1_Init+0x74>)
 80012ec:	f004 fb23 	bl	8005936 <HAL_I2CEx_ConfigAnalogFilter>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80012f6:	f000 ffa7 	bl	8002248 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012fa:	2100      	movs	r1, #0
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <MX_I2C1_Init+0x74>)
 80012fe:	f004 fb56 	bl	80059ae <HAL_I2CEx_ConfigDigitalFilter>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001308:	f000 ff9e 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	200002d8 	.word	0x200002d8
 8001314:	40005400 	.word	0x40005400
 8001318:	000186a0 	.word	0x000186a0

0800131c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001320:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <MX_I2C3_Init+0x74>)
 8001322:	4a1c      	ldr	r2, [pc, #112]	; (8001394 <MX_I2C3_Init+0x78>)
 8001324:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001326:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <MX_I2C3_Init+0x74>)
 8001328:	4a1b      	ldr	r2, [pc, #108]	; (8001398 <MX_I2C3_Init+0x7c>)
 800132a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_I2C3_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <MX_I2C3_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <MX_I2C3_Init+0x74>)
 800133a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800133e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <MX_I2C3_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <MX_I2C3_Init+0x74>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800134c:	4b10      	ldr	r3, [pc, #64]	; (8001390 <MX_I2C3_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <MX_I2C3_Init+0x74>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <MX_I2C3_Init+0x74>)
 800135a:	f003 fb57 	bl	8004a0c <HAL_I2C_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001364:	f000 ff70 	bl	8002248 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001368:	2100      	movs	r1, #0
 800136a:	4809      	ldr	r0, [pc, #36]	; (8001390 <MX_I2C3_Init+0x74>)
 800136c:	f004 fae3 	bl	8005936 <HAL_I2CEx_ConfigAnalogFilter>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001376:	f000 ff67 	bl	8002248 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800137a:	2100      	movs	r1, #0
 800137c:	4804      	ldr	r0, [pc, #16]	; (8001390 <MX_I2C3_Init+0x74>)
 800137e:	f004 fb16 	bl	80059ae <HAL_I2CEx_ConfigDigitalFilter>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001388:	f000 ff5e 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000284 	.word	0x20000284
 8001394:	40005c00 	.word	0x40005c00
 8001398:	000186a0 	.word	0x000186a0

0800139c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08c      	sub	sp, #48	; 0x30
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a42      	ldr	r2, [pc, #264]	; (80014c4 <HAL_I2C_MspInit+0x128>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d12d      	bne.n	800141a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	61bb      	str	r3, [r7, #24]
 80013c2:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <HAL_I2C_MspInit+0x12c>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a40      	ldr	r2, [pc, #256]	; (80014c8 <HAL_I2C_MspInit+0x12c>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b3e      	ldr	r3, [pc, #248]	; (80014c8 <HAL_I2C_MspInit+0x12c>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	61bb      	str	r3, [r7, #24]
 80013d8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e0:	2312      	movs	r3, #18
 80013e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ec:	2304      	movs	r3, #4
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	4619      	mov	r1, r3
 80013f6:	4835      	ldr	r0, [pc, #212]	; (80014cc <HAL_I2C_MspInit+0x130>)
 80013f8:	f003 f92a 	bl	8004650 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	4b31      	ldr	r3, [pc, #196]	; (80014c8 <HAL_I2C_MspInit+0x12c>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	4a30      	ldr	r2, [pc, #192]	; (80014c8 <HAL_I2C_MspInit+0x12c>)
 8001406:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800140a:	6413      	str	r3, [r2, #64]	; 0x40
 800140c:	4b2e      	ldr	r3, [pc, #184]	; (80014c8 <HAL_I2C_MspInit+0x12c>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001418:	e050      	b.n	80014bc <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a2c      	ldr	r2, [pc, #176]	; (80014d0 <HAL_I2C_MspInit+0x134>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d14b      	bne.n	80014bc <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	4b27      	ldr	r3, [pc, #156]	; (80014c8 <HAL_I2C_MspInit+0x12c>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	4a26      	ldr	r2, [pc, #152]	; (80014c8 <HAL_I2C_MspInit+0x12c>)
 800142e:	f043 0304 	orr.w	r3, r3, #4
 8001432:	6313      	str	r3, [r2, #48]	; 0x30
 8001434:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <HAL_I2C_MspInit+0x12c>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <HAL_I2C_MspInit+0x12c>)
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	4a1f      	ldr	r2, [pc, #124]	; (80014c8 <HAL_I2C_MspInit+0x12c>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6313      	str	r3, [r2, #48]	; 0x30
 8001450:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <HAL_I2C_MspInit+0x12c>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800145c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001462:	2312      	movs	r3, #18
 8001464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800146e:	2304      	movs	r3, #4
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	4619      	mov	r1, r3
 8001478:	4816      	ldr	r0, [pc, #88]	; (80014d4 <HAL_I2C_MspInit+0x138>)
 800147a:	f003 f8e9 	bl	8004650 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800147e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001484:	2312      	movs	r3, #18
 8001486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148c:	2303      	movs	r3, #3
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001490:	2304      	movs	r3, #4
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001494:	f107 031c 	add.w	r3, r7, #28
 8001498:	4619      	mov	r1, r3
 800149a:	480f      	ldr	r0, [pc, #60]	; (80014d8 <HAL_I2C_MspInit+0x13c>)
 800149c:	f003 f8d8 	bl	8004650 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <HAL_I2C_MspInit+0x12c>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <HAL_I2C_MspInit+0x12c>)
 80014aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014ae:	6413      	str	r3, [r2, #64]	; 0x40
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <HAL_I2C_MspInit+0x12c>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
}
 80014bc:	bf00      	nop
 80014be:	3730      	adds	r7, #48	; 0x30
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40005400 	.word	0x40005400
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020400 	.word	0x40020400
 80014d0:	40005c00 	.word	0x40005c00
 80014d4:	40020800 	.word	0x40020800
 80014d8:	40020000 	.word	0x40020000

080014dc <TemperatureAndHumid.10690>:

  float temperature =30.0, humidity =50.0;

  HAL_ADC_Start(&hadc1);

  void TemperatureAndHumid(){
 80014dc:	b5b0      	push	{r4, r5, r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4664      	mov	r4, ip
 80014e4:	f8c7 c004 	str.w	ip, [r7, #4]
	am2320_GetTemperatureAndHumidity(&Am2320_, &temperature, &humidity);
 80014e8:	f104 030c 	add.w	r3, r4, #12
 80014ec:	f104 0108 	add.w	r1, r4, #8
 80014f0:	1d22      	adds	r2, r4, #4
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 fb12 	bl	8003b1c <am2320_GetTemperatureAndHumidity>
	sprintf(str, "=====================================\r\n");
 80014f8:	f104 031c 	add.w	r3, r4, #28
 80014fc:	4924      	ldr	r1, [pc, #144]	; (8001590 <TemperatureAndHumid.10690+0xb4>)
 80014fe:	4618      	mov	r0, r3
 8001500:	f007 f9da 	bl	80088b8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 200);
 8001504:	f104 051c 	add.w	r5, r4, #28
 8001508:	f104 031c 	add.w	r3, r4, #28
 800150c:	4618      	mov	r0, r3
 800150e:	f7fe fe6f 	bl	80001f0 <strlen>
 8001512:	4603      	mov	r3, r0
 8001514:	b29a      	uxth	r2, r3
 8001516:	23c8      	movs	r3, #200	; 0xc8
 8001518:	4629      	mov	r1, r5
 800151a:	481e      	ldr	r0, [pc, #120]	; (8001594 <TemperatureAndHumid.10690+0xb8>)
 800151c:	f006 f851 	bl	80075c2 <HAL_UART_Transmit>
	sprintf(str, "Temperature: %.1fºC\r\n",temperature);
 8001520:	f104 051c 	add.w	r5, r4, #28
 8001524:	68a3      	ldr	r3, [r4, #8]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f81e 	bl	8000568 <__aeabi_f2d>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4919      	ldr	r1, [pc, #100]	; (8001598 <TemperatureAndHumid.10690+0xbc>)
 8001532:	4628      	mov	r0, r5
 8001534:	f007 f9c0 	bl	80088b8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 200);
 8001538:	f104 051c 	add.w	r5, r4, #28
 800153c:	f104 031c 	add.w	r3, r4, #28
 8001540:	4618      	mov	r0, r3
 8001542:	f7fe fe55 	bl	80001f0 <strlen>
 8001546:	4603      	mov	r3, r0
 8001548:	b29a      	uxth	r2, r3
 800154a:	23c8      	movs	r3, #200	; 0xc8
 800154c:	4629      	mov	r1, r5
 800154e:	4811      	ldr	r0, [pc, #68]	; (8001594 <TemperatureAndHumid.10690+0xb8>)
 8001550:	f006 f837 	bl	80075c2 <HAL_UART_Transmit>
	sprintf(str, "Humidity: %.1f%%\r\n",humidity);
 8001554:	f104 051c 	add.w	r5, r4, #28
 8001558:	6863      	ldr	r3, [r4, #4]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff f804 	bl	8000568 <__aeabi_f2d>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	490d      	ldr	r1, [pc, #52]	; (800159c <TemperatureAndHumid.10690+0xc0>)
 8001566:	4628      	mov	r0, r5
 8001568:	f007 f9a6 	bl	80088b8 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 200);
 800156c:	f104 051c 	add.w	r5, r4, #28
 8001570:	f104 031c 	add.w	r3, r4, #28
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe fe3b 	bl	80001f0 <strlen>
 800157a:	4603      	mov	r3, r0
 800157c:	b29a      	uxth	r2, r3
 800157e:	23c8      	movs	r3, #200	; 0xc8
 8001580:	4629      	mov	r1, r5
 8001582:	4804      	ldr	r0, [pc, #16]	; (8001594 <TemperatureAndHumid.10690+0xb8>)
 8001584:	f006 f81d 	bl	80075c2 <HAL_UART_Transmit>

  }
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bdb0      	pop	{r4, r5, r7, pc}
 8001590:	0800c448 	.word	0x0800c448
 8001594:	20000424 	.word	0x20000424
 8001598:	0800c470 	.word	0x0800c470
 800159c:	0800c488 	.word	0x0800c488

080015a0 <main>:
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b0e9      	sub	sp, #420	; 0x1a4
 80015a4:	af02      	add	r7, sp, #8
int main(void)
 80015a6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80015aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  HAL_Init();
 80015ae:	f002 faf7 	bl	8003ba0 <HAL_Init>
  Am2320_ = am2320_Init(&hi2c3, AM2320_ADDRESS);
 80015b2:	463b      	mov	r3, r7
 80015b4:	22b8      	movs	r2, #184	; 0xb8
 80015b6:	49c7      	ldr	r1, [pc, #796]	; (80018d4 <main+0x334>)
 80015b8:	4618      	mov	r0, r3
 80015ba:	f002 fa43 	bl	8003a44 <am2320_Init>
 80015be:	463b      	mov	r3, r7
 80015c0:	f507 748e 	add.w	r4, r7, #284	; 0x11c
 80015c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  SystemClock_Config();
 80015ca:	f000 fdd1 	bl	8002170 <SystemClock_Config>
  MX_TIM1_Init();
 80015ce:	f001 f81f 	bl	8002610 <MX_TIM1_Init>
  MX_GPIO_Init();
 80015d2:	f7ff fdb1 	bl	8001138 <MX_GPIO_Init>
  MX_RNG_Init();
 80015d6:	f000 fe3d 	bl	8002254 <MX_RNG_Init>
  MX_SPI3_Init();
 80015da:	f000 fe71 	bl	80022c0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80015de:	f001 f93b 	bl	8002858 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80015e2:	f7ff fe5b 	bl	800129c <MX_I2C1_Init>
  MX_ADC1_Init();
 80015e6:	f7ff fd11 	bl	800100c <MX_ADC1_Init>
  MX_TIM2_Init();
 80015ea:	f001 f863 	bl	80026b4 <MX_TIM2_Init>
  MX_I2C3_Init();
 80015ee:	f7ff fe95 	bl	800131c <MX_I2C3_Init>
  ILI9341_Init();//initial driver setup to drive ili9341
 80015f2:	f001 fdd9 	bl	80031a8 <ILI9341_Init>
  uint8_t mode = 1;
 80015f6:	2301      	movs	r3, #1
 80015f8:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
  uint32_t now = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
  uint32_t prenow = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  uint32_t sec = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  float dutyCycleScreen = 0.0;
 800160e:	f04f 0300 	mov.w	r3, #0
 8001612:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  float temperature =30.0, humidity =50.0;
 8001616:	4bb0      	ldr	r3, [pc, #704]	; (80018d8 <main+0x338>)
 8001618:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800161c:	4baf      	ldr	r3, [pc, #700]	; (80018dc <main+0x33c>)
 800161e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  HAL_ADC_Start(&hadc1);
 8001622:	48af      	ldr	r0, [pc, #700]	; (80018e0 <main+0x340>)
 8001624:	f002 fb96 	bl	8003d54 <HAL_ADC_Start>

    /* USER CODE BEGIN 3 */

	 		//Mode 1

	 		if(mode == 1){
 8001628:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 800162c:	2b01      	cmp	r3, #1
 800162e:	f040 842d 	bne.w	8001e8c <main+0x8ec>

				ILI9341_Fill_Screen(WHITE);
 8001632:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001636:	f001 ff5f 	bl	80034f8 <ILI9341_Fill_Screen>
				ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800163a:	2001      	movs	r0, #1
 800163c:	f001 fd56 	bl	80030ec <ILI9341_Set_Rotation>
				static uint16_t radius = 20;
				static uint16_t ySpace = 60;
				//static uint16_t maxHeight = 240;
				static uint16_t maxWidth = 320;

				uint16_t xRectangle = x+radius+10;
 8001640:	4ba8      	ldr	r3, [pc, #672]	; (80018e4 <main+0x344>)
 8001642:	881a      	ldrh	r2, [r3, #0]
 8001644:	4ba8      	ldr	r3, [pc, #672]	; (80018e8 <main+0x348>)
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	4413      	add	r3, r2
 800164a:	b29b      	uxth	r3, r3
 800164c:	330a      	adds	r3, #10
 800164e:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
				uint16_t rectangleWidth = 115;
 8001652:	2373      	movs	r3, #115	; 0x73
 8001654:	f8a7 317c 	strh.w	r3, [r7, #380]	; 0x17c
				uint16_t xValue = xRectangle + rectangleWidth+5;
 8001658:	f8b7 217e 	ldrh.w	r2, [r7, #382]	; 0x17e
 800165c:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8001660:	4413      	add	r3, r2
 8001662:	b29b      	uxth	r3, r3
 8001664:	3305      	adds	r3, #5
 8001666:	f8a7 317a 	strh.w	r3, [r7, #378]	; 0x17a
				uint16_t y1 =  y;
 800166a:	4ba0      	ldr	r3, [pc, #640]	; (80018ec <main+0x34c>)
 800166c:	881b      	ldrh	r3, [r3, #0]
 800166e:	f8a7 3178 	strh.w	r3, [r7, #376]	; 0x178
				uint16_t y2 = y+ySpace;
 8001672:	4b9e      	ldr	r3, [pc, #632]	; (80018ec <main+0x34c>)
 8001674:	881a      	ldrh	r2, [r3, #0]
 8001676:	4b9e      	ldr	r3, [pc, #632]	; (80018f0 <main+0x350>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	4413      	add	r3, r2
 800167c:	f8a7 3176 	strh.w	r3, [r7, #374]	; 0x176
				uint16_t y3 = y+ySpace*2;
 8001680:	4b9b      	ldr	r3, [pc, #620]	; (80018f0 <main+0x350>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	b29a      	uxth	r2, r3
 8001688:	4b98      	ldr	r3, [pc, #608]	; (80018ec <main+0x34c>)
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	4413      	add	r3, r2
 800168e:	f8a7 3174 	strh.w	r3, [r7, #372]	; 0x174
				uint16_t ySpaceData = radius/2;
 8001692:	4b95      	ldr	r3, [pc, #596]	; (80018e8 <main+0x348>)
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	085b      	lsrs	r3, r3, #1
 8001698:	f8a7 3172 	strh.w	r3, [r7, #370]	; 0x172
				uint16_t y1data =  y-ySpaceData;
 800169c:	4b93      	ldr	r3, [pc, #588]	; (80018ec <main+0x34c>)
 800169e:	881a      	ldrh	r2, [r3, #0]
 80016a0:	f8b7 3172 	ldrh.w	r3, [r7, #370]	; 0x172
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	f8a7 3170 	strh.w	r3, [r7, #368]	; 0x170
				uint16_t y2data = y+ySpace-ySpaceData;
 80016aa:	4b90      	ldr	r3, [pc, #576]	; (80018ec <main+0x34c>)
 80016ac:	881a      	ldrh	r2, [r3, #0]
 80016ae:	4b90      	ldr	r3, [pc, #576]	; (80018f0 <main+0x350>)
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	4413      	add	r3, r2
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	f8b7 3172 	ldrh.w	r3, [r7, #370]	; 0x172
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	f8a7 316e 	strh.w	r3, [r7, #366]	; 0x16e
				uint16_t y3data = y+ySpace*2-ySpaceData;
 80016c0:	4b8b      	ldr	r3, [pc, #556]	; (80018f0 <main+0x350>)
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	4b88      	ldr	r3, [pc, #544]	; (80018ec <main+0x34c>)
 80016ca:	881b      	ldrh	r3, [r3, #0]
 80016cc:	4413      	add	r3, r2
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	f8b7 3172 	ldrh.w	r3, [r7, #370]	; 0x172
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	f8a7 316c 	strh.w	r3, [r7, #364]	; 0x16c

				uint16_t size = 2;
 80016da:	2302      	movs	r3, #2
 80016dc:	f8a7 316a 	strh.w	r3, [r7, #362]	; 0x16a


				ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80016e0:	2001      	movs	r0, #1
 80016e2:	f001 fd03 	bl	80030ec <ILI9341_Set_Rotation>
//				sprintf(tempHumidChar,"%.1fC ", temperature);
//				ILI9341_Draw_Text(tempHumidChar, x-10, y/2-ySpaceData, BLACK, size, WHITE);
//				sprintf(tempHumidChar,"%.1%%RH", humidity);
//				ILI9341_Draw_Text(tempHumidChar, maxWidth/2+10, y/2-ySpaceData, BLACK, size, WHITE);

				ILI9341_Draw_Filled_Circle(x, y1, radius, RED);
 80016e6:	4b7f      	ldr	r3, [pc, #508]	; (80018e4 <main+0x344>)
 80016e8:	8818      	ldrh	r0, [r3, #0]
 80016ea:	4b7f      	ldr	r3, [pc, #508]	; (80018e8 <main+0x348>)
 80016ec:	881a      	ldrh	r2, [r3, #0]
 80016ee:	f8b7 1178 	ldrh.w	r1, [r7, #376]	; 0x178
 80016f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016f6:	f001 f94a 	bl	800298e <ILI9341_Draw_Filled_Circle>
				ILI9341_Draw_Filled_Circle(x, y2, radius, GREEN);
 80016fa:	4b7a      	ldr	r3, [pc, #488]	; (80018e4 <main+0x344>)
 80016fc:	8818      	ldrh	r0, [r3, #0]
 80016fe:	4b7a      	ldr	r3, [pc, #488]	; (80018e8 <main+0x348>)
 8001700:	881a      	ldrh	r2, [r3, #0]
 8001702:	f8b7 1176 	ldrh.w	r1, [r7, #374]	; 0x176
 8001706:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800170a:	f001 f940 	bl	800298e <ILI9341_Draw_Filled_Circle>
				ILI9341_Draw_Filled_Circle(x, y3, radius, BLUE);
 800170e:	4b75      	ldr	r3, [pc, #468]	; (80018e4 <main+0x344>)
 8001710:	8818      	ldrh	r0, [r3, #0]
 8001712:	4b75      	ldr	r3, [pc, #468]	; (80018e8 <main+0x348>)
 8001714:	881a      	ldrh	r2, [r3, #0]
 8001716:	f8b7 1174 	ldrh.w	r1, [r7, #372]	; 0x174
 800171a:	231f      	movs	r3, #31
 800171c:	f001 f937 	bl	800298e <ILI9341_Draw_Filled_Circle>

				//Initiate
				//Background
				ILI9341_Draw_Rectangle(xRectangle, y1data, rectangleWidth, radius, (((RED>>11)/2)<<11)& RED);
 8001720:	4b71      	ldr	r3, [pc, #452]	; (80018e8 <main+0x348>)
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	f8b7 217c 	ldrh.w	r2, [r7, #380]	; 0x17c
 8001728:	f8b7 1170 	ldrh.w	r1, [r7, #368]	; 0x170
 800172c:	f8b7 017e 	ldrh.w	r0, [r7, #382]	; 0x17e
 8001730:	f44f 44f0 	mov.w	r4, #30720	; 0x7800
 8001734:	9400      	str	r4, [sp, #0]
 8001736:	f001 ffdf 	bl	80036f8 <ILI9341_Draw_Rectangle>
				ILI9341_Draw_Rectangle(xRectangle, y2data, rectangleWidth, radius, (((GREEN>>5)/2)<<5)& GREEN);
 800173a:	4b6b      	ldr	r3, [pc, #428]	; (80018e8 <main+0x348>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	f8b7 217c 	ldrh.w	r2, [r7, #380]	; 0x17c
 8001742:	f8b7 116e 	ldrh.w	r1, [r7, #366]	; 0x16e
 8001746:	f8b7 017e 	ldrh.w	r0, [r7, #382]	; 0x17e
 800174a:	f44f 7478 	mov.w	r4, #992	; 0x3e0
 800174e:	9400      	str	r4, [sp, #0]
 8001750:	f001 ffd2 	bl	80036f8 <ILI9341_Draw_Rectangle>
				ILI9341_Draw_Rectangle(xRectangle, y3data, rectangleWidth, radius, (BLUE/2)& BLUE);
 8001754:	4b64      	ldr	r3, [pc, #400]	; (80018e8 <main+0x348>)
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	f8b7 217c 	ldrh.w	r2, [r7, #380]	; 0x17c
 800175c:	f8b7 116c 	ldrh.w	r1, [r7, #364]	; 0x16c
 8001760:	f8b7 017e 	ldrh.w	r0, [r7, #382]	; 0x17e
 8001764:	240f      	movs	r4, #15
 8001766:	9400      	str	r4, [sp, #0]
 8001768:	f001 ffc6 	bl	80036f8 <ILI9341_Draw_Rectangle>

				color = redValue + greenValue + blueValue;
 800176c:	4b61      	ldr	r3, [pc, #388]	; (80018f4 <main+0x354>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b61      	ldr	r3, [pc, #388]	; (80018f8 <main+0x358>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	441a      	add	r2, r3
 8001776:	4b61      	ldr	r3, [pc, #388]	; (80018fc <main+0x35c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4413      	add	r3, r2
 800177c:	4a60      	ldr	r2, [pc, #384]	; (8001900 <main+0x360>)
 800177e:	6013      	str	r3, [r2, #0]
				ILI9341_Draw_Filled_Circle(maxWidth/2-20, y/2, radius*1, color);
 8001780:	4b60      	ldr	r3, [pc, #384]	; (8001904 <main+0x364>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	085b      	lsrs	r3, r3, #1
 8001786:	b29b      	uxth	r3, r3
 8001788:	3b14      	subs	r3, #20
 800178a:	b298      	uxth	r0, r3
 800178c:	4b57      	ldr	r3, [pc, #348]	; (80018ec <main+0x34c>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	085b      	lsrs	r3, r3, #1
 8001792:	b299      	uxth	r1, r3
 8001794:	4b54      	ldr	r3, [pc, #336]	; (80018e8 <main+0x348>)
 8001796:	881a      	ldrh	r2, [r3, #0]
 8001798:	4b59      	ldr	r3, [pc, #356]	; (8001900 <main+0x360>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	b29b      	uxth	r3, r3
 800179e:	f001 f8f6 	bl	800298e <ILI9341_Draw_Filled_Circle>

				ILI9341_Draw_Rectangle(xRectangle, y1data, rectangleWidth*redRatio, radius, RED);
 80017a2:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 80017a6:	ee07 3a90 	vmov	s15, r3
 80017aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017ae:	4b56      	ldr	r3, [pc, #344]	; (8001908 <main+0x368>)
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017bc:	ee17 3a90 	vmov	r3, s15
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	4b49      	ldr	r3, [pc, #292]	; (80018e8 <main+0x348>)
 80017c4:	881b      	ldrh	r3, [r3, #0]
 80017c6:	f8b7 1170 	ldrh.w	r1, [r7, #368]	; 0x170
 80017ca:	f8b7 017e 	ldrh.w	r0, [r7, #382]	; 0x17e
 80017ce:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80017d2:	9400      	str	r4, [sp, #0]
 80017d4:	f001 ff90 	bl	80036f8 <ILI9341_Draw_Rectangle>
				ILI9341_Draw_Rectangle(xRectangle, y2data, rectangleWidth*greenRatio, radius, GREEN);
 80017d8:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 80017dc:	ee07 3a90 	vmov	s15, r3
 80017e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e4:	4b49      	ldr	r3, [pc, #292]	; (800190c <main+0x36c>)
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017f2:	ee17 3a90 	vmov	r3, s15
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	4b3b      	ldr	r3, [pc, #236]	; (80018e8 <main+0x348>)
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	f8b7 116e 	ldrh.w	r1, [r7, #366]	; 0x16e
 8001800:	f8b7 017e 	ldrh.w	r0, [r7, #382]	; 0x17e
 8001804:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
 8001808:	9400      	str	r4, [sp, #0]
 800180a:	f001 ff75 	bl	80036f8 <ILI9341_Draw_Rectangle>
				ILI9341_Draw_Rectangle(xRectangle, y3data, rectangleWidth*blueRatio, radius, BLUE);
 800180e:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8001812:	ee07 3a90 	vmov	s15, r3
 8001816:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800181a:	4b3d      	ldr	r3, [pc, #244]	; (8001910 <main+0x370>)
 800181c:	edd3 7a00 	vldr	s15, [r3]
 8001820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001828:	ee17 3a90 	vmov	r3, s15
 800182c:	b29a      	uxth	r2, r3
 800182e:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <main+0x348>)
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	f8b7 116c 	ldrh.w	r1, [r7, #364]	; 0x16c
 8001836:	f8b7 017e 	ldrh.w	r0, [r7, #382]	; 0x17e
 800183a:	241f      	movs	r4, #31
 800183c:	9400      	str	r4, [sp, #0]
 800183e:	f001 ff5b 	bl	80036f8 <ILI9341_Draw_Rectangle>

				//Color Percentage
				char percentage[30];
				sprintf(percentage,"%d%%   ", (int)(redRatio*100));
 8001842:	4b31      	ldr	r3, [pc, #196]	; (8001908 <main+0x368>)
 8001844:	edd3 7a00 	vldr	s15, [r3]
 8001848:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001918 <main+0x378>
 800184c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001850:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001854:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001858:	ee17 2a90 	vmov	r2, s15
 800185c:	492d      	ldr	r1, [pc, #180]	; (8001914 <main+0x374>)
 800185e:	4618      	mov	r0, r3
 8001860:	f007 f82a 	bl	80088b8 <siprintf>
				ILI9341_Draw_Text(percentage, xValue, y1data, BLACK, size, WHITE);
 8001864:	f8b7 317a 	ldrh.w	r3, [r7, #378]	; 0x17a
 8001868:	b2d9      	uxtb	r1, r3
 800186a:	f8b7 3170 	ldrh.w	r3, [r7, #368]	; 0x170
 800186e:	b2da      	uxtb	r2, r3
 8001870:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8001874:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001878:	9301      	str	r3, [sp, #4]
 800187a:	f8b7 316a 	ldrh.w	r3, [r7, #362]	; 0x16a
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	2300      	movs	r3, #0
 8001882:	f001 f9a9 	bl	8002bd8 <ILI9341_Draw_Text>
				sprintf(percentage,"%d%%   ", (int)(greenRatio*100));
 8001886:	4b21      	ldr	r3, [pc, #132]	; (800190c <main+0x36c>)
 8001888:	edd3 7a00 	vldr	s15, [r3]
 800188c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001918 <main+0x378>
 8001890:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001894:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001898:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800189c:	ee17 2a90 	vmov	r2, s15
 80018a0:	491c      	ldr	r1, [pc, #112]	; (8001914 <main+0x374>)
 80018a2:	4618      	mov	r0, r3
 80018a4:	f007 f808 	bl	80088b8 <siprintf>
				ILI9341_Draw_Text(percentage, xValue, y2data, BLACK, size, WHITE);
 80018a8:	f8b7 317a 	ldrh.w	r3, [r7, #378]	; 0x17a
 80018ac:	b2d9      	uxtb	r1, r3
 80018ae:	f8b7 316e 	ldrh.w	r3, [r7, #366]	; 0x16e
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 80018b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	f8b7 316a 	ldrh.w	r3, [r7, #362]	; 0x16a
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	2300      	movs	r3, #0
 80018c6:	f001 f987 	bl	8002bd8 <ILI9341_Draw_Text>
				sprintf(percentage,"%d%%   ", (int)(blueRatio*100));
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <main+0x370>)
 80018cc:	edd3 7a00 	vldr	s15, [r3]
 80018d0:	e024      	b.n	800191c <main+0x37c>
 80018d2:	bf00      	nop
 80018d4:	20000284 	.word	0x20000284
 80018d8:	41f00000 	.word	0x41f00000
 80018dc:	42480000 	.word	0x42480000
 80018e0:	2000023c 	.word	0x2000023c
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000002 	.word	0x20000002
 80018ec:	20000004 	.word	0x20000004
 80018f0:	20000006 	.word	0x20000006
 80018f4:	20000214 	.word	0x20000214
 80018f8:	20000218 	.word	0x20000218
 80018fc:	2000021c 	.word	0x2000021c
 8001900:	20000210 	.word	0x20000210
 8001904:	20000008 	.word	0x20000008
 8001908:	20000220 	.word	0x20000220
 800190c:	20000224 	.word	0x20000224
 8001910:	20000228 	.word	0x20000228
 8001914:	0800c49c 	.word	0x0800c49c
 8001918:	42c80000 	.word	0x42c80000
 800191c:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8001918 <main+0x378>
 8001920:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001924:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001928:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800192c:	ee17 2a90 	vmov	r2, s15
 8001930:	4987      	ldr	r1, [pc, #540]	; (8001b50 <main+0x5b0>)
 8001932:	4618      	mov	r0, r3
 8001934:	f006 ffc0 	bl	80088b8 <siprintf>
				ILI9341_Draw_Text(percentage, xValue, y3data, BLACK, size, WHITE);
 8001938:	f8b7 317a 	ldrh.w	r3, [r7, #378]	; 0x17a
 800193c:	b2d9      	uxtb	r1, r3
 800193e:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8001942:	b2da      	uxtb	r2, r3
 8001944:	f107 00c4 	add.w	r0, r7, #196	; 0xc4
 8001948:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800194c:	9301      	str	r3, [sp, #4]
 800194e:	f8b7 316a 	ldrh.w	r3, [r7, #362]	; 0x16a
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	2300      	movs	r3, #0
 8001956:	f001 f93f 	bl	8002bd8 <ILI9341_Draw_Text>


				while(1){

					ADC_PWM_Temperature();
 800195a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800195e:	469c      	mov	ip, r3
 8001960:	f000 fba2 	bl	80020a8 <ADC_PWM_Temperature.10692>

					ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001964:	2000      	movs	r0, #0
 8001966:	f001 fbc1 	bl	80030ec <ILI9341_Set_Rotation>
					if(TP_Touchpad_Pressed())
 800196a:	f002 f85b 	bl	8003a24 <TP_Touchpad_Pressed>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	f000 821a 	beq.w	8001daa <main+0x80a>
					{

						uint16_t x_pos = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	f8a7 3168 	strh.w	r3, [r7, #360]	; 0x168
						uint16_t y_pos = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	f8a7 3166 	strh.w	r3, [r7, #358]	; 0x166

						//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_SET);

						uint16_t position_array[2];

						if(TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 8001982:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001986:	4618      	mov	r0, r3
 8001988:	f001 ff76 	bl	8003878 <TP_Read_Coordinates>
 800198c:	4603      	mov	r3, r0
 800198e:	2b01      	cmp	r3, #1
 8001990:	f040 820b 	bne.w	8001daa <main+0x80a>
						{
							x_pos = position_array[0];
 8001994:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8001998:	f8a7 3168 	strh.w	r3, [r7, #360]	; 0x168
							y_pos = position_array[1];
 800199c:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 80019a0:	f8a7 3166 	strh.w	r3, [r7, #358]	; 0x166
							//ILI9341_Draw_Filled_Circle(x_pos, y_pos, 2, BLACK);


							if(x_pos > 150-radius && x_pos < 150+radius && y_pos > 60-radius && y_pos < 60+radius){
 80019a4:	f8b7 2168 	ldrh.w	r2, [r7, #360]	; 0x168
 80019a8:	4b6a      	ldr	r3, [pc, #424]	; (8001b54 <main+0x5b4>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dd31      	ble.n	8001a18 <main+0x478>
 80019b4:	4b67      	ldr	r3, [pc, #412]	; (8001b54 <main+0x5b4>)
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	f103 0295 	add.w	r2, r3, #149	; 0x95
 80019bc:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 80019c0:	429a      	cmp	r2, r3
 80019c2:	db29      	blt.n	8001a18 <main+0x478>
 80019c4:	f8b7 2166 	ldrh.w	r2, [r7, #358]	; 0x166
 80019c8:	4b62      	ldr	r3, [pc, #392]	; (8001b54 <main+0x5b4>)
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 80019d0:	429a      	cmp	r2, r3
 80019d2:	dd21      	ble.n	8001a18 <main+0x478>
 80019d4:	4b5f      	ldr	r3, [pc, #380]	; (8001b54 <main+0x5b4>)
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	f103 023b 	add.w	r2, r3, #59	; 0x3b
 80019dc:	f8b7 3166 	ldrh.w	r3, [r7, #358]	; 0x166
 80019e0:	429a      	cmp	r2, r3
 80019e2:	db19      	blt.n	8001a18 <main+0x478>
								redValue +=(((RED>>11)/10)<<11)& RED;
 80019e4:	4b5c      	ldr	r3, [pc, #368]	; (8001b58 <main+0x5b8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 80019ec:	4a5a      	ldr	r2, [pc, #360]	; (8001b58 <main+0x5b8>)
 80019ee:	6013      	str	r3, [r2, #0]
								redRatio += 0.1;
 80019f0:	4b5a      	ldr	r3, [pc, #360]	; (8001b5c <main+0x5bc>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fdb7 	bl	8000568 <__aeabi_f2d>
 80019fa:	a353      	add	r3, pc, #332	; (adr r3, 8001b48 <main+0x5a8>)
 80019fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a00:	f7fe fc54 	bl	80002ac <__adddf3>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f7ff f8fc 	bl	8000c08 <__aeabi_d2f>
 8001a10:	4603      	mov	r3, r0
 8001a12:	4a52      	ldr	r2, [pc, #328]	; (8001b5c <main+0x5bc>)
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e0ab      	b.n	8001b70 <main+0x5d0>

							}else if(x_pos > 90-radius && x_pos < 90+radius && y_pos > 60-radius && y_pos < 60+radius){
 8001a18:	f8b7 2168 	ldrh.w	r2, [r7, #360]	; 0x168
 8001a1c:	4b4d      	ldr	r3, [pc, #308]	; (8001b54 <main+0x5b4>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8001a24:	429a      	cmp	r2, r3
 8001a26:	dd30      	ble.n	8001a8a <main+0x4ea>
 8001a28:	4b4a      	ldr	r3, [pc, #296]	; (8001b54 <main+0x5b4>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	f103 0259 	add.w	r2, r3, #89	; 0x59
 8001a30:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8001a34:	429a      	cmp	r2, r3
 8001a36:	db28      	blt.n	8001a8a <main+0x4ea>
 8001a38:	f8b7 2166 	ldrh.w	r2, [r7, #358]	; 0x166
 8001a3c:	4b45      	ldr	r3, [pc, #276]	; (8001b54 <main+0x5b4>)
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8001a44:	429a      	cmp	r2, r3
 8001a46:	dd20      	ble.n	8001a8a <main+0x4ea>
 8001a48:	4b42      	ldr	r3, [pc, #264]	; (8001b54 <main+0x5b4>)
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	f103 023b 	add.w	r2, r3, #59	; 0x3b
 8001a50:	f8b7 3166 	ldrh.w	r3, [r7, #358]	; 0x166
 8001a54:	429a      	cmp	r2, r3
 8001a56:	db18      	blt.n	8001a8a <main+0x4ea>
								greenValue += (((GREEN>>5)/10)<<5)& GREEN;
 8001a58:	4b41      	ldr	r3, [pc, #260]	; (8001b60 <main+0x5c0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	33c0      	adds	r3, #192	; 0xc0
 8001a5e:	4a40      	ldr	r2, [pc, #256]	; (8001b60 <main+0x5c0>)
 8001a60:	6013      	str	r3, [r2, #0]
								greenRatio += 0.1;
 8001a62:	4b40      	ldr	r3, [pc, #256]	; (8001b64 <main+0x5c4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fd7e 	bl	8000568 <__aeabi_f2d>
 8001a6c:	a336      	add	r3, pc, #216	; (adr r3, 8001b48 <main+0x5a8>)
 8001a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a72:	f7fe fc1b 	bl	80002ac <__adddf3>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f7ff f8c3 	bl	8000c08 <__aeabi_d2f>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4a37      	ldr	r2, [pc, #220]	; (8001b64 <main+0x5c4>)
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	e072      	b.n	8001b70 <main+0x5d0>

							}else if(x_pos > 30-radius && x_pos < 30+radius && y_pos > 60-radius && y_pos < 60+radius){
 8001a8a:	f8b7 2168 	ldrh.w	r2, [r7, #360]	; 0x168
 8001a8e:	4b31      	ldr	r3, [pc, #196]	; (8001b54 <main+0x5b4>)
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	f1c3 031e 	rsb	r3, r3, #30
 8001a96:	429a      	cmp	r2, r3
 8001a98:	dd30      	ble.n	8001afc <main+0x55c>
 8001a9a:	4b2e      	ldr	r3, [pc, #184]	; (8001b54 <main+0x5b4>)
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	f103 021d 	add.w	r2, r3, #29
 8001aa2:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	db28      	blt.n	8001afc <main+0x55c>
 8001aaa:	f8b7 2166 	ldrh.w	r2, [r7, #358]	; 0x166
 8001aae:	4b29      	ldr	r3, [pc, #164]	; (8001b54 <main+0x5b4>)
 8001ab0:	881b      	ldrh	r3, [r3, #0]
 8001ab2:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	dd20      	ble.n	8001afc <main+0x55c>
 8001aba:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <main+0x5b4>)
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	f103 023b 	add.w	r2, r3, #59	; 0x3b
 8001ac2:	f8b7 3166 	ldrh.w	r3, [r7, #358]	; 0x166
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	db18      	blt.n	8001afc <main+0x55c>
								blueValue += (BLUE/10)& BLUE;
 8001aca:	4b27      	ldr	r3, [pc, #156]	; (8001b68 <main+0x5c8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	3303      	adds	r3, #3
 8001ad0:	4a25      	ldr	r2, [pc, #148]	; (8001b68 <main+0x5c8>)
 8001ad2:	6013      	str	r3, [r2, #0]
								blueRatio += 0.1;
 8001ad4:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <main+0x5cc>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fd45 	bl	8000568 <__aeabi_f2d>
 8001ade:	a31a      	add	r3, pc, #104	; (adr r3, 8001b48 <main+0x5a8>)
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	f7fe fbe2 	bl	80002ac <__adddf3>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	f7ff f88a 	bl	8000c08 <__aeabi_d2f>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4a1d      	ldr	r2, [pc, #116]	; (8001b6c <main+0x5cc>)
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e039      	b.n	8001b70 <main+0x5d0>


							}else if(x_pos > 188-radius && x_pos < 188+radius && y_pos > 138-radius && y_pos < 138+radius){
 8001afc:	f8b7 2168 	ldrh.w	r2, [r7, #360]	; 0x168
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <main+0x5b4>)
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	f1c3 03bc 	rsb	r3, r3, #188	; 0xbc
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	dd31      	ble.n	8001b70 <main+0x5d0>
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <main+0x5b4>)
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	f103 02bb 	add.w	r2, r3, #187	; 0xbb
 8001b14:	f8b7 3168 	ldrh.w	r3, [r7, #360]	; 0x168
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	db29      	blt.n	8001b70 <main+0x5d0>
 8001b1c:	f8b7 2166 	ldrh.w	r2, [r7, #358]	; 0x166
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <main+0x5b4>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	f1c3 038a 	rsb	r3, r3, #138	; 0x8a
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	dd21      	ble.n	8001b70 <main+0x5d0>
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <main+0x5b4>)
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	f103 0289 	add.w	r2, r3, #137	; 0x89
 8001b34:	f8b7 3166 	ldrh.w	r3, [r7, #358]	; 0x166
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	db19      	blt.n	8001b70 <main+0x5d0>
								mode = 2;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 8001b42:	e571      	b.n	8001628 <main+0x88>
 8001b44:	f3af 8000 	nop.w
 8001b48:	9999999a 	.word	0x9999999a
 8001b4c:	3fb99999 	.word	0x3fb99999
 8001b50:	0800c49c 	.word	0x0800c49c
 8001b54:	20000002 	.word	0x20000002
 8001b58:	20000214 	.word	0x20000214
 8001b5c:	20000220 	.word	0x20000220
 8001b60:	20000218 	.word	0x20000218
 8001b64:	20000224 	.word	0x20000224
 8001b68:	2000021c 	.word	0x2000021c
 8001b6c:	20000228 	.word	0x20000228
								break;
							}

							ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001b70:	2001      	movs	r0, #1
 8001b72:	f001 fabb 	bl	80030ec <ILI9341_Set_Rotation>
							if(redValue >  RED){
 8001b76:	4bb6      	ldr	r3, [pc, #728]	; (8001e50 <main+0x8b0>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 8001b7e:	d913      	bls.n	8001ba8 <main+0x608>
								redValue = 0;
 8001b80:	4bb3      	ldr	r3, [pc, #716]	; (8001e50 <main+0x8b0>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
								redRatio = 0;
 8001b86:	4bb3      	ldr	r3, [pc, #716]	; (8001e54 <main+0x8b4>)
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]

								ILI9341_Draw_Rectangle(xRectangle, y1data, rectangleWidth, radius, (((RED>>11)/2)<<11)& RED);
 8001b8e:	4bb2      	ldr	r3, [pc, #712]	; (8001e58 <main+0x8b8>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	f8b7 217c 	ldrh.w	r2, [r7, #380]	; 0x17c
 8001b96:	f8b7 1170 	ldrh.w	r1, [r7, #368]	; 0x170
 8001b9a:	f8b7 017e 	ldrh.w	r0, [r7, #382]	; 0x17e
 8001b9e:	f44f 44f0 	mov.w	r4, #30720	; 0x7800
 8001ba2:	9400      	str	r4, [sp, #0]
 8001ba4:	f001 fda8 	bl	80036f8 <ILI9341_Draw_Rectangle>
							}
							if(greenValue > GREEN){
 8001ba8:	4bac      	ldr	r3, [pc, #688]	; (8001e5c <main+0x8bc>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
 8001bb0:	d913      	bls.n	8001bda <main+0x63a>
								greenValue = 0;
 8001bb2:	4baa      	ldr	r3, [pc, #680]	; (8001e5c <main+0x8bc>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
								greenRatio = 0;
 8001bb8:	4ba9      	ldr	r3, [pc, #676]	; (8001e60 <main+0x8c0>)
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
								ILI9341_Draw_Rectangle(xRectangle, y2data, rectangleWidth, radius, (((GREEN>>5)/2)<<5)& GREEN);
 8001bc0:	4ba5      	ldr	r3, [pc, #660]	; (8001e58 <main+0x8b8>)
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	f8b7 217c 	ldrh.w	r2, [r7, #380]	; 0x17c
 8001bc8:	f8b7 116e 	ldrh.w	r1, [r7, #366]	; 0x16e
 8001bcc:	f8b7 017e 	ldrh.w	r0, [r7, #382]	; 0x17e
 8001bd0:	f44f 7478 	mov.w	r4, #992	; 0x3e0
 8001bd4:	9400      	str	r4, [sp, #0]
 8001bd6:	f001 fd8f 	bl	80036f8 <ILI9341_Draw_Rectangle>
							}
							if(blueValue > BLUE){
 8001bda:	4ba2      	ldr	r3, [pc, #648]	; (8001e64 <main+0x8c4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b1f      	cmp	r3, #31
 8001be0:	d912      	bls.n	8001c08 <main+0x668>
								blueValue = 0;
 8001be2:	4ba0      	ldr	r3, [pc, #640]	; (8001e64 <main+0x8c4>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
								blueRatio = 0;
 8001be8:	4b9f      	ldr	r3, [pc, #636]	; (8001e68 <main+0x8c8>)
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
								ILI9341_Draw_Rectangle(xRectangle, y3data, rectangleWidth, radius, (BLUE/2)& BLUE);
 8001bf0:	4b99      	ldr	r3, [pc, #612]	; (8001e58 <main+0x8b8>)
 8001bf2:	881b      	ldrh	r3, [r3, #0]
 8001bf4:	f8b7 217c 	ldrh.w	r2, [r7, #380]	; 0x17c
 8001bf8:	f8b7 116c 	ldrh.w	r1, [r7, #364]	; 0x16c
 8001bfc:	f8b7 017e 	ldrh.w	r0, [r7, #382]	; 0x17e
 8001c00:	240f      	movs	r4, #15
 8001c02:	9400      	str	r4, [sp, #0]
 8001c04:	f001 fd78 	bl	80036f8 <ILI9341_Draw_Rectangle>
	//					ILI9341_Draw_Text(counter_buff, 10, 120, BLACK, 2, WHITE);
						//ILI9341_Set_Rotation(SCREEN_VERTICAL_1);

							//All Update when pressed

							color = redValue + greenValue + blueValue;
 8001c08:	4b91      	ldr	r3, [pc, #580]	; (8001e50 <main+0x8b0>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b93      	ldr	r3, [pc, #588]	; (8001e5c <main+0x8bc>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	441a      	add	r2, r3
 8001c12:	4b94      	ldr	r3, [pc, #592]	; (8001e64 <main+0x8c4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	4a94      	ldr	r2, [pc, #592]	; (8001e6c <main+0x8cc>)
 8001c1a:	6013      	str	r3, [r2, #0]
							ILI9341_Draw_Filled_Circle(maxWidth/2-20, y/2, radius*1, color);
 8001c1c:	4b94      	ldr	r3, [pc, #592]	; (8001e70 <main+0x8d0>)
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	085b      	lsrs	r3, r3, #1
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	3b14      	subs	r3, #20
 8001c26:	b298      	uxth	r0, r3
 8001c28:	4b92      	ldr	r3, [pc, #584]	; (8001e74 <main+0x8d4>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
 8001c2c:	085b      	lsrs	r3, r3, #1
 8001c2e:	b299      	uxth	r1, r3
 8001c30:	4b89      	ldr	r3, [pc, #548]	; (8001e58 <main+0x8b8>)
 8001c32:	881a      	ldrh	r2, [r3, #0]
 8001c34:	4b8d      	ldr	r3, [pc, #564]	; (8001e6c <main+0x8cc>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	f000 fea8 	bl	800298e <ILI9341_Draw_Filled_Circle>

							ILI9341_Draw_Rectangle(xRectangle, y1data, rectangleWidth*redRatio, radius, RED);
 8001c3e:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8001c42:	ee07 3a90 	vmov	s15, r3
 8001c46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c4a:	4b82      	ldr	r3, [pc, #520]	; (8001e54 <main+0x8b4>)
 8001c4c:	edd3 7a00 	vldr	s15, [r3]
 8001c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c58:	ee17 3a90 	vmov	r3, s15
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	4b7e      	ldr	r3, [pc, #504]	; (8001e58 <main+0x8b8>)
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	f8b7 1170 	ldrh.w	r1, [r7, #368]	; 0x170
 8001c66:	f8b7 017e 	ldrh.w	r0, [r7, #382]	; 0x17e
 8001c6a:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8001c6e:	9400      	str	r4, [sp, #0]
 8001c70:	f001 fd42 	bl	80036f8 <ILI9341_Draw_Rectangle>
							ILI9341_Draw_Rectangle(xRectangle, y2data, rectangleWidth*greenRatio, radius, GREEN);
 8001c74:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8001c78:	ee07 3a90 	vmov	s15, r3
 8001c7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c80:	4b77      	ldr	r3, [pc, #476]	; (8001e60 <main+0x8c0>)
 8001c82:	edd3 7a00 	vldr	s15, [r3]
 8001c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c8e:	ee17 3a90 	vmov	r3, s15
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	4b70      	ldr	r3, [pc, #448]	; (8001e58 <main+0x8b8>)
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	f8b7 116e 	ldrh.w	r1, [r7, #366]	; 0x16e
 8001c9c:	f8b7 017e 	ldrh.w	r0, [r7, #382]	; 0x17e
 8001ca0:	f44f 64fc 	mov.w	r4, #2016	; 0x7e0
 8001ca4:	9400      	str	r4, [sp, #0]
 8001ca6:	f001 fd27 	bl	80036f8 <ILI9341_Draw_Rectangle>
							ILI9341_Draw_Rectangle(xRectangle, y3data, rectangleWidth*blueRatio, radius, BLUE);
 8001caa:	f8b7 317c 	ldrh.w	r3, [r7, #380]	; 0x17c
 8001cae:	ee07 3a90 	vmov	s15, r3
 8001cb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cb6:	4b6c      	ldr	r3, [pc, #432]	; (8001e68 <main+0x8c8>)
 8001cb8:	edd3 7a00 	vldr	s15, [r3]
 8001cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cc4:	ee17 3a90 	vmov	r3, s15
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	4b63      	ldr	r3, [pc, #396]	; (8001e58 <main+0x8b8>)
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	f8b7 116c 	ldrh.w	r1, [r7, #364]	; 0x16c
 8001cd2:	f8b7 017e 	ldrh.w	r0, [r7, #382]	; 0x17e
 8001cd6:	241f      	movs	r4, #31
 8001cd8:	9400      	str	r4, [sp, #0]
 8001cda:	f001 fd0d 	bl	80036f8 <ILI9341_Draw_Rectangle>

							//Color Percentage
							char percentage[30];
							sprintf(percentage,"%d%%   ", (int)(redRatio*100));
 8001cde:	4b5d      	ldr	r3, [pc, #372]	; (8001e54 <main+0x8b4>)
 8001ce0:	edd3 7a00 	vldr	s15, [r3]
 8001ce4:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8001e78 <main+0x8d8>
 8001ce8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cf0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001cf4:	ee17 2a90 	vmov	r2, s15
 8001cf8:	4960      	ldr	r1, [pc, #384]	; (8001e7c <main+0x8dc>)
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f006 fddc 	bl	80088b8 <siprintf>
							ILI9341_Draw_Text(percentage, xValue, y1data, BLACK, size, WHITE);
 8001d00:	f8b7 317a 	ldrh.w	r3, [r7, #378]	; 0x17a
 8001d04:	b2d9      	uxtb	r1, r3
 8001d06:	f8b7 3170 	ldrh.w	r3, [r7, #368]	; 0x170
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8001d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d14:	9301      	str	r3, [sp, #4]
 8001d16:	f8b7 316a 	ldrh.w	r3, [r7, #362]	; 0x16a
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f000 ff5b 	bl	8002bd8 <ILI9341_Draw_Text>
							sprintf(percentage,"%d%%   ", (int)(greenRatio*100));
 8001d22:	4b4f      	ldr	r3, [pc, #316]	; (8001e60 <main+0x8c0>)
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001e78 <main+0x8d8>
 8001d2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d34:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d38:	ee17 2a90 	vmov	r2, s15
 8001d3c:	494f      	ldr	r1, [pc, #316]	; (8001e7c <main+0x8dc>)
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f006 fdba 	bl	80088b8 <siprintf>
							ILI9341_Draw_Text(percentage, xValue, y2data, BLACK, size, WHITE);
 8001d44:	f8b7 317a 	ldrh.w	r3, [r7, #378]	; 0x17a
 8001d48:	b2d9      	uxtb	r1, r3
 8001d4a:	f8b7 316e 	ldrh.w	r3, [r7, #366]	; 0x16e
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8001d54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d58:	9301      	str	r3, [sp, #4]
 8001d5a:	f8b7 316a 	ldrh.w	r3, [r7, #362]	; 0x16a
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	2300      	movs	r3, #0
 8001d62:	f000 ff39 	bl	8002bd8 <ILI9341_Draw_Text>
							sprintf(percentage,"%d%%   ", (int)(blueRatio*100));
 8001d66:	4b40      	ldr	r3, [pc, #256]	; (8001e68 <main+0x8c8>)
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001e78 <main+0x8d8>
 8001d70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d78:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d7c:	ee17 2a90 	vmov	r2, s15
 8001d80:	493e      	ldr	r1, [pc, #248]	; (8001e7c <main+0x8dc>)
 8001d82:	4618      	mov	r0, r3
 8001d84:	f006 fd98 	bl	80088b8 <siprintf>
							ILI9341_Draw_Text(percentage, xValue, y3data, BLACK, size, WHITE);
 8001d88:	f8b7 317a 	ldrh.w	r3, [r7, #378]	; 0x17a
 8001d8c:	b2d9      	uxtb	r1, r3
 8001d8e:	f8b7 316c 	ldrh.w	r3, [r7, #364]	; 0x16c
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8001d98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d9c:	9301      	str	r3, [sp, #4]
 8001d9e:	f8b7 316a 	ldrh.w	r3, [r7, #362]	; 0x16a
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	2300      	movs	r3, #0
 8001da6:	f000 ff17 	bl	8002bd8 <ILI9341_Draw_Text>

						}
					}

					ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001daa:	2001      	movs	r0, #1
 8001dac:	f001 f99e 	bl	80030ec <ILI9341_Set_Rotation>
					//All Update when not pressed
					char tempChar[50];
					sprintf(tempChar,"%.1fC", temperature);
 8001db0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fbd7 	bl	8000568 <__aeabi_f2d>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	f107 0014 	add.w	r0, r7, #20
 8001dc2:	492f      	ldr	r1, [pc, #188]	; (8001e80 <main+0x8e0>)
 8001dc4:	f006 fd78 	bl	80088b8 <siprintf>
					ILI9341_Draw_Text(tempChar, x-10, y/2-ySpaceData, BLACK, size, WHITE);
 8001dc8:	4b2e      	ldr	r3, [pc, #184]	; (8001e84 <main+0x8e4>)
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	3b0a      	subs	r3, #10
 8001dd0:	b2d9      	uxtb	r1, r3
 8001dd2:	4b28      	ldr	r3, [pc, #160]	; (8001e74 <main+0x8d4>)
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	085b      	lsrs	r3, r3, #1
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	f8b7 3172 	ldrh.w	r3, [r7, #370]	; 0x172
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	f107 0014 	add.w	r0, r7, #20
 8001dea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	f8b7 316a 	ldrh.w	r3, [r7, #362]	; 0x16a
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2300      	movs	r3, #0
 8001df8:	f000 feee 	bl	8002bd8 <ILI9341_Draw_Text>
					char humidChar[50];
					sprintf(humidChar,"%.1f%%RH", humidity);
 8001dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fbb1 	bl	8000568 <__aeabi_f2d>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001e0e:	491e      	ldr	r1, [pc, #120]	; (8001e88 <main+0x8e8>)
 8001e10:	f006 fd52 	bl	80088b8 <siprintf>
					ILI9341_Draw_Text(humidChar, maxWidth/2+10, y/2-ySpaceData, BLACK, size, WHITE);
 8001e14:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <main+0x8d0>)
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	085b      	lsrs	r3, r3, #1
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	330a      	adds	r3, #10
 8001e20:	b2d9      	uxtb	r1, r3
 8001e22:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <main+0x8d4>)
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	085b      	lsrs	r3, r3, #1
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	f8b7 3172 	ldrh.w	r3, [r7, #370]	; 0x172
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8001e3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e3e:	9301      	str	r3, [sp, #4]
 8001e40:	f8b7 316a 	ldrh.w	r3, [r7, #362]	; 0x16a
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	2300      	movs	r3, #0
 8001e48:	f000 fec6 	bl	8002bd8 <ILI9341_Draw_Text>
				while(1){
 8001e4c:	e585      	b.n	800195a <main+0x3ba>
 8001e4e:	bf00      	nop
 8001e50:	20000214 	.word	0x20000214
 8001e54:	20000220 	.word	0x20000220
 8001e58:	20000002 	.word	0x20000002
 8001e5c:	20000218 	.word	0x20000218
 8001e60:	20000224 	.word	0x20000224
 8001e64:	2000021c 	.word	0x2000021c
 8001e68:	20000228 	.word	0x20000228
 8001e6c:	20000210 	.word	0x20000210
 8001e70:	20000008 	.word	0x20000008
 8001e74:	20000004 	.word	0x20000004
 8001e78:	42c80000 	.word	0x42c80000
 8001e7c:	0800c49c 	.word	0x0800c49c
 8001e80:	0800c4a4 	.word	0x0800c4a4
 8001e84:	20000000 	.word	0x20000000
 8001e88:	0800c4ac 	.word	0x0800c4ac
				}



	 		}else if(mode ==2){
 8001e8c:	f897 3197 	ldrb.w	r3, [r7, #407]	; 0x197
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	f47f abc9 	bne.w	8001628 <main+0x88>


				ILI9341_Fill_Screen(WHITE);
 8001e96:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e9a:	f001 fb2d 	bl	80034f8 <ILI9341_Fill_Screen>
				ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001e9e:	2001      	movs	r0, #1
 8001ea0:	f001 f924 	bl	80030ec <ILI9341_Set_Rotation>

				static uint16_t ySpace = 30;
				static uint16_t y = 60;
				static uint16_t maxWidth = 320;
				uint16_t x1 = maxWidth/2-50;
 8001ea4:	4b77      	ldr	r3, [pc, #476]	; (8002084 <main+0xae4>)
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	085b      	lsrs	r3, r3, #1
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	3b32      	subs	r3, #50	; 0x32
 8001eae:	f8a7 3186 	strh.w	r3, [r7, #390]	; 0x186
				uint16_t size = 2;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	f8a7 3184 	strh.w	r3, [r7, #388]	; 0x184

				ILI9341_Draw_Image((const char*)pop, SCREEN_VERTICAL_2);
 8001eb8:	2102      	movs	r1, #2
 8001eba:	4873      	ldr	r0, [pc, #460]	; (8002088 <main+0xae8>)
 8001ebc:	f000 febc 	bl	8002c38 <ILI9341_Draw_Image>

				ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	f001 f913 	bl	80030ec <ILI9341_Set_Rotation>

				char text[30];
				sprintf(text,"Group A2");
 8001ec6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001eca:	4970      	ldr	r1, [pc, #448]	; (800208c <main+0xaec>)
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f006 fcf3 	bl	80088b8 <siprintf>
				ILI9341_Draw_Text(text, x1, y, color, size, WHITE);
 8001ed2:	f8b7 3186 	ldrh.w	r3, [r7, #390]	; 0x186
 8001ed6:	b2d9      	uxtb	r1, r3
 8001ed8:	4b6d      	ldr	r3, [pc, #436]	; (8002090 <main+0xaf0>)
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4b6d      	ldr	r3, [pc, #436]	; (8002094 <main+0xaf4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	b29c      	uxth	r4, r3
 8001ee4:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8001ee8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eec:	9301      	str	r3, [sp, #4]
 8001eee:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	4623      	mov	r3, r4
 8001ef6:	f000 fe6f 	bl	8002bd8 <ILI9341_Draw_Text>
				sprintf(text,"Sirawit");
 8001efa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001efe:	4966      	ldr	r1, [pc, #408]	; (8002098 <main+0xaf8>)
 8001f00:	4618      	mov	r0, r3
 8001f02:	f006 fcd9 	bl	80088b8 <siprintf>
				ILI9341_Draw_Text(text, x1, y+ySpace, color, size, WHITE);
 8001f06:	f8b7 3186 	ldrh.w	r3, [r7, #390]	; 0x186
 8001f0a:	b2d9      	uxtb	r1, r3
 8001f0c:	4b60      	ldr	r3, [pc, #384]	; (8002090 <main+0xaf0>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4b62      	ldr	r3, [pc, #392]	; (800209c <main+0xafc>)
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	4413      	add	r3, r2
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	4b5d      	ldr	r3, [pc, #372]	; (8002094 <main+0xaf4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	b29c      	uxth	r4, r3
 8001f22:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8001f26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f2a:	9301      	str	r3, [sp, #4]
 8001f2c:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	4623      	mov	r3, r4
 8001f34:	f000 fe50 	bl	8002bd8 <ILI9341_Draw_Text>
				sprintf(text,"Sukwattanavit");
 8001f38:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f3c:	4958      	ldr	r1, [pc, #352]	; (80020a0 <main+0xb00>)
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f006 fcba 	bl	80088b8 <siprintf>
				ILI9341_Draw_Text(text, x1, y+ySpace*2, color, size, WHITE);
 8001f44:	f8b7 3186 	ldrh.w	r3, [r7, #390]	; 0x186
 8001f48:	b2d9      	uxtb	r1, r3
 8001f4a:	4b51      	ldr	r3, [pc, #324]	; (8002090 <main+0xaf0>)
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	4b52      	ldr	r3, [pc, #328]	; (800209c <main+0xafc>)
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	4b4d      	ldr	r3, [pc, #308]	; (8002094 <main+0xaf4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	b29c      	uxth	r4, r3
 8001f64:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8001f68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	4623      	mov	r3, r4
 8001f76:	f000 fe2f 	bl	8002bd8 <ILI9341_Draw_Text>
				sprintf(text,"62010948");
 8001f7a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f7e:	4949      	ldr	r1, [pc, #292]	; (80020a4 <main+0xb04>)
 8001f80:	4618      	mov	r0, r3
 8001f82:	f006 fc99 	bl	80088b8 <siprintf>
				ILI9341_Draw_Text(text, x1, y+ySpace*3, color, size, WHITE);
 8001f86:	f8b7 3186 	ldrh.w	r3, [r7, #390]	; 0x186
 8001f8a:	b2d9      	uxtb	r1, r3
 8001f8c:	4b40      	ldr	r3, [pc, #256]	; (8002090 <main+0xaf0>)
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4b42      	ldr	r3, [pc, #264]	; (800209c <main+0xafc>)
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	4618      	mov	r0, r3
 8001f9a:	0040      	lsls	r0, r0, #1
 8001f9c:	4403      	add	r3, r0
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	4b3b      	ldr	r3, [pc, #236]	; (8002094 <main+0xaf4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	b29c      	uxth	r4, r3
 8001faa:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8001fae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fb2:	9301      	str	r3, [sp, #4]
 8001fb4:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	4623      	mov	r3, r4
 8001fbc:	f000 fe0c 	bl	8002bd8 <ILI9341_Draw_Text>


				while(1){

					ADC_PWM_Temperature();
 8001fc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001fc4:	469c      	mov	ip, r3
 8001fc6:	f000 f86f 	bl	80020a8 <ADC_PWM_Temperature.10692>

					ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001fca:	2000      	movs	r0, #0
 8001fcc:	f001 f88e 	bl	80030ec <ILI9341_Set_Rotation>
					if(TP_Touchpad_Pressed())
 8001fd0:	f001 fd28 	bl	8003a24 <TP_Touchpad_Pressed>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d031      	beq.n	800203e <main+0xa9e>
					{

						uint16_t x_pos = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8a7 3182 	strh.w	r3, [r7, #386]	; 0x182
						uint16_t y_pos = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f8a7 3180 	strh.w	r3, [r7, #384]	; 0x180

						//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_SET);

						uint16_t position_array[2];

						if(TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 8001fe6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001fea:	4618      	mov	r0, r3
 8001fec:	f001 fc44 	bl	8003878 <TP_Read_Coordinates>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d123      	bne.n	800203e <main+0xa9e>
						{
							x_pos = position_array[0];
 8001ff6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	f8a7 3182 	strh.w	r3, [r7, #386]	; 0x182
							y_pos = position_array[1];
 8002000:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002004:	885b      	ldrh	r3, [r3, #2]
 8002006:	f8a7 3180 	strh.w	r3, [r7, #384]	; 0x180
							//ILI9341_Draw_Filled_Circle(x_pos, y_pos, 2, BLACK);


							if(x_pos > 0 && x_pos < 240 && y_pos > 0  && y_pos < maxWidth/2-50){
 800200a:	f8b7 3182 	ldrh.w	r3, [r7, #386]	; 0x182
 800200e:	2b00      	cmp	r3, #0
 8002010:	d015      	beq.n	800203e <main+0xa9e>
 8002012:	f8b7 3182 	ldrh.w	r3, [r7, #386]	; 0x182
 8002016:	2bef      	cmp	r3, #239	; 0xef
 8002018:	d811      	bhi.n	800203e <main+0xa9e>
 800201a:	f8b7 3180 	ldrh.w	r3, [r7, #384]	; 0x180
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00d      	beq.n	800203e <main+0xa9e>
 8002022:	f8b7 2180 	ldrh.w	r2, [r7, #384]	; 0x180
 8002026:	4b17      	ldr	r3, [pc, #92]	; (8002084 <main+0xae4>)
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	085b      	lsrs	r3, r3, #1
 800202c:	b29b      	uxth	r3, r3
 800202e:	3b32      	subs	r3, #50	; 0x32
 8002030:	429a      	cmp	r2, r3
 8002032:	da04      	bge.n	800203e <main+0xa9e>
								mode = 1;
 8002034:	2301      	movs	r3, #1
 8002036:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
 800203a:	f7ff baf5 	b.w	8001628 <main+0x88>
	//						ILI9341_Draw_Text(counter_buff, 10, 120, BLACK, 2, WHITE);
						}
					}


			  	  	now = HAL_GetTick();
 800203e:	f001 fe15 	bl	8003c6c <HAL_GetTick>
 8002042:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
			  	  	if (now - prenow >= 1000){
 8002046:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 800204a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002054:	d308      	bcc.n	8002068 <main+0xac8>
						sec++;
 8002056:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800205a:	3301      	adds	r3, #1
 800205c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
						prenow = now;
 8002060:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002064:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
			  	  	}

			  	  	if(sec == 5){
 8002068:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800206c:	2b05      	cmp	r3, #5
 800206e:	d1a7      	bne.n	8001fc0 <main+0xa20>
			  	  		sec = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
			  	  		mode = 1;
 8002076:	2301      	movs	r3, #1
 8002078:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197
			  	  		break;
 800207c:	bf00      	nop
	 		if(mode == 1){
 800207e:	f7ff bad3 	b.w	8001628 <main+0x88>
 8002082:	bf00      	nop
 8002084:	2000000a 	.word	0x2000000a
 8002088:	0800c4ec 	.word	0x0800c4ec
 800208c:	0800c4b8 	.word	0x0800c4b8
 8002090:	2000000c 	.word	0x2000000c
 8002094:	20000210 	.word	0x20000210
 8002098:	0800c4c4 	.word	0x0800c4c4
 800209c:	2000000e 	.word	0x2000000e
 80020a0:	0800c4cc 	.word	0x0800c4cc
 80020a4:	0800c4dc 	.word	0x0800c4dc

080020a8 <ADC_PWM_Temperature.10692>:
  void ADC_PWM_Temperature (){
 80020a8:	b590      	push	{r4, r7, lr}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4664      	mov	r4, ip
 80020b0:	f8c7 c004 	str.w	ip, [r7, #4]
  		  while(HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK){}
 80020b4:	bf00      	nop
 80020b6:	2164      	movs	r1, #100	; 0x64
 80020b8:	4829      	ldr	r0, [pc, #164]	; (8002160 <ADC_PWM_Temperature.10692+0xb8>)
 80020ba:	f001 ff1d 	bl	8003ef8 <HAL_ADC_PollForConversion>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f8      	bne.n	80020b6 <ADC_PWM_Temperature.10692+0xe>
  		  adc_val = HAL_ADC_GetValue(&hadc1);
 80020c4:	4826      	ldr	r0, [pc, #152]	; (8002160 <ADC_PWM_Temperature.10692+0xb8>)
 80020c6:	f001 ffa2 	bl	800400e <HAL_ADC_GetValue>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4a25      	ldr	r2, [pc, #148]	; (8002164 <ADC_PWM_Temperature.10692+0xbc>)
 80020ce:	6013      	str	r3, [r2, #0]
  		  dutyCycleScreen = ((adc_val/4095.0) * 0.8) + 0.2;
 80020d0:	4b24      	ldr	r3, [pc, #144]	; (8002164 <ADC_PWM_Temperature.10692+0xbc>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fa25 	bl	8000524 <__aeabi_ui2d>
 80020da:	a31b      	add	r3, pc, #108	; (adr r3, 8002148 <ADC_PWM_Temperature.10692+0xa0>)
 80020dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e0:	f7fe fbc4 	bl	800086c <__aeabi_ddiv>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4610      	mov	r0, r2
 80020ea:	4619      	mov	r1, r3
 80020ec:	a318      	add	r3, pc, #96	; (adr r3, 8002150 <ADC_PWM_Temperature.10692+0xa8>)
 80020ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f2:	f7fe fa91 	bl	8000618 <__aeabi_dmul>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	4610      	mov	r0, r2
 80020fc:	4619      	mov	r1, r3
 80020fe:	a316      	add	r3, pc, #88	; (adr r3, 8002158 <ADC_PWM_Temperature.10692+0xb0>)
 8002100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002104:	f7fe f8d2 	bl	80002ac <__adddf3>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4610      	mov	r0, r2
 800210e:	4619      	mov	r1, r3
 8002110:	f7fe fd7a 	bl	8000c08 <__aeabi_d2f>
 8002114:	4603      	mov	r3, r0
 8002116:	6023      	str	r3, [r4, #0]
  		  htim2.Instance -> CCR1 = (100-1) * dutyCycleScreen;
 8002118:	edd4 7a00 	vldr	s15, [r4]
 800211c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002168 <ADC_PWM_Temperature.10692+0xc0>
 8002120:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <ADC_PWM_Temperature.10692+0xc4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800212c:	ee17 2a90 	vmov	r2, s15
 8002130:	635a      	str	r2, [r3, #52]	; 0x34
  		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002132:	2100      	movs	r1, #0
 8002134:	480d      	ldr	r0, [pc, #52]	; (800216c <ADC_PWM_Temperature.10692+0xc4>)
 8002136:	f004 fc19 	bl	800696c <HAL_TIM_PWM_Start>
  		TemperatureAndHumid();
 800213a:	46a4      	mov	ip, r4
 800213c:	f7ff f9ce 	bl	80014dc <TemperatureAndHumid.10690>
  	}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	bd90      	pop	{r4, r7, pc}
 8002148:	00000000 	.word	0x00000000
 800214c:	40affe00 	.word	0x40affe00
 8002150:	9999999a 	.word	0x9999999a
 8002154:	3fe99999 	.word	0x3fe99999
 8002158:	9999999a 	.word	0x9999999a
 800215c:	3fc99999 	.word	0x3fc99999
 8002160:	2000023c 	.word	0x2000023c
 8002164:	2000022c 	.word	0x2000022c
 8002168:	42c60000 	.word	0x42c60000
 800216c:	200003dc 	.word	0x200003dc

08002170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b094      	sub	sp, #80	; 0x50
 8002174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002176:	f107 0320 	add.w	r3, r7, #32
 800217a:	2230      	movs	r2, #48	; 0x30
 800217c:	2100      	movs	r1, #0
 800217e:	4618      	mov	r0, r3
 8002180:	f005 fd12 	bl	8007ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002184:	f107 030c 	add.w	r3, r7, #12
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002194:	2300      	movs	r3, #0
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	4b29      	ldr	r3, [pc, #164]	; (8002240 <SystemClock_Config+0xd0>)
 800219a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219c:	4a28      	ldr	r2, [pc, #160]	; (8002240 <SystemClock_Config+0xd0>)
 800219e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a2:	6413      	str	r3, [r2, #64]	; 0x40
 80021a4:	4b26      	ldr	r3, [pc, #152]	; (8002240 <SystemClock_Config+0xd0>)
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80021b0:	2300      	movs	r3, #0
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	4b23      	ldr	r3, [pc, #140]	; (8002244 <SystemClock_Config+0xd4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80021bc:	4a21      	ldr	r2, [pc, #132]	; (8002244 <SystemClock_Config+0xd4>)
 80021be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c2:	6013      	str	r3, [r2, #0]
 80021c4:	4b1f      	ldr	r3, [pc, #124]	; (8002244 <SystemClock_Config+0xd4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021d0:	2302      	movs	r3, #2
 80021d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021d4:	2301      	movs	r3, #1
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021d8:	2310      	movs	r3, #16
 80021da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021dc:	2302      	movs	r3, #2
 80021de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021e0:	2300      	movs	r3, #0
 80021e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021e4:	2308      	movs	r3, #8
 80021e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 80021e8:	2378      	movs	r3, #120	; 0x78
 80021ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021ec:	2302      	movs	r3, #2
 80021ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80021f0:	2305      	movs	r3, #5
 80021f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021f4:	f107 0320 	add.w	r3, r7, #32
 80021f8:	4618      	mov	r0, r3
 80021fa:	f003 fc17 	bl	8005a2c <HAL_RCC_OscConfig>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002204:	f000 f820 	bl	8002248 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002208:	230f      	movs	r3, #15
 800220a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800220c:	2302      	movs	r3, #2
 800220e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002214:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002218:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800221a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800221e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002220:	f107 030c 	add.w	r3, r7, #12
 8002224:	2103      	movs	r1, #3
 8002226:	4618      	mov	r0, r3
 8002228:	f003 fe78 	bl	8005f1c <HAL_RCC_ClockConfig>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002232:	f000 f809 	bl	8002248 <Error_Handler>
  }
}
 8002236:	bf00      	nop
 8002238:	3750      	adds	r7, #80	; 0x50
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40023800 	.word	0x40023800
 8002244:	40007000 	.word	0x40007000

08002248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800224c:	b672      	cpsid	i
}
 800224e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002250:	e7fe      	b.n	8002250 <Error_Handler+0x8>
	...

08002254 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <MX_RNG_Init+0x20>)
 800225a:	4a07      	ldr	r2, [pc, #28]	; (8002278 <MX_RNG_Init+0x24>)
 800225c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800225e:	4805      	ldr	r0, [pc, #20]	; (8002274 <MX_RNG_Init+0x20>)
 8002260:	f004 f82c 	bl	80062bc <HAL_RNG_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800226a:	f7ff ffed 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	2000032c 	.word	0x2000032c
 8002278:	50060800 	.word	0x50060800

0800227c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0b      	ldr	r2, [pc, #44]	; (80022b8 <HAL_RNG_MspInit+0x3c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d10d      	bne.n	80022aa <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <HAL_RNG_MspInit+0x40>)
 8002294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002296:	4a09      	ldr	r2, [pc, #36]	; (80022bc <HAL_RNG_MspInit+0x40>)
 8002298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800229c:	6353      	str	r3, [r2, #52]	; 0x34
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <HAL_RNG_MspInit+0x40>)
 80022a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	50060800 	.word	0x50060800
 80022bc:	40023800 	.word	0x40023800

080022c0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80022c4:	4b17      	ldr	r3, [pc, #92]	; (8002324 <MX_SPI3_Init+0x64>)
 80022c6:	4a18      	ldr	r2, [pc, #96]	; (8002328 <MX_SPI3_Init+0x68>)
 80022c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80022ca:	4b16      	ldr	r3, [pc, #88]	; (8002324 <MX_SPI3_Init+0x64>)
 80022cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <MX_SPI3_Init+0x64>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <MX_SPI3_Init+0x64>)
 80022da:	2200      	movs	r2, #0
 80022dc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <MX_SPI3_Init+0x64>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <MX_SPI3_Init+0x64>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <MX_SPI3_Init+0x64>)
 80022ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022f0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022f2:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <MX_SPI3_Init+0x64>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022f8:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <MX_SPI3_Init+0x64>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <MX_SPI3_Init+0x64>)
 8002300:	2200      	movs	r2, #0
 8002302:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002304:	4b07      	ldr	r3, [pc, #28]	; (8002324 <MX_SPI3_Init+0x64>)
 8002306:	2200      	movs	r2, #0
 8002308:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <MX_SPI3_Init+0x64>)
 800230c:	220a      	movs	r2, #10
 800230e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002310:	4804      	ldr	r0, [pc, #16]	; (8002324 <MX_SPI3_Init+0x64>)
 8002312:	f003 fffd 	bl	8006310 <HAL_SPI_Init>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800231c:	f7ff ff94 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002320:	bf00      	nop
 8002322:	bd80      	pop	{r7, pc}
 8002324:	2000033c 	.word	0x2000033c
 8002328:	40003c00 	.word	0x40003c00

0800232c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 0314 	add.w	r3, r7, #20
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a19      	ldr	r2, [pc, #100]	; (80023b0 <HAL_SPI_MspInit+0x84>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d12c      	bne.n	80023a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	4b18      	ldr	r3, [pc, #96]	; (80023b4 <HAL_SPI_MspInit+0x88>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	4a17      	ldr	r2, [pc, #92]	; (80023b4 <HAL_SPI_MspInit+0x88>)
 8002358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800235c:	6413      	str	r3, [r2, #64]	; 0x40
 800235e:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <HAL_SPI_MspInit+0x88>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <HAL_SPI_MspInit+0x88>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	4a10      	ldr	r2, [pc, #64]	; (80023b4 <HAL_SPI_MspInit+0x88>)
 8002374:	f043 0304 	orr.w	r3, r3, #4
 8002378:	6313      	str	r3, [r2, #48]	; 0x30
 800237a:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <HAL_SPI_MspInit+0x88>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002386:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800238a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238c:	2302      	movs	r3, #2
 800238e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002390:	2300      	movs	r3, #0
 8002392:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002394:	2303      	movs	r3, #3
 8002396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002398:	2306      	movs	r3, #6
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800239c:	f107 0314 	add.w	r3, r7, #20
 80023a0:	4619      	mov	r1, r3
 80023a2:	4805      	ldr	r0, [pc, #20]	; (80023b8 <HAL_SPI_MspInit+0x8c>)
 80023a4:	f002 f954 	bl	8004650 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80023a8:	bf00      	nop
 80023aa:	3728      	adds	r7, #40	; 0x28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40003c00 	.word	0x40003c00
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40020800 	.word	0x40020800

080023bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <HAL_MspInit+0x4c>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	4a0f      	ldr	r2, [pc, #60]	; (8002408 <HAL_MspInit+0x4c>)
 80023cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023d0:	6453      	str	r3, [r2, #68]	; 0x44
 80023d2:	4b0d      	ldr	r3, [pc, #52]	; (8002408 <HAL_MspInit+0x4c>)
 80023d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	603b      	str	r3, [r7, #0]
 80023e2:	4b09      	ldr	r3, [pc, #36]	; (8002408 <HAL_MspInit+0x4c>)
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	4a08      	ldr	r2, [pc, #32]	; (8002408 <HAL_MspInit+0x4c>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6413      	str	r3, [r2, #64]	; 0x40
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_MspInit+0x4c>)
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40023800 	.word	0x40023800

0800240c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002410:	e7fe      	b.n	8002410 <NMI_Handler+0x4>

08002412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002416:	e7fe      	b.n	8002416 <HardFault_Handler+0x4>

08002418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800241c:	e7fe      	b.n	800241c <MemManage_Handler+0x4>

0800241e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002422:	e7fe      	b.n	8002422 <BusFault_Handler+0x4>

08002424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002428:	e7fe      	b.n	8002428 <UsageFault_Handler+0x4>

0800242a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002458:	f001 fbf4 	bl	8003c44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}

08002460 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
	return 1;
 8002464:	2301      	movs	r3, #1
}
 8002466:	4618      	mov	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <_kill>:

int _kill(int pid, int sig)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800247a:	f005 fb6b 	bl	8007b54 <__errno>
 800247e:	4603      	mov	r3, r0
 8002480:	2216      	movs	r2, #22
 8002482:	601a      	str	r2, [r3, #0]
	return -1;
 8002484:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <_exit>:

void _exit (int status)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002498:	f04f 31ff 	mov.w	r1, #4294967295
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff ffe7 	bl	8002470 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024a2:	e7fe      	b.n	80024a2 <_exit+0x12>

080024a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	e00a      	b.n	80024cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024b6:	f3af 8000 	nop.w
 80024ba:	4601      	mov	r1, r0
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	60ba      	str	r2, [r7, #8]
 80024c2:	b2ca      	uxtb	r2, r1
 80024c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	3301      	adds	r3, #1
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	dbf0      	blt.n	80024b6 <_read+0x12>
	}

return len;
 80024d4:	687b      	ldr	r3, [r7, #4]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b086      	sub	sp, #24
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ea:	2300      	movs	r3, #0
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	e009      	b.n	8002504 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	60ba      	str	r2, [r7, #8]
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	3301      	adds	r3, #1
 8002502:	617b      	str	r3, [r7, #20]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	429a      	cmp	r2, r3
 800250a:	dbf1      	blt.n	80024f0 <_write+0x12>
	}
	return len;
 800250c:	687b      	ldr	r3, [r7, #4]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <_close>:

int _close(int file)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
	return -1;
 800251e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002522:	4618      	mov	r0, r3
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr

0800252e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800253e:	605a      	str	r2, [r3, #4]
	return 0;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <_isatty>:

int _isatty(int file)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
	return 1;
 8002556:	2301      	movs	r3, #1
}
 8002558:	4618      	mov	r0, r3
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
	return 0;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
	...

08002580 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002588:	4a14      	ldr	r2, [pc, #80]	; (80025dc <_sbrk+0x5c>)
 800258a:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <_sbrk+0x60>)
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002594:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <_sbrk+0x64>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d102      	bne.n	80025a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <_sbrk+0x64>)
 800259e:	4a12      	ldr	r2, [pc, #72]	; (80025e8 <_sbrk+0x68>)
 80025a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025a2:	4b10      	ldr	r3, [pc, #64]	; (80025e4 <_sbrk+0x64>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4413      	add	r3, r2
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d207      	bcs.n	80025c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025b0:	f005 fad0 	bl	8007b54 <__errno>
 80025b4:	4603      	mov	r3, r0
 80025b6:	220c      	movs	r2, #12
 80025b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ba:	f04f 33ff 	mov.w	r3, #4294967295
 80025be:	e009      	b.n	80025d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025c0:	4b08      	ldr	r3, [pc, #32]	; (80025e4 <_sbrk+0x64>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025c6:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <_sbrk+0x64>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4413      	add	r3, r2
 80025ce:	4a05      	ldr	r2, [pc, #20]	; (80025e4 <_sbrk+0x64>)
 80025d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025d2:	68fb      	ldr	r3, [r7, #12]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20030000 	.word	0x20030000
 80025e0:	00000400 	.word	0x00000400
 80025e4:	20000230 	.word	0x20000230
 80025e8:	20000480 	.word	0x20000480

080025ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <SystemInit+0x20>)
 80025f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f6:	4a05      	ldr	r2, [pc, #20]	; (800260c <SystemInit+0x20>)
 80025f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002616:	f107 0308 	add.w	r3, r7, #8
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	605a      	str	r2, [r3, #4]
 8002620:	609a      	str	r2, [r3, #8]
 8002622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002624:	463b      	mov	r3, r7
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800262c:	4b1f      	ldr	r3, [pc, #124]	; (80026ac <MX_TIM1_Init+0x9c>)
 800262e:	4a20      	ldr	r2, [pc, #128]	; (80026b0 <MX_TIM1_Init+0xa0>)
 8002630:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 8002632:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <MX_TIM1_Init+0x9c>)
 8002634:	f242 720f 	movw	r2, #9999	; 0x270f
 8002638:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800263a:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <MX_TIM1_Init+0x9c>)
 800263c:	2200      	movs	r2, #0
 800263e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 12-1;
 8002640:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <MX_TIM1_Init+0x9c>)
 8002642:	220b      	movs	r2, #11
 8002644:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002646:	4b19      	ldr	r3, [pc, #100]	; (80026ac <MX_TIM1_Init+0x9c>)
 8002648:	f44f 7280 	mov.w	r2, #256	; 0x100
 800264c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800264e:	4b17      	ldr	r3, [pc, #92]	; (80026ac <MX_TIM1_Init+0x9c>)
 8002650:	2200      	movs	r2, #0
 8002652:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002654:	4b15      	ldr	r3, [pc, #84]	; (80026ac <MX_TIM1_Init+0x9c>)
 8002656:	2200      	movs	r2, #0
 8002658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800265a:	4814      	ldr	r0, [pc, #80]	; (80026ac <MX_TIM1_Init+0x9c>)
 800265c:	f004 f8e8 	bl	8006830 <HAL_TIM_Base_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002666:	f7ff fdef 	bl	8002248 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800266a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800266e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002670:	f107 0308 	add.w	r3, r7, #8
 8002674:	4619      	mov	r1, r3
 8002676:	480d      	ldr	r0, [pc, #52]	; (80026ac <MX_TIM1_Init+0x9c>)
 8002678:	f004 fb02 	bl	8006c80 <HAL_TIM_ConfigClockSource>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002682:	f7ff fde1 	bl	8002248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800268a:	2300      	movs	r3, #0
 800268c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800268e:	463b      	mov	r3, r7
 8002690:	4619      	mov	r1, r3
 8002692:	4806      	ldr	r0, [pc, #24]	; (80026ac <MX_TIM1_Init+0x9c>)
 8002694:	f004 fecc 	bl	8007430 <HAL_TIMEx_MasterConfigSynchronization>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800269e:	f7ff fdd3 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80026a2:	bf00      	nop
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	20000394 	.word	0x20000394
 80026b0:	40010000 	.word	0x40010000

080026b4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	; 0x28
 80026b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ba:	f107 0320 	add.w	r3, r7, #32
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026c4:	1d3b      	adds	r3, r7, #4
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	605a      	str	r2, [r3, #4]
 80026cc:	609a      	str	r2, [r3, #8]
 80026ce:	60da      	str	r2, [r3, #12]
 80026d0:	611a      	str	r2, [r3, #16]
 80026d2:	615a      	str	r2, [r3, #20]
 80026d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026d6:	4b22      	ldr	r3, [pc, #136]	; (8002760 <MX_TIM2_Init+0xac>)
 80026d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80026dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60-1;
 80026de:	4b20      	ldr	r3, [pc, #128]	; (8002760 <MX_TIM2_Init+0xac>)
 80026e0:	223b      	movs	r2, #59	; 0x3b
 80026e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e4:	4b1e      	ldr	r3, [pc, #120]	; (8002760 <MX_TIM2_Init+0xac>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80026ea:	4b1d      	ldr	r3, [pc, #116]	; (8002760 <MX_TIM2_Init+0xac>)
 80026ec:	2263      	movs	r2, #99	; 0x63
 80026ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026f0:	4b1b      	ldr	r3, [pc, #108]	; (8002760 <MX_TIM2_Init+0xac>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f6:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <MX_TIM2_Init+0xac>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80026fc:	4818      	ldr	r0, [pc, #96]	; (8002760 <MX_TIM2_Init+0xac>)
 80026fe:	f004 f8e6 	bl	80068ce <HAL_TIM_PWM_Init>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002708:	f7ff fd9e 	bl	8002248 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800270c:	2300      	movs	r3, #0
 800270e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002710:	2300      	movs	r3, #0
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002714:	f107 0320 	add.w	r3, r7, #32
 8002718:	4619      	mov	r1, r3
 800271a:	4811      	ldr	r0, [pc, #68]	; (8002760 <MX_TIM2_Init+0xac>)
 800271c:	f004 fe88 	bl	8007430 <HAL_TIMEx_MasterConfigSynchronization>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8002726:	f7ff fd8f 	bl	8002248 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800272a:	2360      	movs	r3, #96	; 0x60
 800272c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = (10000-1)*0.25;
 800272e:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8002732:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800273c:	1d3b      	adds	r3, r7, #4
 800273e:	2200      	movs	r2, #0
 8002740:	4619      	mov	r1, r3
 8002742:	4807      	ldr	r0, [pc, #28]	; (8002760 <MX_TIM2_Init+0xac>)
 8002744:	f004 f9da 	bl	8006afc <HAL_TIM_PWM_ConfigChannel>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800274e:	f7ff fd7b 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002752:	4803      	ldr	r0, [pc, #12]	; (8002760 <MX_TIM2_Init+0xac>)
 8002754:	f000 f848 	bl	80027e8 <HAL_TIM_MspPostInit>

}
 8002758:	bf00      	nop
 800275a:	3728      	adds	r7, #40	; 0x28
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	200003dc 	.word	0x200003dc

08002764 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a0b      	ldr	r2, [pc, #44]	; (80027a0 <HAL_TIM_Base_MspInit+0x3c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d10d      	bne.n	8002792 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <HAL_TIM_Base_MspInit+0x40>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	4a09      	ldr	r2, [pc, #36]	; (80027a4 <HAL_TIM_Base_MspInit+0x40>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6453      	str	r3, [r2, #68]	; 0x44
 8002786:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <HAL_TIM_Base_MspInit+0x40>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002792:	bf00      	nop
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40010000 	.word	0x40010000
 80027a4:	40023800 	.word	0x40023800

080027a8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b8:	d10d      	bne.n	80027d6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	4a08      	ldr	r2, [pc, #32]	; (80027e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ca:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_TIM_PWM_MspInit+0x3c>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80027d6:	bf00      	nop
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40023800 	.word	0x40023800

080027e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b088      	sub	sp, #32
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f0:	f107 030c 	add.w	r3, r7, #12
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002808:	d11d      	bne.n	8002846 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	4b10      	ldr	r3, [pc, #64]	; (8002850 <HAL_TIM_MspPostInit+0x68>)
 8002810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002812:	4a0f      	ldr	r2, [pc, #60]	; (8002850 <HAL_TIM_MspPostInit+0x68>)
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	6313      	str	r3, [r2, #48]	; 0x30
 800281a:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <HAL_TIM_MspPostInit+0x68>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	60bb      	str	r3, [r7, #8]
 8002824:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002826:	2320      	movs	r3, #32
 8002828:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282a:	2302      	movs	r3, #2
 800282c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002832:	2300      	movs	r3, #0
 8002834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002836:	2301      	movs	r3, #1
 8002838:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283a:	f107 030c 	add.w	r3, r7, #12
 800283e:	4619      	mov	r1, r3
 8002840:	4804      	ldr	r0, [pc, #16]	; (8002854 <HAL_TIM_MspPostInit+0x6c>)
 8002842:	f001 ff05 	bl	8004650 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002846:	bf00      	nop
 8002848:	3720      	adds	r7, #32
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40023800 	.word	0x40023800
 8002854:	40020000 	.word	0x40020000

08002858 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800285c:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <MX_USART1_UART_Init+0x4c>)
 800285e:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <MX_USART1_UART_Init+0x50>)
 8002860:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002862:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <MX_USART1_UART_Init+0x4c>)
 8002864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002868:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800286a:	4b0e      	ldr	r3, [pc, #56]	; (80028a4 <MX_USART1_UART_Init+0x4c>)
 800286c:	2200      	movs	r2, #0
 800286e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <MX_USART1_UART_Init+0x4c>)
 8002872:	2200      	movs	r2, #0
 8002874:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002876:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <MX_USART1_UART_Init+0x4c>)
 8002878:	2200      	movs	r2, #0
 800287a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800287c:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <MX_USART1_UART_Init+0x4c>)
 800287e:	220c      	movs	r2, #12
 8002880:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002882:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <MX_USART1_UART_Init+0x4c>)
 8002884:	2200      	movs	r2, #0
 8002886:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002888:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <MX_USART1_UART_Init+0x4c>)
 800288a:	2200      	movs	r2, #0
 800288c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800288e:	4805      	ldr	r0, [pc, #20]	; (80028a4 <MX_USART1_UART_Init+0x4c>)
 8002890:	f004 fe4a 	bl	8007528 <HAL_UART_Init>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800289a:	f7ff fcd5 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000424 	.word	0x20000424
 80028a8:	40011000 	.word	0x40011000

080028ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08a      	sub	sp, #40	; 0x28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b4:	f107 0314 	add.w	r3, r7, #20
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a19      	ldr	r2, [pc, #100]	; (8002930 <HAL_UART_MspInit+0x84>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d12c      	bne.n	8002928 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	4b18      	ldr	r3, [pc, #96]	; (8002934 <HAL_UART_MspInit+0x88>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	4a17      	ldr	r2, [pc, #92]	; (8002934 <HAL_UART_MspInit+0x88>)
 80028d8:	f043 0310 	orr.w	r3, r3, #16
 80028dc:	6453      	str	r3, [r2, #68]	; 0x44
 80028de:	4b15      	ldr	r3, [pc, #84]	; (8002934 <HAL_UART_MspInit+0x88>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	613b      	str	r3, [r7, #16]
 80028e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	4b11      	ldr	r3, [pc, #68]	; (8002934 <HAL_UART_MspInit+0x88>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	4a10      	ldr	r2, [pc, #64]	; (8002934 <HAL_UART_MspInit+0x88>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	6313      	str	r3, [r2, #48]	; 0x30
 80028fa:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <HAL_UART_MspInit+0x88>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002906:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800290a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290c:	2302      	movs	r3, #2
 800290e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002910:	2300      	movs	r3, #0
 8002912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002914:	2303      	movs	r3, #3
 8002916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002918:	2307      	movs	r3, #7
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800291c:	f107 0314 	add.w	r3, r7, #20
 8002920:	4619      	mov	r1, r3
 8002922:	4805      	ldr	r0, [pc, #20]	; (8002938 <HAL_UART_MspInit+0x8c>)
 8002924:	f001 fe94 	bl	8004650 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002928:	bf00      	nop
 800292a:	3728      	adds	r7, #40	; 0x28
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40011000 	.word	0x40011000
 8002934:	40023800 	.word	0x40023800
 8002938:	40020000 	.word	0x40020000

0800293c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800293c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002974 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002940:	480d      	ldr	r0, [pc, #52]	; (8002978 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002942:	490e      	ldr	r1, [pc, #56]	; (800297c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002944:	4a0e      	ldr	r2, [pc, #56]	; (8002980 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002948:	e002      	b.n	8002950 <LoopCopyDataInit>

0800294a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800294a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800294c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800294e:	3304      	adds	r3, #4

08002950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002954:	d3f9      	bcc.n	800294a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002956:	4a0b      	ldr	r2, [pc, #44]	; (8002984 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002958:	4c0b      	ldr	r4, [pc, #44]	; (8002988 <LoopFillZerobss+0x26>)
  movs r3, #0
 800295a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800295c:	e001      	b.n	8002962 <LoopFillZerobss>

0800295e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800295e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002960:	3204      	adds	r2, #4

08002962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002964:	d3fb      	bcc.n	800295e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002966:	f7ff fe41 	bl	80025ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800296a:	f005 f8f9 	bl	8007b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800296e:	f7fe fe17 	bl	80015a0 <main>
  bx  lr    
 8002972:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002974:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800297c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002980:	0803240c 	.word	0x0803240c
  ldr r2, =_sbss
 8002984:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002988:	2000047c 	.word	0x2000047c

0800298c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800298c:	e7fe      	b.n	800298c <ADC_IRQHandler>

0800298e <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 800298e:	b590      	push	{r4, r7, lr}
 8002990:	b08b      	sub	sp, #44	; 0x2c
 8002992:	af00      	add	r7, sp, #0
 8002994:	4604      	mov	r4, r0
 8002996:	4608      	mov	r0, r1
 8002998:	4611      	mov	r1, r2
 800299a:	461a      	mov	r2, r3
 800299c:	4623      	mov	r3, r4
 800299e:	80fb      	strh	r3, [r7, #6]
 80029a0:	4603      	mov	r3, r0
 80029a2:	80bb      	strh	r3, [r7, #4]
 80029a4:	460b      	mov	r3, r1
 80029a6:	807b      	strh	r3, [r7, #2]
 80029a8:	4613      	mov	r3, r2
 80029aa:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80029ac:	887b      	ldrh	r3, [r7, #2]
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80029b4:	887b      	ldrh	r3, [r7, #2]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	f1c3 0301 	rsb	r3, r3, #1
 80029bc:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80029c6:	e061      	b.n	8002a8c <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80029c8:	88fa      	ldrh	r2, [r7, #6]
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	e018      	b.n	8002a04 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	b298      	uxth	r0, r3
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	b29a      	uxth	r2, r3
 80029da:	88bb      	ldrh	r3, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	b29b      	uxth	r3, r3
 80029e0:	883a      	ldrh	r2, [r7, #0]
 80029e2:	4619      	mov	r1, r3
 80029e4:	f000 fdae 	bl	8003544 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	b298      	uxth	r0, r3
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	88ba      	ldrh	r2, [r7, #4]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	883a      	ldrh	r2, [r7, #0]
 80029f8:	4619      	mov	r1, r3
 80029fa:	f000 fda3 	bl	8003544 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	3301      	adds	r3, #1
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	88fa      	ldrh	r2, [r7, #6]
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	4413      	add	r3, r2
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	dde0      	ble.n	80029d2 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8002a10:	88fa      	ldrh	r2, [r7, #6]
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	e018      	b.n	8002a4c <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	b298      	uxth	r0, r3
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	88bb      	ldrh	r3, [r7, #4]
 8002a24:	4413      	add	r3, r2
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	883a      	ldrh	r2, [r7, #0]
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	f000 fd8a 	bl	8003544 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	b298      	uxth	r0, r3
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	88ba      	ldrh	r2, [r7, #4]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	883a      	ldrh	r2, [r7, #0]
 8002a40:	4619      	mov	r1, r3
 8002a42:	f000 fd7f 	bl	8003544 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	88fa      	ldrh	r2, [r7, #6]
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	4413      	add	r3, r2
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	dde0      	ble.n	8002a1a <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	4413      	add	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	3302      	adds	r3, #2
 8002a6a:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	005a      	lsls	r2, r3, #1
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	4413      	add	r3, r2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	dd09      	ble.n	8002a8c <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	4413      	add	r3, r2
 8002a84:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3302      	adds	r3, #2
 8002a8a:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8002a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	da99      	bge.n	80029c8 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop
 8002a98:	372c      	adds	r7, #44	; 0x2c
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd90      	pop	{r4, r7, pc}
	...

08002aa0 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8002aa0:	b590      	push	{r4, r7, lr}
 8002aa2:	b089      	sub	sp, #36	; 0x24
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	4604      	mov	r4, r0
 8002aa8:	4608      	mov	r0, r1
 8002aaa:	4611      	mov	r1, r2
 8002aac:	461a      	mov	r2, r3
 8002aae:	4623      	mov	r3, r4
 8002ab0:	71fb      	strb	r3, [r7, #7]
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	71bb      	strb	r3, [r7, #6]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	717b      	strb	r3, [r7, #5]
 8002aba:	4613      	mov	r3, r2
 8002abc:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
		uint8_t 	i,j;
		
		function_char = Character;
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8002ac2:	7dfb      	ldrb	r3, [r7, #23]
 8002ac4:	2b1f      	cmp	r3, #31
 8002ac6:	d802      	bhi.n	8002ace <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	71fb      	strb	r3, [r7, #7]
 8002acc:	e002      	b.n	8002ad4 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8002ace:	7dfb      	ldrb	r3, [r7, #23]
 8002ad0:	3b20      	subs	r3, #32
 8002ad2:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	753b      	strb	r3, [r7, #20]
 8002ad8:	e012      	b.n	8002b00 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8002ada:	7dfa      	ldrb	r2, [r7, #23]
 8002adc:	7d38      	ldrb	r0, [r7, #20]
 8002ade:	7d39      	ldrb	r1, [r7, #20]
 8002ae0:	4c3c      	ldr	r4, [pc, #240]	; (8002bd4 <ILI9341_Draw_Char+0x134>)
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4413      	add	r3, r2
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	4423      	add	r3, r4
 8002aec:	4403      	add	r3, r0
 8002aee:	781a      	ldrb	r2, [r3, #0]
 8002af0:	f107 0318 	add.w	r3, r7, #24
 8002af4:	440b      	add	r3, r1
 8002af6:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8002afa:	7d3b      	ldrb	r3, [r7, #20]
 8002afc:	3301      	adds	r3, #1
 8002afe:	753b      	strb	r3, [r7, #20]
 8002b00:	7d3b      	ldrb	r3, [r7, #20]
 8002b02:	2b05      	cmp	r3, #5
 8002b04:	d9e9      	bls.n	8002ada <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8002b06:	79bb      	ldrb	r3, [r7, #6]
 8002b08:	b298      	uxth	r0, r3
 8002b0a:	797b      	ldrb	r3, [r7, #5]
 8002b0c:	b299      	uxth	r1, r3
 8002b0e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b10:	461a      	mov	r2, r3
 8002b12:	0052      	lsls	r2, r2, #1
 8002b14:	4413      	add	r3, r2
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	b29c      	uxth	r4, r3
 8002b20:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	4623      	mov	r3, r4
 8002b26:	f000 fde7 	bl	80036f8 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	757b      	strb	r3, [r7, #21]
 8002b2e:	e048      	b.n	8002bc2 <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002b30:	2300      	movs	r3, #0
 8002b32:	75bb      	strb	r3, [r7, #22]
 8002b34:	e03f      	b.n	8002bb6 <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 8002b36:	7d7b      	ldrb	r3, [r7, #21]
 8002b38:	f107 0218 	add.w	r2, r7, #24
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002b42:	461a      	mov	r2, r3
 8002b44:	7dbb      	ldrb	r3, [r7, #22]
 8002b46:	fa42 f303 	asr.w	r3, r2, r3
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d02e      	beq.n	8002bb0 <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 8002b52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d110      	bne.n	8002b7a <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8002b58:	79bb      	ldrb	r3, [r7, #6]
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	7d7b      	ldrb	r3, [r7, #21]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	b298      	uxth	r0, r3
 8002b64:	797b      	ldrb	r3, [r7, #5]
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	7dbb      	ldrb	r3, [r7, #22]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	887a      	ldrh	r2, [r7, #2]
 8002b72:	4619      	mov	r1, r3
 8002b74:	f000 fce6 	bl	8003544 <ILI9341_Draw_Pixel>
 8002b78:	e01a      	b.n	8002bb0 <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8002b7a:	79bb      	ldrb	r3, [r7, #6]
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	7d7b      	ldrb	r3, [r7, #21]
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002b84:	fb11 f303 	smulbb	r3, r1, r3
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	b298      	uxth	r0, r3
 8002b8e:	797b      	ldrb	r3, [r7, #5]
 8002b90:	b29a      	uxth	r2, r3
 8002b92:	7dbb      	ldrb	r3, [r7, #22]
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002b98:	fb11 f303 	smulbb	r3, r1, r3
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	4413      	add	r3, r2
 8002ba0:	b299      	uxth	r1, r3
 8002ba2:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8002ba4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002ba6:	887b      	ldrh	r3, [r7, #2]
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	4623      	mov	r3, r4
 8002bac:	f000 fda4 	bl	80036f8 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002bb0:	7dbb      	ldrb	r3, [r7, #22]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	75bb      	strb	r3, [r7, #22]
 8002bb6:	7dbb      	ldrb	r3, [r7, #22]
 8002bb8:	2b07      	cmp	r3, #7
 8002bba:	d9bc      	bls.n	8002b36 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8002bbc:	7d7b      	ldrb	r3, [r7, #21]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	757b      	strb	r3, [r7, #21]
 8002bc2:	7d7b      	ldrb	r3, [r7, #21]
 8002bc4:	2b05      	cmp	r3, #5
 8002bc6:	d9b3      	bls.n	8002b30 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8002bc8:	bf00      	nop
 8002bca:	bf00      	nop
 8002bcc:	371c      	adds	r7, #28
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd90      	pop	{r4, r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	08031d04 	.word	0x08031d04

08002bd8 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8002bd8:	b590      	push	{r4, r7, lr}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af02      	add	r7, sp, #8
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	4608      	mov	r0, r1
 8002be2:	4611      	mov	r1, r2
 8002be4:	461a      	mov	r2, r3
 8002be6:	4603      	mov	r3, r0
 8002be8:	70fb      	strb	r3, [r7, #3]
 8002bea:	460b      	mov	r3, r1
 8002bec:	70bb      	strb	r3, [r7, #2]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8002bf2:	e017      	b.n	8002c24 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	1c5a      	adds	r2, r3, #1
 8002bf8:	607a      	str	r2, [r7, #4]
 8002bfa:	7818      	ldrb	r0, [r3, #0]
 8002bfc:	883c      	ldrh	r4, [r7, #0]
 8002bfe:	78ba      	ldrb	r2, [r7, #2]
 8002c00:	78f9      	ldrb	r1, [r7, #3]
 8002c02:	8bbb      	ldrh	r3, [r7, #28]
 8002c04:	9301      	str	r3, [sp, #4]
 8002c06:	8b3b      	ldrh	r3, [r7, #24]
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	4623      	mov	r3, r4
 8002c0c:	f7ff ff48 	bl	8002aa0 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8002c10:	8b3b      	ldrh	r3, [r7, #24]
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	0052      	lsls	r2, r2, #1
 8002c18:	4413      	add	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	78fb      	ldrb	r3, [r7, #3]
 8002c20:	4413      	add	r3, r2
 8002c22:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1e3      	bne.n	8002bf4 <ILI9341_Draw_Text+0x1c>
    }
}
 8002c2c:	bf00      	nop
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd90      	pop	{r4, r7, pc}
	...

08002c38 <ILI9341_Draw_Image>:

/*Draws a full screen picture from flash. Image converted from RGB .jpeg/other to C array using online converter*/
//USING CONVERTER: http://www.digole.com/tools/PicturetoC_Hex_converter.php
//65K colour (2Bytes / Pixel)
void ILI9341_Draw_Image(const char* Image_Array, uint8_t Orientation)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	1d3b      	adds	r3, r7, #4
 8002c42:	6018      	str	r0, [r3, #0]
 8002c44:	460a      	mov	r2, r1
 8002c46:	1cfb      	adds	r3, r7, #3
 8002c48:	701a      	strb	r2, [r3, #0]
	if(Orientation == SCREEN_HORIZONTAL_1)
 8002c4a:	1cfb      	adds	r3, r7, #3
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d159      	bne.n	8002d06 <ILI9341_Draw_Image+0xce>
	{
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8002c52:	2001      	movs	r0, #1
 8002c54:	f000 fa4a 	bl	80030ec <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8002c58:	23f0      	movs	r3, #240	; 0xf0
 8002c5a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002c5e:	2100      	movs	r1, #0
 8002c60:	2000      	movs	r0, #0
 8002c62:	f000 f9d9 	bl	8003018 <ILI9341_Set_Address>
			
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002c66:	2201      	movs	r2, #1
 8002c68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c6c:	48b5      	ldr	r0, [pc, #724]	; (8002f44 <ILI9341_Draw_Image+0x30c>)
 8002c6e:	f001 feb3 	bl	80049d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002c72:	2200      	movs	r2, #0
 8002c74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c78:	48b2      	ldr	r0, [pc, #712]	; (8002f44 <ILI9341_Draw_Image+0x30c>)
 8002c7a:	f001 fead 	bl	80049d8 <HAL_GPIO_WritePin>
		
		unsigned char Temp_small_buffer[BURST_MAX_SIZE];
		uint32_t counter = 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002c84:	2300      	movs	r3, #0
 8002c86:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8002c8a:	e030      	b.n	8002cee <ILI9341_Draw_Image+0xb6>
		{			
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8002c92:	e014      	b.n	8002cbe <ILI9341_Draw_Image+0x86>
				{
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8002c94:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8002c98:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002c9c:	4413      	add	r3, r2
 8002c9e:	1d3a      	adds	r2, r7, #4
 8002ca0:	6812      	ldr	r2, [r2, #0]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	7819      	ldrb	r1, [r3, #0]
 8002ca6:	f107 020c 	add.w	r2, r7, #12
 8002caa:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002cae:	4413      	add	r3, r2
 8002cb0:	460a      	mov	r2, r1
 8002cb2:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002cb4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002cb8:	3301      	adds	r3, #1
 8002cba:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8002cbe:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002cc2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002cc6:	d3e5      	bcc.n	8002c94 <ILI9341_Draw_Image+0x5c>
				}						
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002cc8:	f107 010c 	add.w	r1, r7, #12
 8002ccc:	230a      	movs	r3, #10
 8002cce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002cd2:	489d      	ldr	r0, [pc, #628]	; (8002f48 <ILI9341_Draw_Image+0x310>)
 8002cd4:	f003 fba5 	bl	8006422 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8002cd8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8002cdc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002ce0:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002ce4:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002ce8:	3301      	adds	r3, #1
 8002cea:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8002cee:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8002cf2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8002cf6:	d9c9      	bls.n	8002c8c <ILI9341_Draw_Image+0x54>
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002cfe:	4891      	ldr	r0, [pc, #580]	; (8002f44 <ILI9341_Draw_Image+0x30c>)
 8002d00:	f001 fe6a 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
				counter += BURST_MAX_SIZE;			
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
	}
}
 8002d04:	e118      	b.n	8002f38 <ILI9341_Draw_Image+0x300>
	else if(Orientation == SCREEN_HORIZONTAL_2)
 8002d06:	1cfb      	adds	r3, r7, #3
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b03      	cmp	r3, #3
 8002d0c:	d159      	bne.n	8002dc2 <ILI9341_Draw_Image+0x18a>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8002d0e:	2003      	movs	r0, #3
 8002d10:	f000 f9ec 	bl	80030ec <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8002d14:	23f0      	movs	r3, #240	; 0xf0
 8002d16:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f000 f97b 	bl	8003018 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002d22:	2201      	movs	r2, #1
 8002d24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d28:	4886      	ldr	r0, [pc, #536]	; (8002f44 <ILI9341_Draw_Image+0x30c>)
 8002d2a:	f001 fe55 	bl	80049d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d34:	4883      	ldr	r0, [pc, #524]	; (8002f44 <ILI9341_Draw_Image+0x30c>)
 8002d36:	f001 fe4f 	bl	80049d8 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002d40:	2300      	movs	r3, #0
 8002d42:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8002d46:	e030      	b.n	8002daa <ILI9341_Draw_Image+0x172>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002d48:	2300      	movs	r3, #0
 8002d4a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8002d4e:	e014      	b.n	8002d7a <ILI9341_Draw_Image+0x142>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8002d50:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8002d54:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002d58:	4413      	add	r3, r2
 8002d5a:	1d3a      	adds	r2, r7, #4
 8002d5c:	6812      	ldr	r2, [r2, #0]
 8002d5e:	4413      	add	r3, r2
 8002d60:	7819      	ldrb	r1, [r3, #0]
 8002d62:	f107 020c 	add.w	r2, r7, #12
 8002d66:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002d6a:	4413      	add	r3, r2
 8002d6c:	460a      	mov	r2, r1
 8002d6e:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002d70:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002d74:	3301      	adds	r3, #1
 8002d76:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8002d7a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002d7e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d82:	d3e5      	bcc.n	8002d50 <ILI9341_Draw_Image+0x118>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002d84:	f107 010c 	add.w	r1, r7, #12
 8002d88:	230a      	movs	r3, #10
 8002d8a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002d8e:	486e      	ldr	r0, [pc, #440]	; (8002f48 <ILI9341_Draw_Image+0x310>)
 8002d90:	f003 fb47 	bl	8006422 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8002d94:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002d98:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002d9c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002da0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002da4:	3301      	adds	r3, #1
 8002da6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8002daa:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002dae:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8002db2:	d9c9      	bls.n	8002d48 <ILI9341_Draw_Image+0x110>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002db4:	2201      	movs	r2, #1
 8002db6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dba:	4862      	ldr	r0, [pc, #392]	; (8002f44 <ILI9341_Draw_Image+0x30c>)
 8002dbc:	f001 fe0c 	bl	80049d8 <HAL_GPIO_WritePin>
}
 8002dc0:	e0ba      	b.n	8002f38 <ILI9341_Draw_Image+0x300>
	else if(Orientation == SCREEN_VERTICAL_2)
 8002dc2:	1cfb      	adds	r3, r7, #3
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d159      	bne.n	8002e7e <ILI9341_Draw_Image+0x246>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_2);
 8002dca:	2002      	movs	r0, #2
 8002dcc:	f000 f98e 	bl	80030ec <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8002dd0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002dd4:	22f0      	movs	r2, #240	; 0xf0
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f000 f91d 	bl	8003018 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002dde:	2201      	movs	r2, #1
 8002de0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002de4:	4857      	ldr	r0, [pc, #348]	; (8002f44 <ILI9341_Draw_Image+0x30c>)
 8002de6:	f001 fdf7 	bl	80049d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002dea:	2200      	movs	r2, #0
 8002dec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002df0:	4854      	ldr	r0, [pc, #336]	; (8002f44 <ILI9341_Draw_Image+0x30c>)
 8002df2:	f001 fdf1 	bl	80049d8 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002e02:	e030      	b.n	8002e66 <ILI9341_Draw_Image+0x22e>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002e04:	2300      	movs	r3, #0
 8002e06:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002e0a:	e014      	b.n	8002e36 <ILI9341_Draw_Image+0x1fe>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8002e0c:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8002e10:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002e14:	4413      	add	r3, r2
 8002e16:	1d3a      	adds	r2, r7, #4
 8002e18:	6812      	ldr	r2, [r2, #0]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	7819      	ldrb	r1, [r3, #0]
 8002e1e:	f107 020c 	add.w	r2, r7, #12
 8002e22:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002e26:	4413      	add	r3, r2
 8002e28:	460a      	mov	r2, r1
 8002e2a:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002e2c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002e30:	3301      	adds	r3, #1
 8002e32:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002e36:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002e3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e3e:	d3e5      	bcc.n	8002e0c <ILI9341_Draw_Image+0x1d4>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002e40:	f107 010c 	add.w	r1, r7, #12
 8002e44:	230a      	movs	r3, #10
 8002e46:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002e4a:	483f      	ldr	r0, [pc, #252]	; (8002f48 <ILI9341_Draw_Image+0x310>)
 8002e4c:	f003 fae9 	bl	8006422 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8002e50:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002e54:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002e58:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002e5c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002e60:	3301      	adds	r3, #1
 8002e62:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002e66:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002e6a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8002e6e:	d9c9      	bls.n	8002e04 <ILI9341_Draw_Image+0x1cc>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002e70:	2201      	movs	r2, #1
 8002e72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e76:	4833      	ldr	r0, [pc, #204]	; (8002f44 <ILI9341_Draw_Image+0x30c>)
 8002e78:	f001 fdae 	bl	80049d8 <HAL_GPIO_WritePin>
}
 8002e7c:	e05c      	b.n	8002f38 <ILI9341_Draw_Image+0x300>
	else if(Orientation == SCREEN_VERTICAL_1)
 8002e7e:	1cfb      	adds	r3, r7, #3
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d158      	bne.n	8002f38 <ILI9341_Draw_Image+0x300>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002e86:	2000      	movs	r0, #0
 8002e88:	f000 f930 	bl	80030ec <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8002e8c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002e90:	22f0      	movs	r2, #240	; 0xf0
 8002e92:	2100      	movs	r1, #0
 8002e94:	2000      	movs	r0, #0
 8002e96:	f000 f8bf 	bl	8003018 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ea0:	4828      	ldr	r0, [pc, #160]	; (8002f44 <ILI9341_Draw_Image+0x30c>)
 8002ea2:	f001 fd99 	bl	80049d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002eac:	4825      	ldr	r0, [pc, #148]	; (8002f44 <ILI9341_Draw_Image+0x30c>)
 8002eae:	f001 fd93 	bl	80049d8 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8002ebe:	e030      	b.n	8002f22 <ILI9341_Draw_Image+0x2ea>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8002ec6:	e014      	b.n	8002ef2 <ILI9341_Draw_Image+0x2ba>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8002ec8:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8002ecc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ed0:	4413      	add	r3, r2
 8002ed2:	1d3a      	adds	r2, r7, #4
 8002ed4:	6812      	ldr	r2, [r2, #0]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	7819      	ldrb	r1, [r3, #0]
 8002eda:	f107 020c 	add.w	r2, r7, #12
 8002ede:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ee2:	4413      	add	r3, r2
 8002ee4:	460a      	mov	r2, r1
 8002ee6:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002ee8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002eec:	3301      	adds	r3, #1
 8002eee:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8002ef2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ef6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002efa:	d3e5      	bcc.n	8002ec8 <ILI9341_Draw_Image+0x290>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002efc:	f107 010c 	add.w	r1, r7, #12
 8002f00:	230a      	movs	r3, #10
 8002f02:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002f06:	4810      	ldr	r0, [pc, #64]	; (8002f48 <ILI9341_Draw_Image+0x310>)
 8002f08:	f003 fa8b 	bl	8006422 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8002f0c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002f10:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002f14:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002f18:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8002f22:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002f26:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8002f2a:	d9c9      	bls.n	8002ec0 <ILI9341_Draw_Image+0x288>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f32:	4804      	ldr	r0, [pc, #16]	; (8002f44 <ILI9341_Draw_Image+0x30c>)
 8002f34:	f001 fd50 	bl	80049d8 <HAL_GPIO_WritePin>
}
 8002f38:	bf00      	nop
 8002f3a:	f507 770c 	add.w	r7, r7, #560	; 0x230
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40020000 	.word	0x40020000
 8002f48:	2000033c 	.word	0x2000033c

08002f4c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
MX_SPI3_Init();																							//SPI INIT
 8002f50:	f7ff f9b6 	bl	80022c0 <MX_SPI3_Init>
MX_GPIO_Init();																							//GPIO INIT
 8002f54:	f7fe f8f0 	bl	8001138 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f5e:	4802      	ldr	r0, [pc, #8]	; (8002f68 <ILI9341_SPI_Init+0x1c>)
 8002f60:	f001 fd3a 	bl	80049d8 <HAL_GPIO_WritePin>
}
 8002f64:	bf00      	nop
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40020000 	.word	0x40020000

08002f6c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	4603      	mov	r3, r0
 8002f74:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8002f76:	1df9      	adds	r1, r7, #7
 8002f78:	2301      	movs	r3, #1
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	4803      	ldr	r0, [pc, #12]	; (8002f8c <ILI9341_SPI_Send+0x20>)
 8002f7e:	f003 fa50 	bl	8006422 <HAL_SPI_Transmit>
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	2000033c 	.word	0x2000033c

08002f90 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fa0:	480b      	ldr	r0, [pc, #44]	; (8002fd0 <ILI9341_Write_Command+0x40>)
 8002fa2:	f001 fd19 	bl	80049d8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fac:	4808      	ldr	r0, [pc, #32]	; (8002fd0 <ILI9341_Write_Command+0x40>)
 8002fae:	f001 fd13 	bl	80049d8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff ffd9 	bl	8002f6c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fc0:	4803      	ldr	r0, [pc, #12]	; (8002fd0 <ILI9341_Write_Command+0x40>)
 8002fc2:	f001 fd09 	bl	80049d8 <HAL_GPIO_WritePin>
}
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40020000 	.word	0x40020000

08002fd4 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fe4:	480b      	ldr	r0, [pc, #44]	; (8003014 <ILI9341_Write_Data+0x40>)
 8002fe6:	f001 fcf7 	bl	80049d8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002fea:	2200      	movs	r2, #0
 8002fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ff0:	4808      	ldr	r0, [pc, #32]	; (8003014 <ILI9341_Write_Data+0x40>)
 8002ff2:	f001 fcf1 	bl	80049d8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff ffb7 	bl	8002f6c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002ffe:	2201      	movs	r2, #1
 8003000:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003004:	4803      	ldr	r0, [pc, #12]	; (8003014 <ILI9341_Write_Data+0x40>)
 8003006:	f001 fce7 	bl	80049d8 <HAL_GPIO_WritePin>
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40020000 	.word	0x40020000

08003018 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8003018:	b590      	push	{r4, r7, lr}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4604      	mov	r4, r0
 8003020:	4608      	mov	r0, r1
 8003022:	4611      	mov	r1, r2
 8003024:	461a      	mov	r2, r3
 8003026:	4623      	mov	r3, r4
 8003028:	80fb      	strh	r3, [r7, #6]
 800302a:	4603      	mov	r3, r0
 800302c:	80bb      	strh	r3, [r7, #4]
 800302e:	460b      	mov	r3, r1
 8003030:	807b      	strh	r3, [r7, #2]
 8003032:	4613      	mov	r3, r2
 8003034:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8003036:	202a      	movs	r0, #42	; 0x2a
 8003038:	f7ff ffaa 	bl	8002f90 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 800303c:	88fb      	ldrh	r3, [r7, #6]
 800303e:	0a1b      	lsrs	r3, r3, #8
 8003040:	b29b      	uxth	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff ffc5 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff ffc0 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8003054:	887b      	ldrh	r3, [r7, #2]
 8003056:	0a1b      	lsrs	r3, r3, #8
 8003058:	b29b      	uxth	r3, r3
 800305a:	b2db      	uxtb	r3, r3
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff ffb9 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8003062:	887b      	ldrh	r3, [r7, #2]
 8003064:	b2db      	uxtb	r3, r3
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff ffb4 	bl	8002fd4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 800306c:	202b      	movs	r0, #43	; 0x2b
 800306e:	f7ff ff8f 	bl	8002f90 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8003072:	88bb      	ldrh	r3, [r7, #4]
 8003074:	0a1b      	lsrs	r3, r3, #8
 8003076:	b29b      	uxth	r3, r3
 8003078:	b2db      	uxtb	r3, r3
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff ffaa 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8003080:	88bb      	ldrh	r3, [r7, #4]
 8003082:	b2db      	uxtb	r3, r3
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff ffa5 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800308a:	883b      	ldrh	r3, [r7, #0]
 800308c:	0a1b      	lsrs	r3, r3, #8
 800308e:	b29b      	uxth	r3, r3
 8003090:	b2db      	uxtb	r3, r3
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff ff9e 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8003098:	883b      	ldrh	r3, [r7, #0]
 800309a:	b2db      	uxtb	r3, r3
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff ff99 	bl	8002fd4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80030a2:	202c      	movs	r0, #44	; 0x2c
 80030a4:	f7ff ff74 	bl	8002f90 <ILI9341_Write_Command>
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd90      	pop	{r4, r7, pc}

080030b0 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80030b4:	2201      	movs	r2, #1
 80030b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030ba:	480b      	ldr	r0, [pc, #44]	; (80030e8 <ILI9341_Reset+0x38>)
 80030bc:	f001 fc8c 	bl	80049d8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80030c0:	20c8      	movs	r0, #200	; 0xc8
 80030c2:	f000 fddf 	bl	8003c84 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80030c6:	2200      	movs	r2, #0
 80030c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030cc:	4806      	ldr	r0, [pc, #24]	; (80030e8 <ILI9341_Reset+0x38>)
 80030ce:	f001 fc83 	bl	80049d8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80030d2:	20c8      	movs	r0, #200	; 0xc8
 80030d4:	f000 fdd6 	bl	8003c84 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80030d8:	2201      	movs	r2, #1
 80030da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030de:	4802      	ldr	r0, [pc, #8]	; (80030e8 <ILI9341_Reset+0x38>)
 80030e0:	f001 fc7a 	bl	80049d8 <HAL_GPIO_WritePin>
}
 80030e4:	bf00      	nop
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40020000 	.word	0x40020000

080030ec <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80030f6:	79fb      	ldrb	r3, [r7, #7]
 80030f8:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80030fa:	2036      	movs	r0, #54	; 0x36
 80030fc:	f7ff ff48 	bl	8002f90 <ILI9341_Write_Command>
HAL_Delay(1);
 8003100:	2001      	movs	r0, #1
 8003102:	f000 fdbf 	bl	8003c84 <HAL_Delay>
	
switch(screen_rotation) 
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	2b03      	cmp	r3, #3
 800310a:	d837      	bhi.n	800317c <ILI9341_Set_Rotation+0x90>
 800310c:	a201      	add	r2, pc, #4	; (adr r2, 8003114 <ILI9341_Set_Rotation+0x28>)
 800310e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003112:	bf00      	nop
 8003114:	08003125 	.word	0x08003125
 8003118:	0800313b 	.word	0x0800313b
 800311c:	08003151 	.word	0x08003151
 8003120:	08003167 	.word	0x08003167
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8003124:	2048      	movs	r0, #72	; 0x48
 8003126:	f7ff ff55 	bl	8002fd4 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800312a:	4b17      	ldr	r3, [pc, #92]	; (8003188 <ILI9341_Set_Rotation+0x9c>)
 800312c:	22f0      	movs	r2, #240	; 0xf0
 800312e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8003130:	4b16      	ldr	r3, [pc, #88]	; (800318c <ILI9341_Set_Rotation+0xa0>)
 8003132:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003136:	801a      	strh	r2, [r3, #0]
			break;
 8003138:	e021      	b.n	800317e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800313a:	2028      	movs	r0, #40	; 0x28
 800313c:	f7ff ff4a 	bl	8002fd4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <ILI9341_Set_Rotation+0x9c>)
 8003142:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003146:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8003148:	4b10      	ldr	r3, [pc, #64]	; (800318c <ILI9341_Set_Rotation+0xa0>)
 800314a:	22f0      	movs	r2, #240	; 0xf0
 800314c:	801a      	strh	r2, [r3, #0]
			break;
 800314e:	e016      	b.n	800317e <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8003150:	2088      	movs	r0, #136	; 0x88
 8003152:	f7ff ff3f 	bl	8002fd4 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8003156:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <ILI9341_Set_Rotation+0x9c>)
 8003158:	22f0      	movs	r2, #240	; 0xf0
 800315a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800315c:	4b0b      	ldr	r3, [pc, #44]	; (800318c <ILI9341_Set_Rotation+0xa0>)
 800315e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003162:	801a      	strh	r2, [r3, #0]
			break;
 8003164:	e00b      	b.n	800317e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8003166:	20e8      	movs	r0, #232	; 0xe8
 8003168:	f7ff ff34 	bl	8002fd4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <ILI9341_Set_Rotation+0x9c>)
 800316e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003172:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <ILI9341_Set_Rotation+0xa0>)
 8003176:	22f0      	movs	r2, #240	; 0xf0
 8003178:	801a      	strh	r2, [r3, #0]
			break;
 800317a:	e000      	b.n	800317e <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800317c:	bf00      	nop
	}
}
 800317e:	bf00      	nop
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20000016 	.word	0x20000016
 800318c:	20000014 	.word	0x20000014

08003190 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8003194:	2201      	movs	r2, #1
 8003196:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800319a:	4802      	ldr	r0, [pc, #8]	; (80031a4 <ILI9341_Enable+0x14>)
 800319c:	f001 fc1c 	bl	80049d8 <HAL_GPIO_WritePin>
}
 80031a0:	bf00      	nop
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40020000 	.word	0x40020000

080031a8 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0

ILI9341_Enable();
 80031ac:	f7ff fff0 	bl	8003190 <ILI9341_Enable>
ILI9341_SPI_Init();
 80031b0:	f7ff fecc 	bl	8002f4c <ILI9341_SPI_Init>
ILI9341_Reset();
 80031b4:	f7ff ff7c 	bl	80030b0 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80031b8:	2001      	movs	r0, #1
 80031ba:	f7ff fee9 	bl	8002f90 <ILI9341_Write_Command>
HAL_Delay(1000);
 80031be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031c2:	f000 fd5f 	bl	8003c84 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80031c6:	20cb      	movs	r0, #203	; 0xcb
 80031c8:	f7ff fee2 	bl	8002f90 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80031cc:	2039      	movs	r0, #57	; 0x39
 80031ce:	f7ff ff01 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80031d2:	202c      	movs	r0, #44	; 0x2c
 80031d4:	f7ff fefe 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80031d8:	2000      	movs	r0, #0
 80031da:	f7ff fefb 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80031de:	2034      	movs	r0, #52	; 0x34
 80031e0:	f7ff fef8 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80031e4:	2002      	movs	r0, #2
 80031e6:	f7ff fef5 	bl	8002fd4 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80031ea:	20cf      	movs	r0, #207	; 0xcf
 80031ec:	f7ff fed0 	bl	8002f90 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80031f0:	2000      	movs	r0, #0
 80031f2:	f7ff feef 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80031f6:	20c1      	movs	r0, #193	; 0xc1
 80031f8:	f7ff feec 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80031fc:	2030      	movs	r0, #48	; 0x30
 80031fe:	f7ff fee9 	bl	8002fd4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8003202:	20e8      	movs	r0, #232	; 0xe8
 8003204:	f7ff fec4 	bl	8002f90 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8003208:	2085      	movs	r0, #133	; 0x85
 800320a:	f7ff fee3 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800320e:	2000      	movs	r0, #0
 8003210:	f7ff fee0 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8003214:	2078      	movs	r0, #120	; 0x78
 8003216:	f7ff fedd 	bl	8002fd4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 800321a:	20ea      	movs	r0, #234	; 0xea
 800321c:	f7ff feb8 	bl	8002f90 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8003220:	2000      	movs	r0, #0
 8003222:	f7ff fed7 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8003226:	2000      	movs	r0, #0
 8003228:	f7ff fed4 	bl	8002fd4 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 800322c:	20ed      	movs	r0, #237	; 0xed
 800322e:	f7ff feaf 	bl	8002f90 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8003232:	2064      	movs	r0, #100	; 0x64
 8003234:	f7ff fece 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8003238:	2003      	movs	r0, #3
 800323a:	f7ff fecb 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800323e:	2012      	movs	r0, #18
 8003240:	f7ff fec8 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8003244:	2081      	movs	r0, #129	; 0x81
 8003246:	f7ff fec5 	bl	8002fd4 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800324a:	20f7      	movs	r0, #247	; 0xf7
 800324c:	f7ff fea0 	bl	8002f90 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8003250:	2020      	movs	r0, #32
 8003252:	f7ff febf 	bl	8002fd4 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8003256:	20c0      	movs	r0, #192	; 0xc0
 8003258:	f7ff fe9a 	bl	8002f90 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 800325c:	2023      	movs	r0, #35	; 0x23
 800325e:	f7ff feb9 	bl	8002fd4 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8003262:	20c1      	movs	r0, #193	; 0xc1
 8003264:	f7ff fe94 	bl	8002f90 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8003268:	2010      	movs	r0, #16
 800326a:	f7ff feb3 	bl	8002fd4 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800326e:	20c5      	movs	r0, #197	; 0xc5
 8003270:	f7ff fe8e 	bl	8002f90 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8003274:	203e      	movs	r0, #62	; 0x3e
 8003276:	f7ff fead 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800327a:	2028      	movs	r0, #40	; 0x28
 800327c:	f7ff feaa 	bl	8002fd4 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8003280:	20c7      	movs	r0, #199	; 0xc7
 8003282:	f7ff fe85 	bl	8002f90 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8003286:	2086      	movs	r0, #134	; 0x86
 8003288:	f7ff fea4 	bl	8002fd4 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 800328c:	2036      	movs	r0, #54	; 0x36
 800328e:	f7ff fe7f 	bl	8002f90 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8003292:	2048      	movs	r0, #72	; 0x48
 8003294:	f7ff fe9e 	bl	8002fd4 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8003298:	203a      	movs	r0, #58	; 0x3a
 800329a:	f7ff fe79 	bl	8002f90 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800329e:	2055      	movs	r0, #85	; 0x55
 80032a0:	f7ff fe98 	bl	8002fd4 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80032a4:	20b1      	movs	r0, #177	; 0xb1
 80032a6:	f7ff fe73 	bl	8002f90 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80032aa:	2000      	movs	r0, #0
 80032ac:	f7ff fe92 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80032b0:	2018      	movs	r0, #24
 80032b2:	f7ff fe8f 	bl	8002fd4 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80032b6:	20b6      	movs	r0, #182	; 0xb6
 80032b8:	f7ff fe6a 	bl	8002f90 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80032bc:	2008      	movs	r0, #8
 80032be:	f7ff fe89 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80032c2:	2082      	movs	r0, #130	; 0x82
 80032c4:	f7ff fe86 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80032c8:	2027      	movs	r0, #39	; 0x27
 80032ca:	f7ff fe83 	bl	8002fd4 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80032ce:	20f2      	movs	r0, #242	; 0xf2
 80032d0:	f7ff fe5e 	bl	8002f90 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80032d4:	2000      	movs	r0, #0
 80032d6:	f7ff fe7d 	bl	8002fd4 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80032da:	2026      	movs	r0, #38	; 0x26
 80032dc:	f7ff fe58 	bl	8002f90 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80032e0:	2001      	movs	r0, #1
 80032e2:	f7ff fe77 	bl	8002fd4 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80032e6:	20e0      	movs	r0, #224	; 0xe0
 80032e8:	f7ff fe52 	bl	8002f90 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80032ec:	200f      	movs	r0, #15
 80032ee:	f7ff fe71 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80032f2:	2031      	movs	r0, #49	; 0x31
 80032f4:	f7ff fe6e 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80032f8:	202b      	movs	r0, #43	; 0x2b
 80032fa:	f7ff fe6b 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80032fe:	200c      	movs	r0, #12
 8003300:	f7ff fe68 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8003304:	200e      	movs	r0, #14
 8003306:	f7ff fe65 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800330a:	2008      	movs	r0, #8
 800330c:	f7ff fe62 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8003310:	204e      	movs	r0, #78	; 0x4e
 8003312:	f7ff fe5f 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8003316:	20f1      	movs	r0, #241	; 0xf1
 8003318:	f7ff fe5c 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 800331c:	2037      	movs	r0, #55	; 0x37
 800331e:	f7ff fe59 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8003322:	2007      	movs	r0, #7
 8003324:	f7ff fe56 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8003328:	2010      	movs	r0, #16
 800332a:	f7ff fe53 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800332e:	2003      	movs	r0, #3
 8003330:	f7ff fe50 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8003334:	200e      	movs	r0, #14
 8003336:	f7ff fe4d 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800333a:	2009      	movs	r0, #9
 800333c:	f7ff fe4a 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8003340:	2000      	movs	r0, #0
 8003342:	f7ff fe47 	bl	8002fd4 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8003346:	20e1      	movs	r0, #225	; 0xe1
 8003348:	f7ff fe22 	bl	8002f90 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800334c:	2000      	movs	r0, #0
 800334e:	f7ff fe41 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8003352:	200e      	movs	r0, #14
 8003354:	f7ff fe3e 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8003358:	2014      	movs	r0, #20
 800335a:	f7ff fe3b 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800335e:	2003      	movs	r0, #3
 8003360:	f7ff fe38 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8003364:	2011      	movs	r0, #17
 8003366:	f7ff fe35 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800336a:	2007      	movs	r0, #7
 800336c:	f7ff fe32 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8003370:	2031      	movs	r0, #49	; 0x31
 8003372:	f7ff fe2f 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8003376:	20c1      	movs	r0, #193	; 0xc1
 8003378:	f7ff fe2c 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 800337c:	2048      	movs	r0, #72	; 0x48
 800337e:	f7ff fe29 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8003382:	2008      	movs	r0, #8
 8003384:	f7ff fe26 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8003388:	200f      	movs	r0, #15
 800338a:	f7ff fe23 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800338e:	200c      	movs	r0, #12
 8003390:	f7ff fe20 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8003394:	2031      	movs	r0, #49	; 0x31
 8003396:	f7ff fe1d 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800339a:	2036      	movs	r0, #54	; 0x36
 800339c:	f7ff fe1a 	bl	8002fd4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80033a0:	200f      	movs	r0, #15
 80033a2:	f7ff fe17 	bl	8002fd4 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80033a6:	2011      	movs	r0, #17
 80033a8:	f7ff fdf2 	bl	8002f90 <ILI9341_Write_Command>
HAL_Delay(120);
 80033ac:	2078      	movs	r0, #120	; 0x78
 80033ae:	f000 fc69 	bl	8003c84 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 80033b2:	2029      	movs	r0, #41	; 0x29
 80033b4:	f7ff fdec 	bl	8002f90 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80033b8:	2000      	movs	r0, #0
 80033ba:	f7ff fe97 	bl	80030ec <ILI9341_Set_Rotation>
}
 80033be:	bf00      	nop
 80033c0:	bd80      	pop	{r7, pc}
	...

080033c4 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80033c4:	b5b0      	push	{r4, r5, r7, lr}
 80033c6:	b08c      	sub	sp, #48	; 0x30
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	6039      	str	r1, [r7, #0]
 80033ce:	80fb      	strh	r3, [r7, #6]
 80033d0:	466b      	mov	r3, sp
 80033d2:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80033e0:	d202      	bcs.n	80033e8 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
 80033e6:	e002      	b.n	80033ee <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80033e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80033ee:	2201      	movs	r2, #1
 80033f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033f4:	483e      	ldr	r0, [pc, #248]	; (80034f0 <ILI9341_Draw_Colour_Burst+0x12c>)
 80033f6:	f001 faef 	bl	80049d8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80033fa:	2200      	movs	r2, #0
 80033fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003400:	483b      	ldr	r0, [pc, #236]	; (80034f0 <ILI9341_Draw_Colour_Burst+0x12c>)
 8003402:	f001 fae9 	bl	80049d8 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	0a1b      	lsrs	r3, r3, #8
 800340a:	b29b      	uxth	r3, r3
 800340c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8003410:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003412:	4623      	mov	r3, r4
 8003414:	3b01      	subs	r3, #1
 8003416:	61fb      	str	r3, [r7, #28]
 8003418:	4620      	mov	r0, r4
 800341a:	f04f 0100 	mov.w	r1, #0
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	00cb      	lsls	r3, r1, #3
 8003428:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800342c:	00c2      	lsls	r2, r0, #3
 800342e:	4620      	mov	r0, r4
 8003430:	f04f 0100 	mov.w	r1, #0
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	00cb      	lsls	r3, r1, #3
 800343e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003442:	00c2      	lsls	r2, r0, #3
 8003444:	1de3      	adds	r3, r4, #7
 8003446:	08db      	lsrs	r3, r3, #3
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	ebad 0d03 	sub.w	sp, sp, r3
 800344e:	466b      	mov	r3, sp
 8003450:	3300      	adds	r3, #0
 8003452:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8003454:	2300      	movs	r3, #0
 8003456:	62bb      	str	r3, [r7, #40]	; 0x28
 8003458:	e00e      	b.n	8003478 <ILI9341_Draw_Colour_Burst+0xb4>
	{
		burst_buffer[j] = 	chifted;
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345e:	4413      	add	r3, r2
 8003460:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003464:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8003466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003468:	3301      	adds	r3, #1
 800346a:	88fa      	ldrh	r2, [r7, #6]
 800346c:	b2d1      	uxtb	r1, r2
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8003472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003474:	3302      	adds	r3, #2
 8003476:	62bb      	str	r3, [r7, #40]	; 0x28
 8003478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	429a      	cmp	r2, r3
 800347e:	d3ec      	bcc.n	800345a <ILI9341_Draw_Colour_Burst+0x96>
	}

uint32_t Sending_Size = Size*2;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	fbb2 f3f3 	udiv	r3, r2, r3
 800348e:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003494:	fbb3 f2f2 	udiv	r2, r3, r2
 8003498:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800349a:	fb01 f202 	mul.w	r2, r1, r2
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d010      	beq.n	80034ca <ILI9341_Draw_Colour_Burst+0x106>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80034a8:	2300      	movs	r3, #0
 80034aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ac:	e009      	b.n	80034c2 <ILI9341_Draw_Colour_Burst+0xfe>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80034ae:	69b9      	ldr	r1, [r7, #24]
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	230a      	movs	r3, #10
 80034b6:	480f      	ldr	r0, [pc, #60]	; (80034f4 <ILI9341_Draw_Colour_Burst+0x130>)
 80034b8:	f002 ffb3 	bl	8006422 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80034bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034be:	3301      	adds	r3, #1
 80034c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d3f1      	bcc.n	80034ae <ILI9341_Draw_Colour_Burst+0xea>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80034ca:	69b9      	ldr	r1, [r7, #24]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	230a      	movs	r3, #10
 80034d2:	4808      	ldr	r0, [pc, #32]	; (80034f4 <ILI9341_Draw_Colour_Burst+0x130>)
 80034d4:	f002 ffa5 	bl	8006422 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80034d8:	2201      	movs	r2, #1
 80034da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034de:	4804      	ldr	r0, [pc, #16]	; (80034f0 <ILI9341_Draw_Colour_Burst+0x12c>)
 80034e0:	f001 fa7a 	bl	80049d8 <HAL_GPIO_WritePin>
 80034e4:	46ad      	mov	sp, r5
}
 80034e6:	bf00      	nop
 80034e8:	3730      	adds	r7, #48	; 0x30
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bdb0      	pop	{r4, r5, r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40020000 	.word	0x40020000
 80034f4:	2000033c 	.word	0x2000033c

080034f8 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8003502:	4b0e      	ldr	r3, [pc, #56]	; (800353c <ILI9341_Fill_Screen+0x44>)
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	b29a      	uxth	r2, r3
 8003508:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <ILI9341_Fill_Screen+0x48>)
 800350a:	881b      	ldrh	r3, [r3, #0]
 800350c:	b29b      	uxth	r3, r3
 800350e:	2100      	movs	r1, #0
 8003510:	2000      	movs	r0, #0
 8003512:	f7ff fd81 	bl	8003018 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8003516:	4b09      	ldr	r3, [pc, #36]	; (800353c <ILI9341_Fill_Screen+0x44>)
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	b29b      	uxth	r3, r3
 800351c:	461a      	mov	r2, r3
 800351e:	4b08      	ldr	r3, [pc, #32]	; (8003540 <ILI9341_Fill_Screen+0x48>)
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	b29b      	uxth	r3, r3
 8003524:	fb03 f302 	mul.w	r3, r3, r2
 8003528:	461a      	mov	r2, r3
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	4611      	mov	r1, r2
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff ff48 	bl	80033c4 <ILI9341_Draw_Colour_Burst>
}
 8003534:	bf00      	nop
 8003536:	3708      	adds	r7, #8
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	20000016 	.word	0x20000016
 8003540:	20000014 	.word	0x20000014

08003544 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	80fb      	strh	r3, [r7, #6]
 800354e:	460b      	mov	r3, r1
 8003550:	80bb      	strh	r3, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8003556:	4b64      	ldr	r3, [pc, #400]	; (80036e8 <ILI9341_Draw_Pixel+0x1a4>)
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	b29b      	uxth	r3, r3
 800355c:	88fa      	ldrh	r2, [r7, #6]
 800355e:	429a      	cmp	r2, r3
 8003560:	f080 80be 	bcs.w	80036e0 <ILI9341_Draw_Pixel+0x19c>
 8003564:	4b61      	ldr	r3, [pc, #388]	; (80036ec <ILI9341_Draw_Pixel+0x1a8>)
 8003566:	881b      	ldrh	r3, [r3, #0]
 8003568:	b29b      	uxth	r3, r3
 800356a:	88ba      	ldrh	r2, [r7, #4]
 800356c:	429a      	cmp	r2, r3
 800356e:	f080 80b7 	bcs.w	80036e0 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8003572:	2200      	movs	r2, #0
 8003574:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003578:	485d      	ldr	r0, [pc, #372]	; (80036f0 <ILI9341_Draw_Pixel+0x1ac>)
 800357a:	f001 fa2d 	bl	80049d8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800357e:	2200      	movs	r2, #0
 8003580:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003584:	485a      	ldr	r0, [pc, #360]	; (80036f0 <ILI9341_Draw_Pixel+0x1ac>)
 8003586:	f001 fa27 	bl	80049d8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 800358a:	202a      	movs	r0, #42	; 0x2a
 800358c:	f7ff fcee 	bl	8002f6c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8003590:	2201      	movs	r2, #1
 8003592:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003596:	4856      	ldr	r0, [pc, #344]	; (80036f0 <ILI9341_Draw_Pixel+0x1ac>)
 8003598:	f001 fa1e 	bl	80049d8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800359c:	2201      	movs	r2, #1
 800359e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035a2:	4853      	ldr	r0, [pc, #332]	; (80036f0 <ILI9341_Draw_Pixel+0x1ac>)
 80035a4:	f001 fa18 	bl	80049d8 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80035a8:	2200      	movs	r2, #0
 80035aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035ae:	4850      	ldr	r0, [pc, #320]	; (80036f0 <ILI9341_Draw_Pixel+0x1ac>)
 80035b0:	f001 fa12 	bl	80049d8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80035b4:	88fb      	ldrh	r3, [r7, #6]
 80035b6:	0a1b      	lsrs	r3, r3, #8
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	753b      	strb	r3, [r7, #20]
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	757b      	strb	r3, [r7, #21]
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	3301      	adds	r3, #1
 80035c8:	121b      	asrs	r3, r3, #8
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	75bb      	strb	r3, [r7, #22]
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	3301      	adds	r3, #1
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80035d8:	f107 0114 	add.w	r1, r7, #20
 80035dc:	2301      	movs	r3, #1
 80035de:	2204      	movs	r2, #4
 80035e0:	4844      	ldr	r0, [pc, #272]	; (80036f4 <ILI9341_Draw_Pixel+0x1b0>)
 80035e2:	f002 ff1e 	bl	8006422 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80035e6:	2201      	movs	r2, #1
 80035e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035ec:	4840      	ldr	r0, [pc, #256]	; (80036f0 <ILI9341_Draw_Pixel+0x1ac>)
 80035ee:	f001 f9f3 	bl	80049d8 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80035f2:	2200      	movs	r2, #0
 80035f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035f8:	483d      	ldr	r0, [pc, #244]	; (80036f0 <ILI9341_Draw_Pixel+0x1ac>)
 80035fa:	f001 f9ed 	bl	80049d8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80035fe:	2200      	movs	r2, #0
 8003600:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003604:	483a      	ldr	r0, [pc, #232]	; (80036f0 <ILI9341_Draw_Pixel+0x1ac>)
 8003606:	f001 f9e7 	bl	80049d8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800360a:	202b      	movs	r0, #43	; 0x2b
 800360c:	f7ff fcae 	bl	8002f6c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8003610:	2201      	movs	r2, #1
 8003612:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003616:	4836      	ldr	r0, [pc, #216]	; (80036f0 <ILI9341_Draw_Pixel+0x1ac>)
 8003618:	f001 f9de 	bl	80049d8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800361c:	2201      	movs	r2, #1
 800361e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003622:	4833      	ldr	r0, [pc, #204]	; (80036f0 <ILI9341_Draw_Pixel+0x1ac>)
 8003624:	f001 f9d8 	bl	80049d8 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003628:	2200      	movs	r2, #0
 800362a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800362e:	4830      	ldr	r0, [pc, #192]	; (80036f0 <ILI9341_Draw_Pixel+0x1ac>)
 8003630:	f001 f9d2 	bl	80049d8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8003634:	88bb      	ldrh	r3, [r7, #4]
 8003636:	0a1b      	lsrs	r3, r3, #8
 8003638:	b29b      	uxth	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	743b      	strb	r3, [r7, #16]
 800363e:	88bb      	ldrh	r3, [r7, #4]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	747b      	strb	r3, [r7, #17]
 8003644:	88bb      	ldrh	r3, [r7, #4]
 8003646:	3301      	adds	r3, #1
 8003648:	121b      	asrs	r3, r3, #8
 800364a:	b2db      	uxtb	r3, r3
 800364c:	74bb      	strb	r3, [r7, #18]
 800364e:	88bb      	ldrh	r3, [r7, #4]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	3301      	adds	r3, #1
 8003654:	b2db      	uxtb	r3, r3
 8003656:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8003658:	f107 0110 	add.w	r1, r7, #16
 800365c:	2301      	movs	r3, #1
 800365e:	2204      	movs	r2, #4
 8003660:	4824      	ldr	r0, [pc, #144]	; (80036f4 <ILI9341_Draw_Pixel+0x1b0>)
 8003662:	f002 fede 	bl	8006422 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003666:	2201      	movs	r2, #1
 8003668:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800366c:	4820      	ldr	r0, [pc, #128]	; (80036f0 <ILI9341_Draw_Pixel+0x1ac>)
 800366e:	f001 f9b3 	bl	80049d8 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8003672:	2200      	movs	r2, #0
 8003674:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003678:	481d      	ldr	r0, [pc, #116]	; (80036f0 <ILI9341_Draw_Pixel+0x1ac>)
 800367a:	f001 f9ad 	bl	80049d8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800367e:	2200      	movs	r2, #0
 8003680:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003684:	481a      	ldr	r0, [pc, #104]	; (80036f0 <ILI9341_Draw_Pixel+0x1ac>)
 8003686:	f001 f9a7 	bl	80049d8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 800368a:	202c      	movs	r0, #44	; 0x2c
 800368c:	f7ff fc6e 	bl	8002f6c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8003690:	2201      	movs	r2, #1
 8003692:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003696:	4816      	ldr	r0, [pc, #88]	; (80036f0 <ILI9341_Draw_Pixel+0x1ac>)
 8003698:	f001 f99e 	bl	80049d8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800369c:	2201      	movs	r2, #1
 800369e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036a2:	4813      	ldr	r0, [pc, #76]	; (80036f0 <ILI9341_Draw_Pixel+0x1ac>)
 80036a4:	f001 f998 	bl	80049d8 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80036a8:	2200      	movs	r2, #0
 80036aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036ae:	4810      	ldr	r0, [pc, #64]	; (80036f0 <ILI9341_Draw_Pixel+0x1ac>)
 80036b0:	f001 f992 	bl	80049d8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80036b4:	887b      	ldrh	r3, [r7, #2]
 80036b6:	0a1b      	lsrs	r3, r3, #8
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	733b      	strb	r3, [r7, #12]
 80036be:	887b      	ldrh	r3, [r7, #2]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80036c4:	f107 010c 	add.w	r1, r7, #12
 80036c8:	2301      	movs	r3, #1
 80036ca:	2202      	movs	r2, #2
 80036cc:	4809      	ldr	r0, [pc, #36]	; (80036f4 <ILI9341_Draw_Pixel+0x1b0>)
 80036ce:	f002 fea8 	bl	8006422 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80036d2:	2201      	movs	r2, #1
 80036d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036d8:	4805      	ldr	r0, [pc, #20]	; (80036f0 <ILI9341_Draw_Pixel+0x1ac>)
 80036da:	f001 f97d 	bl	80049d8 <HAL_GPIO_WritePin>
 80036de:	e000      	b.n	80036e2 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80036e0:	bf00      	nop
	
}
 80036e2:	3718      	adds	r7, #24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	20000016 	.word	0x20000016
 80036ec:	20000014 	.word	0x20000014
 80036f0:	40020000 	.word	0x40020000
 80036f4:	2000033c 	.word	0x2000033c

080036f8 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 80036f8:	b590      	push	{r4, r7, lr}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4604      	mov	r4, r0
 8003700:	4608      	mov	r0, r1
 8003702:	4611      	mov	r1, r2
 8003704:	461a      	mov	r2, r3
 8003706:	4623      	mov	r3, r4
 8003708:	80fb      	strh	r3, [r7, #6]
 800370a:	4603      	mov	r3, r0
 800370c:	80bb      	strh	r3, [r7, #4]
 800370e:	460b      	mov	r3, r1
 8003710:	807b      	strh	r3, [r7, #2]
 8003712:	4613      	mov	r3, r2
 8003714:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8003716:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <ILI9341_Draw_Rectangle+0xb0>)
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	b29b      	uxth	r3, r3
 800371c:	88fa      	ldrh	r2, [r7, #6]
 800371e:	429a      	cmp	r2, r3
 8003720:	d23d      	bcs.n	800379e <ILI9341_Draw_Rectangle+0xa6>
 8003722:	4b22      	ldr	r3, [pc, #136]	; (80037ac <ILI9341_Draw_Rectangle+0xb4>)
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	b29b      	uxth	r3, r3
 8003728:	88ba      	ldrh	r2, [r7, #4]
 800372a:	429a      	cmp	r2, r3
 800372c:	d237      	bcs.n	800379e <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 800372e:	88fa      	ldrh	r2, [r7, #6]
 8003730:	887b      	ldrh	r3, [r7, #2]
 8003732:	4413      	add	r3, r2
 8003734:	4a1c      	ldr	r2, [pc, #112]	; (80037a8 <ILI9341_Draw_Rectangle+0xb0>)
 8003736:	8812      	ldrh	r2, [r2, #0]
 8003738:	b292      	uxth	r2, r2
 800373a:	4293      	cmp	r3, r2
 800373c:	dd05      	ble.n	800374a <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 800373e:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <ILI9341_Draw_Rectangle+0xb0>)
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	b29a      	uxth	r2, r3
 8003744:	88fb      	ldrh	r3, [r7, #6]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 800374a:	88ba      	ldrh	r2, [r7, #4]
 800374c:	883b      	ldrh	r3, [r7, #0]
 800374e:	4413      	add	r3, r2
 8003750:	4a16      	ldr	r2, [pc, #88]	; (80037ac <ILI9341_Draw_Rectangle+0xb4>)
 8003752:	8812      	ldrh	r2, [r2, #0]
 8003754:	b292      	uxth	r2, r2
 8003756:	4293      	cmp	r3, r2
 8003758:	dd05      	ble.n	8003766 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 800375a:	4b14      	ldr	r3, [pc, #80]	; (80037ac <ILI9341_Draw_Rectangle+0xb4>)
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	b29a      	uxth	r2, r3
 8003760:	88bb      	ldrh	r3, [r7, #4]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8003766:	88fa      	ldrh	r2, [r7, #6]
 8003768:	887b      	ldrh	r3, [r7, #2]
 800376a:	4413      	add	r3, r2
 800376c:	b29b      	uxth	r3, r3
 800376e:	3b01      	subs	r3, #1
 8003770:	b29c      	uxth	r4, r3
 8003772:	88ba      	ldrh	r2, [r7, #4]
 8003774:	883b      	ldrh	r3, [r7, #0]
 8003776:	4413      	add	r3, r2
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b29b      	uxth	r3, r3
 800377e:	88b9      	ldrh	r1, [r7, #4]
 8003780:	88f8      	ldrh	r0, [r7, #6]
 8003782:	4622      	mov	r2, r4
 8003784:	f7ff fc48 	bl	8003018 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8003788:	883b      	ldrh	r3, [r7, #0]
 800378a:	887a      	ldrh	r2, [r7, #2]
 800378c:	fb02 f303 	mul.w	r3, r2, r3
 8003790:	461a      	mov	r2, r3
 8003792:	8b3b      	ldrh	r3, [r7, #24]
 8003794:	4611      	mov	r1, r2
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff fe14 	bl	80033c4 <ILI9341_Draw_Colour_Burst>
 800379c:	e000      	b.n	80037a0 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800379e:	bf00      	nop
}
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd90      	pop	{r4, r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000016 	.word	0x20000016
 80037ac:	20000014 	.word	0x20000014

080037b0 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f4xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 80037b6:	2310      	movs	r3, #16
 80037b8:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 80037ba:	2300      	movs	r3, #0
 80037bc:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 80037be:	e019      	b.n	80037f4 <TP_Read+0x44>
    {
        value <<= 1;
 80037c0:	88bb      	ldrh	r3, [r7, #4]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 80037c6:	2201      	movs	r2, #1
 80037c8:	2102      	movs	r1, #2
 80037ca:	480e      	ldr	r0, [pc, #56]	; (8003804 <TP_Read+0x54>)
 80037cc:	f001 f904 	bl	80049d8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 80037d0:	2200      	movs	r2, #0
 80037d2:	2102      	movs	r1, #2
 80037d4:	480b      	ldr	r0, [pc, #44]	; (8003804 <TP_Read+0x54>)
 80037d6:	f001 f8ff 	bl	80049d8 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 80037da:	2110      	movs	r1, #16
 80037dc:	4809      	ldr	r0, [pc, #36]	; (8003804 <TP_Read+0x54>)
 80037de:	f001 f8e3 	bl	80049a8 <HAL_GPIO_ReadPin>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <TP_Read+0x3e>
        {
            value++;
 80037e8:	88bb      	ldrh	r3, [r7, #4]
 80037ea:	3301      	adds	r3, #1
 80037ec:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	3b01      	subs	r3, #1
 80037f2:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1e2      	bne.n	80037c0 <TP_Read+0x10>
    };

    return value;
 80037fa:	88bb      	ldrh	r3, [r7, #4]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	40021400 	.word	0x40021400

08003808 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8003812:	2308      	movs	r3, #8
 8003814:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 8003816:	2200      	movs	r2, #0
 8003818:	2102      	movs	r1, #2
 800381a:	4815      	ldr	r0, [pc, #84]	; (8003870 <TP_Write+0x68>)
 800381c:	f001 f8dc 	bl	80049d8 <HAL_GPIO_WritePin>
	
    while(i > 0)
 8003820:	e01e      	b.n	8003860 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	2b00      	cmp	r3, #0
 8003828:	da05      	bge.n	8003836 <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 800382a:	2201      	movs	r2, #1
 800382c:	2108      	movs	r1, #8
 800382e:	4810      	ldr	r0, [pc, #64]	; (8003870 <TP_Write+0x68>)
 8003830:	f001 f8d2 	bl	80049d8 <HAL_GPIO_WritePin>
 8003834:	e004      	b.n	8003840 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8003836:	2200      	movs	r2, #0
 8003838:	2108      	movs	r1, #8
 800383a:	480d      	ldr	r0, [pc, #52]	; (8003870 <TP_Write+0x68>)
 800383c:	f001 f8cc 	bl	80049d8 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8003840:	79fb      	ldrb	r3, [r7, #7]
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8003846:	2201      	movs	r2, #1
 8003848:	2102      	movs	r1, #2
 800384a:	4809      	ldr	r0, [pc, #36]	; (8003870 <TP_Write+0x68>)
 800384c:	f001 f8c4 	bl	80049d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8003850:	2200      	movs	r2, #0
 8003852:	2102      	movs	r1, #2
 8003854:	4806      	ldr	r0, [pc, #24]	; (8003870 <TP_Write+0x68>)
 8003856:	f001 f8bf 	bl	80049d8 <HAL_GPIO_WritePin>
        i--;
 800385a:	7bfb      	ldrb	r3, [r7, #15]
 800385c:	3b01      	subs	r3, #1
 800385e:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8003860:	7bfb      	ldrb	r3, [r7, #15]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1dd      	bne.n	8003822 <TP_Write+0x1a>
    };
}
 8003866:	bf00      	nop
 8003868:	bf00      	nop
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40021400 	.word	0x40021400
 8003874:	00000000 	.word	0x00000000

08003878 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8003878:	b590      	push	{r4, r7, lr}
 800387a:	b08b      	sub	sp, #44	; 0x2c
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 8003880:	2201      	movs	r2, #1
 8003882:	2102      	movs	r1, #2
 8003884:	4864      	ldr	r0, [pc, #400]	; (8003a18 <TP_Read_Coordinates+0x1a0>)
 8003886:	f001 f8a7 	bl	80049d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 800388a:	2201      	movs	r2, #1
 800388c:	2108      	movs	r1, #8
 800388e:	4862      	ldr	r0, [pc, #392]	; (8003a18 <TP_Read_Coordinates+0x1a0>)
 8003890:	f001 f8a2 	bl	80049d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 8003894:	2201      	movs	r2, #1
 8003896:	2104      	movs	r1, #4
 8003898:	485f      	ldr	r0, [pc, #380]	; (8003a18 <TP_Read_Coordinates+0x1a0>)
 800389a:	f001 f89d 	bl	80049d8 <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 800389e:	2300      	movs	r3, #0
 80038a0:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 80038a2:	2300      	movs	r3, #0
 80038a4:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 80038aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ae:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 80038b0:	2300      	movs	r3, #0
 80038b2:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 80038b4:	2200      	movs	r2, #0
 80038b6:	2104      	movs	r1, #4
 80038b8:	4857      	ldr	r0, [pc, #348]	; (8003a18 <TP_Read_Coordinates+0x1a0>)
 80038ba:	f001 f88d 	bl	80049d8 <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80038be:	e023      	b.n	8003908 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 80038c0:	2090      	movs	r0, #144	; 0x90
 80038c2:	f7ff ffa1 	bl	8003808 <TP_Write>

				rawy = TP_Read();	
 80038c6:	f7ff ff73 	bl	80037b0 <TP_Read>
 80038ca:	4603      	mov	r3, r0
 80038cc:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 80038ce:	89fb      	ldrh	r3, [r7, #14]
 80038d0:	6a3a      	ldr	r2, [r7, #32]
 80038d2:	4413      	add	r3, r2
 80038d4:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 80038d6:	89fb      	ldrh	r3, [r7, #14]
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4413      	add	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 80038de:	20d0      	movs	r0, #208	; 0xd0
 80038e0:	f7ff ff92 	bl	8003808 <TP_Write>
        rawx = TP_Read();
 80038e4:	f7ff ff64 	bl	80037b0 <TP_Read>
 80038e8:	4603      	mov	r3, r0
 80038ea:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 80038ec:	89bb      	ldrh	r3, [r7, #12]
 80038ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f0:	4413      	add	r3, r2
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
				calculating_x += rawx;
 80038f4:	89bb      	ldrh	r3, [r7, #12]
 80038f6:	69fa      	ldr	r2, [r7, #28]
 80038f8:	4413      	add	r3, r2
 80038fa:	61fb      	str	r3, [r7, #28]
        samples--;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	3b01      	subs	r3, #1
 8003900:	617b      	str	r3, [r7, #20]
				counted_samples++;
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	3301      	adds	r3, #1
 8003906:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d006      	beq.n	800391c <TP_Read_Coordinates+0xa4>
 800390e:	2120      	movs	r1, #32
 8003910:	4841      	ldr	r0, [pc, #260]	; (8003a18 <TP_Read_Coordinates+0x1a0>)
 8003912:	f001 f849 	bl	80049a8 <HAL_GPIO_ReadPin>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0d1      	beq.n	80038c0 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 800391c:	2201      	movs	r2, #1
 800391e:	2104      	movs	r1, #4
 8003920:	483d      	ldr	r0, [pc, #244]	; (8003a18 <TP_Read_Coordinates+0x1a0>)
 8003922:	f001 f859 	bl	80049d8 <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800392c:	d164      	bne.n	80039f8 <TP_Read_Coordinates+0x180>
 800392e:	2120      	movs	r1, #32
 8003930:	4839      	ldr	r0, [pc, #228]	; (8003a18 <TP_Read_Coordinates+0x1a0>)
 8003932:	f001 f839 	bl	80049a8 <HAL_GPIO_ReadPin>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d15d      	bne.n	80039f8 <TP_Read_Coordinates+0x180>
		{
		
		calculating_x /= counted_samples;
 800393c:	69fa      	ldr	r2, [r7, #28]
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	fbb2 f3f3 	udiv	r3, r2, r3
 8003944:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	fbb2 f3f3 	udiv	r3, r2, r3
 800394e:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8003958:	89bb      	ldrh	r3, [r7, #12]
 800395a:	425b      	negs	r3, r3
 800395c:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 800395e:	89fb      	ldrh	r3, [r7, #14]
 8003960:	425b      	negs	r3, r3
 8003962:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
		// 65535/273 = 240!
		// 65535/204 = 320!
		Coordinates[0] = (((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE);
 8003964:	89ba      	ldrh	r2, [r7, #12]
 8003966:	4b2d      	ldr	r3, [pc, #180]	; (8003a1c <TP_Read_Coordinates+0x1a4>)
 8003968:	fba3 1302 	umull	r1, r3, r3, r2
 800396c:	1ad2      	subs	r2, r2, r3
 800396e:	0852      	lsrs	r2, r2, #1
 8003970:	4413      	add	r3, r2
 8003972:	0a1b      	lsrs	r3, r3, #8
 8003974:	b29b      	uxth	r3, r3
 8003976:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 800397a:	4618      	mov	r0, r3
 800397c:	f7fc fde2 	bl	8000544 <__aeabi_i2d>
 8003980:	a323      	add	r3, pc, #140	; (adr r3, 8003a10 <TP_Read_Coordinates+0x198>)
 8003982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003986:	f7fc fe47 	bl	8000618 <__aeabi_dmul>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	4610      	mov	r0, r2
 8003990:	4619      	mov	r1, r3
 8003992:	f7fd f919 	bl	8000bc8 <__aeabi_d2uiz>
 8003996:	4603      	mov	r3, r0
 8003998:	b29a      	uxth	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	801a      	strh	r2, [r3, #0]
		if (Coordinates[0] >= 105)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	2b68      	cmp	r3, #104	; 0x68
 80039a4:	d906      	bls.n	80039b4 <TP_Read_Coordinates+0x13c>
		{
			Coordinates[0] -= 105;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	3b69      	subs	r3, #105	; 0x69
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	801a      	strh	r2, [r3, #0]
 80039b2:	e005      	b.n	80039c0 <TP_Read_Coordinates+0x148>
		} else {
			Coordinates[0] += 160;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	33a0      	adds	r3, #160	; 0xa0
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	801a      	strh	r2, [r3, #0]
		}
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 80039c0:	89fb      	ldrh	r3, [r7, #14]
 80039c2:	4a17      	ldr	r2, [pc, #92]	; (8003a20 <TP_Read_Coordinates+0x1a8>)
 80039c4:	fba2 2303 	umull	r2, r3, r2, r3
 80039c8:	09db      	lsrs	r3, r3, #7
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b0f      	subs	r3, #15
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fc fdb8 	bl	8000544 <__aeabi_i2d>
 80039d4:	a30e      	add	r3, pc, #56	; (adr r3, 8003a10 <TP_Read_Coordinates+0x198>)
 80039d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039da:	f7fc fe1d 	bl	8000618 <__aeabi_dmul>
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	4610      	mov	r0, r2
 80039e4:	4619      	mov	r1, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	1c9c      	adds	r4, r3, #2
 80039ea:	f7fd f8ed 	bl	8000bc8 <__aeabi_d2uiz>
 80039ee:	4603      	mov	r3, r0
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	8023      	strh	r3, [r4, #0]
		
		return TOUCHPAD_DATA_OK;			
 80039f4:	2301      	movs	r3, #1
 80039f6:	e007      	b.n	8003a08 <TP_Read_Coordinates+0x190>
		}
		else
		{
			Coordinates[0] = 0;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	3302      	adds	r3, #2
 8003a02:	2200      	movs	r2, #0
 8003a04:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8003a06:	2300      	movs	r3, #0
		}
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	372c      	adds	r7, #44	; 0x2c
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd90      	pop	{r4, r7, pc}
 8003a10:	28f5c28f 	.word	0x28f5c28f
 8003a14:	3ff28f5c 	.word	0x3ff28f5c
 8003a18:	40021400 	.word	0x40021400
 8003a1c:	e01e01e1 	.word	0xe01e01e1
 8003a20:	a0a0a0a1 	.word	0xa0a0a0a1

08003a24 <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8003a28:	2120      	movs	r1, #32
 8003a2a:	4805      	ldr	r0, [pc, #20]	; (8003a40 <TP_Touchpad_Pressed+0x1c>)
 8003a2c:	f000 ffbc 	bl	80049a8 <HAL_GPIO_ReadPin>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8003a3a:	2300      	movs	r3, #0
	}
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40021400 	.word	0x40021400

08003a44 <am2320_Init>:
 */


#include "am2320.h"

Am2320_HandleTypeDef am2320_Init(I2C_HandleTypeDef* i2c_handle,uint8_t device_address) {
 8003a44:	b490      	push	{r4, r7}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	71fb      	strb	r3, [r7, #7]
	Am2320_HandleTypeDef AM2320_;
	AM2320_.i2c_handle = i2c_handle;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	613b      	str	r3, [r7, #16]
	AM2320_.device_address = device_address;
 8003a56:	79fb      	ldrb	r3, [r7, #7]
 8003a58:	753b      	strb	r3, [r7, #20]
	return AM2320_;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	461c      	mov	r4, r3
 8003a5e:	f107 0310 	add.w	r3, r7, #16
 8003a62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	3720      	adds	r7, #32
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc90      	pop	{r4, r7}
 8003a70:	4770      	bx	lr
	...

08003a74 <am2320_ReadValue>:

uint8_t am2320_ReadValue(Am2320_HandleTypeDef *am2320) {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af02      	add	r7, sp, #8
 8003a7a:	6078      	str	r0, [r7, #4]
	uint8_t registers[3] = { 0x03, 0x00, 0x04 };
 8003a7c:	4a26      	ldr	r2, [pc, #152]	; (8003b18 <am2320_ReadValue+0xa4>)
 8003a7e:	f107 030c 	add.w	r3, r7, #12
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	4611      	mov	r1, r2
 8003a86:	8019      	strh	r1, [r3, #0]
 8003a88:	3302      	adds	r3, #2
 8003a8a:	0c12      	lsrs	r2, r2, #16
 8003a8c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(am2320->i2c_handle, am2320->device_address, 0x00, 0,
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	791b      	ldrb	r3, [r3, #4]
 8003a96:	b299      	uxth	r1, r3
 8003a98:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f001 f8f7 	bl	8004c94 <HAL_I2C_Master_Transmit>
	HAL_MAX_DELAY);
	HAL_Delay(1);
 8003aa6:	2001      	movs	r0, #1
 8003aa8:	f000 f8ec 	bl	8003c84 <HAL_Delay>
	if (HAL_I2C_Master_Transmit(am2320->i2c_handle, am2320->device_address,registers, 3, HAL_MAX_DELAY) != HAL_OK) {
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6818      	ldr	r0, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	791b      	ldrb	r3, [r3, #4]
 8003ab4:	b299      	uxth	r1, r3
 8003ab6:	f107 020c 	add.w	r2, r7, #12
 8003aba:	f04f 33ff 	mov.w	r3, #4294967295
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	f001 f8e7 	bl	8004c94 <HAL_I2C_Master_Transmit>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <am2320_ReadValue+0x5c>
		return 1;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e01f      	b.n	8003b10 <am2320_ReadValue+0x9c>
	}
	HAL_Delay(2);
 8003ad0:	2002      	movs	r0, #2
 8003ad2:	f000 f8d7 	bl	8003c84 <HAL_Delay>
	if (HAL_I2C_Master_Receive(am2320->i2c_handle, am2320->device_address,am2320->data, 8, HAL_MAX_DELAY) != HAL_OK) {
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6818      	ldr	r0, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	791b      	ldrb	r3, [r3, #4]
 8003ade:	b299      	uxth	r1, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	1d5a      	adds	r2, r3, #5
 8003ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	2308      	movs	r3, #8
 8003aec:	f001 f9d0 	bl	8004e90 <HAL_I2C_Master_Receive>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <am2320_ReadValue+0x86>
		return 2;
 8003af6:	2302      	movs	r3, #2
 8003af8:	e00a      	b.n	8003b10 <am2320_ReadValue+0x9c>
	}
	if (am2320->data[1] != 0x04 && am2320->data[0] != 0x03) {
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	799b      	ldrb	r3, [r3, #6]
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d005      	beq.n	8003b0e <am2320_ReadValue+0x9a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	795b      	ldrb	r3, [r3, #5]
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d001      	beq.n	8003b0e <am2320_ReadValue+0x9a>
		return 3;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e000      	b.n	8003b10 <am2320_ReadValue+0x9c>
	}
	return 0;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	0800c4e8 	.word	0x0800c4e8

08003b1c <am2320_GetTemperatureAndHumidity>:

void am2320_GetTemperatureAndHumidity(Am2320_HandleTypeDef *am2320, float *temperature,float *humidity) {
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
	int read = am2320_ReadValue(am2320);
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f7ff ffa3 	bl	8003a74 <am2320_ReadValue>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	613b      	str	r3, [r7, #16]
	if (read) {
		// Simple exception handling
	}
	uint16_t temp_temperature = (am2320->data[5] | am2320->data[4] << 8);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	7a9b      	ldrb	r3, [r3, #10]
 8003b36:	b21a      	sxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	7a5b      	ldrb	r3, [r3, #9]
 8003b3c:	021b      	lsls	r3, r3, #8
 8003b3e:	b21b      	sxth	r3, r3
 8003b40:	4313      	orrs	r3, r2
 8003b42:	b21b      	sxth	r3, r3
 8003b44:	82fb      	strh	r3, [r7, #22]
	if (temp_temperature & 0x8000) {
 8003b46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	da05      	bge.n	8003b5a <am2320_GetTemperatureAndHumidity+0x3e>
		temp_temperature = -(int16_t) (temp_temperature & 0x7fff);
 8003b4e:	8afb      	ldrh	r3, [r7, #22]
 8003b50:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	425b      	negs	r3, r3
 8003b58:	82fb      	strh	r3, [r7, #22]
	} else {
		temp_temperature = (int16_t) temp_temperature;
	}
	*temperature = (float) temp_temperature / 10.0;
 8003b5a:	8afb      	ldrh	r3, [r7, #22]
 8003b5c:	ee07 3a90 	vmov	s15, r3
 8003b60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b64:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003b68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	edc3 7a00 	vstr	s15, [r3]
	*humidity = (float) (am2320->data[3] | am2320->data[2] << 8) / 10.0;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	7a1b      	ldrb	r3, [r3, #8]
 8003b76:	461a      	mov	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	79db      	ldrb	r3, [r3, #7]
 8003b7c:	021b      	lsls	r3, r3, #8
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	ee07 3a90 	vmov	s15, r3
 8003b84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b88:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003b8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	edc3 7a00 	vstr	s15, [r3]
}
 8003b96:	bf00      	nop
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ba4:	4b0e      	ldr	r3, [pc, #56]	; (8003be0 <HAL_Init+0x40>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a0d      	ldr	r2, [pc, #52]	; (8003be0 <HAL_Init+0x40>)
 8003baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <HAL_Init+0x40>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a0a      	ldr	r2, [pc, #40]	; (8003be0 <HAL_Init+0x40>)
 8003bb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bbc:	4b08      	ldr	r3, [pc, #32]	; (8003be0 <HAL_Init+0x40>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a07      	ldr	r2, [pc, #28]	; (8003be0 <HAL_Init+0x40>)
 8003bc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bc8:	2003      	movs	r0, #3
 8003bca:	f000 fd0d 	bl	80045e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bce:	200f      	movs	r0, #15
 8003bd0:	f000 f808 	bl	8003be4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bd4:	f7fe fbf2 	bl	80023bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40023c00 	.word	0x40023c00

08003be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bec:	4b12      	ldr	r3, [pc, #72]	; (8003c38 <HAL_InitTick+0x54>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	4b12      	ldr	r3, [pc, #72]	; (8003c3c <HAL_InitTick+0x58>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fd17 	bl	8004636 <HAL_SYSTICK_Config>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e00e      	b.n	8003c30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b0f      	cmp	r3, #15
 8003c16:	d80a      	bhi.n	8003c2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c18:	2200      	movs	r2, #0
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c20:	f000 fced 	bl	80045fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c24:	4a06      	ldr	r2, [pc, #24]	; (8003c40 <HAL_InitTick+0x5c>)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e000      	b.n	8003c30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20000010 	.word	0x20000010
 8003c3c:	2000001c 	.word	0x2000001c
 8003c40:	20000018 	.word	0x20000018

08003c44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c48:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <HAL_IncTick+0x20>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	4b06      	ldr	r3, [pc, #24]	; (8003c68 <HAL_IncTick+0x24>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4413      	add	r3, r2
 8003c54:	4a04      	ldr	r2, [pc, #16]	; (8003c68 <HAL_IncTick+0x24>)
 8003c56:	6013      	str	r3, [r2, #0]
}
 8003c58:	bf00      	nop
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	2000001c 	.word	0x2000001c
 8003c68:	20000468 	.word	0x20000468

08003c6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c70:	4b03      	ldr	r3, [pc, #12]	; (8003c80 <HAL_GetTick+0x14>)
 8003c72:	681b      	ldr	r3, [r3, #0]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	20000468 	.word	0x20000468

08003c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c8c:	f7ff ffee 	bl	8003c6c <HAL_GetTick>
 8003c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9c:	d005      	beq.n	8003caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c9e:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <HAL_Delay+0x44>)
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003caa:	bf00      	nop
 8003cac:	f7ff ffde 	bl	8003c6c <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d8f7      	bhi.n	8003cac <HAL_Delay+0x28>
  {
  }
}
 8003cbc:	bf00      	nop
 8003cbe:	bf00      	nop
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	2000001c 	.word	0x2000001c

08003ccc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e033      	b.n	8003d4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d109      	bne.n	8003cfe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fd f9e0 	bl	80010b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f003 0310 	and.w	r3, r3, #16
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d118      	bne.n	8003d3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d12:	f023 0302 	bic.w	r3, r3, #2
 8003d16:	f043 0202 	orr.w	r2, r3, #2
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fab4 	bl	800428c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f023 0303 	bic.w	r3, r3, #3
 8003d32:	f043 0201 	orr.w	r2, r3, #1
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	641a      	str	r2, [r3, #64]	; 0x40
 8003d3a:	e001      	b.n	8003d40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_ADC_Start+0x1a>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e0b2      	b.n	8003ed4 <HAL_ADC_Start+0x180>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d018      	beq.n	8003db6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d94:	4b52      	ldr	r3, [pc, #328]	; (8003ee0 <HAL_ADC_Start+0x18c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a52      	ldr	r2, [pc, #328]	; (8003ee4 <HAL_ADC_Start+0x190>)
 8003d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9e:	0c9a      	lsrs	r2, r3, #18
 8003da0:	4613      	mov	r3, r2
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	4413      	add	r3, r2
 8003da6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003da8:	e002      	b.n	8003db0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f9      	bne.n	8003daa <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d17a      	bne.n	8003eba <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003dcc:	f023 0301 	bic.w	r3, r3, #1
 8003dd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d007      	beq.n	8003df6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003dee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e02:	d106      	bne.n	8003e12 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e08:	f023 0206 	bic.w	r2, r3, #6
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	645a      	str	r2, [r3, #68]	; 0x44
 8003e10:	e002      	b.n	8003e18 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e20:	4b31      	ldr	r3, [pc, #196]	; (8003ee8 <HAL_ADC_Start+0x194>)
 8003e22:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e2c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 031f 	and.w	r3, r3, #31
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d12a      	bne.n	8003e90 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a2b      	ldr	r2, [pc, #172]	; (8003eec <HAL_ADC_Start+0x198>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d015      	beq.n	8003e70 <HAL_ADC_Start+0x11c>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a29      	ldr	r2, [pc, #164]	; (8003ef0 <HAL_ADC_Start+0x19c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d105      	bne.n	8003e5a <HAL_ADC_Start+0x106>
 8003e4e:	4b26      	ldr	r3, [pc, #152]	; (8003ee8 <HAL_ADC_Start+0x194>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 031f 	and.w	r3, r3, #31
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a25      	ldr	r2, [pc, #148]	; (8003ef4 <HAL_ADC_Start+0x1a0>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d136      	bne.n	8003ed2 <HAL_ADC_Start+0x17e>
 8003e64:	4b20      	ldr	r3, [pc, #128]	; (8003ee8 <HAL_ADC_Start+0x194>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f003 0310 	and.w	r3, r3, #16
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d130      	bne.n	8003ed2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d129      	bne.n	8003ed2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e8c:	609a      	str	r2, [r3, #8]
 8003e8e:	e020      	b.n	8003ed2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a15      	ldr	r2, [pc, #84]	; (8003eec <HAL_ADC_Start+0x198>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d11b      	bne.n	8003ed2 <HAL_ADC_Start+0x17e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d114      	bne.n	8003ed2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003eb6:	609a      	str	r2, [r3, #8]
 8003eb8:	e00b      	b.n	8003ed2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f043 0210 	orr.w	r2, r3, #16
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	f043 0201 	orr.w	r2, r3, #1
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	20000010 	.word	0x20000010
 8003ee4:	431bde83 	.word	0x431bde83
 8003ee8:	40012300 	.word	0x40012300
 8003eec:	40012000 	.word	0x40012000
 8003ef0:	40012100 	.word	0x40012100
 8003ef4:	40012200 	.word	0x40012200

08003ef8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f14:	d113      	bne.n	8003f3e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f24:	d10b      	bne.n	8003f3e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	f043 0220 	orr.w	r2, r3, #32
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e063      	b.n	8004006 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003f3e:	f7ff fe95 	bl	8003c6c <HAL_GetTick>
 8003f42:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f44:	e021      	b.n	8003f8a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4c:	d01d      	beq.n	8003f8a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d007      	beq.n	8003f64 <HAL_ADC_PollForConversion+0x6c>
 8003f54:	f7ff fe8a 	bl	8003c6c <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d212      	bcs.n	8003f8a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d00b      	beq.n	8003f8a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f043 0204 	orr.w	r2, r3, #4
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e03d      	b.n	8004006 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d1d6      	bne.n	8003f46 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f06f 0212 	mvn.w	r2, #18
 8003fa0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d123      	bne.n	8004004 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d11f      	bne.n	8004004 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d006      	beq.n	8003fe0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d111      	bne.n	8004004 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d105      	bne.n	8004004 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	f043 0201 	orr.w	r2, r3, #1
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800401c:	4618      	mov	r0, r3
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004032:	2300      	movs	r3, #0
 8004034:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403c:	2b01      	cmp	r3, #1
 800403e:	d101      	bne.n	8004044 <HAL_ADC_ConfigChannel+0x1c>
 8004040:	2302      	movs	r3, #2
 8004042:	e113      	b.n	800426c <HAL_ADC_ConfigChannel+0x244>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b09      	cmp	r3, #9
 8004052:	d925      	bls.n	80040a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68d9      	ldr	r1, [r3, #12]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	b29b      	uxth	r3, r3
 8004060:	461a      	mov	r2, r3
 8004062:	4613      	mov	r3, r2
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	4413      	add	r3, r2
 8004068:	3b1e      	subs	r3, #30
 800406a:	2207      	movs	r2, #7
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	43da      	mvns	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	400a      	ands	r2, r1
 8004078:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68d9      	ldr	r1, [r3, #12]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	b29b      	uxth	r3, r3
 800408a:	4618      	mov	r0, r3
 800408c:	4603      	mov	r3, r0
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	4403      	add	r3, r0
 8004092:	3b1e      	subs	r3, #30
 8004094:	409a      	lsls	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	60da      	str	r2, [r3, #12]
 800409e:	e022      	b.n	80040e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6919      	ldr	r1, [r3, #16]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	461a      	mov	r2, r3
 80040ae:	4613      	mov	r3, r2
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	4413      	add	r3, r2
 80040b4:	2207      	movs	r2, #7
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	43da      	mvns	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	400a      	ands	r2, r1
 80040c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6919      	ldr	r1, [r3, #16]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	4618      	mov	r0, r3
 80040d6:	4603      	mov	r3, r0
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	4403      	add	r3, r0
 80040dc:	409a      	lsls	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b06      	cmp	r3, #6
 80040ec:	d824      	bhi.n	8004138 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	4613      	mov	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	3b05      	subs	r3, #5
 8004100:	221f      	movs	r2, #31
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	43da      	mvns	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	400a      	ands	r2, r1
 800410e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	b29b      	uxth	r3, r3
 800411c:	4618      	mov	r0, r3
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	3b05      	subs	r3, #5
 800412a:	fa00 f203 	lsl.w	r2, r0, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	635a      	str	r2, [r3, #52]	; 0x34
 8004136:	e04c      	b.n	80041d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b0c      	cmp	r3, #12
 800413e:	d824      	bhi.n	800418a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	3b23      	subs	r3, #35	; 0x23
 8004152:	221f      	movs	r2, #31
 8004154:	fa02 f303 	lsl.w	r3, r2, r3
 8004158:	43da      	mvns	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	400a      	ands	r2, r1
 8004160:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	b29b      	uxth	r3, r3
 800416e:	4618      	mov	r0, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	3b23      	subs	r3, #35	; 0x23
 800417c:	fa00 f203 	lsl.w	r2, r0, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	631a      	str	r2, [r3, #48]	; 0x30
 8004188:	e023      	b.n	80041d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	3b41      	subs	r3, #65	; 0x41
 800419c:	221f      	movs	r2, #31
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	43da      	mvns	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	400a      	ands	r2, r1
 80041aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	4618      	mov	r0, r3
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	3b41      	subs	r3, #65	; 0x41
 80041c6:	fa00 f203 	lsl.w	r2, r0, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041d2:	4b29      	ldr	r3, [pc, #164]	; (8004278 <HAL_ADC_ConfigChannel+0x250>)
 80041d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a28      	ldr	r2, [pc, #160]	; (800427c <HAL_ADC_ConfigChannel+0x254>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d10f      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x1d8>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2b12      	cmp	r3, #18
 80041e6:	d10b      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a1d      	ldr	r2, [pc, #116]	; (800427c <HAL_ADC_ConfigChannel+0x254>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d12b      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x23a>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a1c      	ldr	r2, [pc, #112]	; (8004280 <HAL_ADC_ConfigChannel+0x258>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d003      	beq.n	800421c <HAL_ADC_ConfigChannel+0x1f4>
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b11      	cmp	r3, #17
 800421a:	d122      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a11      	ldr	r2, [pc, #68]	; (8004280 <HAL_ADC_ConfigChannel+0x258>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d111      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800423e:	4b11      	ldr	r3, [pc, #68]	; (8004284 <HAL_ADC_ConfigChannel+0x25c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a11      	ldr	r2, [pc, #68]	; (8004288 <HAL_ADC_ConfigChannel+0x260>)
 8004244:	fba2 2303 	umull	r2, r3, r2, r3
 8004248:	0c9a      	lsrs	r2, r3, #18
 800424a:	4613      	mov	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004254:	e002      	b.n	800425c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	3b01      	subs	r3, #1
 800425a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f9      	bne.n	8004256 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	40012300 	.word	0x40012300
 800427c:	40012000 	.word	0x40012000
 8004280:	10000012 	.word	0x10000012
 8004284:	20000010 	.word	0x20000010
 8004288:	431bde83 	.word	0x431bde83

0800428c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004294:	4b79      	ldr	r3, [pc, #484]	; (800447c <ADC_Init+0x1f0>)
 8004296:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	431a      	orrs	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6859      	ldr	r1, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	021a      	lsls	r2, r3, #8
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80042e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6859      	ldr	r1, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004306:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6899      	ldr	r1, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800431e:	4a58      	ldr	r2, [pc, #352]	; (8004480 <ADC_Init+0x1f4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d022      	beq.n	800436a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689a      	ldr	r2, [r3, #8]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004332:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6899      	ldr	r1, [r3, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004354:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6899      	ldr	r1, [r3, #8]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	609a      	str	r2, [r3, #8]
 8004368:	e00f      	b.n	800438a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004378:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004388:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0202 	bic.w	r2, r2, #2
 8004398:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6899      	ldr	r1, [r3, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	7e1b      	ldrb	r3, [r3, #24]
 80043a4:	005a      	lsls	r2, r3, #1
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d01b      	beq.n	80043f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80043d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6859      	ldr	r1, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	3b01      	subs	r3, #1
 80043e4:	035a      	lsls	r2, r3, #13
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	605a      	str	r2, [r3, #4]
 80043ee:	e007      	b.n	8004400 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800440e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	3b01      	subs	r3, #1
 800441c:	051a      	lsls	r2, r3, #20
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689a      	ldr	r2, [r3, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004434:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6899      	ldr	r1, [r3, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004442:	025a      	lsls	r2, r3, #9
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	430a      	orrs	r2, r1
 800444a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6899      	ldr	r1, [r3, #8]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	029a      	lsls	r2, r3, #10
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	609a      	str	r2, [r3, #8]
}
 8004470:	bf00      	nop
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	40012300 	.word	0x40012300
 8004480:	0f000001 	.word	0x0f000001

08004484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004494:	4b0c      	ldr	r3, [pc, #48]	; (80044c8 <__NVIC_SetPriorityGrouping+0x44>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044a0:	4013      	ands	r3, r2
 80044a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044b6:	4a04      	ldr	r2, [pc, #16]	; (80044c8 <__NVIC_SetPriorityGrouping+0x44>)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	60d3      	str	r3, [r2, #12]
}
 80044bc:	bf00      	nop
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	e000ed00 	.word	0xe000ed00

080044cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044d0:	4b04      	ldr	r3, [pc, #16]	; (80044e4 <__NVIC_GetPriorityGrouping+0x18>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	0a1b      	lsrs	r3, r3, #8
 80044d6:	f003 0307 	and.w	r3, r3, #7
}
 80044da:	4618      	mov	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	e000ed00 	.word	0xe000ed00

080044e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	6039      	str	r1, [r7, #0]
 80044f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	db0a      	blt.n	8004512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	490c      	ldr	r1, [pc, #48]	; (8004534 <__NVIC_SetPriority+0x4c>)
 8004502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004506:	0112      	lsls	r2, r2, #4
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	440b      	add	r3, r1
 800450c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004510:	e00a      	b.n	8004528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	b2da      	uxtb	r2, r3
 8004516:	4908      	ldr	r1, [pc, #32]	; (8004538 <__NVIC_SetPriority+0x50>)
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	3b04      	subs	r3, #4
 8004520:	0112      	lsls	r2, r2, #4
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	440b      	add	r3, r1
 8004526:	761a      	strb	r2, [r3, #24]
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	e000e100 	.word	0xe000e100
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800453c:	b480      	push	{r7}
 800453e:	b089      	sub	sp, #36	; 0x24
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f1c3 0307 	rsb	r3, r3, #7
 8004556:	2b04      	cmp	r3, #4
 8004558:	bf28      	it	cs
 800455a:	2304      	movcs	r3, #4
 800455c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	3304      	adds	r3, #4
 8004562:	2b06      	cmp	r3, #6
 8004564:	d902      	bls.n	800456c <NVIC_EncodePriority+0x30>
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	3b03      	subs	r3, #3
 800456a:	e000      	b.n	800456e <NVIC_EncodePriority+0x32>
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004570:	f04f 32ff 	mov.w	r2, #4294967295
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	43da      	mvns	r2, r3
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	401a      	ands	r2, r3
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004584:	f04f 31ff 	mov.w	r1, #4294967295
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	fa01 f303 	lsl.w	r3, r1, r3
 800458e:	43d9      	mvns	r1, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004594:	4313      	orrs	r3, r2
         );
}
 8004596:	4618      	mov	r0, r3
 8004598:	3724      	adds	r7, #36	; 0x24
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
	...

080045a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045b4:	d301      	bcc.n	80045ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045b6:	2301      	movs	r3, #1
 80045b8:	e00f      	b.n	80045da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045ba:	4a0a      	ldr	r2, [pc, #40]	; (80045e4 <SysTick_Config+0x40>)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3b01      	subs	r3, #1
 80045c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045c2:	210f      	movs	r1, #15
 80045c4:	f04f 30ff 	mov.w	r0, #4294967295
 80045c8:	f7ff ff8e 	bl	80044e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045cc:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <SysTick_Config+0x40>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045d2:	4b04      	ldr	r3, [pc, #16]	; (80045e4 <SysTick_Config+0x40>)
 80045d4:	2207      	movs	r2, #7
 80045d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	e000e010 	.word	0xe000e010

080045e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7ff ff47 	bl	8004484 <__NVIC_SetPriorityGrouping>
}
 80045f6:	bf00      	nop
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045fe:	b580      	push	{r7, lr}
 8004600:	b086      	sub	sp, #24
 8004602:	af00      	add	r7, sp, #0
 8004604:	4603      	mov	r3, r0
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	607a      	str	r2, [r7, #4]
 800460a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800460c:	2300      	movs	r3, #0
 800460e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004610:	f7ff ff5c 	bl	80044cc <__NVIC_GetPriorityGrouping>
 8004614:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	68b9      	ldr	r1, [r7, #8]
 800461a:	6978      	ldr	r0, [r7, #20]
 800461c:	f7ff ff8e 	bl	800453c <NVIC_EncodePriority>
 8004620:	4602      	mov	r2, r0
 8004622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004626:	4611      	mov	r1, r2
 8004628:	4618      	mov	r0, r3
 800462a:	f7ff ff5d 	bl	80044e8 <__NVIC_SetPriority>
}
 800462e:	bf00      	nop
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b082      	sub	sp, #8
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7ff ffb0 	bl	80045a4 <SysTick_Config>
 8004644:	4603      	mov	r3, r0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004650:	b480      	push	{r7}
 8004652:	b089      	sub	sp, #36	; 0x24
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800465a:	2300      	movs	r3, #0
 800465c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800465e:	2300      	movs	r3, #0
 8004660:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004662:	2300      	movs	r3, #0
 8004664:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004666:	2300      	movs	r3, #0
 8004668:	61fb      	str	r3, [r7, #28]
 800466a:	e177      	b.n	800495c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800466c:	2201      	movs	r2, #1
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4013      	ands	r3, r2
 800467e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	429a      	cmp	r2, r3
 8004686:	f040 8166 	bne.w	8004956 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	2b01      	cmp	r3, #1
 8004694:	d005      	beq.n	80046a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d130      	bne.n	8004704 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	2203      	movs	r2, #3
 80046ae:	fa02 f303 	lsl.w	r3, r2, r3
 80046b2:	43db      	mvns	r3, r3
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4013      	ands	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	68da      	ldr	r2, [r3, #12]
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	69ba      	ldr	r2, [r7, #24]
 80046d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046d8:	2201      	movs	r2, #1
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	43db      	mvns	r3, r3
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	4013      	ands	r3, r2
 80046e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	091b      	lsrs	r3, r3, #4
 80046ee:	f003 0201 	and.w	r2, r3, #1
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f003 0303 	and.w	r3, r3, #3
 800470c:	2b03      	cmp	r3, #3
 800470e:	d017      	beq.n	8004740 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	2203      	movs	r2, #3
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	43db      	mvns	r3, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4013      	ands	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	4313      	orrs	r3, r2
 8004738:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f003 0303 	and.w	r3, r3, #3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d123      	bne.n	8004794 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	08da      	lsrs	r2, r3, #3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3208      	adds	r2, #8
 8004754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004758:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	220f      	movs	r2, #15
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	43db      	mvns	r3, r3
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	4013      	ands	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	691a      	ldr	r2, [r3, #16]
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4313      	orrs	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	08da      	lsrs	r2, r3, #3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3208      	adds	r2, #8
 800478e:	69b9      	ldr	r1, [r7, #24]
 8004790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	2203      	movs	r2, #3
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	43db      	mvns	r3, r3
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	4013      	ands	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f003 0203 	and.w	r2, r3, #3
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	4313      	orrs	r3, r2
 80047c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 80c0 	beq.w	8004956 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047d6:	2300      	movs	r3, #0
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	4b66      	ldr	r3, [pc, #408]	; (8004974 <HAL_GPIO_Init+0x324>)
 80047dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047de:	4a65      	ldr	r2, [pc, #404]	; (8004974 <HAL_GPIO_Init+0x324>)
 80047e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047e4:	6453      	str	r3, [r2, #68]	; 0x44
 80047e6:	4b63      	ldr	r3, [pc, #396]	; (8004974 <HAL_GPIO_Init+0x324>)
 80047e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047f2:	4a61      	ldr	r2, [pc, #388]	; (8004978 <HAL_GPIO_Init+0x328>)
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	089b      	lsrs	r3, r3, #2
 80047f8:	3302      	adds	r3, #2
 80047fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f003 0303 	and.w	r3, r3, #3
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	220f      	movs	r2, #15
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	43db      	mvns	r3, r3
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	4013      	ands	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a58      	ldr	r2, [pc, #352]	; (800497c <HAL_GPIO_Init+0x32c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d037      	beq.n	800488e <HAL_GPIO_Init+0x23e>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a57      	ldr	r2, [pc, #348]	; (8004980 <HAL_GPIO_Init+0x330>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d031      	beq.n	800488a <HAL_GPIO_Init+0x23a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a56      	ldr	r2, [pc, #344]	; (8004984 <HAL_GPIO_Init+0x334>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d02b      	beq.n	8004886 <HAL_GPIO_Init+0x236>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a55      	ldr	r2, [pc, #340]	; (8004988 <HAL_GPIO_Init+0x338>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d025      	beq.n	8004882 <HAL_GPIO_Init+0x232>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a54      	ldr	r2, [pc, #336]	; (800498c <HAL_GPIO_Init+0x33c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d01f      	beq.n	800487e <HAL_GPIO_Init+0x22e>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a53      	ldr	r2, [pc, #332]	; (8004990 <HAL_GPIO_Init+0x340>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d019      	beq.n	800487a <HAL_GPIO_Init+0x22a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a52      	ldr	r2, [pc, #328]	; (8004994 <HAL_GPIO_Init+0x344>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d013      	beq.n	8004876 <HAL_GPIO_Init+0x226>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a51      	ldr	r2, [pc, #324]	; (8004998 <HAL_GPIO_Init+0x348>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00d      	beq.n	8004872 <HAL_GPIO_Init+0x222>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a50      	ldr	r2, [pc, #320]	; (800499c <HAL_GPIO_Init+0x34c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d007      	beq.n	800486e <HAL_GPIO_Init+0x21e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a4f      	ldr	r2, [pc, #316]	; (80049a0 <HAL_GPIO_Init+0x350>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d101      	bne.n	800486a <HAL_GPIO_Init+0x21a>
 8004866:	2309      	movs	r3, #9
 8004868:	e012      	b.n	8004890 <HAL_GPIO_Init+0x240>
 800486a:	230a      	movs	r3, #10
 800486c:	e010      	b.n	8004890 <HAL_GPIO_Init+0x240>
 800486e:	2308      	movs	r3, #8
 8004870:	e00e      	b.n	8004890 <HAL_GPIO_Init+0x240>
 8004872:	2307      	movs	r3, #7
 8004874:	e00c      	b.n	8004890 <HAL_GPIO_Init+0x240>
 8004876:	2306      	movs	r3, #6
 8004878:	e00a      	b.n	8004890 <HAL_GPIO_Init+0x240>
 800487a:	2305      	movs	r3, #5
 800487c:	e008      	b.n	8004890 <HAL_GPIO_Init+0x240>
 800487e:	2304      	movs	r3, #4
 8004880:	e006      	b.n	8004890 <HAL_GPIO_Init+0x240>
 8004882:	2303      	movs	r3, #3
 8004884:	e004      	b.n	8004890 <HAL_GPIO_Init+0x240>
 8004886:	2302      	movs	r3, #2
 8004888:	e002      	b.n	8004890 <HAL_GPIO_Init+0x240>
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <HAL_GPIO_Init+0x240>
 800488e:	2300      	movs	r3, #0
 8004890:	69fa      	ldr	r2, [r7, #28]
 8004892:	f002 0203 	and.w	r2, r2, #3
 8004896:	0092      	lsls	r2, r2, #2
 8004898:	4093      	lsls	r3, r2
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4313      	orrs	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048a0:	4935      	ldr	r1, [pc, #212]	; (8004978 <HAL_GPIO_Init+0x328>)
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	089b      	lsrs	r3, r3, #2
 80048a6:	3302      	adds	r3, #2
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048ae:	4b3d      	ldr	r3, [pc, #244]	; (80049a4 <HAL_GPIO_Init+0x354>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	43db      	mvns	r3, r3
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	4013      	ands	r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048d2:	4a34      	ldr	r2, [pc, #208]	; (80049a4 <HAL_GPIO_Init+0x354>)
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80048d8:	4b32      	ldr	r3, [pc, #200]	; (80049a4 <HAL_GPIO_Init+0x354>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	43db      	mvns	r3, r3
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	4013      	ands	r3, r2
 80048e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048fc:	4a29      	ldr	r2, [pc, #164]	; (80049a4 <HAL_GPIO_Init+0x354>)
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004902:	4b28      	ldr	r3, [pc, #160]	; (80049a4 <HAL_GPIO_Init+0x354>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	43db      	mvns	r3, r3
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	4013      	ands	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	4313      	orrs	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004926:	4a1f      	ldr	r2, [pc, #124]	; (80049a4 <HAL_GPIO_Init+0x354>)
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800492c:	4b1d      	ldr	r3, [pc, #116]	; (80049a4 <HAL_GPIO_Init+0x354>)
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	43db      	mvns	r3, r3
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	4013      	ands	r3, r2
 800493a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	4313      	orrs	r3, r2
 800494e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004950:	4a14      	ldr	r2, [pc, #80]	; (80049a4 <HAL_GPIO_Init+0x354>)
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	3301      	adds	r3, #1
 800495a:	61fb      	str	r3, [r7, #28]
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	2b0f      	cmp	r3, #15
 8004960:	f67f ae84 	bls.w	800466c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop
 8004968:	3724      	adds	r7, #36	; 0x24
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	40023800 	.word	0x40023800
 8004978:	40013800 	.word	0x40013800
 800497c:	40020000 	.word	0x40020000
 8004980:	40020400 	.word	0x40020400
 8004984:	40020800 	.word	0x40020800
 8004988:	40020c00 	.word	0x40020c00
 800498c:	40021000 	.word	0x40021000
 8004990:	40021400 	.word	0x40021400
 8004994:	40021800 	.word	0x40021800
 8004998:	40021c00 	.word	0x40021c00
 800499c:	40022000 	.word	0x40022000
 80049a0:	40022400 	.word	0x40022400
 80049a4:	40013c00 	.word	0x40013c00

080049a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	460b      	mov	r3, r1
 80049b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	887b      	ldrh	r3, [r7, #2]
 80049ba:	4013      	ands	r3, r2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049c0:	2301      	movs	r3, #1
 80049c2:	73fb      	strb	r3, [r7, #15]
 80049c4:	e001      	b.n	80049ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049c6:	2300      	movs	r3, #0
 80049c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	460b      	mov	r3, r1
 80049e2:	807b      	strh	r3, [r7, #2]
 80049e4:	4613      	mov	r3, r2
 80049e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049e8:	787b      	ldrb	r3, [r7, #1]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049ee:	887a      	ldrh	r2, [r7, #2]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049f4:	e003      	b.n	80049fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049f6:	887b      	ldrh	r3, [r7, #2]
 80049f8:	041a      	lsls	r2, r3, #16
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	619a      	str	r2, [r3, #24]
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
	...

08004a0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e12b      	b.n	8004c76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fc fcb2 	bl	800139c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2224      	movs	r2, #36	; 0x24
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0201 	bic.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a70:	f001 fbfc 	bl	800626c <HAL_RCC_GetPCLK1Freq>
 8004a74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	4a81      	ldr	r2, [pc, #516]	; (8004c80 <HAL_I2C_Init+0x274>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d807      	bhi.n	8004a90 <HAL_I2C_Init+0x84>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4a80      	ldr	r2, [pc, #512]	; (8004c84 <HAL_I2C_Init+0x278>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	bf94      	ite	ls
 8004a88:	2301      	movls	r3, #1
 8004a8a:	2300      	movhi	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	e006      	b.n	8004a9e <HAL_I2C_Init+0x92>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4a7d      	ldr	r2, [pc, #500]	; (8004c88 <HAL_I2C_Init+0x27c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	bf94      	ite	ls
 8004a98:	2301      	movls	r3, #1
 8004a9a:	2300      	movhi	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e0e7      	b.n	8004c76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4a78      	ldr	r2, [pc, #480]	; (8004c8c <HAL_I2C_Init+0x280>)
 8004aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004aae:	0c9b      	lsrs	r3, r3, #18
 8004ab0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	4a6a      	ldr	r2, [pc, #424]	; (8004c80 <HAL_I2C_Init+0x274>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d802      	bhi.n	8004ae0 <HAL_I2C_Init+0xd4>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	3301      	adds	r3, #1
 8004ade:	e009      	b.n	8004af4 <HAL_I2C_Init+0xe8>
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ae6:	fb02 f303 	mul.w	r3, r2, r3
 8004aea:	4a69      	ldr	r2, [pc, #420]	; (8004c90 <HAL_I2C_Init+0x284>)
 8004aec:	fba2 2303 	umull	r2, r3, r2, r3
 8004af0:	099b      	lsrs	r3, r3, #6
 8004af2:	3301      	adds	r3, #1
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	430b      	orrs	r3, r1
 8004afa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	495c      	ldr	r1, [pc, #368]	; (8004c80 <HAL_I2C_Init+0x274>)
 8004b10:	428b      	cmp	r3, r1
 8004b12:	d819      	bhi.n	8004b48 <HAL_I2C_Init+0x13c>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	1e59      	subs	r1, r3, #1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b22:	1c59      	adds	r1, r3, #1
 8004b24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b28:	400b      	ands	r3, r1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <HAL_I2C_Init+0x138>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	1e59      	subs	r1, r3, #1
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b42:	e051      	b.n	8004be8 <HAL_I2C_Init+0x1dc>
 8004b44:	2304      	movs	r3, #4
 8004b46:	e04f      	b.n	8004be8 <HAL_I2C_Init+0x1dc>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d111      	bne.n	8004b74 <HAL_I2C_Init+0x168>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1e58      	subs	r0, r3, #1
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6859      	ldr	r1, [r3, #4]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	440b      	add	r3, r1
 8004b5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b62:	3301      	adds	r3, #1
 8004b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	bf0c      	ite	eq
 8004b6c:	2301      	moveq	r3, #1
 8004b6e:	2300      	movne	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	e012      	b.n	8004b9a <HAL_I2C_Init+0x18e>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	1e58      	subs	r0, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6859      	ldr	r1, [r3, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	0099      	lsls	r1, r3, #2
 8004b84:	440b      	add	r3, r1
 8004b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	bf0c      	ite	eq
 8004b94:	2301      	moveq	r3, #1
 8004b96:	2300      	movne	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <HAL_I2C_Init+0x196>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e022      	b.n	8004be8 <HAL_I2C_Init+0x1dc>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10e      	bne.n	8004bc8 <HAL_I2C_Init+0x1bc>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	1e58      	subs	r0, r3, #1
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6859      	ldr	r1, [r3, #4]
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	440b      	add	r3, r1
 8004bb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bc6:	e00f      	b.n	8004be8 <HAL_I2C_Init+0x1dc>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	1e58      	subs	r0, r3, #1
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6859      	ldr	r1, [r3, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	0099      	lsls	r1, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bde:	3301      	adds	r3, #1
 8004be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004be8:	6879      	ldr	r1, [r7, #4]
 8004bea:	6809      	ldr	r1, [r1, #0]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	69da      	ldr	r2, [r3, #28]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6911      	ldr	r1, [r2, #16]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	68d2      	ldr	r2, [r2, #12]
 8004c22:	4311      	orrs	r1, r2
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6812      	ldr	r2, [r2, #0]
 8004c28:	430b      	orrs	r3, r1
 8004c2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695a      	ldr	r2, [r3, #20]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0201 	orr.w	r2, r2, #1
 8004c56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2220      	movs	r2, #32
 8004c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	000186a0 	.word	0x000186a0
 8004c84:	001e847f 	.word	0x001e847f
 8004c88:	003d08ff 	.word	0x003d08ff
 8004c8c:	431bde83 	.word	0x431bde83
 8004c90:	10624dd3 	.word	0x10624dd3

08004c94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b088      	sub	sp, #32
 8004c98:	af02      	add	r7, sp, #8
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	607a      	str	r2, [r7, #4]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	817b      	strh	r3, [r7, #10]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ca8:	f7fe ffe0 	bl	8003c6c <HAL_GetTick>
 8004cac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b20      	cmp	r3, #32
 8004cb8:	f040 80e0 	bne.w	8004e7c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	2319      	movs	r3, #25
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	4970      	ldr	r1, [pc, #448]	; (8004e88 <HAL_I2C_Master_Transmit+0x1f4>)
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 fc58 	bl	800557c <I2C_WaitOnFlagUntilTimeout>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e0d3      	b.n	8004e7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d101      	bne.n	8004ce4 <HAL_I2C_Master_Transmit+0x50>
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	e0cc      	b.n	8004e7e <HAL_I2C_Master_Transmit+0x1ea>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d007      	beq.n	8004d0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f042 0201 	orr.w	r2, r2, #1
 8004d08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2221      	movs	r2, #33	; 0x21
 8004d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2210      	movs	r2, #16
 8004d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	893a      	ldrh	r2, [r7, #8]
 8004d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4a50      	ldr	r2, [pc, #320]	; (8004e8c <HAL_I2C_Master_Transmit+0x1f8>)
 8004d4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004d4c:	8979      	ldrh	r1, [r7, #10]
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	6a3a      	ldr	r2, [r7, #32]
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 fac2 	bl	80052dc <I2C_MasterRequestWrite>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d001      	beq.n	8004d62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e08d      	b.n	8004e7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d62:	2300      	movs	r3, #0
 8004d64:	613b      	str	r3, [r7, #16]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	613b      	str	r3, [r7, #16]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	613b      	str	r3, [r7, #16]
 8004d76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004d78:	e066      	b.n	8004e48 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	6a39      	ldr	r1, [r7, #32]
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 fcd2 	bl	8005728 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00d      	beq.n	8004da6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d107      	bne.n	8004da2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e06b      	b.n	8004e7e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	781a      	ldrb	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d11b      	bne.n	8004e1c <HAL_I2C_Master_Transmit+0x188>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d017      	beq.n	8004e1c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	781a      	ldrb	r2, [r3, #0]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	6a39      	ldr	r1, [r7, #32]
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f000 fcc2 	bl	80057aa <I2C_WaitOnBTFFlagUntilTimeout>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00d      	beq.n	8004e48 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d107      	bne.n	8004e44 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e42:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e01a      	b.n	8004e7e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d194      	bne.n	8004d7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	e000      	b.n	8004e7e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004e7c:	2302      	movs	r3, #2
  }
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	00100002 	.word	0x00100002
 8004e8c:	ffff0000 	.word	0xffff0000

08004e90 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08c      	sub	sp, #48	; 0x30
 8004e94:	af02      	add	r7, sp, #8
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	607a      	str	r2, [r7, #4]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	817b      	strh	r3, [r7, #10]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ea4:	f7fe fee2 	bl	8003c6c <HAL_GetTick>
 8004ea8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b20      	cmp	r3, #32
 8004eb4:	f040 820b 	bne.w	80052ce <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	2319      	movs	r3, #25
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	497c      	ldr	r1, [pc, #496]	; (80050b4 <HAL_I2C_Master_Receive+0x224>)
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 fb5a 	bl	800557c <I2C_WaitOnFlagUntilTimeout>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e1fe      	b.n	80052d0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d101      	bne.n	8004ee0 <HAL_I2C_Master_Receive+0x50>
 8004edc:	2302      	movs	r3, #2
 8004ede:	e1f7      	b.n	80052d0 <HAL_I2C_Master_Receive+0x440>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d007      	beq.n	8004f06 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f042 0201 	orr.w	r2, r2, #1
 8004f04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2222      	movs	r2, #34	; 0x22
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2210      	movs	r2, #16
 8004f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	893a      	ldrh	r2, [r7, #8]
 8004f36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4a5c      	ldr	r2, [pc, #368]	; (80050b8 <HAL_I2C_Master_Receive+0x228>)
 8004f46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f48:	8979      	ldrh	r1, [r7, #10]
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 fa46 	bl	80053e0 <I2C_MasterRequestRead>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e1b8      	b.n	80052d0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d113      	bne.n	8004f8e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f66:	2300      	movs	r3, #0
 8004f68:	623b      	str	r3, [r7, #32]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	623b      	str	r3, [r7, #32]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	623b      	str	r3, [r7, #32]
 8004f7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	e18c      	b.n	80052a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d11b      	bne.n	8004fce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fa4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61fb      	str	r3, [r7, #28]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	61fb      	str	r3, [r7, #28]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	61fb      	str	r3, [r7, #28]
 8004fba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	e16c      	b.n	80052a8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d11b      	bne.n	800500e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ff4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61bb      	str	r3, [r7, #24]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	61bb      	str	r3, [r7, #24]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	61bb      	str	r3, [r7, #24]
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	e14c      	b.n	80052a8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800501c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800501e:	2300      	movs	r3, #0
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005034:	e138      	b.n	80052a8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800503a:	2b03      	cmp	r3, #3
 800503c:	f200 80f1 	bhi.w	8005222 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005044:	2b01      	cmp	r3, #1
 8005046:	d123      	bne.n	8005090 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800504a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 fbed 	bl	800582c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e139      	b.n	80052d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	691a      	ldr	r2, [r3, #16]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005078:	3b01      	subs	r3, #1
 800507a:	b29a      	uxth	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005084:	b29b      	uxth	r3, r3
 8005086:	3b01      	subs	r3, #1
 8005088:	b29a      	uxth	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800508e:	e10b      	b.n	80052a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005094:	2b02      	cmp	r3, #2
 8005096:	d14e      	bne.n	8005136 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509e:	2200      	movs	r2, #0
 80050a0:	4906      	ldr	r1, [pc, #24]	; (80050bc <HAL_I2C_Master_Receive+0x22c>)
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 fa6a 	bl	800557c <I2C_WaitOnFlagUntilTimeout>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d008      	beq.n	80050c0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e10e      	b.n	80052d0 <HAL_I2C_Master_Receive+0x440>
 80050b2:	bf00      	nop
 80050b4:	00100002 	.word	0x00100002
 80050b8:	ffff0000 	.word	0xffff0000
 80050bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691a      	ldr	r2, [r3, #16]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	b2d2      	uxtb	r2, r2
 80050dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	3b01      	subs	r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005134:	e0b8      	b.n	80052a8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513c:	2200      	movs	r2, #0
 800513e:	4966      	ldr	r1, [pc, #408]	; (80052d8 <HAL_I2C_Master_Receive+0x448>)
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 fa1b 	bl	800557c <I2C_WaitOnFlagUntilTimeout>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e0bf      	b.n	80052d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800515e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691a      	ldr	r2, [r3, #16]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800517c:	3b01      	subs	r3, #1
 800517e:	b29a      	uxth	r2, r3
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005188:	b29b      	uxth	r3, r3
 800518a:	3b01      	subs	r3, #1
 800518c:	b29a      	uxth	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005198:	2200      	movs	r2, #0
 800519a:	494f      	ldr	r1, [pc, #316]	; (80052d8 <HAL_I2C_Master_Receive+0x448>)
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 f9ed 	bl	800557c <I2C_WaitOnFlagUntilTimeout>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e091      	b.n	80052d0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691a      	ldr	r2, [r3, #16]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005216:	b29b      	uxth	r3, r3
 8005218:	3b01      	subs	r3, #1
 800521a:	b29a      	uxth	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005220:	e042      	b.n	80052a8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005224:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 fb00 	bl	800582c <I2C_WaitOnRXNEFlagUntilTimeout>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e04c      	b.n	80052d0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	691a      	ldr	r2, [r3, #16]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	b2d2      	uxtb	r2, r2
 8005242:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	1c5a      	adds	r2, r3, #1
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005252:	3b01      	subs	r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525e:	b29b      	uxth	r3, r3
 8005260:	3b01      	subs	r3, #1
 8005262:	b29a      	uxth	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	2b04      	cmp	r3, #4
 8005274:	d118      	bne.n	80052a8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005292:	3b01      	subs	r3, #1
 8005294:	b29a      	uxth	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f47f aec2 	bne.w	8005036 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2220      	movs	r2, #32
 80052b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	e000      	b.n	80052d0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80052ce:	2302      	movs	r3, #2
  }
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3728      	adds	r7, #40	; 0x28
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	00010004 	.word	0x00010004

080052dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b088      	sub	sp, #32
 80052e0:	af02      	add	r7, sp, #8
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	607a      	str	r2, [r7, #4]
 80052e6:	603b      	str	r3, [r7, #0]
 80052e8:	460b      	mov	r3, r1
 80052ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d006      	beq.n	8005306 <I2C_MasterRequestWrite+0x2a>
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d003      	beq.n	8005306 <I2C_MasterRequestWrite+0x2a>
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005304:	d108      	bne.n	8005318 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	e00b      	b.n	8005330 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531c:	2b12      	cmp	r3, #18
 800531e:	d107      	bne.n	8005330 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800532e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	9300      	str	r3, [sp, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 f91d 	bl	800557c <I2C_WaitOnFlagUntilTimeout>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00d      	beq.n	8005364 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005356:	d103      	bne.n	8005360 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800535e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e035      	b.n	80053d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800536c:	d108      	bne.n	8005380 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800536e:	897b      	ldrh	r3, [r7, #10]
 8005370:	b2db      	uxtb	r3, r3
 8005372:	461a      	mov	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800537c:	611a      	str	r2, [r3, #16]
 800537e:	e01b      	b.n	80053b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005380:	897b      	ldrh	r3, [r7, #10]
 8005382:	11db      	asrs	r3, r3, #7
 8005384:	b2db      	uxtb	r3, r3
 8005386:	f003 0306 	and.w	r3, r3, #6
 800538a:	b2db      	uxtb	r3, r3
 800538c:	f063 030f 	orn	r3, r3, #15
 8005390:	b2da      	uxtb	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	490e      	ldr	r1, [pc, #56]	; (80053d8 <I2C_MasterRequestWrite+0xfc>)
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 f943 	bl	800562a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e010      	b.n	80053d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80053ae:	897b      	ldrh	r3, [r7, #10]
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	4907      	ldr	r1, [pc, #28]	; (80053dc <I2C_MasterRequestWrite+0x100>)
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 f933 	bl	800562a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e000      	b.n	80053d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3718      	adds	r7, #24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	00010008 	.word	0x00010008
 80053dc:	00010002 	.word	0x00010002

080053e0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b088      	sub	sp, #32
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	607a      	str	r2, [r7, #4]
 80053ea:	603b      	str	r3, [r7, #0]
 80053ec:	460b      	mov	r3, r1
 80053ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005404:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2b08      	cmp	r3, #8
 800540a:	d006      	beq.n	800541a <I2C_MasterRequestRead+0x3a>
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d003      	beq.n	800541a <I2C_MasterRequestRead+0x3a>
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005418:	d108      	bne.n	800542c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	e00b      	b.n	8005444 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005430:	2b11      	cmp	r3, #17
 8005432:	d107      	bne.n	8005444 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005442:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 f893 	bl	800557c <I2C_WaitOnFlagUntilTimeout>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00d      	beq.n	8005478 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800546a:	d103      	bne.n	8005474 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005472:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e079      	b.n	800556c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005480:	d108      	bne.n	8005494 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005482:	897b      	ldrh	r3, [r7, #10]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	f043 0301 	orr.w	r3, r3, #1
 800548a:	b2da      	uxtb	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	611a      	str	r2, [r3, #16]
 8005492:	e05f      	b.n	8005554 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005494:	897b      	ldrh	r3, [r7, #10]
 8005496:	11db      	asrs	r3, r3, #7
 8005498:	b2db      	uxtb	r3, r3
 800549a:	f003 0306 	and.w	r3, r3, #6
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	f063 030f 	orn	r3, r3, #15
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	4930      	ldr	r1, [pc, #192]	; (8005574 <I2C_MasterRequestRead+0x194>)
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	f000 f8b9 	bl	800562a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e054      	b.n	800556c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054c2:	897b      	ldrh	r3, [r7, #10]
 80054c4:	b2da      	uxtb	r2, r3
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	4929      	ldr	r1, [pc, #164]	; (8005578 <I2C_MasterRequestRead+0x198>)
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 f8a9 	bl	800562a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e044      	b.n	800556c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054e2:	2300      	movs	r3, #0
 80054e4:	613b      	str	r3, [r7, #16]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	613b      	str	r3, [r7, #16]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	613b      	str	r3, [r7, #16]
 80054f6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005506:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 f831 	bl	800557c <I2C_WaitOnFlagUntilTimeout>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00d      	beq.n	800553c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800552e:	d103      	bne.n	8005538 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005536:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e017      	b.n	800556c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800553c:	897b      	ldrh	r3, [r7, #10]
 800553e:	11db      	asrs	r3, r3, #7
 8005540:	b2db      	uxtb	r3, r3
 8005542:	f003 0306 	and.w	r3, r3, #6
 8005546:	b2db      	uxtb	r3, r3
 8005548:	f063 030e 	orn	r3, r3, #14
 800554c:	b2da      	uxtb	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	4907      	ldr	r1, [pc, #28]	; (8005578 <I2C_MasterRequestRead+0x198>)
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 f865 	bl	800562a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e000      	b.n	800556c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3718      	adds	r7, #24
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	00010008 	.word	0x00010008
 8005578:	00010002 	.word	0x00010002

0800557c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	603b      	str	r3, [r7, #0]
 8005588:	4613      	mov	r3, r2
 800558a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800558c:	e025      	b.n	80055da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005594:	d021      	beq.n	80055da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005596:	f7fe fb69 	bl	8003c6c <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d302      	bcc.n	80055ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d116      	bne.n	80055da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	f043 0220 	orr.w	r2, r3, #32
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e023      	b.n	8005622 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	0c1b      	lsrs	r3, r3, #16
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d10d      	bne.n	8005600 <I2C_WaitOnFlagUntilTimeout+0x84>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	43da      	mvns	r2, r3
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	4013      	ands	r3, r2
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	bf0c      	ite	eq
 80055f6:	2301      	moveq	r3, #1
 80055f8:	2300      	movne	r3, #0
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	461a      	mov	r2, r3
 80055fe:	e00c      	b.n	800561a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	43da      	mvns	r2, r3
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4013      	ands	r3, r2
 800560c:	b29b      	uxth	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	bf0c      	ite	eq
 8005612:	2301      	moveq	r3, #1
 8005614:	2300      	movne	r3, #0
 8005616:	b2db      	uxtb	r3, r3
 8005618:	461a      	mov	r2, r3
 800561a:	79fb      	ldrb	r3, [r7, #7]
 800561c:	429a      	cmp	r2, r3
 800561e:	d0b6      	beq.n	800558e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	60f8      	str	r0, [r7, #12]
 8005632:	60b9      	str	r1, [r7, #8]
 8005634:	607a      	str	r2, [r7, #4]
 8005636:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005638:	e051      	b.n	80056de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005648:	d123      	bne.n	8005692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005658:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005662:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2220      	movs	r2, #32
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	f043 0204 	orr.w	r2, r3, #4
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e046      	b.n	8005720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005698:	d021      	beq.n	80056de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800569a:	f7fe fae7 	bl	8003c6c <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d302      	bcc.n	80056b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d116      	bne.n	80056de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2220      	movs	r2, #32
 80056ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	f043 0220 	orr.w	r2, r3, #32
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e020      	b.n	8005720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	0c1b      	lsrs	r3, r3, #16
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d10c      	bne.n	8005702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	43da      	mvns	r2, r3
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4013      	ands	r3, r2
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	bf14      	ite	ne
 80056fa:	2301      	movne	r3, #1
 80056fc:	2300      	moveq	r3, #0
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	e00b      	b.n	800571a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	699b      	ldr	r3, [r3, #24]
 8005708:	43da      	mvns	r2, r3
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	4013      	ands	r3, r2
 800570e:	b29b      	uxth	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	bf14      	ite	ne
 8005714:	2301      	movne	r3, #1
 8005716:	2300      	moveq	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d18d      	bne.n	800563a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005734:	e02d      	b.n	8005792 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f000 f8ce 	bl	80058d8 <I2C_IsAcknowledgeFailed>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e02d      	b.n	80057a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800574c:	d021      	beq.n	8005792 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800574e:	f7fe fa8d 	bl	8003c6c <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	429a      	cmp	r2, r3
 800575c:	d302      	bcc.n	8005764 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d116      	bne.n	8005792 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2220      	movs	r2, #32
 800576e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	f043 0220 	orr.w	r2, r3, #32
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e007      	b.n	80057a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800579c:	2b80      	cmp	r3, #128	; 0x80
 800579e:	d1ca      	bne.n	8005736 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b084      	sub	sp, #16
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80057b6:	e02d      	b.n	8005814 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f000 f88d 	bl	80058d8 <I2C_IsAcknowledgeFailed>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e02d      	b.n	8005824 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ce:	d021      	beq.n	8005814 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057d0:	f7fe fa4c 	bl	8003c6c <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d302      	bcc.n	80057e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d116      	bne.n	8005814 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005800:	f043 0220 	orr.w	r2, r3, #32
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e007      	b.n	8005824 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	f003 0304 	and.w	r3, r3, #4
 800581e:	2b04      	cmp	r3, #4
 8005820:	d1ca      	bne.n	80057b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005838:	e042      	b.n	80058c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	f003 0310 	and.w	r3, r3, #16
 8005844:	2b10      	cmp	r3, #16
 8005846:	d119      	bne.n	800587c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0210 	mvn.w	r2, #16
 8005850:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e029      	b.n	80058d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800587c:	f7fe f9f6 	bl	8003c6c <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	429a      	cmp	r2, r3
 800588a:	d302      	bcc.n	8005892 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d116      	bne.n	80058c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2220      	movs	r2, #32
 800589c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ac:	f043 0220 	orr.w	r2, r3, #32
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e007      	b.n	80058d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ca:	2b40      	cmp	r3, #64	; 0x40
 80058cc:	d1b5      	bne.n	800583a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ee:	d11b      	bne.n	8005928 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2220      	movs	r2, #32
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005914:	f043 0204 	orr.w	r2, r3, #4
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e000      	b.n	800592a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
 800593e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b20      	cmp	r3, #32
 800594a:	d129      	bne.n	80059a0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2224      	movs	r2, #36	; 0x24
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0201 	bic.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0210 	bic.w	r2, r2, #16
 8005972:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0201 	orr.w	r2, r2, #1
 8005992:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800599c:	2300      	movs	r3, #0
 800599e:	e000      	b.n	80059a2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80059a0:	2302      	movs	r3, #2
  }
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	370c      	adds	r7, #12
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b085      	sub	sp, #20
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80059b8:	2300      	movs	r3, #0
 80059ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b20      	cmp	r3, #32
 80059c6:	d12a      	bne.n	8005a1e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2224      	movs	r2, #36	; 0x24
 80059cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 0201 	bic.w	r2, r2, #1
 80059de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80059e8:	89fb      	ldrh	r3, [r7, #14]
 80059ea:	f023 030f 	bic.w	r3, r3, #15
 80059ee:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	89fb      	ldrh	r3, [r7, #14]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	89fa      	ldrh	r2, [r7, #14]
 8005a00:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f042 0201 	orr.w	r2, r2, #1
 8005a10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2220      	movs	r2, #32
 8005a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	e000      	b.n	8005a20 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005a1e:	2302      	movs	r3, #2
  }
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e264      	b.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d075      	beq.n	8005b36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a4a:	4ba3      	ldr	r3, [pc, #652]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f003 030c 	and.w	r3, r3, #12
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d00c      	beq.n	8005a70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a56:	4ba0      	ldr	r3, [pc, #640]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a5e:	2b08      	cmp	r3, #8
 8005a60:	d112      	bne.n	8005a88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a62:	4b9d      	ldr	r3, [pc, #628]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a6e:	d10b      	bne.n	8005a88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a70:	4b99      	ldr	r3, [pc, #612]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d05b      	beq.n	8005b34 <HAL_RCC_OscConfig+0x108>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d157      	bne.n	8005b34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e23f      	b.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a90:	d106      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x74>
 8005a92:	4b91      	ldr	r3, [pc, #580]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a90      	ldr	r2, [pc, #576]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a9c:	6013      	str	r3, [r2, #0]
 8005a9e:	e01d      	b.n	8005adc <HAL_RCC_OscConfig+0xb0>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005aa8:	d10c      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x98>
 8005aaa:	4b8b      	ldr	r3, [pc, #556]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a8a      	ldr	r2, [pc, #552]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	4b88      	ldr	r3, [pc, #544]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a87      	ldr	r2, [pc, #540]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	e00b      	b.n	8005adc <HAL_RCC_OscConfig+0xb0>
 8005ac4:	4b84      	ldr	r3, [pc, #528]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a83      	ldr	r2, [pc, #524]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	4b81      	ldr	r3, [pc, #516]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a80      	ldr	r2, [pc, #512]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d013      	beq.n	8005b0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae4:	f7fe f8c2 	bl	8003c6c <HAL_GetTick>
 8005ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aea:	e008      	b.n	8005afe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aec:	f7fe f8be 	bl	8003c6c <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b64      	cmp	r3, #100	; 0x64
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e204      	b.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005afe:	4b76      	ldr	r3, [pc, #472]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d0f0      	beq.n	8005aec <HAL_RCC_OscConfig+0xc0>
 8005b0a:	e014      	b.n	8005b36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b0c:	f7fe f8ae 	bl	8003c6c <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b14:	f7fe f8aa 	bl	8003c6c <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b64      	cmp	r3, #100	; 0x64
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e1f0      	b.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b26:	4b6c      	ldr	r3, [pc, #432]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1f0      	bne.n	8005b14 <HAL_RCC_OscConfig+0xe8>
 8005b32:	e000      	b.n	8005b36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d063      	beq.n	8005c0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b42:	4b65      	ldr	r3, [pc, #404]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f003 030c 	and.w	r3, r3, #12
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00b      	beq.n	8005b66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b4e:	4b62      	ldr	r3, [pc, #392]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b56:	2b08      	cmp	r3, #8
 8005b58:	d11c      	bne.n	8005b94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b5a:	4b5f      	ldr	r3, [pc, #380]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d116      	bne.n	8005b94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b66:	4b5c      	ldr	r3, [pc, #368]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d005      	beq.n	8005b7e <HAL_RCC_OscConfig+0x152>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d001      	beq.n	8005b7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e1c4      	b.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b7e:	4b56      	ldr	r3, [pc, #344]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	4952      	ldr	r1, [pc, #328]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b92:	e03a      	b.n	8005c0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d020      	beq.n	8005bde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b9c:	4b4f      	ldr	r3, [pc, #316]	; (8005cdc <HAL_RCC_OscConfig+0x2b0>)
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba2:	f7fe f863 	bl	8003c6c <HAL_GetTick>
 8005ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba8:	e008      	b.n	8005bbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005baa:	f7fe f85f 	bl	8003c6c <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e1a5      	b.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bbc:	4b46      	ldr	r3, [pc, #280]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0302 	and.w	r3, r3, #2
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0f0      	beq.n	8005baa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc8:	4b43      	ldr	r3, [pc, #268]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	4940      	ldr	r1, [pc, #256]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	600b      	str	r3, [r1, #0]
 8005bdc:	e015      	b.n	8005c0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bde:	4b3f      	ldr	r3, [pc, #252]	; (8005cdc <HAL_RCC_OscConfig+0x2b0>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be4:	f7fe f842 	bl	8003c6c <HAL_GetTick>
 8005be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bec:	f7fe f83e 	bl	8003c6c <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e184      	b.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bfe:	4b36      	ldr	r3, [pc, #216]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1f0      	bne.n	8005bec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0308 	and.w	r3, r3, #8
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d030      	beq.n	8005c78 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d016      	beq.n	8005c4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c1e:	4b30      	ldr	r3, [pc, #192]	; (8005ce0 <HAL_RCC_OscConfig+0x2b4>)
 8005c20:	2201      	movs	r2, #1
 8005c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c24:	f7fe f822 	bl	8003c6c <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c2c:	f7fe f81e 	bl	8003c6c <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e164      	b.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c3e:	4b26      	ldr	r3, [pc, #152]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d0f0      	beq.n	8005c2c <HAL_RCC_OscConfig+0x200>
 8005c4a:	e015      	b.n	8005c78 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c4c:	4b24      	ldr	r3, [pc, #144]	; (8005ce0 <HAL_RCC_OscConfig+0x2b4>)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c52:	f7fe f80b 	bl	8003c6c <HAL_GetTick>
 8005c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c58:	e008      	b.n	8005c6c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c5a:	f7fe f807 	bl	8003c6c <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d901      	bls.n	8005c6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e14d      	b.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c6c:	4b1a      	ldr	r3, [pc, #104]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1f0      	bne.n	8005c5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 80a0 	beq.w	8005dc6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c86:	2300      	movs	r3, #0
 8005c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c8a:	4b13      	ldr	r3, [pc, #76]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10f      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c96:	2300      	movs	r3, #0
 8005c98:	60bb      	str	r3, [r7, #8]
 8005c9a:	4b0f      	ldr	r3, [pc, #60]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	4a0e      	ldr	r2, [pc, #56]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ca6:	4b0c      	ldr	r3, [pc, #48]	; (8005cd8 <HAL_RCC_OscConfig+0x2ac>)
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cae:	60bb      	str	r3, [r7, #8]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <HAL_RCC_OscConfig+0x2b8>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d121      	bne.n	8005d06 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cc2:	4b08      	ldr	r3, [pc, #32]	; (8005ce4 <HAL_RCC_OscConfig+0x2b8>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a07      	ldr	r2, [pc, #28]	; (8005ce4 <HAL_RCC_OscConfig+0x2b8>)
 8005cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cce:	f7fd ffcd 	bl	8003c6c <HAL_GetTick>
 8005cd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd4:	e011      	b.n	8005cfa <HAL_RCC_OscConfig+0x2ce>
 8005cd6:	bf00      	nop
 8005cd8:	40023800 	.word	0x40023800
 8005cdc:	42470000 	.word	0x42470000
 8005ce0:	42470e80 	.word	0x42470e80
 8005ce4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ce8:	f7fd ffc0 	bl	8003c6c <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e106      	b.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cfa:	4b85      	ldr	r3, [pc, #532]	; (8005f10 <HAL_RCC_OscConfig+0x4e4>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d0f0      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d106      	bne.n	8005d1c <HAL_RCC_OscConfig+0x2f0>
 8005d0e:	4b81      	ldr	r3, [pc, #516]	; (8005f14 <HAL_RCC_OscConfig+0x4e8>)
 8005d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d12:	4a80      	ldr	r2, [pc, #512]	; (8005f14 <HAL_RCC_OscConfig+0x4e8>)
 8005d14:	f043 0301 	orr.w	r3, r3, #1
 8005d18:	6713      	str	r3, [r2, #112]	; 0x70
 8005d1a:	e01c      	b.n	8005d56 <HAL_RCC_OscConfig+0x32a>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	2b05      	cmp	r3, #5
 8005d22:	d10c      	bne.n	8005d3e <HAL_RCC_OscConfig+0x312>
 8005d24:	4b7b      	ldr	r3, [pc, #492]	; (8005f14 <HAL_RCC_OscConfig+0x4e8>)
 8005d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d28:	4a7a      	ldr	r2, [pc, #488]	; (8005f14 <HAL_RCC_OscConfig+0x4e8>)
 8005d2a:	f043 0304 	orr.w	r3, r3, #4
 8005d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d30:	4b78      	ldr	r3, [pc, #480]	; (8005f14 <HAL_RCC_OscConfig+0x4e8>)
 8005d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d34:	4a77      	ldr	r2, [pc, #476]	; (8005f14 <HAL_RCC_OscConfig+0x4e8>)
 8005d36:	f043 0301 	orr.w	r3, r3, #1
 8005d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d3c:	e00b      	b.n	8005d56 <HAL_RCC_OscConfig+0x32a>
 8005d3e:	4b75      	ldr	r3, [pc, #468]	; (8005f14 <HAL_RCC_OscConfig+0x4e8>)
 8005d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d42:	4a74      	ldr	r2, [pc, #464]	; (8005f14 <HAL_RCC_OscConfig+0x4e8>)
 8005d44:	f023 0301 	bic.w	r3, r3, #1
 8005d48:	6713      	str	r3, [r2, #112]	; 0x70
 8005d4a:	4b72      	ldr	r3, [pc, #456]	; (8005f14 <HAL_RCC_OscConfig+0x4e8>)
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4e:	4a71      	ldr	r2, [pc, #452]	; (8005f14 <HAL_RCC_OscConfig+0x4e8>)
 8005d50:	f023 0304 	bic.w	r3, r3, #4
 8005d54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d015      	beq.n	8005d8a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d5e:	f7fd ff85 	bl	8003c6c <HAL_GetTick>
 8005d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d64:	e00a      	b.n	8005d7c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d66:	f7fd ff81 	bl	8003c6c <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d901      	bls.n	8005d7c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e0c5      	b.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d7c:	4b65      	ldr	r3, [pc, #404]	; (8005f14 <HAL_RCC_OscConfig+0x4e8>)
 8005d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d0ee      	beq.n	8005d66 <HAL_RCC_OscConfig+0x33a>
 8005d88:	e014      	b.n	8005db4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d8a:	f7fd ff6f 	bl	8003c6c <HAL_GetTick>
 8005d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d90:	e00a      	b.n	8005da8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d92:	f7fd ff6b 	bl	8003c6c <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d901      	bls.n	8005da8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e0af      	b.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005da8:	4b5a      	ldr	r3, [pc, #360]	; (8005f14 <HAL_RCC_OscConfig+0x4e8>)
 8005daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dac:	f003 0302 	and.w	r3, r3, #2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1ee      	bne.n	8005d92 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005db4:	7dfb      	ldrb	r3, [r7, #23]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d105      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dba:	4b56      	ldr	r3, [pc, #344]	; (8005f14 <HAL_RCC_OscConfig+0x4e8>)
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	4a55      	ldr	r2, [pc, #340]	; (8005f14 <HAL_RCC_OscConfig+0x4e8>)
 8005dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dc4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 809b 	beq.w	8005f06 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dd0:	4b50      	ldr	r3, [pc, #320]	; (8005f14 <HAL_RCC_OscConfig+0x4e8>)
 8005dd2:	689b      	ldr	r3, [r3, #8]
 8005dd4:	f003 030c 	and.w	r3, r3, #12
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d05c      	beq.n	8005e96 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d141      	bne.n	8005e68 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005de4:	4b4c      	ldr	r3, [pc, #304]	; (8005f18 <HAL_RCC_OscConfig+0x4ec>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dea:	f7fd ff3f 	bl	8003c6c <HAL_GetTick>
 8005dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005df0:	e008      	b.n	8005e04 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005df2:	f7fd ff3b 	bl	8003c6c <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e081      	b.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e04:	4b43      	ldr	r3, [pc, #268]	; (8005f14 <HAL_RCC_OscConfig+0x4e8>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1f0      	bne.n	8005df2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	69da      	ldr	r2, [r3, #28]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	019b      	lsls	r3, r3, #6
 8005e20:	431a      	orrs	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e26:	085b      	lsrs	r3, r3, #1
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	041b      	lsls	r3, r3, #16
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e32:	061b      	lsls	r3, r3, #24
 8005e34:	4937      	ldr	r1, [pc, #220]	; (8005f14 <HAL_RCC_OscConfig+0x4e8>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e3a:	4b37      	ldr	r3, [pc, #220]	; (8005f18 <HAL_RCC_OscConfig+0x4ec>)
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e40:	f7fd ff14 	bl	8003c6c <HAL_GetTick>
 8005e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e46:	e008      	b.n	8005e5a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e48:	f7fd ff10 	bl	8003c6c <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e056      	b.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e5a:	4b2e      	ldr	r3, [pc, #184]	; (8005f14 <HAL_RCC_OscConfig+0x4e8>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d0f0      	beq.n	8005e48 <HAL_RCC_OscConfig+0x41c>
 8005e66:	e04e      	b.n	8005f06 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e68:	4b2b      	ldr	r3, [pc, #172]	; (8005f18 <HAL_RCC_OscConfig+0x4ec>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e6e:	f7fd fefd 	bl	8003c6c <HAL_GetTick>
 8005e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e74:	e008      	b.n	8005e88 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e76:	f7fd fef9 	bl	8003c6c <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	2b02      	cmp	r3, #2
 8005e82:	d901      	bls.n	8005e88 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e03f      	b.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e88:	4b22      	ldr	r3, [pc, #136]	; (8005f14 <HAL_RCC_OscConfig+0x4e8>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1f0      	bne.n	8005e76 <HAL_RCC_OscConfig+0x44a>
 8005e94:	e037      	b.n	8005f06 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d101      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e032      	b.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ea2:	4b1c      	ldr	r3, [pc, #112]	; (8005f14 <HAL_RCC_OscConfig+0x4e8>)
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d028      	beq.n	8005f02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d121      	bne.n	8005f02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d11a      	bne.n	8005f02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ed8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d111      	bne.n	8005f02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee8:	085b      	lsrs	r3, r3, #1
 8005eea:	3b01      	subs	r3, #1
 8005eec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d107      	bne.n	8005f02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d001      	beq.n	8005f06 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e000      	b.n	8005f08 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	40007000 	.word	0x40007000
 8005f14:	40023800 	.word	0x40023800
 8005f18:	42470060 	.word	0x42470060

08005f1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e0cc      	b.n	80060ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f30:	4b68      	ldr	r3, [pc, #416]	; (80060d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 030f 	and.w	r3, r3, #15
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d90c      	bls.n	8005f58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f3e:	4b65      	ldr	r3, [pc, #404]	; (80060d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f46:	4b63      	ldr	r3, [pc, #396]	; (80060d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 030f 	and.w	r3, r3, #15
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d001      	beq.n	8005f58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e0b8      	b.n	80060ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d020      	beq.n	8005fa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0304 	and.w	r3, r3, #4
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d005      	beq.n	8005f7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f70:	4b59      	ldr	r3, [pc, #356]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	4a58      	ldr	r2, [pc, #352]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d005      	beq.n	8005f94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f88:	4b53      	ldr	r3, [pc, #332]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	4a52      	ldr	r2, [pc, #328]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f94:	4b50      	ldr	r3, [pc, #320]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	494d      	ldr	r1, [pc, #308]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d044      	beq.n	800603c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d107      	bne.n	8005fca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fba:	4b47      	ldr	r3, [pc, #284]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d119      	bne.n	8005ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e07f      	b.n	80060ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d003      	beq.n	8005fda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fd6:	2b03      	cmp	r3, #3
 8005fd8:	d107      	bne.n	8005fea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fda:	4b3f      	ldr	r3, [pc, #252]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d109      	bne.n	8005ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e06f      	b.n	80060ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fea:	4b3b      	ldr	r3, [pc, #236]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d101      	bne.n	8005ffa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e067      	b.n	80060ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ffa:	4b37      	ldr	r3, [pc, #220]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f023 0203 	bic.w	r2, r3, #3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	4934      	ldr	r1, [pc, #208]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006008:	4313      	orrs	r3, r2
 800600a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800600c:	f7fd fe2e 	bl	8003c6c <HAL_GetTick>
 8006010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006012:	e00a      	b.n	800602a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006014:	f7fd fe2a 	bl	8003c6c <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006022:	4293      	cmp	r3, r2
 8006024:	d901      	bls.n	800602a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e04f      	b.n	80060ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800602a:	4b2b      	ldr	r3, [pc, #172]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f003 020c 	and.w	r2, r3, #12
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	429a      	cmp	r2, r3
 800603a:	d1eb      	bne.n	8006014 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800603c:	4b25      	ldr	r3, [pc, #148]	; (80060d4 <HAL_RCC_ClockConfig+0x1b8>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 030f 	and.w	r3, r3, #15
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	429a      	cmp	r2, r3
 8006048:	d20c      	bcs.n	8006064 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800604a:	4b22      	ldr	r3, [pc, #136]	; (80060d4 <HAL_RCC_ClockConfig+0x1b8>)
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006052:	4b20      	ldr	r3, [pc, #128]	; (80060d4 <HAL_RCC_ClockConfig+0x1b8>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 030f 	and.w	r3, r3, #15
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	429a      	cmp	r2, r3
 800605e:	d001      	beq.n	8006064 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e032      	b.n	80060ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	d008      	beq.n	8006082 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006070:	4b19      	ldr	r3, [pc, #100]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	4916      	ldr	r1, [pc, #88]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 800607e:	4313      	orrs	r3, r2
 8006080:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0308 	and.w	r3, r3, #8
 800608a:	2b00      	cmp	r3, #0
 800608c:	d009      	beq.n	80060a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800608e:	4b12      	ldr	r3, [pc, #72]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	00db      	lsls	r3, r3, #3
 800609c:	490e      	ldr	r1, [pc, #56]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80060a2:	f000 f821 	bl	80060e8 <HAL_RCC_GetSysClockFreq>
 80060a6:	4602      	mov	r2, r0
 80060a8:	4b0b      	ldr	r3, [pc, #44]	; (80060d8 <HAL_RCC_ClockConfig+0x1bc>)
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	091b      	lsrs	r3, r3, #4
 80060ae:	f003 030f 	and.w	r3, r3, #15
 80060b2:	490a      	ldr	r1, [pc, #40]	; (80060dc <HAL_RCC_ClockConfig+0x1c0>)
 80060b4:	5ccb      	ldrb	r3, [r1, r3]
 80060b6:	fa22 f303 	lsr.w	r3, r2, r3
 80060ba:	4a09      	ldr	r2, [pc, #36]	; (80060e0 <HAL_RCC_ClockConfig+0x1c4>)
 80060bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060be:	4b09      	ldr	r3, [pc, #36]	; (80060e4 <HAL_RCC_ClockConfig+0x1c8>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fd fd8e 	bl	8003be4 <HAL_InitTick>

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	40023c00 	.word	0x40023c00
 80060d8:	40023800 	.word	0x40023800
 80060dc:	08031cec 	.word	0x08031cec
 80060e0:	20000010 	.word	0x20000010
 80060e4:	20000018 	.word	0x20000018

080060e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060e8:	b5b0      	push	{r4, r5, r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060ee:	2100      	movs	r1, #0
 80060f0:	6079      	str	r1, [r7, #4]
 80060f2:	2100      	movs	r1, #0
 80060f4:	60f9      	str	r1, [r7, #12]
 80060f6:	2100      	movs	r1, #0
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80060fa:	2100      	movs	r1, #0
 80060fc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060fe:	4952      	ldr	r1, [pc, #328]	; (8006248 <HAL_RCC_GetSysClockFreq+0x160>)
 8006100:	6889      	ldr	r1, [r1, #8]
 8006102:	f001 010c 	and.w	r1, r1, #12
 8006106:	2908      	cmp	r1, #8
 8006108:	d00d      	beq.n	8006126 <HAL_RCC_GetSysClockFreq+0x3e>
 800610a:	2908      	cmp	r1, #8
 800610c:	f200 8094 	bhi.w	8006238 <HAL_RCC_GetSysClockFreq+0x150>
 8006110:	2900      	cmp	r1, #0
 8006112:	d002      	beq.n	800611a <HAL_RCC_GetSysClockFreq+0x32>
 8006114:	2904      	cmp	r1, #4
 8006116:	d003      	beq.n	8006120 <HAL_RCC_GetSysClockFreq+0x38>
 8006118:	e08e      	b.n	8006238 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800611a:	4b4c      	ldr	r3, [pc, #304]	; (800624c <HAL_RCC_GetSysClockFreq+0x164>)
 800611c:	60bb      	str	r3, [r7, #8]
       break;
 800611e:	e08e      	b.n	800623e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006120:	4b4b      	ldr	r3, [pc, #300]	; (8006250 <HAL_RCC_GetSysClockFreq+0x168>)
 8006122:	60bb      	str	r3, [r7, #8]
      break;
 8006124:	e08b      	b.n	800623e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006126:	4948      	ldr	r1, [pc, #288]	; (8006248 <HAL_RCC_GetSysClockFreq+0x160>)
 8006128:	6849      	ldr	r1, [r1, #4]
 800612a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800612e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006130:	4945      	ldr	r1, [pc, #276]	; (8006248 <HAL_RCC_GetSysClockFreq+0x160>)
 8006132:	6849      	ldr	r1, [r1, #4]
 8006134:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006138:	2900      	cmp	r1, #0
 800613a:	d024      	beq.n	8006186 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800613c:	4942      	ldr	r1, [pc, #264]	; (8006248 <HAL_RCC_GetSysClockFreq+0x160>)
 800613e:	6849      	ldr	r1, [r1, #4]
 8006140:	0989      	lsrs	r1, r1, #6
 8006142:	4608      	mov	r0, r1
 8006144:	f04f 0100 	mov.w	r1, #0
 8006148:	f240 14ff 	movw	r4, #511	; 0x1ff
 800614c:	f04f 0500 	mov.w	r5, #0
 8006150:	ea00 0204 	and.w	r2, r0, r4
 8006154:	ea01 0305 	and.w	r3, r1, r5
 8006158:	493d      	ldr	r1, [pc, #244]	; (8006250 <HAL_RCC_GetSysClockFreq+0x168>)
 800615a:	fb01 f003 	mul.w	r0, r1, r3
 800615e:	2100      	movs	r1, #0
 8006160:	fb01 f102 	mul.w	r1, r1, r2
 8006164:	1844      	adds	r4, r0, r1
 8006166:	493a      	ldr	r1, [pc, #232]	; (8006250 <HAL_RCC_GetSysClockFreq+0x168>)
 8006168:	fba2 0101 	umull	r0, r1, r2, r1
 800616c:	1863      	adds	r3, r4, r1
 800616e:	4619      	mov	r1, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	461a      	mov	r2, r3
 8006174:	f04f 0300 	mov.w	r3, #0
 8006178:	f7fa fd96 	bl	8000ca8 <__aeabi_uldivmod>
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	4613      	mov	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	e04a      	b.n	800621c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006186:	4b30      	ldr	r3, [pc, #192]	; (8006248 <HAL_RCC_GetSysClockFreq+0x160>)
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	099b      	lsrs	r3, r3, #6
 800618c:	461a      	mov	r2, r3
 800618e:	f04f 0300 	mov.w	r3, #0
 8006192:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006196:	f04f 0100 	mov.w	r1, #0
 800619a:	ea02 0400 	and.w	r4, r2, r0
 800619e:	ea03 0501 	and.w	r5, r3, r1
 80061a2:	4620      	mov	r0, r4
 80061a4:	4629      	mov	r1, r5
 80061a6:	f04f 0200 	mov.w	r2, #0
 80061aa:	f04f 0300 	mov.w	r3, #0
 80061ae:	014b      	lsls	r3, r1, #5
 80061b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80061b4:	0142      	lsls	r2, r0, #5
 80061b6:	4610      	mov	r0, r2
 80061b8:	4619      	mov	r1, r3
 80061ba:	1b00      	subs	r0, r0, r4
 80061bc:	eb61 0105 	sbc.w	r1, r1, r5
 80061c0:	f04f 0200 	mov.w	r2, #0
 80061c4:	f04f 0300 	mov.w	r3, #0
 80061c8:	018b      	lsls	r3, r1, #6
 80061ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80061ce:	0182      	lsls	r2, r0, #6
 80061d0:	1a12      	subs	r2, r2, r0
 80061d2:	eb63 0301 	sbc.w	r3, r3, r1
 80061d6:	f04f 0000 	mov.w	r0, #0
 80061da:	f04f 0100 	mov.w	r1, #0
 80061de:	00d9      	lsls	r1, r3, #3
 80061e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061e4:	00d0      	lsls	r0, r2, #3
 80061e6:	4602      	mov	r2, r0
 80061e8:	460b      	mov	r3, r1
 80061ea:	1912      	adds	r2, r2, r4
 80061ec:	eb45 0303 	adc.w	r3, r5, r3
 80061f0:	f04f 0000 	mov.w	r0, #0
 80061f4:	f04f 0100 	mov.w	r1, #0
 80061f8:	0299      	lsls	r1, r3, #10
 80061fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80061fe:	0290      	lsls	r0, r2, #10
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	4610      	mov	r0, r2
 8006206:	4619      	mov	r1, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	461a      	mov	r2, r3
 800620c:	f04f 0300 	mov.w	r3, #0
 8006210:	f7fa fd4a 	bl	8000ca8 <__aeabi_uldivmod>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	4613      	mov	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800621c:	4b0a      	ldr	r3, [pc, #40]	; (8006248 <HAL_RCC_GetSysClockFreq+0x160>)
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	0c1b      	lsrs	r3, r3, #16
 8006222:	f003 0303 	and.w	r3, r3, #3
 8006226:	3301      	adds	r3, #1
 8006228:	005b      	lsls	r3, r3, #1
 800622a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	fbb2 f3f3 	udiv	r3, r2, r3
 8006234:	60bb      	str	r3, [r7, #8]
      break;
 8006236:	e002      	b.n	800623e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006238:	4b04      	ldr	r3, [pc, #16]	; (800624c <HAL_RCC_GetSysClockFreq+0x164>)
 800623a:	60bb      	str	r3, [r7, #8]
      break;
 800623c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800623e:	68bb      	ldr	r3, [r7, #8]
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bdb0      	pop	{r4, r5, r7, pc}
 8006248:	40023800 	.word	0x40023800
 800624c:	00f42400 	.word	0x00f42400
 8006250:	017d7840 	.word	0x017d7840

08006254 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006254:	b480      	push	{r7}
 8006256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006258:	4b03      	ldr	r3, [pc, #12]	; (8006268 <HAL_RCC_GetHCLKFreq+0x14>)
 800625a:	681b      	ldr	r3, [r3, #0]
}
 800625c:	4618      	mov	r0, r3
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	20000010 	.word	0x20000010

0800626c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006270:	f7ff fff0 	bl	8006254 <HAL_RCC_GetHCLKFreq>
 8006274:	4602      	mov	r2, r0
 8006276:	4b05      	ldr	r3, [pc, #20]	; (800628c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	0a9b      	lsrs	r3, r3, #10
 800627c:	f003 0307 	and.w	r3, r3, #7
 8006280:	4903      	ldr	r1, [pc, #12]	; (8006290 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006282:	5ccb      	ldrb	r3, [r1, r3]
 8006284:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006288:	4618      	mov	r0, r3
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40023800 	.word	0x40023800
 8006290:	08031cfc 	.word	0x08031cfc

08006294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006298:	f7ff ffdc 	bl	8006254 <HAL_RCC_GetHCLKFreq>
 800629c:	4602      	mov	r2, r0
 800629e:	4b05      	ldr	r3, [pc, #20]	; (80062b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	0b5b      	lsrs	r3, r3, #13
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	4903      	ldr	r1, [pc, #12]	; (80062b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062aa:	5ccb      	ldrb	r3, [r1, r3]
 80062ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	40023800 	.word	0x40023800
 80062b8:	08031cfc 	.word	0x08031cfc

080062bc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e01c      	b.n	8006308 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	795b      	ldrb	r3, [r3, #5]
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d105      	bne.n	80062e4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7fb ffcc 	bl	800227c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f042 0204 	orr.w	r2, r2, #4
 80062f8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3708      	adds	r7, #8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e07b      	b.n	800641a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	2b00      	cmp	r3, #0
 8006328:	d108      	bne.n	800633c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006332:	d009      	beq.n	8006348 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	61da      	str	r2, [r3, #28]
 800633a:	e005      	b.n	8006348 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d106      	bne.n	8006368 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7fb ffe2 	bl	800232c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2202      	movs	r2, #2
 800636c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800637e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006390:	431a      	orrs	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800639a:	431a      	orrs	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	f003 0302 	and.w	r3, r3, #2
 80063a4:	431a      	orrs	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	431a      	orrs	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	699b      	ldr	r3, [r3, #24]
 80063b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063b8:	431a      	orrs	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063c2:	431a      	orrs	r2, r3
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063cc:	ea42 0103 	orr.w	r1, r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	430a      	orrs	r2, r1
 80063de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	0c1b      	lsrs	r3, r3, #16
 80063e6:	f003 0104 	and.w	r1, r3, #4
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ee:	f003 0210 	and.w	r2, r3, #16
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69da      	ldr	r2, [r3, #28]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006408:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b088      	sub	sp, #32
 8006426:	af00      	add	r7, sp, #0
 8006428:	60f8      	str	r0, [r7, #12]
 800642a:	60b9      	str	r1, [r7, #8]
 800642c:	603b      	str	r3, [r7, #0]
 800642e:	4613      	mov	r3, r2
 8006430:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_SPI_Transmit+0x22>
 8006440:	2302      	movs	r3, #2
 8006442:	e126      	b.n	8006692 <HAL_SPI_Transmit+0x270>
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800644c:	f7fd fc0e 	bl	8003c6c <HAL_GetTick>
 8006450:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006452:	88fb      	ldrh	r3, [r7, #6]
 8006454:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b01      	cmp	r3, #1
 8006460:	d002      	beq.n	8006468 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006462:	2302      	movs	r3, #2
 8006464:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006466:	e10b      	b.n	8006680 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d002      	beq.n	8006474 <HAL_SPI_Transmit+0x52>
 800646e:	88fb      	ldrh	r3, [r7, #6]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d102      	bne.n	800647a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006478:	e102      	b.n	8006680 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2203      	movs	r2, #3
 800647e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	88fa      	ldrh	r2, [r7, #6]
 8006492:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	88fa      	ldrh	r2, [r7, #6]
 8006498:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064c0:	d10f      	bne.n	80064e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ec:	2b40      	cmp	r3, #64	; 0x40
 80064ee:	d007      	beq.n	8006500 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006508:	d14b      	bne.n	80065a2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <HAL_SPI_Transmit+0xf6>
 8006512:	8afb      	ldrh	r3, [r7, #22]
 8006514:	2b01      	cmp	r3, #1
 8006516:	d13e      	bne.n	8006596 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800651c:	881a      	ldrh	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006528:	1c9a      	adds	r2, r3, #2
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006532:	b29b      	uxth	r3, r3
 8006534:	3b01      	subs	r3, #1
 8006536:	b29a      	uxth	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800653c:	e02b      	b.n	8006596 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b02      	cmp	r3, #2
 800654a:	d112      	bne.n	8006572 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006550:	881a      	ldrh	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800655c:	1c9a      	adds	r2, r3, #2
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006566:	b29b      	uxth	r3, r3
 8006568:	3b01      	subs	r3, #1
 800656a:	b29a      	uxth	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006570:	e011      	b.n	8006596 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006572:	f7fd fb7b 	bl	8003c6c <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	683a      	ldr	r2, [r7, #0]
 800657e:	429a      	cmp	r2, r3
 8006580:	d803      	bhi.n	800658a <HAL_SPI_Transmit+0x168>
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006588:	d102      	bne.n	8006590 <HAL_SPI_Transmit+0x16e>
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d102      	bne.n	8006596 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006590:	2303      	movs	r3, #3
 8006592:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006594:	e074      	b.n	8006680 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800659a:	b29b      	uxth	r3, r3
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1ce      	bne.n	800653e <HAL_SPI_Transmit+0x11c>
 80065a0:	e04c      	b.n	800663c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d002      	beq.n	80065b0 <HAL_SPI_Transmit+0x18e>
 80065aa:	8afb      	ldrh	r3, [r7, #22]
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d140      	bne.n	8006632 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	330c      	adds	r3, #12
 80065ba:	7812      	ldrb	r2, [r2, #0]
 80065bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80065d6:	e02c      	b.n	8006632 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d113      	bne.n	800660e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	330c      	adds	r3, #12
 80065f0:	7812      	ldrb	r2, [r2, #0]
 80065f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006602:	b29b      	uxth	r3, r3
 8006604:	3b01      	subs	r3, #1
 8006606:	b29a      	uxth	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	86da      	strh	r2, [r3, #54]	; 0x36
 800660c:	e011      	b.n	8006632 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800660e:	f7fd fb2d 	bl	8003c6c <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	683a      	ldr	r2, [r7, #0]
 800661a:	429a      	cmp	r2, r3
 800661c:	d803      	bhi.n	8006626 <HAL_SPI_Transmit+0x204>
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006624:	d102      	bne.n	800662c <HAL_SPI_Transmit+0x20a>
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d102      	bne.n	8006632 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006630:	e026      	b.n	8006680 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006636:	b29b      	uxth	r3, r3
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1cd      	bne.n	80065d8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	6839      	ldr	r1, [r7, #0]
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 f8b3 	bl	80067ac <SPI_EndRxTxTransaction>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2220      	movs	r2, #32
 8006650:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10a      	bne.n	8006670 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800665a:	2300      	movs	r3, #0
 800665c:	613b      	str	r3, [r7, #16]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	613b      	str	r3, [r7, #16]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	613b      	str	r3, [r7, #16]
 800666e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006674:	2b00      	cmp	r3, #0
 8006676:	d002      	beq.n	800667e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	77fb      	strb	r3, [r7, #31]
 800667c:	e000      	b.n	8006680 <HAL_SPI_Transmit+0x25e>
  }

error:
 800667e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006690:	7ffb      	ldrb	r3, [r7, #31]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3720      	adds	r7, #32
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
	...

0800669c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b088      	sub	sp, #32
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	603b      	str	r3, [r7, #0]
 80066a8:	4613      	mov	r3, r2
 80066aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80066ac:	f7fd fade 	bl	8003c6c <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b4:	1a9b      	subs	r3, r3, r2
 80066b6:	683a      	ldr	r2, [r7, #0]
 80066b8:	4413      	add	r3, r2
 80066ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80066bc:	f7fd fad6 	bl	8003c6c <HAL_GetTick>
 80066c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80066c2:	4b39      	ldr	r3, [pc, #228]	; (80067a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	015b      	lsls	r3, r3, #5
 80066c8:	0d1b      	lsrs	r3, r3, #20
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	fb02 f303 	mul.w	r3, r2, r3
 80066d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066d2:	e054      	b.n	800677e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066da:	d050      	beq.n	800677e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066dc:	f7fd fac6 	bl	8003c6c <HAL_GetTick>
 80066e0:	4602      	mov	r2, r0
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	69fa      	ldr	r2, [r7, #28]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d902      	bls.n	80066f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d13d      	bne.n	800676e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006700:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800670a:	d111      	bne.n	8006730 <SPI_WaitFlagStateUntilTimeout+0x94>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006714:	d004      	beq.n	8006720 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800671e:	d107      	bne.n	8006730 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800672e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006738:	d10f      	bne.n	800675a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006758:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e017      	b.n	800679e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006774:	2300      	movs	r3, #0
 8006776:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	3b01      	subs	r3, #1
 800677c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689a      	ldr	r2, [r3, #8]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	4013      	ands	r3, r2
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	429a      	cmp	r2, r3
 800678c:	bf0c      	ite	eq
 800678e:	2301      	moveq	r3, #1
 8006790:	2300      	movne	r3, #0
 8006792:	b2db      	uxtb	r3, r3
 8006794:	461a      	mov	r2, r3
 8006796:	79fb      	ldrb	r3, [r7, #7]
 8006798:	429a      	cmp	r2, r3
 800679a:	d19b      	bne.n	80066d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3720      	adds	r7, #32
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	20000010 	.word	0x20000010

080067ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af02      	add	r7, sp, #8
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80067b8:	4b1b      	ldr	r3, [pc, #108]	; (8006828 <SPI_EndRxTxTransaction+0x7c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a1b      	ldr	r2, [pc, #108]	; (800682c <SPI_EndRxTxTransaction+0x80>)
 80067be:	fba2 2303 	umull	r2, r3, r2, r3
 80067c2:	0d5b      	lsrs	r3, r3, #21
 80067c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80067c8:	fb02 f303 	mul.w	r3, r2, r3
 80067cc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067d6:	d112      	bne.n	80067fe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	2200      	movs	r2, #0
 80067e0:	2180      	movs	r1, #128	; 0x80
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f7ff ff5a 	bl	800669c <SPI_WaitFlagStateUntilTimeout>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d016      	beq.n	800681c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f2:	f043 0220 	orr.w	r2, r3, #32
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e00f      	b.n	800681e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00a      	beq.n	800681a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	3b01      	subs	r3, #1
 8006808:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006814:	2b80      	cmp	r3, #128	; 0x80
 8006816:	d0f2      	beq.n	80067fe <SPI_EndRxTxTransaction+0x52>
 8006818:	e000      	b.n	800681c <SPI_EndRxTxTransaction+0x70>
        break;
 800681a:	bf00      	nop
  }

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20000010 	.word	0x20000010
 800682c:	165e9f81 	.word	0x165e9f81

08006830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e041      	b.n	80068c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d106      	bne.n	800685c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7fb ff84 	bl	8002764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2202      	movs	r2, #2
 8006860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	3304      	adds	r3, #4
 800686c:	4619      	mov	r1, r3
 800686e:	4610      	mov	r0, r2
 8006870:	f000 face 	bl	8006e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068c4:	2300      	movs	r3, #0
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3708      	adds	r7, #8
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b082      	sub	sp, #8
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e041      	b.n	8006964 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d106      	bne.n	80068fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f7fb ff57 	bl	80027a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2202      	movs	r2, #2
 80068fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	3304      	adds	r3, #4
 800690a:	4619      	mov	r1, r3
 800690c:	4610      	mov	r0, r2
 800690e:	f000 fa7f 	bl	8006e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d109      	bne.n	8006990 <HAL_TIM_PWM_Start+0x24>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b01      	cmp	r3, #1
 8006986:	bf14      	ite	ne
 8006988:	2301      	movne	r3, #1
 800698a:	2300      	moveq	r3, #0
 800698c:	b2db      	uxtb	r3, r3
 800698e:	e022      	b.n	80069d6 <HAL_TIM_PWM_Start+0x6a>
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	2b04      	cmp	r3, #4
 8006994:	d109      	bne.n	80069aa <HAL_TIM_PWM_Start+0x3e>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b01      	cmp	r3, #1
 80069a0:	bf14      	ite	ne
 80069a2:	2301      	movne	r3, #1
 80069a4:	2300      	moveq	r3, #0
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	e015      	b.n	80069d6 <HAL_TIM_PWM_Start+0x6a>
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	2b08      	cmp	r3, #8
 80069ae:	d109      	bne.n	80069c4 <HAL_TIM_PWM_Start+0x58>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	bf14      	ite	ne
 80069bc:	2301      	movne	r3, #1
 80069be:	2300      	moveq	r3, #0
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	e008      	b.n	80069d6 <HAL_TIM_PWM_Start+0x6a>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	bf14      	ite	ne
 80069d0:	2301      	movne	r3, #1
 80069d2:	2300      	moveq	r3, #0
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e07c      	b.n	8006ad8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d104      	bne.n	80069ee <HAL_TIM_PWM_Start+0x82>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069ec:	e013      	b.n	8006a16 <HAL_TIM_PWM_Start+0xaa>
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	2b04      	cmp	r3, #4
 80069f2:	d104      	bne.n	80069fe <HAL_TIM_PWM_Start+0x92>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2202      	movs	r2, #2
 80069f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069fc:	e00b      	b.n	8006a16 <HAL_TIM_PWM_Start+0xaa>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b08      	cmp	r3, #8
 8006a02:	d104      	bne.n	8006a0e <HAL_TIM_PWM_Start+0xa2>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2202      	movs	r2, #2
 8006a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a0c:	e003      	b.n	8006a16 <HAL_TIM_PWM_Start+0xaa>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2202      	movs	r2, #2
 8006a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	6839      	ldr	r1, [r7, #0]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fce0 	bl	80073e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a2d      	ldr	r2, [pc, #180]	; (8006ae0 <HAL_TIM_PWM_Start+0x174>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d004      	beq.n	8006a38 <HAL_TIM_PWM_Start+0xcc>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a2c      	ldr	r2, [pc, #176]	; (8006ae4 <HAL_TIM_PWM_Start+0x178>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d101      	bne.n	8006a3c <HAL_TIM_PWM_Start+0xd0>
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e000      	b.n	8006a3e <HAL_TIM_PWM_Start+0xd2>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d007      	beq.n	8006a52 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a22      	ldr	r2, [pc, #136]	; (8006ae0 <HAL_TIM_PWM_Start+0x174>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d022      	beq.n	8006aa2 <HAL_TIM_PWM_Start+0x136>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a64:	d01d      	beq.n	8006aa2 <HAL_TIM_PWM_Start+0x136>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a1f      	ldr	r2, [pc, #124]	; (8006ae8 <HAL_TIM_PWM_Start+0x17c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d018      	beq.n	8006aa2 <HAL_TIM_PWM_Start+0x136>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a1d      	ldr	r2, [pc, #116]	; (8006aec <HAL_TIM_PWM_Start+0x180>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d013      	beq.n	8006aa2 <HAL_TIM_PWM_Start+0x136>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a1c      	ldr	r2, [pc, #112]	; (8006af0 <HAL_TIM_PWM_Start+0x184>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d00e      	beq.n	8006aa2 <HAL_TIM_PWM_Start+0x136>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a16      	ldr	r2, [pc, #88]	; (8006ae4 <HAL_TIM_PWM_Start+0x178>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d009      	beq.n	8006aa2 <HAL_TIM_PWM_Start+0x136>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a18      	ldr	r2, [pc, #96]	; (8006af4 <HAL_TIM_PWM_Start+0x188>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d004      	beq.n	8006aa2 <HAL_TIM_PWM_Start+0x136>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a16      	ldr	r2, [pc, #88]	; (8006af8 <HAL_TIM_PWM_Start+0x18c>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d111      	bne.n	8006ac6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	f003 0307 	and.w	r3, r3, #7
 8006aac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2b06      	cmp	r3, #6
 8006ab2:	d010      	beq.n	8006ad6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f042 0201 	orr.w	r2, r2, #1
 8006ac2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ac4:	e007      	b.n	8006ad6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f042 0201 	orr.w	r2, r2, #1
 8006ad4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	40010000 	.word	0x40010000
 8006ae4:	40010400 	.word	0x40010400
 8006ae8:	40000400 	.word	0x40000400
 8006aec:	40000800 	.word	0x40000800
 8006af0:	40000c00 	.word	0x40000c00
 8006af4:	40014000 	.word	0x40014000
 8006af8:	40001800 	.word	0x40001800

08006afc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d101      	bne.n	8006b1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b16:	2302      	movs	r3, #2
 8006b18:	e0ae      	b.n	8006c78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b0c      	cmp	r3, #12
 8006b26:	f200 809f 	bhi.w	8006c68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006b2a:	a201      	add	r2, pc, #4	; (adr r2, 8006b30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b30:	08006b65 	.word	0x08006b65
 8006b34:	08006c69 	.word	0x08006c69
 8006b38:	08006c69 	.word	0x08006c69
 8006b3c:	08006c69 	.word	0x08006c69
 8006b40:	08006ba5 	.word	0x08006ba5
 8006b44:	08006c69 	.word	0x08006c69
 8006b48:	08006c69 	.word	0x08006c69
 8006b4c:	08006c69 	.word	0x08006c69
 8006b50:	08006be7 	.word	0x08006be7
 8006b54:	08006c69 	.word	0x08006c69
 8006b58:	08006c69 	.word	0x08006c69
 8006b5c:	08006c69 	.word	0x08006c69
 8006b60:	08006c27 	.word	0x08006c27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68b9      	ldr	r1, [r7, #8]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 f9f0 	bl	8006f50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	699a      	ldr	r2, [r3, #24]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 0208 	orr.w	r2, r2, #8
 8006b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	699a      	ldr	r2, [r3, #24]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f022 0204 	bic.w	r2, r2, #4
 8006b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6999      	ldr	r1, [r3, #24]
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	691a      	ldr	r2, [r3, #16]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	619a      	str	r2, [r3, #24]
      break;
 8006ba2:	e064      	b.n	8006c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68b9      	ldr	r1, [r7, #8]
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 fa40 	bl	8007030 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699a      	ldr	r2, [r3, #24]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	699a      	ldr	r2, [r3, #24]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6999      	ldr	r1, [r3, #24]
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	021a      	lsls	r2, r3, #8
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	430a      	orrs	r2, r1
 8006be2:	619a      	str	r2, [r3, #24]
      break;
 8006be4:	e043      	b.n	8006c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68b9      	ldr	r1, [r7, #8]
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 fa95 	bl	800711c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	69da      	ldr	r2, [r3, #28]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f042 0208 	orr.w	r2, r2, #8
 8006c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	69da      	ldr	r2, [r3, #28]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f022 0204 	bic.w	r2, r2, #4
 8006c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	69d9      	ldr	r1, [r3, #28]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	691a      	ldr	r2, [r3, #16]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	430a      	orrs	r2, r1
 8006c22:	61da      	str	r2, [r3, #28]
      break;
 8006c24:	e023      	b.n	8006c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68b9      	ldr	r1, [r7, #8]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f000 fae9 	bl	8007204 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	69da      	ldr	r2, [r3, #28]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69da      	ldr	r2, [r3, #28]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	69d9      	ldr	r1, [r3, #28]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	021a      	lsls	r2, r3, #8
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	430a      	orrs	r2, r1
 8006c64:	61da      	str	r2, [r3, #28]
      break;
 8006c66:	e002      	b.n	8006c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3718      	adds	r7, #24
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d101      	bne.n	8006c9c <HAL_TIM_ConfigClockSource+0x1c>
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e0b4      	b.n	8006e06 <HAL_TIM_ConfigClockSource+0x186>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cd4:	d03e      	beq.n	8006d54 <HAL_TIM_ConfigClockSource+0xd4>
 8006cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cda:	f200 8087 	bhi.w	8006dec <HAL_TIM_ConfigClockSource+0x16c>
 8006cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ce2:	f000 8086 	beq.w	8006df2 <HAL_TIM_ConfigClockSource+0x172>
 8006ce6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cea:	d87f      	bhi.n	8006dec <HAL_TIM_ConfigClockSource+0x16c>
 8006cec:	2b70      	cmp	r3, #112	; 0x70
 8006cee:	d01a      	beq.n	8006d26 <HAL_TIM_ConfigClockSource+0xa6>
 8006cf0:	2b70      	cmp	r3, #112	; 0x70
 8006cf2:	d87b      	bhi.n	8006dec <HAL_TIM_ConfigClockSource+0x16c>
 8006cf4:	2b60      	cmp	r3, #96	; 0x60
 8006cf6:	d050      	beq.n	8006d9a <HAL_TIM_ConfigClockSource+0x11a>
 8006cf8:	2b60      	cmp	r3, #96	; 0x60
 8006cfa:	d877      	bhi.n	8006dec <HAL_TIM_ConfigClockSource+0x16c>
 8006cfc:	2b50      	cmp	r3, #80	; 0x50
 8006cfe:	d03c      	beq.n	8006d7a <HAL_TIM_ConfigClockSource+0xfa>
 8006d00:	2b50      	cmp	r3, #80	; 0x50
 8006d02:	d873      	bhi.n	8006dec <HAL_TIM_ConfigClockSource+0x16c>
 8006d04:	2b40      	cmp	r3, #64	; 0x40
 8006d06:	d058      	beq.n	8006dba <HAL_TIM_ConfigClockSource+0x13a>
 8006d08:	2b40      	cmp	r3, #64	; 0x40
 8006d0a:	d86f      	bhi.n	8006dec <HAL_TIM_ConfigClockSource+0x16c>
 8006d0c:	2b30      	cmp	r3, #48	; 0x30
 8006d0e:	d064      	beq.n	8006dda <HAL_TIM_ConfigClockSource+0x15a>
 8006d10:	2b30      	cmp	r3, #48	; 0x30
 8006d12:	d86b      	bhi.n	8006dec <HAL_TIM_ConfigClockSource+0x16c>
 8006d14:	2b20      	cmp	r3, #32
 8006d16:	d060      	beq.n	8006dda <HAL_TIM_ConfigClockSource+0x15a>
 8006d18:	2b20      	cmp	r3, #32
 8006d1a:	d867      	bhi.n	8006dec <HAL_TIM_ConfigClockSource+0x16c>
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d05c      	beq.n	8006dda <HAL_TIM_ConfigClockSource+0x15a>
 8006d20:	2b10      	cmp	r3, #16
 8006d22:	d05a      	beq.n	8006dda <HAL_TIM_ConfigClockSource+0x15a>
 8006d24:	e062      	b.n	8006dec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6818      	ldr	r0, [r3, #0]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	6899      	ldr	r1, [r3, #8]
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	685a      	ldr	r2, [r3, #4]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	f000 fb35 	bl	80073a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	609a      	str	r2, [r3, #8]
      break;
 8006d52:	e04f      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6818      	ldr	r0, [r3, #0]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	6899      	ldr	r1, [r3, #8]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	f000 fb1e 	bl	80073a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689a      	ldr	r2, [r3, #8]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d76:	609a      	str	r2, [r3, #8]
      break;
 8006d78:	e03c      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6818      	ldr	r0, [r3, #0]
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	6859      	ldr	r1, [r3, #4]
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	461a      	mov	r2, r3
 8006d88:	f000 fa92 	bl	80072b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2150      	movs	r1, #80	; 0x50
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 faeb 	bl	800736e <TIM_ITRx_SetConfig>
      break;
 8006d98:	e02c      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6818      	ldr	r0, [r3, #0]
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	6859      	ldr	r1, [r3, #4]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	461a      	mov	r2, r3
 8006da8:	f000 fab1 	bl	800730e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2160      	movs	r1, #96	; 0x60
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 fadb 	bl	800736e <TIM_ITRx_SetConfig>
      break;
 8006db8:	e01c      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6818      	ldr	r0, [r3, #0]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	6859      	ldr	r1, [r3, #4]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	f000 fa72 	bl	80072b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2140      	movs	r1, #64	; 0x40
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f000 facb 	bl	800736e <TIM_ITRx_SetConfig>
      break;
 8006dd8:	e00c      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4619      	mov	r1, r3
 8006de4:	4610      	mov	r0, r2
 8006de6:	f000 fac2 	bl	800736e <TIM_ITRx_SetConfig>
      break;
 8006dea:	e003      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	73fb      	strb	r3, [r7, #15]
      break;
 8006df0:	e000      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006df2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
	...

08006e10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a40      	ldr	r2, [pc, #256]	; (8006f24 <TIM_Base_SetConfig+0x114>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d013      	beq.n	8006e50 <TIM_Base_SetConfig+0x40>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e2e:	d00f      	beq.n	8006e50 <TIM_Base_SetConfig+0x40>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a3d      	ldr	r2, [pc, #244]	; (8006f28 <TIM_Base_SetConfig+0x118>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00b      	beq.n	8006e50 <TIM_Base_SetConfig+0x40>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a3c      	ldr	r2, [pc, #240]	; (8006f2c <TIM_Base_SetConfig+0x11c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d007      	beq.n	8006e50 <TIM_Base_SetConfig+0x40>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a3b      	ldr	r2, [pc, #236]	; (8006f30 <TIM_Base_SetConfig+0x120>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d003      	beq.n	8006e50 <TIM_Base_SetConfig+0x40>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a3a      	ldr	r2, [pc, #232]	; (8006f34 <TIM_Base_SetConfig+0x124>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d108      	bne.n	8006e62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a2f      	ldr	r2, [pc, #188]	; (8006f24 <TIM_Base_SetConfig+0x114>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d02b      	beq.n	8006ec2 <TIM_Base_SetConfig+0xb2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e70:	d027      	beq.n	8006ec2 <TIM_Base_SetConfig+0xb2>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a2c      	ldr	r2, [pc, #176]	; (8006f28 <TIM_Base_SetConfig+0x118>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d023      	beq.n	8006ec2 <TIM_Base_SetConfig+0xb2>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a2b      	ldr	r2, [pc, #172]	; (8006f2c <TIM_Base_SetConfig+0x11c>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d01f      	beq.n	8006ec2 <TIM_Base_SetConfig+0xb2>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a2a      	ldr	r2, [pc, #168]	; (8006f30 <TIM_Base_SetConfig+0x120>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d01b      	beq.n	8006ec2 <TIM_Base_SetConfig+0xb2>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a29      	ldr	r2, [pc, #164]	; (8006f34 <TIM_Base_SetConfig+0x124>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d017      	beq.n	8006ec2 <TIM_Base_SetConfig+0xb2>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a28      	ldr	r2, [pc, #160]	; (8006f38 <TIM_Base_SetConfig+0x128>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d013      	beq.n	8006ec2 <TIM_Base_SetConfig+0xb2>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a27      	ldr	r2, [pc, #156]	; (8006f3c <TIM_Base_SetConfig+0x12c>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d00f      	beq.n	8006ec2 <TIM_Base_SetConfig+0xb2>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a26      	ldr	r2, [pc, #152]	; (8006f40 <TIM_Base_SetConfig+0x130>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d00b      	beq.n	8006ec2 <TIM_Base_SetConfig+0xb2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a25      	ldr	r2, [pc, #148]	; (8006f44 <TIM_Base_SetConfig+0x134>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d007      	beq.n	8006ec2 <TIM_Base_SetConfig+0xb2>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a24      	ldr	r2, [pc, #144]	; (8006f48 <TIM_Base_SetConfig+0x138>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d003      	beq.n	8006ec2 <TIM_Base_SetConfig+0xb2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a23      	ldr	r2, [pc, #140]	; (8006f4c <TIM_Base_SetConfig+0x13c>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d108      	bne.n	8006ed4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a0a      	ldr	r2, [pc, #40]	; (8006f24 <TIM_Base_SetConfig+0x114>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d003      	beq.n	8006f08 <TIM_Base_SetConfig+0xf8>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a0c      	ldr	r2, [pc, #48]	; (8006f34 <TIM_Base_SetConfig+0x124>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d103      	bne.n	8006f10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	691a      	ldr	r2, [r3, #16]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	615a      	str	r2, [r3, #20]
}
 8006f16:	bf00      	nop
 8006f18:	3714      	adds	r7, #20
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	40010000 	.word	0x40010000
 8006f28:	40000400 	.word	0x40000400
 8006f2c:	40000800 	.word	0x40000800
 8006f30:	40000c00 	.word	0x40000c00
 8006f34:	40010400 	.word	0x40010400
 8006f38:	40014000 	.word	0x40014000
 8006f3c:	40014400 	.word	0x40014400
 8006f40:	40014800 	.word	0x40014800
 8006f44:	40001800 	.word	0x40001800
 8006f48:	40001c00 	.word	0x40001c00
 8006f4c:	40002000 	.word	0x40002000

08006f50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b087      	sub	sp, #28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	f023 0201 	bic.w	r2, r3, #1
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f023 0303 	bic.w	r3, r3, #3
 8006f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f023 0302 	bic.w	r3, r3, #2
 8006f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a20      	ldr	r2, [pc, #128]	; (8007028 <TIM_OC1_SetConfig+0xd8>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d003      	beq.n	8006fb4 <TIM_OC1_SetConfig+0x64>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a1f      	ldr	r2, [pc, #124]	; (800702c <TIM_OC1_SetConfig+0xdc>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d10c      	bne.n	8006fce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f023 0308 	bic.w	r3, r3, #8
 8006fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f023 0304 	bic.w	r3, r3, #4
 8006fcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a15      	ldr	r2, [pc, #84]	; (8007028 <TIM_OC1_SetConfig+0xd8>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d003      	beq.n	8006fde <TIM_OC1_SetConfig+0x8e>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a14      	ldr	r2, [pc, #80]	; (800702c <TIM_OC1_SetConfig+0xdc>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d111      	bne.n	8007002 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	693a      	ldr	r2, [r7, #16]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	621a      	str	r2, [r3, #32]
}
 800701c:	bf00      	nop
 800701e:	371c      	adds	r7, #28
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	40010000 	.word	0x40010000
 800702c:	40010400 	.word	0x40010400

08007030 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007030:	b480      	push	{r7}
 8007032:	b087      	sub	sp, #28
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	f023 0210 	bic.w	r2, r3, #16
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	699b      	ldr	r3, [r3, #24]
 8007056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800705e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	021b      	lsls	r3, r3, #8
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	4313      	orrs	r3, r2
 8007072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f023 0320 	bic.w	r3, r3, #32
 800707a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	011b      	lsls	r3, r3, #4
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	4313      	orrs	r3, r2
 8007086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a22      	ldr	r2, [pc, #136]	; (8007114 <TIM_OC2_SetConfig+0xe4>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d003      	beq.n	8007098 <TIM_OC2_SetConfig+0x68>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a21      	ldr	r2, [pc, #132]	; (8007118 <TIM_OC2_SetConfig+0xe8>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d10d      	bne.n	80070b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800709e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	011b      	lsls	r3, r3, #4
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a17      	ldr	r2, [pc, #92]	; (8007114 <TIM_OC2_SetConfig+0xe4>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d003      	beq.n	80070c4 <TIM_OC2_SetConfig+0x94>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a16      	ldr	r2, [pc, #88]	; (8007118 <TIM_OC2_SetConfig+0xe8>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d113      	bne.n	80070ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	695b      	ldr	r3, [r3, #20]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	4313      	orrs	r3, r2
 80070de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	693a      	ldr	r2, [r7, #16]
 80070f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	685a      	ldr	r2, [r3, #4]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	621a      	str	r2, [r3, #32]
}
 8007106:	bf00      	nop
 8007108:	371c      	adds	r7, #28
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	40010000 	.word	0x40010000
 8007118:	40010400 	.word	0x40010400

0800711c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800711c:	b480      	push	{r7}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6a1b      	ldr	r3, [r3, #32]
 800712a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f023 0303 	bic.w	r3, r3, #3
 8007152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	4313      	orrs	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	021b      	lsls	r3, r3, #8
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	4313      	orrs	r3, r2
 8007170:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a21      	ldr	r2, [pc, #132]	; (80071fc <TIM_OC3_SetConfig+0xe0>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d003      	beq.n	8007182 <TIM_OC3_SetConfig+0x66>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a20      	ldr	r2, [pc, #128]	; (8007200 <TIM_OC3_SetConfig+0xe4>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d10d      	bne.n	800719e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007188:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	021b      	lsls	r3, r3, #8
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	4313      	orrs	r3, r2
 8007194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800719c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a16      	ldr	r2, [pc, #88]	; (80071fc <TIM_OC3_SetConfig+0xe0>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d003      	beq.n	80071ae <TIM_OC3_SetConfig+0x92>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a15      	ldr	r2, [pc, #84]	; (8007200 <TIM_OC3_SetConfig+0xe4>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d113      	bne.n	80071d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	011b      	lsls	r3, r3, #4
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	011b      	lsls	r3, r3, #4
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	621a      	str	r2, [r3, #32]
}
 80071f0:	bf00      	nop
 80071f2:	371c      	adds	r7, #28
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	40010000 	.word	0x40010000
 8007200:	40010400 	.word	0x40010400

08007204 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a1b      	ldr	r3, [r3, #32]
 800721e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800723a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	021b      	lsls	r3, r3, #8
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	4313      	orrs	r3, r2
 8007246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800724e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	031b      	lsls	r3, r3, #12
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	4313      	orrs	r3, r2
 800725a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	4a12      	ldr	r2, [pc, #72]	; (80072a8 <TIM_OC4_SetConfig+0xa4>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d003      	beq.n	800726c <TIM_OC4_SetConfig+0x68>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a11      	ldr	r2, [pc, #68]	; (80072ac <TIM_OC4_SetConfig+0xa8>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d109      	bne.n	8007280 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007272:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	019b      	lsls	r3, r3, #6
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	4313      	orrs	r3, r2
 800727e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	685a      	ldr	r2, [r3, #4]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	621a      	str	r2, [r3, #32]
}
 800729a:	bf00      	nop
 800729c:	371c      	adds	r7, #28
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	40010000 	.word	0x40010000
 80072ac:	40010400 	.word	0x40010400

080072b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6a1b      	ldr	r3, [r3, #32]
 80072c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	f023 0201 	bic.w	r2, r3, #1
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	011b      	lsls	r3, r3, #4
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	f023 030a 	bic.w	r3, r3, #10
 80072ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	621a      	str	r2, [r3, #32]
}
 8007302:	bf00      	nop
 8007304:	371c      	adds	r7, #28
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800730e:	b480      	push	{r7}
 8007310:	b087      	sub	sp, #28
 8007312:	af00      	add	r7, sp, #0
 8007314:	60f8      	str	r0, [r7, #12]
 8007316:	60b9      	str	r1, [r7, #8]
 8007318:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	f023 0210 	bic.w	r2, r3, #16
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007338:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	031b      	lsls	r3, r3, #12
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	4313      	orrs	r3, r2
 8007342:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800734a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	011b      	lsls	r3, r3, #4
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	4313      	orrs	r3, r2
 8007354:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	621a      	str	r2, [r3, #32]
}
 8007362:	bf00      	nop
 8007364:	371c      	adds	r7, #28
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800736e:	b480      	push	{r7}
 8007370:	b085      	sub	sp, #20
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007384:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007386:	683a      	ldr	r2, [r7, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4313      	orrs	r3, r2
 800738c:	f043 0307 	orr.w	r3, r3, #7
 8007390:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	609a      	str	r2, [r3, #8]
}
 8007398:	bf00      	nop
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b087      	sub	sp, #28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
 80073b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	021a      	lsls	r2, r3, #8
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	431a      	orrs	r2, r3
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	609a      	str	r2, [r3, #8]
}
 80073d8:	bf00      	nop
 80073da:	371c      	adds	r7, #28
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b087      	sub	sp, #28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	f003 031f 	and.w	r3, r3, #31
 80073f6:	2201      	movs	r2, #1
 80073f8:	fa02 f303 	lsl.w	r3, r2, r3
 80073fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6a1a      	ldr	r2, [r3, #32]
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	43db      	mvns	r3, r3
 8007406:	401a      	ands	r2, r3
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6a1a      	ldr	r2, [r3, #32]
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	f003 031f 	and.w	r3, r3, #31
 8007416:	6879      	ldr	r1, [r7, #4]
 8007418:	fa01 f303 	lsl.w	r3, r1, r3
 800741c:	431a      	orrs	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	621a      	str	r2, [r3, #32]
}
 8007422:	bf00      	nop
 8007424:	371c      	adds	r7, #28
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
	...

08007430 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007440:	2b01      	cmp	r3, #1
 8007442:	d101      	bne.n	8007448 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007444:	2302      	movs	r3, #2
 8007446:	e05a      	b.n	80074fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800746e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	4313      	orrs	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a21      	ldr	r2, [pc, #132]	; (800750c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d022      	beq.n	80074d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007494:	d01d      	beq.n	80074d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a1d      	ldr	r2, [pc, #116]	; (8007510 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d018      	beq.n	80074d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a1b      	ldr	r2, [pc, #108]	; (8007514 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d013      	beq.n	80074d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a1a      	ldr	r2, [pc, #104]	; (8007518 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d00e      	beq.n	80074d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a18      	ldr	r2, [pc, #96]	; (800751c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d009      	beq.n	80074d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a17      	ldr	r2, [pc, #92]	; (8007520 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d004      	beq.n	80074d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a15      	ldr	r2, [pc, #84]	; (8007524 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d10c      	bne.n	80074ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	40010000 	.word	0x40010000
 8007510:	40000400 	.word	0x40000400
 8007514:	40000800 	.word	0x40000800
 8007518:	40000c00 	.word	0x40000c00
 800751c:	40010400 	.word	0x40010400
 8007520:	40014000 	.word	0x40014000
 8007524:	40001800 	.word	0x40001800

08007528 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e03f      	b.n	80075ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d106      	bne.n	8007554 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7fb f9ac 	bl	80028ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2224      	movs	r2, #36	; 0x24
 8007558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68da      	ldr	r2, [r3, #12]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800756a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f929 	bl	80077c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	691a      	ldr	r2, [r3, #16]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007580:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	695a      	ldr	r2, [r3, #20]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007590:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2220      	movs	r2, #32
 80075ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2220      	movs	r2, #32
 80075b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b08a      	sub	sp, #40	; 0x28
 80075c6:	af02      	add	r7, sp, #8
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	603b      	str	r3, [r7, #0]
 80075ce:	4613      	mov	r3, r2
 80075d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80075d2:	2300      	movs	r3, #0
 80075d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	2b20      	cmp	r3, #32
 80075e0:	d17c      	bne.n	80076dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <HAL_UART_Transmit+0x2c>
 80075e8:	88fb      	ldrh	r3, [r7, #6]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e075      	b.n	80076de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d101      	bne.n	8007600 <HAL_UART_Transmit+0x3e>
 80075fc:	2302      	movs	r3, #2
 80075fe:	e06e      	b.n	80076de <HAL_UART_Transmit+0x11c>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2221      	movs	r2, #33	; 0x21
 8007612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007616:	f7fc fb29 	bl	8003c6c <HAL_GetTick>
 800761a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	88fa      	ldrh	r2, [r7, #6]
 8007620:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	88fa      	ldrh	r2, [r7, #6]
 8007626:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007630:	d108      	bne.n	8007644 <HAL_UART_Transmit+0x82>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d104      	bne.n	8007644 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800763a:	2300      	movs	r3, #0
 800763c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	61bb      	str	r3, [r7, #24]
 8007642:	e003      	b.n	800764c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007648:	2300      	movs	r3, #0
 800764a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007654:	e02a      	b.n	80076ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2200      	movs	r2, #0
 800765e:	2180      	movs	r1, #128	; 0x80
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 f840 	bl	80076e6 <UART_WaitOnFlagUntilTimeout>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e036      	b.n	80076de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10b      	bne.n	800768e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	881b      	ldrh	r3, [r3, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007684:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	3302      	adds	r3, #2
 800768a:	61bb      	str	r3, [r7, #24]
 800768c:	e007      	b.n	800769e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	781a      	ldrb	r2, [r3, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	3301      	adds	r3, #1
 800769c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	3b01      	subs	r3, #1
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1cf      	bne.n	8007656 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	2200      	movs	r2, #0
 80076be:	2140      	movs	r1, #64	; 0x40
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 f810 	bl	80076e6 <UART_WaitOnFlagUntilTimeout>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d001      	beq.n	80076d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e006      	b.n	80076de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2220      	movs	r2, #32
 80076d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80076d8:	2300      	movs	r3, #0
 80076da:	e000      	b.n	80076de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80076dc:	2302      	movs	r3, #2
  }
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3720      	adds	r7, #32
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b090      	sub	sp, #64	; 0x40
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	603b      	str	r3, [r7, #0]
 80076f2:	4613      	mov	r3, r2
 80076f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076f6:	e050      	b.n	800779a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fe:	d04c      	beq.n	800779a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007702:	2b00      	cmp	r3, #0
 8007704:	d007      	beq.n	8007716 <UART_WaitOnFlagUntilTimeout+0x30>
 8007706:	f7fc fab1 	bl	8003c6c <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007712:	429a      	cmp	r2, r3
 8007714:	d241      	bcs.n	800779a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	330c      	adds	r3, #12
 800771c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007720:	e853 3f00 	ldrex	r3, [r3]
 8007724:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800772c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	330c      	adds	r3, #12
 8007734:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007736:	637a      	str	r2, [r7, #52]	; 0x34
 8007738:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800773c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800773e:	e841 2300 	strex	r3, r2, [r1]
 8007742:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1e5      	bne.n	8007716 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	3314      	adds	r3, #20
 8007750:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	e853 3f00 	ldrex	r3, [r3]
 8007758:	613b      	str	r3, [r7, #16]
   return(result);
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f023 0301 	bic.w	r3, r3, #1
 8007760:	63bb      	str	r3, [r7, #56]	; 0x38
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3314      	adds	r3, #20
 8007768:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800776a:	623a      	str	r2, [r7, #32]
 800776c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776e:	69f9      	ldr	r1, [r7, #28]
 8007770:	6a3a      	ldr	r2, [r7, #32]
 8007772:	e841 2300 	strex	r3, r2, [r1]
 8007776:	61bb      	str	r3, [r7, #24]
   return(result);
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1e5      	bne.n	800774a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2220      	movs	r2, #32
 8007782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2220      	movs	r2, #32
 800778a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e00f      	b.n	80077ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	4013      	ands	r3, r2
 80077a4:	68ba      	ldr	r2, [r7, #8]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	bf0c      	ite	eq
 80077aa:	2301      	moveq	r3, #1
 80077ac:	2300      	movne	r3, #0
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	461a      	mov	r2, r3
 80077b2:	79fb      	ldrb	r3, [r7, #7]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d09f      	beq.n	80076f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3740      	adds	r7, #64	; 0x40
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
	...

080077c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c8:	b09f      	sub	sp, #124	; 0x7c
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80077d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077da:	68d9      	ldr	r1, [r3, #12]
 80077dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	ea40 0301 	orr.w	r3, r0, r1
 80077e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80077e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077e8:	689a      	ldr	r2, [r3, #8]
 80077ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	431a      	orrs	r2, r3
 80077f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077f2:	695b      	ldr	r3, [r3, #20]
 80077f4:	431a      	orrs	r2, r3
 80077f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077f8:	69db      	ldr	r3, [r3, #28]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80077fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007808:	f021 010c 	bic.w	r1, r1, #12
 800780c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007812:	430b      	orrs	r3, r1
 8007814:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007816:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007822:	6999      	ldr	r1, [r3, #24]
 8007824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	ea40 0301 	orr.w	r3, r0, r1
 800782c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800782e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	4bc5      	ldr	r3, [pc, #788]	; (8007b48 <UART_SetConfig+0x384>)
 8007834:	429a      	cmp	r2, r3
 8007836:	d004      	beq.n	8007842 <UART_SetConfig+0x7e>
 8007838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	4bc3      	ldr	r3, [pc, #780]	; (8007b4c <UART_SetConfig+0x388>)
 800783e:	429a      	cmp	r2, r3
 8007840:	d103      	bne.n	800784a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007842:	f7fe fd27 	bl	8006294 <HAL_RCC_GetPCLK2Freq>
 8007846:	6778      	str	r0, [r7, #116]	; 0x74
 8007848:	e002      	b.n	8007850 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800784a:	f7fe fd0f 	bl	800626c <HAL_RCC_GetPCLK1Freq>
 800784e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007852:	69db      	ldr	r3, [r3, #28]
 8007854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007858:	f040 80b6 	bne.w	80079c8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800785c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800785e:	461c      	mov	r4, r3
 8007860:	f04f 0500 	mov.w	r5, #0
 8007864:	4622      	mov	r2, r4
 8007866:	462b      	mov	r3, r5
 8007868:	1891      	adds	r1, r2, r2
 800786a:	6439      	str	r1, [r7, #64]	; 0x40
 800786c:	415b      	adcs	r3, r3
 800786e:	647b      	str	r3, [r7, #68]	; 0x44
 8007870:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007874:	1912      	adds	r2, r2, r4
 8007876:	eb45 0303 	adc.w	r3, r5, r3
 800787a:	f04f 0000 	mov.w	r0, #0
 800787e:	f04f 0100 	mov.w	r1, #0
 8007882:	00d9      	lsls	r1, r3, #3
 8007884:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007888:	00d0      	lsls	r0, r2, #3
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	1911      	adds	r1, r2, r4
 8007890:	6639      	str	r1, [r7, #96]	; 0x60
 8007892:	416b      	adcs	r3, r5
 8007894:	667b      	str	r3, [r7, #100]	; 0x64
 8007896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	461a      	mov	r2, r3
 800789c:	f04f 0300 	mov.w	r3, #0
 80078a0:	1891      	adds	r1, r2, r2
 80078a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80078a4:	415b      	adcs	r3, r3
 80078a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80078ac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80078b0:	f7f9 f9fa 	bl	8000ca8 <__aeabi_uldivmod>
 80078b4:	4602      	mov	r2, r0
 80078b6:	460b      	mov	r3, r1
 80078b8:	4ba5      	ldr	r3, [pc, #660]	; (8007b50 <UART_SetConfig+0x38c>)
 80078ba:	fba3 2302 	umull	r2, r3, r3, r2
 80078be:	095b      	lsrs	r3, r3, #5
 80078c0:	011e      	lsls	r6, r3, #4
 80078c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078c4:	461c      	mov	r4, r3
 80078c6:	f04f 0500 	mov.w	r5, #0
 80078ca:	4622      	mov	r2, r4
 80078cc:	462b      	mov	r3, r5
 80078ce:	1891      	adds	r1, r2, r2
 80078d0:	6339      	str	r1, [r7, #48]	; 0x30
 80078d2:	415b      	adcs	r3, r3
 80078d4:	637b      	str	r3, [r7, #52]	; 0x34
 80078d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80078da:	1912      	adds	r2, r2, r4
 80078dc:	eb45 0303 	adc.w	r3, r5, r3
 80078e0:	f04f 0000 	mov.w	r0, #0
 80078e4:	f04f 0100 	mov.w	r1, #0
 80078e8:	00d9      	lsls	r1, r3, #3
 80078ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80078ee:	00d0      	lsls	r0, r2, #3
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	1911      	adds	r1, r2, r4
 80078f6:	65b9      	str	r1, [r7, #88]	; 0x58
 80078f8:	416b      	adcs	r3, r5
 80078fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	461a      	mov	r2, r3
 8007902:	f04f 0300 	mov.w	r3, #0
 8007906:	1891      	adds	r1, r2, r2
 8007908:	62b9      	str	r1, [r7, #40]	; 0x28
 800790a:	415b      	adcs	r3, r3
 800790c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800790e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007912:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007916:	f7f9 f9c7 	bl	8000ca8 <__aeabi_uldivmod>
 800791a:	4602      	mov	r2, r0
 800791c:	460b      	mov	r3, r1
 800791e:	4b8c      	ldr	r3, [pc, #560]	; (8007b50 <UART_SetConfig+0x38c>)
 8007920:	fba3 1302 	umull	r1, r3, r3, r2
 8007924:	095b      	lsrs	r3, r3, #5
 8007926:	2164      	movs	r1, #100	; 0x64
 8007928:	fb01 f303 	mul.w	r3, r1, r3
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	3332      	adds	r3, #50	; 0x32
 8007932:	4a87      	ldr	r2, [pc, #540]	; (8007b50 <UART_SetConfig+0x38c>)
 8007934:	fba2 2303 	umull	r2, r3, r2, r3
 8007938:	095b      	lsrs	r3, r3, #5
 800793a:	005b      	lsls	r3, r3, #1
 800793c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007940:	441e      	add	r6, r3
 8007942:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007944:	4618      	mov	r0, r3
 8007946:	f04f 0100 	mov.w	r1, #0
 800794a:	4602      	mov	r2, r0
 800794c:	460b      	mov	r3, r1
 800794e:	1894      	adds	r4, r2, r2
 8007950:	623c      	str	r4, [r7, #32]
 8007952:	415b      	adcs	r3, r3
 8007954:	627b      	str	r3, [r7, #36]	; 0x24
 8007956:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800795a:	1812      	adds	r2, r2, r0
 800795c:	eb41 0303 	adc.w	r3, r1, r3
 8007960:	f04f 0400 	mov.w	r4, #0
 8007964:	f04f 0500 	mov.w	r5, #0
 8007968:	00dd      	lsls	r5, r3, #3
 800796a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800796e:	00d4      	lsls	r4, r2, #3
 8007970:	4622      	mov	r2, r4
 8007972:	462b      	mov	r3, r5
 8007974:	1814      	adds	r4, r2, r0
 8007976:	653c      	str	r4, [r7, #80]	; 0x50
 8007978:	414b      	adcs	r3, r1
 800797a:	657b      	str	r3, [r7, #84]	; 0x54
 800797c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	461a      	mov	r2, r3
 8007982:	f04f 0300 	mov.w	r3, #0
 8007986:	1891      	adds	r1, r2, r2
 8007988:	61b9      	str	r1, [r7, #24]
 800798a:	415b      	adcs	r3, r3
 800798c:	61fb      	str	r3, [r7, #28]
 800798e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007992:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007996:	f7f9 f987 	bl	8000ca8 <__aeabi_uldivmod>
 800799a:	4602      	mov	r2, r0
 800799c:	460b      	mov	r3, r1
 800799e:	4b6c      	ldr	r3, [pc, #432]	; (8007b50 <UART_SetConfig+0x38c>)
 80079a0:	fba3 1302 	umull	r1, r3, r3, r2
 80079a4:	095b      	lsrs	r3, r3, #5
 80079a6:	2164      	movs	r1, #100	; 0x64
 80079a8:	fb01 f303 	mul.w	r3, r1, r3
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	00db      	lsls	r3, r3, #3
 80079b0:	3332      	adds	r3, #50	; 0x32
 80079b2:	4a67      	ldr	r2, [pc, #412]	; (8007b50 <UART_SetConfig+0x38c>)
 80079b4:	fba2 2303 	umull	r2, r3, r2, r3
 80079b8:	095b      	lsrs	r3, r3, #5
 80079ba:	f003 0207 	and.w	r2, r3, #7
 80079be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4432      	add	r2, r6
 80079c4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079c6:	e0b9      	b.n	8007b3c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079ca:	461c      	mov	r4, r3
 80079cc:	f04f 0500 	mov.w	r5, #0
 80079d0:	4622      	mov	r2, r4
 80079d2:	462b      	mov	r3, r5
 80079d4:	1891      	adds	r1, r2, r2
 80079d6:	6139      	str	r1, [r7, #16]
 80079d8:	415b      	adcs	r3, r3
 80079da:	617b      	str	r3, [r7, #20]
 80079dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80079e0:	1912      	adds	r2, r2, r4
 80079e2:	eb45 0303 	adc.w	r3, r5, r3
 80079e6:	f04f 0000 	mov.w	r0, #0
 80079ea:	f04f 0100 	mov.w	r1, #0
 80079ee:	00d9      	lsls	r1, r3, #3
 80079f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80079f4:	00d0      	lsls	r0, r2, #3
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	eb12 0804 	adds.w	r8, r2, r4
 80079fe:	eb43 0905 	adc.w	r9, r3, r5
 8007a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f04f 0100 	mov.w	r1, #0
 8007a0c:	f04f 0200 	mov.w	r2, #0
 8007a10:	f04f 0300 	mov.w	r3, #0
 8007a14:	008b      	lsls	r3, r1, #2
 8007a16:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a1a:	0082      	lsls	r2, r0, #2
 8007a1c:	4640      	mov	r0, r8
 8007a1e:	4649      	mov	r1, r9
 8007a20:	f7f9 f942 	bl	8000ca8 <__aeabi_uldivmod>
 8007a24:	4602      	mov	r2, r0
 8007a26:	460b      	mov	r3, r1
 8007a28:	4b49      	ldr	r3, [pc, #292]	; (8007b50 <UART_SetConfig+0x38c>)
 8007a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8007a2e:	095b      	lsrs	r3, r3, #5
 8007a30:	011e      	lsls	r6, r3, #4
 8007a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a34:	4618      	mov	r0, r3
 8007a36:	f04f 0100 	mov.w	r1, #0
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	1894      	adds	r4, r2, r2
 8007a40:	60bc      	str	r4, [r7, #8]
 8007a42:	415b      	adcs	r3, r3
 8007a44:	60fb      	str	r3, [r7, #12]
 8007a46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a4a:	1812      	adds	r2, r2, r0
 8007a4c:	eb41 0303 	adc.w	r3, r1, r3
 8007a50:	f04f 0400 	mov.w	r4, #0
 8007a54:	f04f 0500 	mov.w	r5, #0
 8007a58:	00dd      	lsls	r5, r3, #3
 8007a5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007a5e:	00d4      	lsls	r4, r2, #3
 8007a60:	4622      	mov	r2, r4
 8007a62:	462b      	mov	r3, r5
 8007a64:	1814      	adds	r4, r2, r0
 8007a66:	64bc      	str	r4, [r7, #72]	; 0x48
 8007a68:	414b      	adcs	r3, r1
 8007a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f04f 0100 	mov.w	r1, #0
 8007a76:	f04f 0200 	mov.w	r2, #0
 8007a7a:	f04f 0300 	mov.w	r3, #0
 8007a7e:	008b      	lsls	r3, r1, #2
 8007a80:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a84:	0082      	lsls	r2, r0, #2
 8007a86:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007a8a:	f7f9 f90d 	bl	8000ca8 <__aeabi_uldivmod>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	460b      	mov	r3, r1
 8007a92:	4b2f      	ldr	r3, [pc, #188]	; (8007b50 <UART_SetConfig+0x38c>)
 8007a94:	fba3 1302 	umull	r1, r3, r3, r2
 8007a98:	095b      	lsrs	r3, r3, #5
 8007a9a:	2164      	movs	r1, #100	; 0x64
 8007a9c:	fb01 f303 	mul.w	r3, r1, r3
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	011b      	lsls	r3, r3, #4
 8007aa4:	3332      	adds	r3, #50	; 0x32
 8007aa6:	4a2a      	ldr	r2, [pc, #168]	; (8007b50 <UART_SetConfig+0x38c>)
 8007aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8007aac:	095b      	lsrs	r3, r3, #5
 8007aae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ab2:	441e      	add	r6, r3
 8007ab4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f04f 0100 	mov.w	r1, #0
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	1894      	adds	r4, r2, r2
 8007ac2:	603c      	str	r4, [r7, #0]
 8007ac4:	415b      	adcs	r3, r3
 8007ac6:	607b      	str	r3, [r7, #4]
 8007ac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007acc:	1812      	adds	r2, r2, r0
 8007ace:	eb41 0303 	adc.w	r3, r1, r3
 8007ad2:	f04f 0400 	mov.w	r4, #0
 8007ad6:	f04f 0500 	mov.w	r5, #0
 8007ada:	00dd      	lsls	r5, r3, #3
 8007adc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ae0:	00d4      	lsls	r4, r2, #3
 8007ae2:	4622      	mov	r2, r4
 8007ae4:	462b      	mov	r3, r5
 8007ae6:	eb12 0a00 	adds.w	sl, r2, r0
 8007aea:	eb43 0b01 	adc.w	fp, r3, r1
 8007aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f04f 0100 	mov.w	r1, #0
 8007af8:	f04f 0200 	mov.w	r2, #0
 8007afc:	f04f 0300 	mov.w	r3, #0
 8007b00:	008b      	lsls	r3, r1, #2
 8007b02:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b06:	0082      	lsls	r2, r0, #2
 8007b08:	4650      	mov	r0, sl
 8007b0a:	4659      	mov	r1, fp
 8007b0c:	f7f9 f8cc 	bl	8000ca8 <__aeabi_uldivmod>
 8007b10:	4602      	mov	r2, r0
 8007b12:	460b      	mov	r3, r1
 8007b14:	4b0e      	ldr	r3, [pc, #56]	; (8007b50 <UART_SetConfig+0x38c>)
 8007b16:	fba3 1302 	umull	r1, r3, r3, r2
 8007b1a:	095b      	lsrs	r3, r3, #5
 8007b1c:	2164      	movs	r1, #100	; 0x64
 8007b1e:	fb01 f303 	mul.w	r3, r1, r3
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	011b      	lsls	r3, r3, #4
 8007b26:	3332      	adds	r3, #50	; 0x32
 8007b28:	4a09      	ldr	r2, [pc, #36]	; (8007b50 <UART_SetConfig+0x38c>)
 8007b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b2e:	095b      	lsrs	r3, r3, #5
 8007b30:	f003 020f 	and.w	r2, r3, #15
 8007b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4432      	add	r2, r6
 8007b3a:	609a      	str	r2, [r3, #8]
}
 8007b3c:	bf00      	nop
 8007b3e:	377c      	adds	r7, #124	; 0x7c
 8007b40:	46bd      	mov	sp, r7
 8007b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b46:	bf00      	nop
 8007b48:	40011000 	.word	0x40011000
 8007b4c:	40011400 	.word	0x40011400
 8007b50:	51eb851f 	.word	0x51eb851f

08007b54 <__errno>:
 8007b54:	4b01      	ldr	r3, [pc, #4]	; (8007b5c <__errno+0x8>)
 8007b56:	6818      	ldr	r0, [r3, #0]
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	20000020 	.word	0x20000020

08007b60 <__libc_init_array>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	4d0d      	ldr	r5, [pc, #52]	; (8007b98 <__libc_init_array+0x38>)
 8007b64:	4c0d      	ldr	r4, [pc, #52]	; (8007b9c <__libc_init_array+0x3c>)
 8007b66:	1b64      	subs	r4, r4, r5
 8007b68:	10a4      	asrs	r4, r4, #2
 8007b6a:	2600      	movs	r6, #0
 8007b6c:	42a6      	cmp	r6, r4
 8007b6e:	d109      	bne.n	8007b84 <__libc_init_array+0x24>
 8007b70:	4d0b      	ldr	r5, [pc, #44]	; (8007ba0 <__libc_init_array+0x40>)
 8007b72:	4c0c      	ldr	r4, [pc, #48]	; (8007ba4 <__libc_init_array+0x44>)
 8007b74:	f004 fc44 	bl	800c400 <_init>
 8007b78:	1b64      	subs	r4, r4, r5
 8007b7a:	10a4      	asrs	r4, r4, #2
 8007b7c:	2600      	movs	r6, #0
 8007b7e:	42a6      	cmp	r6, r4
 8007b80:	d105      	bne.n	8007b8e <__libc_init_array+0x2e>
 8007b82:	bd70      	pop	{r4, r5, r6, pc}
 8007b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b88:	4798      	blx	r3
 8007b8a:	3601      	adds	r6, #1
 8007b8c:	e7ee      	b.n	8007b6c <__libc_init_array+0xc>
 8007b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b92:	4798      	blx	r3
 8007b94:	3601      	adds	r6, #1
 8007b96:	e7f2      	b.n	8007b7e <__libc_init_array+0x1e>
 8007b98:	08032404 	.word	0x08032404
 8007b9c:	08032404 	.word	0x08032404
 8007ba0:	08032404 	.word	0x08032404
 8007ba4:	08032408 	.word	0x08032408

08007ba8 <memset>:
 8007ba8:	4402      	add	r2, r0
 8007baa:	4603      	mov	r3, r0
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d100      	bne.n	8007bb2 <memset+0xa>
 8007bb0:	4770      	bx	lr
 8007bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8007bb6:	e7f9      	b.n	8007bac <memset+0x4>

08007bb8 <__cvt>:
 8007bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bbc:	ec55 4b10 	vmov	r4, r5, d0
 8007bc0:	2d00      	cmp	r5, #0
 8007bc2:	460e      	mov	r6, r1
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	462b      	mov	r3, r5
 8007bc8:	bfbb      	ittet	lt
 8007bca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007bce:	461d      	movlt	r5, r3
 8007bd0:	2300      	movge	r3, #0
 8007bd2:	232d      	movlt	r3, #45	; 0x2d
 8007bd4:	700b      	strb	r3, [r1, #0]
 8007bd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007bdc:	4691      	mov	r9, r2
 8007bde:	f023 0820 	bic.w	r8, r3, #32
 8007be2:	bfbc      	itt	lt
 8007be4:	4622      	movlt	r2, r4
 8007be6:	4614      	movlt	r4, r2
 8007be8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007bec:	d005      	beq.n	8007bfa <__cvt+0x42>
 8007bee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007bf2:	d100      	bne.n	8007bf6 <__cvt+0x3e>
 8007bf4:	3601      	adds	r6, #1
 8007bf6:	2102      	movs	r1, #2
 8007bf8:	e000      	b.n	8007bfc <__cvt+0x44>
 8007bfa:	2103      	movs	r1, #3
 8007bfc:	ab03      	add	r3, sp, #12
 8007bfe:	9301      	str	r3, [sp, #4]
 8007c00:	ab02      	add	r3, sp, #8
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	ec45 4b10 	vmov	d0, r4, r5
 8007c08:	4653      	mov	r3, sl
 8007c0a:	4632      	mov	r2, r6
 8007c0c:	f001 fdb4 	bl	8009778 <_dtoa_r>
 8007c10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007c14:	4607      	mov	r7, r0
 8007c16:	d102      	bne.n	8007c1e <__cvt+0x66>
 8007c18:	f019 0f01 	tst.w	r9, #1
 8007c1c:	d022      	beq.n	8007c64 <__cvt+0xac>
 8007c1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007c22:	eb07 0906 	add.w	r9, r7, r6
 8007c26:	d110      	bne.n	8007c4a <__cvt+0x92>
 8007c28:	783b      	ldrb	r3, [r7, #0]
 8007c2a:	2b30      	cmp	r3, #48	; 0x30
 8007c2c:	d10a      	bne.n	8007c44 <__cvt+0x8c>
 8007c2e:	2200      	movs	r2, #0
 8007c30:	2300      	movs	r3, #0
 8007c32:	4620      	mov	r0, r4
 8007c34:	4629      	mov	r1, r5
 8007c36:	f7f8 ff57 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c3a:	b918      	cbnz	r0, 8007c44 <__cvt+0x8c>
 8007c3c:	f1c6 0601 	rsb	r6, r6, #1
 8007c40:	f8ca 6000 	str.w	r6, [sl]
 8007c44:	f8da 3000 	ldr.w	r3, [sl]
 8007c48:	4499      	add	r9, r3
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	4620      	mov	r0, r4
 8007c50:	4629      	mov	r1, r5
 8007c52:	f7f8 ff49 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c56:	b108      	cbz	r0, 8007c5c <__cvt+0xa4>
 8007c58:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c5c:	2230      	movs	r2, #48	; 0x30
 8007c5e:	9b03      	ldr	r3, [sp, #12]
 8007c60:	454b      	cmp	r3, r9
 8007c62:	d307      	bcc.n	8007c74 <__cvt+0xbc>
 8007c64:	9b03      	ldr	r3, [sp, #12]
 8007c66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c68:	1bdb      	subs	r3, r3, r7
 8007c6a:	4638      	mov	r0, r7
 8007c6c:	6013      	str	r3, [r2, #0]
 8007c6e:	b004      	add	sp, #16
 8007c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c74:	1c59      	adds	r1, r3, #1
 8007c76:	9103      	str	r1, [sp, #12]
 8007c78:	701a      	strb	r2, [r3, #0]
 8007c7a:	e7f0      	b.n	8007c5e <__cvt+0xa6>

08007c7c <__exponent>:
 8007c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2900      	cmp	r1, #0
 8007c82:	bfb8      	it	lt
 8007c84:	4249      	neglt	r1, r1
 8007c86:	f803 2b02 	strb.w	r2, [r3], #2
 8007c8a:	bfb4      	ite	lt
 8007c8c:	222d      	movlt	r2, #45	; 0x2d
 8007c8e:	222b      	movge	r2, #43	; 0x2b
 8007c90:	2909      	cmp	r1, #9
 8007c92:	7042      	strb	r2, [r0, #1]
 8007c94:	dd2a      	ble.n	8007cec <__exponent+0x70>
 8007c96:	f10d 0407 	add.w	r4, sp, #7
 8007c9a:	46a4      	mov	ip, r4
 8007c9c:	270a      	movs	r7, #10
 8007c9e:	46a6      	mov	lr, r4
 8007ca0:	460a      	mov	r2, r1
 8007ca2:	fb91 f6f7 	sdiv	r6, r1, r7
 8007ca6:	fb07 1516 	mls	r5, r7, r6, r1
 8007caa:	3530      	adds	r5, #48	; 0x30
 8007cac:	2a63      	cmp	r2, #99	; 0x63
 8007cae:	f104 34ff 	add.w	r4, r4, #4294967295
 8007cb2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007cb6:	4631      	mov	r1, r6
 8007cb8:	dcf1      	bgt.n	8007c9e <__exponent+0x22>
 8007cba:	3130      	adds	r1, #48	; 0x30
 8007cbc:	f1ae 0502 	sub.w	r5, lr, #2
 8007cc0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007cc4:	1c44      	adds	r4, r0, #1
 8007cc6:	4629      	mov	r1, r5
 8007cc8:	4561      	cmp	r1, ip
 8007cca:	d30a      	bcc.n	8007ce2 <__exponent+0x66>
 8007ccc:	f10d 0209 	add.w	r2, sp, #9
 8007cd0:	eba2 020e 	sub.w	r2, r2, lr
 8007cd4:	4565      	cmp	r5, ip
 8007cd6:	bf88      	it	hi
 8007cd8:	2200      	movhi	r2, #0
 8007cda:	4413      	add	r3, r2
 8007cdc:	1a18      	subs	r0, r3, r0
 8007cde:	b003      	add	sp, #12
 8007ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ce6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007cea:	e7ed      	b.n	8007cc8 <__exponent+0x4c>
 8007cec:	2330      	movs	r3, #48	; 0x30
 8007cee:	3130      	adds	r1, #48	; 0x30
 8007cf0:	7083      	strb	r3, [r0, #2]
 8007cf2:	70c1      	strb	r1, [r0, #3]
 8007cf4:	1d03      	adds	r3, r0, #4
 8007cf6:	e7f1      	b.n	8007cdc <__exponent+0x60>

08007cf8 <_printf_float>:
 8007cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cfc:	ed2d 8b02 	vpush	{d8}
 8007d00:	b08d      	sub	sp, #52	; 0x34
 8007d02:	460c      	mov	r4, r1
 8007d04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007d08:	4616      	mov	r6, r2
 8007d0a:	461f      	mov	r7, r3
 8007d0c:	4605      	mov	r5, r0
 8007d0e:	f002 fe8f 	bl	800aa30 <_localeconv_r>
 8007d12:	f8d0 a000 	ldr.w	sl, [r0]
 8007d16:	4650      	mov	r0, sl
 8007d18:	f7f8 fa6a 	bl	80001f0 <strlen>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d20:	6823      	ldr	r3, [r4, #0]
 8007d22:	9305      	str	r3, [sp, #20]
 8007d24:	f8d8 3000 	ldr.w	r3, [r8]
 8007d28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007d2c:	3307      	adds	r3, #7
 8007d2e:	f023 0307 	bic.w	r3, r3, #7
 8007d32:	f103 0208 	add.w	r2, r3, #8
 8007d36:	f8c8 2000 	str.w	r2, [r8]
 8007d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007d42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007d46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d4a:	9307      	str	r3, [sp, #28]
 8007d4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d50:	ee08 0a10 	vmov	s16, r0
 8007d54:	4b9f      	ldr	r3, [pc, #636]	; (8007fd4 <_printf_float+0x2dc>)
 8007d56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d5e:	f7f8 fef5 	bl	8000b4c <__aeabi_dcmpun>
 8007d62:	bb88      	cbnz	r0, 8007dc8 <_printf_float+0xd0>
 8007d64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d68:	4b9a      	ldr	r3, [pc, #616]	; (8007fd4 <_printf_float+0x2dc>)
 8007d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d6e:	f7f8 fecf 	bl	8000b10 <__aeabi_dcmple>
 8007d72:	bb48      	cbnz	r0, 8007dc8 <_printf_float+0xd0>
 8007d74:	2200      	movs	r2, #0
 8007d76:	2300      	movs	r3, #0
 8007d78:	4640      	mov	r0, r8
 8007d7a:	4649      	mov	r1, r9
 8007d7c:	f7f8 febe 	bl	8000afc <__aeabi_dcmplt>
 8007d80:	b110      	cbz	r0, 8007d88 <_printf_float+0x90>
 8007d82:	232d      	movs	r3, #45	; 0x2d
 8007d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d88:	4b93      	ldr	r3, [pc, #588]	; (8007fd8 <_printf_float+0x2e0>)
 8007d8a:	4894      	ldr	r0, [pc, #592]	; (8007fdc <_printf_float+0x2e4>)
 8007d8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007d90:	bf94      	ite	ls
 8007d92:	4698      	movls	r8, r3
 8007d94:	4680      	movhi	r8, r0
 8007d96:	2303      	movs	r3, #3
 8007d98:	6123      	str	r3, [r4, #16]
 8007d9a:	9b05      	ldr	r3, [sp, #20]
 8007d9c:	f023 0204 	bic.w	r2, r3, #4
 8007da0:	6022      	str	r2, [r4, #0]
 8007da2:	f04f 0900 	mov.w	r9, #0
 8007da6:	9700      	str	r7, [sp, #0]
 8007da8:	4633      	mov	r3, r6
 8007daa:	aa0b      	add	r2, sp, #44	; 0x2c
 8007dac:	4621      	mov	r1, r4
 8007dae:	4628      	mov	r0, r5
 8007db0:	f000 f9d8 	bl	8008164 <_printf_common>
 8007db4:	3001      	adds	r0, #1
 8007db6:	f040 8090 	bne.w	8007eda <_printf_float+0x1e2>
 8007dba:	f04f 30ff 	mov.w	r0, #4294967295
 8007dbe:	b00d      	add	sp, #52	; 0x34
 8007dc0:	ecbd 8b02 	vpop	{d8}
 8007dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc8:	4642      	mov	r2, r8
 8007dca:	464b      	mov	r3, r9
 8007dcc:	4640      	mov	r0, r8
 8007dce:	4649      	mov	r1, r9
 8007dd0:	f7f8 febc 	bl	8000b4c <__aeabi_dcmpun>
 8007dd4:	b140      	cbz	r0, 8007de8 <_printf_float+0xf0>
 8007dd6:	464b      	mov	r3, r9
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	bfbc      	itt	lt
 8007ddc:	232d      	movlt	r3, #45	; 0x2d
 8007dde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007de2:	487f      	ldr	r0, [pc, #508]	; (8007fe0 <_printf_float+0x2e8>)
 8007de4:	4b7f      	ldr	r3, [pc, #508]	; (8007fe4 <_printf_float+0x2ec>)
 8007de6:	e7d1      	b.n	8007d8c <_printf_float+0x94>
 8007de8:	6863      	ldr	r3, [r4, #4]
 8007dea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007dee:	9206      	str	r2, [sp, #24]
 8007df0:	1c5a      	adds	r2, r3, #1
 8007df2:	d13f      	bne.n	8007e74 <_printf_float+0x17c>
 8007df4:	2306      	movs	r3, #6
 8007df6:	6063      	str	r3, [r4, #4]
 8007df8:	9b05      	ldr	r3, [sp, #20]
 8007dfa:	6861      	ldr	r1, [r4, #4]
 8007dfc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e00:	2300      	movs	r3, #0
 8007e02:	9303      	str	r3, [sp, #12]
 8007e04:	ab0a      	add	r3, sp, #40	; 0x28
 8007e06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007e0a:	ab09      	add	r3, sp, #36	; 0x24
 8007e0c:	ec49 8b10 	vmov	d0, r8, r9
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	6022      	str	r2, [r4, #0]
 8007e14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007e18:	4628      	mov	r0, r5
 8007e1a:	f7ff fecd 	bl	8007bb8 <__cvt>
 8007e1e:	9b06      	ldr	r3, [sp, #24]
 8007e20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e22:	2b47      	cmp	r3, #71	; 0x47
 8007e24:	4680      	mov	r8, r0
 8007e26:	d108      	bne.n	8007e3a <_printf_float+0x142>
 8007e28:	1cc8      	adds	r0, r1, #3
 8007e2a:	db02      	blt.n	8007e32 <_printf_float+0x13a>
 8007e2c:	6863      	ldr	r3, [r4, #4]
 8007e2e:	4299      	cmp	r1, r3
 8007e30:	dd41      	ble.n	8007eb6 <_printf_float+0x1be>
 8007e32:	f1ab 0b02 	sub.w	fp, fp, #2
 8007e36:	fa5f fb8b 	uxtb.w	fp, fp
 8007e3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007e3e:	d820      	bhi.n	8007e82 <_printf_float+0x18a>
 8007e40:	3901      	subs	r1, #1
 8007e42:	465a      	mov	r2, fp
 8007e44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007e48:	9109      	str	r1, [sp, #36]	; 0x24
 8007e4a:	f7ff ff17 	bl	8007c7c <__exponent>
 8007e4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e50:	1813      	adds	r3, r2, r0
 8007e52:	2a01      	cmp	r2, #1
 8007e54:	4681      	mov	r9, r0
 8007e56:	6123      	str	r3, [r4, #16]
 8007e58:	dc02      	bgt.n	8007e60 <_printf_float+0x168>
 8007e5a:	6822      	ldr	r2, [r4, #0]
 8007e5c:	07d2      	lsls	r2, r2, #31
 8007e5e:	d501      	bpl.n	8007e64 <_printf_float+0x16c>
 8007e60:	3301      	adds	r3, #1
 8007e62:	6123      	str	r3, [r4, #16]
 8007e64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d09c      	beq.n	8007da6 <_printf_float+0xae>
 8007e6c:	232d      	movs	r3, #45	; 0x2d
 8007e6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e72:	e798      	b.n	8007da6 <_printf_float+0xae>
 8007e74:	9a06      	ldr	r2, [sp, #24]
 8007e76:	2a47      	cmp	r2, #71	; 0x47
 8007e78:	d1be      	bne.n	8007df8 <_printf_float+0x100>
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1bc      	bne.n	8007df8 <_printf_float+0x100>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e7b9      	b.n	8007df6 <_printf_float+0xfe>
 8007e82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007e86:	d118      	bne.n	8007eba <_printf_float+0x1c2>
 8007e88:	2900      	cmp	r1, #0
 8007e8a:	6863      	ldr	r3, [r4, #4]
 8007e8c:	dd0b      	ble.n	8007ea6 <_printf_float+0x1ae>
 8007e8e:	6121      	str	r1, [r4, #16]
 8007e90:	b913      	cbnz	r3, 8007e98 <_printf_float+0x1a0>
 8007e92:	6822      	ldr	r2, [r4, #0]
 8007e94:	07d0      	lsls	r0, r2, #31
 8007e96:	d502      	bpl.n	8007e9e <_printf_float+0x1a6>
 8007e98:	3301      	adds	r3, #1
 8007e9a:	440b      	add	r3, r1
 8007e9c:	6123      	str	r3, [r4, #16]
 8007e9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007ea0:	f04f 0900 	mov.w	r9, #0
 8007ea4:	e7de      	b.n	8007e64 <_printf_float+0x16c>
 8007ea6:	b913      	cbnz	r3, 8007eae <_printf_float+0x1b6>
 8007ea8:	6822      	ldr	r2, [r4, #0]
 8007eaa:	07d2      	lsls	r2, r2, #31
 8007eac:	d501      	bpl.n	8007eb2 <_printf_float+0x1ba>
 8007eae:	3302      	adds	r3, #2
 8007eb0:	e7f4      	b.n	8007e9c <_printf_float+0x1a4>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e7f2      	b.n	8007e9c <_printf_float+0x1a4>
 8007eb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ebc:	4299      	cmp	r1, r3
 8007ebe:	db05      	blt.n	8007ecc <_printf_float+0x1d4>
 8007ec0:	6823      	ldr	r3, [r4, #0]
 8007ec2:	6121      	str	r1, [r4, #16]
 8007ec4:	07d8      	lsls	r0, r3, #31
 8007ec6:	d5ea      	bpl.n	8007e9e <_printf_float+0x1a6>
 8007ec8:	1c4b      	adds	r3, r1, #1
 8007eca:	e7e7      	b.n	8007e9c <_printf_float+0x1a4>
 8007ecc:	2900      	cmp	r1, #0
 8007ece:	bfd4      	ite	le
 8007ed0:	f1c1 0202 	rsble	r2, r1, #2
 8007ed4:	2201      	movgt	r2, #1
 8007ed6:	4413      	add	r3, r2
 8007ed8:	e7e0      	b.n	8007e9c <_printf_float+0x1a4>
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	055a      	lsls	r2, r3, #21
 8007ede:	d407      	bmi.n	8007ef0 <_printf_float+0x1f8>
 8007ee0:	6923      	ldr	r3, [r4, #16]
 8007ee2:	4642      	mov	r2, r8
 8007ee4:	4631      	mov	r1, r6
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	47b8      	blx	r7
 8007eea:	3001      	adds	r0, #1
 8007eec:	d12c      	bne.n	8007f48 <_printf_float+0x250>
 8007eee:	e764      	b.n	8007dba <_printf_float+0xc2>
 8007ef0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ef4:	f240 80e0 	bls.w	80080b8 <_printf_float+0x3c0>
 8007ef8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007efc:	2200      	movs	r2, #0
 8007efe:	2300      	movs	r3, #0
 8007f00:	f7f8 fdf2 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	d034      	beq.n	8007f72 <_printf_float+0x27a>
 8007f08:	4a37      	ldr	r2, [pc, #220]	; (8007fe8 <_printf_float+0x2f0>)
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	4631      	mov	r1, r6
 8007f0e:	4628      	mov	r0, r5
 8007f10:	47b8      	blx	r7
 8007f12:	3001      	adds	r0, #1
 8007f14:	f43f af51 	beq.w	8007dba <_printf_float+0xc2>
 8007f18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	db02      	blt.n	8007f26 <_printf_float+0x22e>
 8007f20:	6823      	ldr	r3, [r4, #0]
 8007f22:	07d8      	lsls	r0, r3, #31
 8007f24:	d510      	bpl.n	8007f48 <_printf_float+0x250>
 8007f26:	ee18 3a10 	vmov	r3, s16
 8007f2a:	4652      	mov	r2, sl
 8007f2c:	4631      	mov	r1, r6
 8007f2e:	4628      	mov	r0, r5
 8007f30:	47b8      	blx	r7
 8007f32:	3001      	adds	r0, #1
 8007f34:	f43f af41 	beq.w	8007dba <_printf_float+0xc2>
 8007f38:	f04f 0800 	mov.w	r8, #0
 8007f3c:	f104 091a 	add.w	r9, r4, #26
 8007f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f42:	3b01      	subs	r3, #1
 8007f44:	4543      	cmp	r3, r8
 8007f46:	dc09      	bgt.n	8007f5c <_printf_float+0x264>
 8007f48:	6823      	ldr	r3, [r4, #0]
 8007f4a:	079b      	lsls	r3, r3, #30
 8007f4c:	f100 8105 	bmi.w	800815a <_printf_float+0x462>
 8007f50:	68e0      	ldr	r0, [r4, #12]
 8007f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f54:	4298      	cmp	r0, r3
 8007f56:	bfb8      	it	lt
 8007f58:	4618      	movlt	r0, r3
 8007f5a:	e730      	b.n	8007dbe <_printf_float+0xc6>
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	464a      	mov	r2, r9
 8007f60:	4631      	mov	r1, r6
 8007f62:	4628      	mov	r0, r5
 8007f64:	47b8      	blx	r7
 8007f66:	3001      	adds	r0, #1
 8007f68:	f43f af27 	beq.w	8007dba <_printf_float+0xc2>
 8007f6c:	f108 0801 	add.w	r8, r8, #1
 8007f70:	e7e6      	b.n	8007f40 <_printf_float+0x248>
 8007f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	dc39      	bgt.n	8007fec <_printf_float+0x2f4>
 8007f78:	4a1b      	ldr	r2, [pc, #108]	; (8007fe8 <_printf_float+0x2f0>)
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	4631      	mov	r1, r6
 8007f7e:	4628      	mov	r0, r5
 8007f80:	47b8      	blx	r7
 8007f82:	3001      	adds	r0, #1
 8007f84:	f43f af19 	beq.w	8007dba <_printf_float+0xc2>
 8007f88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	d102      	bne.n	8007f96 <_printf_float+0x29e>
 8007f90:	6823      	ldr	r3, [r4, #0]
 8007f92:	07d9      	lsls	r1, r3, #31
 8007f94:	d5d8      	bpl.n	8007f48 <_printf_float+0x250>
 8007f96:	ee18 3a10 	vmov	r3, s16
 8007f9a:	4652      	mov	r2, sl
 8007f9c:	4631      	mov	r1, r6
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	47b8      	blx	r7
 8007fa2:	3001      	adds	r0, #1
 8007fa4:	f43f af09 	beq.w	8007dba <_printf_float+0xc2>
 8007fa8:	f04f 0900 	mov.w	r9, #0
 8007fac:	f104 0a1a 	add.w	sl, r4, #26
 8007fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fb2:	425b      	negs	r3, r3
 8007fb4:	454b      	cmp	r3, r9
 8007fb6:	dc01      	bgt.n	8007fbc <_printf_float+0x2c4>
 8007fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fba:	e792      	b.n	8007ee2 <_printf_float+0x1ea>
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	4652      	mov	r2, sl
 8007fc0:	4631      	mov	r1, r6
 8007fc2:	4628      	mov	r0, r5
 8007fc4:	47b8      	blx	r7
 8007fc6:	3001      	adds	r0, #1
 8007fc8:	f43f aef7 	beq.w	8007dba <_printf_float+0xc2>
 8007fcc:	f109 0901 	add.w	r9, r9, #1
 8007fd0:	e7ee      	b.n	8007fb0 <_printf_float+0x2b8>
 8007fd2:	bf00      	nop
 8007fd4:	7fefffff 	.word	0x7fefffff
 8007fd8:	08031f48 	.word	0x08031f48
 8007fdc:	08031f4c 	.word	0x08031f4c
 8007fe0:	08031f54 	.word	0x08031f54
 8007fe4:	08031f50 	.word	0x08031f50
 8007fe8:	08031f58 	.word	0x08031f58
 8007fec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007fee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	bfa8      	it	ge
 8007ff4:	461a      	movge	r2, r3
 8007ff6:	2a00      	cmp	r2, #0
 8007ff8:	4691      	mov	r9, r2
 8007ffa:	dc37      	bgt.n	800806c <_printf_float+0x374>
 8007ffc:	f04f 0b00 	mov.w	fp, #0
 8008000:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008004:	f104 021a 	add.w	r2, r4, #26
 8008008:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800800a:	9305      	str	r3, [sp, #20]
 800800c:	eba3 0309 	sub.w	r3, r3, r9
 8008010:	455b      	cmp	r3, fp
 8008012:	dc33      	bgt.n	800807c <_printf_float+0x384>
 8008014:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008018:	429a      	cmp	r2, r3
 800801a:	db3b      	blt.n	8008094 <_printf_float+0x39c>
 800801c:	6823      	ldr	r3, [r4, #0]
 800801e:	07da      	lsls	r2, r3, #31
 8008020:	d438      	bmi.n	8008094 <_printf_float+0x39c>
 8008022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008024:	9b05      	ldr	r3, [sp, #20]
 8008026:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	eba2 0901 	sub.w	r9, r2, r1
 800802e:	4599      	cmp	r9, r3
 8008030:	bfa8      	it	ge
 8008032:	4699      	movge	r9, r3
 8008034:	f1b9 0f00 	cmp.w	r9, #0
 8008038:	dc35      	bgt.n	80080a6 <_printf_float+0x3ae>
 800803a:	f04f 0800 	mov.w	r8, #0
 800803e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008042:	f104 0a1a 	add.w	sl, r4, #26
 8008046:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800804a:	1a9b      	subs	r3, r3, r2
 800804c:	eba3 0309 	sub.w	r3, r3, r9
 8008050:	4543      	cmp	r3, r8
 8008052:	f77f af79 	ble.w	8007f48 <_printf_float+0x250>
 8008056:	2301      	movs	r3, #1
 8008058:	4652      	mov	r2, sl
 800805a:	4631      	mov	r1, r6
 800805c:	4628      	mov	r0, r5
 800805e:	47b8      	blx	r7
 8008060:	3001      	adds	r0, #1
 8008062:	f43f aeaa 	beq.w	8007dba <_printf_float+0xc2>
 8008066:	f108 0801 	add.w	r8, r8, #1
 800806a:	e7ec      	b.n	8008046 <_printf_float+0x34e>
 800806c:	4613      	mov	r3, r2
 800806e:	4631      	mov	r1, r6
 8008070:	4642      	mov	r2, r8
 8008072:	4628      	mov	r0, r5
 8008074:	47b8      	blx	r7
 8008076:	3001      	adds	r0, #1
 8008078:	d1c0      	bne.n	8007ffc <_printf_float+0x304>
 800807a:	e69e      	b.n	8007dba <_printf_float+0xc2>
 800807c:	2301      	movs	r3, #1
 800807e:	4631      	mov	r1, r6
 8008080:	4628      	mov	r0, r5
 8008082:	9205      	str	r2, [sp, #20]
 8008084:	47b8      	blx	r7
 8008086:	3001      	adds	r0, #1
 8008088:	f43f ae97 	beq.w	8007dba <_printf_float+0xc2>
 800808c:	9a05      	ldr	r2, [sp, #20]
 800808e:	f10b 0b01 	add.w	fp, fp, #1
 8008092:	e7b9      	b.n	8008008 <_printf_float+0x310>
 8008094:	ee18 3a10 	vmov	r3, s16
 8008098:	4652      	mov	r2, sl
 800809a:	4631      	mov	r1, r6
 800809c:	4628      	mov	r0, r5
 800809e:	47b8      	blx	r7
 80080a0:	3001      	adds	r0, #1
 80080a2:	d1be      	bne.n	8008022 <_printf_float+0x32a>
 80080a4:	e689      	b.n	8007dba <_printf_float+0xc2>
 80080a6:	9a05      	ldr	r2, [sp, #20]
 80080a8:	464b      	mov	r3, r9
 80080aa:	4442      	add	r2, r8
 80080ac:	4631      	mov	r1, r6
 80080ae:	4628      	mov	r0, r5
 80080b0:	47b8      	blx	r7
 80080b2:	3001      	adds	r0, #1
 80080b4:	d1c1      	bne.n	800803a <_printf_float+0x342>
 80080b6:	e680      	b.n	8007dba <_printf_float+0xc2>
 80080b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080ba:	2a01      	cmp	r2, #1
 80080bc:	dc01      	bgt.n	80080c2 <_printf_float+0x3ca>
 80080be:	07db      	lsls	r3, r3, #31
 80080c0:	d538      	bpl.n	8008134 <_printf_float+0x43c>
 80080c2:	2301      	movs	r3, #1
 80080c4:	4642      	mov	r2, r8
 80080c6:	4631      	mov	r1, r6
 80080c8:	4628      	mov	r0, r5
 80080ca:	47b8      	blx	r7
 80080cc:	3001      	adds	r0, #1
 80080ce:	f43f ae74 	beq.w	8007dba <_printf_float+0xc2>
 80080d2:	ee18 3a10 	vmov	r3, s16
 80080d6:	4652      	mov	r2, sl
 80080d8:	4631      	mov	r1, r6
 80080da:	4628      	mov	r0, r5
 80080dc:	47b8      	blx	r7
 80080de:	3001      	adds	r0, #1
 80080e0:	f43f ae6b 	beq.w	8007dba <_printf_float+0xc2>
 80080e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080e8:	2200      	movs	r2, #0
 80080ea:	2300      	movs	r3, #0
 80080ec:	f7f8 fcfc 	bl	8000ae8 <__aeabi_dcmpeq>
 80080f0:	b9d8      	cbnz	r0, 800812a <_printf_float+0x432>
 80080f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080f4:	f108 0201 	add.w	r2, r8, #1
 80080f8:	3b01      	subs	r3, #1
 80080fa:	4631      	mov	r1, r6
 80080fc:	4628      	mov	r0, r5
 80080fe:	47b8      	blx	r7
 8008100:	3001      	adds	r0, #1
 8008102:	d10e      	bne.n	8008122 <_printf_float+0x42a>
 8008104:	e659      	b.n	8007dba <_printf_float+0xc2>
 8008106:	2301      	movs	r3, #1
 8008108:	4652      	mov	r2, sl
 800810a:	4631      	mov	r1, r6
 800810c:	4628      	mov	r0, r5
 800810e:	47b8      	blx	r7
 8008110:	3001      	adds	r0, #1
 8008112:	f43f ae52 	beq.w	8007dba <_printf_float+0xc2>
 8008116:	f108 0801 	add.w	r8, r8, #1
 800811a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800811c:	3b01      	subs	r3, #1
 800811e:	4543      	cmp	r3, r8
 8008120:	dcf1      	bgt.n	8008106 <_printf_float+0x40e>
 8008122:	464b      	mov	r3, r9
 8008124:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008128:	e6dc      	b.n	8007ee4 <_printf_float+0x1ec>
 800812a:	f04f 0800 	mov.w	r8, #0
 800812e:	f104 0a1a 	add.w	sl, r4, #26
 8008132:	e7f2      	b.n	800811a <_printf_float+0x422>
 8008134:	2301      	movs	r3, #1
 8008136:	4642      	mov	r2, r8
 8008138:	e7df      	b.n	80080fa <_printf_float+0x402>
 800813a:	2301      	movs	r3, #1
 800813c:	464a      	mov	r2, r9
 800813e:	4631      	mov	r1, r6
 8008140:	4628      	mov	r0, r5
 8008142:	47b8      	blx	r7
 8008144:	3001      	adds	r0, #1
 8008146:	f43f ae38 	beq.w	8007dba <_printf_float+0xc2>
 800814a:	f108 0801 	add.w	r8, r8, #1
 800814e:	68e3      	ldr	r3, [r4, #12]
 8008150:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008152:	1a5b      	subs	r3, r3, r1
 8008154:	4543      	cmp	r3, r8
 8008156:	dcf0      	bgt.n	800813a <_printf_float+0x442>
 8008158:	e6fa      	b.n	8007f50 <_printf_float+0x258>
 800815a:	f04f 0800 	mov.w	r8, #0
 800815e:	f104 0919 	add.w	r9, r4, #25
 8008162:	e7f4      	b.n	800814e <_printf_float+0x456>

08008164 <_printf_common>:
 8008164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008168:	4616      	mov	r6, r2
 800816a:	4699      	mov	r9, r3
 800816c:	688a      	ldr	r2, [r1, #8]
 800816e:	690b      	ldr	r3, [r1, #16]
 8008170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008174:	4293      	cmp	r3, r2
 8008176:	bfb8      	it	lt
 8008178:	4613      	movlt	r3, r2
 800817a:	6033      	str	r3, [r6, #0]
 800817c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008180:	4607      	mov	r7, r0
 8008182:	460c      	mov	r4, r1
 8008184:	b10a      	cbz	r2, 800818a <_printf_common+0x26>
 8008186:	3301      	adds	r3, #1
 8008188:	6033      	str	r3, [r6, #0]
 800818a:	6823      	ldr	r3, [r4, #0]
 800818c:	0699      	lsls	r1, r3, #26
 800818e:	bf42      	ittt	mi
 8008190:	6833      	ldrmi	r3, [r6, #0]
 8008192:	3302      	addmi	r3, #2
 8008194:	6033      	strmi	r3, [r6, #0]
 8008196:	6825      	ldr	r5, [r4, #0]
 8008198:	f015 0506 	ands.w	r5, r5, #6
 800819c:	d106      	bne.n	80081ac <_printf_common+0x48>
 800819e:	f104 0a19 	add.w	sl, r4, #25
 80081a2:	68e3      	ldr	r3, [r4, #12]
 80081a4:	6832      	ldr	r2, [r6, #0]
 80081a6:	1a9b      	subs	r3, r3, r2
 80081a8:	42ab      	cmp	r3, r5
 80081aa:	dc26      	bgt.n	80081fa <_printf_common+0x96>
 80081ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80081b0:	1e13      	subs	r3, r2, #0
 80081b2:	6822      	ldr	r2, [r4, #0]
 80081b4:	bf18      	it	ne
 80081b6:	2301      	movne	r3, #1
 80081b8:	0692      	lsls	r2, r2, #26
 80081ba:	d42b      	bmi.n	8008214 <_printf_common+0xb0>
 80081bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081c0:	4649      	mov	r1, r9
 80081c2:	4638      	mov	r0, r7
 80081c4:	47c0      	blx	r8
 80081c6:	3001      	adds	r0, #1
 80081c8:	d01e      	beq.n	8008208 <_printf_common+0xa4>
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	68e5      	ldr	r5, [r4, #12]
 80081ce:	6832      	ldr	r2, [r6, #0]
 80081d0:	f003 0306 	and.w	r3, r3, #6
 80081d4:	2b04      	cmp	r3, #4
 80081d6:	bf08      	it	eq
 80081d8:	1aad      	subeq	r5, r5, r2
 80081da:	68a3      	ldr	r3, [r4, #8]
 80081dc:	6922      	ldr	r2, [r4, #16]
 80081de:	bf0c      	ite	eq
 80081e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80081e4:	2500      	movne	r5, #0
 80081e6:	4293      	cmp	r3, r2
 80081e8:	bfc4      	itt	gt
 80081ea:	1a9b      	subgt	r3, r3, r2
 80081ec:	18ed      	addgt	r5, r5, r3
 80081ee:	2600      	movs	r6, #0
 80081f0:	341a      	adds	r4, #26
 80081f2:	42b5      	cmp	r5, r6
 80081f4:	d11a      	bne.n	800822c <_printf_common+0xc8>
 80081f6:	2000      	movs	r0, #0
 80081f8:	e008      	b.n	800820c <_printf_common+0xa8>
 80081fa:	2301      	movs	r3, #1
 80081fc:	4652      	mov	r2, sl
 80081fe:	4649      	mov	r1, r9
 8008200:	4638      	mov	r0, r7
 8008202:	47c0      	blx	r8
 8008204:	3001      	adds	r0, #1
 8008206:	d103      	bne.n	8008210 <_printf_common+0xac>
 8008208:	f04f 30ff 	mov.w	r0, #4294967295
 800820c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008210:	3501      	adds	r5, #1
 8008212:	e7c6      	b.n	80081a2 <_printf_common+0x3e>
 8008214:	18e1      	adds	r1, r4, r3
 8008216:	1c5a      	adds	r2, r3, #1
 8008218:	2030      	movs	r0, #48	; 0x30
 800821a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800821e:	4422      	add	r2, r4
 8008220:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008224:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008228:	3302      	adds	r3, #2
 800822a:	e7c7      	b.n	80081bc <_printf_common+0x58>
 800822c:	2301      	movs	r3, #1
 800822e:	4622      	mov	r2, r4
 8008230:	4649      	mov	r1, r9
 8008232:	4638      	mov	r0, r7
 8008234:	47c0      	blx	r8
 8008236:	3001      	adds	r0, #1
 8008238:	d0e6      	beq.n	8008208 <_printf_common+0xa4>
 800823a:	3601      	adds	r6, #1
 800823c:	e7d9      	b.n	80081f2 <_printf_common+0x8e>
	...

08008240 <_printf_i>:
 8008240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008244:	460c      	mov	r4, r1
 8008246:	4691      	mov	r9, r2
 8008248:	7e27      	ldrb	r7, [r4, #24]
 800824a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800824c:	2f78      	cmp	r7, #120	; 0x78
 800824e:	4680      	mov	r8, r0
 8008250:	469a      	mov	sl, r3
 8008252:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008256:	d807      	bhi.n	8008268 <_printf_i+0x28>
 8008258:	2f62      	cmp	r7, #98	; 0x62
 800825a:	d80a      	bhi.n	8008272 <_printf_i+0x32>
 800825c:	2f00      	cmp	r7, #0
 800825e:	f000 80d8 	beq.w	8008412 <_printf_i+0x1d2>
 8008262:	2f58      	cmp	r7, #88	; 0x58
 8008264:	f000 80a3 	beq.w	80083ae <_printf_i+0x16e>
 8008268:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800826c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008270:	e03a      	b.n	80082e8 <_printf_i+0xa8>
 8008272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008276:	2b15      	cmp	r3, #21
 8008278:	d8f6      	bhi.n	8008268 <_printf_i+0x28>
 800827a:	a001      	add	r0, pc, #4	; (adr r0, 8008280 <_printf_i+0x40>)
 800827c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008280:	080082d9 	.word	0x080082d9
 8008284:	080082ed 	.word	0x080082ed
 8008288:	08008269 	.word	0x08008269
 800828c:	08008269 	.word	0x08008269
 8008290:	08008269 	.word	0x08008269
 8008294:	08008269 	.word	0x08008269
 8008298:	080082ed 	.word	0x080082ed
 800829c:	08008269 	.word	0x08008269
 80082a0:	08008269 	.word	0x08008269
 80082a4:	08008269 	.word	0x08008269
 80082a8:	08008269 	.word	0x08008269
 80082ac:	080083f9 	.word	0x080083f9
 80082b0:	0800831d 	.word	0x0800831d
 80082b4:	080083db 	.word	0x080083db
 80082b8:	08008269 	.word	0x08008269
 80082bc:	08008269 	.word	0x08008269
 80082c0:	0800841b 	.word	0x0800841b
 80082c4:	08008269 	.word	0x08008269
 80082c8:	0800831d 	.word	0x0800831d
 80082cc:	08008269 	.word	0x08008269
 80082d0:	08008269 	.word	0x08008269
 80082d4:	080083e3 	.word	0x080083e3
 80082d8:	680b      	ldr	r3, [r1, #0]
 80082da:	1d1a      	adds	r2, r3, #4
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	600a      	str	r2, [r1, #0]
 80082e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80082e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80082e8:	2301      	movs	r3, #1
 80082ea:	e0a3      	b.n	8008434 <_printf_i+0x1f4>
 80082ec:	6825      	ldr	r5, [r4, #0]
 80082ee:	6808      	ldr	r0, [r1, #0]
 80082f0:	062e      	lsls	r6, r5, #24
 80082f2:	f100 0304 	add.w	r3, r0, #4
 80082f6:	d50a      	bpl.n	800830e <_printf_i+0xce>
 80082f8:	6805      	ldr	r5, [r0, #0]
 80082fa:	600b      	str	r3, [r1, #0]
 80082fc:	2d00      	cmp	r5, #0
 80082fe:	da03      	bge.n	8008308 <_printf_i+0xc8>
 8008300:	232d      	movs	r3, #45	; 0x2d
 8008302:	426d      	negs	r5, r5
 8008304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008308:	485e      	ldr	r0, [pc, #376]	; (8008484 <_printf_i+0x244>)
 800830a:	230a      	movs	r3, #10
 800830c:	e019      	b.n	8008342 <_printf_i+0x102>
 800830e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008312:	6805      	ldr	r5, [r0, #0]
 8008314:	600b      	str	r3, [r1, #0]
 8008316:	bf18      	it	ne
 8008318:	b22d      	sxthne	r5, r5
 800831a:	e7ef      	b.n	80082fc <_printf_i+0xbc>
 800831c:	680b      	ldr	r3, [r1, #0]
 800831e:	6825      	ldr	r5, [r4, #0]
 8008320:	1d18      	adds	r0, r3, #4
 8008322:	6008      	str	r0, [r1, #0]
 8008324:	0628      	lsls	r0, r5, #24
 8008326:	d501      	bpl.n	800832c <_printf_i+0xec>
 8008328:	681d      	ldr	r5, [r3, #0]
 800832a:	e002      	b.n	8008332 <_printf_i+0xf2>
 800832c:	0669      	lsls	r1, r5, #25
 800832e:	d5fb      	bpl.n	8008328 <_printf_i+0xe8>
 8008330:	881d      	ldrh	r5, [r3, #0]
 8008332:	4854      	ldr	r0, [pc, #336]	; (8008484 <_printf_i+0x244>)
 8008334:	2f6f      	cmp	r7, #111	; 0x6f
 8008336:	bf0c      	ite	eq
 8008338:	2308      	moveq	r3, #8
 800833a:	230a      	movne	r3, #10
 800833c:	2100      	movs	r1, #0
 800833e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008342:	6866      	ldr	r6, [r4, #4]
 8008344:	60a6      	str	r6, [r4, #8]
 8008346:	2e00      	cmp	r6, #0
 8008348:	bfa2      	ittt	ge
 800834a:	6821      	ldrge	r1, [r4, #0]
 800834c:	f021 0104 	bicge.w	r1, r1, #4
 8008350:	6021      	strge	r1, [r4, #0]
 8008352:	b90d      	cbnz	r5, 8008358 <_printf_i+0x118>
 8008354:	2e00      	cmp	r6, #0
 8008356:	d04d      	beq.n	80083f4 <_printf_i+0x1b4>
 8008358:	4616      	mov	r6, r2
 800835a:	fbb5 f1f3 	udiv	r1, r5, r3
 800835e:	fb03 5711 	mls	r7, r3, r1, r5
 8008362:	5dc7      	ldrb	r7, [r0, r7]
 8008364:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008368:	462f      	mov	r7, r5
 800836a:	42bb      	cmp	r3, r7
 800836c:	460d      	mov	r5, r1
 800836e:	d9f4      	bls.n	800835a <_printf_i+0x11a>
 8008370:	2b08      	cmp	r3, #8
 8008372:	d10b      	bne.n	800838c <_printf_i+0x14c>
 8008374:	6823      	ldr	r3, [r4, #0]
 8008376:	07df      	lsls	r7, r3, #31
 8008378:	d508      	bpl.n	800838c <_printf_i+0x14c>
 800837a:	6923      	ldr	r3, [r4, #16]
 800837c:	6861      	ldr	r1, [r4, #4]
 800837e:	4299      	cmp	r1, r3
 8008380:	bfde      	ittt	le
 8008382:	2330      	movle	r3, #48	; 0x30
 8008384:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008388:	f106 36ff 	addle.w	r6, r6, #4294967295
 800838c:	1b92      	subs	r2, r2, r6
 800838e:	6122      	str	r2, [r4, #16]
 8008390:	f8cd a000 	str.w	sl, [sp]
 8008394:	464b      	mov	r3, r9
 8008396:	aa03      	add	r2, sp, #12
 8008398:	4621      	mov	r1, r4
 800839a:	4640      	mov	r0, r8
 800839c:	f7ff fee2 	bl	8008164 <_printf_common>
 80083a0:	3001      	adds	r0, #1
 80083a2:	d14c      	bne.n	800843e <_printf_i+0x1fe>
 80083a4:	f04f 30ff 	mov.w	r0, #4294967295
 80083a8:	b004      	add	sp, #16
 80083aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ae:	4835      	ldr	r0, [pc, #212]	; (8008484 <_printf_i+0x244>)
 80083b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80083b4:	6823      	ldr	r3, [r4, #0]
 80083b6:	680e      	ldr	r6, [r1, #0]
 80083b8:	061f      	lsls	r7, r3, #24
 80083ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80083be:	600e      	str	r6, [r1, #0]
 80083c0:	d514      	bpl.n	80083ec <_printf_i+0x1ac>
 80083c2:	07d9      	lsls	r1, r3, #31
 80083c4:	bf44      	itt	mi
 80083c6:	f043 0320 	orrmi.w	r3, r3, #32
 80083ca:	6023      	strmi	r3, [r4, #0]
 80083cc:	b91d      	cbnz	r5, 80083d6 <_printf_i+0x196>
 80083ce:	6823      	ldr	r3, [r4, #0]
 80083d0:	f023 0320 	bic.w	r3, r3, #32
 80083d4:	6023      	str	r3, [r4, #0]
 80083d6:	2310      	movs	r3, #16
 80083d8:	e7b0      	b.n	800833c <_printf_i+0xfc>
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	f043 0320 	orr.w	r3, r3, #32
 80083e0:	6023      	str	r3, [r4, #0]
 80083e2:	2378      	movs	r3, #120	; 0x78
 80083e4:	4828      	ldr	r0, [pc, #160]	; (8008488 <_printf_i+0x248>)
 80083e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80083ea:	e7e3      	b.n	80083b4 <_printf_i+0x174>
 80083ec:	065e      	lsls	r6, r3, #25
 80083ee:	bf48      	it	mi
 80083f0:	b2ad      	uxthmi	r5, r5
 80083f2:	e7e6      	b.n	80083c2 <_printf_i+0x182>
 80083f4:	4616      	mov	r6, r2
 80083f6:	e7bb      	b.n	8008370 <_printf_i+0x130>
 80083f8:	680b      	ldr	r3, [r1, #0]
 80083fa:	6826      	ldr	r6, [r4, #0]
 80083fc:	6960      	ldr	r0, [r4, #20]
 80083fe:	1d1d      	adds	r5, r3, #4
 8008400:	600d      	str	r5, [r1, #0]
 8008402:	0635      	lsls	r5, r6, #24
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	d501      	bpl.n	800840c <_printf_i+0x1cc>
 8008408:	6018      	str	r0, [r3, #0]
 800840a:	e002      	b.n	8008412 <_printf_i+0x1d2>
 800840c:	0671      	lsls	r1, r6, #25
 800840e:	d5fb      	bpl.n	8008408 <_printf_i+0x1c8>
 8008410:	8018      	strh	r0, [r3, #0]
 8008412:	2300      	movs	r3, #0
 8008414:	6123      	str	r3, [r4, #16]
 8008416:	4616      	mov	r6, r2
 8008418:	e7ba      	b.n	8008390 <_printf_i+0x150>
 800841a:	680b      	ldr	r3, [r1, #0]
 800841c:	1d1a      	adds	r2, r3, #4
 800841e:	600a      	str	r2, [r1, #0]
 8008420:	681e      	ldr	r6, [r3, #0]
 8008422:	6862      	ldr	r2, [r4, #4]
 8008424:	2100      	movs	r1, #0
 8008426:	4630      	mov	r0, r6
 8008428:	f7f7 feea 	bl	8000200 <memchr>
 800842c:	b108      	cbz	r0, 8008432 <_printf_i+0x1f2>
 800842e:	1b80      	subs	r0, r0, r6
 8008430:	6060      	str	r0, [r4, #4]
 8008432:	6863      	ldr	r3, [r4, #4]
 8008434:	6123      	str	r3, [r4, #16]
 8008436:	2300      	movs	r3, #0
 8008438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800843c:	e7a8      	b.n	8008390 <_printf_i+0x150>
 800843e:	6923      	ldr	r3, [r4, #16]
 8008440:	4632      	mov	r2, r6
 8008442:	4649      	mov	r1, r9
 8008444:	4640      	mov	r0, r8
 8008446:	47d0      	blx	sl
 8008448:	3001      	adds	r0, #1
 800844a:	d0ab      	beq.n	80083a4 <_printf_i+0x164>
 800844c:	6823      	ldr	r3, [r4, #0]
 800844e:	079b      	lsls	r3, r3, #30
 8008450:	d413      	bmi.n	800847a <_printf_i+0x23a>
 8008452:	68e0      	ldr	r0, [r4, #12]
 8008454:	9b03      	ldr	r3, [sp, #12]
 8008456:	4298      	cmp	r0, r3
 8008458:	bfb8      	it	lt
 800845a:	4618      	movlt	r0, r3
 800845c:	e7a4      	b.n	80083a8 <_printf_i+0x168>
 800845e:	2301      	movs	r3, #1
 8008460:	4632      	mov	r2, r6
 8008462:	4649      	mov	r1, r9
 8008464:	4640      	mov	r0, r8
 8008466:	47d0      	blx	sl
 8008468:	3001      	adds	r0, #1
 800846a:	d09b      	beq.n	80083a4 <_printf_i+0x164>
 800846c:	3501      	adds	r5, #1
 800846e:	68e3      	ldr	r3, [r4, #12]
 8008470:	9903      	ldr	r1, [sp, #12]
 8008472:	1a5b      	subs	r3, r3, r1
 8008474:	42ab      	cmp	r3, r5
 8008476:	dcf2      	bgt.n	800845e <_printf_i+0x21e>
 8008478:	e7eb      	b.n	8008452 <_printf_i+0x212>
 800847a:	2500      	movs	r5, #0
 800847c:	f104 0619 	add.w	r6, r4, #25
 8008480:	e7f5      	b.n	800846e <_printf_i+0x22e>
 8008482:	bf00      	nop
 8008484:	08031f5a 	.word	0x08031f5a
 8008488:	08031f6b 	.word	0x08031f6b

0800848c <_scanf_float>:
 800848c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008490:	b087      	sub	sp, #28
 8008492:	4617      	mov	r7, r2
 8008494:	9303      	str	r3, [sp, #12]
 8008496:	688b      	ldr	r3, [r1, #8]
 8008498:	1e5a      	subs	r2, r3, #1
 800849a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800849e:	bf83      	ittte	hi
 80084a0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80084a4:	195b      	addhi	r3, r3, r5
 80084a6:	9302      	strhi	r3, [sp, #8]
 80084a8:	2300      	movls	r3, #0
 80084aa:	bf86      	itte	hi
 80084ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 80084b0:	608b      	strhi	r3, [r1, #8]
 80084b2:	9302      	strls	r3, [sp, #8]
 80084b4:	680b      	ldr	r3, [r1, #0]
 80084b6:	468b      	mov	fp, r1
 80084b8:	2500      	movs	r5, #0
 80084ba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80084be:	f84b 3b1c 	str.w	r3, [fp], #28
 80084c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80084c6:	4680      	mov	r8, r0
 80084c8:	460c      	mov	r4, r1
 80084ca:	465e      	mov	r6, fp
 80084cc:	46aa      	mov	sl, r5
 80084ce:	46a9      	mov	r9, r5
 80084d0:	9501      	str	r5, [sp, #4]
 80084d2:	68a2      	ldr	r2, [r4, #8]
 80084d4:	b152      	cbz	r2, 80084ec <_scanf_float+0x60>
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	2b4e      	cmp	r3, #78	; 0x4e
 80084dc:	d864      	bhi.n	80085a8 <_scanf_float+0x11c>
 80084de:	2b40      	cmp	r3, #64	; 0x40
 80084e0:	d83c      	bhi.n	800855c <_scanf_float+0xd0>
 80084e2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80084e6:	b2c8      	uxtb	r0, r1
 80084e8:	280e      	cmp	r0, #14
 80084ea:	d93a      	bls.n	8008562 <_scanf_float+0xd6>
 80084ec:	f1b9 0f00 	cmp.w	r9, #0
 80084f0:	d003      	beq.n	80084fa <_scanf_float+0x6e>
 80084f2:	6823      	ldr	r3, [r4, #0]
 80084f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084f8:	6023      	str	r3, [r4, #0]
 80084fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084fe:	f1ba 0f01 	cmp.w	sl, #1
 8008502:	f200 8113 	bhi.w	800872c <_scanf_float+0x2a0>
 8008506:	455e      	cmp	r6, fp
 8008508:	f200 8105 	bhi.w	8008716 <_scanf_float+0x28a>
 800850c:	2501      	movs	r5, #1
 800850e:	4628      	mov	r0, r5
 8008510:	b007      	add	sp, #28
 8008512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008516:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800851a:	2a0d      	cmp	r2, #13
 800851c:	d8e6      	bhi.n	80084ec <_scanf_float+0x60>
 800851e:	a101      	add	r1, pc, #4	; (adr r1, 8008524 <_scanf_float+0x98>)
 8008520:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008524:	08008663 	.word	0x08008663
 8008528:	080084ed 	.word	0x080084ed
 800852c:	080084ed 	.word	0x080084ed
 8008530:	080084ed 	.word	0x080084ed
 8008534:	080086c3 	.word	0x080086c3
 8008538:	0800869b 	.word	0x0800869b
 800853c:	080084ed 	.word	0x080084ed
 8008540:	080084ed 	.word	0x080084ed
 8008544:	08008671 	.word	0x08008671
 8008548:	080084ed 	.word	0x080084ed
 800854c:	080084ed 	.word	0x080084ed
 8008550:	080084ed 	.word	0x080084ed
 8008554:	080084ed 	.word	0x080084ed
 8008558:	08008629 	.word	0x08008629
 800855c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008560:	e7db      	b.n	800851a <_scanf_float+0x8e>
 8008562:	290e      	cmp	r1, #14
 8008564:	d8c2      	bhi.n	80084ec <_scanf_float+0x60>
 8008566:	a001      	add	r0, pc, #4	; (adr r0, 800856c <_scanf_float+0xe0>)
 8008568:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800856c:	0800861b 	.word	0x0800861b
 8008570:	080084ed 	.word	0x080084ed
 8008574:	0800861b 	.word	0x0800861b
 8008578:	080086af 	.word	0x080086af
 800857c:	080084ed 	.word	0x080084ed
 8008580:	080085c9 	.word	0x080085c9
 8008584:	08008605 	.word	0x08008605
 8008588:	08008605 	.word	0x08008605
 800858c:	08008605 	.word	0x08008605
 8008590:	08008605 	.word	0x08008605
 8008594:	08008605 	.word	0x08008605
 8008598:	08008605 	.word	0x08008605
 800859c:	08008605 	.word	0x08008605
 80085a0:	08008605 	.word	0x08008605
 80085a4:	08008605 	.word	0x08008605
 80085a8:	2b6e      	cmp	r3, #110	; 0x6e
 80085aa:	d809      	bhi.n	80085c0 <_scanf_float+0x134>
 80085ac:	2b60      	cmp	r3, #96	; 0x60
 80085ae:	d8b2      	bhi.n	8008516 <_scanf_float+0x8a>
 80085b0:	2b54      	cmp	r3, #84	; 0x54
 80085b2:	d077      	beq.n	80086a4 <_scanf_float+0x218>
 80085b4:	2b59      	cmp	r3, #89	; 0x59
 80085b6:	d199      	bne.n	80084ec <_scanf_float+0x60>
 80085b8:	2d07      	cmp	r5, #7
 80085ba:	d197      	bne.n	80084ec <_scanf_float+0x60>
 80085bc:	2508      	movs	r5, #8
 80085be:	e029      	b.n	8008614 <_scanf_float+0x188>
 80085c0:	2b74      	cmp	r3, #116	; 0x74
 80085c2:	d06f      	beq.n	80086a4 <_scanf_float+0x218>
 80085c4:	2b79      	cmp	r3, #121	; 0x79
 80085c6:	e7f6      	b.n	80085b6 <_scanf_float+0x12a>
 80085c8:	6821      	ldr	r1, [r4, #0]
 80085ca:	05c8      	lsls	r0, r1, #23
 80085cc:	d51a      	bpl.n	8008604 <_scanf_float+0x178>
 80085ce:	9b02      	ldr	r3, [sp, #8]
 80085d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80085d4:	6021      	str	r1, [r4, #0]
 80085d6:	f109 0901 	add.w	r9, r9, #1
 80085da:	b11b      	cbz	r3, 80085e4 <_scanf_float+0x158>
 80085dc:	3b01      	subs	r3, #1
 80085de:	3201      	adds	r2, #1
 80085e0:	9302      	str	r3, [sp, #8]
 80085e2:	60a2      	str	r2, [r4, #8]
 80085e4:	68a3      	ldr	r3, [r4, #8]
 80085e6:	3b01      	subs	r3, #1
 80085e8:	60a3      	str	r3, [r4, #8]
 80085ea:	6923      	ldr	r3, [r4, #16]
 80085ec:	3301      	adds	r3, #1
 80085ee:	6123      	str	r3, [r4, #16]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	3b01      	subs	r3, #1
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	607b      	str	r3, [r7, #4]
 80085f8:	f340 8084 	ble.w	8008704 <_scanf_float+0x278>
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	3301      	adds	r3, #1
 8008600:	603b      	str	r3, [r7, #0]
 8008602:	e766      	b.n	80084d2 <_scanf_float+0x46>
 8008604:	eb1a 0f05 	cmn.w	sl, r5
 8008608:	f47f af70 	bne.w	80084ec <_scanf_float+0x60>
 800860c:	6822      	ldr	r2, [r4, #0]
 800860e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008612:	6022      	str	r2, [r4, #0]
 8008614:	f806 3b01 	strb.w	r3, [r6], #1
 8008618:	e7e4      	b.n	80085e4 <_scanf_float+0x158>
 800861a:	6822      	ldr	r2, [r4, #0]
 800861c:	0610      	lsls	r0, r2, #24
 800861e:	f57f af65 	bpl.w	80084ec <_scanf_float+0x60>
 8008622:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008626:	e7f4      	b.n	8008612 <_scanf_float+0x186>
 8008628:	f1ba 0f00 	cmp.w	sl, #0
 800862c:	d10e      	bne.n	800864c <_scanf_float+0x1c0>
 800862e:	f1b9 0f00 	cmp.w	r9, #0
 8008632:	d10e      	bne.n	8008652 <_scanf_float+0x1c6>
 8008634:	6822      	ldr	r2, [r4, #0]
 8008636:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800863a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800863e:	d108      	bne.n	8008652 <_scanf_float+0x1c6>
 8008640:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008644:	6022      	str	r2, [r4, #0]
 8008646:	f04f 0a01 	mov.w	sl, #1
 800864a:	e7e3      	b.n	8008614 <_scanf_float+0x188>
 800864c:	f1ba 0f02 	cmp.w	sl, #2
 8008650:	d055      	beq.n	80086fe <_scanf_float+0x272>
 8008652:	2d01      	cmp	r5, #1
 8008654:	d002      	beq.n	800865c <_scanf_float+0x1d0>
 8008656:	2d04      	cmp	r5, #4
 8008658:	f47f af48 	bne.w	80084ec <_scanf_float+0x60>
 800865c:	3501      	adds	r5, #1
 800865e:	b2ed      	uxtb	r5, r5
 8008660:	e7d8      	b.n	8008614 <_scanf_float+0x188>
 8008662:	f1ba 0f01 	cmp.w	sl, #1
 8008666:	f47f af41 	bne.w	80084ec <_scanf_float+0x60>
 800866a:	f04f 0a02 	mov.w	sl, #2
 800866e:	e7d1      	b.n	8008614 <_scanf_float+0x188>
 8008670:	b97d      	cbnz	r5, 8008692 <_scanf_float+0x206>
 8008672:	f1b9 0f00 	cmp.w	r9, #0
 8008676:	f47f af3c 	bne.w	80084f2 <_scanf_float+0x66>
 800867a:	6822      	ldr	r2, [r4, #0]
 800867c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008680:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008684:	f47f af39 	bne.w	80084fa <_scanf_float+0x6e>
 8008688:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800868c:	6022      	str	r2, [r4, #0]
 800868e:	2501      	movs	r5, #1
 8008690:	e7c0      	b.n	8008614 <_scanf_float+0x188>
 8008692:	2d03      	cmp	r5, #3
 8008694:	d0e2      	beq.n	800865c <_scanf_float+0x1d0>
 8008696:	2d05      	cmp	r5, #5
 8008698:	e7de      	b.n	8008658 <_scanf_float+0x1cc>
 800869a:	2d02      	cmp	r5, #2
 800869c:	f47f af26 	bne.w	80084ec <_scanf_float+0x60>
 80086a0:	2503      	movs	r5, #3
 80086a2:	e7b7      	b.n	8008614 <_scanf_float+0x188>
 80086a4:	2d06      	cmp	r5, #6
 80086a6:	f47f af21 	bne.w	80084ec <_scanf_float+0x60>
 80086aa:	2507      	movs	r5, #7
 80086ac:	e7b2      	b.n	8008614 <_scanf_float+0x188>
 80086ae:	6822      	ldr	r2, [r4, #0]
 80086b0:	0591      	lsls	r1, r2, #22
 80086b2:	f57f af1b 	bpl.w	80084ec <_scanf_float+0x60>
 80086b6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80086ba:	6022      	str	r2, [r4, #0]
 80086bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80086c0:	e7a8      	b.n	8008614 <_scanf_float+0x188>
 80086c2:	6822      	ldr	r2, [r4, #0]
 80086c4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80086c8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80086cc:	d006      	beq.n	80086dc <_scanf_float+0x250>
 80086ce:	0550      	lsls	r0, r2, #21
 80086d0:	f57f af0c 	bpl.w	80084ec <_scanf_float+0x60>
 80086d4:	f1b9 0f00 	cmp.w	r9, #0
 80086d8:	f43f af0f 	beq.w	80084fa <_scanf_float+0x6e>
 80086dc:	0591      	lsls	r1, r2, #22
 80086de:	bf58      	it	pl
 80086e0:	9901      	ldrpl	r1, [sp, #4]
 80086e2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80086e6:	bf58      	it	pl
 80086e8:	eba9 0101 	subpl.w	r1, r9, r1
 80086ec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80086f0:	bf58      	it	pl
 80086f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80086f6:	6022      	str	r2, [r4, #0]
 80086f8:	f04f 0900 	mov.w	r9, #0
 80086fc:	e78a      	b.n	8008614 <_scanf_float+0x188>
 80086fe:	f04f 0a03 	mov.w	sl, #3
 8008702:	e787      	b.n	8008614 <_scanf_float+0x188>
 8008704:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008708:	4639      	mov	r1, r7
 800870a:	4640      	mov	r0, r8
 800870c:	4798      	blx	r3
 800870e:	2800      	cmp	r0, #0
 8008710:	f43f aedf 	beq.w	80084d2 <_scanf_float+0x46>
 8008714:	e6ea      	b.n	80084ec <_scanf_float+0x60>
 8008716:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800871a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800871e:	463a      	mov	r2, r7
 8008720:	4640      	mov	r0, r8
 8008722:	4798      	blx	r3
 8008724:	6923      	ldr	r3, [r4, #16]
 8008726:	3b01      	subs	r3, #1
 8008728:	6123      	str	r3, [r4, #16]
 800872a:	e6ec      	b.n	8008506 <_scanf_float+0x7a>
 800872c:	1e6b      	subs	r3, r5, #1
 800872e:	2b06      	cmp	r3, #6
 8008730:	d825      	bhi.n	800877e <_scanf_float+0x2f2>
 8008732:	2d02      	cmp	r5, #2
 8008734:	d836      	bhi.n	80087a4 <_scanf_float+0x318>
 8008736:	455e      	cmp	r6, fp
 8008738:	f67f aee8 	bls.w	800850c <_scanf_float+0x80>
 800873c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008740:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008744:	463a      	mov	r2, r7
 8008746:	4640      	mov	r0, r8
 8008748:	4798      	blx	r3
 800874a:	6923      	ldr	r3, [r4, #16]
 800874c:	3b01      	subs	r3, #1
 800874e:	6123      	str	r3, [r4, #16]
 8008750:	e7f1      	b.n	8008736 <_scanf_float+0x2aa>
 8008752:	9802      	ldr	r0, [sp, #8]
 8008754:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008758:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800875c:	9002      	str	r0, [sp, #8]
 800875e:	463a      	mov	r2, r7
 8008760:	4640      	mov	r0, r8
 8008762:	4798      	blx	r3
 8008764:	6923      	ldr	r3, [r4, #16]
 8008766:	3b01      	subs	r3, #1
 8008768:	6123      	str	r3, [r4, #16]
 800876a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800876e:	fa5f fa8a 	uxtb.w	sl, sl
 8008772:	f1ba 0f02 	cmp.w	sl, #2
 8008776:	d1ec      	bne.n	8008752 <_scanf_float+0x2c6>
 8008778:	3d03      	subs	r5, #3
 800877a:	b2ed      	uxtb	r5, r5
 800877c:	1b76      	subs	r6, r6, r5
 800877e:	6823      	ldr	r3, [r4, #0]
 8008780:	05da      	lsls	r2, r3, #23
 8008782:	d52f      	bpl.n	80087e4 <_scanf_float+0x358>
 8008784:	055b      	lsls	r3, r3, #21
 8008786:	d510      	bpl.n	80087aa <_scanf_float+0x31e>
 8008788:	455e      	cmp	r6, fp
 800878a:	f67f aebf 	bls.w	800850c <_scanf_float+0x80>
 800878e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008792:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008796:	463a      	mov	r2, r7
 8008798:	4640      	mov	r0, r8
 800879a:	4798      	blx	r3
 800879c:	6923      	ldr	r3, [r4, #16]
 800879e:	3b01      	subs	r3, #1
 80087a0:	6123      	str	r3, [r4, #16]
 80087a2:	e7f1      	b.n	8008788 <_scanf_float+0x2fc>
 80087a4:	46aa      	mov	sl, r5
 80087a6:	9602      	str	r6, [sp, #8]
 80087a8:	e7df      	b.n	800876a <_scanf_float+0x2de>
 80087aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80087ae:	6923      	ldr	r3, [r4, #16]
 80087b0:	2965      	cmp	r1, #101	; 0x65
 80087b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80087b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80087ba:	6123      	str	r3, [r4, #16]
 80087bc:	d00c      	beq.n	80087d8 <_scanf_float+0x34c>
 80087be:	2945      	cmp	r1, #69	; 0x45
 80087c0:	d00a      	beq.n	80087d8 <_scanf_float+0x34c>
 80087c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087c6:	463a      	mov	r2, r7
 80087c8:	4640      	mov	r0, r8
 80087ca:	4798      	blx	r3
 80087cc:	6923      	ldr	r3, [r4, #16]
 80087ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80087d2:	3b01      	subs	r3, #1
 80087d4:	1eb5      	subs	r5, r6, #2
 80087d6:	6123      	str	r3, [r4, #16]
 80087d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80087dc:	463a      	mov	r2, r7
 80087de:	4640      	mov	r0, r8
 80087e0:	4798      	blx	r3
 80087e2:	462e      	mov	r6, r5
 80087e4:	6825      	ldr	r5, [r4, #0]
 80087e6:	f015 0510 	ands.w	r5, r5, #16
 80087ea:	d158      	bne.n	800889e <_scanf_float+0x412>
 80087ec:	7035      	strb	r5, [r6, #0]
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80087f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087f8:	d11c      	bne.n	8008834 <_scanf_float+0x3a8>
 80087fa:	9b01      	ldr	r3, [sp, #4]
 80087fc:	454b      	cmp	r3, r9
 80087fe:	eba3 0209 	sub.w	r2, r3, r9
 8008802:	d124      	bne.n	800884e <_scanf_float+0x3c2>
 8008804:	2200      	movs	r2, #0
 8008806:	4659      	mov	r1, fp
 8008808:	4640      	mov	r0, r8
 800880a:	f000 fe9b 	bl	8009544 <_strtod_r>
 800880e:	9b03      	ldr	r3, [sp, #12]
 8008810:	6821      	ldr	r1, [r4, #0]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f011 0f02 	tst.w	r1, #2
 8008818:	ec57 6b10 	vmov	r6, r7, d0
 800881c:	f103 0204 	add.w	r2, r3, #4
 8008820:	d020      	beq.n	8008864 <_scanf_float+0x3d8>
 8008822:	9903      	ldr	r1, [sp, #12]
 8008824:	600a      	str	r2, [r1, #0]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	e9c3 6700 	strd	r6, r7, [r3]
 800882c:	68e3      	ldr	r3, [r4, #12]
 800882e:	3301      	adds	r3, #1
 8008830:	60e3      	str	r3, [r4, #12]
 8008832:	e66c      	b.n	800850e <_scanf_float+0x82>
 8008834:	9b04      	ldr	r3, [sp, #16]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d0e4      	beq.n	8008804 <_scanf_float+0x378>
 800883a:	9905      	ldr	r1, [sp, #20]
 800883c:	230a      	movs	r3, #10
 800883e:	462a      	mov	r2, r5
 8008840:	3101      	adds	r1, #1
 8008842:	4640      	mov	r0, r8
 8008844:	f000 ff08 	bl	8009658 <_strtol_r>
 8008848:	9b04      	ldr	r3, [sp, #16]
 800884a:	9e05      	ldr	r6, [sp, #20]
 800884c:	1ac2      	subs	r2, r0, r3
 800884e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008852:	429e      	cmp	r6, r3
 8008854:	bf28      	it	cs
 8008856:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800885a:	4912      	ldr	r1, [pc, #72]	; (80088a4 <_scanf_float+0x418>)
 800885c:	4630      	mov	r0, r6
 800885e:	f000 f82b 	bl	80088b8 <siprintf>
 8008862:	e7cf      	b.n	8008804 <_scanf_float+0x378>
 8008864:	f011 0f04 	tst.w	r1, #4
 8008868:	9903      	ldr	r1, [sp, #12]
 800886a:	600a      	str	r2, [r1, #0]
 800886c:	d1db      	bne.n	8008826 <_scanf_float+0x39a>
 800886e:	f8d3 8000 	ldr.w	r8, [r3]
 8008872:	ee10 2a10 	vmov	r2, s0
 8008876:	ee10 0a10 	vmov	r0, s0
 800887a:	463b      	mov	r3, r7
 800887c:	4639      	mov	r1, r7
 800887e:	f7f8 f965 	bl	8000b4c <__aeabi_dcmpun>
 8008882:	b128      	cbz	r0, 8008890 <_scanf_float+0x404>
 8008884:	4808      	ldr	r0, [pc, #32]	; (80088a8 <_scanf_float+0x41c>)
 8008886:	f000 f811 	bl	80088ac <nanf>
 800888a:	ed88 0a00 	vstr	s0, [r8]
 800888e:	e7cd      	b.n	800882c <_scanf_float+0x3a0>
 8008890:	4630      	mov	r0, r6
 8008892:	4639      	mov	r1, r7
 8008894:	f7f8 f9b8 	bl	8000c08 <__aeabi_d2f>
 8008898:	f8c8 0000 	str.w	r0, [r8]
 800889c:	e7c6      	b.n	800882c <_scanf_float+0x3a0>
 800889e:	2500      	movs	r5, #0
 80088a0:	e635      	b.n	800850e <_scanf_float+0x82>
 80088a2:	bf00      	nop
 80088a4:	08031f7c 	.word	0x08031f7c
 80088a8:	08032398 	.word	0x08032398

080088ac <nanf>:
 80088ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80088b4 <nanf+0x8>
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	7fc00000 	.word	0x7fc00000

080088b8 <siprintf>:
 80088b8:	b40e      	push	{r1, r2, r3}
 80088ba:	b500      	push	{lr}
 80088bc:	b09c      	sub	sp, #112	; 0x70
 80088be:	ab1d      	add	r3, sp, #116	; 0x74
 80088c0:	9002      	str	r0, [sp, #8]
 80088c2:	9006      	str	r0, [sp, #24]
 80088c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088c8:	4809      	ldr	r0, [pc, #36]	; (80088f0 <siprintf+0x38>)
 80088ca:	9107      	str	r1, [sp, #28]
 80088cc:	9104      	str	r1, [sp, #16]
 80088ce:	4909      	ldr	r1, [pc, #36]	; (80088f4 <siprintf+0x3c>)
 80088d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80088d4:	9105      	str	r1, [sp, #20]
 80088d6:	6800      	ldr	r0, [r0, #0]
 80088d8:	9301      	str	r3, [sp, #4]
 80088da:	a902      	add	r1, sp, #8
 80088dc:	f002 fea4 	bl	800b628 <_svfiprintf_r>
 80088e0:	9b02      	ldr	r3, [sp, #8]
 80088e2:	2200      	movs	r2, #0
 80088e4:	701a      	strb	r2, [r3, #0]
 80088e6:	b01c      	add	sp, #112	; 0x70
 80088e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80088ec:	b003      	add	sp, #12
 80088ee:	4770      	bx	lr
 80088f0:	20000020 	.word	0x20000020
 80088f4:	ffff0208 	.word	0xffff0208

080088f8 <sulp>:
 80088f8:	b570      	push	{r4, r5, r6, lr}
 80088fa:	4604      	mov	r4, r0
 80088fc:	460d      	mov	r5, r1
 80088fe:	ec45 4b10 	vmov	d0, r4, r5
 8008902:	4616      	mov	r6, r2
 8008904:	f002 fc2c 	bl	800b160 <__ulp>
 8008908:	ec51 0b10 	vmov	r0, r1, d0
 800890c:	b17e      	cbz	r6, 800892e <sulp+0x36>
 800890e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008912:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008916:	2b00      	cmp	r3, #0
 8008918:	dd09      	ble.n	800892e <sulp+0x36>
 800891a:	051b      	lsls	r3, r3, #20
 800891c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008920:	2400      	movs	r4, #0
 8008922:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008926:	4622      	mov	r2, r4
 8008928:	462b      	mov	r3, r5
 800892a:	f7f7 fe75 	bl	8000618 <__aeabi_dmul>
 800892e:	bd70      	pop	{r4, r5, r6, pc}

08008930 <_strtod_l>:
 8008930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008934:	b0a3      	sub	sp, #140	; 0x8c
 8008936:	461f      	mov	r7, r3
 8008938:	2300      	movs	r3, #0
 800893a:	931e      	str	r3, [sp, #120]	; 0x78
 800893c:	4ba4      	ldr	r3, [pc, #656]	; (8008bd0 <_strtod_l+0x2a0>)
 800893e:	9219      	str	r2, [sp, #100]	; 0x64
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	9307      	str	r3, [sp, #28]
 8008944:	4604      	mov	r4, r0
 8008946:	4618      	mov	r0, r3
 8008948:	4688      	mov	r8, r1
 800894a:	f7f7 fc51 	bl	80001f0 <strlen>
 800894e:	f04f 0a00 	mov.w	sl, #0
 8008952:	4605      	mov	r5, r0
 8008954:	f04f 0b00 	mov.w	fp, #0
 8008958:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800895c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800895e:	781a      	ldrb	r2, [r3, #0]
 8008960:	2a2b      	cmp	r2, #43	; 0x2b
 8008962:	d04c      	beq.n	80089fe <_strtod_l+0xce>
 8008964:	d839      	bhi.n	80089da <_strtod_l+0xaa>
 8008966:	2a0d      	cmp	r2, #13
 8008968:	d832      	bhi.n	80089d0 <_strtod_l+0xa0>
 800896a:	2a08      	cmp	r2, #8
 800896c:	d832      	bhi.n	80089d4 <_strtod_l+0xa4>
 800896e:	2a00      	cmp	r2, #0
 8008970:	d03c      	beq.n	80089ec <_strtod_l+0xbc>
 8008972:	2300      	movs	r3, #0
 8008974:	930e      	str	r3, [sp, #56]	; 0x38
 8008976:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008978:	7833      	ldrb	r3, [r6, #0]
 800897a:	2b30      	cmp	r3, #48	; 0x30
 800897c:	f040 80b4 	bne.w	8008ae8 <_strtod_l+0x1b8>
 8008980:	7873      	ldrb	r3, [r6, #1]
 8008982:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008986:	2b58      	cmp	r3, #88	; 0x58
 8008988:	d16c      	bne.n	8008a64 <_strtod_l+0x134>
 800898a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800898c:	9301      	str	r3, [sp, #4]
 800898e:	ab1e      	add	r3, sp, #120	; 0x78
 8008990:	9702      	str	r7, [sp, #8]
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	4a8f      	ldr	r2, [pc, #572]	; (8008bd4 <_strtod_l+0x2a4>)
 8008996:	ab1f      	add	r3, sp, #124	; 0x7c
 8008998:	a91d      	add	r1, sp, #116	; 0x74
 800899a:	4620      	mov	r0, r4
 800899c:	f001 fd40 	bl	800a420 <__gethex>
 80089a0:	f010 0707 	ands.w	r7, r0, #7
 80089a4:	4605      	mov	r5, r0
 80089a6:	d005      	beq.n	80089b4 <_strtod_l+0x84>
 80089a8:	2f06      	cmp	r7, #6
 80089aa:	d12a      	bne.n	8008a02 <_strtod_l+0xd2>
 80089ac:	3601      	adds	r6, #1
 80089ae:	2300      	movs	r3, #0
 80089b0:	961d      	str	r6, [sp, #116]	; 0x74
 80089b2:	930e      	str	r3, [sp, #56]	; 0x38
 80089b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f040 8596 	bne.w	80094e8 <_strtod_l+0xbb8>
 80089bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089be:	b1db      	cbz	r3, 80089f8 <_strtod_l+0xc8>
 80089c0:	4652      	mov	r2, sl
 80089c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80089c6:	ec43 2b10 	vmov	d0, r2, r3
 80089ca:	b023      	add	sp, #140	; 0x8c
 80089cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d0:	2a20      	cmp	r2, #32
 80089d2:	d1ce      	bne.n	8008972 <_strtod_l+0x42>
 80089d4:	3301      	adds	r3, #1
 80089d6:	931d      	str	r3, [sp, #116]	; 0x74
 80089d8:	e7c0      	b.n	800895c <_strtod_l+0x2c>
 80089da:	2a2d      	cmp	r2, #45	; 0x2d
 80089dc:	d1c9      	bne.n	8008972 <_strtod_l+0x42>
 80089de:	2201      	movs	r2, #1
 80089e0:	920e      	str	r2, [sp, #56]	; 0x38
 80089e2:	1c5a      	adds	r2, r3, #1
 80089e4:	921d      	str	r2, [sp, #116]	; 0x74
 80089e6:	785b      	ldrb	r3, [r3, #1]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1c4      	bne.n	8008976 <_strtod_l+0x46>
 80089ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80089ee:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f040 8576 	bne.w	80094e4 <_strtod_l+0xbb4>
 80089f8:	4652      	mov	r2, sl
 80089fa:	465b      	mov	r3, fp
 80089fc:	e7e3      	b.n	80089c6 <_strtod_l+0x96>
 80089fe:	2200      	movs	r2, #0
 8008a00:	e7ee      	b.n	80089e0 <_strtod_l+0xb0>
 8008a02:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008a04:	b13a      	cbz	r2, 8008a16 <_strtod_l+0xe6>
 8008a06:	2135      	movs	r1, #53	; 0x35
 8008a08:	a820      	add	r0, sp, #128	; 0x80
 8008a0a:	f002 fcb4 	bl	800b376 <__copybits>
 8008a0e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008a10:	4620      	mov	r0, r4
 8008a12:	f002 f879 	bl	800ab08 <_Bfree>
 8008a16:	3f01      	subs	r7, #1
 8008a18:	2f05      	cmp	r7, #5
 8008a1a:	d807      	bhi.n	8008a2c <_strtod_l+0xfc>
 8008a1c:	e8df f007 	tbb	[pc, r7]
 8008a20:	1d180b0e 	.word	0x1d180b0e
 8008a24:	030e      	.short	0x030e
 8008a26:	f04f 0b00 	mov.w	fp, #0
 8008a2a:	46da      	mov	sl, fp
 8008a2c:	0728      	lsls	r0, r5, #28
 8008a2e:	d5c1      	bpl.n	80089b4 <_strtod_l+0x84>
 8008a30:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008a34:	e7be      	b.n	80089b4 <_strtod_l+0x84>
 8008a36:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008a3a:	e7f7      	b.n	8008a2c <_strtod_l+0xfc>
 8008a3c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008a40:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008a42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008a46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008a4a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008a4e:	e7ed      	b.n	8008a2c <_strtod_l+0xfc>
 8008a50:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008bd8 <_strtod_l+0x2a8>
 8008a54:	f04f 0a00 	mov.w	sl, #0
 8008a58:	e7e8      	b.n	8008a2c <_strtod_l+0xfc>
 8008a5a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008a5e:	f04f 3aff 	mov.w	sl, #4294967295
 8008a62:	e7e3      	b.n	8008a2c <_strtod_l+0xfc>
 8008a64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a66:	1c5a      	adds	r2, r3, #1
 8008a68:	921d      	str	r2, [sp, #116]	; 0x74
 8008a6a:	785b      	ldrb	r3, [r3, #1]
 8008a6c:	2b30      	cmp	r3, #48	; 0x30
 8008a6e:	d0f9      	beq.n	8008a64 <_strtod_l+0x134>
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d09f      	beq.n	80089b4 <_strtod_l+0x84>
 8008a74:	2301      	movs	r3, #1
 8008a76:	f04f 0900 	mov.w	r9, #0
 8008a7a:	9304      	str	r3, [sp, #16]
 8008a7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a7e:	930a      	str	r3, [sp, #40]	; 0x28
 8008a80:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008a84:	464f      	mov	r7, r9
 8008a86:	220a      	movs	r2, #10
 8008a88:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008a8a:	7806      	ldrb	r6, [r0, #0]
 8008a8c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008a90:	b2d9      	uxtb	r1, r3
 8008a92:	2909      	cmp	r1, #9
 8008a94:	d92a      	bls.n	8008aec <_strtod_l+0x1bc>
 8008a96:	9907      	ldr	r1, [sp, #28]
 8008a98:	462a      	mov	r2, r5
 8008a9a:	f002 fedd 	bl	800b858 <strncmp>
 8008a9e:	b398      	cbz	r0, 8008b08 <_strtod_l+0x1d8>
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	4633      	mov	r3, r6
 8008aa4:	463d      	mov	r5, r7
 8008aa6:	9007      	str	r0, [sp, #28]
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	2b65      	cmp	r3, #101	; 0x65
 8008aac:	d001      	beq.n	8008ab2 <_strtod_l+0x182>
 8008aae:	2b45      	cmp	r3, #69	; 0x45
 8008ab0:	d118      	bne.n	8008ae4 <_strtod_l+0x1b4>
 8008ab2:	b91d      	cbnz	r5, 8008abc <_strtod_l+0x18c>
 8008ab4:	9b04      	ldr	r3, [sp, #16]
 8008ab6:	4303      	orrs	r3, r0
 8008ab8:	d098      	beq.n	80089ec <_strtod_l+0xbc>
 8008aba:	2500      	movs	r5, #0
 8008abc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008ac0:	f108 0301 	add.w	r3, r8, #1
 8008ac4:	931d      	str	r3, [sp, #116]	; 0x74
 8008ac6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008aca:	2b2b      	cmp	r3, #43	; 0x2b
 8008acc:	d075      	beq.n	8008bba <_strtod_l+0x28a>
 8008ace:	2b2d      	cmp	r3, #45	; 0x2d
 8008ad0:	d07b      	beq.n	8008bca <_strtod_l+0x29a>
 8008ad2:	f04f 0c00 	mov.w	ip, #0
 8008ad6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008ada:	2909      	cmp	r1, #9
 8008adc:	f240 8082 	bls.w	8008be4 <_strtod_l+0x2b4>
 8008ae0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008ae4:	2600      	movs	r6, #0
 8008ae6:	e09d      	b.n	8008c24 <_strtod_l+0x2f4>
 8008ae8:	2300      	movs	r3, #0
 8008aea:	e7c4      	b.n	8008a76 <_strtod_l+0x146>
 8008aec:	2f08      	cmp	r7, #8
 8008aee:	bfd8      	it	le
 8008af0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008af2:	f100 0001 	add.w	r0, r0, #1
 8008af6:	bfda      	itte	le
 8008af8:	fb02 3301 	mlale	r3, r2, r1, r3
 8008afc:	9309      	strle	r3, [sp, #36]	; 0x24
 8008afe:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008b02:	3701      	adds	r7, #1
 8008b04:	901d      	str	r0, [sp, #116]	; 0x74
 8008b06:	e7bf      	b.n	8008a88 <_strtod_l+0x158>
 8008b08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b0a:	195a      	adds	r2, r3, r5
 8008b0c:	921d      	str	r2, [sp, #116]	; 0x74
 8008b0e:	5d5b      	ldrb	r3, [r3, r5]
 8008b10:	2f00      	cmp	r7, #0
 8008b12:	d037      	beq.n	8008b84 <_strtod_l+0x254>
 8008b14:	9007      	str	r0, [sp, #28]
 8008b16:	463d      	mov	r5, r7
 8008b18:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008b1c:	2a09      	cmp	r2, #9
 8008b1e:	d912      	bls.n	8008b46 <_strtod_l+0x216>
 8008b20:	2201      	movs	r2, #1
 8008b22:	e7c2      	b.n	8008aaa <_strtod_l+0x17a>
 8008b24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b26:	1c5a      	adds	r2, r3, #1
 8008b28:	921d      	str	r2, [sp, #116]	; 0x74
 8008b2a:	785b      	ldrb	r3, [r3, #1]
 8008b2c:	3001      	adds	r0, #1
 8008b2e:	2b30      	cmp	r3, #48	; 0x30
 8008b30:	d0f8      	beq.n	8008b24 <_strtod_l+0x1f4>
 8008b32:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008b36:	2a08      	cmp	r2, #8
 8008b38:	f200 84db 	bhi.w	80094f2 <_strtod_l+0xbc2>
 8008b3c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008b3e:	9007      	str	r0, [sp, #28]
 8008b40:	2000      	movs	r0, #0
 8008b42:	920a      	str	r2, [sp, #40]	; 0x28
 8008b44:	4605      	mov	r5, r0
 8008b46:	3b30      	subs	r3, #48	; 0x30
 8008b48:	f100 0201 	add.w	r2, r0, #1
 8008b4c:	d014      	beq.n	8008b78 <_strtod_l+0x248>
 8008b4e:	9907      	ldr	r1, [sp, #28]
 8008b50:	4411      	add	r1, r2
 8008b52:	9107      	str	r1, [sp, #28]
 8008b54:	462a      	mov	r2, r5
 8008b56:	eb00 0e05 	add.w	lr, r0, r5
 8008b5a:	210a      	movs	r1, #10
 8008b5c:	4572      	cmp	r2, lr
 8008b5e:	d113      	bne.n	8008b88 <_strtod_l+0x258>
 8008b60:	182a      	adds	r2, r5, r0
 8008b62:	2a08      	cmp	r2, #8
 8008b64:	f105 0501 	add.w	r5, r5, #1
 8008b68:	4405      	add	r5, r0
 8008b6a:	dc1c      	bgt.n	8008ba6 <_strtod_l+0x276>
 8008b6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b6e:	220a      	movs	r2, #10
 8008b70:	fb02 3301 	mla	r3, r2, r1, r3
 8008b74:	9309      	str	r3, [sp, #36]	; 0x24
 8008b76:	2200      	movs	r2, #0
 8008b78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b7a:	1c59      	adds	r1, r3, #1
 8008b7c:	911d      	str	r1, [sp, #116]	; 0x74
 8008b7e:	785b      	ldrb	r3, [r3, #1]
 8008b80:	4610      	mov	r0, r2
 8008b82:	e7c9      	b.n	8008b18 <_strtod_l+0x1e8>
 8008b84:	4638      	mov	r0, r7
 8008b86:	e7d2      	b.n	8008b2e <_strtod_l+0x1fe>
 8008b88:	2a08      	cmp	r2, #8
 8008b8a:	dc04      	bgt.n	8008b96 <_strtod_l+0x266>
 8008b8c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008b8e:	434e      	muls	r6, r1
 8008b90:	9609      	str	r6, [sp, #36]	; 0x24
 8008b92:	3201      	adds	r2, #1
 8008b94:	e7e2      	b.n	8008b5c <_strtod_l+0x22c>
 8008b96:	f102 0c01 	add.w	ip, r2, #1
 8008b9a:	f1bc 0f10 	cmp.w	ip, #16
 8008b9e:	bfd8      	it	le
 8008ba0:	fb01 f909 	mulle.w	r9, r1, r9
 8008ba4:	e7f5      	b.n	8008b92 <_strtod_l+0x262>
 8008ba6:	2d10      	cmp	r5, #16
 8008ba8:	bfdc      	itt	le
 8008baa:	220a      	movle	r2, #10
 8008bac:	fb02 3909 	mlale	r9, r2, r9, r3
 8008bb0:	e7e1      	b.n	8008b76 <_strtod_l+0x246>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	9307      	str	r3, [sp, #28]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	e77c      	b.n	8008ab4 <_strtod_l+0x184>
 8008bba:	f04f 0c00 	mov.w	ip, #0
 8008bbe:	f108 0302 	add.w	r3, r8, #2
 8008bc2:	931d      	str	r3, [sp, #116]	; 0x74
 8008bc4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008bc8:	e785      	b.n	8008ad6 <_strtod_l+0x1a6>
 8008bca:	f04f 0c01 	mov.w	ip, #1
 8008bce:	e7f6      	b.n	8008bbe <_strtod_l+0x28e>
 8008bd0:	080321d8 	.word	0x080321d8
 8008bd4:	08031f84 	.word	0x08031f84
 8008bd8:	7ff00000 	.word	0x7ff00000
 8008bdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008bde:	1c59      	adds	r1, r3, #1
 8008be0:	911d      	str	r1, [sp, #116]	; 0x74
 8008be2:	785b      	ldrb	r3, [r3, #1]
 8008be4:	2b30      	cmp	r3, #48	; 0x30
 8008be6:	d0f9      	beq.n	8008bdc <_strtod_l+0x2ac>
 8008be8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008bec:	2908      	cmp	r1, #8
 8008bee:	f63f af79 	bhi.w	8008ae4 <_strtod_l+0x1b4>
 8008bf2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008bf6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008bf8:	9308      	str	r3, [sp, #32]
 8008bfa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008bfc:	1c59      	adds	r1, r3, #1
 8008bfe:	911d      	str	r1, [sp, #116]	; 0x74
 8008c00:	785b      	ldrb	r3, [r3, #1]
 8008c02:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008c06:	2e09      	cmp	r6, #9
 8008c08:	d937      	bls.n	8008c7a <_strtod_l+0x34a>
 8008c0a:	9e08      	ldr	r6, [sp, #32]
 8008c0c:	1b89      	subs	r1, r1, r6
 8008c0e:	2908      	cmp	r1, #8
 8008c10:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008c14:	dc02      	bgt.n	8008c1c <_strtod_l+0x2ec>
 8008c16:	4576      	cmp	r6, lr
 8008c18:	bfa8      	it	ge
 8008c1a:	4676      	movge	r6, lr
 8008c1c:	f1bc 0f00 	cmp.w	ip, #0
 8008c20:	d000      	beq.n	8008c24 <_strtod_l+0x2f4>
 8008c22:	4276      	negs	r6, r6
 8008c24:	2d00      	cmp	r5, #0
 8008c26:	d14f      	bne.n	8008cc8 <_strtod_l+0x398>
 8008c28:	9904      	ldr	r1, [sp, #16]
 8008c2a:	4301      	orrs	r1, r0
 8008c2c:	f47f aec2 	bne.w	80089b4 <_strtod_l+0x84>
 8008c30:	2a00      	cmp	r2, #0
 8008c32:	f47f aedb 	bne.w	80089ec <_strtod_l+0xbc>
 8008c36:	2b69      	cmp	r3, #105	; 0x69
 8008c38:	d027      	beq.n	8008c8a <_strtod_l+0x35a>
 8008c3a:	dc24      	bgt.n	8008c86 <_strtod_l+0x356>
 8008c3c:	2b49      	cmp	r3, #73	; 0x49
 8008c3e:	d024      	beq.n	8008c8a <_strtod_l+0x35a>
 8008c40:	2b4e      	cmp	r3, #78	; 0x4e
 8008c42:	f47f aed3 	bne.w	80089ec <_strtod_l+0xbc>
 8008c46:	499e      	ldr	r1, [pc, #632]	; (8008ec0 <_strtod_l+0x590>)
 8008c48:	a81d      	add	r0, sp, #116	; 0x74
 8008c4a:	f001 fe41 	bl	800a8d0 <__match>
 8008c4e:	2800      	cmp	r0, #0
 8008c50:	f43f aecc 	beq.w	80089ec <_strtod_l+0xbc>
 8008c54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	2b28      	cmp	r3, #40	; 0x28
 8008c5a:	d12d      	bne.n	8008cb8 <_strtod_l+0x388>
 8008c5c:	4999      	ldr	r1, [pc, #612]	; (8008ec4 <_strtod_l+0x594>)
 8008c5e:	aa20      	add	r2, sp, #128	; 0x80
 8008c60:	a81d      	add	r0, sp, #116	; 0x74
 8008c62:	f001 fe49 	bl	800a8f8 <__hexnan>
 8008c66:	2805      	cmp	r0, #5
 8008c68:	d126      	bne.n	8008cb8 <_strtod_l+0x388>
 8008c6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c6c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008c70:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008c74:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008c78:	e69c      	b.n	80089b4 <_strtod_l+0x84>
 8008c7a:	210a      	movs	r1, #10
 8008c7c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008c80:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008c84:	e7b9      	b.n	8008bfa <_strtod_l+0x2ca>
 8008c86:	2b6e      	cmp	r3, #110	; 0x6e
 8008c88:	e7db      	b.n	8008c42 <_strtod_l+0x312>
 8008c8a:	498f      	ldr	r1, [pc, #572]	; (8008ec8 <_strtod_l+0x598>)
 8008c8c:	a81d      	add	r0, sp, #116	; 0x74
 8008c8e:	f001 fe1f 	bl	800a8d0 <__match>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	f43f aeaa 	beq.w	80089ec <_strtod_l+0xbc>
 8008c98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008c9a:	498c      	ldr	r1, [pc, #560]	; (8008ecc <_strtod_l+0x59c>)
 8008c9c:	3b01      	subs	r3, #1
 8008c9e:	a81d      	add	r0, sp, #116	; 0x74
 8008ca0:	931d      	str	r3, [sp, #116]	; 0x74
 8008ca2:	f001 fe15 	bl	800a8d0 <__match>
 8008ca6:	b910      	cbnz	r0, 8008cae <_strtod_l+0x37e>
 8008ca8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008caa:	3301      	adds	r3, #1
 8008cac:	931d      	str	r3, [sp, #116]	; 0x74
 8008cae:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8008edc <_strtod_l+0x5ac>
 8008cb2:	f04f 0a00 	mov.w	sl, #0
 8008cb6:	e67d      	b.n	80089b4 <_strtod_l+0x84>
 8008cb8:	4885      	ldr	r0, [pc, #532]	; (8008ed0 <_strtod_l+0x5a0>)
 8008cba:	f002 fdb5 	bl	800b828 <nan>
 8008cbe:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008cc2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008cc6:	e675      	b.n	80089b4 <_strtod_l+0x84>
 8008cc8:	9b07      	ldr	r3, [sp, #28]
 8008cca:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ccc:	1af3      	subs	r3, r6, r3
 8008cce:	2f00      	cmp	r7, #0
 8008cd0:	bf08      	it	eq
 8008cd2:	462f      	moveq	r7, r5
 8008cd4:	2d10      	cmp	r5, #16
 8008cd6:	9308      	str	r3, [sp, #32]
 8008cd8:	46a8      	mov	r8, r5
 8008cda:	bfa8      	it	ge
 8008cdc:	f04f 0810 	movge.w	r8, #16
 8008ce0:	f7f7 fc20 	bl	8000524 <__aeabi_ui2d>
 8008ce4:	2d09      	cmp	r5, #9
 8008ce6:	4682      	mov	sl, r0
 8008ce8:	468b      	mov	fp, r1
 8008cea:	dd13      	ble.n	8008d14 <_strtod_l+0x3e4>
 8008cec:	4b79      	ldr	r3, [pc, #484]	; (8008ed4 <_strtod_l+0x5a4>)
 8008cee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008cf2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008cf6:	f7f7 fc8f 	bl	8000618 <__aeabi_dmul>
 8008cfa:	4682      	mov	sl, r0
 8008cfc:	4648      	mov	r0, r9
 8008cfe:	468b      	mov	fp, r1
 8008d00:	f7f7 fc10 	bl	8000524 <__aeabi_ui2d>
 8008d04:	4602      	mov	r2, r0
 8008d06:	460b      	mov	r3, r1
 8008d08:	4650      	mov	r0, sl
 8008d0a:	4659      	mov	r1, fp
 8008d0c:	f7f7 face 	bl	80002ac <__adddf3>
 8008d10:	4682      	mov	sl, r0
 8008d12:	468b      	mov	fp, r1
 8008d14:	2d0f      	cmp	r5, #15
 8008d16:	dc38      	bgt.n	8008d8a <_strtod_l+0x45a>
 8008d18:	9b08      	ldr	r3, [sp, #32]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f43f ae4a 	beq.w	80089b4 <_strtod_l+0x84>
 8008d20:	dd24      	ble.n	8008d6c <_strtod_l+0x43c>
 8008d22:	2b16      	cmp	r3, #22
 8008d24:	dc0b      	bgt.n	8008d3e <_strtod_l+0x40e>
 8008d26:	4d6b      	ldr	r5, [pc, #428]	; (8008ed4 <_strtod_l+0x5a4>)
 8008d28:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008d2c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008d30:	4652      	mov	r2, sl
 8008d32:	465b      	mov	r3, fp
 8008d34:	f7f7 fc70 	bl	8000618 <__aeabi_dmul>
 8008d38:	4682      	mov	sl, r0
 8008d3a:	468b      	mov	fp, r1
 8008d3c:	e63a      	b.n	80089b4 <_strtod_l+0x84>
 8008d3e:	9a08      	ldr	r2, [sp, #32]
 8008d40:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008d44:	4293      	cmp	r3, r2
 8008d46:	db20      	blt.n	8008d8a <_strtod_l+0x45a>
 8008d48:	4c62      	ldr	r4, [pc, #392]	; (8008ed4 <_strtod_l+0x5a4>)
 8008d4a:	f1c5 050f 	rsb	r5, r5, #15
 8008d4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008d52:	4652      	mov	r2, sl
 8008d54:	465b      	mov	r3, fp
 8008d56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d5a:	f7f7 fc5d 	bl	8000618 <__aeabi_dmul>
 8008d5e:	9b08      	ldr	r3, [sp, #32]
 8008d60:	1b5d      	subs	r5, r3, r5
 8008d62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008d66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008d6a:	e7e3      	b.n	8008d34 <_strtod_l+0x404>
 8008d6c:	9b08      	ldr	r3, [sp, #32]
 8008d6e:	3316      	adds	r3, #22
 8008d70:	db0b      	blt.n	8008d8a <_strtod_l+0x45a>
 8008d72:	9b07      	ldr	r3, [sp, #28]
 8008d74:	4a57      	ldr	r2, [pc, #348]	; (8008ed4 <_strtod_l+0x5a4>)
 8008d76:	1b9e      	subs	r6, r3, r6
 8008d78:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008d7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d80:	4650      	mov	r0, sl
 8008d82:	4659      	mov	r1, fp
 8008d84:	f7f7 fd72 	bl	800086c <__aeabi_ddiv>
 8008d88:	e7d6      	b.n	8008d38 <_strtod_l+0x408>
 8008d8a:	9b08      	ldr	r3, [sp, #32]
 8008d8c:	eba5 0808 	sub.w	r8, r5, r8
 8008d90:	4498      	add	r8, r3
 8008d92:	f1b8 0f00 	cmp.w	r8, #0
 8008d96:	dd71      	ble.n	8008e7c <_strtod_l+0x54c>
 8008d98:	f018 030f 	ands.w	r3, r8, #15
 8008d9c:	d00a      	beq.n	8008db4 <_strtod_l+0x484>
 8008d9e:	494d      	ldr	r1, [pc, #308]	; (8008ed4 <_strtod_l+0x5a4>)
 8008da0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008da4:	4652      	mov	r2, sl
 8008da6:	465b      	mov	r3, fp
 8008da8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dac:	f7f7 fc34 	bl	8000618 <__aeabi_dmul>
 8008db0:	4682      	mov	sl, r0
 8008db2:	468b      	mov	fp, r1
 8008db4:	f038 080f 	bics.w	r8, r8, #15
 8008db8:	d04d      	beq.n	8008e56 <_strtod_l+0x526>
 8008dba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008dbe:	dd22      	ble.n	8008e06 <_strtod_l+0x4d6>
 8008dc0:	2500      	movs	r5, #0
 8008dc2:	462e      	mov	r6, r5
 8008dc4:	9509      	str	r5, [sp, #36]	; 0x24
 8008dc6:	9507      	str	r5, [sp, #28]
 8008dc8:	2322      	movs	r3, #34	; 0x22
 8008dca:	f8df b110 	ldr.w	fp, [pc, #272]	; 8008edc <_strtod_l+0x5ac>
 8008dce:	6023      	str	r3, [r4, #0]
 8008dd0:	f04f 0a00 	mov.w	sl, #0
 8008dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	f43f adec 	beq.w	80089b4 <_strtod_l+0x84>
 8008ddc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008dde:	4620      	mov	r0, r4
 8008de0:	f001 fe92 	bl	800ab08 <_Bfree>
 8008de4:	9907      	ldr	r1, [sp, #28]
 8008de6:	4620      	mov	r0, r4
 8008de8:	f001 fe8e 	bl	800ab08 <_Bfree>
 8008dec:	4631      	mov	r1, r6
 8008dee:	4620      	mov	r0, r4
 8008df0:	f001 fe8a 	bl	800ab08 <_Bfree>
 8008df4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008df6:	4620      	mov	r0, r4
 8008df8:	f001 fe86 	bl	800ab08 <_Bfree>
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f001 fe82 	bl	800ab08 <_Bfree>
 8008e04:	e5d6      	b.n	80089b4 <_strtod_l+0x84>
 8008e06:	2300      	movs	r3, #0
 8008e08:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008e0c:	4650      	mov	r0, sl
 8008e0e:	4659      	mov	r1, fp
 8008e10:	4699      	mov	r9, r3
 8008e12:	f1b8 0f01 	cmp.w	r8, #1
 8008e16:	dc21      	bgt.n	8008e5c <_strtod_l+0x52c>
 8008e18:	b10b      	cbz	r3, 8008e1e <_strtod_l+0x4ee>
 8008e1a:	4682      	mov	sl, r0
 8008e1c:	468b      	mov	fp, r1
 8008e1e:	4b2e      	ldr	r3, [pc, #184]	; (8008ed8 <_strtod_l+0x5a8>)
 8008e20:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008e24:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008e28:	4652      	mov	r2, sl
 8008e2a:	465b      	mov	r3, fp
 8008e2c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008e30:	f7f7 fbf2 	bl	8000618 <__aeabi_dmul>
 8008e34:	4b29      	ldr	r3, [pc, #164]	; (8008edc <_strtod_l+0x5ac>)
 8008e36:	460a      	mov	r2, r1
 8008e38:	400b      	ands	r3, r1
 8008e3a:	4929      	ldr	r1, [pc, #164]	; (8008ee0 <_strtod_l+0x5b0>)
 8008e3c:	428b      	cmp	r3, r1
 8008e3e:	4682      	mov	sl, r0
 8008e40:	d8be      	bhi.n	8008dc0 <_strtod_l+0x490>
 8008e42:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008e46:	428b      	cmp	r3, r1
 8008e48:	bf86      	itte	hi
 8008e4a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008ee4 <_strtod_l+0x5b4>
 8008e4e:	f04f 3aff 	movhi.w	sl, #4294967295
 8008e52:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008e56:	2300      	movs	r3, #0
 8008e58:	9304      	str	r3, [sp, #16]
 8008e5a:	e081      	b.n	8008f60 <_strtod_l+0x630>
 8008e5c:	f018 0f01 	tst.w	r8, #1
 8008e60:	d007      	beq.n	8008e72 <_strtod_l+0x542>
 8008e62:	4b1d      	ldr	r3, [pc, #116]	; (8008ed8 <_strtod_l+0x5a8>)
 8008e64:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6c:	f7f7 fbd4 	bl	8000618 <__aeabi_dmul>
 8008e70:	2301      	movs	r3, #1
 8008e72:	f109 0901 	add.w	r9, r9, #1
 8008e76:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008e7a:	e7ca      	b.n	8008e12 <_strtod_l+0x4e2>
 8008e7c:	d0eb      	beq.n	8008e56 <_strtod_l+0x526>
 8008e7e:	f1c8 0800 	rsb	r8, r8, #0
 8008e82:	f018 020f 	ands.w	r2, r8, #15
 8008e86:	d00a      	beq.n	8008e9e <_strtod_l+0x56e>
 8008e88:	4b12      	ldr	r3, [pc, #72]	; (8008ed4 <_strtod_l+0x5a4>)
 8008e8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e8e:	4650      	mov	r0, sl
 8008e90:	4659      	mov	r1, fp
 8008e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e96:	f7f7 fce9 	bl	800086c <__aeabi_ddiv>
 8008e9a:	4682      	mov	sl, r0
 8008e9c:	468b      	mov	fp, r1
 8008e9e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008ea2:	d0d8      	beq.n	8008e56 <_strtod_l+0x526>
 8008ea4:	f1b8 0f1f 	cmp.w	r8, #31
 8008ea8:	dd1e      	ble.n	8008ee8 <_strtod_l+0x5b8>
 8008eaa:	2500      	movs	r5, #0
 8008eac:	462e      	mov	r6, r5
 8008eae:	9509      	str	r5, [sp, #36]	; 0x24
 8008eb0:	9507      	str	r5, [sp, #28]
 8008eb2:	2322      	movs	r3, #34	; 0x22
 8008eb4:	f04f 0a00 	mov.w	sl, #0
 8008eb8:	f04f 0b00 	mov.w	fp, #0
 8008ebc:	6023      	str	r3, [r4, #0]
 8008ebe:	e789      	b.n	8008dd4 <_strtod_l+0x4a4>
 8008ec0:	08031f55 	.word	0x08031f55
 8008ec4:	08031f98 	.word	0x08031f98
 8008ec8:	08031f4d 	.word	0x08031f4d
 8008ecc:	080320dc 	.word	0x080320dc
 8008ed0:	08032398 	.word	0x08032398
 8008ed4:	08032278 	.word	0x08032278
 8008ed8:	08032250 	.word	0x08032250
 8008edc:	7ff00000 	.word	0x7ff00000
 8008ee0:	7ca00000 	.word	0x7ca00000
 8008ee4:	7fefffff 	.word	0x7fefffff
 8008ee8:	f018 0310 	ands.w	r3, r8, #16
 8008eec:	bf18      	it	ne
 8008eee:	236a      	movne	r3, #106	; 0x6a
 8008ef0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80092a8 <_strtod_l+0x978>
 8008ef4:	9304      	str	r3, [sp, #16]
 8008ef6:	4650      	mov	r0, sl
 8008ef8:	4659      	mov	r1, fp
 8008efa:	2300      	movs	r3, #0
 8008efc:	f018 0f01 	tst.w	r8, #1
 8008f00:	d004      	beq.n	8008f0c <_strtod_l+0x5dc>
 8008f02:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008f06:	f7f7 fb87 	bl	8000618 <__aeabi_dmul>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008f10:	f109 0908 	add.w	r9, r9, #8
 8008f14:	d1f2      	bne.n	8008efc <_strtod_l+0x5cc>
 8008f16:	b10b      	cbz	r3, 8008f1c <_strtod_l+0x5ec>
 8008f18:	4682      	mov	sl, r0
 8008f1a:	468b      	mov	fp, r1
 8008f1c:	9b04      	ldr	r3, [sp, #16]
 8008f1e:	b1bb      	cbz	r3, 8008f50 <_strtod_l+0x620>
 8008f20:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008f24:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	4659      	mov	r1, fp
 8008f2c:	dd10      	ble.n	8008f50 <_strtod_l+0x620>
 8008f2e:	2b1f      	cmp	r3, #31
 8008f30:	f340 8128 	ble.w	8009184 <_strtod_l+0x854>
 8008f34:	2b34      	cmp	r3, #52	; 0x34
 8008f36:	bfde      	ittt	le
 8008f38:	3b20      	suble	r3, #32
 8008f3a:	f04f 32ff 	movle.w	r2, #4294967295
 8008f3e:	fa02 f303 	lslle.w	r3, r2, r3
 8008f42:	f04f 0a00 	mov.w	sl, #0
 8008f46:	bfcc      	ite	gt
 8008f48:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008f4c:	ea03 0b01 	andle.w	fp, r3, r1
 8008f50:	2200      	movs	r2, #0
 8008f52:	2300      	movs	r3, #0
 8008f54:	4650      	mov	r0, sl
 8008f56:	4659      	mov	r1, fp
 8008f58:	f7f7 fdc6 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d1a4      	bne.n	8008eaa <_strtod_l+0x57a>
 8008f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008f66:	462b      	mov	r3, r5
 8008f68:	463a      	mov	r2, r7
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f001 fe38 	bl	800abe0 <__s2b>
 8008f70:	9009      	str	r0, [sp, #36]	; 0x24
 8008f72:	2800      	cmp	r0, #0
 8008f74:	f43f af24 	beq.w	8008dc0 <_strtod_l+0x490>
 8008f78:	9b07      	ldr	r3, [sp, #28]
 8008f7a:	1b9e      	subs	r6, r3, r6
 8008f7c:	9b08      	ldr	r3, [sp, #32]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	bfb4      	ite	lt
 8008f82:	4633      	movlt	r3, r6
 8008f84:	2300      	movge	r3, #0
 8008f86:	9310      	str	r3, [sp, #64]	; 0x40
 8008f88:	9b08      	ldr	r3, [sp, #32]
 8008f8a:	2500      	movs	r5, #0
 8008f8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008f90:	9318      	str	r3, [sp, #96]	; 0x60
 8008f92:	462e      	mov	r6, r5
 8008f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f96:	4620      	mov	r0, r4
 8008f98:	6859      	ldr	r1, [r3, #4]
 8008f9a:	f001 fd75 	bl	800aa88 <_Balloc>
 8008f9e:	9007      	str	r0, [sp, #28]
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	f43f af11 	beq.w	8008dc8 <_strtod_l+0x498>
 8008fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fa8:	691a      	ldr	r2, [r3, #16]
 8008faa:	3202      	adds	r2, #2
 8008fac:	f103 010c 	add.w	r1, r3, #12
 8008fb0:	0092      	lsls	r2, r2, #2
 8008fb2:	300c      	adds	r0, #12
 8008fb4:	f001 fd5a 	bl	800aa6c <memcpy>
 8008fb8:	ec4b ab10 	vmov	d0, sl, fp
 8008fbc:	aa20      	add	r2, sp, #128	; 0x80
 8008fbe:	a91f      	add	r1, sp, #124	; 0x7c
 8008fc0:	4620      	mov	r0, r4
 8008fc2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008fc6:	f002 f947 	bl	800b258 <__d2b>
 8008fca:	901e      	str	r0, [sp, #120]	; 0x78
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	f43f aefb 	beq.w	8008dc8 <_strtod_l+0x498>
 8008fd2:	2101      	movs	r1, #1
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	f001 fe9d 	bl	800ad14 <__i2b>
 8008fda:	4606      	mov	r6, r0
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	f43f aef3 	beq.w	8008dc8 <_strtod_l+0x498>
 8008fe2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008fe4:	9904      	ldr	r1, [sp, #16]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	bfab      	itete	ge
 8008fea:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8008fec:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8008fee:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8008ff0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8008ff4:	bfac      	ite	ge
 8008ff6:	eb03 0902 	addge.w	r9, r3, r2
 8008ffa:	1ad7      	sublt	r7, r2, r3
 8008ffc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008ffe:	eba3 0801 	sub.w	r8, r3, r1
 8009002:	4490      	add	r8, r2
 8009004:	4ba3      	ldr	r3, [pc, #652]	; (8009294 <_strtod_l+0x964>)
 8009006:	f108 38ff 	add.w	r8, r8, #4294967295
 800900a:	4598      	cmp	r8, r3
 800900c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009010:	f280 80cc 	bge.w	80091ac <_strtod_l+0x87c>
 8009014:	eba3 0308 	sub.w	r3, r3, r8
 8009018:	2b1f      	cmp	r3, #31
 800901a:	eba2 0203 	sub.w	r2, r2, r3
 800901e:	f04f 0101 	mov.w	r1, #1
 8009022:	f300 80b6 	bgt.w	8009192 <_strtod_l+0x862>
 8009026:	fa01 f303 	lsl.w	r3, r1, r3
 800902a:	9311      	str	r3, [sp, #68]	; 0x44
 800902c:	2300      	movs	r3, #0
 800902e:	930c      	str	r3, [sp, #48]	; 0x30
 8009030:	eb09 0802 	add.w	r8, r9, r2
 8009034:	9b04      	ldr	r3, [sp, #16]
 8009036:	45c1      	cmp	r9, r8
 8009038:	4417      	add	r7, r2
 800903a:	441f      	add	r7, r3
 800903c:	464b      	mov	r3, r9
 800903e:	bfa8      	it	ge
 8009040:	4643      	movge	r3, r8
 8009042:	42bb      	cmp	r3, r7
 8009044:	bfa8      	it	ge
 8009046:	463b      	movge	r3, r7
 8009048:	2b00      	cmp	r3, #0
 800904a:	bfc2      	ittt	gt
 800904c:	eba8 0803 	subgt.w	r8, r8, r3
 8009050:	1aff      	subgt	r7, r7, r3
 8009052:	eba9 0903 	subgt.w	r9, r9, r3
 8009056:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009058:	2b00      	cmp	r3, #0
 800905a:	dd17      	ble.n	800908c <_strtod_l+0x75c>
 800905c:	4631      	mov	r1, r6
 800905e:	461a      	mov	r2, r3
 8009060:	4620      	mov	r0, r4
 8009062:	f001 ff13 	bl	800ae8c <__pow5mult>
 8009066:	4606      	mov	r6, r0
 8009068:	2800      	cmp	r0, #0
 800906a:	f43f aead 	beq.w	8008dc8 <_strtod_l+0x498>
 800906e:	4601      	mov	r1, r0
 8009070:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009072:	4620      	mov	r0, r4
 8009074:	f001 fe64 	bl	800ad40 <__multiply>
 8009078:	900f      	str	r0, [sp, #60]	; 0x3c
 800907a:	2800      	cmp	r0, #0
 800907c:	f43f aea4 	beq.w	8008dc8 <_strtod_l+0x498>
 8009080:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009082:	4620      	mov	r0, r4
 8009084:	f001 fd40 	bl	800ab08 <_Bfree>
 8009088:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800908a:	931e      	str	r3, [sp, #120]	; 0x78
 800908c:	f1b8 0f00 	cmp.w	r8, #0
 8009090:	f300 8091 	bgt.w	80091b6 <_strtod_l+0x886>
 8009094:	9b08      	ldr	r3, [sp, #32]
 8009096:	2b00      	cmp	r3, #0
 8009098:	dd08      	ble.n	80090ac <_strtod_l+0x77c>
 800909a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800909c:	9907      	ldr	r1, [sp, #28]
 800909e:	4620      	mov	r0, r4
 80090a0:	f001 fef4 	bl	800ae8c <__pow5mult>
 80090a4:	9007      	str	r0, [sp, #28]
 80090a6:	2800      	cmp	r0, #0
 80090a8:	f43f ae8e 	beq.w	8008dc8 <_strtod_l+0x498>
 80090ac:	2f00      	cmp	r7, #0
 80090ae:	dd08      	ble.n	80090c2 <_strtod_l+0x792>
 80090b0:	9907      	ldr	r1, [sp, #28]
 80090b2:	463a      	mov	r2, r7
 80090b4:	4620      	mov	r0, r4
 80090b6:	f001 ff43 	bl	800af40 <__lshift>
 80090ba:	9007      	str	r0, [sp, #28]
 80090bc:	2800      	cmp	r0, #0
 80090be:	f43f ae83 	beq.w	8008dc8 <_strtod_l+0x498>
 80090c2:	f1b9 0f00 	cmp.w	r9, #0
 80090c6:	dd08      	ble.n	80090da <_strtod_l+0x7aa>
 80090c8:	4631      	mov	r1, r6
 80090ca:	464a      	mov	r2, r9
 80090cc:	4620      	mov	r0, r4
 80090ce:	f001 ff37 	bl	800af40 <__lshift>
 80090d2:	4606      	mov	r6, r0
 80090d4:	2800      	cmp	r0, #0
 80090d6:	f43f ae77 	beq.w	8008dc8 <_strtod_l+0x498>
 80090da:	9a07      	ldr	r2, [sp, #28]
 80090dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80090de:	4620      	mov	r0, r4
 80090e0:	f001 ffb6 	bl	800b050 <__mdiff>
 80090e4:	4605      	mov	r5, r0
 80090e6:	2800      	cmp	r0, #0
 80090e8:	f43f ae6e 	beq.w	8008dc8 <_strtod_l+0x498>
 80090ec:	68c3      	ldr	r3, [r0, #12]
 80090ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80090f0:	2300      	movs	r3, #0
 80090f2:	60c3      	str	r3, [r0, #12]
 80090f4:	4631      	mov	r1, r6
 80090f6:	f001 ff8f 	bl	800b018 <__mcmp>
 80090fa:	2800      	cmp	r0, #0
 80090fc:	da65      	bge.n	80091ca <_strtod_l+0x89a>
 80090fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009100:	ea53 030a 	orrs.w	r3, r3, sl
 8009104:	f040 8087 	bne.w	8009216 <_strtod_l+0x8e6>
 8009108:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800910c:	2b00      	cmp	r3, #0
 800910e:	f040 8082 	bne.w	8009216 <_strtod_l+0x8e6>
 8009112:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009116:	0d1b      	lsrs	r3, r3, #20
 8009118:	051b      	lsls	r3, r3, #20
 800911a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800911e:	d97a      	bls.n	8009216 <_strtod_l+0x8e6>
 8009120:	696b      	ldr	r3, [r5, #20]
 8009122:	b913      	cbnz	r3, 800912a <_strtod_l+0x7fa>
 8009124:	692b      	ldr	r3, [r5, #16]
 8009126:	2b01      	cmp	r3, #1
 8009128:	dd75      	ble.n	8009216 <_strtod_l+0x8e6>
 800912a:	4629      	mov	r1, r5
 800912c:	2201      	movs	r2, #1
 800912e:	4620      	mov	r0, r4
 8009130:	f001 ff06 	bl	800af40 <__lshift>
 8009134:	4631      	mov	r1, r6
 8009136:	4605      	mov	r5, r0
 8009138:	f001 ff6e 	bl	800b018 <__mcmp>
 800913c:	2800      	cmp	r0, #0
 800913e:	dd6a      	ble.n	8009216 <_strtod_l+0x8e6>
 8009140:	9904      	ldr	r1, [sp, #16]
 8009142:	4a55      	ldr	r2, [pc, #340]	; (8009298 <_strtod_l+0x968>)
 8009144:	465b      	mov	r3, fp
 8009146:	2900      	cmp	r1, #0
 8009148:	f000 8085 	beq.w	8009256 <_strtod_l+0x926>
 800914c:	ea02 010b 	and.w	r1, r2, fp
 8009150:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009154:	dc7f      	bgt.n	8009256 <_strtod_l+0x926>
 8009156:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800915a:	f77f aeaa 	ble.w	8008eb2 <_strtod_l+0x582>
 800915e:	4a4f      	ldr	r2, [pc, #316]	; (800929c <_strtod_l+0x96c>)
 8009160:	2300      	movs	r3, #0
 8009162:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8009166:	4650      	mov	r0, sl
 8009168:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800916c:	4659      	mov	r1, fp
 800916e:	f7f7 fa53 	bl	8000618 <__aeabi_dmul>
 8009172:	460b      	mov	r3, r1
 8009174:	4303      	orrs	r3, r0
 8009176:	bf08      	it	eq
 8009178:	2322      	moveq	r3, #34	; 0x22
 800917a:	4682      	mov	sl, r0
 800917c:	468b      	mov	fp, r1
 800917e:	bf08      	it	eq
 8009180:	6023      	streq	r3, [r4, #0]
 8009182:	e62b      	b.n	8008ddc <_strtod_l+0x4ac>
 8009184:	f04f 32ff 	mov.w	r2, #4294967295
 8009188:	fa02 f303 	lsl.w	r3, r2, r3
 800918c:	ea03 0a0a 	and.w	sl, r3, sl
 8009190:	e6de      	b.n	8008f50 <_strtod_l+0x620>
 8009192:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009196:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800919a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800919e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80091a2:	fa01 f308 	lsl.w	r3, r1, r8
 80091a6:	930c      	str	r3, [sp, #48]	; 0x30
 80091a8:	9111      	str	r1, [sp, #68]	; 0x44
 80091aa:	e741      	b.n	8009030 <_strtod_l+0x700>
 80091ac:	2300      	movs	r3, #0
 80091ae:	930c      	str	r3, [sp, #48]	; 0x30
 80091b0:	2301      	movs	r3, #1
 80091b2:	9311      	str	r3, [sp, #68]	; 0x44
 80091b4:	e73c      	b.n	8009030 <_strtod_l+0x700>
 80091b6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80091b8:	4642      	mov	r2, r8
 80091ba:	4620      	mov	r0, r4
 80091bc:	f001 fec0 	bl	800af40 <__lshift>
 80091c0:	901e      	str	r0, [sp, #120]	; 0x78
 80091c2:	2800      	cmp	r0, #0
 80091c4:	f47f af66 	bne.w	8009094 <_strtod_l+0x764>
 80091c8:	e5fe      	b.n	8008dc8 <_strtod_l+0x498>
 80091ca:	465f      	mov	r7, fp
 80091cc:	d16e      	bne.n	80092ac <_strtod_l+0x97c>
 80091ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80091d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091d4:	b342      	cbz	r2, 8009228 <_strtod_l+0x8f8>
 80091d6:	4a32      	ldr	r2, [pc, #200]	; (80092a0 <_strtod_l+0x970>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d128      	bne.n	800922e <_strtod_l+0x8fe>
 80091dc:	9b04      	ldr	r3, [sp, #16]
 80091de:	4650      	mov	r0, sl
 80091e0:	b1eb      	cbz	r3, 800921e <_strtod_l+0x8ee>
 80091e2:	4a2d      	ldr	r2, [pc, #180]	; (8009298 <_strtod_l+0x968>)
 80091e4:	403a      	ands	r2, r7
 80091e6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80091ea:	f04f 31ff 	mov.w	r1, #4294967295
 80091ee:	d819      	bhi.n	8009224 <_strtod_l+0x8f4>
 80091f0:	0d12      	lsrs	r2, r2, #20
 80091f2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80091f6:	fa01 f303 	lsl.w	r3, r1, r3
 80091fa:	4298      	cmp	r0, r3
 80091fc:	d117      	bne.n	800922e <_strtod_l+0x8fe>
 80091fe:	4b29      	ldr	r3, [pc, #164]	; (80092a4 <_strtod_l+0x974>)
 8009200:	429f      	cmp	r7, r3
 8009202:	d102      	bne.n	800920a <_strtod_l+0x8da>
 8009204:	3001      	adds	r0, #1
 8009206:	f43f addf 	beq.w	8008dc8 <_strtod_l+0x498>
 800920a:	4b23      	ldr	r3, [pc, #140]	; (8009298 <_strtod_l+0x968>)
 800920c:	403b      	ands	r3, r7
 800920e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009212:	f04f 0a00 	mov.w	sl, #0
 8009216:	9b04      	ldr	r3, [sp, #16]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1a0      	bne.n	800915e <_strtod_l+0x82e>
 800921c:	e5de      	b.n	8008ddc <_strtod_l+0x4ac>
 800921e:	f04f 33ff 	mov.w	r3, #4294967295
 8009222:	e7ea      	b.n	80091fa <_strtod_l+0x8ca>
 8009224:	460b      	mov	r3, r1
 8009226:	e7e8      	b.n	80091fa <_strtod_l+0x8ca>
 8009228:	ea53 030a 	orrs.w	r3, r3, sl
 800922c:	d088      	beq.n	8009140 <_strtod_l+0x810>
 800922e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009230:	b1db      	cbz	r3, 800926a <_strtod_l+0x93a>
 8009232:	423b      	tst	r3, r7
 8009234:	d0ef      	beq.n	8009216 <_strtod_l+0x8e6>
 8009236:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009238:	9a04      	ldr	r2, [sp, #16]
 800923a:	4650      	mov	r0, sl
 800923c:	4659      	mov	r1, fp
 800923e:	b1c3      	cbz	r3, 8009272 <_strtod_l+0x942>
 8009240:	f7ff fb5a 	bl	80088f8 <sulp>
 8009244:	4602      	mov	r2, r0
 8009246:	460b      	mov	r3, r1
 8009248:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800924c:	f7f7 f82e 	bl	80002ac <__adddf3>
 8009250:	4682      	mov	sl, r0
 8009252:	468b      	mov	fp, r1
 8009254:	e7df      	b.n	8009216 <_strtod_l+0x8e6>
 8009256:	4013      	ands	r3, r2
 8009258:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800925c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009260:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009264:	f04f 3aff 	mov.w	sl, #4294967295
 8009268:	e7d5      	b.n	8009216 <_strtod_l+0x8e6>
 800926a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800926c:	ea13 0f0a 	tst.w	r3, sl
 8009270:	e7e0      	b.n	8009234 <_strtod_l+0x904>
 8009272:	f7ff fb41 	bl	80088f8 <sulp>
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800927e:	f7f7 f813 	bl	80002a8 <__aeabi_dsub>
 8009282:	2200      	movs	r2, #0
 8009284:	2300      	movs	r3, #0
 8009286:	4682      	mov	sl, r0
 8009288:	468b      	mov	fp, r1
 800928a:	f7f7 fc2d 	bl	8000ae8 <__aeabi_dcmpeq>
 800928e:	2800      	cmp	r0, #0
 8009290:	d0c1      	beq.n	8009216 <_strtod_l+0x8e6>
 8009292:	e60e      	b.n	8008eb2 <_strtod_l+0x582>
 8009294:	fffffc02 	.word	0xfffffc02
 8009298:	7ff00000 	.word	0x7ff00000
 800929c:	39500000 	.word	0x39500000
 80092a0:	000fffff 	.word	0x000fffff
 80092a4:	7fefffff 	.word	0x7fefffff
 80092a8:	08031fb0 	.word	0x08031fb0
 80092ac:	4631      	mov	r1, r6
 80092ae:	4628      	mov	r0, r5
 80092b0:	f002 f82e 	bl	800b310 <__ratio>
 80092b4:	ec59 8b10 	vmov	r8, r9, d0
 80092b8:	ee10 0a10 	vmov	r0, s0
 80092bc:	2200      	movs	r2, #0
 80092be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80092c2:	4649      	mov	r1, r9
 80092c4:	f7f7 fc24 	bl	8000b10 <__aeabi_dcmple>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	d07c      	beq.n	80093c6 <_strtod_l+0xa96>
 80092cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d04c      	beq.n	800936c <_strtod_l+0xa3c>
 80092d2:	4b95      	ldr	r3, [pc, #596]	; (8009528 <_strtod_l+0xbf8>)
 80092d4:	2200      	movs	r2, #0
 80092d6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80092da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009528 <_strtod_l+0xbf8>
 80092de:	f04f 0800 	mov.w	r8, #0
 80092e2:	4b92      	ldr	r3, [pc, #584]	; (800952c <_strtod_l+0xbfc>)
 80092e4:	403b      	ands	r3, r7
 80092e6:	9311      	str	r3, [sp, #68]	; 0x44
 80092e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80092ea:	4b91      	ldr	r3, [pc, #580]	; (8009530 <_strtod_l+0xc00>)
 80092ec:	429a      	cmp	r2, r3
 80092ee:	f040 80b2 	bne.w	8009456 <_strtod_l+0xb26>
 80092f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80092f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80092fa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80092fe:	ec4b ab10 	vmov	d0, sl, fp
 8009302:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8009306:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800930a:	f001 ff29 	bl	800b160 <__ulp>
 800930e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009312:	ec53 2b10 	vmov	r2, r3, d0
 8009316:	f7f7 f97f 	bl	8000618 <__aeabi_dmul>
 800931a:	4652      	mov	r2, sl
 800931c:	465b      	mov	r3, fp
 800931e:	f7f6 ffc5 	bl	80002ac <__adddf3>
 8009322:	460b      	mov	r3, r1
 8009324:	4981      	ldr	r1, [pc, #516]	; (800952c <_strtod_l+0xbfc>)
 8009326:	4a83      	ldr	r2, [pc, #524]	; (8009534 <_strtod_l+0xc04>)
 8009328:	4019      	ands	r1, r3
 800932a:	4291      	cmp	r1, r2
 800932c:	4682      	mov	sl, r0
 800932e:	d95e      	bls.n	80093ee <_strtod_l+0xabe>
 8009330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009332:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009336:	4293      	cmp	r3, r2
 8009338:	d103      	bne.n	8009342 <_strtod_l+0xa12>
 800933a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800933c:	3301      	adds	r3, #1
 800933e:	f43f ad43 	beq.w	8008dc8 <_strtod_l+0x498>
 8009342:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009540 <_strtod_l+0xc10>
 8009346:	f04f 3aff 	mov.w	sl, #4294967295
 800934a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800934c:	4620      	mov	r0, r4
 800934e:	f001 fbdb 	bl	800ab08 <_Bfree>
 8009352:	9907      	ldr	r1, [sp, #28]
 8009354:	4620      	mov	r0, r4
 8009356:	f001 fbd7 	bl	800ab08 <_Bfree>
 800935a:	4631      	mov	r1, r6
 800935c:	4620      	mov	r0, r4
 800935e:	f001 fbd3 	bl	800ab08 <_Bfree>
 8009362:	4629      	mov	r1, r5
 8009364:	4620      	mov	r0, r4
 8009366:	f001 fbcf 	bl	800ab08 <_Bfree>
 800936a:	e613      	b.n	8008f94 <_strtod_l+0x664>
 800936c:	f1ba 0f00 	cmp.w	sl, #0
 8009370:	d11b      	bne.n	80093aa <_strtod_l+0xa7a>
 8009372:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009376:	b9f3      	cbnz	r3, 80093b6 <_strtod_l+0xa86>
 8009378:	4b6b      	ldr	r3, [pc, #428]	; (8009528 <_strtod_l+0xbf8>)
 800937a:	2200      	movs	r2, #0
 800937c:	4640      	mov	r0, r8
 800937e:	4649      	mov	r1, r9
 8009380:	f7f7 fbbc 	bl	8000afc <__aeabi_dcmplt>
 8009384:	b9d0      	cbnz	r0, 80093bc <_strtod_l+0xa8c>
 8009386:	4640      	mov	r0, r8
 8009388:	4649      	mov	r1, r9
 800938a:	4b6b      	ldr	r3, [pc, #428]	; (8009538 <_strtod_l+0xc08>)
 800938c:	2200      	movs	r2, #0
 800938e:	f7f7 f943 	bl	8000618 <__aeabi_dmul>
 8009392:	4680      	mov	r8, r0
 8009394:	4689      	mov	r9, r1
 8009396:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800939a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800939e:	931b      	str	r3, [sp, #108]	; 0x6c
 80093a0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80093a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80093a8:	e79b      	b.n	80092e2 <_strtod_l+0x9b2>
 80093aa:	f1ba 0f01 	cmp.w	sl, #1
 80093ae:	d102      	bne.n	80093b6 <_strtod_l+0xa86>
 80093b0:	2f00      	cmp	r7, #0
 80093b2:	f43f ad7e 	beq.w	8008eb2 <_strtod_l+0x582>
 80093b6:	4b61      	ldr	r3, [pc, #388]	; (800953c <_strtod_l+0xc0c>)
 80093b8:	2200      	movs	r2, #0
 80093ba:	e78c      	b.n	80092d6 <_strtod_l+0x9a6>
 80093bc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009538 <_strtod_l+0xc08>
 80093c0:	f04f 0800 	mov.w	r8, #0
 80093c4:	e7e7      	b.n	8009396 <_strtod_l+0xa66>
 80093c6:	4b5c      	ldr	r3, [pc, #368]	; (8009538 <_strtod_l+0xc08>)
 80093c8:	4640      	mov	r0, r8
 80093ca:	4649      	mov	r1, r9
 80093cc:	2200      	movs	r2, #0
 80093ce:	f7f7 f923 	bl	8000618 <__aeabi_dmul>
 80093d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80093d4:	4680      	mov	r8, r0
 80093d6:	4689      	mov	r9, r1
 80093d8:	b933      	cbnz	r3, 80093e8 <_strtod_l+0xab8>
 80093da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093de:	9012      	str	r0, [sp, #72]	; 0x48
 80093e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80093e2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80093e6:	e7dd      	b.n	80093a4 <_strtod_l+0xa74>
 80093e8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80093ec:	e7f9      	b.n	80093e2 <_strtod_l+0xab2>
 80093ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80093f2:	9b04      	ldr	r3, [sp, #16]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1a8      	bne.n	800934a <_strtod_l+0xa1a>
 80093f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80093fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80093fe:	0d1b      	lsrs	r3, r3, #20
 8009400:	051b      	lsls	r3, r3, #20
 8009402:	429a      	cmp	r2, r3
 8009404:	d1a1      	bne.n	800934a <_strtod_l+0xa1a>
 8009406:	4640      	mov	r0, r8
 8009408:	4649      	mov	r1, r9
 800940a:	f7f7 fc65 	bl	8000cd8 <__aeabi_d2lz>
 800940e:	f7f7 f8d5 	bl	80005bc <__aeabi_l2d>
 8009412:	4602      	mov	r2, r0
 8009414:	460b      	mov	r3, r1
 8009416:	4640      	mov	r0, r8
 8009418:	4649      	mov	r1, r9
 800941a:	f7f6 ff45 	bl	80002a8 <__aeabi_dsub>
 800941e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009420:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009424:	ea43 030a 	orr.w	r3, r3, sl
 8009428:	4313      	orrs	r3, r2
 800942a:	4680      	mov	r8, r0
 800942c:	4689      	mov	r9, r1
 800942e:	d053      	beq.n	80094d8 <_strtod_l+0xba8>
 8009430:	a335      	add	r3, pc, #212	; (adr r3, 8009508 <_strtod_l+0xbd8>)
 8009432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009436:	f7f7 fb61 	bl	8000afc <__aeabi_dcmplt>
 800943a:	2800      	cmp	r0, #0
 800943c:	f47f acce 	bne.w	8008ddc <_strtod_l+0x4ac>
 8009440:	a333      	add	r3, pc, #204	; (adr r3, 8009510 <_strtod_l+0xbe0>)
 8009442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009446:	4640      	mov	r0, r8
 8009448:	4649      	mov	r1, r9
 800944a:	f7f7 fb75 	bl	8000b38 <__aeabi_dcmpgt>
 800944e:	2800      	cmp	r0, #0
 8009450:	f43f af7b 	beq.w	800934a <_strtod_l+0xa1a>
 8009454:	e4c2      	b.n	8008ddc <_strtod_l+0x4ac>
 8009456:	9b04      	ldr	r3, [sp, #16]
 8009458:	b333      	cbz	r3, 80094a8 <_strtod_l+0xb78>
 800945a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800945c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009460:	d822      	bhi.n	80094a8 <_strtod_l+0xb78>
 8009462:	a32d      	add	r3, pc, #180	; (adr r3, 8009518 <_strtod_l+0xbe8>)
 8009464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009468:	4640      	mov	r0, r8
 800946a:	4649      	mov	r1, r9
 800946c:	f7f7 fb50 	bl	8000b10 <__aeabi_dcmple>
 8009470:	b1a0      	cbz	r0, 800949c <_strtod_l+0xb6c>
 8009472:	4649      	mov	r1, r9
 8009474:	4640      	mov	r0, r8
 8009476:	f7f7 fba7 	bl	8000bc8 <__aeabi_d2uiz>
 800947a:	2801      	cmp	r0, #1
 800947c:	bf38      	it	cc
 800947e:	2001      	movcc	r0, #1
 8009480:	f7f7 f850 	bl	8000524 <__aeabi_ui2d>
 8009484:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009486:	4680      	mov	r8, r0
 8009488:	4689      	mov	r9, r1
 800948a:	bb13      	cbnz	r3, 80094d2 <_strtod_l+0xba2>
 800948c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009490:	9014      	str	r0, [sp, #80]	; 0x50
 8009492:	9315      	str	r3, [sp, #84]	; 0x54
 8009494:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009498:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800949c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800949e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80094a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80094a4:	1a9b      	subs	r3, r3, r2
 80094a6:	930d      	str	r3, [sp, #52]	; 0x34
 80094a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094ac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80094b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80094b4:	f001 fe54 	bl	800b160 <__ulp>
 80094b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80094bc:	ec53 2b10 	vmov	r2, r3, d0
 80094c0:	f7f7 f8aa 	bl	8000618 <__aeabi_dmul>
 80094c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80094c8:	f7f6 fef0 	bl	80002ac <__adddf3>
 80094cc:	4682      	mov	sl, r0
 80094ce:	468b      	mov	fp, r1
 80094d0:	e78f      	b.n	80093f2 <_strtod_l+0xac2>
 80094d2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80094d6:	e7dd      	b.n	8009494 <_strtod_l+0xb64>
 80094d8:	a311      	add	r3, pc, #68	; (adr r3, 8009520 <_strtod_l+0xbf0>)
 80094da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094de:	f7f7 fb0d 	bl	8000afc <__aeabi_dcmplt>
 80094e2:	e7b4      	b.n	800944e <_strtod_l+0xb1e>
 80094e4:	2300      	movs	r3, #0
 80094e6:	930e      	str	r3, [sp, #56]	; 0x38
 80094e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80094ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80094ec:	6013      	str	r3, [r2, #0]
 80094ee:	f7ff ba65 	b.w	80089bc <_strtod_l+0x8c>
 80094f2:	2b65      	cmp	r3, #101	; 0x65
 80094f4:	f43f ab5d 	beq.w	8008bb2 <_strtod_l+0x282>
 80094f8:	2b45      	cmp	r3, #69	; 0x45
 80094fa:	f43f ab5a 	beq.w	8008bb2 <_strtod_l+0x282>
 80094fe:	2201      	movs	r2, #1
 8009500:	f7ff bb92 	b.w	8008c28 <_strtod_l+0x2f8>
 8009504:	f3af 8000 	nop.w
 8009508:	94a03595 	.word	0x94a03595
 800950c:	3fdfffff 	.word	0x3fdfffff
 8009510:	35afe535 	.word	0x35afe535
 8009514:	3fe00000 	.word	0x3fe00000
 8009518:	ffc00000 	.word	0xffc00000
 800951c:	41dfffff 	.word	0x41dfffff
 8009520:	94a03595 	.word	0x94a03595
 8009524:	3fcfffff 	.word	0x3fcfffff
 8009528:	3ff00000 	.word	0x3ff00000
 800952c:	7ff00000 	.word	0x7ff00000
 8009530:	7fe00000 	.word	0x7fe00000
 8009534:	7c9fffff 	.word	0x7c9fffff
 8009538:	3fe00000 	.word	0x3fe00000
 800953c:	bff00000 	.word	0xbff00000
 8009540:	7fefffff 	.word	0x7fefffff

08009544 <_strtod_r>:
 8009544:	4b01      	ldr	r3, [pc, #4]	; (800954c <_strtod_r+0x8>)
 8009546:	f7ff b9f3 	b.w	8008930 <_strtod_l>
 800954a:	bf00      	nop
 800954c:	20000088 	.word	0x20000088

08009550 <_strtol_l.isra.0>:
 8009550:	2b01      	cmp	r3, #1
 8009552:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009556:	d001      	beq.n	800955c <_strtol_l.isra.0+0xc>
 8009558:	2b24      	cmp	r3, #36	; 0x24
 800955a:	d906      	bls.n	800956a <_strtol_l.isra.0+0x1a>
 800955c:	f7fe fafa 	bl	8007b54 <__errno>
 8009560:	2316      	movs	r3, #22
 8009562:	6003      	str	r3, [r0, #0]
 8009564:	2000      	movs	r0, #0
 8009566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800956a:	4f3a      	ldr	r7, [pc, #232]	; (8009654 <_strtol_l.isra.0+0x104>)
 800956c:	468e      	mov	lr, r1
 800956e:	4676      	mov	r6, lr
 8009570:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009574:	5de5      	ldrb	r5, [r4, r7]
 8009576:	f015 0508 	ands.w	r5, r5, #8
 800957a:	d1f8      	bne.n	800956e <_strtol_l.isra.0+0x1e>
 800957c:	2c2d      	cmp	r4, #45	; 0x2d
 800957e:	d134      	bne.n	80095ea <_strtol_l.isra.0+0x9a>
 8009580:	f89e 4000 	ldrb.w	r4, [lr]
 8009584:	f04f 0801 	mov.w	r8, #1
 8009588:	f106 0e02 	add.w	lr, r6, #2
 800958c:	2b00      	cmp	r3, #0
 800958e:	d05c      	beq.n	800964a <_strtol_l.isra.0+0xfa>
 8009590:	2b10      	cmp	r3, #16
 8009592:	d10c      	bne.n	80095ae <_strtol_l.isra.0+0x5e>
 8009594:	2c30      	cmp	r4, #48	; 0x30
 8009596:	d10a      	bne.n	80095ae <_strtol_l.isra.0+0x5e>
 8009598:	f89e 4000 	ldrb.w	r4, [lr]
 800959c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80095a0:	2c58      	cmp	r4, #88	; 0x58
 80095a2:	d14d      	bne.n	8009640 <_strtol_l.isra.0+0xf0>
 80095a4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80095a8:	2310      	movs	r3, #16
 80095aa:	f10e 0e02 	add.w	lr, lr, #2
 80095ae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80095b2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80095b6:	2600      	movs	r6, #0
 80095b8:	fbbc f9f3 	udiv	r9, ip, r3
 80095bc:	4635      	mov	r5, r6
 80095be:	fb03 ca19 	mls	sl, r3, r9, ip
 80095c2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80095c6:	2f09      	cmp	r7, #9
 80095c8:	d818      	bhi.n	80095fc <_strtol_l.isra.0+0xac>
 80095ca:	463c      	mov	r4, r7
 80095cc:	42a3      	cmp	r3, r4
 80095ce:	dd24      	ble.n	800961a <_strtol_l.isra.0+0xca>
 80095d0:	2e00      	cmp	r6, #0
 80095d2:	db1f      	blt.n	8009614 <_strtol_l.isra.0+0xc4>
 80095d4:	45a9      	cmp	r9, r5
 80095d6:	d31d      	bcc.n	8009614 <_strtol_l.isra.0+0xc4>
 80095d8:	d101      	bne.n	80095de <_strtol_l.isra.0+0x8e>
 80095da:	45a2      	cmp	sl, r4
 80095dc:	db1a      	blt.n	8009614 <_strtol_l.isra.0+0xc4>
 80095de:	fb05 4503 	mla	r5, r5, r3, r4
 80095e2:	2601      	movs	r6, #1
 80095e4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80095e8:	e7eb      	b.n	80095c2 <_strtol_l.isra.0+0x72>
 80095ea:	2c2b      	cmp	r4, #43	; 0x2b
 80095ec:	bf08      	it	eq
 80095ee:	f89e 4000 	ldrbeq.w	r4, [lr]
 80095f2:	46a8      	mov	r8, r5
 80095f4:	bf08      	it	eq
 80095f6:	f106 0e02 	addeq.w	lr, r6, #2
 80095fa:	e7c7      	b.n	800958c <_strtol_l.isra.0+0x3c>
 80095fc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009600:	2f19      	cmp	r7, #25
 8009602:	d801      	bhi.n	8009608 <_strtol_l.isra.0+0xb8>
 8009604:	3c37      	subs	r4, #55	; 0x37
 8009606:	e7e1      	b.n	80095cc <_strtol_l.isra.0+0x7c>
 8009608:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800960c:	2f19      	cmp	r7, #25
 800960e:	d804      	bhi.n	800961a <_strtol_l.isra.0+0xca>
 8009610:	3c57      	subs	r4, #87	; 0x57
 8009612:	e7db      	b.n	80095cc <_strtol_l.isra.0+0x7c>
 8009614:	f04f 36ff 	mov.w	r6, #4294967295
 8009618:	e7e4      	b.n	80095e4 <_strtol_l.isra.0+0x94>
 800961a:	2e00      	cmp	r6, #0
 800961c:	da05      	bge.n	800962a <_strtol_l.isra.0+0xda>
 800961e:	2322      	movs	r3, #34	; 0x22
 8009620:	6003      	str	r3, [r0, #0]
 8009622:	4665      	mov	r5, ip
 8009624:	b942      	cbnz	r2, 8009638 <_strtol_l.isra.0+0xe8>
 8009626:	4628      	mov	r0, r5
 8009628:	e79d      	b.n	8009566 <_strtol_l.isra.0+0x16>
 800962a:	f1b8 0f00 	cmp.w	r8, #0
 800962e:	d000      	beq.n	8009632 <_strtol_l.isra.0+0xe2>
 8009630:	426d      	negs	r5, r5
 8009632:	2a00      	cmp	r2, #0
 8009634:	d0f7      	beq.n	8009626 <_strtol_l.isra.0+0xd6>
 8009636:	b10e      	cbz	r6, 800963c <_strtol_l.isra.0+0xec>
 8009638:	f10e 31ff 	add.w	r1, lr, #4294967295
 800963c:	6011      	str	r1, [r2, #0]
 800963e:	e7f2      	b.n	8009626 <_strtol_l.isra.0+0xd6>
 8009640:	2430      	movs	r4, #48	; 0x30
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1b3      	bne.n	80095ae <_strtol_l.isra.0+0x5e>
 8009646:	2308      	movs	r3, #8
 8009648:	e7b1      	b.n	80095ae <_strtol_l.isra.0+0x5e>
 800964a:	2c30      	cmp	r4, #48	; 0x30
 800964c:	d0a4      	beq.n	8009598 <_strtol_l.isra.0+0x48>
 800964e:	230a      	movs	r3, #10
 8009650:	e7ad      	b.n	80095ae <_strtol_l.isra.0+0x5e>
 8009652:	bf00      	nop
 8009654:	08031fd9 	.word	0x08031fd9

08009658 <_strtol_r>:
 8009658:	f7ff bf7a 	b.w	8009550 <_strtol_l.isra.0>

0800965c <quorem>:
 800965c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009660:	6903      	ldr	r3, [r0, #16]
 8009662:	690c      	ldr	r4, [r1, #16]
 8009664:	42a3      	cmp	r3, r4
 8009666:	4607      	mov	r7, r0
 8009668:	f2c0 8081 	blt.w	800976e <quorem+0x112>
 800966c:	3c01      	subs	r4, #1
 800966e:	f101 0814 	add.w	r8, r1, #20
 8009672:	f100 0514 	add.w	r5, r0, #20
 8009676:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800967a:	9301      	str	r3, [sp, #4]
 800967c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009680:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009684:	3301      	adds	r3, #1
 8009686:	429a      	cmp	r2, r3
 8009688:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800968c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009690:	fbb2 f6f3 	udiv	r6, r2, r3
 8009694:	d331      	bcc.n	80096fa <quorem+0x9e>
 8009696:	f04f 0e00 	mov.w	lr, #0
 800969a:	4640      	mov	r0, r8
 800969c:	46ac      	mov	ip, r5
 800969e:	46f2      	mov	sl, lr
 80096a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80096a4:	b293      	uxth	r3, r2
 80096a6:	fb06 e303 	mla	r3, r6, r3, lr
 80096aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	ebaa 0303 	sub.w	r3, sl, r3
 80096b4:	0c12      	lsrs	r2, r2, #16
 80096b6:	f8dc a000 	ldr.w	sl, [ip]
 80096ba:	fb06 e202 	mla	r2, r6, r2, lr
 80096be:	fa13 f38a 	uxtah	r3, r3, sl
 80096c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80096c6:	fa1f fa82 	uxth.w	sl, r2
 80096ca:	f8dc 2000 	ldr.w	r2, [ip]
 80096ce:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80096d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096dc:	4581      	cmp	r9, r0
 80096de:	f84c 3b04 	str.w	r3, [ip], #4
 80096e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80096e6:	d2db      	bcs.n	80096a0 <quorem+0x44>
 80096e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80096ec:	b92b      	cbnz	r3, 80096fa <quorem+0x9e>
 80096ee:	9b01      	ldr	r3, [sp, #4]
 80096f0:	3b04      	subs	r3, #4
 80096f2:	429d      	cmp	r5, r3
 80096f4:	461a      	mov	r2, r3
 80096f6:	d32e      	bcc.n	8009756 <quorem+0xfa>
 80096f8:	613c      	str	r4, [r7, #16]
 80096fa:	4638      	mov	r0, r7
 80096fc:	f001 fc8c 	bl	800b018 <__mcmp>
 8009700:	2800      	cmp	r0, #0
 8009702:	db24      	blt.n	800974e <quorem+0xf2>
 8009704:	3601      	adds	r6, #1
 8009706:	4628      	mov	r0, r5
 8009708:	f04f 0c00 	mov.w	ip, #0
 800970c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009710:	f8d0 e000 	ldr.w	lr, [r0]
 8009714:	b293      	uxth	r3, r2
 8009716:	ebac 0303 	sub.w	r3, ip, r3
 800971a:	0c12      	lsrs	r2, r2, #16
 800971c:	fa13 f38e 	uxtah	r3, r3, lr
 8009720:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009724:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009728:	b29b      	uxth	r3, r3
 800972a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800972e:	45c1      	cmp	r9, r8
 8009730:	f840 3b04 	str.w	r3, [r0], #4
 8009734:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009738:	d2e8      	bcs.n	800970c <quorem+0xb0>
 800973a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800973e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009742:	b922      	cbnz	r2, 800974e <quorem+0xf2>
 8009744:	3b04      	subs	r3, #4
 8009746:	429d      	cmp	r5, r3
 8009748:	461a      	mov	r2, r3
 800974a:	d30a      	bcc.n	8009762 <quorem+0x106>
 800974c:	613c      	str	r4, [r7, #16]
 800974e:	4630      	mov	r0, r6
 8009750:	b003      	add	sp, #12
 8009752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009756:	6812      	ldr	r2, [r2, #0]
 8009758:	3b04      	subs	r3, #4
 800975a:	2a00      	cmp	r2, #0
 800975c:	d1cc      	bne.n	80096f8 <quorem+0x9c>
 800975e:	3c01      	subs	r4, #1
 8009760:	e7c7      	b.n	80096f2 <quorem+0x96>
 8009762:	6812      	ldr	r2, [r2, #0]
 8009764:	3b04      	subs	r3, #4
 8009766:	2a00      	cmp	r2, #0
 8009768:	d1f0      	bne.n	800974c <quorem+0xf0>
 800976a:	3c01      	subs	r4, #1
 800976c:	e7eb      	b.n	8009746 <quorem+0xea>
 800976e:	2000      	movs	r0, #0
 8009770:	e7ee      	b.n	8009750 <quorem+0xf4>
 8009772:	0000      	movs	r0, r0
 8009774:	0000      	movs	r0, r0
	...

08009778 <_dtoa_r>:
 8009778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800977c:	ed2d 8b02 	vpush	{d8}
 8009780:	ec57 6b10 	vmov	r6, r7, d0
 8009784:	b095      	sub	sp, #84	; 0x54
 8009786:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009788:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800978c:	9105      	str	r1, [sp, #20]
 800978e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009792:	4604      	mov	r4, r0
 8009794:	9209      	str	r2, [sp, #36]	; 0x24
 8009796:	930f      	str	r3, [sp, #60]	; 0x3c
 8009798:	b975      	cbnz	r5, 80097b8 <_dtoa_r+0x40>
 800979a:	2010      	movs	r0, #16
 800979c:	f001 f94c 	bl	800aa38 <malloc>
 80097a0:	4602      	mov	r2, r0
 80097a2:	6260      	str	r0, [r4, #36]	; 0x24
 80097a4:	b920      	cbnz	r0, 80097b0 <_dtoa_r+0x38>
 80097a6:	4bb2      	ldr	r3, [pc, #712]	; (8009a70 <_dtoa_r+0x2f8>)
 80097a8:	21ea      	movs	r1, #234	; 0xea
 80097aa:	48b2      	ldr	r0, [pc, #712]	; (8009a74 <_dtoa_r+0x2fc>)
 80097ac:	f002 f874 	bl	800b898 <__assert_func>
 80097b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80097b4:	6005      	str	r5, [r0, #0]
 80097b6:	60c5      	str	r5, [r0, #12]
 80097b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097ba:	6819      	ldr	r1, [r3, #0]
 80097bc:	b151      	cbz	r1, 80097d4 <_dtoa_r+0x5c>
 80097be:	685a      	ldr	r2, [r3, #4]
 80097c0:	604a      	str	r2, [r1, #4]
 80097c2:	2301      	movs	r3, #1
 80097c4:	4093      	lsls	r3, r2
 80097c6:	608b      	str	r3, [r1, #8]
 80097c8:	4620      	mov	r0, r4
 80097ca:	f001 f99d 	bl	800ab08 <_Bfree>
 80097ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097d0:	2200      	movs	r2, #0
 80097d2:	601a      	str	r2, [r3, #0]
 80097d4:	1e3b      	subs	r3, r7, #0
 80097d6:	bfb9      	ittee	lt
 80097d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80097dc:	9303      	strlt	r3, [sp, #12]
 80097de:	2300      	movge	r3, #0
 80097e0:	f8c8 3000 	strge.w	r3, [r8]
 80097e4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80097e8:	4ba3      	ldr	r3, [pc, #652]	; (8009a78 <_dtoa_r+0x300>)
 80097ea:	bfbc      	itt	lt
 80097ec:	2201      	movlt	r2, #1
 80097ee:	f8c8 2000 	strlt.w	r2, [r8]
 80097f2:	ea33 0309 	bics.w	r3, r3, r9
 80097f6:	d11b      	bne.n	8009830 <_dtoa_r+0xb8>
 80097f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80097fa:	f242 730f 	movw	r3, #9999	; 0x270f
 80097fe:	6013      	str	r3, [r2, #0]
 8009800:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009804:	4333      	orrs	r3, r6
 8009806:	f000 857a 	beq.w	800a2fe <_dtoa_r+0xb86>
 800980a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800980c:	b963      	cbnz	r3, 8009828 <_dtoa_r+0xb0>
 800980e:	4b9b      	ldr	r3, [pc, #620]	; (8009a7c <_dtoa_r+0x304>)
 8009810:	e024      	b.n	800985c <_dtoa_r+0xe4>
 8009812:	4b9b      	ldr	r3, [pc, #620]	; (8009a80 <_dtoa_r+0x308>)
 8009814:	9300      	str	r3, [sp, #0]
 8009816:	3308      	adds	r3, #8
 8009818:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800981a:	6013      	str	r3, [r2, #0]
 800981c:	9800      	ldr	r0, [sp, #0]
 800981e:	b015      	add	sp, #84	; 0x54
 8009820:	ecbd 8b02 	vpop	{d8}
 8009824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009828:	4b94      	ldr	r3, [pc, #592]	; (8009a7c <_dtoa_r+0x304>)
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	3303      	adds	r3, #3
 800982e:	e7f3      	b.n	8009818 <_dtoa_r+0xa0>
 8009830:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009834:	2200      	movs	r2, #0
 8009836:	ec51 0b17 	vmov	r0, r1, d7
 800983a:	2300      	movs	r3, #0
 800983c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009840:	f7f7 f952 	bl	8000ae8 <__aeabi_dcmpeq>
 8009844:	4680      	mov	r8, r0
 8009846:	b158      	cbz	r0, 8009860 <_dtoa_r+0xe8>
 8009848:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800984a:	2301      	movs	r3, #1
 800984c:	6013      	str	r3, [r2, #0]
 800984e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009850:	2b00      	cmp	r3, #0
 8009852:	f000 8551 	beq.w	800a2f8 <_dtoa_r+0xb80>
 8009856:	488b      	ldr	r0, [pc, #556]	; (8009a84 <_dtoa_r+0x30c>)
 8009858:	6018      	str	r0, [r3, #0]
 800985a:	1e43      	subs	r3, r0, #1
 800985c:	9300      	str	r3, [sp, #0]
 800985e:	e7dd      	b.n	800981c <_dtoa_r+0xa4>
 8009860:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009864:	aa12      	add	r2, sp, #72	; 0x48
 8009866:	a913      	add	r1, sp, #76	; 0x4c
 8009868:	4620      	mov	r0, r4
 800986a:	f001 fcf5 	bl	800b258 <__d2b>
 800986e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009872:	4683      	mov	fp, r0
 8009874:	2d00      	cmp	r5, #0
 8009876:	d07c      	beq.n	8009972 <_dtoa_r+0x1fa>
 8009878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800987a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800987e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009882:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009886:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800988a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800988e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009892:	4b7d      	ldr	r3, [pc, #500]	; (8009a88 <_dtoa_r+0x310>)
 8009894:	2200      	movs	r2, #0
 8009896:	4630      	mov	r0, r6
 8009898:	4639      	mov	r1, r7
 800989a:	f7f6 fd05 	bl	80002a8 <__aeabi_dsub>
 800989e:	a36e      	add	r3, pc, #440	; (adr r3, 8009a58 <_dtoa_r+0x2e0>)
 80098a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a4:	f7f6 feb8 	bl	8000618 <__aeabi_dmul>
 80098a8:	a36d      	add	r3, pc, #436	; (adr r3, 8009a60 <_dtoa_r+0x2e8>)
 80098aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ae:	f7f6 fcfd 	bl	80002ac <__adddf3>
 80098b2:	4606      	mov	r6, r0
 80098b4:	4628      	mov	r0, r5
 80098b6:	460f      	mov	r7, r1
 80098b8:	f7f6 fe44 	bl	8000544 <__aeabi_i2d>
 80098bc:	a36a      	add	r3, pc, #424	; (adr r3, 8009a68 <_dtoa_r+0x2f0>)
 80098be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c2:	f7f6 fea9 	bl	8000618 <__aeabi_dmul>
 80098c6:	4602      	mov	r2, r0
 80098c8:	460b      	mov	r3, r1
 80098ca:	4630      	mov	r0, r6
 80098cc:	4639      	mov	r1, r7
 80098ce:	f7f6 fced 	bl	80002ac <__adddf3>
 80098d2:	4606      	mov	r6, r0
 80098d4:	460f      	mov	r7, r1
 80098d6:	f7f7 f94f 	bl	8000b78 <__aeabi_d2iz>
 80098da:	2200      	movs	r2, #0
 80098dc:	4682      	mov	sl, r0
 80098de:	2300      	movs	r3, #0
 80098e0:	4630      	mov	r0, r6
 80098e2:	4639      	mov	r1, r7
 80098e4:	f7f7 f90a 	bl	8000afc <__aeabi_dcmplt>
 80098e8:	b148      	cbz	r0, 80098fe <_dtoa_r+0x186>
 80098ea:	4650      	mov	r0, sl
 80098ec:	f7f6 fe2a 	bl	8000544 <__aeabi_i2d>
 80098f0:	4632      	mov	r2, r6
 80098f2:	463b      	mov	r3, r7
 80098f4:	f7f7 f8f8 	bl	8000ae8 <__aeabi_dcmpeq>
 80098f8:	b908      	cbnz	r0, 80098fe <_dtoa_r+0x186>
 80098fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80098fe:	f1ba 0f16 	cmp.w	sl, #22
 8009902:	d854      	bhi.n	80099ae <_dtoa_r+0x236>
 8009904:	4b61      	ldr	r3, [pc, #388]	; (8009a8c <_dtoa_r+0x314>)
 8009906:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800990a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009912:	f7f7 f8f3 	bl	8000afc <__aeabi_dcmplt>
 8009916:	2800      	cmp	r0, #0
 8009918:	d04b      	beq.n	80099b2 <_dtoa_r+0x23a>
 800991a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800991e:	2300      	movs	r3, #0
 8009920:	930e      	str	r3, [sp, #56]	; 0x38
 8009922:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009924:	1b5d      	subs	r5, r3, r5
 8009926:	1e6b      	subs	r3, r5, #1
 8009928:	9304      	str	r3, [sp, #16]
 800992a:	bf43      	ittte	mi
 800992c:	2300      	movmi	r3, #0
 800992e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009932:	9304      	strmi	r3, [sp, #16]
 8009934:	f04f 0800 	movpl.w	r8, #0
 8009938:	f1ba 0f00 	cmp.w	sl, #0
 800993c:	db3b      	blt.n	80099b6 <_dtoa_r+0x23e>
 800993e:	9b04      	ldr	r3, [sp, #16]
 8009940:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009944:	4453      	add	r3, sl
 8009946:	9304      	str	r3, [sp, #16]
 8009948:	2300      	movs	r3, #0
 800994a:	9306      	str	r3, [sp, #24]
 800994c:	9b05      	ldr	r3, [sp, #20]
 800994e:	2b09      	cmp	r3, #9
 8009950:	d869      	bhi.n	8009a26 <_dtoa_r+0x2ae>
 8009952:	2b05      	cmp	r3, #5
 8009954:	bfc4      	itt	gt
 8009956:	3b04      	subgt	r3, #4
 8009958:	9305      	strgt	r3, [sp, #20]
 800995a:	9b05      	ldr	r3, [sp, #20]
 800995c:	f1a3 0302 	sub.w	r3, r3, #2
 8009960:	bfcc      	ite	gt
 8009962:	2500      	movgt	r5, #0
 8009964:	2501      	movle	r5, #1
 8009966:	2b03      	cmp	r3, #3
 8009968:	d869      	bhi.n	8009a3e <_dtoa_r+0x2c6>
 800996a:	e8df f003 	tbb	[pc, r3]
 800996e:	4e2c      	.short	0x4e2c
 8009970:	5a4c      	.short	0x5a4c
 8009972:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009976:	441d      	add	r5, r3
 8009978:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800997c:	2b20      	cmp	r3, #32
 800997e:	bfc1      	itttt	gt
 8009980:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009984:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009988:	fa09 f303 	lslgt.w	r3, r9, r3
 800998c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009990:	bfda      	itte	le
 8009992:	f1c3 0320 	rsble	r3, r3, #32
 8009996:	fa06 f003 	lslle.w	r0, r6, r3
 800999a:	4318      	orrgt	r0, r3
 800999c:	f7f6 fdc2 	bl	8000524 <__aeabi_ui2d>
 80099a0:	2301      	movs	r3, #1
 80099a2:	4606      	mov	r6, r0
 80099a4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80099a8:	3d01      	subs	r5, #1
 80099aa:	9310      	str	r3, [sp, #64]	; 0x40
 80099ac:	e771      	b.n	8009892 <_dtoa_r+0x11a>
 80099ae:	2301      	movs	r3, #1
 80099b0:	e7b6      	b.n	8009920 <_dtoa_r+0x1a8>
 80099b2:	900e      	str	r0, [sp, #56]	; 0x38
 80099b4:	e7b5      	b.n	8009922 <_dtoa_r+0x1aa>
 80099b6:	f1ca 0300 	rsb	r3, sl, #0
 80099ba:	9306      	str	r3, [sp, #24]
 80099bc:	2300      	movs	r3, #0
 80099be:	eba8 080a 	sub.w	r8, r8, sl
 80099c2:	930d      	str	r3, [sp, #52]	; 0x34
 80099c4:	e7c2      	b.n	800994c <_dtoa_r+0x1d4>
 80099c6:	2300      	movs	r3, #0
 80099c8:	9308      	str	r3, [sp, #32]
 80099ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	dc39      	bgt.n	8009a44 <_dtoa_r+0x2cc>
 80099d0:	f04f 0901 	mov.w	r9, #1
 80099d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80099d8:	464b      	mov	r3, r9
 80099da:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80099de:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80099e0:	2200      	movs	r2, #0
 80099e2:	6042      	str	r2, [r0, #4]
 80099e4:	2204      	movs	r2, #4
 80099e6:	f102 0614 	add.w	r6, r2, #20
 80099ea:	429e      	cmp	r6, r3
 80099ec:	6841      	ldr	r1, [r0, #4]
 80099ee:	d92f      	bls.n	8009a50 <_dtoa_r+0x2d8>
 80099f0:	4620      	mov	r0, r4
 80099f2:	f001 f849 	bl	800aa88 <_Balloc>
 80099f6:	9000      	str	r0, [sp, #0]
 80099f8:	2800      	cmp	r0, #0
 80099fa:	d14b      	bne.n	8009a94 <_dtoa_r+0x31c>
 80099fc:	4b24      	ldr	r3, [pc, #144]	; (8009a90 <_dtoa_r+0x318>)
 80099fe:	4602      	mov	r2, r0
 8009a00:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a04:	e6d1      	b.n	80097aa <_dtoa_r+0x32>
 8009a06:	2301      	movs	r3, #1
 8009a08:	e7de      	b.n	80099c8 <_dtoa_r+0x250>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	9308      	str	r3, [sp, #32]
 8009a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a10:	eb0a 0903 	add.w	r9, sl, r3
 8009a14:	f109 0301 	add.w	r3, r9, #1
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	9301      	str	r3, [sp, #4]
 8009a1c:	bfb8      	it	lt
 8009a1e:	2301      	movlt	r3, #1
 8009a20:	e7dd      	b.n	80099de <_dtoa_r+0x266>
 8009a22:	2301      	movs	r3, #1
 8009a24:	e7f2      	b.n	8009a0c <_dtoa_r+0x294>
 8009a26:	2501      	movs	r5, #1
 8009a28:	2300      	movs	r3, #0
 8009a2a:	9305      	str	r3, [sp, #20]
 8009a2c:	9508      	str	r5, [sp, #32]
 8009a2e:	f04f 39ff 	mov.w	r9, #4294967295
 8009a32:	2200      	movs	r2, #0
 8009a34:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a38:	2312      	movs	r3, #18
 8009a3a:	9209      	str	r2, [sp, #36]	; 0x24
 8009a3c:	e7cf      	b.n	80099de <_dtoa_r+0x266>
 8009a3e:	2301      	movs	r3, #1
 8009a40:	9308      	str	r3, [sp, #32]
 8009a42:	e7f4      	b.n	8009a2e <_dtoa_r+0x2b6>
 8009a44:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009a48:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a4c:	464b      	mov	r3, r9
 8009a4e:	e7c6      	b.n	80099de <_dtoa_r+0x266>
 8009a50:	3101      	adds	r1, #1
 8009a52:	6041      	str	r1, [r0, #4]
 8009a54:	0052      	lsls	r2, r2, #1
 8009a56:	e7c6      	b.n	80099e6 <_dtoa_r+0x26e>
 8009a58:	636f4361 	.word	0x636f4361
 8009a5c:	3fd287a7 	.word	0x3fd287a7
 8009a60:	8b60c8b3 	.word	0x8b60c8b3
 8009a64:	3fc68a28 	.word	0x3fc68a28
 8009a68:	509f79fb 	.word	0x509f79fb
 8009a6c:	3fd34413 	.word	0x3fd34413
 8009a70:	080320e6 	.word	0x080320e6
 8009a74:	080320fd 	.word	0x080320fd
 8009a78:	7ff00000 	.word	0x7ff00000
 8009a7c:	080320e2 	.word	0x080320e2
 8009a80:	080320d9 	.word	0x080320d9
 8009a84:	08031f59 	.word	0x08031f59
 8009a88:	3ff80000 	.word	0x3ff80000
 8009a8c:	08032278 	.word	0x08032278
 8009a90:	0803215c 	.word	0x0803215c
 8009a94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a96:	9a00      	ldr	r2, [sp, #0]
 8009a98:	601a      	str	r2, [r3, #0]
 8009a9a:	9b01      	ldr	r3, [sp, #4]
 8009a9c:	2b0e      	cmp	r3, #14
 8009a9e:	f200 80ad 	bhi.w	8009bfc <_dtoa_r+0x484>
 8009aa2:	2d00      	cmp	r5, #0
 8009aa4:	f000 80aa 	beq.w	8009bfc <_dtoa_r+0x484>
 8009aa8:	f1ba 0f00 	cmp.w	sl, #0
 8009aac:	dd36      	ble.n	8009b1c <_dtoa_r+0x3a4>
 8009aae:	4ac3      	ldr	r2, [pc, #780]	; (8009dbc <_dtoa_r+0x644>)
 8009ab0:	f00a 030f 	and.w	r3, sl, #15
 8009ab4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009ab8:	ed93 7b00 	vldr	d7, [r3]
 8009abc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009ac0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009ac4:	eeb0 8a47 	vmov.f32	s16, s14
 8009ac8:	eef0 8a67 	vmov.f32	s17, s15
 8009acc:	d016      	beq.n	8009afc <_dtoa_r+0x384>
 8009ace:	4bbc      	ldr	r3, [pc, #752]	; (8009dc0 <_dtoa_r+0x648>)
 8009ad0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ad4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ad8:	f7f6 fec8 	bl	800086c <__aeabi_ddiv>
 8009adc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ae0:	f007 070f 	and.w	r7, r7, #15
 8009ae4:	2503      	movs	r5, #3
 8009ae6:	4eb6      	ldr	r6, [pc, #728]	; (8009dc0 <_dtoa_r+0x648>)
 8009ae8:	b957      	cbnz	r7, 8009b00 <_dtoa_r+0x388>
 8009aea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009aee:	ec53 2b18 	vmov	r2, r3, d8
 8009af2:	f7f6 febb 	bl	800086c <__aeabi_ddiv>
 8009af6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009afa:	e029      	b.n	8009b50 <_dtoa_r+0x3d8>
 8009afc:	2502      	movs	r5, #2
 8009afe:	e7f2      	b.n	8009ae6 <_dtoa_r+0x36e>
 8009b00:	07f9      	lsls	r1, r7, #31
 8009b02:	d508      	bpl.n	8009b16 <_dtoa_r+0x39e>
 8009b04:	ec51 0b18 	vmov	r0, r1, d8
 8009b08:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b0c:	f7f6 fd84 	bl	8000618 <__aeabi_dmul>
 8009b10:	ec41 0b18 	vmov	d8, r0, r1
 8009b14:	3501      	adds	r5, #1
 8009b16:	107f      	asrs	r7, r7, #1
 8009b18:	3608      	adds	r6, #8
 8009b1a:	e7e5      	b.n	8009ae8 <_dtoa_r+0x370>
 8009b1c:	f000 80a6 	beq.w	8009c6c <_dtoa_r+0x4f4>
 8009b20:	f1ca 0600 	rsb	r6, sl, #0
 8009b24:	4ba5      	ldr	r3, [pc, #660]	; (8009dbc <_dtoa_r+0x644>)
 8009b26:	4fa6      	ldr	r7, [pc, #664]	; (8009dc0 <_dtoa_r+0x648>)
 8009b28:	f006 020f 	and.w	r2, r6, #15
 8009b2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b34:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b38:	f7f6 fd6e 	bl	8000618 <__aeabi_dmul>
 8009b3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b40:	1136      	asrs	r6, r6, #4
 8009b42:	2300      	movs	r3, #0
 8009b44:	2502      	movs	r5, #2
 8009b46:	2e00      	cmp	r6, #0
 8009b48:	f040 8085 	bne.w	8009c56 <_dtoa_r+0x4de>
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1d2      	bne.n	8009af6 <_dtoa_r+0x37e>
 8009b50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f000 808c 	beq.w	8009c70 <_dtoa_r+0x4f8>
 8009b58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009b5c:	4b99      	ldr	r3, [pc, #612]	; (8009dc4 <_dtoa_r+0x64c>)
 8009b5e:	2200      	movs	r2, #0
 8009b60:	4630      	mov	r0, r6
 8009b62:	4639      	mov	r1, r7
 8009b64:	f7f6 ffca 	bl	8000afc <__aeabi_dcmplt>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	f000 8081 	beq.w	8009c70 <_dtoa_r+0x4f8>
 8009b6e:	9b01      	ldr	r3, [sp, #4]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d07d      	beq.n	8009c70 <_dtoa_r+0x4f8>
 8009b74:	f1b9 0f00 	cmp.w	r9, #0
 8009b78:	dd3c      	ble.n	8009bf4 <_dtoa_r+0x47c>
 8009b7a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009b7e:	9307      	str	r3, [sp, #28]
 8009b80:	2200      	movs	r2, #0
 8009b82:	4b91      	ldr	r3, [pc, #580]	; (8009dc8 <_dtoa_r+0x650>)
 8009b84:	4630      	mov	r0, r6
 8009b86:	4639      	mov	r1, r7
 8009b88:	f7f6 fd46 	bl	8000618 <__aeabi_dmul>
 8009b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b90:	3501      	adds	r5, #1
 8009b92:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009b96:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	f7f6 fcd2 	bl	8000544 <__aeabi_i2d>
 8009ba0:	4632      	mov	r2, r6
 8009ba2:	463b      	mov	r3, r7
 8009ba4:	f7f6 fd38 	bl	8000618 <__aeabi_dmul>
 8009ba8:	4b88      	ldr	r3, [pc, #544]	; (8009dcc <_dtoa_r+0x654>)
 8009baa:	2200      	movs	r2, #0
 8009bac:	f7f6 fb7e 	bl	80002ac <__adddf3>
 8009bb0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009bb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bb8:	9303      	str	r3, [sp, #12]
 8009bba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d15c      	bne.n	8009c7a <_dtoa_r+0x502>
 8009bc0:	4b83      	ldr	r3, [pc, #524]	; (8009dd0 <_dtoa_r+0x658>)
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	4639      	mov	r1, r7
 8009bc8:	f7f6 fb6e 	bl	80002a8 <__aeabi_dsub>
 8009bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bd0:	4606      	mov	r6, r0
 8009bd2:	460f      	mov	r7, r1
 8009bd4:	f7f6 ffb0 	bl	8000b38 <__aeabi_dcmpgt>
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	f040 8296 	bne.w	800a10a <_dtoa_r+0x992>
 8009bde:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009be2:	4630      	mov	r0, r6
 8009be4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009be8:	4639      	mov	r1, r7
 8009bea:	f7f6 ff87 	bl	8000afc <__aeabi_dcmplt>
 8009bee:	2800      	cmp	r0, #0
 8009bf0:	f040 8288 	bne.w	800a104 <_dtoa_r+0x98c>
 8009bf4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009bf8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009bfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f2c0 8158 	blt.w	8009eb4 <_dtoa_r+0x73c>
 8009c04:	f1ba 0f0e 	cmp.w	sl, #14
 8009c08:	f300 8154 	bgt.w	8009eb4 <_dtoa_r+0x73c>
 8009c0c:	4b6b      	ldr	r3, [pc, #428]	; (8009dbc <_dtoa_r+0x644>)
 8009c0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c12:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	f280 80e3 	bge.w	8009de4 <_dtoa_r+0x66c>
 8009c1e:	9b01      	ldr	r3, [sp, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f300 80df 	bgt.w	8009de4 <_dtoa_r+0x66c>
 8009c26:	f040 826d 	bne.w	800a104 <_dtoa_r+0x98c>
 8009c2a:	4b69      	ldr	r3, [pc, #420]	; (8009dd0 <_dtoa_r+0x658>)
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	4640      	mov	r0, r8
 8009c30:	4649      	mov	r1, r9
 8009c32:	f7f6 fcf1 	bl	8000618 <__aeabi_dmul>
 8009c36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c3a:	f7f6 ff73 	bl	8000b24 <__aeabi_dcmpge>
 8009c3e:	9e01      	ldr	r6, [sp, #4]
 8009c40:	4637      	mov	r7, r6
 8009c42:	2800      	cmp	r0, #0
 8009c44:	f040 8243 	bne.w	800a0ce <_dtoa_r+0x956>
 8009c48:	9d00      	ldr	r5, [sp, #0]
 8009c4a:	2331      	movs	r3, #49	; 0x31
 8009c4c:	f805 3b01 	strb.w	r3, [r5], #1
 8009c50:	f10a 0a01 	add.w	sl, sl, #1
 8009c54:	e23f      	b.n	800a0d6 <_dtoa_r+0x95e>
 8009c56:	07f2      	lsls	r2, r6, #31
 8009c58:	d505      	bpl.n	8009c66 <_dtoa_r+0x4ee>
 8009c5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c5e:	f7f6 fcdb 	bl	8000618 <__aeabi_dmul>
 8009c62:	3501      	adds	r5, #1
 8009c64:	2301      	movs	r3, #1
 8009c66:	1076      	asrs	r6, r6, #1
 8009c68:	3708      	adds	r7, #8
 8009c6a:	e76c      	b.n	8009b46 <_dtoa_r+0x3ce>
 8009c6c:	2502      	movs	r5, #2
 8009c6e:	e76f      	b.n	8009b50 <_dtoa_r+0x3d8>
 8009c70:	9b01      	ldr	r3, [sp, #4]
 8009c72:	f8cd a01c 	str.w	sl, [sp, #28]
 8009c76:	930c      	str	r3, [sp, #48]	; 0x30
 8009c78:	e78d      	b.n	8009b96 <_dtoa_r+0x41e>
 8009c7a:	9900      	ldr	r1, [sp, #0]
 8009c7c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009c7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c80:	4b4e      	ldr	r3, [pc, #312]	; (8009dbc <_dtoa_r+0x644>)
 8009c82:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c86:	4401      	add	r1, r0
 8009c88:	9102      	str	r1, [sp, #8]
 8009c8a:	9908      	ldr	r1, [sp, #32]
 8009c8c:	eeb0 8a47 	vmov.f32	s16, s14
 8009c90:	eef0 8a67 	vmov.f32	s17, s15
 8009c94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c98:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c9c:	2900      	cmp	r1, #0
 8009c9e:	d045      	beq.n	8009d2c <_dtoa_r+0x5b4>
 8009ca0:	494c      	ldr	r1, [pc, #304]	; (8009dd4 <_dtoa_r+0x65c>)
 8009ca2:	2000      	movs	r0, #0
 8009ca4:	f7f6 fde2 	bl	800086c <__aeabi_ddiv>
 8009ca8:	ec53 2b18 	vmov	r2, r3, d8
 8009cac:	f7f6 fafc 	bl	80002a8 <__aeabi_dsub>
 8009cb0:	9d00      	ldr	r5, [sp, #0]
 8009cb2:	ec41 0b18 	vmov	d8, r0, r1
 8009cb6:	4639      	mov	r1, r7
 8009cb8:	4630      	mov	r0, r6
 8009cba:	f7f6 ff5d 	bl	8000b78 <__aeabi_d2iz>
 8009cbe:	900c      	str	r0, [sp, #48]	; 0x30
 8009cc0:	f7f6 fc40 	bl	8000544 <__aeabi_i2d>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4630      	mov	r0, r6
 8009cca:	4639      	mov	r1, r7
 8009ccc:	f7f6 faec 	bl	80002a8 <__aeabi_dsub>
 8009cd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cd2:	3330      	adds	r3, #48	; 0x30
 8009cd4:	f805 3b01 	strb.w	r3, [r5], #1
 8009cd8:	ec53 2b18 	vmov	r2, r3, d8
 8009cdc:	4606      	mov	r6, r0
 8009cde:	460f      	mov	r7, r1
 8009ce0:	f7f6 ff0c 	bl	8000afc <__aeabi_dcmplt>
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	d165      	bne.n	8009db4 <_dtoa_r+0x63c>
 8009ce8:	4632      	mov	r2, r6
 8009cea:	463b      	mov	r3, r7
 8009cec:	4935      	ldr	r1, [pc, #212]	; (8009dc4 <_dtoa_r+0x64c>)
 8009cee:	2000      	movs	r0, #0
 8009cf0:	f7f6 fada 	bl	80002a8 <__aeabi_dsub>
 8009cf4:	ec53 2b18 	vmov	r2, r3, d8
 8009cf8:	f7f6 ff00 	bl	8000afc <__aeabi_dcmplt>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	f040 80b9 	bne.w	8009e74 <_dtoa_r+0x6fc>
 8009d02:	9b02      	ldr	r3, [sp, #8]
 8009d04:	429d      	cmp	r5, r3
 8009d06:	f43f af75 	beq.w	8009bf4 <_dtoa_r+0x47c>
 8009d0a:	4b2f      	ldr	r3, [pc, #188]	; (8009dc8 <_dtoa_r+0x650>)
 8009d0c:	ec51 0b18 	vmov	r0, r1, d8
 8009d10:	2200      	movs	r2, #0
 8009d12:	f7f6 fc81 	bl	8000618 <__aeabi_dmul>
 8009d16:	4b2c      	ldr	r3, [pc, #176]	; (8009dc8 <_dtoa_r+0x650>)
 8009d18:	ec41 0b18 	vmov	d8, r0, r1
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	4630      	mov	r0, r6
 8009d20:	4639      	mov	r1, r7
 8009d22:	f7f6 fc79 	bl	8000618 <__aeabi_dmul>
 8009d26:	4606      	mov	r6, r0
 8009d28:	460f      	mov	r7, r1
 8009d2a:	e7c4      	b.n	8009cb6 <_dtoa_r+0x53e>
 8009d2c:	ec51 0b17 	vmov	r0, r1, d7
 8009d30:	f7f6 fc72 	bl	8000618 <__aeabi_dmul>
 8009d34:	9b02      	ldr	r3, [sp, #8]
 8009d36:	9d00      	ldr	r5, [sp, #0]
 8009d38:	930c      	str	r3, [sp, #48]	; 0x30
 8009d3a:	ec41 0b18 	vmov	d8, r0, r1
 8009d3e:	4639      	mov	r1, r7
 8009d40:	4630      	mov	r0, r6
 8009d42:	f7f6 ff19 	bl	8000b78 <__aeabi_d2iz>
 8009d46:	9011      	str	r0, [sp, #68]	; 0x44
 8009d48:	f7f6 fbfc 	bl	8000544 <__aeabi_i2d>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	460b      	mov	r3, r1
 8009d50:	4630      	mov	r0, r6
 8009d52:	4639      	mov	r1, r7
 8009d54:	f7f6 faa8 	bl	80002a8 <__aeabi_dsub>
 8009d58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d5a:	3330      	adds	r3, #48	; 0x30
 8009d5c:	f805 3b01 	strb.w	r3, [r5], #1
 8009d60:	9b02      	ldr	r3, [sp, #8]
 8009d62:	429d      	cmp	r5, r3
 8009d64:	4606      	mov	r6, r0
 8009d66:	460f      	mov	r7, r1
 8009d68:	f04f 0200 	mov.w	r2, #0
 8009d6c:	d134      	bne.n	8009dd8 <_dtoa_r+0x660>
 8009d6e:	4b19      	ldr	r3, [pc, #100]	; (8009dd4 <_dtoa_r+0x65c>)
 8009d70:	ec51 0b18 	vmov	r0, r1, d8
 8009d74:	f7f6 fa9a 	bl	80002ac <__adddf3>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	4639      	mov	r1, r7
 8009d80:	f7f6 feda 	bl	8000b38 <__aeabi_dcmpgt>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	d175      	bne.n	8009e74 <_dtoa_r+0x6fc>
 8009d88:	ec53 2b18 	vmov	r2, r3, d8
 8009d8c:	4911      	ldr	r1, [pc, #68]	; (8009dd4 <_dtoa_r+0x65c>)
 8009d8e:	2000      	movs	r0, #0
 8009d90:	f7f6 fa8a 	bl	80002a8 <__aeabi_dsub>
 8009d94:	4602      	mov	r2, r0
 8009d96:	460b      	mov	r3, r1
 8009d98:	4630      	mov	r0, r6
 8009d9a:	4639      	mov	r1, r7
 8009d9c:	f7f6 feae 	bl	8000afc <__aeabi_dcmplt>
 8009da0:	2800      	cmp	r0, #0
 8009da2:	f43f af27 	beq.w	8009bf4 <_dtoa_r+0x47c>
 8009da6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009da8:	1e6b      	subs	r3, r5, #1
 8009daa:	930c      	str	r3, [sp, #48]	; 0x30
 8009dac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009db0:	2b30      	cmp	r3, #48	; 0x30
 8009db2:	d0f8      	beq.n	8009da6 <_dtoa_r+0x62e>
 8009db4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009db8:	e04a      	b.n	8009e50 <_dtoa_r+0x6d8>
 8009dba:	bf00      	nop
 8009dbc:	08032278 	.word	0x08032278
 8009dc0:	08032250 	.word	0x08032250
 8009dc4:	3ff00000 	.word	0x3ff00000
 8009dc8:	40240000 	.word	0x40240000
 8009dcc:	401c0000 	.word	0x401c0000
 8009dd0:	40140000 	.word	0x40140000
 8009dd4:	3fe00000 	.word	0x3fe00000
 8009dd8:	4baf      	ldr	r3, [pc, #700]	; (800a098 <_dtoa_r+0x920>)
 8009dda:	f7f6 fc1d 	bl	8000618 <__aeabi_dmul>
 8009dde:	4606      	mov	r6, r0
 8009de0:	460f      	mov	r7, r1
 8009de2:	e7ac      	b.n	8009d3e <_dtoa_r+0x5c6>
 8009de4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009de8:	9d00      	ldr	r5, [sp, #0]
 8009dea:	4642      	mov	r2, r8
 8009dec:	464b      	mov	r3, r9
 8009dee:	4630      	mov	r0, r6
 8009df0:	4639      	mov	r1, r7
 8009df2:	f7f6 fd3b 	bl	800086c <__aeabi_ddiv>
 8009df6:	f7f6 febf 	bl	8000b78 <__aeabi_d2iz>
 8009dfa:	9002      	str	r0, [sp, #8]
 8009dfc:	f7f6 fba2 	bl	8000544 <__aeabi_i2d>
 8009e00:	4642      	mov	r2, r8
 8009e02:	464b      	mov	r3, r9
 8009e04:	f7f6 fc08 	bl	8000618 <__aeabi_dmul>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	4639      	mov	r1, r7
 8009e10:	f7f6 fa4a 	bl	80002a8 <__aeabi_dsub>
 8009e14:	9e02      	ldr	r6, [sp, #8]
 8009e16:	9f01      	ldr	r7, [sp, #4]
 8009e18:	3630      	adds	r6, #48	; 0x30
 8009e1a:	f805 6b01 	strb.w	r6, [r5], #1
 8009e1e:	9e00      	ldr	r6, [sp, #0]
 8009e20:	1bae      	subs	r6, r5, r6
 8009e22:	42b7      	cmp	r7, r6
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	d137      	bne.n	8009e9a <_dtoa_r+0x722>
 8009e2a:	f7f6 fa3f 	bl	80002ac <__adddf3>
 8009e2e:	4642      	mov	r2, r8
 8009e30:	464b      	mov	r3, r9
 8009e32:	4606      	mov	r6, r0
 8009e34:	460f      	mov	r7, r1
 8009e36:	f7f6 fe7f 	bl	8000b38 <__aeabi_dcmpgt>
 8009e3a:	b9c8      	cbnz	r0, 8009e70 <_dtoa_r+0x6f8>
 8009e3c:	4642      	mov	r2, r8
 8009e3e:	464b      	mov	r3, r9
 8009e40:	4630      	mov	r0, r6
 8009e42:	4639      	mov	r1, r7
 8009e44:	f7f6 fe50 	bl	8000ae8 <__aeabi_dcmpeq>
 8009e48:	b110      	cbz	r0, 8009e50 <_dtoa_r+0x6d8>
 8009e4a:	9b02      	ldr	r3, [sp, #8]
 8009e4c:	07d9      	lsls	r1, r3, #31
 8009e4e:	d40f      	bmi.n	8009e70 <_dtoa_r+0x6f8>
 8009e50:	4620      	mov	r0, r4
 8009e52:	4659      	mov	r1, fp
 8009e54:	f000 fe58 	bl	800ab08 <_Bfree>
 8009e58:	2300      	movs	r3, #0
 8009e5a:	702b      	strb	r3, [r5, #0]
 8009e5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e5e:	f10a 0001 	add.w	r0, sl, #1
 8009e62:	6018      	str	r0, [r3, #0]
 8009e64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f43f acd8 	beq.w	800981c <_dtoa_r+0xa4>
 8009e6c:	601d      	str	r5, [r3, #0]
 8009e6e:	e4d5      	b.n	800981c <_dtoa_r+0xa4>
 8009e70:	f8cd a01c 	str.w	sl, [sp, #28]
 8009e74:	462b      	mov	r3, r5
 8009e76:	461d      	mov	r5, r3
 8009e78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e7c:	2a39      	cmp	r2, #57	; 0x39
 8009e7e:	d108      	bne.n	8009e92 <_dtoa_r+0x71a>
 8009e80:	9a00      	ldr	r2, [sp, #0]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d1f7      	bne.n	8009e76 <_dtoa_r+0x6fe>
 8009e86:	9a07      	ldr	r2, [sp, #28]
 8009e88:	9900      	ldr	r1, [sp, #0]
 8009e8a:	3201      	adds	r2, #1
 8009e8c:	9207      	str	r2, [sp, #28]
 8009e8e:	2230      	movs	r2, #48	; 0x30
 8009e90:	700a      	strb	r2, [r1, #0]
 8009e92:	781a      	ldrb	r2, [r3, #0]
 8009e94:	3201      	adds	r2, #1
 8009e96:	701a      	strb	r2, [r3, #0]
 8009e98:	e78c      	b.n	8009db4 <_dtoa_r+0x63c>
 8009e9a:	4b7f      	ldr	r3, [pc, #508]	; (800a098 <_dtoa_r+0x920>)
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	f7f6 fbbb 	bl	8000618 <__aeabi_dmul>
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	4606      	mov	r6, r0
 8009ea8:	460f      	mov	r7, r1
 8009eaa:	f7f6 fe1d 	bl	8000ae8 <__aeabi_dcmpeq>
 8009eae:	2800      	cmp	r0, #0
 8009eb0:	d09b      	beq.n	8009dea <_dtoa_r+0x672>
 8009eb2:	e7cd      	b.n	8009e50 <_dtoa_r+0x6d8>
 8009eb4:	9a08      	ldr	r2, [sp, #32]
 8009eb6:	2a00      	cmp	r2, #0
 8009eb8:	f000 80c4 	beq.w	800a044 <_dtoa_r+0x8cc>
 8009ebc:	9a05      	ldr	r2, [sp, #20]
 8009ebe:	2a01      	cmp	r2, #1
 8009ec0:	f300 80a8 	bgt.w	800a014 <_dtoa_r+0x89c>
 8009ec4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ec6:	2a00      	cmp	r2, #0
 8009ec8:	f000 80a0 	beq.w	800a00c <_dtoa_r+0x894>
 8009ecc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009ed0:	9e06      	ldr	r6, [sp, #24]
 8009ed2:	4645      	mov	r5, r8
 8009ed4:	9a04      	ldr	r2, [sp, #16]
 8009ed6:	2101      	movs	r1, #1
 8009ed8:	441a      	add	r2, r3
 8009eda:	4620      	mov	r0, r4
 8009edc:	4498      	add	r8, r3
 8009ede:	9204      	str	r2, [sp, #16]
 8009ee0:	f000 ff18 	bl	800ad14 <__i2b>
 8009ee4:	4607      	mov	r7, r0
 8009ee6:	2d00      	cmp	r5, #0
 8009ee8:	dd0b      	ble.n	8009f02 <_dtoa_r+0x78a>
 8009eea:	9b04      	ldr	r3, [sp, #16]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	dd08      	ble.n	8009f02 <_dtoa_r+0x78a>
 8009ef0:	42ab      	cmp	r3, r5
 8009ef2:	9a04      	ldr	r2, [sp, #16]
 8009ef4:	bfa8      	it	ge
 8009ef6:	462b      	movge	r3, r5
 8009ef8:	eba8 0803 	sub.w	r8, r8, r3
 8009efc:	1aed      	subs	r5, r5, r3
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	9304      	str	r3, [sp, #16]
 8009f02:	9b06      	ldr	r3, [sp, #24]
 8009f04:	b1fb      	cbz	r3, 8009f46 <_dtoa_r+0x7ce>
 8009f06:	9b08      	ldr	r3, [sp, #32]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f000 809f 	beq.w	800a04c <_dtoa_r+0x8d4>
 8009f0e:	2e00      	cmp	r6, #0
 8009f10:	dd11      	ble.n	8009f36 <_dtoa_r+0x7be>
 8009f12:	4639      	mov	r1, r7
 8009f14:	4632      	mov	r2, r6
 8009f16:	4620      	mov	r0, r4
 8009f18:	f000 ffb8 	bl	800ae8c <__pow5mult>
 8009f1c:	465a      	mov	r2, fp
 8009f1e:	4601      	mov	r1, r0
 8009f20:	4607      	mov	r7, r0
 8009f22:	4620      	mov	r0, r4
 8009f24:	f000 ff0c 	bl	800ad40 <__multiply>
 8009f28:	4659      	mov	r1, fp
 8009f2a:	9007      	str	r0, [sp, #28]
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	f000 fdeb 	bl	800ab08 <_Bfree>
 8009f32:	9b07      	ldr	r3, [sp, #28]
 8009f34:	469b      	mov	fp, r3
 8009f36:	9b06      	ldr	r3, [sp, #24]
 8009f38:	1b9a      	subs	r2, r3, r6
 8009f3a:	d004      	beq.n	8009f46 <_dtoa_r+0x7ce>
 8009f3c:	4659      	mov	r1, fp
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f000 ffa4 	bl	800ae8c <__pow5mult>
 8009f44:	4683      	mov	fp, r0
 8009f46:	2101      	movs	r1, #1
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f000 fee3 	bl	800ad14 <__i2b>
 8009f4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	4606      	mov	r6, r0
 8009f54:	dd7c      	ble.n	800a050 <_dtoa_r+0x8d8>
 8009f56:	461a      	mov	r2, r3
 8009f58:	4601      	mov	r1, r0
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f000 ff96 	bl	800ae8c <__pow5mult>
 8009f60:	9b05      	ldr	r3, [sp, #20]
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	4606      	mov	r6, r0
 8009f66:	dd76      	ble.n	800a056 <_dtoa_r+0x8de>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	9306      	str	r3, [sp, #24]
 8009f6c:	6933      	ldr	r3, [r6, #16]
 8009f6e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009f72:	6918      	ldr	r0, [r3, #16]
 8009f74:	f000 fe7e 	bl	800ac74 <__hi0bits>
 8009f78:	f1c0 0020 	rsb	r0, r0, #32
 8009f7c:	9b04      	ldr	r3, [sp, #16]
 8009f7e:	4418      	add	r0, r3
 8009f80:	f010 001f 	ands.w	r0, r0, #31
 8009f84:	f000 8086 	beq.w	800a094 <_dtoa_r+0x91c>
 8009f88:	f1c0 0320 	rsb	r3, r0, #32
 8009f8c:	2b04      	cmp	r3, #4
 8009f8e:	dd7f      	ble.n	800a090 <_dtoa_r+0x918>
 8009f90:	f1c0 001c 	rsb	r0, r0, #28
 8009f94:	9b04      	ldr	r3, [sp, #16]
 8009f96:	4403      	add	r3, r0
 8009f98:	4480      	add	r8, r0
 8009f9a:	4405      	add	r5, r0
 8009f9c:	9304      	str	r3, [sp, #16]
 8009f9e:	f1b8 0f00 	cmp.w	r8, #0
 8009fa2:	dd05      	ble.n	8009fb0 <_dtoa_r+0x838>
 8009fa4:	4659      	mov	r1, fp
 8009fa6:	4642      	mov	r2, r8
 8009fa8:	4620      	mov	r0, r4
 8009faa:	f000 ffc9 	bl	800af40 <__lshift>
 8009fae:	4683      	mov	fp, r0
 8009fb0:	9b04      	ldr	r3, [sp, #16]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	dd05      	ble.n	8009fc2 <_dtoa_r+0x84a>
 8009fb6:	4631      	mov	r1, r6
 8009fb8:	461a      	mov	r2, r3
 8009fba:	4620      	mov	r0, r4
 8009fbc:	f000 ffc0 	bl	800af40 <__lshift>
 8009fc0:	4606      	mov	r6, r0
 8009fc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d069      	beq.n	800a09c <_dtoa_r+0x924>
 8009fc8:	4631      	mov	r1, r6
 8009fca:	4658      	mov	r0, fp
 8009fcc:	f001 f824 	bl	800b018 <__mcmp>
 8009fd0:	2800      	cmp	r0, #0
 8009fd2:	da63      	bge.n	800a09c <_dtoa_r+0x924>
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	4659      	mov	r1, fp
 8009fd8:	220a      	movs	r2, #10
 8009fda:	4620      	mov	r0, r4
 8009fdc:	f000 fdb6 	bl	800ab4c <__multadd>
 8009fe0:	9b08      	ldr	r3, [sp, #32]
 8009fe2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009fe6:	4683      	mov	fp, r0
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f000 818f 	beq.w	800a30c <_dtoa_r+0xb94>
 8009fee:	4639      	mov	r1, r7
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	220a      	movs	r2, #10
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	f000 fda9 	bl	800ab4c <__multadd>
 8009ffa:	f1b9 0f00 	cmp.w	r9, #0
 8009ffe:	4607      	mov	r7, r0
 800a000:	f300 808e 	bgt.w	800a120 <_dtoa_r+0x9a8>
 800a004:	9b05      	ldr	r3, [sp, #20]
 800a006:	2b02      	cmp	r3, #2
 800a008:	dc50      	bgt.n	800a0ac <_dtoa_r+0x934>
 800a00a:	e089      	b.n	800a120 <_dtoa_r+0x9a8>
 800a00c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a00e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a012:	e75d      	b.n	8009ed0 <_dtoa_r+0x758>
 800a014:	9b01      	ldr	r3, [sp, #4]
 800a016:	1e5e      	subs	r6, r3, #1
 800a018:	9b06      	ldr	r3, [sp, #24]
 800a01a:	42b3      	cmp	r3, r6
 800a01c:	bfbf      	itttt	lt
 800a01e:	9b06      	ldrlt	r3, [sp, #24]
 800a020:	9606      	strlt	r6, [sp, #24]
 800a022:	1af2      	sublt	r2, r6, r3
 800a024:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a026:	bfb6      	itet	lt
 800a028:	189b      	addlt	r3, r3, r2
 800a02a:	1b9e      	subge	r6, r3, r6
 800a02c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a02e:	9b01      	ldr	r3, [sp, #4]
 800a030:	bfb8      	it	lt
 800a032:	2600      	movlt	r6, #0
 800a034:	2b00      	cmp	r3, #0
 800a036:	bfb5      	itete	lt
 800a038:	eba8 0503 	sublt.w	r5, r8, r3
 800a03c:	9b01      	ldrge	r3, [sp, #4]
 800a03e:	2300      	movlt	r3, #0
 800a040:	4645      	movge	r5, r8
 800a042:	e747      	b.n	8009ed4 <_dtoa_r+0x75c>
 800a044:	9e06      	ldr	r6, [sp, #24]
 800a046:	9f08      	ldr	r7, [sp, #32]
 800a048:	4645      	mov	r5, r8
 800a04a:	e74c      	b.n	8009ee6 <_dtoa_r+0x76e>
 800a04c:	9a06      	ldr	r2, [sp, #24]
 800a04e:	e775      	b.n	8009f3c <_dtoa_r+0x7c4>
 800a050:	9b05      	ldr	r3, [sp, #20]
 800a052:	2b01      	cmp	r3, #1
 800a054:	dc18      	bgt.n	800a088 <_dtoa_r+0x910>
 800a056:	9b02      	ldr	r3, [sp, #8]
 800a058:	b9b3      	cbnz	r3, 800a088 <_dtoa_r+0x910>
 800a05a:	9b03      	ldr	r3, [sp, #12]
 800a05c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a060:	b9a3      	cbnz	r3, 800a08c <_dtoa_r+0x914>
 800a062:	9b03      	ldr	r3, [sp, #12]
 800a064:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a068:	0d1b      	lsrs	r3, r3, #20
 800a06a:	051b      	lsls	r3, r3, #20
 800a06c:	b12b      	cbz	r3, 800a07a <_dtoa_r+0x902>
 800a06e:	9b04      	ldr	r3, [sp, #16]
 800a070:	3301      	adds	r3, #1
 800a072:	9304      	str	r3, [sp, #16]
 800a074:	f108 0801 	add.w	r8, r8, #1
 800a078:	2301      	movs	r3, #1
 800a07a:	9306      	str	r3, [sp, #24]
 800a07c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f47f af74 	bne.w	8009f6c <_dtoa_r+0x7f4>
 800a084:	2001      	movs	r0, #1
 800a086:	e779      	b.n	8009f7c <_dtoa_r+0x804>
 800a088:	2300      	movs	r3, #0
 800a08a:	e7f6      	b.n	800a07a <_dtoa_r+0x902>
 800a08c:	9b02      	ldr	r3, [sp, #8]
 800a08e:	e7f4      	b.n	800a07a <_dtoa_r+0x902>
 800a090:	d085      	beq.n	8009f9e <_dtoa_r+0x826>
 800a092:	4618      	mov	r0, r3
 800a094:	301c      	adds	r0, #28
 800a096:	e77d      	b.n	8009f94 <_dtoa_r+0x81c>
 800a098:	40240000 	.word	0x40240000
 800a09c:	9b01      	ldr	r3, [sp, #4]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	dc38      	bgt.n	800a114 <_dtoa_r+0x99c>
 800a0a2:	9b05      	ldr	r3, [sp, #20]
 800a0a4:	2b02      	cmp	r3, #2
 800a0a6:	dd35      	ble.n	800a114 <_dtoa_r+0x99c>
 800a0a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a0ac:	f1b9 0f00 	cmp.w	r9, #0
 800a0b0:	d10d      	bne.n	800a0ce <_dtoa_r+0x956>
 800a0b2:	4631      	mov	r1, r6
 800a0b4:	464b      	mov	r3, r9
 800a0b6:	2205      	movs	r2, #5
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f000 fd47 	bl	800ab4c <__multadd>
 800a0be:	4601      	mov	r1, r0
 800a0c0:	4606      	mov	r6, r0
 800a0c2:	4658      	mov	r0, fp
 800a0c4:	f000 ffa8 	bl	800b018 <__mcmp>
 800a0c8:	2800      	cmp	r0, #0
 800a0ca:	f73f adbd 	bgt.w	8009c48 <_dtoa_r+0x4d0>
 800a0ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0d0:	9d00      	ldr	r5, [sp, #0]
 800a0d2:	ea6f 0a03 	mvn.w	sl, r3
 800a0d6:	f04f 0800 	mov.w	r8, #0
 800a0da:	4631      	mov	r1, r6
 800a0dc:	4620      	mov	r0, r4
 800a0de:	f000 fd13 	bl	800ab08 <_Bfree>
 800a0e2:	2f00      	cmp	r7, #0
 800a0e4:	f43f aeb4 	beq.w	8009e50 <_dtoa_r+0x6d8>
 800a0e8:	f1b8 0f00 	cmp.w	r8, #0
 800a0ec:	d005      	beq.n	800a0fa <_dtoa_r+0x982>
 800a0ee:	45b8      	cmp	r8, r7
 800a0f0:	d003      	beq.n	800a0fa <_dtoa_r+0x982>
 800a0f2:	4641      	mov	r1, r8
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	f000 fd07 	bl	800ab08 <_Bfree>
 800a0fa:	4639      	mov	r1, r7
 800a0fc:	4620      	mov	r0, r4
 800a0fe:	f000 fd03 	bl	800ab08 <_Bfree>
 800a102:	e6a5      	b.n	8009e50 <_dtoa_r+0x6d8>
 800a104:	2600      	movs	r6, #0
 800a106:	4637      	mov	r7, r6
 800a108:	e7e1      	b.n	800a0ce <_dtoa_r+0x956>
 800a10a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a10c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a110:	4637      	mov	r7, r6
 800a112:	e599      	b.n	8009c48 <_dtoa_r+0x4d0>
 800a114:	9b08      	ldr	r3, [sp, #32]
 800a116:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f000 80fd 	beq.w	800a31a <_dtoa_r+0xba2>
 800a120:	2d00      	cmp	r5, #0
 800a122:	dd05      	ble.n	800a130 <_dtoa_r+0x9b8>
 800a124:	4639      	mov	r1, r7
 800a126:	462a      	mov	r2, r5
 800a128:	4620      	mov	r0, r4
 800a12a:	f000 ff09 	bl	800af40 <__lshift>
 800a12e:	4607      	mov	r7, r0
 800a130:	9b06      	ldr	r3, [sp, #24]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d05c      	beq.n	800a1f0 <_dtoa_r+0xa78>
 800a136:	6879      	ldr	r1, [r7, #4]
 800a138:	4620      	mov	r0, r4
 800a13a:	f000 fca5 	bl	800aa88 <_Balloc>
 800a13e:	4605      	mov	r5, r0
 800a140:	b928      	cbnz	r0, 800a14e <_dtoa_r+0x9d6>
 800a142:	4b80      	ldr	r3, [pc, #512]	; (800a344 <_dtoa_r+0xbcc>)
 800a144:	4602      	mov	r2, r0
 800a146:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a14a:	f7ff bb2e 	b.w	80097aa <_dtoa_r+0x32>
 800a14e:	693a      	ldr	r2, [r7, #16]
 800a150:	3202      	adds	r2, #2
 800a152:	0092      	lsls	r2, r2, #2
 800a154:	f107 010c 	add.w	r1, r7, #12
 800a158:	300c      	adds	r0, #12
 800a15a:	f000 fc87 	bl	800aa6c <memcpy>
 800a15e:	2201      	movs	r2, #1
 800a160:	4629      	mov	r1, r5
 800a162:	4620      	mov	r0, r4
 800a164:	f000 feec 	bl	800af40 <__lshift>
 800a168:	9b00      	ldr	r3, [sp, #0]
 800a16a:	3301      	adds	r3, #1
 800a16c:	9301      	str	r3, [sp, #4]
 800a16e:	9b00      	ldr	r3, [sp, #0]
 800a170:	444b      	add	r3, r9
 800a172:	9307      	str	r3, [sp, #28]
 800a174:	9b02      	ldr	r3, [sp, #8]
 800a176:	f003 0301 	and.w	r3, r3, #1
 800a17a:	46b8      	mov	r8, r7
 800a17c:	9306      	str	r3, [sp, #24]
 800a17e:	4607      	mov	r7, r0
 800a180:	9b01      	ldr	r3, [sp, #4]
 800a182:	4631      	mov	r1, r6
 800a184:	3b01      	subs	r3, #1
 800a186:	4658      	mov	r0, fp
 800a188:	9302      	str	r3, [sp, #8]
 800a18a:	f7ff fa67 	bl	800965c <quorem>
 800a18e:	4603      	mov	r3, r0
 800a190:	3330      	adds	r3, #48	; 0x30
 800a192:	9004      	str	r0, [sp, #16]
 800a194:	4641      	mov	r1, r8
 800a196:	4658      	mov	r0, fp
 800a198:	9308      	str	r3, [sp, #32]
 800a19a:	f000 ff3d 	bl	800b018 <__mcmp>
 800a19e:	463a      	mov	r2, r7
 800a1a0:	4681      	mov	r9, r0
 800a1a2:	4631      	mov	r1, r6
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f000 ff53 	bl	800b050 <__mdiff>
 800a1aa:	68c2      	ldr	r2, [r0, #12]
 800a1ac:	9b08      	ldr	r3, [sp, #32]
 800a1ae:	4605      	mov	r5, r0
 800a1b0:	bb02      	cbnz	r2, 800a1f4 <_dtoa_r+0xa7c>
 800a1b2:	4601      	mov	r1, r0
 800a1b4:	4658      	mov	r0, fp
 800a1b6:	f000 ff2f 	bl	800b018 <__mcmp>
 800a1ba:	9b08      	ldr	r3, [sp, #32]
 800a1bc:	4602      	mov	r2, r0
 800a1be:	4629      	mov	r1, r5
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a1c6:	f000 fc9f 	bl	800ab08 <_Bfree>
 800a1ca:	9b05      	ldr	r3, [sp, #20]
 800a1cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1ce:	9d01      	ldr	r5, [sp, #4]
 800a1d0:	ea43 0102 	orr.w	r1, r3, r2
 800a1d4:	9b06      	ldr	r3, [sp, #24]
 800a1d6:	430b      	orrs	r3, r1
 800a1d8:	9b08      	ldr	r3, [sp, #32]
 800a1da:	d10d      	bne.n	800a1f8 <_dtoa_r+0xa80>
 800a1dc:	2b39      	cmp	r3, #57	; 0x39
 800a1de:	d029      	beq.n	800a234 <_dtoa_r+0xabc>
 800a1e0:	f1b9 0f00 	cmp.w	r9, #0
 800a1e4:	dd01      	ble.n	800a1ea <_dtoa_r+0xa72>
 800a1e6:	9b04      	ldr	r3, [sp, #16]
 800a1e8:	3331      	adds	r3, #49	; 0x31
 800a1ea:	9a02      	ldr	r2, [sp, #8]
 800a1ec:	7013      	strb	r3, [r2, #0]
 800a1ee:	e774      	b.n	800a0da <_dtoa_r+0x962>
 800a1f0:	4638      	mov	r0, r7
 800a1f2:	e7b9      	b.n	800a168 <_dtoa_r+0x9f0>
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	e7e2      	b.n	800a1be <_dtoa_r+0xa46>
 800a1f8:	f1b9 0f00 	cmp.w	r9, #0
 800a1fc:	db06      	blt.n	800a20c <_dtoa_r+0xa94>
 800a1fe:	9905      	ldr	r1, [sp, #20]
 800a200:	ea41 0909 	orr.w	r9, r1, r9
 800a204:	9906      	ldr	r1, [sp, #24]
 800a206:	ea59 0101 	orrs.w	r1, r9, r1
 800a20a:	d120      	bne.n	800a24e <_dtoa_r+0xad6>
 800a20c:	2a00      	cmp	r2, #0
 800a20e:	ddec      	ble.n	800a1ea <_dtoa_r+0xa72>
 800a210:	4659      	mov	r1, fp
 800a212:	2201      	movs	r2, #1
 800a214:	4620      	mov	r0, r4
 800a216:	9301      	str	r3, [sp, #4]
 800a218:	f000 fe92 	bl	800af40 <__lshift>
 800a21c:	4631      	mov	r1, r6
 800a21e:	4683      	mov	fp, r0
 800a220:	f000 fefa 	bl	800b018 <__mcmp>
 800a224:	2800      	cmp	r0, #0
 800a226:	9b01      	ldr	r3, [sp, #4]
 800a228:	dc02      	bgt.n	800a230 <_dtoa_r+0xab8>
 800a22a:	d1de      	bne.n	800a1ea <_dtoa_r+0xa72>
 800a22c:	07da      	lsls	r2, r3, #31
 800a22e:	d5dc      	bpl.n	800a1ea <_dtoa_r+0xa72>
 800a230:	2b39      	cmp	r3, #57	; 0x39
 800a232:	d1d8      	bne.n	800a1e6 <_dtoa_r+0xa6e>
 800a234:	9a02      	ldr	r2, [sp, #8]
 800a236:	2339      	movs	r3, #57	; 0x39
 800a238:	7013      	strb	r3, [r2, #0]
 800a23a:	462b      	mov	r3, r5
 800a23c:	461d      	mov	r5, r3
 800a23e:	3b01      	subs	r3, #1
 800a240:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a244:	2a39      	cmp	r2, #57	; 0x39
 800a246:	d050      	beq.n	800a2ea <_dtoa_r+0xb72>
 800a248:	3201      	adds	r2, #1
 800a24a:	701a      	strb	r2, [r3, #0]
 800a24c:	e745      	b.n	800a0da <_dtoa_r+0x962>
 800a24e:	2a00      	cmp	r2, #0
 800a250:	dd03      	ble.n	800a25a <_dtoa_r+0xae2>
 800a252:	2b39      	cmp	r3, #57	; 0x39
 800a254:	d0ee      	beq.n	800a234 <_dtoa_r+0xabc>
 800a256:	3301      	adds	r3, #1
 800a258:	e7c7      	b.n	800a1ea <_dtoa_r+0xa72>
 800a25a:	9a01      	ldr	r2, [sp, #4]
 800a25c:	9907      	ldr	r1, [sp, #28]
 800a25e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a262:	428a      	cmp	r2, r1
 800a264:	d02a      	beq.n	800a2bc <_dtoa_r+0xb44>
 800a266:	4659      	mov	r1, fp
 800a268:	2300      	movs	r3, #0
 800a26a:	220a      	movs	r2, #10
 800a26c:	4620      	mov	r0, r4
 800a26e:	f000 fc6d 	bl	800ab4c <__multadd>
 800a272:	45b8      	cmp	r8, r7
 800a274:	4683      	mov	fp, r0
 800a276:	f04f 0300 	mov.w	r3, #0
 800a27a:	f04f 020a 	mov.w	r2, #10
 800a27e:	4641      	mov	r1, r8
 800a280:	4620      	mov	r0, r4
 800a282:	d107      	bne.n	800a294 <_dtoa_r+0xb1c>
 800a284:	f000 fc62 	bl	800ab4c <__multadd>
 800a288:	4680      	mov	r8, r0
 800a28a:	4607      	mov	r7, r0
 800a28c:	9b01      	ldr	r3, [sp, #4]
 800a28e:	3301      	adds	r3, #1
 800a290:	9301      	str	r3, [sp, #4]
 800a292:	e775      	b.n	800a180 <_dtoa_r+0xa08>
 800a294:	f000 fc5a 	bl	800ab4c <__multadd>
 800a298:	4639      	mov	r1, r7
 800a29a:	4680      	mov	r8, r0
 800a29c:	2300      	movs	r3, #0
 800a29e:	220a      	movs	r2, #10
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	f000 fc53 	bl	800ab4c <__multadd>
 800a2a6:	4607      	mov	r7, r0
 800a2a8:	e7f0      	b.n	800a28c <_dtoa_r+0xb14>
 800a2aa:	f1b9 0f00 	cmp.w	r9, #0
 800a2ae:	9a00      	ldr	r2, [sp, #0]
 800a2b0:	bfcc      	ite	gt
 800a2b2:	464d      	movgt	r5, r9
 800a2b4:	2501      	movle	r5, #1
 800a2b6:	4415      	add	r5, r2
 800a2b8:	f04f 0800 	mov.w	r8, #0
 800a2bc:	4659      	mov	r1, fp
 800a2be:	2201      	movs	r2, #1
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	9301      	str	r3, [sp, #4]
 800a2c4:	f000 fe3c 	bl	800af40 <__lshift>
 800a2c8:	4631      	mov	r1, r6
 800a2ca:	4683      	mov	fp, r0
 800a2cc:	f000 fea4 	bl	800b018 <__mcmp>
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	dcb2      	bgt.n	800a23a <_dtoa_r+0xac2>
 800a2d4:	d102      	bne.n	800a2dc <_dtoa_r+0xb64>
 800a2d6:	9b01      	ldr	r3, [sp, #4]
 800a2d8:	07db      	lsls	r3, r3, #31
 800a2da:	d4ae      	bmi.n	800a23a <_dtoa_r+0xac2>
 800a2dc:	462b      	mov	r3, r5
 800a2de:	461d      	mov	r5, r3
 800a2e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2e4:	2a30      	cmp	r2, #48	; 0x30
 800a2e6:	d0fa      	beq.n	800a2de <_dtoa_r+0xb66>
 800a2e8:	e6f7      	b.n	800a0da <_dtoa_r+0x962>
 800a2ea:	9a00      	ldr	r2, [sp, #0]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d1a5      	bne.n	800a23c <_dtoa_r+0xac4>
 800a2f0:	f10a 0a01 	add.w	sl, sl, #1
 800a2f4:	2331      	movs	r3, #49	; 0x31
 800a2f6:	e779      	b.n	800a1ec <_dtoa_r+0xa74>
 800a2f8:	4b13      	ldr	r3, [pc, #76]	; (800a348 <_dtoa_r+0xbd0>)
 800a2fa:	f7ff baaf 	b.w	800985c <_dtoa_r+0xe4>
 800a2fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a300:	2b00      	cmp	r3, #0
 800a302:	f47f aa86 	bne.w	8009812 <_dtoa_r+0x9a>
 800a306:	4b11      	ldr	r3, [pc, #68]	; (800a34c <_dtoa_r+0xbd4>)
 800a308:	f7ff baa8 	b.w	800985c <_dtoa_r+0xe4>
 800a30c:	f1b9 0f00 	cmp.w	r9, #0
 800a310:	dc03      	bgt.n	800a31a <_dtoa_r+0xba2>
 800a312:	9b05      	ldr	r3, [sp, #20]
 800a314:	2b02      	cmp	r3, #2
 800a316:	f73f aec9 	bgt.w	800a0ac <_dtoa_r+0x934>
 800a31a:	9d00      	ldr	r5, [sp, #0]
 800a31c:	4631      	mov	r1, r6
 800a31e:	4658      	mov	r0, fp
 800a320:	f7ff f99c 	bl	800965c <quorem>
 800a324:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a328:	f805 3b01 	strb.w	r3, [r5], #1
 800a32c:	9a00      	ldr	r2, [sp, #0]
 800a32e:	1aaa      	subs	r2, r5, r2
 800a330:	4591      	cmp	r9, r2
 800a332:	ddba      	ble.n	800a2aa <_dtoa_r+0xb32>
 800a334:	4659      	mov	r1, fp
 800a336:	2300      	movs	r3, #0
 800a338:	220a      	movs	r2, #10
 800a33a:	4620      	mov	r0, r4
 800a33c:	f000 fc06 	bl	800ab4c <__multadd>
 800a340:	4683      	mov	fp, r0
 800a342:	e7eb      	b.n	800a31c <_dtoa_r+0xba4>
 800a344:	0803215c 	.word	0x0803215c
 800a348:	08031f58 	.word	0x08031f58
 800a34c:	080320d9 	.word	0x080320d9

0800a350 <rshift>:
 800a350:	6903      	ldr	r3, [r0, #16]
 800a352:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a356:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a35a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a35e:	f100 0414 	add.w	r4, r0, #20
 800a362:	dd45      	ble.n	800a3f0 <rshift+0xa0>
 800a364:	f011 011f 	ands.w	r1, r1, #31
 800a368:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a36c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a370:	d10c      	bne.n	800a38c <rshift+0x3c>
 800a372:	f100 0710 	add.w	r7, r0, #16
 800a376:	4629      	mov	r1, r5
 800a378:	42b1      	cmp	r1, r6
 800a37a:	d334      	bcc.n	800a3e6 <rshift+0x96>
 800a37c:	1a9b      	subs	r3, r3, r2
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	1eea      	subs	r2, r5, #3
 800a382:	4296      	cmp	r6, r2
 800a384:	bf38      	it	cc
 800a386:	2300      	movcc	r3, #0
 800a388:	4423      	add	r3, r4
 800a38a:	e015      	b.n	800a3b8 <rshift+0x68>
 800a38c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a390:	f1c1 0820 	rsb	r8, r1, #32
 800a394:	40cf      	lsrs	r7, r1
 800a396:	f105 0e04 	add.w	lr, r5, #4
 800a39a:	46a1      	mov	r9, r4
 800a39c:	4576      	cmp	r6, lr
 800a39e:	46f4      	mov	ip, lr
 800a3a0:	d815      	bhi.n	800a3ce <rshift+0x7e>
 800a3a2:	1a9b      	subs	r3, r3, r2
 800a3a4:	009a      	lsls	r2, r3, #2
 800a3a6:	3a04      	subs	r2, #4
 800a3a8:	3501      	adds	r5, #1
 800a3aa:	42ae      	cmp	r6, r5
 800a3ac:	bf38      	it	cc
 800a3ae:	2200      	movcc	r2, #0
 800a3b0:	18a3      	adds	r3, r4, r2
 800a3b2:	50a7      	str	r7, [r4, r2]
 800a3b4:	b107      	cbz	r7, 800a3b8 <rshift+0x68>
 800a3b6:	3304      	adds	r3, #4
 800a3b8:	1b1a      	subs	r2, r3, r4
 800a3ba:	42a3      	cmp	r3, r4
 800a3bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a3c0:	bf08      	it	eq
 800a3c2:	2300      	moveq	r3, #0
 800a3c4:	6102      	str	r2, [r0, #16]
 800a3c6:	bf08      	it	eq
 800a3c8:	6143      	streq	r3, [r0, #20]
 800a3ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3ce:	f8dc c000 	ldr.w	ip, [ip]
 800a3d2:	fa0c fc08 	lsl.w	ip, ip, r8
 800a3d6:	ea4c 0707 	orr.w	r7, ip, r7
 800a3da:	f849 7b04 	str.w	r7, [r9], #4
 800a3de:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a3e2:	40cf      	lsrs	r7, r1
 800a3e4:	e7da      	b.n	800a39c <rshift+0x4c>
 800a3e6:	f851 cb04 	ldr.w	ip, [r1], #4
 800a3ea:	f847 cf04 	str.w	ip, [r7, #4]!
 800a3ee:	e7c3      	b.n	800a378 <rshift+0x28>
 800a3f0:	4623      	mov	r3, r4
 800a3f2:	e7e1      	b.n	800a3b8 <rshift+0x68>

0800a3f4 <__hexdig_fun>:
 800a3f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a3f8:	2b09      	cmp	r3, #9
 800a3fa:	d802      	bhi.n	800a402 <__hexdig_fun+0xe>
 800a3fc:	3820      	subs	r0, #32
 800a3fe:	b2c0      	uxtb	r0, r0
 800a400:	4770      	bx	lr
 800a402:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a406:	2b05      	cmp	r3, #5
 800a408:	d801      	bhi.n	800a40e <__hexdig_fun+0x1a>
 800a40a:	3847      	subs	r0, #71	; 0x47
 800a40c:	e7f7      	b.n	800a3fe <__hexdig_fun+0xa>
 800a40e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a412:	2b05      	cmp	r3, #5
 800a414:	d801      	bhi.n	800a41a <__hexdig_fun+0x26>
 800a416:	3827      	subs	r0, #39	; 0x27
 800a418:	e7f1      	b.n	800a3fe <__hexdig_fun+0xa>
 800a41a:	2000      	movs	r0, #0
 800a41c:	4770      	bx	lr
	...

0800a420 <__gethex>:
 800a420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a424:	ed2d 8b02 	vpush	{d8}
 800a428:	b089      	sub	sp, #36	; 0x24
 800a42a:	ee08 0a10 	vmov	s16, r0
 800a42e:	9304      	str	r3, [sp, #16]
 800a430:	4bbc      	ldr	r3, [pc, #752]	; (800a724 <__gethex+0x304>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	9301      	str	r3, [sp, #4]
 800a436:	4618      	mov	r0, r3
 800a438:	468b      	mov	fp, r1
 800a43a:	4690      	mov	r8, r2
 800a43c:	f7f5 fed8 	bl	80001f0 <strlen>
 800a440:	9b01      	ldr	r3, [sp, #4]
 800a442:	f8db 2000 	ldr.w	r2, [fp]
 800a446:	4403      	add	r3, r0
 800a448:	4682      	mov	sl, r0
 800a44a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a44e:	9305      	str	r3, [sp, #20]
 800a450:	1c93      	adds	r3, r2, #2
 800a452:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a456:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a45a:	32fe      	adds	r2, #254	; 0xfe
 800a45c:	18d1      	adds	r1, r2, r3
 800a45e:	461f      	mov	r7, r3
 800a460:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a464:	9100      	str	r1, [sp, #0]
 800a466:	2830      	cmp	r0, #48	; 0x30
 800a468:	d0f8      	beq.n	800a45c <__gethex+0x3c>
 800a46a:	f7ff ffc3 	bl	800a3f4 <__hexdig_fun>
 800a46e:	4604      	mov	r4, r0
 800a470:	2800      	cmp	r0, #0
 800a472:	d13a      	bne.n	800a4ea <__gethex+0xca>
 800a474:	9901      	ldr	r1, [sp, #4]
 800a476:	4652      	mov	r2, sl
 800a478:	4638      	mov	r0, r7
 800a47a:	f001 f9ed 	bl	800b858 <strncmp>
 800a47e:	4605      	mov	r5, r0
 800a480:	2800      	cmp	r0, #0
 800a482:	d168      	bne.n	800a556 <__gethex+0x136>
 800a484:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a488:	eb07 060a 	add.w	r6, r7, sl
 800a48c:	f7ff ffb2 	bl	800a3f4 <__hexdig_fun>
 800a490:	2800      	cmp	r0, #0
 800a492:	d062      	beq.n	800a55a <__gethex+0x13a>
 800a494:	4633      	mov	r3, r6
 800a496:	7818      	ldrb	r0, [r3, #0]
 800a498:	2830      	cmp	r0, #48	; 0x30
 800a49a:	461f      	mov	r7, r3
 800a49c:	f103 0301 	add.w	r3, r3, #1
 800a4a0:	d0f9      	beq.n	800a496 <__gethex+0x76>
 800a4a2:	f7ff ffa7 	bl	800a3f4 <__hexdig_fun>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	fab0 f480 	clz	r4, r0
 800a4ac:	0964      	lsrs	r4, r4, #5
 800a4ae:	4635      	mov	r5, r6
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	463a      	mov	r2, r7
 800a4b4:	4616      	mov	r6, r2
 800a4b6:	3201      	adds	r2, #1
 800a4b8:	7830      	ldrb	r0, [r6, #0]
 800a4ba:	f7ff ff9b 	bl	800a3f4 <__hexdig_fun>
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d1f8      	bne.n	800a4b4 <__gethex+0x94>
 800a4c2:	9901      	ldr	r1, [sp, #4]
 800a4c4:	4652      	mov	r2, sl
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	f001 f9c6 	bl	800b858 <strncmp>
 800a4cc:	b980      	cbnz	r0, 800a4f0 <__gethex+0xd0>
 800a4ce:	b94d      	cbnz	r5, 800a4e4 <__gethex+0xc4>
 800a4d0:	eb06 050a 	add.w	r5, r6, sl
 800a4d4:	462a      	mov	r2, r5
 800a4d6:	4616      	mov	r6, r2
 800a4d8:	3201      	adds	r2, #1
 800a4da:	7830      	ldrb	r0, [r6, #0]
 800a4dc:	f7ff ff8a 	bl	800a3f4 <__hexdig_fun>
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	d1f8      	bne.n	800a4d6 <__gethex+0xb6>
 800a4e4:	1bad      	subs	r5, r5, r6
 800a4e6:	00ad      	lsls	r5, r5, #2
 800a4e8:	e004      	b.n	800a4f4 <__gethex+0xd4>
 800a4ea:	2400      	movs	r4, #0
 800a4ec:	4625      	mov	r5, r4
 800a4ee:	e7e0      	b.n	800a4b2 <__gethex+0x92>
 800a4f0:	2d00      	cmp	r5, #0
 800a4f2:	d1f7      	bne.n	800a4e4 <__gethex+0xc4>
 800a4f4:	7833      	ldrb	r3, [r6, #0]
 800a4f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a4fa:	2b50      	cmp	r3, #80	; 0x50
 800a4fc:	d13b      	bne.n	800a576 <__gethex+0x156>
 800a4fe:	7873      	ldrb	r3, [r6, #1]
 800a500:	2b2b      	cmp	r3, #43	; 0x2b
 800a502:	d02c      	beq.n	800a55e <__gethex+0x13e>
 800a504:	2b2d      	cmp	r3, #45	; 0x2d
 800a506:	d02e      	beq.n	800a566 <__gethex+0x146>
 800a508:	1c71      	adds	r1, r6, #1
 800a50a:	f04f 0900 	mov.w	r9, #0
 800a50e:	7808      	ldrb	r0, [r1, #0]
 800a510:	f7ff ff70 	bl	800a3f4 <__hexdig_fun>
 800a514:	1e43      	subs	r3, r0, #1
 800a516:	b2db      	uxtb	r3, r3
 800a518:	2b18      	cmp	r3, #24
 800a51a:	d82c      	bhi.n	800a576 <__gethex+0x156>
 800a51c:	f1a0 0210 	sub.w	r2, r0, #16
 800a520:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a524:	f7ff ff66 	bl	800a3f4 <__hexdig_fun>
 800a528:	1e43      	subs	r3, r0, #1
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	2b18      	cmp	r3, #24
 800a52e:	d91d      	bls.n	800a56c <__gethex+0x14c>
 800a530:	f1b9 0f00 	cmp.w	r9, #0
 800a534:	d000      	beq.n	800a538 <__gethex+0x118>
 800a536:	4252      	negs	r2, r2
 800a538:	4415      	add	r5, r2
 800a53a:	f8cb 1000 	str.w	r1, [fp]
 800a53e:	b1e4      	cbz	r4, 800a57a <__gethex+0x15a>
 800a540:	9b00      	ldr	r3, [sp, #0]
 800a542:	2b00      	cmp	r3, #0
 800a544:	bf14      	ite	ne
 800a546:	2700      	movne	r7, #0
 800a548:	2706      	moveq	r7, #6
 800a54a:	4638      	mov	r0, r7
 800a54c:	b009      	add	sp, #36	; 0x24
 800a54e:	ecbd 8b02 	vpop	{d8}
 800a552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a556:	463e      	mov	r6, r7
 800a558:	4625      	mov	r5, r4
 800a55a:	2401      	movs	r4, #1
 800a55c:	e7ca      	b.n	800a4f4 <__gethex+0xd4>
 800a55e:	f04f 0900 	mov.w	r9, #0
 800a562:	1cb1      	adds	r1, r6, #2
 800a564:	e7d3      	b.n	800a50e <__gethex+0xee>
 800a566:	f04f 0901 	mov.w	r9, #1
 800a56a:	e7fa      	b.n	800a562 <__gethex+0x142>
 800a56c:	230a      	movs	r3, #10
 800a56e:	fb03 0202 	mla	r2, r3, r2, r0
 800a572:	3a10      	subs	r2, #16
 800a574:	e7d4      	b.n	800a520 <__gethex+0x100>
 800a576:	4631      	mov	r1, r6
 800a578:	e7df      	b.n	800a53a <__gethex+0x11a>
 800a57a:	1bf3      	subs	r3, r6, r7
 800a57c:	3b01      	subs	r3, #1
 800a57e:	4621      	mov	r1, r4
 800a580:	2b07      	cmp	r3, #7
 800a582:	dc0b      	bgt.n	800a59c <__gethex+0x17c>
 800a584:	ee18 0a10 	vmov	r0, s16
 800a588:	f000 fa7e 	bl	800aa88 <_Balloc>
 800a58c:	4604      	mov	r4, r0
 800a58e:	b940      	cbnz	r0, 800a5a2 <__gethex+0x182>
 800a590:	4b65      	ldr	r3, [pc, #404]	; (800a728 <__gethex+0x308>)
 800a592:	4602      	mov	r2, r0
 800a594:	21de      	movs	r1, #222	; 0xde
 800a596:	4865      	ldr	r0, [pc, #404]	; (800a72c <__gethex+0x30c>)
 800a598:	f001 f97e 	bl	800b898 <__assert_func>
 800a59c:	3101      	adds	r1, #1
 800a59e:	105b      	asrs	r3, r3, #1
 800a5a0:	e7ee      	b.n	800a580 <__gethex+0x160>
 800a5a2:	f100 0914 	add.w	r9, r0, #20
 800a5a6:	f04f 0b00 	mov.w	fp, #0
 800a5aa:	f1ca 0301 	rsb	r3, sl, #1
 800a5ae:	f8cd 9008 	str.w	r9, [sp, #8]
 800a5b2:	f8cd b000 	str.w	fp, [sp]
 800a5b6:	9306      	str	r3, [sp, #24]
 800a5b8:	42b7      	cmp	r7, r6
 800a5ba:	d340      	bcc.n	800a63e <__gethex+0x21e>
 800a5bc:	9802      	ldr	r0, [sp, #8]
 800a5be:	9b00      	ldr	r3, [sp, #0]
 800a5c0:	f840 3b04 	str.w	r3, [r0], #4
 800a5c4:	eba0 0009 	sub.w	r0, r0, r9
 800a5c8:	1080      	asrs	r0, r0, #2
 800a5ca:	0146      	lsls	r6, r0, #5
 800a5cc:	6120      	str	r0, [r4, #16]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f000 fb50 	bl	800ac74 <__hi0bits>
 800a5d4:	1a30      	subs	r0, r6, r0
 800a5d6:	f8d8 6000 	ldr.w	r6, [r8]
 800a5da:	42b0      	cmp	r0, r6
 800a5dc:	dd63      	ble.n	800a6a6 <__gethex+0x286>
 800a5de:	1b87      	subs	r7, r0, r6
 800a5e0:	4639      	mov	r1, r7
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	f000 feea 	bl	800b3bc <__any_on>
 800a5e8:	4682      	mov	sl, r0
 800a5ea:	b1a8      	cbz	r0, 800a618 <__gethex+0x1f8>
 800a5ec:	1e7b      	subs	r3, r7, #1
 800a5ee:	1159      	asrs	r1, r3, #5
 800a5f0:	f003 021f 	and.w	r2, r3, #31
 800a5f4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a5f8:	f04f 0a01 	mov.w	sl, #1
 800a5fc:	fa0a f202 	lsl.w	r2, sl, r2
 800a600:	420a      	tst	r2, r1
 800a602:	d009      	beq.n	800a618 <__gethex+0x1f8>
 800a604:	4553      	cmp	r3, sl
 800a606:	dd05      	ble.n	800a614 <__gethex+0x1f4>
 800a608:	1eb9      	subs	r1, r7, #2
 800a60a:	4620      	mov	r0, r4
 800a60c:	f000 fed6 	bl	800b3bc <__any_on>
 800a610:	2800      	cmp	r0, #0
 800a612:	d145      	bne.n	800a6a0 <__gethex+0x280>
 800a614:	f04f 0a02 	mov.w	sl, #2
 800a618:	4639      	mov	r1, r7
 800a61a:	4620      	mov	r0, r4
 800a61c:	f7ff fe98 	bl	800a350 <rshift>
 800a620:	443d      	add	r5, r7
 800a622:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a626:	42ab      	cmp	r3, r5
 800a628:	da4c      	bge.n	800a6c4 <__gethex+0x2a4>
 800a62a:	ee18 0a10 	vmov	r0, s16
 800a62e:	4621      	mov	r1, r4
 800a630:	f000 fa6a 	bl	800ab08 <_Bfree>
 800a634:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a636:	2300      	movs	r3, #0
 800a638:	6013      	str	r3, [r2, #0]
 800a63a:	27a3      	movs	r7, #163	; 0xa3
 800a63c:	e785      	b.n	800a54a <__gethex+0x12a>
 800a63e:	1e73      	subs	r3, r6, #1
 800a640:	9a05      	ldr	r2, [sp, #20]
 800a642:	9303      	str	r3, [sp, #12]
 800a644:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a648:	4293      	cmp	r3, r2
 800a64a:	d019      	beq.n	800a680 <__gethex+0x260>
 800a64c:	f1bb 0f20 	cmp.w	fp, #32
 800a650:	d107      	bne.n	800a662 <__gethex+0x242>
 800a652:	9b02      	ldr	r3, [sp, #8]
 800a654:	9a00      	ldr	r2, [sp, #0]
 800a656:	f843 2b04 	str.w	r2, [r3], #4
 800a65a:	9302      	str	r3, [sp, #8]
 800a65c:	2300      	movs	r3, #0
 800a65e:	9300      	str	r3, [sp, #0]
 800a660:	469b      	mov	fp, r3
 800a662:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a666:	f7ff fec5 	bl	800a3f4 <__hexdig_fun>
 800a66a:	9b00      	ldr	r3, [sp, #0]
 800a66c:	f000 000f 	and.w	r0, r0, #15
 800a670:	fa00 f00b 	lsl.w	r0, r0, fp
 800a674:	4303      	orrs	r3, r0
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	f10b 0b04 	add.w	fp, fp, #4
 800a67c:	9b03      	ldr	r3, [sp, #12]
 800a67e:	e00d      	b.n	800a69c <__gethex+0x27c>
 800a680:	9b03      	ldr	r3, [sp, #12]
 800a682:	9a06      	ldr	r2, [sp, #24]
 800a684:	4413      	add	r3, r2
 800a686:	42bb      	cmp	r3, r7
 800a688:	d3e0      	bcc.n	800a64c <__gethex+0x22c>
 800a68a:	4618      	mov	r0, r3
 800a68c:	9901      	ldr	r1, [sp, #4]
 800a68e:	9307      	str	r3, [sp, #28]
 800a690:	4652      	mov	r2, sl
 800a692:	f001 f8e1 	bl	800b858 <strncmp>
 800a696:	9b07      	ldr	r3, [sp, #28]
 800a698:	2800      	cmp	r0, #0
 800a69a:	d1d7      	bne.n	800a64c <__gethex+0x22c>
 800a69c:	461e      	mov	r6, r3
 800a69e:	e78b      	b.n	800a5b8 <__gethex+0x198>
 800a6a0:	f04f 0a03 	mov.w	sl, #3
 800a6a4:	e7b8      	b.n	800a618 <__gethex+0x1f8>
 800a6a6:	da0a      	bge.n	800a6be <__gethex+0x29e>
 800a6a8:	1a37      	subs	r7, r6, r0
 800a6aa:	4621      	mov	r1, r4
 800a6ac:	ee18 0a10 	vmov	r0, s16
 800a6b0:	463a      	mov	r2, r7
 800a6b2:	f000 fc45 	bl	800af40 <__lshift>
 800a6b6:	1bed      	subs	r5, r5, r7
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	f100 0914 	add.w	r9, r0, #20
 800a6be:	f04f 0a00 	mov.w	sl, #0
 800a6c2:	e7ae      	b.n	800a622 <__gethex+0x202>
 800a6c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a6c8:	42a8      	cmp	r0, r5
 800a6ca:	dd72      	ble.n	800a7b2 <__gethex+0x392>
 800a6cc:	1b45      	subs	r5, r0, r5
 800a6ce:	42ae      	cmp	r6, r5
 800a6d0:	dc36      	bgt.n	800a740 <__gethex+0x320>
 800a6d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	d02a      	beq.n	800a730 <__gethex+0x310>
 800a6da:	2b03      	cmp	r3, #3
 800a6dc:	d02c      	beq.n	800a738 <__gethex+0x318>
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d115      	bne.n	800a70e <__gethex+0x2ee>
 800a6e2:	42ae      	cmp	r6, r5
 800a6e4:	d113      	bne.n	800a70e <__gethex+0x2ee>
 800a6e6:	2e01      	cmp	r6, #1
 800a6e8:	d10b      	bne.n	800a702 <__gethex+0x2e2>
 800a6ea:	9a04      	ldr	r2, [sp, #16]
 800a6ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a6f0:	6013      	str	r3, [r2, #0]
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	6123      	str	r3, [r4, #16]
 800a6f6:	f8c9 3000 	str.w	r3, [r9]
 800a6fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a6fc:	2762      	movs	r7, #98	; 0x62
 800a6fe:	601c      	str	r4, [r3, #0]
 800a700:	e723      	b.n	800a54a <__gethex+0x12a>
 800a702:	1e71      	subs	r1, r6, #1
 800a704:	4620      	mov	r0, r4
 800a706:	f000 fe59 	bl	800b3bc <__any_on>
 800a70a:	2800      	cmp	r0, #0
 800a70c:	d1ed      	bne.n	800a6ea <__gethex+0x2ca>
 800a70e:	ee18 0a10 	vmov	r0, s16
 800a712:	4621      	mov	r1, r4
 800a714:	f000 f9f8 	bl	800ab08 <_Bfree>
 800a718:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a71a:	2300      	movs	r3, #0
 800a71c:	6013      	str	r3, [r2, #0]
 800a71e:	2750      	movs	r7, #80	; 0x50
 800a720:	e713      	b.n	800a54a <__gethex+0x12a>
 800a722:	bf00      	nop
 800a724:	080321d8 	.word	0x080321d8
 800a728:	0803215c 	.word	0x0803215c
 800a72c:	0803216d 	.word	0x0803216d
 800a730:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a732:	2b00      	cmp	r3, #0
 800a734:	d1eb      	bne.n	800a70e <__gethex+0x2ee>
 800a736:	e7d8      	b.n	800a6ea <__gethex+0x2ca>
 800a738:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d1d5      	bne.n	800a6ea <__gethex+0x2ca>
 800a73e:	e7e6      	b.n	800a70e <__gethex+0x2ee>
 800a740:	1e6f      	subs	r7, r5, #1
 800a742:	f1ba 0f00 	cmp.w	sl, #0
 800a746:	d131      	bne.n	800a7ac <__gethex+0x38c>
 800a748:	b127      	cbz	r7, 800a754 <__gethex+0x334>
 800a74a:	4639      	mov	r1, r7
 800a74c:	4620      	mov	r0, r4
 800a74e:	f000 fe35 	bl	800b3bc <__any_on>
 800a752:	4682      	mov	sl, r0
 800a754:	117b      	asrs	r3, r7, #5
 800a756:	2101      	movs	r1, #1
 800a758:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a75c:	f007 071f 	and.w	r7, r7, #31
 800a760:	fa01 f707 	lsl.w	r7, r1, r7
 800a764:	421f      	tst	r7, r3
 800a766:	4629      	mov	r1, r5
 800a768:	4620      	mov	r0, r4
 800a76a:	bf18      	it	ne
 800a76c:	f04a 0a02 	orrne.w	sl, sl, #2
 800a770:	1b76      	subs	r6, r6, r5
 800a772:	f7ff fded 	bl	800a350 <rshift>
 800a776:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a77a:	2702      	movs	r7, #2
 800a77c:	f1ba 0f00 	cmp.w	sl, #0
 800a780:	d048      	beq.n	800a814 <__gethex+0x3f4>
 800a782:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a786:	2b02      	cmp	r3, #2
 800a788:	d015      	beq.n	800a7b6 <__gethex+0x396>
 800a78a:	2b03      	cmp	r3, #3
 800a78c:	d017      	beq.n	800a7be <__gethex+0x39e>
 800a78e:	2b01      	cmp	r3, #1
 800a790:	d109      	bne.n	800a7a6 <__gethex+0x386>
 800a792:	f01a 0f02 	tst.w	sl, #2
 800a796:	d006      	beq.n	800a7a6 <__gethex+0x386>
 800a798:	f8d9 0000 	ldr.w	r0, [r9]
 800a79c:	ea4a 0a00 	orr.w	sl, sl, r0
 800a7a0:	f01a 0f01 	tst.w	sl, #1
 800a7a4:	d10e      	bne.n	800a7c4 <__gethex+0x3a4>
 800a7a6:	f047 0710 	orr.w	r7, r7, #16
 800a7aa:	e033      	b.n	800a814 <__gethex+0x3f4>
 800a7ac:	f04f 0a01 	mov.w	sl, #1
 800a7b0:	e7d0      	b.n	800a754 <__gethex+0x334>
 800a7b2:	2701      	movs	r7, #1
 800a7b4:	e7e2      	b.n	800a77c <__gethex+0x35c>
 800a7b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7b8:	f1c3 0301 	rsb	r3, r3, #1
 800a7bc:	9315      	str	r3, [sp, #84]	; 0x54
 800a7be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d0f0      	beq.n	800a7a6 <__gethex+0x386>
 800a7c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a7c8:	f104 0314 	add.w	r3, r4, #20
 800a7cc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a7d0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a7d4:	f04f 0c00 	mov.w	ip, #0
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7de:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a7e2:	d01c      	beq.n	800a81e <__gethex+0x3fe>
 800a7e4:	3201      	adds	r2, #1
 800a7e6:	6002      	str	r2, [r0, #0]
 800a7e8:	2f02      	cmp	r7, #2
 800a7ea:	f104 0314 	add.w	r3, r4, #20
 800a7ee:	d13f      	bne.n	800a870 <__gethex+0x450>
 800a7f0:	f8d8 2000 	ldr.w	r2, [r8]
 800a7f4:	3a01      	subs	r2, #1
 800a7f6:	42b2      	cmp	r2, r6
 800a7f8:	d10a      	bne.n	800a810 <__gethex+0x3f0>
 800a7fa:	1171      	asrs	r1, r6, #5
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a802:	f006 061f 	and.w	r6, r6, #31
 800a806:	fa02 f606 	lsl.w	r6, r2, r6
 800a80a:	421e      	tst	r6, r3
 800a80c:	bf18      	it	ne
 800a80e:	4617      	movne	r7, r2
 800a810:	f047 0720 	orr.w	r7, r7, #32
 800a814:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a816:	601c      	str	r4, [r3, #0]
 800a818:	9b04      	ldr	r3, [sp, #16]
 800a81a:	601d      	str	r5, [r3, #0]
 800a81c:	e695      	b.n	800a54a <__gethex+0x12a>
 800a81e:	4299      	cmp	r1, r3
 800a820:	f843 cc04 	str.w	ip, [r3, #-4]
 800a824:	d8d8      	bhi.n	800a7d8 <__gethex+0x3b8>
 800a826:	68a3      	ldr	r3, [r4, #8]
 800a828:	459b      	cmp	fp, r3
 800a82a:	db19      	blt.n	800a860 <__gethex+0x440>
 800a82c:	6861      	ldr	r1, [r4, #4]
 800a82e:	ee18 0a10 	vmov	r0, s16
 800a832:	3101      	adds	r1, #1
 800a834:	f000 f928 	bl	800aa88 <_Balloc>
 800a838:	4681      	mov	r9, r0
 800a83a:	b918      	cbnz	r0, 800a844 <__gethex+0x424>
 800a83c:	4b1a      	ldr	r3, [pc, #104]	; (800a8a8 <__gethex+0x488>)
 800a83e:	4602      	mov	r2, r0
 800a840:	2184      	movs	r1, #132	; 0x84
 800a842:	e6a8      	b.n	800a596 <__gethex+0x176>
 800a844:	6922      	ldr	r2, [r4, #16]
 800a846:	3202      	adds	r2, #2
 800a848:	f104 010c 	add.w	r1, r4, #12
 800a84c:	0092      	lsls	r2, r2, #2
 800a84e:	300c      	adds	r0, #12
 800a850:	f000 f90c 	bl	800aa6c <memcpy>
 800a854:	4621      	mov	r1, r4
 800a856:	ee18 0a10 	vmov	r0, s16
 800a85a:	f000 f955 	bl	800ab08 <_Bfree>
 800a85e:	464c      	mov	r4, r9
 800a860:	6923      	ldr	r3, [r4, #16]
 800a862:	1c5a      	adds	r2, r3, #1
 800a864:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a868:	6122      	str	r2, [r4, #16]
 800a86a:	2201      	movs	r2, #1
 800a86c:	615a      	str	r2, [r3, #20]
 800a86e:	e7bb      	b.n	800a7e8 <__gethex+0x3c8>
 800a870:	6922      	ldr	r2, [r4, #16]
 800a872:	455a      	cmp	r2, fp
 800a874:	dd0b      	ble.n	800a88e <__gethex+0x46e>
 800a876:	2101      	movs	r1, #1
 800a878:	4620      	mov	r0, r4
 800a87a:	f7ff fd69 	bl	800a350 <rshift>
 800a87e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a882:	3501      	adds	r5, #1
 800a884:	42ab      	cmp	r3, r5
 800a886:	f6ff aed0 	blt.w	800a62a <__gethex+0x20a>
 800a88a:	2701      	movs	r7, #1
 800a88c:	e7c0      	b.n	800a810 <__gethex+0x3f0>
 800a88e:	f016 061f 	ands.w	r6, r6, #31
 800a892:	d0fa      	beq.n	800a88a <__gethex+0x46a>
 800a894:	449a      	add	sl, r3
 800a896:	f1c6 0620 	rsb	r6, r6, #32
 800a89a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a89e:	f000 f9e9 	bl	800ac74 <__hi0bits>
 800a8a2:	42b0      	cmp	r0, r6
 800a8a4:	dbe7      	blt.n	800a876 <__gethex+0x456>
 800a8a6:	e7f0      	b.n	800a88a <__gethex+0x46a>
 800a8a8:	0803215c 	.word	0x0803215c

0800a8ac <L_shift>:
 800a8ac:	f1c2 0208 	rsb	r2, r2, #8
 800a8b0:	0092      	lsls	r2, r2, #2
 800a8b2:	b570      	push	{r4, r5, r6, lr}
 800a8b4:	f1c2 0620 	rsb	r6, r2, #32
 800a8b8:	6843      	ldr	r3, [r0, #4]
 800a8ba:	6804      	ldr	r4, [r0, #0]
 800a8bc:	fa03 f506 	lsl.w	r5, r3, r6
 800a8c0:	432c      	orrs	r4, r5
 800a8c2:	40d3      	lsrs	r3, r2
 800a8c4:	6004      	str	r4, [r0, #0]
 800a8c6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a8ca:	4288      	cmp	r0, r1
 800a8cc:	d3f4      	bcc.n	800a8b8 <L_shift+0xc>
 800a8ce:	bd70      	pop	{r4, r5, r6, pc}

0800a8d0 <__match>:
 800a8d0:	b530      	push	{r4, r5, lr}
 800a8d2:	6803      	ldr	r3, [r0, #0]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8da:	b914      	cbnz	r4, 800a8e2 <__match+0x12>
 800a8dc:	6003      	str	r3, [r0, #0]
 800a8de:	2001      	movs	r0, #1
 800a8e0:	bd30      	pop	{r4, r5, pc}
 800a8e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a8ea:	2d19      	cmp	r5, #25
 800a8ec:	bf98      	it	ls
 800a8ee:	3220      	addls	r2, #32
 800a8f0:	42a2      	cmp	r2, r4
 800a8f2:	d0f0      	beq.n	800a8d6 <__match+0x6>
 800a8f4:	2000      	movs	r0, #0
 800a8f6:	e7f3      	b.n	800a8e0 <__match+0x10>

0800a8f8 <__hexnan>:
 800a8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8fc:	680b      	ldr	r3, [r1, #0]
 800a8fe:	6801      	ldr	r1, [r0, #0]
 800a900:	115e      	asrs	r6, r3, #5
 800a902:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a906:	f013 031f 	ands.w	r3, r3, #31
 800a90a:	b087      	sub	sp, #28
 800a90c:	bf18      	it	ne
 800a90e:	3604      	addne	r6, #4
 800a910:	2500      	movs	r5, #0
 800a912:	1f37      	subs	r7, r6, #4
 800a914:	4682      	mov	sl, r0
 800a916:	4690      	mov	r8, r2
 800a918:	9301      	str	r3, [sp, #4]
 800a91a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a91e:	46b9      	mov	r9, r7
 800a920:	463c      	mov	r4, r7
 800a922:	9502      	str	r5, [sp, #8]
 800a924:	46ab      	mov	fp, r5
 800a926:	784a      	ldrb	r2, [r1, #1]
 800a928:	1c4b      	adds	r3, r1, #1
 800a92a:	9303      	str	r3, [sp, #12]
 800a92c:	b342      	cbz	r2, 800a980 <__hexnan+0x88>
 800a92e:	4610      	mov	r0, r2
 800a930:	9105      	str	r1, [sp, #20]
 800a932:	9204      	str	r2, [sp, #16]
 800a934:	f7ff fd5e 	bl	800a3f4 <__hexdig_fun>
 800a938:	2800      	cmp	r0, #0
 800a93a:	d14f      	bne.n	800a9dc <__hexnan+0xe4>
 800a93c:	9a04      	ldr	r2, [sp, #16]
 800a93e:	9905      	ldr	r1, [sp, #20]
 800a940:	2a20      	cmp	r2, #32
 800a942:	d818      	bhi.n	800a976 <__hexnan+0x7e>
 800a944:	9b02      	ldr	r3, [sp, #8]
 800a946:	459b      	cmp	fp, r3
 800a948:	dd13      	ble.n	800a972 <__hexnan+0x7a>
 800a94a:	454c      	cmp	r4, r9
 800a94c:	d206      	bcs.n	800a95c <__hexnan+0x64>
 800a94e:	2d07      	cmp	r5, #7
 800a950:	dc04      	bgt.n	800a95c <__hexnan+0x64>
 800a952:	462a      	mov	r2, r5
 800a954:	4649      	mov	r1, r9
 800a956:	4620      	mov	r0, r4
 800a958:	f7ff ffa8 	bl	800a8ac <L_shift>
 800a95c:	4544      	cmp	r4, r8
 800a95e:	d950      	bls.n	800aa02 <__hexnan+0x10a>
 800a960:	2300      	movs	r3, #0
 800a962:	f1a4 0904 	sub.w	r9, r4, #4
 800a966:	f844 3c04 	str.w	r3, [r4, #-4]
 800a96a:	f8cd b008 	str.w	fp, [sp, #8]
 800a96e:	464c      	mov	r4, r9
 800a970:	461d      	mov	r5, r3
 800a972:	9903      	ldr	r1, [sp, #12]
 800a974:	e7d7      	b.n	800a926 <__hexnan+0x2e>
 800a976:	2a29      	cmp	r2, #41	; 0x29
 800a978:	d156      	bne.n	800aa28 <__hexnan+0x130>
 800a97a:	3102      	adds	r1, #2
 800a97c:	f8ca 1000 	str.w	r1, [sl]
 800a980:	f1bb 0f00 	cmp.w	fp, #0
 800a984:	d050      	beq.n	800aa28 <__hexnan+0x130>
 800a986:	454c      	cmp	r4, r9
 800a988:	d206      	bcs.n	800a998 <__hexnan+0xa0>
 800a98a:	2d07      	cmp	r5, #7
 800a98c:	dc04      	bgt.n	800a998 <__hexnan+0xa0>
 800a98e:	462a      	mov	r2, r5
 800a990:	4649      	mov	r1, r9
 800a992:	4620      	mov	r0, r4
 800a994:	f7ff ff8a 	bl	800a8ac <L_shift>
 800a998:	4544      	cmp	r4, r8
 800a99a:	d934      	bls.n	800aa06 <__hexnan+0x10e>
 800a99c:	f1a8 0204 	sub.w	r2, r8, #4
 800a9a0:	4623      	mov	r3, r4
 800a9a2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a9a6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a9aa:	429f      	cmp	r7, r3
 800a9ac:	d2f9      	bcs.n	800a9a2 <__hexnan+0xaa>
 800a9ae:	1b3b      	subs	r3, r7, r4
 800a9b0:	f023 0303 	bic.w	r3, r3, #3
 800a9b4:	3304      	adds	r3, #4
 800a9b6:	3401      	adds	r4, #1
 800a9b8:	3e03      	subs	r6, #3
 800a9ba:	42b4      	cmp	r4, r6
 800a9bc:	bf88      	it	hi
 800a9be:	2304      	movhi	r3, #4
 800a9c0:	4443      	add	r3, r8
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f843 2b04 	str.w	r2, [r3], #4
 800a9c8:	429f      	cmp	r7, r3
 800a9ca:	d2fb      	bcs.n	800a9c4 <__hexnan+0xcc>
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	b91b      	cbnz	r3, 800a9d8 <__hexnan+0xe0>
 800a9d0:	4547      	cmp	r7, r8
 800a9d2:	d127      	bne.n	800aa24 <__hexnan+0x12c>
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	603b      	str	r3, [r7, #0]
 800a9d8:	2005      	movs	r0, #5
 800a9da:	e026      	b.n	800aa2a <__hexnan+0x132>
 800a9dc:	3501      	adds	r5, #1
 800a9de:	2d08      	cmp	r5, #8
 800a9e0:	f10b 0b01 	add.w	fp, fp, #1
 800a9e4:	dd06      	ble.n	800a9f4 <__hexnan+0xfc>
 800a9e6:	4544      	cmp	r4, r8
 800a9e8:	d9c3      	bls.n	800a972 <__hexnan+0x7a>
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	f844 3c04 	str.w	r3, [r4, #-4]
 800a9f0:	2501      	movs	r5, #1
 800a9f2:	3c04      	subs	r4, #4
 800a9f4:	6822      	ldr	r2, [r4, #0]
 800a9f6:	f000 000f 	and.w	r0, r0, #15
 800a9fa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a9fe:	6022      	str	r2, [r4, #0]
 800aa00:	e7b7      	b.n	800a972 <__hexnan+0x7a>
 800aa02:	2508      	movs	r5, #8
 800aa04:	e7b5      	b.n	800a972 <__hexnan+0x7a>
 800aa06:	9b01      	ldr	r3, [sp, #4]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d0df      	beq.n	800a9cc <__hexnan+0xd4>
 800aa0c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa10:	f1c3 0320 	rsb	r3, r3, #32
 800aa14:	fa22 f303 	lsr.w	r3, r2, r3
 800aa18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aa1c:	401a      	ands	r2, r3
 800aa1e:	f846 2c04 	str.w	r2, [r6, #-4]
 800aa22:	e7d3      	b.n	800a9cc <__hexnan+0xd4>
 800aa24:	3f04      	subs	r7, #4
 800aa26:	e7d1      	b.n	800a9cc <__hexnan+0xd4>
 800aa28:	2004      	movs	r0, #4
 800aa2a:	b007      	add	sp, #28
 800aa2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa30 <_localeconv_r>:
 800aa30:	4800      	ldr	r0, [pc, #0]	; (800aa34 <_localeconv_r+0x4>)
 800aa32:	4770      	bx	lr
 800aa34:	20000178 	.word	0x20000178

0800aa38 <malloc>:
 800aa38:	4b02      	ldr	r3, [pc, #8]	; (800aa44 <malloc+0xc>)
 800aa3a:	4601      	mov	r1, r0
 800aa3c:	6818      	ldr	r0, [r3, #0]
 800aa3e:	f000 bd3d 	b.w	800b4bc <_malloc_r>
 800aa42:	bf00      	nop
 800aa44:	20000020 	.word	0x20000020

0800aa48 <__ascii_mbtowc>:
 800aa48:	b082      	sub	sp, #8
 800aa4a:	b901      	cbnz	r1, 800aa4e <__ascii_mbtowc+0x6>
 800aa4c:	a901      	add	r1, sp, #4
 800aa4e:	b142      	cbz	r2, 800aa62 <__ascii_mbtowc+0x1a>
 800aa50:	b14b      	cbz	r3, 800aa66 <__ascii_mbtowc+0x1e>
 800aa52:	7813      	ldrb	r3, [r2, #0]
 800aa54:	600b      	str	r3, [r1, #0]
 800aa56:	7812      	ldrb	r2, [r2, #0]
 800aa58:	1e10      	subs	r0, r2, #0
 800aa5a:	bf18      	it	ne
 800aa5c:	2001      	movne	r0, #1
 800aa5e:	b002      	add	sp, #8
 800aa60:	4770      	bx	lr
 800aa62:	4610      	mov	r0, r2
 800aa64:	e7fb      	b.n	800aa5e <__ascii_mbtowc+0x16>
 800aa66:	f06f 0001 	mvn.w	r0, #1
 800aa6a:	e7f8      	b.n	800aa5e <__ascii_mbtowc+0x16>

0800aa6c <memcpy>:
 800aa6c:	440a      	add	r2, r1
 800aa6e:	4291      	cmp	r1, r2
 800aa70:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa74:	d100      	bne.n	800aa78 <memcpy+0xc>
 800aa76:	4770      	bx	lr
 800aa78:	b510      	push	{r4, lr}
 800aa7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa82:	4291      	cmp	r1, r2
 800aa84:	d1f9      	bne.n	800aa7a <memcpy+0xe>
 800aa86:	bd10      	pop	{r4, pc}

0800aa88 <_Balloc>:
 800aa88:	b570      	push	{r4, r5, r6, lr}
 800aa8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa8c:	4604      	mov	r4, r0
 800aa8e:	460d      	mov	r5, r1
 800aa90:	b976      	cbnz	r6, 800aab0 <_Balloc+0x28>
 800aa92:	2010      	movs	r0, #16
 800aa94:	f7ff ffd0 	bl	800aa38 <malloc>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	6260      	str	r0, [r4, #36]	; 0x24
 800aa9c:	b920      	cbnz	r0, 800aaa8 <_Balloc+0x20>
 800aa9e:	4b18      	ldr	r3, [pc, #96]	; (800ab00 <_Balloc+0x78>)
 800aaa0:	4818      	ldr	r0, [pc, #96]	; (800ab04 <_Balloc+0x7c>)
 800aaa2:	2166      	movs	r1, #102	; 0x66
 800aaa4:	f000 fef8 	bl	800b898 <__assert_func>
 800aaa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aaac:	6006      	str	r6, [r0, #0]
 800aaae:	60c6      	str	r6, [r0, #12]
 800aab0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aab2:	68f3      	ldr	r3, [r6, #12]
 800aab4:	b183      	cbz	r3, 800aad8 <_Balloc+0x50>
 800aab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aabe:	b9b8      	cbnz	r0, 800aaf0 <_Balloc+0x68>
 800aac0:	2101      	movs	r1, #1
 800aac2:	fa01 f605 	lsl.w	r6, r1, r5
 800aac6:	1d72      	adds	r2, r6, #5
 800aac8:	0092      	lsls	r2, r2, #2
 800aaca:	4620      	mov	r0, r4
 800aacc:	f000 fc97 	bl	800b3fe <_calloc_r>
 800aad0:	b160      	cbz	r0, 800aaec <_Balloc+0x64>
 800aad2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aad6:	e00e      	b.n	800aaf6 <_Balloc+0x6e>
 800aad8:	2221      	movs	r2, #33	; 0x21
 800aada:	2104      	movs	r1, #4
 800aadc:	4620      	mov	r0, r4
 800aade:	f000 fc8e 	bl	800b3fe <_calloc_r>
 800aae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aae4:	60f0      	str	r0, [r6, #12]
 800aae6:	68db      	ldr	r3, [r3, #12]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d1e4      	bne.n	800aab6 <_Balloc+0x2e>
 800aaec:	2000      	movs	r0, #0
 800aaee:	bd70      	pop	{r4, r5, r6, pc}
 800aaf0:	6802      	ldr	r2, [r0, #0]
 800aaf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aafc:	e7f7      	b.n	800aaee <_Balloc+0x66>
 800aafe:	bf00      	nop
 800ab00:	080320e6 	.word	0x080320e6
 800ab04:	080321ec 	.word	0x080321ec

0800ab08 <_Bfree>:
 800ab08:	b570      	push	{r4, r5, r6, lr}
 800ab0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab0c:	4605      	mov	r5, r0
 800ab0e:	460c      	mov	r4, r1
 800ab10:	b976      	cbnz	r6, 800ab30 <_Bfree+0x28>
 800ab12:	2010      	movs	r0, #16
 800ab14:	f7ff ff90 	bl	800aa38 <malloc>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	6268      	str	r0, [r5, #36]	; 0x24
 800ab1c:	b920      	cbnz	r0, 800ab28 <_Bfree+0x20>
 800ab1e:	4b09      	ldr	r3, [pc, #36]	; (800ab44 <_Bfree+0x3c>)
 800ab20:	4809      	ldr	r0, [pc, #36]	; (800ab48 <_Bfree+0x40>)
 800ab22:	218a      	movs	r1, #138	; 0x8a
 800ab24:	f000 feb8 	bl	800b898 <__assert_func>
 800ab28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab2c:	6006      	str	r6, [r0, #0]
 800ab2e:	60c6      	str	r6, [r0, #12]
 800ab30:	b13c      	cbz	r4, 800ab42 <_Bfree+0x3a>
 800ab32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab34:	6862      	ldr	r2, [r4, #4]
 800ab36:	68db      	ldr	r3, [r3, #12]
 800ab38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab3c:	6021      	str	r1, [r4, #0]
 800ab3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab42:	bd70      	pop	{r4, r5, r6, pc}
 800ab44:	080320e6 	.word	0x080320e6
 800ab48:	080321ec 	.word	0x080321ec

0800ab4c <__multadd>:
 800ab4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab50:	690e      	ldr	r6, [r1, #16]
 800ab52:	4607      	mov	r7, r0
 800ab54:	4698      	mov	r8, r3
 800ab56:	460c      	mov	r4, r1
 800ab58:	f101 0014 	add.w	r0, r1, #20
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	6805      	ldr	r5, [r0, #0]
 800ab60:	b2a9      	uxth	r1, r5
 800ab62:	fb02 8101 	mla	r1, r2, r1, r8
 800ab66:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ab6a:	0c2d      	lsrs	r5, r5, #16
 800ab6c:	fb02 c505 	mla	r5, r2, r5, ip
 800ab70:	b289      	uxth	r1, r1
 800ab72:	3301      	adds	r3, #1
 800ab74:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ab78:	429e      	cmp	r6, r3
 800ab7a:	f840 1b04 	str.w	r1, [r0], #4
 800ab7e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ab82:	dcec      	bgt.n	800ab5e <__multadd+0x12>
 800ab84:	f1b8 0f00 	cmp.w	r8, #0
 800ab88:	d022      	beq.n	800abd0 <__multadd+0x84>
 800ab8a:	68a3      	ldr	r3, [r4, #8]
 800ab8c:	42b3      	cmp	r3, r6
 800ab8e:	dc19      	bgt.n	800abc4 <__multadd+0x78>
 800ab90:	6861      	ldr	r1, [r4, #4]
 800ab92:	4638      	mov	r0, r7
 800ab94:	3101      	adds	r1, #1
 800ab96:	f7ff ff77 	bl	800aa88 <_Balloc>
 800ab9a:	4605      	mov	r5, r0
 800ab9c:	b928      	cbnz	r0, 800abaa <__multadd+0x5e>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	4b0d      	ldr	r3, [pc, #52]	; (800abd8 <__multadd+0x8c>)
 800aba2:	480e      	ldr	r0, [pc, #56]	; (800abdc <__multadd+0x90>)
 800aba4:	21b5      	movs	r1, #181	; 0xb5
 800aba6:	f000 fe77 	bl	800b898 <__assert_func>
 800abaa:	6922      	ldr	r2, [r4, #16]
 800abac:	3202      	adds	r2, #2
 800abae:	f104 010c 	add.w	r1, r4, #12
 800abb2:	0092      	lsls	r2, r2, #2
 800abb4:	300c      	adds	r0, #12
 800abb6:	f7ff ff59 	bl	800aa6c <memcpy>
 800abba:	4621      	mov	r1, r4
 800abbc:	4638      	mov	r0, r7
 800abbe:	f7ff ffa3 	bl	800ab08 <_Bfree>
 800abc2:	462c      	mov	r4, r5
 800abc4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800abc8:	3601      	adds	r6, #1
 800abca:	f8c3 8014 	str.w	r8, [r3, #20]
 800abce:	6126      	str	r6, [r4, #16]
 800abd0:	4620      	mov	r0, r4
 800abd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abd6:	bf00      	nop
 800abd8:	0803215c 	.word	0x0803215c
 800abdc:	080321ec 	.word	0x080321ec

0800abe0 <__s2b>:
 800abe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abe4:	460c      	mov	r4, r1
 800abe6:	4615      	mov	r5, r2
 800abe8:	461f      	mov	r7, r3
 800abea:	2209      	movs	r2, #9
 800abec:	3308      	adds	r3, #8
 800abee:	4606      	mov	r6, r0
 800abf0:	fb93 f3f2 	sdiv	r3, r3, r2
 800abf4:	2100      	movs	r1, #0
 800abf6:	2201      	movs	r2, #1
 800abf8:	429a      	cmp	r2, r3
 800abfa:	db09      	blt.n	800ac10 <__s2b+0x30>
 800abfc:	4630      	mov	r0, r6
 800abfe:	f7ff ff43 	bl	800aa88 <_Balloc>
 800ac02:	b940      	cbnz	r0, 800ac16 <__s2b+0x36>
 800ac04:	4602      	mov	r2, r0
 800ac06:	4b19      	ldr	r3, [pc, #100]	; (800ac6c <__s2b+0x8c>)
 800ac08:	4819      	ldr	r0, [pc, #100]	; (800ac70 <__s2b+0x90>)
 800ac0a:	21ce      	movs	r1, #206	; 0xce
 800ac0c:	f000 fe44 	bl	800b898 <__assert_func>
 800ac10:	0052      	lsls	r2, r2, #1
 800ac12:	3101      	adds	r1, #1
 800ac14:	e7f0      	b.n	800abf8 <__s2b+0x18>
 800ac16:	9b08      	ldr	r3, [sp, #32]
 800ac18:	6143      	str	r3, [r0, #20]
 800ac1a:	2d09      	cmp	r5, #9
 800ac1c:	f04f 0301 	mov.w	r3, #1
 800ac20:	6103      	str	r3, [r0, #16]
 800ac22:	dd16      	ble.n	800ac52 <__s2b+0x72>
 800ac24:	f104 0909 	add.w	r9, r4, #9
 800ac28:	46c8      	mov	r8, r9
 800ac2a:	442c      	add	r4, r5
 800ac2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ac30:	4601      	mov	r1, r0
 800ac32:	3b30      	subs	r3, #48	; 0x30
 800ac34:	220a      	movs	r2, #10
 800ac36:	4630      	mov	r0, r6
 800ac38:	f7ff ff88 	bl	800ab4c <__multadd>
 800ac3c:	45a0      	cmp	r8, r4
 800ac3e:	d1f5      	bne.n	800ac2c <__s2b+0x4c>
 800ac40:	f1a5 0408 	sub.w	r4, r5, #8
 800ac44:	444c      	add	r4, r9
 800ac46:	1b2d      	subs	r5, r5, r4
 800ac48:	1963      	adds	r3, r4, r5
 800ac4a:	42bb      	cmp	r3, r7
 800ac4c:	db04      	blt.n	800ac58 <__s2b+0x78>
 800ac4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac52:	340a      	adds	r4, #10
 800ac54:	2509      	movs	r5, #9
 800ac56:	e7f6      	b.n	800ac46 <__s2b+0x66>
 800ac58:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ac5c:	4601      	mov	r1, r0
 800ac5e:	3b30      	subs	r3, #48	; 0x30
 800ac60:	220a      	movs	r2, #10
 800ac62:	4630      	mov	r0, r6
 800ac64:	f7ff ff72 	bl	800ab4c <__multadd>
 800ac68:	e7ee      	b.n	800ac48 <__s2b+0x68>
 800ac6a:	bf00      	nop
 800ac6c:	0803215c 	.word	0x0803215c
 800ac70:	080321ec 	.word	0x080321ec

0800ac74 <__hi0bits>:
 800ac74:	0c03      	lsrs	r3, r0, #16
 800ac76:	041b      	lsls	r3, r3, #16
 800ac78:	b9d3      	cbnz	r3, 800acb0 <__hi0bits+0x3c>
 800ac7a:	0400      	lsls	r0, r0, #16
 800ac7c:	2310      	movs	r3, #16
 800ac7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ac82:	bf04      	itt	eq
 800ac84:	0200      	lsleq	r0, r0, #8
 800ac86:	3308      	addeq	r3, #8
 800ac88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ac8c:	bf04      	itt	eq
 800ac8e:	0100      	lsleq	r0, r0, #4
 800ac90:	3304      	addeq	r3, #4
 800ac92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ac96:	bf04      	itt	eq
 800ac98:	0080      	lsleq	r0, r0, #2
 800ac9a:	3302      	addeq	r3, #2
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	db05      	blt.n	800acac <__hi0bits+0x38>
 800aca0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aca4:	f103 0301 	add.w	r3, r3, #1
 800aca8:	bf08      	it	eq
 800acaa:	2320      	moveq	r3, #32
 800acac:	4618      	mov	r0, r3
 800acae:	4770      	bx	lr
 800acb0:	2300      	movs	r3, #0
 800acb2:	e7e4      	b.n	800ac7e <__hi0bits+0xa>

0800acb4 <__lo0bits>:
 800acb4:	6803      	ldr	r3, [r0, #0]
 800acb6:	f013 0207 	ands.w	r2, r3, #7
 800acba:	4601      	mov	r1, r0
 800acbc:	d00b      	beq.n	800acd6 <__lo0bits+0x22>
 800acbe:	07da      	lsls	r2, r3, #31
 800acc0:	d424      	bmi.n	800ad0c <__lo0bits+0x58>
 800acc2:	0798      	lsls	r0, r3, #30
 800acc4:	bf49      	itett	mi
 800acc6:	085b      	lsrmi	r3, r3, #1
 800acc8:	089b      	lsrpl	r3, r3, #2
 800acca:	2001      	movmi	r0, #1
 800accc:	600b      	strmi	r3, [r1, #0]
 800acce:	bf5c      	itt	pl
 800acd0:	600b      	strpl	r3, [r1, #0]
 800acd2:	2002      	movpl	r0, #2
 800acd4:	4770      	bx	lr
 800acd6:	b298      	uxth	r0, r3
 800acd8:	b9b0      	cbnz	r0, 800ad08 <__lo0bits+0x54>
 800acda:	0c1b      	lsrs	r3, r3, #16
 800acdc:	2010      	movs	r0, #16
 800acde:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ace2:	bf04      	itt	eq
 800ace4:	0a1b      	lsreq	r3, r3, #8
 800ace6:	3008      	addeq	r0, #8
 800ace8:	071a      	lsls	r2, r3, #28
 800acea:	bf04      	itt	eq
 800acec:	091b      	lsreq	r3, r3, #4
 800acee:	3004      	addeq	r0, #4
 800acf0:	079a      	lsls	r2, r3, #30
 800acf2:	bf04      	itt	eq
 800acf4:	089b      	lsreq	r3, r3, #2
 800acf6:	3002      	addeq	r0, #2
 800acf8:	07da      	lsls	r2, r3, #31
 800acfa:	d403      	bmi.n	800ad04 <__lo0bits+0x50>
 800acfc:	085b      	lsrs	r3, r3, #1
 800acfe:	f100 0001 	add.w	r0, r0, #1
 800ad02:	d005      	beq.n	800ad10 <__lo0bits+0x5c>
 800ad04:	600b      	str	r3, [r1, #0]
 800ad06:	4770      	bx	lr
 800ad08:	4610      	mov	r0, r2
 800ad0a:	e7e8      	b.n	800acde <__lo0bits+0x2a>
 800ad0c:	2000      	movs	r0, #0
 800ad0e:	4770      	bx	lr
 800ad10:	2020      	movs	r0, #32
 800ad12:	4770      	bx	lr

0800ad14 <__i2b>:
 800ad14:	b510      	push	{r4, lr}
 800ad16:	460c      	mov	r4, r1
 800ad18:	2101      	movs	r1, #1
 800ad1a:	f7ff feb5 	bl	800aa88 <_Balloc>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	b928      	cbnz	r0, 800ad2e <__i2b+0x1a>
 800ad22:	4b05      	ldr	r3, [pc, #20]	; (800ad38 <__i2b+0x24>)
 800ad24:	4805      	ldr	r0, [pc, #20]	; (800ad3c <__i2b+0x28>)
 800ad26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ad2a:	f000 fdb5 	bl	800b898 <__assert_func>
 800ad2e:	2301      	movs	r3, #1
 800ad30:	6144      	str	r4, [r0, #20]
 800ad32:	6103      	str	r3, [r0, #16]
 800ad34:	bd10      	pop	{r4, pc}
 800ad36:	bf00      	nop
 800ad38:	0803215c 	.word	0x0803215c
 800ad3c:	080321ec 	.word	0x080321ec

0800ad40 <__multiply>:
 800ad40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad44:	4614      	mov	r4, r2
 800ad46:	690a      	ldr	r2, [r1, #16]
 800ad48:	6923      	ldr	r3, [r4, #16]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	bfb8      	it	lt
 800ad4e:	460b      	movlt	r3, r1
 800ad50:	460d      	mov	r5, r1
 800ad52:	bfbc      	itt	lt
 800ad54:	4625      	movlt	r5, r4
 800ad56:	461c      	movlt	r4, r3
 800ad58:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ad5c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ad60:	68ab      	ldr	r3, [r5, #8]
 800ad62:	6869      	ldr	r1, [r5, #4]
 800ad64:	eb0a 0709 	add.w	r7, sl, r9
 800ad68:	42bb      	cmp	r3, r7
 800ad6a:	b085      	sub	sp, #20
 800ad6c:	bfb8      	it	lt
 800ad6e:	3101      	addlt	r1, #1
 800ad70:	f7ff fe8a 	bl	800aa88 <_Balloc>
 800ad74:	b930      	cbnz	r0, 800ad84 <__multiply+0x44>
 800ad76:	4602      	mov	r2, r0
 800ad78:	4b42      	ldr	r3, [pc, #264]	; (800ae84 <__multiply+0x144>)
 800ad7a:	4843      	ldr	r0, [pc, #268]	; (800ae88 <__multiply+0x148>)
 800ad7c:	f240 115d 	movw	r1, #349	; 0x15d
 800ad80:	f000 fd8a 	bl	800b898 <__assert_func>
 800ad84:	f100 0614 	add.w	r6, r0, #20
 800ad88:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ad8c:	4633      	mov	r3, r6
 800ad8e:	2200      	movs	r2, #0
 800ad90:	4543      	cmp	r3, r8
 800ad92:	d31e      	bcc.n	800add2 <__multiply+0x92>
 800ad94:	f105 0c14 	add.w	ip, r5, #20
 800ad98:	f104 0314 	add.w	r3, r4, #20
 800ad9c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ada0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ada4:	9202      	str	r2, [sp, #8]
 800ada6:	ebac 0205 	sub.w	r2, ip, r5
 800adaa:	3a15      	subs	r2, #21
 800adac:	f022 0203 	bic.w	r2, r2, #3
 800adb0:	3204      	adds	r2, #4
 800adb2:	f105 0115 	add.w	r1, r5, #21
 800adb6:	458c      	cmp	ip, r1
 800adb8:	bf38      	it	cc
 800adba:	2204      	movcc	r2, #4
 800adbc:	9201      	str	r2, [sp, #4]
 800adbe:	9a02      	ldr	r2, [sp, #8]
 800adc0:	9303      	str	r3, [sp, #12]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d808      	bhi.n	800add8 <__multiply+0x98>
 800adc6:	2f00      	cmp	r7, #0
 800adc8:	dc55      	bgt.n	800ae76 <__multiply+0x136>
 800adca:	6107      	str	r7, [r0, #16]
 800adcc:	b005      	add	sp, #20
 800adce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800add2:	f843 2b04 	str.w	r2, [r3], #4
 800add6:	e7db      	b.n	800ad90 <__multiply+0x50>
 800add8:	f8b3 a000 	ldrh.w	sl, [r3]
 800addc:	f1ba 0f00 	cmp.w	sl, #0
 800ade0:	d020      	beq.n	800ae24 <__multiply+0xe4>
 800ade2:	f105 0e14 	add.w	lr, r5, #20
 800ade6:	46b1      	mov	r9, r6
 800ade8:	2200      	movs	r2, #0
 800adea:	f85e 4b04 	ldr.w	r4, [lr], #4
 800adee:	f8d9 b000 	ldr.w	fp, [r9]
 800adf2:	b2a1      	uxth	r1, r4
 800adf4:	fa1f fb8b 	uxth.w	fp, fp
 800adf8:	fb0a b101 	mla	r1, sl, r1, fp
 800adfc:	4411      	add	r1, r2
 800adfe:	f8d9 2000 	ldr.w	r2, [r9]
 800ae02:	0c24      	lsrs	r4, r4, #16
 800ae04:	0c12      	lsrs	r2, r2, #16
 800ae06:	fb0a 2404 	mla	r4, sl, r4, r2
 800ae0a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ae0e:	b289      	uxth	r1, r1
 800ae10:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ae14:	45f4      	cmp	ip, lr
 800ae16:	f849 1b04 	str.w	r1, [r9], #4
 800ae1a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ae1e:	d8e4      	bhi.n	800adea <__multiply+0xaa>
 800ae20:	9901      	ldr	r1, [sp, #4]
 800ae22:	5072      	str	r2, [r6, r1]
 800ae24:	9a03      	ldr	r2, [sp, #12]
 800ae26:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ae2a:	3304      	adds	r3, #4
 800ae2c:	f1b9 0f00 	cmp.w	r9, #0
 800ae30:	d01f      	beq.n	800ae72 <__multiply+0x132>
 800ae32:	6834      	ldr	r4, [r6, #0]
 800ae34:	f105 0114 	add.w	r1, r5, #20
 800ae38:	46b6      	mov	lr, r6
 800ae3a:	f04f 0a00 	mov.w	sl, #0
 800ae3e:	880a      	ldrh	r2, [r1, #0]
 800ae40:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ae44:	fb09 b202 	mla	r2, r9, r2, fp
 800ae48:	4492      	add	sl, r2
 800ae4a:	b2a4      	uxth	r4, r4
 800ae4c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ae50:	f84e 4b04 	str.w	r4, [lr], #4
 800ae54:	f851 4b04 	ldr.w	r4, [r1], #4
 800ae58:	f8be 2000 	ldrh.w	r2, [lr]
 800ae5c:	0c24      	lsrs	r4, r4, #16
 800ae5e:	fb09 2404 	mla	r4, r9, r4, r2
 800ae62:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ae66:	458c      	cmp	ip, r1
 800ae68:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ae6c:	d8e7      	bhi.n	800ae3e <__multiply+0xfe>
 800ae6e:	9a01      	ldr	r2, [sp, #4]
 800ae70:	50b4      	str	r4, [r6, r2]
 800ae72:	3604      	adds	r6, #4
 800ae74:	e7a3      	b.n	800adbe <__multiply+0x7e>
 800ae76:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1a5      	bne.n	800adca <__multiply+0x8a>
 800ae7e:	3f01      	subs	r7, #1
 800ae80:	e7a1      	b.n	800adc6 <__multiply+0x86>
 800ae82:	bf00      	nop
 800ae84:	0803215c 	.word	0x0803215c
 800ae88:	080321ec 	.word	0x080321ec

0800ae8c <__pow5mult>:
 800ae8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae90:	4615      	mov	r5, r2
 800ae92:	f012 0203 	ands.w	r2, r2, #3
 800ae96:	4606      	mov	r6, r0
 800ae98:	460f      	mov	r7, r1
 800ae9a:	d007      	beq.n	800aeac <__pow5mult+0x20>
 800ae9c:	4c25      	ldr	r4, [pc, #148]	; (800af34 <__pow5mult+0xa8>)
 800ae9e:	3a01      	subs	r2, #1
 800aea0:	2300      	movs	r3, #0
 800aea2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aea6:	f7ff fe51 	bl	800ab4c <__multadd>
 800aeaa:	4607      	mov	r7, r0
 800aeac:	10ad      	asrs	r5, r5, #2
 800aeae:	d03d      	beq.n	800af2c <__pow5mult+0xa0>
 800aeb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aeb2:	b97c      	cbnz	r4, 800aed4 <__pow5mult+0x48>
 800aeb4:	2010      	movs	r0, #16
 800aeb6:	f7ff fdbf 	bl	800aa38 <malloc>
 800aeba:	4602      	mov	r2, r0
 800aebc:	6270      	str	r0, [r6, #36]	; 0x24
 800aebe:	b928      	cbnz	r0, 800aecc <__pow5mult+0x40>
 800aec0:	4b1d      	ldr	r3, [pc, #116]	; (800af38 <__pow5mult+0xac>)
 800aec2:	481e      	ldr	r0, [pc, #120]	; (800af3c <__pow5mult+0xb0>)
 800aec4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aec8:	f000 fce6 	bl	800b898 <__assert_func>
 800aecc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aed0:	6004      	str	r4, [r0, #0]
 800aed2:	60c4      	str	r4, [r0, #12]
 800aed4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aed8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aedc:	b94c      	cbnz	r4, 800aef2 <__pow5mult+0x66>
 800aede:	f240 2171 	movw	r1, #625	; 0x271
 800aee2:	4630      	mov	r0, r6
 800aee4:	f7ff ff16 	bl	800ad14 <__i2b>
 800aee8:	2300      	movs	r3, #0
 800aeea:	f8c8 0008 	str.w	r0, [r8, #8]
 800aeee:	4604      	mov	r4, r0
 800aef0:	6003      	str	r3, [r0, #0]
 800aef2:	f04f 0900 	mov.w	r9, #0
 800aef6:	07eb      	lsls	r3, r5, #31
 800aef8:	d50a      	bpl.n	800af10 <__pow5mult+0x84>
 800aefa:	4639      	mov	r1, r7
 800aefc:	4622      	mov	r2, r4
 800aefe:	4630      	mov	r0, r6
 800af00:	f7ff ff1e 	bl	800ad40 <__multiply>
 800af04:	4639      	mov	r1, r7
 800af06:	4680      	mov	r8, r0
 800af08:	4630      	mov	r0, r6
 800af0a:	f7ff fdfd 	bl	800ab08 <_Bfree>
 800af0e:	4647      	mov	r7, r8
 800af10:	106d      	asrs	r5, r5, #1
 800af12:	d00b      	beq.n	800af2c <__pow5mult+0xa0>
 800af14:	6820      	ldr	r0, [r4, #0]
 800af16:	b938      	cbnz	r0, 800af28 <__pow5mult+0x9c>
 800af18:	4622      	mov	r2, r4
 800af1a:	4621      	mov	r1, r4
 800af1c:	4630      	mov	r0, r6
 800af1e:	f7ff ff0f 	bl	800ad40 <__multiply>
 800af22:	6020      	str	r0, [r4, #0]
 800af24:	f8c0 9000 	str.w	r9, [r0]
 800af28:	4604      	mov	r4, r0
 800af2a:	e7e4      	b.n	800aef6 <__pow5mult+0x6a>
 800af2c:	4638      	mov	r0, r7
 800af2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af32:	bf00      	nop
 800af34:	08032340 	.word	0x08032340
 800af38:	080320e6 	.word	0x080320e6
 800af3c:	080321ec 	.word	0x080321ec

0800af40 <__lshift>:
 800af40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af44:	460c      	mov	r4, r1
 800af46:	6849      	ldr	r1, [r1, #4]
 800af48:	6923      	ldr	r3, [r4, #16]
 800af4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800af4e:	68a3      	ldr	r3, [r4, #8]
 800af50:	4607      	mov	r7, r0
 800af52:	4691      	mov	r9, r2
 800af54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af58:	f108 0601 	add.w	r6, r8, #1
 800af5c:	42b3      	cmp	r3, r6
 800af5e:	db0b      	blt.n	800af78 <__lshift+0x38>
 800af60:	4638      	mov	r0, r7
 800af62:	f7ff fd91 	bl	800aa88 <_Balloc>
 800af66:	4605      	mov	r5, r0
 800af68:	b948      	cbnz	r0, 800af7e <__lshift+0x3e>
 800af6a:	4602      	mov	r2, r0
 800af6c:	4b28      	ldr	r3, [pc, #160]	; (800b010 <__lshift+0xd0>)
 800af6e:	4829      	ldr	r0, [pc, #164]	; (800b014 <__lshift+0xd4>)
 800af70:	f240 11d9 	movw	r1, #473	; 0x1d9
 800af74:	f000 fc90 	bl	800b898 <__assert_func>
 800af78:	3101      	adds	r1, #1
 800af7a:	005b      	lsls	r3, r3, #1
 800af7c:	e7ee      	b.n	800af5c <__lshift+0x1c>
 800af7e:	2300      	movs	r3, #0
 800af80:	f100 0114 	add.w	r1, r0, #20
 800af84:	f100 0210 	add.w	r2, r0, #16
 800af88:	4618      	mov	r0, r3
 800af8a:	4553      	cmp	r3, sl
 800af8c:	db33      	blt.n	800aff6 <__lshift+0xb6>
 800af8e:	6920      	ldr	r0, [r4, #16]
 800af90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af94:	f104 0314 	add.w	r3, r4, #20
 800af98:	f019 091f 	ands.w	r9, r9, #31
 800af9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800afa0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800afa4:	d02b      	beq.n	800affe <__lshift+0xbe>
 800afa6:	f1c9 0e20 	rsb	lr, r9, #32
 800afaa:	468a      	mov	sl, r1
 800afac:	2200      	movs	r2, #0
 800afae:	6818      	ldr	r0, [r3, #0]
 800afb0:	fa00 f009 	lsl.w	r0, r0, r9
 800afb4:	4302      	orrs	r2, r0
 800afb6:	f84a 2b04 	str.w	r2, [sl], #4
 800afba:	f853 2b04 	ldr.w	r2, [r3], #4
 800afbe:	459c      	cmp	ip, r3
 800afc0:	fa22 f20e 	lsr.w	r2, r2, lr
 800afc4:	d8f3      	bhi.n	800afae <__lshift+0x6e>
 800afc6:	ebac 0304 	sub.w	r3, ip, r4
 800afca:	3b15      	subs	r3, #21
 800afcc:	f023 0303 	bic.w	r3, r3, #3
 800afd0:	3304      	adds	r3, #4
 800afd2:	f104 0015 	add.w	r0, r4, #21
 800afd6:	4584      	cmp	ip, r0
 800afd8:	bf38      	it	cc
 800afda:	2304      	movcc	r3, #4
 800afdc:	50ca      	str	r2, [r1, r3]
 800afde:	b10a      	cbz	r2, 800afe4 <__lshift+0xa4>
 800afe0:	f108 0602 	add.w	r6, r8, #2
 800afe4:	3e01      	subs	r6, #1
 800afe6:	4638      	mov	r0, r7
 800afe8:	612e      	str	r6, [r5, #16]
 800afea:	4621      	mov	r1, r4
 800afec:	f7ff fd8c 	bl	800ab08 <_Bfree>
 800aff0:	4628      	mov	r0, r5
 800aff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aff6:	f842 0f04 	str.w	r0, [r2, #4]!
 800affa:	3301      	adds	r3, #1
 800affc:	e7c5      	b.n	800af8a <__lshift+0x4a>
 800affe:	3904      	subs	r1, #4
 800b000:	f853 2b04 	ldr.w	r2, [r3], #4
 800b004:	f841 2f04 	str.w	r2, [r1, #4]!
 800b008:	459c      	cmp	ip, r3
 800b00a:	d8f9      	bhi.n	800b000 <__lshift+0xc0>
 800b00c:	e7ea      	b.n	800afe4 <__lshift+0xa4>
 800b00e:	bf00      	nop
 800b010:	0803215c 	.word	0x0803215c
 800b014:	080321ec 	.word	0x080321ec

0800b018 <__mcmp>:
 800b018:	b530      	push	{r4, r5, lr}
 800b01a:	6902      	ldr	r2, [r0, #16]
 800b01c:	690c      	ldr	r4, [r1, #16]
 800b01e:	1b12      	subs	r2, r2, r4
 800b020:	d10e      	bne.n	800b040 <__mcmp+0x28>
 800b022:	f100 0314 	add.w	r3, r0, #20
 800b026:	3114      	adds	r1, #20
 800b028:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b02c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b030:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b034:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b038:	42a5      	cmp	r5, r4
 800b03a:	d003      	beq.n	800b044 <__mcmp+0x2c>
 800b03c:	d305      	bcc.n	800b04a <__mcmp+0x32>
 800b03e:	2201      	movs	r2, #1
 800b040:	4610      	mov	r0, r2
 800b042:	bd30      	pop	{r4, r5, pc}
 800b044:	4283      	cmp	r3, r0
 800b046:	d3f3      	bcc.n	800b030 <__mcmp+0x18>
 800b048:	e7fa      	b.n	800b040 <__mcmp+0x28>
 800b04a:	f04f 32ff 	mov.w	r2, #4294967295
 800b04e:	e7f7      	b.n	800b040 <__mcmp+0x28>

0800b050 <__mdiff>:
 800b050:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b054:	460c      	mov	r4, r1
 800b056:	4606      	mov	r6, r0
 800b058:	4611      	mov	r1, r2
 800b05a:	4620      	mov	r0, r4
 800b05c:	4617      	mov	r7, r2
 800b05e:	f7ff ffdb 	bl	800b018 <__mcmp>
 800b062:	1e05      	subs	r5, r0, #0
 800b064:	d110      	bne.n	800b088 <__mdiff+0x38>
 800b066:	4629      	mov	r1, r5
 800b068:	4630      	mov	r0, r6
 800b06a:	f7ff fd0d 	bl	800aa88 <_Balloc>
 800b06e:	b930      	cbnz	r0, 800b07e <__mdiff+0x2e>
 800b070:	4b39      	ldr	r3, [pc, #228]	; (800b158 <__mdiff+0x108>)
 800b072:	4602      	mov	r2, r0
 800b074:	f240 2132 	movw	r1, #562	; 0x232
 800b078:	4838      	ldr	r0, [pc, #224]	; (800b15c <__mdiff+0x10c>)
 800b07a:	f000 fc0d 	bl	800b898 <__assert_func>
 800b07e:	2301      	movs	r3, #1
 800b080:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b084:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b088:	bfa4      	itt	ge
 800b08a:	463b      	movge	r3, r7
 800b08c:	4627      	movge	r7, r4
 800b08e:	4630      	mov	r0, r6
 800b090:	6879      	ldr	r1, [r7, #4]
 800b092:	bfa6      	itte	ge
 800b094:	461c      	movge	r4, r3
 800b096:	2500      	movge	r5, #0
 800b098:	2501      	movlt	r5, #1
 800b09a:	f7ff fcf5 	bl	800aa88 <_Balloc>
 800b09e:	b920      	cbnz	r0, 800b0aa <__mdiff+0x5a>
 800b0a0:	4b2d      	ldr	r3, [pc, #180]	; (800b158 <__mdiff+0x108>)
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b0a8:	e7e6      	b.n	800b078 <__mdiff+0x28>
 800b0aa:	693e      	ldr	r6, [r7, #16]
 800b0ac:	60c5      	str	r5, [r0, #12]
 800b0ae:	6925      	ldr	r5, [r4, #16]
 800b0b0:	f107 0114 	add.w	r1, r7, #20
 800b0b4:	f104 0914 	add.w	r9, r4, #20
 800b0b8:	f100 0e14 	add.w	lr, r0, #20
 800b0bc:	f107 0210 	add.w	r2, r7, #16
 800b0c0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b0c4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b0c8:	46f2      	mov	sl, lr
 800b0ca:	2700      	movs	r7, #0
 800b0cc:	f859 3b04 	ldr.w	r3, [r9], #4
 800b0d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b0d4:	fa1f f883 	uxth.w	r8, r3
 800b0d8:	fa17 f78b 	uxtah	r7, r7, fp
 800b0dc:	0c1b      	lsrs	r3, r3, #16
 800b0de:	eba7 0808 	sub.w	r8, r7, r8
 800b0e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b0e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b0ea:	fa1f f888 	uxth.w	r8, r8
 800b0ee:	141f      	asrs	r7, r3, #16
 800b0f0:	454d      	cmp	r5, r9
 800b0f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b0f6:	f84a 3b04 	str.w	r3, [sl], #4
 800b0fa:	d8e7      	bhi.n	800b0cc <__mdiff+0x7c>
 800b0fc:	1b2b      	subs	r3, r5, r4
 800b0fe:	3b15      	subs	r3, #21
 800b100:	f023 0303 	bic.w	r3, r3, #3
 800b104:	3304      	adds	r3, #4
 800b106:	3415      	adds	r4, #21
 800b108:	42a5      	cmp	r5, r4
 800b10a:	bf38      	it	cc
 800b10c:	2304      	movcc	r3, #4
 800b10e:	4419      	add	r1, r3
 800b110:	4473      	add	r3, lr
 800b112:	469e      	mov	lr, r3
 800b114:	460d      	mov	r5, r1
 800b116:	4565      	cmp	r5, ip
 800b118:	d30e      	bcc.n	800b138 <__mdiff+0xe8>
 800b11a:	f10c 0203 	add.w	r2, ip, #3
 800b11e:	1a52      	subs	r2, r2, r1
 800b120:	f022 0203 	bic.w	r2, r2, #3
 800b124:	3903      	subs	r1, #3
 800b126:	458c      	cmp	ip, r1
 800b128:	bf38      	it	cc
 800b12a:	2200      	movcc	r2, #0
 800b12c:	441a      	add	r2, r3
 800b12e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b132:	b17b      	cbz	r3, 800b154 <__mdiff+0x104>
 800b134:	6106      	str	r6, [r0, #16]
 800b136:	e7a5      	b.n	800b084 <__mdiff+0x34>
 800b138:	f855 8b04 	ldr.w	r8, [r5], #4
 800b13c:	fa17 f488 	uxtah	r4, r7, r8
 800b140:	1422      	asrs	r2, r4, #16
 800b142:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b146:	b2a4      	uxth	r4, r4
 800b148:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b14c:	f84e 4b04 	str.w	r4, [lr], #4
 800b150:	1417      	asrs	r7, r2, #16
 800b152:	e7e0      	b.n	800b116 <__mdiff+0xc6>
 800b154:	3e01      	subs	r6, #1
 800b156:	e7ea      	b.n	800b12e <__mdiff+0xde>
 800b158:	0803215c 	.word	0x0803215c
 800b15c:	080321ec 	.word	0x080321ec

0800b160 <__ulp>:
 800b160:	b082      	sub	sp, #8
 800b162:	ed8d 0b00 	vstr	d0, [sp]
 800b166:	9b01      	ldr	r3, [sp, #4]
 800b168:	4912      	ldr	r1, [pc, #72]	; (800b1b4 <__ulp+0x54>)
 800b16a:	4019      	ands	r1, r3
 800b16c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b170:	2900      	cmp	r1, #0
 800b172:	dd05      	ble.n	800b180 <__ulp+0x20>
 800b174:	2200      	movs	r2, #0
 800b176:	460b      	mov	r3, r1
 800b178:	ec43 2b10 	vmov	d0, r2, r3
 800b17c:	b002      	add	sp, #8
 800b17e:	4770      	bx	lr
 800b180:	4249      	negs	r1, r1
 800b182:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b186:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b18a:	f04f 0200 	mov.w	r2, #0
 800b18e:	f04f 0300 	mov.w	r3, #0
 800b192:	da04      	bge.n	800b19e <__ulp+0x3e>
 800b194:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b198:	fa41 f300 	asr.w	r3, r1, r0
 800b19c:	e7ec      	b.n	800b178 <__ulp+0x18>
 800b19e:	f1a0 0114 	sub.w	r1, r0, #20
 800b1a2:	291e      	cmp	r1, #30
 800b1a4:	bfda      	itte	le
 800b1a6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b1aa:	fa20 f101 	lsrle.w	r1, r0, r1
 800b1ae:	2101      	movgt	r1, #1
 800b1b0:	460a      	mov	r2, r1
 800b1b2:	e7e1      	b.n	800b178 <__ulp+0x18>
 800b1b4:	7ff00000 	.word	0x7ff00000

0800b1b8 <__b2d>:
 800b1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ba:	6905      	ldr	r5, [r0, #16]
 800b1bc:	f100 0714 	add.w	r7, r0, #20
 800b1c0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b1c4:	1f2e      	subs	r6, r5, #4
 800b1c6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	f7ff fd52 	bl	800ac74 <__hi0bits>
 800b1d0:	f1c0 0320 	rsb	r3, r0, #32
 800b1d4:	280a      	cmp	r0, #10
 800b1d6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b254 <__b2d+0x9c>
 800b1da:	600b      	str	r3, [r1, #0]
 800b1dc:	dc14      	bgt.n	800b208 <__b2d+0x50>
 800b1de:	f1c0 0e0b 	rsb	lr, r0, #11
 800b1e2:	fa24 f10e 	lsr.w	r1, r4, lr
 800b1e6:	42b7      	cmp	r7, r6
 800b1e8:	ea41 030c 	orr.w	r3, r1, ip
 800b1ec:	bf34      	ite	cc
 800b1ee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b1f2:	2100      	movcs	r1, #0
 800b1f4:	3015      	adds	r0, #21
 800b1f6:	fa04 f000 	lsl.w	r0, r4, r0
 800b1fa:	fa21 f10e 	lsr.w	r1, r1, lr
 800b1fe:	ea40 0201 	orr.w	r2, r0, r1
 800b202:	ec43 2b10 	vmov	d0, r2, r3
 800b206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b208:	42b7      	cmp	r7, r6
 800b20a:	bf3a      	itte	cc
 800b20c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b210:	f1a5 0608 	subcc.w	r6, r5, #8
 800b214:	2100      	movcs	r1, #0
 800b216:	380b      	subs	r0, #11
 800b218:	d017      	beq.n	800b24a <__b2d+0x92>
 800b21a:	f1c0 0c20 	rsb	ip, r0, #32
 800b21e:	fa04 f500 	lsl.w	r5, r4, r0
 800b222:	42be      	cmp	r6, r7
 800b224:	fa21 f40c 	lsr.w	r4, r1, ip
 800b228:	ea45 0504 	orr.w	r5, r5, r4
 800b22c:	bf8c      	ite	hi
 800b22e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b232:	2400      	movls	r4, #0
 800b234:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b238:	fa01 f000 	lsl.w	r0, r1, r0
 800b23c:	fa24 f40c 	lsr.w	r4, r4, ip
 800b240:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b244:	ea40 0204 	orr.w	r2, r0, r4
 800b248:	e7db      	b.n	800b202 <__b2d+0x4a>
 800b24a:	ea44 030c 	orr.w	r3, r4, ip
 800b24e:	460a      	mov	r2, r1
 800b250:	e7d7      	b.n	800b202 <__b2d+0x4a>
 800b252:	bf00      	nop
 800b254:	3ff00000 	.word	0x3ff00000

0800b258 <__d2b>:
 800b258:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b25c:	4689      	mov	r9, r1
 800b25e:	2101      	movs	r1, #1
 800b260:	ec57 6b10 	vmov	r6, r7, d0
 800b264:	4690      	mov	r8, r2
 800b266:	f7ff fc0f 	bl	800aa88 <_Balloc>
 800b26a:	4604      	mov	r4, r0
 800b26c:	b930      	cbnz	r0, 800b27c <__d2b+0x24>
 800b26e:	4602      	mov	r2, r0
 800b270:	4b25      	ldr	r3, [pc, #148]	; (800b308 <__d2b+0xb0>)
 800b272:	4826      	ldr	r0, [pc, #152]	; (800b30c <__d2b+0xb4>)
 800b274:	f240 310a 	movw	r1, #778	; 0x30a
 800b278:	f000 fb0e 	bl	800b898 <__assert_func>
 800b27c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b280:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b284:	bb35      	cbnz	r5, 800b2d4 <__d2b+0x7c>
 800b286:	2e00      	cmp	r6, #0
 800b288:	9301      	str	r3, [sp, #4]
 800b28a:	d028      	beq.n	800b2de <__d2b+0x86>
 800b28c:	4668      	mov	r0, sp
 800b28e:	9600      	str	r6, [sp, #0]
 800b290:	f7ff fd10 	bl	800acb4 <__lo0bits>
 800b294:	9900      	ldr	r1, [sp, #0]
 800b296:	b300      	cbz	r0, 800b2da <__d2b+0x82>
 800b298:	9a01      	ldr	r2, [sp, #4]
 800b29a:	f1c0 0320 	rsb	r3, r0, #32
 800b29e:	fa02 f303 	lsl.w	r3, r2, r3
 800b2a2:	430b      	orrs	r3, r1
 800b2a4:	40c2      	lsrs	r2, r0
 800b2a6:	6163      	str	r3, [r4, #20]
 800b2a8:	9201      	str	r2, [sp, #4]
 800b2aa:	9b01      	ldr	r3, [sp, #4]
 800b2ac:	61a3      	str	r3, [r4, #24]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	bf14      	ite	ne
 800b2b2:	2202      	movne	r2, #2
 800b2b4:	2201      	moveq	r2, #1
 800b2b6:	6122      	str	r2, [r4, #16]
 800b2b8:	b1d5      	cbz	r5, 800b2f0 <__d2b+0x98>
 800b2ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b2be:	4405      	add	r5, r0
 800b2c0:	f8c9 5000 	str.w	r5, [r9]
 800b2c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b2c8:	f8c8 0000 	str.w	r0, [r8]
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	b003      	add	sp, #12
 800b2d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2d8:	e7d5      	b.n	800b286 <__d2b+0x2e>
 800b2da:	6161      	str	r1, [r4, #20]
 800b2dc:	e7e5      	b.n	800b2aa <__d2b+0x52>
 800b2de:	a801      	add	r0, sp, #4
 800b2e0:	f7ff fce8 	bl	800acb4 <__lo0bits>
 800b2e4:	9b01      	ldr	r3, [sp, #4]
 800b2e6:	6163      	str	r3, [r4, #20]
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	6122      	str	r2, [r4, #16]
 800b2ec:	3020      	adds	r0, #32
 800b2ee:	e7e3      	b.n	800b2b8 <__d2b+0x60>
 800b2f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b2f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b2f8:	f8c9 0000 	str.w	r0, [r9]
 800b2fc:	6918      	ldr	r0, [r3, #16]
 800b2fe:	f7ff fcb9 	bl	800ac74 <__hi0bits>
 800b302:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b306:	e7df      	b.n	800b2c8 <__d2b+0x70>
 800b308:	0803215c 	.word	0x0803215c
 800b30c:	080321ec 	.word	0x080321ec

0800b310 <__ratio>:
 800b310:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b314:	4688      	mov	r8, r1
 800b316:	4669      	mov	r1, sp
 800b318:	4681      	mov	r9, r0
 800b31a:	f7ff ff4d 	bl	800b1b8 <__b2d>
 800b31e:	a901      	add	r1, sp, #4
 800b320:	4640      	mov	r0, r8
 800b322:	ec55 4b10 	vmov	r4, r5, d0
 800b326:	f7ff ff47 	bl	800b1b8 <__b2d>
 800b32a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b32e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b332:	eba3 0c02 	sub.w	ip, r3, r2
 800b336:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b33a:	1a9b      	subs	r3, r3, r2
 800b33c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b340:	ec51 0b10 	vmov	r0, r1, d0
 800b344:	2b00      	cmp	r3, #0
 800b346:	bfd6      	itet	le
 800b348:	460a      	movle	r2, r1
 800b34a:	462a      	movgt	r2, r5
 800b34c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b350:	468b      	mov	fp, r1
 800b352:	462f      	mov	r7, r5
 800b354:	bfd4      	ite	le
 800b356:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b35a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b35e:	4620      	mov	r0, r4
 800b360:	ee10 2a10 	vmov	r2, s0
 800b364:	465b      	mov	r3, fp
 800b366:	4639      	mov	r1, r7
 800b368:	f7f5 fa80 	bl	800086c <__aeabi_ddiv>
 800b36c:	ec41 0b10 	vmov	d0, r0, r1
 800b370:	b003      	add	sp, #12
 800b372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b376 <__copybits>:
 800b376:	3901      	subs	r1, #1
 800b378:	b570      	push	{r4, r5, r6, lr}
 800b37a:	1149      	asrs	r1, r1, #5
 800b37c:	6914      	ldr	r4, [r2, #16]
 800b37e:	3101      	adds	r1, #1
 800b380:	f102 0314 	add.w	r3, r2, #20
 800b384:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b388:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b38c:	1f05      	subs	r5, r0, #4
 800b38e:	42a3      	cmp	r3, r4
 800b390:	d30c      	bcc.n	800b3ac <__copybits+0x36>
 800b392:	1aa3      	subs	r3, r4, r2
 800b394:	3b11      	subs	r3, #17
 800b396:	f023 0303 	bic.w	r3, r3, #3
 800b39a:	3211      	adds	r2, #17
 800b39c:	42a2      	cmp	r2, r4
 800b39e:	bf88      	it	hi
 800b3a0:	2300      	movhi	r3, #0
 800b3a2:	4418      	add	r0, r3
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	4288      	cmp	r0, r1
 800b3a8:	d305      	bcc.n	800b3b6 <__copybits+0x40>
 800b3aa:	bd70      	pop	{r4, r5, r6, pc}
 800b3ac:	f853 6b04 	ldr.w	r6, [r3], #4
 800b3b0:	f845 6f04 	str.w	r6, [r5, #4]!
 800b3b4:	e7eb      	b.n	800b38e <__copybits+0x18>
 800b3b6:	f840 3b04 	str.w	r3, [r0], #4
 800b3ba:	e7f4      	b.n	800b3a6 <__copybits+0x30>

0800b3bc <__any_on>:
 800b3bc:	f100 0214 	add.w	r2, r0, #20
 800b3c0:	6900      	ldr	r0, [r0, #16]
 800b3c2:	114b      	asrs	r3, r1, #5
 800b3c4:	4298      	cmp	r0, r3
 800b3c6:	b510      	push	{r4, lr}
 800b3c8:	db11      	blt.n	800b3ee <__any_on+0x32>
 800b3ca:	dd0a      	ble.n	800b3e2 <__any_on+0x26>
 800b3cc:	f011 011f 	ands.w	r1, r1, #31
 800b3d0:	d007      	beq.n	800b3e2 <__any_on+0x26>
 800b3d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b3d6:	fa24 f001 	lsr.w	r0, r4, r1
 800b3da:	fa00 f101 	lsl.w	r1, r0, r1
 800b3de:	428c      	cmp	r4, r1
 800b3e0:	d10b      	bne.n	800b3fa <__any_on+0x3e>
 800b3e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d803      	bhi.n	800b3f2 <__any_on+0x36>
 800b3ea:	2000      	movs	r0, #0
 800b3ec:	bd10      	pop	{r4, pc}
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	e7f7      	b.n	800b3e2 <__any_on+0x26>
 800b3f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b3f6:	2900      	cmp	r1, #0
 800b3f8:	d0f5      	beq.n	800b3e6 <__any_on+0x2a>
 800b3fa:	2001      	movs	r0, #1
 800b3fc:	e7f6      	b.n	800b3ec <__any_on+0x30>

0800b3fe <_calloc_r>:
 800b3fe:	b513      	push	{r0, r1, r4, lr}
 800b400:	434a      	muls	r2, r1
 800b402:	4611      	mov	r1, r2
 800b404:	9201      	str	r2, [sp, #4]
 800b406:	f000 f859 	bl	800b4bc <_malloc_r>
 800b40a:	4604      	mov	r4, r0
 800b40c:	b118      	cbz	r0, 800b416 <_calloc_r+0x18>
 800b40e:	9a01      	ldr	r2, [sp, #4]
 800b410:	2100      	movs	r1, #0
 800b412:	f7fc fbc9 	bl	8007ba8 <memset>
 800b416:	4620      	mov	r0, r4
 800b418:	b002      	add	sp, #8
 800b41a:	bd10      	pop	{r4, pc}

0800b41c <_free_r>:
 800b41c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b41e:	2900      	cmp	r1, #0
 800b420:	d048      	beq.n	800b4b4 <_free_r+0x98>
 800b422:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b426:	9001      	str	r0, [sp, #4]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	f1a1 0404 	sub.w	r4, r1, #4
 800b42e:	bfb8      	it	lt
 800b430:	18e4      	addlt	r4, r4, r3
 800b432:	f000 fa7b 	bl	800b92c <__malloc_lock>
 800b436:	4a20      	ldr	r2, [pc, #128]	; (800b4b8 <_free_r+0x9c>)
 800b438:	9801      	ldr	r0, [sp, #4]
 800b43a:	6813      	ldr	r3, [r2, #0]
 800b43c:	4615      	mov	r5, r2
 800b43e:	b933      	cbnz	r3, 800b44e <_free_r+0x32>
 800b440:	6063      	str	r3, [r4, #4]
 800b442:	6014      	str	r4, [r2, #0]
 800b444:	b003      	add	sp, #12
 800b446:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b44a:	f000 ba75 	b.w	800b938 <__malloc_unlock>
 800b44e:	42a3      	cmp	r3, r4
 800b450:	d90b      	bls.n	800b46a <_free_r+0x4e>
 800b452:	6821      	ldr	r1, [r4, #0]
 800b454:	1862      	adds	r2, r4, r1
 800b456:	4293      	cmp	r3, r2
 800b458:	bf04      	itt	eq
 800b45a:	681a      	ldreq	r2, [r3, #0]
 800b45c:	685b      	ldreq	r3, [r3, #4]
 800b45e:	6063      	str	r3, [r4, #4]
 800b460:	bf04      	itt	eq
 800b462:	1852      	addeq	r2, r2, r1
 800b464:	6022      	streq	r2, [r4, #0]
 800b466:	602c      	str	r4, [r5, #0]
 800b468:	e7ec      	b.n	800b444 <_free_r+0x28>
 800b46a:	461a      	mov	r2, r3
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	b10b      	cbz	r3, 800b474 <_free_r+0x58>
 800b470:	42a3      	cmp	r3, r4
 800b472:	d9fa      	bls.n	800b46a <_free_r+0x4e>
 800b474:	6811      	ldr	r1, [r2, #0]
 800b476:	1855      	adds	r5, r2, r1
 800b478:	42a5      	cmp	r5, r4
 800b47a:	d10b      	bne.n	800b494 <_free_r+0x78>
 800b47c:	6824      	ldr	r4, [r4, #0]
 800b47e:	4421      	add	r1, r4
 800b480:	1854      	adds	r4, r2, r1
 800b482:	42a3      	cmp	r3, r4
 800b484:	6011      	str	r1, [r2, #0]
 800b486:	d1dd      	bne.n	800b444 <_free_r+0x28>
 800b488:	681c      	ldr	r4, [r3, #0]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	6053      	str	r3, [r2, #4]
 800b48e:	4421      	add	r1, r4
 800b490:	6011      	str	r1, [r2, #0]
 800b492:	e7d7      	b.n	800b444 <_free_r+0x28>
 800b494:	d902      	bls.n	800b49c <_free_r+0x80>
 800b496:	230c      	movs	r3, #12
 800b498:	6003      	str	r3, [r0, #0]
 800b49a:	e7d3      	b.n	800b444 <_free_r+0x28>
 800b49c:	6825      	ldr	r5, [r4, #0]
 800b49e:	1961      	adds	r1, r4, r5
 800b4a0:	428b      	cmp	r3, r1
 800b4a2:	bf04      	itt	eq
 800b4a4:	6819      	ldreq	r1, [r3, #0]
 800b4a6:	685b      	ldreq	r3, [r3, #4]
 800b4a8:	6063      	str	r3, [r4, #4]
 800b4aa:	bf04      	itt	eq
 800b4ac:	1949      	addeq	r1, r1, r5
 800b4ae:	6021      	streq	r1, [r4, #0]
 800b4b0:	6054      	str	r4, [r2, #4]
 800b4b2:	e7c7      	b.n	800b444 <_free_r+0x28>
 800b4b4:	b003      	add	sp, #12
 800b4b6:	bd30      	pop	{r4, r5, pc}
 800b4b8:	20000234 	.word	0x20000234

0800b4bc <_malloc_r>:
 800b4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4be:	1ccd      	adds	r5, r1, #3
 800b4c0:	f025 0503 	bic.w	r5, r5, #3
 800b4c4:	3508      	adds	r5, #8
 800b4c6:	2d0c      	cmp	r5, #12
 800b4c8:	bf38      	it	cc
 800b4ca:	250c      	movcc	r5, #12
 800b4cc:	2d00      	cmp	r5, #0
 800b4ce:	4606      	mov	r6, r0
 800b4d0:	db01      	blt.n	800b4d6 <_malloc_r+0x1a>
 800b4d2:	42a9      	cmp	r1, r5
 800b4d4:	d903      	bls.n	800b4de <_malloc_r+0x22>
 800b4d6:	230c      	movs	r3, #12
 800b4d8:	6033      	str	r3, [r6, #0]
 800b4da:	2000      	movs	r0, #0
 800b4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4de:	f000 fa25 	bl	800b92c <__malloc_lock>
 800b4e2:	4921      	ldr	r1, [pc, #132]	; (800b568 <_malloc_r+0xac>)
 800b4e4:	680a      	ldr	r2, [r1, #0]
 800b4e6:	4614      	mov	r4, r2
 800b4e8:	b99c      	cbnz	r4, 800b512 <_malloc_r+0x56>
 800b4ea:	4f20      	ldr	r7, [pc, #128]	; (800b56c <_malloc_r+0xb0>)
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	b923      	cbnz	r3, 800b4fa <_malloc_r+0x3e>
 800b4f0:	4621      	mov	r1, r4
 800b4f2:	4630      	mov	r0, r6
 800b4f4:	f000 f9a0 	bl	800b838 <_sbrk_r>
 800b4f8:	6038      	str	r0, [r7, #0]
 800b4fa:	4629      	mov	r1, r5
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	f000 f99b 	bl	800b838 <_sbrk_r>
 800b502:	1c43      	adds	r3, r0, #1
 800b504:	d123      	bne.n	800b54e <_malloc_r+0x92>
 800b506:	230c      	movs	r3, #12
 800b508:	6033      	str	r3, [r6, #0]
 800b50a:	4630      	mov	r0, r6
 800b50c:	f000 fa14 	bl	800b938 <__malloc_unlock>
 800b510:	e7e3      	b.n	800b4da <_malloc_r+0x1e>
 800b512:	6823      	ldr	r3, [r4, #0]
 800b514:	1b5b      	subs	r3, r3, r5
 800b516:	d417      	bmi.n	800b548 <_malloc_r+0x8c>
 800b518:	2b0b      	cmp	r3, #11
 800b51a:	d903      	bls.n	800b524 <_malloc_r+0x68>
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	441c      	add	r4, r3
 800b520:	6025      	str	r5, [r4, #0]
 800b522:	e004      	b.n	800b52e <_malloc_r+0x72>
 800b524:	6863      	ldr	r3, [r4, #4]
 800b526:	42a2      	cmp	r2, r4
 800b528:	bf0c      	ite	eq
 800b52a:	600b      	streq	r3, [r1, #0]
 800b52c:	6053      	strne	r3, [r2, #4]
 800b52e:	4630      	mov	r0, r6
 800b530:	f000 fa02 	bl	800b938 <__malloc_unlock>
 800b534:	f104 000b 	add.w	r0, r4, #11
 800b538:	1d23      	adds	r3, r4, #4
 800b53a:	f020 0007 	bic.w	r0, r0, #7
 800b53e:	1ac2      	subs	r2, r0, r3
 800b540:	d0cc      	beq.n	800b4dc <_malloc_r+0x20>
 800b542:	1a1b      	subs	r3, r3, r0
 800b544:	50a3      	str	r3, [r4, r2]
 800b546:	e7c9      	b.n	800b4dc <_malloc_r+0x20>
 800b548:	4622      	mov	r2, r4
 800b54a:	6864      	ldr	r4, [r4, #4]
 800b54c:	e7cc      	b.n	800b4e8 <_malloc_r+0x2c>
 800b54e:	1cc4      	adds	r4, r0, #3
 800b550:	f024 0403 	bic.w	r4, r4, #3
 800b554:	42a0      	cmp	r0, r4
 800b556:	d0e3      	beq.n	800b520 <_malloc_r+0x64>
 800b558:	1a21      	subs	r1, r4, r0
 800b55a:	4630      	mov	r0, r6
 800b55c:	f000 f96c 	bl	800b838 <_sbrk_r>
 800b560:	3001      	adds	r0, #1
 800b562:	d1dd      	bne.n	800b520 <_malloc_r+0x64>
 800b564:	e7cf      	b.n	800b506 <_malloc_r+0x4a>
 800b566:	bf00      	nop
 800b568:	20000234 	.word	0x20000234
 800b56c:	20000238 	.word	0x20000238

0800b570 <__ssputs_r>:
 800b570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b574:	688e      	ldr	r6, [r1, #8]
 800b576:	429e      	cmp	r6, r3
 800b578:	4682      	mov	sl, r0
 800b57a:	460c      	mov	r4, r1
 800b57c:	4690      	mov	r8, r2
 800b57e:	461f      	mov	r7, r3
 800b580:	d838      	bhi.n	800b5f4 <__ssputs_r+0x84>
 800b582:	898a      	ldrh	r2, [r1, #12]
 800b584:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b588:	d032      	beq.n	800b5f0 <__ssputs_r+0x80>
 800b58a:	6825      	ldr	r5, [r4, #0]
 800b58c:	6909      	ldr	r1, [r1, #16]
 800b58e:	eba5 0901 	sub.w	r9, r5, r1
 800b592:	6965      	ldr	r5, [r4, #20]
 800b594:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b598:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b59c:	3301      	adds	r3, #1
 800b59e:	444b      	add	r3, r9
 800b5a0:	106d      	asrs	r5, r5, #1
 800b5a2:	429d      	cmp	r5, r3
 800b5a4:	bf38      	it	cc
 800b5a6:	461d      	movcc	r5, r3
 800b5a8:	0553      	lsls	r3, r2, #21
 800b5aa:	d531      	bpl.n	800b610 <__ssputs_r+0xa0>
 800b5ac:	4629      	mov	r1, r5
 800b5ae:	f7ff ff85 	bl	800b4bc <_malloc_r>
 800b5b2:	4606      	mov	r6, r0
 800b5b4:	b950      	cbnz	r0, 800b5cc <__ssputs_r+0x5c>
 800b5b6:	230c      	movs	r3, #12
 800b5b8:	f8ca 3000 	str.w	r3, [sl]
 800b5bc:	89a3      	ldrh	r3, [r4, #12]
 800b5be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5c2:	81a3      	strh	r3, [r4, #12]
 800b5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5cc:	6921      	ldr	r1, [r4, #16]
 800b5ce:	464a      	mov	r2, r9
 800b5d0:	f7ff fa4c 	bl	800aa6c <memcpy>
 800b5d4:	89a3      	ldrh	r3, [r4, #12]
 800b5d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b5da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5de:	81a3      	strh	r3, [r4, #12]
 800b5e0:	6126      	str	r6, [r4, #16]
 800b5e2:	6165      	str	r5, [r4, #20]
 800b5e4:	444e      	add	r6, r9
 800b5e6:	eba5 0509 	sub.w	r5, r5, r9
 800b5ea:	6026      	str	r6, [r4, #0]
 800b5ec:	60a5      	str	r5, [r4, #8]
 800b5ee:	463e      	mov	r6, r7
 800b5f0:	42be      	cmp	r6, r7
 800b5f2:	d900      	bls.n	800b5f6 <__ssputs_r+0x86>
 800b5f4:	463e      	mov	r6, r7
 800b5f6:	4632      	mov	r2, r6
 800b5f8:	6820      	ldr	r0, [r4, #0]
 800b5fa:	4641      	mov	r1, r8
 800b5fc:	f000 f97c 	bl	800b8f8 <memmove>
 800b600:	68a3      	ldr	r3, [r4, #8]
 800b602:	6822      	ldr	r2, [r4, #0]
 800b604:	1b9b      	subs	r3, r3, r6
 800b606:	4432      	add	r2, r6
 800b608:	60a3      	str	r3, [r4, #8]
 800b60a:	6022      	str	r2, [r4, #0]
 800b60c:	2000      	movs	r0, #0
 800b60e:	e7db      	b.n	800b5c8 <__ssputs_r+0x58>
 800b610:	462a      	mov	r2, r5
 800b612:	f000 f997 	bl	800b944 <_realloc_r>
 800b616:	4606      	mov	r6, r0
 800b618:	2800      	cmp	r0, #0
 800b61a:	d1e1      	bne.n	800b5e0 <__ssputs_r+0x70>
 800b61c:	6921      	ldr	r1, [r4, #16]
 800b61e:	4650      	mov	r0, sl
 800b620:	f7ff fefc 	bl	800b41c <_free_r>
 800b624:	e7c7      	b.n	800b5b6 <__ssputs_r+0x46>
	...

0800b628 <_svfiprintf_r>:
 800b628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b62c:	4698      	mov	r8, r3
 800b62e:	898b      	ldrh	r3, [r1, #12]
 800b630:	061b      	lsls	r3, r3, #24
 800b632:	b09d      	sub	sp, #116	; 0x74
 800b634:	4607      	mov	r7, r0
 800b636:	460d      	mov	r5, r1
 800b638:	4614      	mov	r4, r2
 800b63a:	d50e      	bpl.n	800b65a <_svfiprintf_r+0x32>
 800b63c:	690b      	ldr	r3, [r1, #16]
 800b63e:	b963      	cbnz	r3, 800b65a <_svfiprintf_r+0x32>
 800b640:	2140      	movs	r1, #64	; 0x40
 800b642:	f7ff ff3b 	bl	800b4bc <_malloc_r>
 800b646:	6028      	str	r0, [r5, #0]
 800b648:	6128      	str	r0, [r5, #16]
 800b64a:	b920      	cbnz	r0, 800b656 <_svfiprintf_r+0x2e>
 800b64c:	230c      	movs	r3, #12
 800b64e:	603b      	str	r3, [r7, #0]
 800b650:	f04f 30ff 	mov.w	r0, #4294967295
 800b654:	e0d1      	b.n	800b7fa <_svfiprintf_r+0x1d2>
 800b656:	2340      	movs	r3, #64	; 0x40
 800b658:	616b      	str	r3, [r5, #20]
 800b65a:	2300      	movs	r3, #0
 800b65c:	9309      	str	r3, [sp, #36]	; 0x24
 800b65e:	2320      	movs	r3, #32
 800b660:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b664:	f8cd 800c 	str.w	r8, [sp, #12]
 800b668:	2330      	movs	r3, #48	; 0x30
 800b66a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b814 <_svfiprintf_r+0x1ec>
 800b66e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b672:	f04f 0901 	mov.w	r9, #1
 800b676:	4623      	mov	r3, r4
 800b678:	469a      	mov	sl, r3
 800b67a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b67e:	b10a      	cbz	r2, 800b684 <_svfiprintf_r+0x5c>
 800b680:	2a25      	cmp	r2, #37	; 0x25
 800b682:	d1f9      	bne.n	800b678 <_svfiprintf_r+0x50>
 800b684:	ebba 0b04 	subs.w	fp, sl, r4
 800b688:	d00b      	beq.n	800b6a2 <_svfiprintf_r+0x7a>
 800b68a:	465b      	mov	r3, fp
 800b68c:	4622      	mov	r2, r4
 800b68e:	4629      	mov	r1, r5
 800b690:	4638      	mov	r0, r7
 800b692:	f7ff ff6d 	bl	800b570 <__ssputs_r>
 800b696:	3001      	adds	r0, #1
 800b698:	f000 80aa 	beq.w	800b7f0 <_svfiprintf_r+0x1c8>
 800b69c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b69e:	445a      	add	r2, fp
 800b6a0:	9209      	str	r2, [sp, #36]	; 0x24
 800b6a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	f000 80a2 	beq.w	800b7f0 <_svfiprintf_r+0x1c8>
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b6b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6b6:	f10a 0a01 	add.w	sl, sl, #1
 800b6ba:	9304      	str	r3, [sp, #16]
 800b6bc:	9307      	str	r3, [sp, #28]
 800b6be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6c2:	931a      	str	r3, [sp, #104]	; 0x68
 800b6c4:	4654      	mov	r4, sl
 800b6c6:	2205      	movs	r2, #5
 800b6c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6cc:	4851      	ldr	r0, [pc, #324]	; (800b814 <_svfiprintf_r+0x1ec>)
 800b6ce:	f7f4 fd97 	bl	8000200 <memchr>
 800b6d2:	9a04      	ldr	r2, [sp, #16]
 800b6d4:	b9d8      	cbnz	r0, 800b70e <_svfiprintf_r+0xe6>
 800b6d6:	06d0      	lsls	r0, r2, #27
 800b6d8:	bf44      	itt	mi
 800b6da:	2320      	movmi	r3, #32
 800b6dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6e0:	0711      	lsls	r1, r2, #28
 800b6e2:	bf44      	itt	mi
 800b6e4:	232b      	movmi	r3, #43	; 0x2b
 800b6e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b6ee:	2b2a      	cmp	r3, #42	; 0x2a
 800b6f0:	d015      	beq.n	800b71e <_svfiprintf_r+0xf6>
 800b6f2:	9a07      	ldr	r2, [sp, #28]
 800b6f4:	4654      	mov	r4, sl
 800b6f6:	2000      	movs	r0, #0
 800b6f8:	f04f 0c0a 	mov.w	ip, #10
 800b6fc:	4621      	mov	r1, r4
 800b6fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b702:	3b30      	subs	r3, #48	; 0x30
 800b704:	2b09      	cmp	r3, #9
 800b706:	d94e      	bls.n	800b7a6 <_svfiprintf_r+0x17e>
 800b708:	b1b0      	cbz	r0, 800b738 <_svfiprintf_r+0x110>
 800b70a:	9207      	str	r2, [sp, #28]
 800b70c:	e014      	b.n	800b738 <_svfiprintf_r+0x110>
 800b70e:	eba0 0308 	sub.w	r3, r0, r8
 800b712:	fa09 f303 	lsl.w	r3, r9, r3
 800b716:	4313      	orrs	r3, r2
 800b718:	9304      	str	r3, [sp, #16]
 800b71a:	46a2      	mov	sl, r4
 800b71c:	e7d2      	b.n	800b6c4 <_svfiprintf_r+0x9c>
 800b71e:	9b03      	ldr	r3, [sp, #12]
 800b720:	1d19      	adds	r1, r3, #4
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	9103      	str	r1, [sp, #12]
 800b726:	2b00      	cmp	r3, #0
 800b728:	bfbb      	ittet	lt
 800b72a:	425b      	neglt	r3, r3
 800b72c:	f042 0202 	orrlt.w	r2, r2, #2
 800b730:	9307      	strge	r3, [sp, #28]
 800b732:	9307      	strlt	r3, [sp, #28]
 800b734:	bfb8      	it	lt
 800b736:	9204      	strlt	r2, [sp, #16]
 800b738:	7823      	ldrb	r3, [r4, #0]
 800b73a:	2b2e      	cmp	r3, #46	; 0x2e
 800b73c:	d10c      	bne.n	800b758 <_svfiprintf_r+0x130>
 800b73e:	7863      	ldrb	r3, [r4, #1]
 800b740:	2b2a      	cmp	r3, #42	; 0x2a
 800b742:	d135      	bne.n	800b7b0 <_svfiprintf_r+0x188>
 800b744:	9b03      	ldr	r3, [sp, #12]
 800b746:	1d1a      	adds	r2, r3, #4
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	9203      	str	r2, [sp, #12]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	bfb8      	it	lt
 800b750:	f04f 33ff 	movlt.w	r3, #4294967295
 800b754:	3402      	adds	r4, #2
 800b756:	9305      	str	r3, [sp, #20]
 800b758:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b824 <_svfiprintf_r+0x1fc>
 800b75c:	7821      	ldrb	r1, [r4, #0]
 800b75e:	2203      	movs	r2, #3
 800b760:	4650      	mov	r0, sl
 800b762:	f7f4 fd4d 	bl	8000200 <memchr>
 800b766:	b140      	cbz	r0, 800b77a <_svfiprintf_r+0x152>
 800b768:	2340      	movs	r3, #64	; 0x40
 800b76a:	eba0 000a 	sub.w	r0, r0, sl
 800b76e:	fa03 f000 	lsl.w	r0, r3, r0
 800b772:	9b04      	ldr	r3, [sp, #16]
 800b774:	4303      	orrs	r3, r0
 800b776:	3401      	adds	r4, #1
 800b778:	9304      	str	r3, [sp, #16]
 800b77a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b77e:	4826      	ldr	r0, [pc, #152]	; (800b818 <_svfiprintf_r+0x1f0>)
 800b780:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b784:	2206      	movs	r2, #6
 800b786:	f7f4 fd3b 	bl	8000200 <memchr>
 800b78a:	2800      	cmp	r0, #0
 800b78c:	d038      	beq.n	800b800 <_svfiprintf_r+0x1d8>
 800b78e:	4b23      	ldr	r3, [pc, #140]	; (800b81c <_svfiprintf_r+0x1f4>)
 800b790:	bb1b      	cbnz	r3, 800b7da <_svfiprintf_r+0x1b2>
 800b792:	9b03      	ldr	r3, [sp, #12]
 800b794:	3307      	adds	r3, #7
 800b796:	f023 0307 	bic.w	r3, r3, #7
 800b79a:	3308      	adds	r3, #8
 800b79c:	9303      	str	r3, [sp, #12]
 800b79e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7a0:	4433      	add	r3, r6
 800b7a2:	9309      	str	r3, [sp, #36]	; 0x24
 800b7a4:	e767      	b.n	800b676 <_svfiprintf_r+0x4e>
 800b7a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7aa:	460c      	mov	r4, r1
 800b7ac:	2001      	movs	r0, #1
 800b7ae:	e7a5      	b.n	800b6fc <_svfiprintf_r+0xd4>
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	3401      	adds	r4, #1
 800b7b4:	9305      	str	r3, [sp, #20]
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	f04f 0c0a 	mov.w	ip, #10
 800b7bc:	4620      	mov	r0, r4
 800b7be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7c2:	3a30      	subs	r2, #48	; 0x30
 800b7c4:	2a09      	cmp	r2, #9
 800b7c6:	d903      	bls.n	800b7d0 <_svfiprintf_r+0x1a8>
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d0c5      	beq.n	800b758 <_svfiprintf_r+0x130>
 800b7cc:	9105      	str	r1, [sp, #20]
 800b7ce:	e7c3      	b.n	800b758 <_svfiprintf_r+0x130>
 800b7d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7d4:	4604      	mov	r4, r0
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	e7f0      	b.n	800b7bc <_svfiprintf_r+0x194>
 800b7da:	ab03      	add	r3, sp, #12
 800b7dc:	9300      	str	r3, [sp, #0]
 800b7de:	462a      	mov	r2, r5
 800b7e0:	4b0f      	ldr	r3, [pc, #60]	; (800b820 <_svfiprintf_r+0x1f8>)
 800b7e2:	a904      	add	r1, sp, #16
 800b7e4:	4638      	mov	r0, r7
 800b7e6:	f7fc fa87 	bl	8007cf8 <_printf_float>
 800b7ea:	1c42      	adds	r2, r0, #1
 800b7ec:	4606      	mov	r6, r0
 800b7ee:	d1d6      	bne.n	800b79e <_svfiprintf_r+0x176>
 800b7f0:	89ab      	ldrh	r3, [r5, #12]
 800b7f2:	065b      	lsls	r3, r3, #25
 800b7f4:	f53f af2c 	bmi.w	800b650 <_svfiprintf_r+0x28>
 800b7f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7fa:	b01d      	add	sp, #116	; 0x74
 800b7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b800:	ab03      	add	r3, sp, #12
 800b802:	9300      	str	r3, [sp, #0]
 800b804:	462a      	mov	r2, r5
 800b806:	4b06      	ldr	r3, [pc, #24]	; (800b820 <_svfiprintf_r+0x1f8>)
 800b808:	a904      	add	r1, sp, #16
 800b80a:	4638      	mov	r0, r7
 800b80c:	f7fc fd18 	bl	8008240 <_printf_i>
 800b810:	e7eb      	b.n	800b7ea <_svfiprintf_r+0x1c2>
 800b812:	bf00      	nop
 800b814:	0803234c 	.word	0x0803234c
 800b818:	08032356 	.word	0x08032356
 800b81c:	08007cf9 	.word	0x08007cf9
 800b820:	0800b571 	.word	0x0800b571
 800b824:	08032352 	.word	0x08032352

0800b828 <nan>:
 800b828:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b830 <nan+0x8>
 800b82c:	4770      	bx	lr
 800b82e:	bf00      	nop
 800b830:	00000000 	.word	0x00000000
 800b834:	7ff80000 	.word	0x7ff80000

0800b838 <_sbrk_r>:
 800b838:	b538      	push	{r3, r4, r5, lr}
 800b83a:	4d06      	ldr	r5, [pc, #24]	; (800b854 <_sbrk_r+0x1c>)
 800b83c:	2300      	movs	r3, #0
 800b83e:	4604      	mov	r4, r0
 800b840:	4608      	mov	r0, r1
 800b842:	602b      	str	r3, [r5, #0]
 800b844:	f7f6 fe9c 	bl	8002580 <_sbrk>
 800b848:	1c43      	adds	r3, r0, #1
 800b84a:	d102      	bne.n	800b852 <_sbrk_r+0x1a>
 800b84c:	682b      	ldr	r3, [r5, #0]
 800b84e:	b103      	cbz	r3, 800b852 <_sbrk_r+0x1a>
 800b850:	6023      	str	r3, [r4, #0]
 800b852:	bd38      	pop	{r3, r4, r5, pc}
 800b854:	2000046c 	.word	0x2000046c

0800b858 <strncmp>:
 800b858:	b510      	push	{r4, lr}
 800b85a:	b16a      	cbz	r2, 800b878 <strncmp+0x20>
 800b85c:	3901      	subs	r1, #1
 800b85e:	1884      	adds	r4, r0, r2
 800b860:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b864:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b868:	4293      	cmp	r3, r2
 800b86a:	d103      	bne.n	800b874 <strncmp+0x1c>
 800b86c:	42a0      	cmp	r0, r4
 800b86e:	d001      	beq.n	800b874 <strncmp+0x1c>
 800b870:	2b00      	cmp	r3, #0
 800b872:	d1f5      	bne.n	800b860 <strncmp+0x8>
 800b874:	1a98      	subs	r0, r3, r2
 800b876:	bd10      	pop	{r4, pc}
 800b878:	4610      	mov	r0, r2
 800b87a:	e7fc      	b.n	800b876 <strncmp+0x1e>

0800b87c <__ascii_wctomb>:
 800b87c:	b149      	cbz	r1, 800b892 <__ascii_wctomb+0x16>
 800b87e:	2aff      	cmp	r2, #255	; 0xff
 800b880:	bf85      	ittet	hi
 800b882:	238a      	movhi	r3, #138	; 0x8a
 800b884:	6003      	strhi	r3, [r0, #0]
 800b886:	700a      	strbls	r2, [r1, #0]
 800b888:	f04f 30ff 	movhi.w	r0, #4294967295
 800b88c:	bf98      	it	ls
 800b88e:	2001      	movls	r0, #1
 800b890:	4770      	bx	lr
 800b892:	4608      	mov	r0, r1
 800b894:	4770      	bx	lr
	...

0800b898 <__assert_func>:
 800b898:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b89a:	4614      	mov	r4, r2
 800b89c:	461a      	mov	r2, r3
 800b89e:	4b09      	ldr	r3, [pc, #36]	; (800b8c4 <__assert_func+0x2c>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4605      	mov	r5, r0
 800b8a4:	68d8      	ldr	r0, [r3, #12]
 800b8a6:	b14c      	cbz	r4, 800b8bc <__assert_func+0x24>
 800b8a8:	4b07      	ldr	r3, [pc, #28]	; (800b8c8 <__assert_func+0x30>)
 800b8aa:	9100      	str	r1, [sp, #0]
 800b8ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b8b0:	4906      	ldr	r1, [pc, #24]	; (800b8cc <__assert_func+0x34>)
 800b8b2:	462b      	mov	r3, r5
 800b8b4:	f000 f80e 	bl	800b8d4 <fiprintf>
 800b8b8:	f000 fa84 	bl	800bdc4 <abort>
 800b8bc:	4b04      	ldr	r3, [pc, #16]	; (800b8d0 <__assert_func+0x38>)
 800b8be:	461c      	mov	r4, r3
 800b8c0:	e7f3      	b.n	800b8aa <__assert_func+0x12>
 800b8c2:	bf00      	nop
 800b8c4:	20000020 	.word	0x20000020
 800b8c8:	0803235d 	.word	0x0803235d
 800b8cc:	0803236a 	.word	0x0803236a
 800b8d0:	08032398 	.word	0x08032398

0800b8d4 <fiprintf>:
 800b8d4:	b40e      	push	{r1, r2, r3}
 800b8d6:	b503      	push	{r0, r1, lr}
 800b8d8:	4601      	mov	r1, r0
 800b8da:	ab03      	add	r3, sp, #12
 800b8dc:	4805      	ldr	r0, [pc, #20]	; (800b8f4 <fiprintf+0x20>)
 800b8de:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8e2:	6800      	ldr	r0, [r0, #0]
 800b8e4:	9301      	str	r3, [sp, #4]
 800b8e6:	f000 f87d 	bl	800b9e4 <_vfiprintf_r>
 800b8ea:	b002      	add	sp, #8
 800b8ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8f0:	b003      	add	sp, #12
 800b8f2:	4770      	bx	lr
 800b8f4:	20000020 	.word	0x20000020

0800b8f8 <memmove>:
 800b8f8:	4288      	cmp	r0, r1
 800b8fa:	b510      	push	{r4, lr}
 800b8fc:	eb01 0402 	add.w	r4, r1, r2
 800b900:	d902      	bls.n	800b908 <memmove+0x10>
 800b902:	4284      	cmp	r4, r0
 800b904:	4623      	mov	r3, r4
 800b906:	d807      	bhi.n	800b918 <memmove+0x20>
 800b908:	1e43      	subs	r3, r0, #1
 800b90a:	42a1      	cmp	r1, r4
 800b90c:	d008      	beq.n	800b920 <memmove+0x28>
 800b90e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b912:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b916:	e7f8      	b.n	800b90a <memmove+0x12>
 800b918:	4402      	add	r2, r0
 800b91a:	4601      	mov	r1, r0
 800b91c:	428a      	cmp	r2, r1
 800b91e:	d100      	bne.n	800b922 <memmove+0x2a>
 800b920:	bd10      	pop	{r4, pc}
 800b922:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b926:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b92a:	e7f7      	b.n	800b91c <memmove+0x24>

0800b92c <__malloc_lock>:
 800b92c:	4801      	ldr	r0, [pc, #4]	; (800b934 <__malloc_lock+0x8>)
 800b92e:	f000 bc09 	b.w	800c144 <__retarget_lock_acquire_recursive>
 800b932:	bf00      	nop
 800b934:	20000474 	.word	0x20000474

0800b938 <__malloc_unlock>:
 800b938:	4801      	ldr	r0, [pc, #4]	; (800b940 <__malloc_unlock+0x8>)
 800b93a:	f000 bc04 	b.w	800c146 <__retarget_lock_release_recursive>
 800b93e:	bf00      	nop
 800b940:	20000474 	.word	0x20000474

0800b944 <_realloc_r>:
 800b944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b946:	4607      	mov	r7, r0
 800b948:	4614      	mov	r4, r2
 800b94a:	460e      	mov	r6, r1
 800b94c:	b921      	cbnz	r1, 800b958 <_realloc_r+0x14>
 800b94e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b952:	4611      	mov	r1, r2
 800b954:	f7ff bdb2 	b.w	800b4bc <_malloc_r>
 800b958:	b922      	cbnz	r2, 800b964 <_realloc_r+0x20>
 800b95a:	f7ff fd5f 	bl	800b41c <_free_r>
 800b95e:	4625      	mov	r5, r4
 800b960:	4628      	mov	r0, r5
 800b962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b964:	f000 fc54 	bl	800c210 <_malloc_usable_size_r>
 800b968:	42a0      	cmp	r0, r4
 800b96a:	d20f      	bcs.n	800b98c <_realloc_r+0x48>
 800b96c:	4621      	mov	r1, r4
 800b96e:	4638      	mov	r0, r7
 800b970:	f7ff fda4 	bl	800b4bc <_malloc_r>
 800b974:	4605      	mov	r5, r0
 800b976:	2800      	cmp	r0, #0
 800b978:	d0f2      	beq.n	800b960 <_realloc_r+0x1c>
 800b97a:	4631      	mov	r1, r6
 800b97c:	4622      	mov	r2, r4
 800b97e:	f7ff f875 	bl	800aa6c <memcpy>
 800b982:	4631      	mov	r1, r6
 800b984:	4638      	mov	r0, r7
 800b986:	f7ff fd49 	bl	800b41c <_free_r>
 800b98a:	e7e9      	b.n	800b960 <_realloc_r+0x1c>
 800b98c:	4635      	mov	r5, r6
 800b98e:	e7e7      	b.n	800b960 <_realloc_r+0x1c>

0800b990 <__sfputc_r>:
 800b990:	6893      	ldr	r3, [r2, #8]
 800b992:	3b01      	subs	r3, #1
 800b994:	2b00      	cmp	r3, #0
 800b996:	b410      	push	{r4}
 800b998:	6093      	str	r3, [r2, #8]
 800b99a:	da08      	bge.n	800b9ae <__sfputc_r+0x1e>
 800b99c:	6994      	ldr	r4, [r2, #24]
 800b99e:	42a3      	cmp	r3, r4
 800b9a0:	db01      	blt.n	800b9a6 <__sfputc_r+0x16>
 800b9a2:	290a      	cmp	r1, #10
 800b9a4:	d103      	bne.n	800b9ae <__sfputc_r+0x1e>
 800b9a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9aa:	f000 b94b 	b.w	800bc44 <__swbuf_r>
 800b9ae:	6813      	ldr	r3, [r2, #0]
 800b9b0:	1c58      	adds	r0, r3, #1
 800b9b2:	6010      	str	r0, [r2, #0]
 800b9b4:	7019      	strb	r1, [r3, #0]
 800b9b6:	4608      	mov	r0, r1
 800b9b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9bc:	4770      	bx	lr

0800b9be <__sfputs_r>:
 800b9be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9c0:	4606      	mov	r6, r0
 800b9c2:	460f      	mov	r7, r1
 800b9c4:	4614      	mov	r4, r2
 800b9c6:	18d5      	adds	r5, r2, r3
 800b9c8:	42ac      	cmp	r4, r5
 800b9ca:	d101      	bne.n	800b9d0 <__sfputs_r+0x12>
 800b9cc:	2000      	movs	r0, #0
 800b9ce:	e007      	b.n	800b9e0 <__sfputs_r+0x22>
 800b9d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9d4:	463a      	mov	r2, r7
 800b9d6:	4630      	mov	r0, r6
 800b9d8:	f7ff ffda 	bl	800b990 <__sfputc_r>
 800b9dc:	1c43      	adds	r3, r0, #1
 800b9de:	d1f3      	bne.n	800b9c8 <__sfputs_r+0xa>
 800b9e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b9e4 <_vfiprintf_r>:
 800b9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e8:	460d      	mov	r5, r1
 800b9ea:	b09d      	sub	sp, #116	; 0x74
 800b9ec:	4614      	mov	r4, r2
 800b9ee:	4698      	mov	r8, r3
 800b9f0:	4606      	mov	r6, r0
 800b9f2:	b118      	cbz	r0, 800b9fc <_vfiprintf_r+0x18>
 800b9f4:	6983      	ldr	r3, [r0, #24]
 800b9f6:	b90b      	cbnz	r3, 800b9fc <_vfiprintf_r+0x18>
 800b9f8:	f000 fb06 	bl	800c008 <__sinit>
 800b9fc:	4b89      	ldr	r3, [pc, #548]	; (800bc24 <_vfiprintf_r+0x240>)
 800b9fe:	429d      	cmp	r5, r3
 800ba00:	d11b      	bne.n	800ba3a <_vfiprintf_r+0x56>
 800ba02:	6875      	ldr	r5, [r6, #4]
 800ba04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba06:	07d9      	lsls	r1, r3, #31
 800ba08:	d405      	bmi.n	800ba16 <_vfiprintf_r+0x32>
 800ba0a:	89ab      	ldrh	r3, [r5, #12]
 800ba0c:	059a      	lsls	r2, r3, #22
 800ba0e:	d402      	bmi.n	800ba16 <_vfiprintf_r+0x32>
 800ba10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba12:	f000 fb97 	bl	800c144 <__retarget_lock_acquire_recursive>
 800ba16:	89ab      	ldrh	r3, [r5, #12]
 800ba18:	071b      	lsls	r3, r3, #28
 800ba1a:	d501      	bpl.n	800ba20 <_vfiprintf_r+0x3c>
 800ba1c:	692b      	ldr	r3, [r5, #16]
 800ba1e:	b9eb      	cbnz	r3, 800ba5c <_vfiprintf_r+0x78>
 800ba20:	4629      	mov	r1, r5
 800ba22:	4630      	mov	r0, r6
 800ba24:	f000 f960 	bl	800bce8 <__swsetup_r>
 800ba28:	b1c0      	cbz	r0, 800ba5c <_vfiprintf_r+0x78>
 800ba2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba2c:	07dc      	lsls	r4, r3, #31
 800ba2e:	d50e      	bpl.n	800ba4e <_vfiprintf_r+0x6a>
 800ba30:	f04f 30ff 	mov.w	r0, #4294967295
 800ba34:	b01d      	add	sp, #116	; 0x74
 800ba36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba3a:	4b7b      	ldr	r3, [pc, #492]	; (800bc28 <_vfiprintf_r+0x244>)
 800ba3c:	429d      	cmp	r5, r3
 800ba3e:	d101      	bne.n	800ba44 <_vfiprintf_r+0x60>
 800ba40:	68b5      	ldr	r5, [r6, #8]
 800ba42:	e7df      	b.n	800ba04 <_vfiprintf_r+0x20>
 800ba44:	4b79      	ldr	r3, [pc, #484]	; (800bc2c <_vfiprintf_r+0x248>)
 800ba46:	429d      	cmp	r5, r3
 800ba48:	bf08      	it	eq
 800ba4a:	68f5      	ldreq	r5, [r6, #12]
 800ba4c:	e7da      	b.n	800ba04 <_vfiprintf_r+0x20>
 800ba4e:	89ab      	ldrh	r3, [r5, #12]
 800ba50:	0598      	lsls	r0, r3, #22
 800ba52:	d4ed      	bmi.n	800ba30 <_vfiprintf_r+0x4c>
 800ba54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba56:	f000 fb76 	bl	800c146 <__retarget_lock_release_recursive>
 800ba5a:	e7e9      	b.n	800ba30 <_vfiprintf_r+0x4c>
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba60:	2320      	movs	r3, #32
 800ba62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba66:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba6a:	2330      	movs	r3, #48	; 0x30
 800ba6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bc30 <_vfiprintf_r+0x24c>
 800ba70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba74:	f04f 0901 	mov.w	r9, #1
 800ba78:	4623      	mov	r3, r4
 800ba7a:	469a      	mov	sl, r3
 800ba7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba80:	b10a      	cbz	r2, 800ba86 <_vfiprintf_r+0xa2>
 800ba82:	2a25      	cmp	r2, #37	; 0x25
 800ba84:	d1f9      	bne.n	800ba7a <_vfiprintf_r+0x96>
 800ba86:	ebba 0b04 	subs.w	fp, sl, r4
 800ba8a:	d00b      	beq.n	800baa4 <_vfiprintf_r+0xc0>
 800ba8c:	465b      	mov	r3, fp
 800ba8e:	4622      	mov	r2, r4
 800ba90:	4629      	mov	r1, r5
 800ba92:	4630      	mov	r0, r6
 800ba94:	f7ff ff93 	bl	800b9be <__sfputs_r>
 800ba98:	3001      	adds	r0, #1
 800ba9a:	f000 80aa 	beq.w	800bbf2 <_vfiprintf_r+0x20e>
 800ba9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baa0:	445a      	add	r2, fp
 800baa2:	9209      	str	r2, [sp, #36]	; 0x24
 800baa4:	f89a 3000 	ldrb.w	r3, [sl]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f000 80a2 	beq.w	800bbf2 <_vfiprintf_r+0x20e>
 800baae:	2300      	movs	r3, #0
 800bab0:	f04f 32ff 	mov.w	r2, #4294967295
 800bab4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bab8:	f10a 0a01 	add.w	sl, sl, #1
 800babc:	9304      	str	r3, [sp, #16]
 800babe:	9307      	str	r3, [sp, #28]
 800bac0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bac4:	931a      	str	r3, [sp, #104]	; 0x68
 800bac6:	4654      	mov	r4, sl
 800bac8:	2205      	movs	r2, #5
 800baca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bace:	4858      	ldr	r0, [pc, #352]	; (800bc30 <_vfiprintf_r+0x24c>)
 800bad0:	f7f4 fb96 	bl	8000200 <memchr>
 800bad4:	9a04      	ldr	r2, [sp, #16]
 800bad6:	b9d8      	cbnz	r0, 800bb10 <_vfiprintf_r+0x12c>
 800bad8:	06d1      	lsls	r1, r2, #27
 800bada:	bf44      	itt	mi
 800badc:	2320      	movmi	r3, #32
 800bade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bae2:	0713      	lsls	r3, r2, #28
 800bae4:	bf44      	itt	mi
 800bae6:	232b      	movmi	r3, #43	; 0x2b
 800bae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baec:	f89a 3000 	ldrb.w	r3, [sl]
 800baf0:	2b2a      	cmp	r3, #42	; 0x2a
 800baf2:	d015      	beq.n	800bb20 <_vfiprintf_r+0x13c>
 800baf4:	9a07      	ldr	r2, [sp, #28]
 800baf6:	4654      	mov	r4, sl
 800baf8:	2000      	movs	r0, #0
 800bafa:	f04f 0c0a 	mov.w	ip, #10
 800bafe:	4621      	mov	r1, r4
 800bb00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb04:	3b30      	subs	r3, #48	; 0x30
 800bb06:	2b09      	cmp	r3, #9
 800bb08:	d94e      	bls.n	800bba8 <_vfiprintf_r+0x1c4>
 800bb0a:	b1b0      	cbz	r0, 800bb3a <_vfiprintf_r+0x156>
 800bb0c:	9207      	str	r2, [sp, #28]
 800bb0e:	e014      	b.n	800bb3a <_vfiprintf_r+0x156>
 800bb10:	eba0 0308 	sub.w	r3, r0, r8
 800bb14:	fa09 f303 	lsl.w	r3, r9, r3
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	9304      	str	r3, [sp, #16]
 800bb1c:	46a2      	mov	sl, r4
 800bb1e:	e7d2      	b.n	800bac6 <_vfiprintf_r+0xe2>
 800bb20:	9b03      	ldr	r3, [sp, #12]
 800bb22:	1d19      	adds	r1, r3, #4
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	9103      	str	r1, [sp, #12]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	bfbb      	ittet	lt
 800bb2c:	425b      	neglt	r3, r3
 800bb2e:	f042 0202 	orrlt.w	r2, r2, #2
 800bb32:	9307      	strge	r3, [sp, #28]
 800bb34:	9307      	strlt	r3, [sp, #28]
 800bb36:	bfb8      	it	lt
 800bb38:	9204      	strlt	r2, [sp, #16]
 800bb3a:	7823      	ldrb	r3, [r4, #0]
 800bb3c:	2b2e      	cmp	r3, #46	; 0x2e
 800bb3e:	d10c      	bne.n	800bb5a <_vfiprintf_r+0x176>
 800bb40:	7863      	ldrb	r3, [r4, #1]
 800bb42:	2b2a      	cmp	r3, #42	; 0x2a
 800bb44:	d135      	bne.n	800bbb2 <_vfiprintf_r+0x1ce>
 800bb46:	9b03      	ldr	r3, [sp, #12]
 800bb48:	1d1a      	adds	r2, r3, #4
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	9203      	str	r2, [sp, #12]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	bfb8      	it	lt
 800bb52:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb56:	3402      	adds	r4, #2
 800bb58:	9305      	str	r3, [sp, #20]
 800bb5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bc40 <_vfiprintf_r+0x25c>
 800bb5e:	7821      	ldrb	r1, [r4, #0]
 800bb60:	2203      	movs	r2, #3
 800bb62:	4650      	mov	r0, sl
 800bb64:	f7f4 fb4c 	bl	8000200 <memchr>
 800bb68:	b140      	cbz	r0, 800bb7c <_vfiprintf_r+0x198>
 800bb6a:	2340      	movs	r3, #64	; 0x40
 800bb6c:	eba0 000a 	sub.w	r0, r0, sl
 800bb70:	fa03 f000 	lsl.w	r0, r3, r0
 800bb74:	9b04      	ldr	r3, [sp, #16]
 800bb76:	4303      	orrs	r3, r0
 800bb78:	3401      	adds	r4, #1
 800bb7a:	9304      	str	r3, [sp, #16]
 800bb7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb80:	482c      	ldr	r0, [pc, #176]	; (800bc34 <_vfiprintf_r+0x250>)
 800bb82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb86:	2206      	movs	r2, #6
 800bb88:	f7f4 fb3a 	bl	8000200 <memchr>
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	d03f      	beq.n	800bc10 <_vfiprintf_r+0x22c>
 800bb90:	4b29      	ldr	r3, [pc, #164]	; (800bc38 <_vfiprintf_r+0x254>)
 800bb92:	bb1b      	cbnz	r3, 800bbdc <_vfiprintf_r+0x1f8>
 800bb94:	9b03      	ldr	r3, [sp, #12]
 800bb96:	3307      	adds	r3, #7
 800bb98:	f023 0307 	bic.w	r3, r3, #7
 800bb9c:	3308      	adds	r3, #8
 800bb9e:	9303      	str	r3, [sp, #12]
 800bba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bba2:	443b      	add	r3, r7
 800bba4:	9309      	str	r3, [sp, #36]	; 0x24
 800bba6:	e767      	b.n	800ba78 <_vfiprintf_r+0x94>
 800bba8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbac:	460c      	mov	r4, r1
 800bbae:	2001      	movs	r0, #1
 800bbb0:	e7a5      	b.n	800bafe <_vfiprintf_r+0x11a>
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	3401      	adds	r4, #1
 800bbb6:	9305      	str	r3, [sp, #20]
 800bbb8:	4619      	mov	r1, r3
 800bbba:	f04f 0c0a 	mov.w	ip, #10
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbc4:	3a30      	subs	r2, #48	; 0x30
 800bbc6:	2a09      	cmp	r2, #9
 800bbc8:	d903      	bls.n	800bbd2 <_vfiprintf_r+0x1ee>
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d0c5      	beq.n	800bb5a <_vfiprintf_r+0x176>
 800bbce:	9105      	str	r1, [sp, #20]
 800bbd0:	e7c3      	b.n	800bb5a <_vfiprintf_r+0x176>
 800bbd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	2301      	movs	r3, #1
 800bbda:	e7f0      	b.n	800bbbe <_vfiprintf_r+0x1da>
 800bbdc:	ab03      	add	r3, sp, #12
 800bbde:	9300      	str	r3, [sp, #0]
 800bbe0:	462a      	mov	r2, r5
 800bbe2:	4b16      	ldr	r3, [pc, #88]	; (800bc3c <_vfiprintf_r+0x258>)
 800bbe4:	a904      	add	r1, sp, #16
 800bbe6:	4630      	mov	r0, r6
 800bbe8:	f7fc f886 	bl	8007cf8 <_printf_float>
 800bbec:	4607      	mov	r7, r0
 800bbee:	1c78      	adds	r0, r7, #1
 800bbf0:	d1d6      	bne.n	800bba0 <_vfiprintf_r+0x1bc>
 800bbf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbf4:	07d9      	lsls	r1, r3, #31
 800bbf6:	d405      	bmi.n	800bc04 <_vfiprintf_r+0x220>
 800bbf8:	89ab      	ldrh	r3, [r5, #12]
 800bbfa:	059a      	lsls	r2, r3, #22
 800bbfc:	d402      	bmi.n	800bc04 <_vfiprintf_r+0x220>
 800bbfe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc00:	f000 faa1 	bl	800c146 <__retarget_lock_release_recursive>
 800bc04:	89ab      	ldrh	r3, [r5, #12]
 800bc06:	065b      	lsls	r3, r3, #25
 800bc08:	f53f af12 	bmi.w	800ba30 <_vfiprintf_r+0x4c>
 800bc0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc0e:	e711      	b.n	800ba34 <_vfiprintf_r+0x50>
 800bc10:	ab03      	add	r3, sp, #12
 800bc12:	9300      	str	r3, [sp, #0]
 800bc14:	462a      	mov	r2, r5
 800bc16:	4b09      	ldr	r3, [pc, #36]	; (800bc3c <_vfiprintf_r+0x258>)
 800bc18:	a904      	add	r1, sp, #16
 800bc1a:	4630      	mov	r0, r6
 800bc1c:	f7fc fb10 	bl	8008240 <_printf_i>
 800bc20:	e7e4      	b.n	800bbec <_vfiprintf_r+0x208>
 800bc22:	bf00      	nop
 800bc24:	080323bc 	.word	0x080323bc
 800bc28:	080323dc 	.word	0x080323dc
 800bc2c:	0803239c 	.word	0x0803239c
 800bc30:	0803234c 	.word	0x0803234c
 800bc34:	08032356 	.word	0x08032356
 800bc38:	08007cf9 	.word	0x08007cf9
 800bc3c:	0800b9bf 	.word	0x0800b9bf
 800bc40:	08032352 	.word	0x08032352

0800bc44 <__swbuf_r>:
 800bc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc46:	460e      	mov	r6, r1
 800bc48:	4614      	mov	r4, r2
 800bc4a:	4605      	mov	r5, r0
 800bc4c:	b118      	cbz	r0, 800bc56 <__swbuf_r+0x12>
 800bc4e:	6983      	ldr	r3, [r0, #24]
 800bc50:	b90b      	cbnz	r3, 800bc56 <__swbuf_r+0x12>
 800bc52:	f000 f9d9 	bl	800c008 <__sinit>
 800bc56:	4b21      	ldr	r3, [pc, #132]	; (800bcdc <__swbuf_r+0x98>)
 800bc58:	429c      	cmp	r4, r3
 800bc5a:	d12b      	bne.n	800bcb4 <__swbuf_r+0x70>
 800bc5c:	686c      	ldr	r4, [r5, #4]
 800bc5e:	69a3      	ldr	r3, [r4, #24]
 800bc60:	60a3      	str	r3, [r4, #8]
 800bc62:	89a3      	ldrh	r3, [r4, #12]
 800bc64:	071a      	lsls	r2, r3, #28
 800bc66:	d52f      	bpl.n	800bcc8 <__swbuf_r+0x84>
 800bc68:	6923      	ldr	r3, [r4, #16]
 800bc6a:	b36b      	cbz	r3, 800bcc8 <__swbuf_r+0x84>
 800bc6c:	6923      	ldr	r3, [r4, #16]
 800bc6e:	6820      	ldr	r0, [r4, #0]
 800bc70:	1ac0      	subs	r0, r0, r3
 800bc72:	6963      	ldr	r3, [r4, #20]
 800bc74:	b2f6      	uxtb	r6, r6
 800bc76:	4283      	cmp	r3, r0
 800bc78:	4637      	mov	r7, r6
 800bc7a:	dc04      	bgt.n	800bc86 <__swbuf_r+0x42>
 800bc7c:	4621      	mov	r1, r4
 800bc7e:	4628      	mov	r0, r5
 800bc80:	f000 f92e 	bl	800bee0 <_fflush_r>
 800bc84:	bb30      	cbnz	r0, 800bcd4 <__swbuf_r+0x90>
 800bc86:	68a3      	ldr	r3, [r4, #8]
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	60a3      	str	r3, [r4, #8]
 800bc8c:	6823      	ldr	r3, [r4, #0]
 800bc8e:	1c5a      	adds	r2, r3, #1
 800bc90:	6022      	str	r2, [r4, #0]
 800bc92:	701e      	strb	r6, [r3, #0]
 800bc94:	6963      	ldr	r3, [r4, #20]
 800bc96:	3001      	adds	r0, #1
 800bc98:	4283      	cmp	r3, r0
 800bc9a:	d004      	beq.n	800bca6 <__swbuf_r+0x62>
 800bc9c:	89a3      	ldrh	r3, [r4, #12]
 800bc9e:	07db      	lsls	r3, r3, #31
 800bca0:	d506      	bpl.n	800bcb0 <__swbuf_r+0x6c>
 800bca2:	2e0a      	cmp	r6, #10
 800bca4:	d104      	bne.n	800bcb0 <__swbuf_r+0x6c>
 800bca6:	4621      	mov	r1, r4
 800bca8:	4628      	mov	r0, r5
 800bcaa:	f000 f919 	bl	800bee0 <_fflush_r>
 800bcae:	b988      	cbnz	r0, 800bcd4 <__swbuf_r+0x90>
 800bcb0:	4638      	mov	r0, r7
 800bcb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcb4:	4b0a      	ldr	r3, [pc, #40]	; (800bce0 <__swbuf_r+0x9c>)
 800bcb6:	429c      	cmp	r4, r3
 800bcb8:	d101      	bne.n	800bcbe <__swbuf_r+0x7a>
 800bcba:	68ac      	ldr	r4, [r5, #8]
 800bcbc:	e7cf      	b.n	800bc5e <__swbuf_r+0x1a>
 800bcbe:	4b09      	ldr	r3, [pc, #36]	; (800bce4 <__swbuf_r+0xa0>)
 800bcc0:	429c      	cmp	r4, r3
 800bcc2:	bf08      	it	eq
 800bcc4:	68ec      	ldreq	r4, [r5, #12]
 800bcc6:	e7ca      	b.n	800bc5e <__swbuf_r+0x1a>
 800bcc8:	4621      	mov	r1, r4
 800bcca:	4628      	mov	r0, r5
 800bccc:	f000 f80c 	bl	800bce8 <__swsetup_r>
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	d0cb      	beq.n	800bc6c <__swbuf_r+0x28>
 800bcd4:	f04f 37ff 	mov.w	r7, #4294967295
 800bcd8:	e7ea      	b.n	800bcb0 <__swbuf_r+0x6c>
 800bcda:	bf00      	nop
 800bcdc:	080323bc 	.word	0x080323bc
 800bce0:	080323dc 	.word	0x080323dc
 800bce4:	0803239c 	.word	0x0803239c

0800bce8 <__swsetup_r>:
 800bce8:	4b32      	ldr	r3, [pc, #200]	; (800bdb4 <__swsetup_r+0xcc>)
 800bcea:	b570      	push	{r4, r5, r6, lr}
 800bcec:	681d      	ldr	r5, [r3, #0]
 800bcee:	4606      	mov	r6, r0
 800bcf0:	460c      	mov	r4, r1
 800bcf2:	b125      	cbz	r5, 800bcfe <__swsetup_r+0x16>
 800bcf4:	69ab      	ldr	r3, [r5, #24]
 800bcf6:	b913      	cbnz	r3, 800bcfe <__swsetup_r+0x16>
 800bcf8:	4628      	mov	r0, r5
 800bcfa:	f000 f985 	bl	800c008 <__sinit>
 800bcfe:	4b2e      	ldr	r3, [pc, #184]	; (800bdb8 <__swsetup_r+0xd0>)
 800bd00:	429c      	cmp	r4, r3
 800bd02:	d10f      	bne.n	800bd24 <__swsetup_r+0x3c>
 800bd04:	686c      	ldr	r4, [r5, #4]
 800bd06:	89a3      	ldrh	r3, [r4, #12]
 800bd08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd0c:	0719      	lsls	r1, r3, #28
 800bd0e:	d42c      	bmi.n	800bd6a <__swsetup_r+0x82>
 800bd10:	06dd      	lsls	r5, r3, #27
 800bd12:	d411      	bmi.n	800bd38 <__swsetup_r+0x50>
 800bd14:	2309      	movs	r3, #9
 800bd16:	6033      	str	r3, [r6, #0]
 800bd18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bd1c:	81a3      	strh	r3, [r4, #12]
 800bd1e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd22:	e03e      	b.n	800bda2 <__swsetup_r+0xba>
 800bd24:	4b25      	ldr	r3, [pc, #148]	; (800bdbc <__swsetup_r+0xd4>)
 800bd26:	429c      	cmp	r4, r3
 800bd28:	d101      	bne.n	800bd2e <__swsetup_r+0x46>
 800bd2a:	68ac      	ldr	r4, [r5, #8]
 800bd2c:	e7eb      	b.n	800bd06 <__swsetup_r+0x1e>
 800bd2e:	4b24      	ldr	r3, [pc, #144]	; (800bdc0 <__swsetup_r+0xd8>)
 800bd30:	429c      	cmp	r4, r3
 800bd32:	bf08      	it	eq
 800bd34:	68ec      	ldreq	r4, [r5, #12]
 800bd36:	e7e6      	b.n	800bd06 <__swsetup_r+0x1e>
 800bd38:	0758      	lsls	r0, r3, #29
 800bd3a:	d512      	bpl.n	800bd62 <__swsetup_r+0x7a>
 800bd3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd3e:	b141      	cbz	r1, 800bd52 <__swsetup_r+0x6a>
 800bd40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd44:	4299      	cmp	r1, r3
 800bd46:	d002      	beq.n	800bd4e <__swsetup_r+0x66>
 800bd48:	4630      	mov	r0, r6
 800bd4a:	f7ff fb67 	bl	800b41c <_free_r>
 800bd4e:	2300      	movs	r3, #0
 800bd50:	6363      	str	r3, [r4, #52]	; 0x34
 800bd52:	89a3      	ldrh	r3, [r4, #12]
 800bd54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd58:	81a3      	strh	r3, [r4, #12]
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	6063      	str	r3, [r4, #4]
 800bd5e:	6923      	ldr	r3, [r4, #16]
 800bd60:	6023      	str	r3, [r4, #0]
 800bd62:	89a3      	ldrh	r3, [r4, #12]
 800bd64:	f043 0308 	orr.w	r3, r3, #8
 800bd68:	81a3      	strh	r3, [r4, #12]
 800bd6a:	6923      	ldr	r3, [r4, #16]
 800bd6c:	b94b      	cbnz	r3, 800bd82 <__swsetup_r+0x9a>
 800bd6e:	89a3      	ldrh	r3, [r4, #12]
 800bd70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bd74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd78:	d003      	beq.n	800bd82 <__swsetup_r+0x9a>
 800bd7a:	4621      	mov	r1, r4
 800bd7c:	4630      	mov	r0, r6
 800bd7e:	f000 fa07 	bl	800c190 <__smakebuf_r>
 800bd82:	89a0      	ldrh	r0, [r4, #12]
 800bd84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bd88:	f010 0301 	ands.w	r3, r0, #1
 800bd8c:	d00a      	beq.n	800bda4 <__swsetup_r+0xbc>
 800bd8e:	2300      	movs	r3, #0
 800bd90:	60a3      	str	r3, [r4, #8]
 800bd92:	6963      	ldr	r3, [r4, #20]
 800bd94:	425b      	negs	r3, r3
 800bd96:	61a3      	str	r3, [r4, #24]
 800bd98:	6923      	ldr	r3, [r4, #16]
 800bd9a:	b943      	cbnz	r3, 800bdae <__swsetup_r+0xc6>
 800bd9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bda0:	d1ba      	bne.n	800bd18 <__swsetup_r+0x30>
 800bda2:	bd70      	pop	{r4, r5, r6, pc}
 800bda4:	0781      	lsls	r1, r0, #30
 800bda6:	bf58      	it	pl
 800bda8:	6963      	ldrpl	r3, [r4, #20]
 800bdaa:	60a3      	str	r3, [r4, #8]
 800bdac:	e7f4      	b.n	800bd98 <__swsetup_r+0xb0>
 800bdae:	2000      	movs	r0, #0
 800bdb0:	e7f7      	b.n	800bda2 <__swsetup_r+0xba>
 800bdb2:	bf00      	nop
 800bdb4:	20000020 	.word	0x20000020
 800bdb8:	080323bc 	.word	0x080323bc
 800bdbc:	080323dc 	.word	0x080323dc
 800bdc0:	0803239c 	.word	0x0803239c

0800bdc4 <abort>:
 800bdc4:	b508      	push	{r3, lr}
 800bdc6:	2006      	movs	r0, #6
 800bdc8:	f000 fa52 	bl	800c270 <raise>
 800bdcc:	2001      	movs	r0, #1
 800bdce:	f7f6 fb5f 	bl	8002490 <_exit>
	...

0800bdd4 <__sflush_r>:
 800bdd4:	898a      	ldrh	r2, [r1, #12]
 800bdd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdda:	4605      	mov	r5, r0
 800bddc:	0710      	lsls	r0, r2, #28
 800bdde:	460c      	mov	r4, r1
 800bde0:	d458      	bmi.n	800be94 <__sflush_r+0xc0>
 800bde2:	684b      	ldr	r3, [r1, #4]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	dc05      	bgt.n	800bdf4 <__sflush_r+0x20>
 800bde8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	dc02      	bgt.n	800bdf4 <__sflush_r+0x20>
 800bdee:	2000      	movs	r0, #0
 800bdf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdf6:	2e00      	cmp	r6, #0
 800bdf8:	d0f9      	beq.n	800bdee <__sflush_r+0x1a>
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be00:	682f      	ldr	r7, [r5, #0]
 800be02:	602b      	str	r3, [r5, #0]
 800be04:	d032      	beq.n	800be6c <__sflush_r+0x98>
 800be06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be08:	89a3      	ldrh	r3, [r4, #12]
 800be0a:	075a      	lsls	r2, r3, #29
 800be0c:	d505      	bpl.n	800be1a <__sflush_r+0x46>
 800be0e:	6863      	ldr	r3, [r4, #4]
 800be10:	1ac0      	subs	r0, r0, r3
 800be12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be14:	b10b      	cbz	r3, 800be1a <__sflush_r+0x46>
 800be16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800be18:	1ac0      	subs	r0, r0, r3
 800be1a:	2300      	movs	r3, #0
 800be1c:	4602      	mov	r2, r0
 800be1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be20:	6a21      	ldr	r1, [r4, #32]
 800be22:	4628      	mov	r0, r5
 800be24:	47b0      	blx	r6
 800be26:	1c43      	adds	r3, r0, #1
 800be28:	89a3      	ldrh	r3, [r4, #12]
 800be2a:	d106      	bne.n	800be3a <__sflush_r+0x66>
 800be2c:	6829      	ldr	r1, [r5, #0]
 800be2e:	291d      	cmp	r1, #29
 800be30:	d82c      	bhi.n	800be8c <__sflush_r+0xb8>
 800be32:	4a2a      	ldr	r2, [pc, #168]	; (800bedc <__sflush_r+0x108>)
 800be34:	40ca      	lsrs	r2, r1
 800be36:	07d6      	lsls	r6, r2, #31
 800be38:	d528      	bpl.n	800be8c <__sflush_r+0xb8>
 800be3a:	2200      	movs	r2, #0
 800be3c:	6062      	str	r2, [r4, #4]
 800be3e:	04d9      	lsls	r1, r3, #19
 800be40:	6922      	ldr	r2, [r4, #16]
 800be42:	6022      	str	r2, [r4, #0]
 800be44:	d504      	bpl.n	800be50 <__sflush_r+0x7c>
 800be46:	1c42      	adds	r2, r0, #1
 800be48:	d101      	bne.n	800be4e <__sflush_r+0x7a>
 800be4a:	682b      	ldr	r3, [r5, #0]
 800be4c:	b903      	cbnz	r3, 800be50 <__sflush_r+0x7c>
 800be4e:	6560      	str	r0, [r4, #84]	; 0x54
 800be50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be52:	602f      	str	r7, [r5, #0]
 800be54:	2900      	cmp	r1, #0
 800be56:	d0ca      	beq.n	800bdee <__sflush_r+0x1a>
 800be58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be5c:	4299      	cmp	r1, r3
 800be5e:	d002      	beq.n	800be66 <__sflush_r+0x92>
 800be60:	4628      	mov	r0, r5
 800be62:	f7ff fadb 	bl	800b41c <_free_r>
 800be66:	2000      	movs	r0, #0
 800be68:	6360      	str	r0, [r4, #52]	; 0x34
 800be6a:	e7c1      	b.n	800bdf0 <__sflush_r+0x1c>
 800be6c:	6a21      	ldr	r1, [r4, #32]
 800be6e:	2301      	movs	r3, #1
 800be70:	4628      	mov	r0, r5
 800be72:	47b0      	blx	r6
 800be74:	1c41      	adds	r1, r0, #1
 800be76:	d1c7      	bne.n	800be08 <__sflush_r+0x34>
 800be78:	682b      	ldr	r3, [r5, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d0c4      	beq.n	800be08 <__sflush_r+0x34>
 800be7e:	2b1d      	cmp	r3, #29
 800be80:	d001      	beq.n	800be86 <__sflush_r+0xb2>
 800be82:	2b16      	cmp	r3, #22
 800be84:	d101      	bne.n	800be8a <__sflush_r+0xb6>
 800be86:	602f      	str	r7, [r5, #0]
 800be88:	e7b1      	b.n	800bdee <__sflush_r+0x1a>
 800be8a:	89a3      	ldrh	r3, [r4, #12]
 800be8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be90:	81a3      	strh	r3, [r4, #12]
 800be92:	e7ad      	b.n	800bdf0 <__sflush_r+0x1c>
 800be94:	690f      	ldr	r7, [r1, #16]
 800be96:	2f00      	cmp	r7, #0
 800be98:	d0a9      	beq.n	800bdee <__sflush_r+0x1a>
 800be9a:	0793      	lsls	r3, r2, #30
 800be9c:	680e      	ldr	r6, [r1, #0]
 800be9e:	bf08      	it	eq
 800bea0:	694b      	ldreq	r3, [r1, #20]
 800bea2:	600f      	str	r7, [r1, #0]
 800bea4:	bf18      	it	ne
 800bea6:	2300      	movne	r3, #0
 800bea8:	eba6 0807 	sub.w	r8, r6, r7
 800beac:	608b      	str	r3, [r1, #8]
 800beae:	f1b8 0f00 	cmp.w	r8, #0
 800beb2:	dd9c      	ble.n	800bdee <__sflush_r+0x1a>
 800beb4:	6a21      	ldr	r1, [r4, #32]
 800beb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800beb8:	4643      	mov	r3, r8
 800beba:	463a      	mov	r2, r7
 800bebc:	4628      	mov	r0, r5
 800bebe:	47b0      	blx	r6
 800bec0:	2800      	cmp	r0, #0
 800bec2:	dc06      	bgt.n	800bed2 <__sflush_r+0xfe>
 800bec4:	89a3      	ldrh	r3, [r4, #12]
 800bec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800beca:	81a3      	strh	r3, [r4, #12]
 800becc:	f04f 30ff 	mov.w	r0, #4294967295
 800bed0:	e78e      	b.n	800bdf0 <__sflush_r+0x1c>
 800bed2:	4407      	add	r7, r0
 800bed4:	eba8 0800 	sub.w	r8, r8, r0
 800bed8:	e7e9      	b.n	800beae <__sflush_r+0xda>
 800beda:	bf00      	nop
 800bedc:	20400001 	.word	0x20400001

0800bee0 <_fflush_r>:
 800bee0:	b538      	push	{r3, r4, r5, lr}
 800bee2:	690b      	ldr	r3, [r1, #16]
 800bee4:	4605      	mov	r5, r0
 800bee6:	460c      	mov	r4, r1
 800bee8:	b913      	cbnz	r3, 800bef0 <_fflush_r+0x10>
 800beea:	2500      	movs	r5, #0
 800beec:	4628      	mov	r0, r5
 800beee:	bd38      	pop	{r3, r4, r5, pc}
 800bef0:	b118      	cbz	r0, 800befa <_fflush_r+0x1a>
 800bef2:	6983      	ldr	r3, [r0, #24]
 800bef4:	b90b      	cbnz	r3, 800befa <_fflush_r+0x1a>
 800bef6:	f000 f887 	bl	800c008 <__sinit>
 800befa:	4b14      	ldr	r3, [pc, #80]	; (800bf4c <_fflush_r+0x6c>)
 800befc:	429c      	cmp	r4, r3
 800befe:	d11b      	bne.n	800bf38 <_fflush_r+0x58>
 800bf00:	686c      	ldr	r4, [r5, #4]
 800bf02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d0ef      	beq.n	800beea <_fflush_r+0xa>
 800bf0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf0c:	07d0      	lsls	r0, r2, #31
 800bf0e:	d404      	bmi.n	800bf1a <_fflush_r+0x3a>
 800bf10:	0599      	lsls	r1, r3, #22
 800bf12:	d402      	bmi.n	800bf1a <_fflush_r+0x3a>
 800bf14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf16:	f000 f915 	bl	800c144 <__retarget_lock_acquire_recursive>
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	4621      	mov	r1, r4
 800bf1e:	f7ff ff59 	bl	800bdd4 <__sflush_r>
 800bf22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bf24:	07da      	lsls	r2, r3, #31
 800bf26:	4605      	mov	r5, r0
 800bf28:	d4e0      	bmi.n	800beec <_fflush_r+0xc>
 800bf2a:	89a3      	ldrh	r3, [r4, #12]
 800bf2c:	059b      	lsls	r3, r3, #22
 800bf2e:	d4dd      	bmi.n	800beec <_fflush_r+0xc>
 800bf30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf32:	f000 f908 	bl	800c146 <__retarget_lock_release_recursive>
 800bf36:	e7d9      	b.n	800beec <_fflush_r+0xc>
 800bf38:	4b05      	ldr	r3, [pc, #20]	; (800bf50 <_fflush_r+0x70>)
 800bf3a:	429c      	cmp	r4, r3
 800bf3c:	d101      	bne.n	800bf42 <_fflush_r+0x62>
 800bf3e:	68ac      	ldr	r4, [r5, #8]
 800bf40:	e7df      	b.n	800bf02 <_fflush_r+0x22>
 800bf42:	4b04      	ldr	r3, [pc, #16]	; (800bf54 <_fflush_r+0x74>)
 800bf44:	429c      	cmp	r4, r3
 800bf46:	bf08      	it	eq
 800bf48:	68ec      	ldreq	r4, [r5, #12]
 800bf4a:	e7da      	b.n	800bf02 <_fflush_r+0x22>
 800bf4c:	080323bc 	.word	0x080323bc
 800bf50:	080323dc 	.word	0x080323dc
 800bf54:	0803239c 	.word	0x0803239c

0800bf58 <std>:
 800bf58:	2300      	movs	r3, #0
 800bf5a:	b510      	push	{r4, lr}
 800bf5c:	4604      	mov	r4, r0
 800bf5e:	e9c0 3300 	strd	r3, r3, [r0]
 800bf62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf66:	6083      	str	r3, [r0, #8]
 800bf68:	8181      	strh	r1, [r0, #12]
 800bf6a:	6643      	str	r3, [r0, #100]	; 0x64
 800bf6c:	81c2      	strh	r2, [r0, #14]
 800bf6e:	6183      	str	r3, [r0, #24]
 800bf70:	4619      	mov	r1, r3
 800bf72:	2208      	movs	r2, #8
 800bf74:	305c      	adds	r0, #92	; 0x5c
 800bf76:	f7fb fe17 	bl	8007ba8 <memset>
 800bf7a:	4b05      	ldr	r3, [pc, #20]	; (800bf90 <std+0x38>)
 800bf7c:	6263      	str	r3, [r4, #36]	; 0x24
 800bf7e:	4b05      	ldr	r3, [pc, #20]	; (800bf94 <std+0x3c>)
 800bf80:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf82:	4b05      	ldr	r3, [pc, #20]	; (800bf98 <std+0x40>)
 800bf84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf86:	4b05      	ldr	r3, [pc, #20]	; (800bf9c <std+0x44>)
 800bf88:	6224      	str	r4, [r4, #32]
 800bf8a:	6323      	str	r3, [r4, #48]	; 0x30
 800bf8c:	bd10      	pop	{r4, pc}
 800bf8e:	bf00      	nop
 800bf90:	0800c2a9 	.word	0x0800c2a9
 800bf94:	0800c2cb 	.word	0x0800c2cb
 800bf98:	0800c303 	.word	0x0800c303
 800bf9c:	0800c327 	.word	0x0800c327

0800bfa0 <_cleanup_r>:
 800bfa0:	4901      	ldr	r1, [pc, #4]	; (800bfa8 <_cleanup_r+0x8>)
 800bfa2:	f000 b8af 	b.w	800c104 <_fwalk_reent>
 800bfa6:	bf00      	nop
 800bfa8:	0800bee1 	.word	0x0800bee1

0800bfac <__sfmoreglue>:
 800bfac:	b570      	push	{r4, r5, r6, lr}
 800bfae:	1e4a      	subs	r2, r1, #1
 800bfb0:	2568      	movs	r5, #104	; 0x68
 800bfb2:	4355      	muls	r5, r2
 800bfb4:	460e      	mov	r6, r1
 800bfb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bfba:	f7ff fa7f 	bl	800b4bc <_malloc_r>
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	b140      	cbz	r0, 800bfd4 <__sfmoreglue+0x28>
 800bfc2:	2100      	movs	r1, #0
 800bfc4:	e9c0 1600 	strd	r1, r6, [r0]
 800bfc8:	300c      	adds	r0, #12
 800bfca:	60a0      	str	r0, [r4, #8]
 800bfcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bfd0:	f7fb fdea 	bl	8007ba8 <memset>
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	bd70      	pop	{r4, r5, r6, pc}

0800bfd8 <__sfp_lock_acquire>:
 800bfd8:	4801      	ldr	r0, [pc, #4]	; (800bfe0 <__sfp_lock_acquire+0x8>)
 800bfda:	f000 b8b3 	b.w	800c144 <__retarget_lock_acquire_recursive>
 800bfde:	bf00      	nop
 800bfe0:	20000478 	.word	0x20000478

0800bfe4 <__sfp_lock_release>:
 800bfe4:	4801      	ldr	r0, [pc, #4]	; (800bfec <__sfp_lock_release+0x8>)
 800bfe6:	f000 b8ae 	b.w	800c146 <__retarget_lock_release_recursive>
 800bfea:	bf00      	nop
 800bfec:	20000478 	.word	0x20000478

0800bff0 <__sinit_lock_acquire>:
 800bff0:	4801      	ldr	r0, [pc, #4]	; (800bff8 <__sinit_lock_acquire+0x8>)
 800bff2:	f000 b8a7 	b.w	800c144 <__retarget_lock_acquire_recursive>
 800bff6:	bf00      	nop
 800bff8:	20000473 	.word	0x20000473

0800bffc <__sinit_lock_release>:
 800bffc:	4801      	ldr	r0, [pc, #4]	; (800c004 <__sinit_lock_release+0x8>)
 800bffe:	f000 b8a2 	b.w	800c146 <__retarget_lock_release_recursive>
 800c002:	bf00      	nop
 800c004:	20000473 	.word	0x20000473

0800c008 <__sinit>:
 800c008:	b510      	push	{r4, lr}
 800c00a:	4604      	mov	r4, r0
 800c00c:	f7ff fff0 	bl	800bff0 <__sinit_lock_acquire>
 800c010:	69a3      	ldr	r3, [r4, #24]
 800c012:	b11b      	cbz	r3, 800c01c <__sinit+0x14>
 800c014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c018:	f7ff bff0 	b.w	800bffc <__sinit_lock_release>
 800c01c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c020:	6523      	str	r3, [r4, #80]	; 0x50
 800c022:	4b13      	ldr	r3, [pc, #76]	; (800c070 <__sinit+0x68>)
 800c024:	4a13      	ldr	r2, [pc, #76]	; (800c074 <__sinit+0x6c>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	62a2      	str	r2, [r4, #40]	; 0x28
 800c02a:	42a3      	cmp	r3, r4
 800c02c:	bf04      	itt	eq
 800c02e:	2301      	moveq	r3, #1
 800c030:	61a3      	streq	r3, [r4, #24]
 800c032:	4620      	mov	r0, r4
 800c034:	f000 f820 	bl	800c078 <__sfp>
 800c038:	6060      	str	r0, [r4, #4]
 800c03a:	4620      	mov	r0, r4
 800c03c:	f000 f81c 	bl	800c078 <__sfp>
 800c040:	60a0      	str	r0, [r4, #8]
 800c042:	4620      	mov	r0, r4
 800c044:	f000 f818 	bl	800c078 <__sfp>
 800c048:	2200      	movs	r2, #0
 800c04a:	60e0      	str	r0, [r4, #12]
 800c04c:	2104      	movs	r1, #4
 800c04e:	6860      	ldr	r0, [r4, #4]
 800c050:	f7ff ff82 	bl	800bf58 <std>
 800c054:	68a0      	ldr	r0, [r4, #8]
 800c056:	2201      	movs	r2, #1
 800c058:	2109      	movs	r1, #9
 800c05a:	f7ff ff7d 	bl	800bf58 <std>
 800c05e:	68e0      	ldr	r0, [r4, #12]
 800c060:	2202      	movs	r2, #2
 800c062:	2112      	movs	r1, #18
 800c064:	f7ff ff78 	bl	800bf58 <std>
 800c068:	2301      	movs	r3, #1
 800c06a:	61a3      	str	r3, [r4, #24]
 800c06c:	e7d2      	b.n	800c014 <__sinit+0xc>
 800c06e:	bf00      	nop
 800c070:	08031f44 	.word	0x08031f44
 800c074:	0800bfa1 	.word	0x0800bfa1

0800c078 <__sfp>:
 800c078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07a:	4607      	mov	r7, r0
 800c07c:	f7ff ffac 	bl	800bfd8 <__sfp_lock_acquire>
 800c080:	4b1e      	ldr	r3, [pc, #120]	; (800c0fc <__sfp+0x84>)
 800c082:	681e      	ldr	r6, [r3, #0]
 800c084:	69b3      	ldr	r3, [r6, #24]
 800c086:	b913      	cbnz	r3, 800c08e <__sfp+0x16>
 800c088:	4630      	mov	r0, r6
 800c08a:	f7ff ffbd 	bl	800c008 <__sinit>
 800c08e:	3648      	adds	r6, #72	; 0x48
 800c090:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c094:	3b01      	subs	r3, #1
 800c096:	d503      	bpl.n	800c0a0 <__sfp+0x28>
 800c098:	6833      	ldr	r3, [r6, #0]
 800c09a:	b30b      	cbz	r3, 800c0e0 <__sfp+0x68>
 800c09c:	6836      	ldr	r6, [r6, #0]
 800c09e:	e7f7      	b.n	800c090 <__sfp+0x18>
 800c0a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c0a4:	b9d5      	cbnz	r5, 800c0dc <__sfp+0x64>
 800c0a6:	4b16      	ldr	r3, [pc, #88]	; (800c100 <__sfp+0x88>)
 800c0a8:	60e3      	str	r3, [r4, #12]
 800c0aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c0ae:	6665      	str	r5, [r4, #100]	; 0x64
 800c0b0:	f000 f847 	bl	800c142 <__retarget_lock_init_recursive>
 800c0b4:	f7ff ff96 	bl	800bfe4 <__sfp_lock_release>
 800c0b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c0bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c0c0:	6025      	str	r5, [r4, #0]
 800c0c2:	61a5      	str	r5, [r4, #24]
 800c0c4:	2208      	movs	r2, #8
 800c0c6:	4629      	mov	r1, r5
 800c0c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c0cc:	f7fb fd6c 	bl	8007ba8 <memset>
 800c0d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c0d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c0d8:	4620      	mov	r0, r4
 800c0da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0dc:	3468      	adds	r4, #104	; 0x68
 800c0de:	e7d9      	b.n	800c094 <__sfp+0x1c>
 800c0e0:	2104      	movs	r1, #4
 800c0e2:	4638      	mov	r0, r7
 800c0e4:	f7ff ff62 	bl	800bfac <__sfmoreglue>
 800c0e8:	4604      	mov	r4, r0
 800c0ea:	6030      	str	r0, [r6, #0]
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	d1d5      	bne.n	800c09c <__sfp+0x24>
 800c0f0:	f7ff ff78 	bl	800bfe4 <__sfp_lock_release>
 800c0f4:	230c      	movs	r3, #12
 800c0f6:	603b      	str	r3, [r7, #0]
 800c0f8:	e7ee      	b.n	800c0d8 <__sfp+0x60>
 800c0fa:	bf00      	nop
 800c0fc:	08031f44 	.word	0x08031f44
 800c100:	ffff0001 	.word	0xffff0001

0800c104 <_fwalk_reent>:
 800c104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c108:	4606      	mov	r6, r0
 800c10a:	4688      	mov	r8, r1
 800c10c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c110:	2700      	movs	r7, #0
 800c112:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c116:	f1b9 0901 	subs.w	r9, r9, #1
 800c11a:	d505      	bpl.n	800c128 <_fwalk_reent+0x24>
 800c11c:	6824      	ldr	r4, [r4, #0]
 800c11e:	2c00      	cmp	r4, #0
 800c120:	d1f7      	bne.n	800c112 <_fwalk_reent+0xe>
 800c122:	4638      	mov	r0, r7
 800c124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c128:	89ab      	ldrh	r3, [r5, #12]
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	d907      	bls.n	800c13e <_fwalk_reent+0x3a>
 800c12e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c132:	3301      	adds	r3, #1
 800c134:	d003      	beq.n	800c13e <_fwalk_reent+0x3a>
 800c136:	4629      	mov	r1, r5
 800c138:	4630      	mov	r0, r6
 800c13a:	47c0      	blx	r8
 800c13c:	4307      	orrs	r7, r0
 800c13e:	3568      	adds	r5, #104	; 0x68
 800c140:	e7e9      	b.n	800c116 <_fwalk_reent+0x12>

0800c142 <__retarget_lock_init_recursive>:
 800c142:	4770      	bx	lr

0800c144 <__retarget_lock_acquire_recursive>:
 800c144:	4770      	bx	lr

0800c146 <__retarget_lock_release_recursive>:
 800c146:	4770      	bx	lr

0800c148 <__swhatbuf_r>:
 800c148:	b570      	push	{r4, r5, r6, lr}
 800c14a:	460e      	mov	r6, r1
 800c14c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c150:	2900      	cmp	r1, #0
 800c152:	b096      	sub	sp, #88	; 0x58
 800c154:	4614      	mov	r4, r2
 800c156:	461d      	mov	r5, r3
 800c158:	da07      	bge.n	800c16a <__swhatbuf_r+0x22>
 800c15a:	2300      	movs	r3, #0
 800c15c:	602b      	str	r3, [r5, #0]
 800c15e:	89b3      	ldrh	r3, [r6, #12]
 800c160:	061a      	lsls	r2, r3, #24
 800c162:	d410      	bmi.n	800c186 <__swhatbuf_r+0x3e>
 800c164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c168:	e00e      	b.n	800c188 <__swhatbuf_r+0x40>
 800c16a:	466a      	mov	r2, sp
 800c16c:	f000 f902 	bl	800c374 <_fstat_r>
 800c170:	2800      	cmp	r0, #0
 800c172:	dbf2      	blt.n	800c15a <__swhatbuf_r+0x12>
 800c174:	9a01      	ldr	r2, [sp, #4]
 800c176:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c17a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c17e:	425a      	negs	r2, r3
 800c180:	415a      	adcs	r2, r3
 800c182:	602a      	str	r2, [r5, #0]
 800c184:	e7ee      	b.n	800c164 <__swhatbuf_r+0x1c>
 800c186:	2340      	movs	r3, #64	; 0x40
 800c188:	2000      	movs	r0, #0
 800c18a:	6023      	str	r3, [r4, #0]
 800c18c:	b016      	add	sp, #88	; 0x58
 800c18e:	bd70      	pop	{r4, r5, r6, pc}

0800c190 <__smakebuf_r>:
 800c190:	898b      	ldrh	r3, [r1, #12]
 800c192:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c194:	079d      	lsls	r5, r3, #30
 800c196:	4606      	mov	r6, r0
 800c198:	460c      	mov	r4, r1
 800c19a:	d507      	bpl.n	800c1ac <__smakebuf_r+0x1c>
 800c19c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c1a0:	6023      	str	r3, [r4, #0]
 800c1a2:	6123      	str	r3, [r4, #16]
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	6163      	str	r3, [r4, #20]
 800c1a8:	b002      	add	sp, #8
 800c1aa:	bd70      	pop	{r4, r5, r6, pc}
 800c1ac:	ab01      	add	r3, sp, #4
 800c1ae:	466a      	mov	r2, sp
 800c1b0:	f7ff ffca 	bl	800c148 <__swhatbuf_r>
 800c1b4:	9900      	ldr	r1, [sp, #0]
 800c1b6:	4605      	mov	r5, r0
 800c1b8:	4630      	mov	r0, r6
 800c1ba:	f7ff f97f 	bl	800b4bc <_malloc_r>
 800c1be:	b948      	cbnz	r0, 800c1d4 <__smakebuf_r+0x44>
 800c1c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1c4:	059a      	lsls	r2, r3, #22
 800c1c6:	d4ef      	bmi.n	800c1a8 <__smakebuf_r+0x18>
 800c1c8:	f023 0303 	bic.w	r3, r3, #3
 800c1cc:	f043 0302 	orr.w	r3, r3, #2
 800c1d0:	81a3      	strh	r3, [r4, #12]
 800c1d2:	e7e3      	b.n	800c19c <__smakebuf_r+0xc>
 800c1d4:	4b0d      	ldr	r3, [pc, #52]	; (800c20c <__smakebuf_r+0x7c>)
 800c1d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c1d8:	89a3      	ldrh	r3, [r4, #12]
 800c1da:	6020      	str	r0, [r4, #0]
 800c1dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1e0:	81a3      	strh	r3, [r4, #12]
 800c1e2:	9b00      	ldr	r3, [sp, #0]
 800c1e4:	6163      	str	r3, [r4, #20]
 800c1e6:	9b01      	ldr	r3, [sp, #4]
 800c1e8:	6120      	str	r0, [r4, #16]
 800c1ea:	b15b      	cbz	r3, 800c204 <__smakebuf_r+0x74>
 800c1ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1f0:	4630      	mov	r0, r6
 800c1f2:	f000 f8d1 	bl	800c398 <_isatty_r>
 800c1f6:	b128      	cbz	r0, 800c204 <__smakebuf_r+0x74>
 800c1f8:	89a3      	ldrh	r3, [r4, #12]
 800c1fa:	f023 0303 	bic.w	r3, r3, #3
 800c1fe:	f043 0301 	orr.w	r3, r3, #1
 800c202:	81a3      	strh	r3, [r4, #12]
 800c204:	89a0      	ldrh	r0, [r4, #12]
 800c206:	4305      	orrs	r5, r0
 800c208:	81a5      	strh	r5, [r4, #12]
 800c20a:	e7cd      	b.n	800c1a8 <__smakebuf_r+0x18>
 800c20c:	0800bfa1 	.word	0x0800bfa1

0800c210 <_malloc_usable_size_r>:
 800c210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c214:	1f18      	subs	r0, r3, #4
 800c216:	2b00      	cmp	r3, #0
 800c218:	bfbc      	itt	lt
 800c21a:	580b      	ldrlt	r3, [r1, r0]
 800c21c:	18c0      	addlt	r0, r0, r3
 800c21e:	4770      	bx	lr

0800c220 <_raise_r>:
 800c220:	291f      	cmp	r1, #31
 800c222:	b538      	push	{r3, r4, r5, lr}
 800c224:	4604      	mov	r4, r0
 800c226:	460d      	mov	r5, r1
 800c228:	d904      	bls.n	800c234 <_raise_r+0x14>
 800c22a:	2316      	movs	r3, #22
 800c22c:	6003      	str	r3, [r0, #0]
 800c22e:	f04f 30ff 	mov.w	r0, #4294967295
 800c232:	bd38      	pop	{r3, r4, r5, pc}
 800c234:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c236:	b112      	cbz	r2, 800c23e <_raise_r+0x1e>
 800c238:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c23c:	b94b      	cbnz	r3, 800c252 <_raise_r+0x32>
 800c23e:	4620      	mov	r0, r4
 800c240:	f000 f830 	bl	800c2a4 <_getpid_r>
 800c244:	462a      	mov	r2, r5
 800c246:	4601      	mov	r1, r0
 800c248:	4620      	mov	r0, r4
 800c24a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c24e:	f000 b817 	b.w	800c280 <_kill_r>
 800c252:	2b01      	cmp	r3, #1
 800c254:	d00a      	beq.n	800c26c <_raise_r+0x4c>
 800c256:	1c59      	adds	r1, r3, #1
 800c258:	d103      	bne.n	800c262 <_raise_r+0x42>
 800c25a:	2316      	movs	r3, #22
 800c25c:	6003      	str	r3, [r0, #0]
 800c25e:	2001      	movs	r0, #1
 800c260:	e7e7      	b.n	800c232 <_raise_r+0x12>
 800c262:	2400      	movs	r4, #0
 800c264:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c268:	4628      	mov	r0, r5
 800c26a:	4798      	blx	r3
 800c26c:	2000      	movs	r0, #0
 800c26e:	e7e0      	b.n	800c232 <_raise_r+0x12>

0800c270 <raise>:
 800c270:	4b02      	ldr	r3, [pc, #8]	; (800c27c <raise+0xc>)
 800c272:	4601      	mov	r1, r0
 800c274:	6818      	ldr	r0, [r3, #0]
 800c276:	f7ff bfd3 	b.w	800c220 <_raise_r>
 800c27a:	bf00      	nop
 800c27c:	20000020 	.word	0x20000020

0800c280 <_kill_r>:
 800c280:	b538      	push	{r3, r4, r5, lr}
 800c282:	4d07      	ldr	r5, [pc, #28]	; (800c2a0 <_kill_r+0x20>)
 800c284:	2300      	movs	r3, #0
 800c286:	4604      	mov	r4, r0
 800c288:	4608      	mov	r0, r1
 800c28a:	4611      	mov	r1, r2
 800c28c:	602b      	str	r3, [r5, #0]
 800c28e:	f7f6 f8ef 	bl	8002470 <_kill>
 800c292:	1c43      	adds	r3, r0, #1
 800c294:	d102      	bne.n	800c29c <_kill_r+0x1c>
 800c296:	682b      	ldr	r3, [r5, #0]
 800c298:	b103      	cbz	r3, 800c29c <_kill_r+0x1c>
 800c29a:	6023      	str	r3, [r4, #0]
 800c29c:	bd38      	pop	{r3, r4, r5, pc}
 800c29e:	bf00      	nop
 800c2a0:	2000046c 	.word	0x2000046c

0800c2a4 <_getpid_r>:
 800c2a4:	f7f6 b8dc 	b.w	8002460 <_getpid>

0800c2a8 <__sread>:
 800c2a8:	b510      	push	{r4, lr}
 800c2aa:	460c      	mov	r4, r1
 800c2ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2b0:	f000 f894 	bl	800c3dc <_read_r>
 800c2b4:	2800      	cmp	r0, #0
 800c2b6:	bfab      	itete	ge
 800c2b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c2ba:	89a3      	ldrhlt	r3, [r4, #12]
 800c2bc:	181b      	addge	r3, r3, r0
 800c2be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c2c2:	bfac      	ite	ge
 800c2c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c2c6:	81a3      	strhlt	r3, [r4, #12]
 800c2c8:	bd10      	pop	{r4, pc}

0800c2ca <__swrite>:
 800c2ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2ce:	461f      	mov	r7, r3
 800c2d0:	898b      	ldrh	r3, [r1, #12]
 800c2d2:	05db      	lsls	r3, r3, #23
 800c2d4:	4605      	mov	r5, r0
 800c2d6:	460c      	mov	r4, r1
 800c2d8:	4616      	mov	r6, r2
 800c2da:	d505      	bpl.n	800c2e8 <__swrite+0x1e>
 800c2dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2e0:	2302      	movs	r3, #2
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	f000 f868 	bl	800c3b8 <_lseek_r>
 800c2e8:	89a3      	ldrh	r3, [r4, #12]
 800c2ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2f2:	81a3      	strh	r3, [r4, #12]
 800c2f4:	4632      	mov	r2, r6
 800c2f6:	463b      	mov	r3, r7
 800c2f8:	4628      	mov	r0, r5
 800c2fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2fe:	f000 b817 	b.w	800c330 <_write_r>

0800c302 <__sseek>:
 800c302:	b510      	push	{r4, lr}
 800c304:	460c      	mov	r4, r1
 800c306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c30a:	f000 f855 	bl	800c3b8 <_lseek_r>
 800c30e:	1c43      	adds	r3, r0, #1
 800c310:	89a3      	ldrh	r3, [r4, #12]
 800c312:	bf15      	itete	ne
 800c314:	6560      	strne	r0, [r4, #84]	; 0x54
 800c316:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c31a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c31e:	81a3      	strheq	r3, [r4, #12]
 800c320:	bf18      	it	ne
 800c322:	81a3      	strhne	r3, [r4, #12]
 800c324:	bd10      	pop	{r4, pc}

0800c326 <__sclose>:
 800c326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c32a:	f000 b813 	b.w	800c354 <_close_r>
	...

0800c330 <_write_r>:
 800c330:	b538      	push	{r3, r4, r5, lr}
 800c332:	4d07      	ldr	r5, [pc, #28]	; (800c350 <_write_r+0x20>)
 800c334:	4604      	mov	r4, r0
 800c336:	4608      	mov	r0, r1
 800c338:	4611      	mov	r1, r2
 800c33a:	2200      	movs	r2, #0
 800c33c:	602a      	str	r2, [r5, #0]
 800c33e:	461a      	mov	r2, r3
 800c340:	f7f6 f8cd 	bl	80024de <_write>
 800c344:	1c43      	adds	r3, r0, #1
 800c346:	d102      	bne.n	800c34e <_write_r+0x1e>
 800c348:	682b      	ldr	r3, [r5, #0]
 800c34a:	b103      	cbz	r3, 800c34e <_write_r+0x1e>
 800c34c:	6023      	str	r3, [r4, #0]
 800c34e:	bd38      	pop	{r3, r4, r5, pc}
 800c350:	2000046c 	.word	0x2000046c

0800c354 <_close_r>:
 800c354:	b538      	push	{r3, r4, r5, lr}
 800c356:	4d06      	ldr	r5, [pc, #24]	; (800c370 <_close_r+0x1c>)
 800c358:	2300      	movs	r3, #0
 800c35a:	4604      	mov	r4, r0
 800c35c:	4608      	mov	r0, r1
 800c35e:	602b      	str	r3, [r5, #0]
 800c360:	f7f6 f8d9 	bl	8002516 <_close>
 800c364:	1c43      	adds	r3, r0, #1
 800c366:	d102      	bne.n	800c36e <_close_r+0x1a>
 800c368:	682b      	ldr	r3, [r5, #0]
 800c36a:	b103      	cbz	r3, 800c36e <_close_r+0x1a>
 800c36c:	6023      	str	r3, [r4, #0]
 800c36e:	bd38      	pop	{r3, r4, r5, pc}
 800c370:	2000046c 	.word	0x2000046c

0800c374 <_fstat_r>:
 800c374:	b538      	push	{r3, r4, r5, lr}
 800c376:	4d07      	ldr	r5, [pc, #28]	; (800c394 <_fstat_r+0x20>)
 800c378:	2300      	movs	r3, #0
 800c37a:	4604      	mov	r4, r0
 800c37c:	4608      	mov	r0, r1
 800c37e:	4611      	mov	r1, r2
 800c380:	602b      	str	r3, [r5, #0]
 800c382:	f7f6 f8d4 	bl	800252e <_fstat>
 800c386:	1c43      	adds	r3, r0, #1
 800c388:	d102      	bne.n	800c390 <_fstat_r+0x1c>
 800c38a:	682b      	ldr	r3, [r5, #0]
 800c38c:	b103      	cbz	r3, 800c390 <_fstat_r+0x1c>
 800c38e:	6023      	str	r3, [r4, #0]
 800c390:	bd38      	pop	{r3, r4, r5, pc}
 800c392:	bf00      	nop
 800c394:	2000046c 	.word	0x2000046c

0800c398 <_isatty_r>:
 800c398:	b538      	push	{r3, r4, r5, lr}
 800c39a:	4d06      	ldr	r5, [pc, #24]	; (800c3b4 <_isatty_r+0x1c>)
 800c39c:	2300      	movs	r3, #0
 800c39e:	4604      	mov	r4, r0
 800c3a0:	4608      	mov	r0, r1
 800c3a2:	602b      	str	r3, [r5, #0]
 800c3a4:	f7f6 f8d3 	bl	800254e <_isatty>
 800c3a8:	1c43      	adds	r3, r0, #1
 800c3aa:	d102      	bne.n	800c3b2 <_isatty_r+0x1a>
 800c3ac:	682b      	ldr	r3, [r5, #0]
 800c3ae:	b103      	cbz	r3, 800c3b2 <_isatty_r+0x1a>
 800c3b0:	6023      	str	r3, [r4, #0]
 800c3b2:	bd38      	pop	{r3, r4, r5, pc}
 800c3b4:	2000046c 	.word	0x2000046c

0800c3b8 <_lseek_r>:
 800c3b8:	b538      	push	{r3, r4, r5, lr}
 800c3ba:	4d07      	ldr	r5, [pc, #28]	; (800c3d8 <_lseek_r+0x20>)
 800c3bc:	4604      	mov	r4, r0
 800c3be:	4608      	mov	r0, r1
 800c3c0:	4611      	mov	r1, r2
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	602a      	str	r2, [r5, #0]
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	f7f6 f8cc 	bl	8002564 <_lseek>
 800c3cc:	1c43      	adds	r3, r0, #1
 800c3ce:	d102      	bne.n	800c3d6 <_lseek_r+0x1e>
 800c3d0:	682b      	ldr	r3, [r5, #0]
 800c3d2:	b103      	cbz	r3, 800c3d6 <_lseek_r+0x1e>
 800c3d4:	6023      	str	r3, [r4, #0]
 800c3d6:	bd38      	pop	{r3, r4, r5, pc}
 800c3d8:	2000046c 	.word	0x2000046c

0800c3dc <_read_r>:
 800c3dc:	b538      	push	{r3, r4, r5, lr}
 800c3de:	4d07      	ldr	r5, [pc, #28]	; (800c3fc <_read_r+0x20>)
 800c3e0:	4604      	mov	r4, r0
 800c3e2:	4608      	mov	r0, r1
 800c3e4:	4611      	mov	r1, r2
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	602a      	str	r2, [r5, #0]
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	f7f6 f85a 	bl	80024a4 <_read>
 800c3f0:	1c43      	adds	r3, r0, #1
 800c3f2:	d102      	bne.n	800c3fa <_read_r+0x1e>
 800c3f4:	682b      	ldr	r3, [r5, #0]
 800c3f6:	b103      	cbz	r3, 800c3fa <_read_r+0x1e>
 800c3f8:	6023      	str	r3, [r4, #0]
 800c3fa:	bd38      	pop	{r3, r4, r5, pc}
 800c3fc:	2000046c 	.word	0x2000046c

0800c400 <_init>:
 800c400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c402:	bf00      	nop
 800c404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c406:	bc08      	pop	{r3}
 800c408:	469e      	mov	lr, r3
 800c40a:	4770      	bx	lr

0800c40c <_fini>:
 800c40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c40e:	bf00      	nop
 800c410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c412:	bc08      	pop	{r3}
 800c414:	469e      	mov	lr, r3
 800c416:	4770      	bx	lr
