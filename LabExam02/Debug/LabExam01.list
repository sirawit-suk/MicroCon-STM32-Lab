
LabExam01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7e0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000074c  0800a990  0800a990  0001a990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0dc  0800b0dc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0dc  0800b0dc  0001b0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0e4  0800b0e4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0e4  0800b0e4  0001b0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0e8  0800b0e8  0001b0e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b0ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 10 .bss          00000300  200001e8  200001e8  000201e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004e8  200004e8  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a04b  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003839  00000000  00000000  0003a263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  0003daa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001348  00000000  00000000  0003ef58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028463  00000000  00000000  000402a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b312  00000000  00000000  00068703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed28f  00000000  00000000  00083a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00170ca4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006b7c  00000000  00000000  00170cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a978 	.word	0x0800a978

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	0800a978 	.word	0x0800a978

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001012:	463b      	mov	r3, r7
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800101e:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001020:	4a21      	ldr	r2, [pc, #132]	; (80010a8 <MX_ADC1_Init+0x9c>)
 8001022:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001026:	2200      	movs	r2, #0
 8001028:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800102a:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <MX_ADC1_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001038:	2201      	movs	r2, #1
 800103a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <MX_ADC1_Init+0x98>)
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001046:	2200      	movs	r2, #0
 8001048:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_ADC1_Init+0x98>)
 800104c:	4a17      	ldr	r2, [pc, #92]	; (80010ac <MX_ADC1_Init+0xa0>)
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001058:	2201      	movs	r2, #1
 800105a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_ADC1_Init+0x98>)
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800106a:	480e      	ldr	r0, [pc, #56]	; (80010a4 <MX_ADC1_Init+0x98>)
 800106c:	f002 f838 	bl	80030e0 <HAL_ADC_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001076:	f000 fcc9 	bl	8001a0c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800107a:	230d      	movs	r3, #13
 800107c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800107e:	2301      	movs	r3, #1
 8001080:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <MX_ADC1_Init+0x98>)
 800108c:	f002 f9d6 	bl	800343c <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001096:	f000 fcb9 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000022c 	.word	0x2000022c
 80010a8:	40012000 	.word	0x40012000
 80010ac:	0f000001 	.word	0x0f000001

080010b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a17      	ldr	r2, [pc, #92]	; (800112c <HAL_ADC_MspInit+0x7c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d127      	bne.n	8001122 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <HAL_ADC_MspInit+0x80>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a15      	ldr	r2, [pc, #84]	; (8001130 <HAL_ADC_MspInit+0x80>)
 80010dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <HAL_ADC_MspInit+0x80>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_ADC_MspInit+0x80>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <HAL_ADC_MspInit+0x80>)
 80010f8:	f043 0304 	orr.w	r3, r3, #4
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_ADC_MspInit+0x80>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0304 	and.w	r3, r3, #4
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800110a:	2308      	movs	r3, #8
 800110c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110e:	2303      	movs	r3, #3
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <HAL_ADC_MspInit+0x84>)
 800111e:	f002 fca1 	bl	8003a64 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40012000 	.word	0x40012000
 8001130:	40023800 	.word	0x40023800
 8001134:	40020800 	.word	0x40020800

08001138 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08c      	sub	sp, #48	; 0x30
 800113c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
 8001152:	4b73      	ldr	r3, [pc, #460]	; (8001320 <MX_GPIO_Init+0x1e8>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a72      	ldr	r2, [pc, #456]	; (8001320 <MX_GPIO_Init+0x1e8>)
 8001158:	f043 0320 	orr.w	r3, r3, #32
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b70      	ldr	r3, [pc, #448]	; (8001320 <MX_GPIO_Init+0x1e8>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0320 	and.w	r3, r3, #32
 8001166:	61bb      	str	r3, [r7, #24]
 8001168:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	4b6c      	ldr	r3, [pc, #432]	; (8001320 <MX_GPIO_Init+0x1e8>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a6b      	ldr	r2, [pc, #428]	; (8001320 <MX_GPIO_Init+0x1e8>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b69      	ldr	r3, [pc, #420]	; (8001320 <MX_GPIO_Init+0x1e8>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	4b65      	ldr	r3, [pc, #404]	; (8001320 <MX_GPIO_Init+0x1e8>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a64      	ldr	r2, [pc, #400]	; (8001320 <MX_GPIO_Init+0x1e8>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b62      	ldr	r3, [pc, #392]	; (8001320 <MX_GPIO_Init+0x1e8>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b5e      	ldr	r3, [pc, #376]	; (8001320 <MX_GPIO_Init+0x1e8>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a5d      	ldr	r2, [pc, #372]	; (8001320 <MX_GPIO_Init+0x1e8>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b5b      	ldr	r3, [pc, #364]	; (8001320 <MX_GPIO_Init+0x1e8>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	4b57      	ldr	r3, [pc, #348]	; (8001320 <MX_GPIO_Init+0x1e8>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a56      	ldr	r2, [pc, #344]	; (8001320 <MX_GPIO_Init+0x1e8>)
 80011c8:	f043 0310 	orr.w	r3, r3, #16
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b54      	ldr	r3, [pc, #336]	; (8001320 <MX_GPIO_Init+0x1e8>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0310 	and.w	r3, r3, #16
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	4b50      	ldr	r3, [pc, #320]	; (8001320 <MX_GPIO_Init+0x1e8>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a4f      	ldr	r2, [pc, #316]	; (8001320 <MX_GPIO_Init+0x1e8>)
 80011e4:	f043 0308 	orr.w	r3, r3, #8
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b4d      	ldr	r3, [pc, #308]	; (8001320 <MX_GPIO_Init+0x1e8>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]
 80011fa:	4b49      	ldr	r3, [pc, #292]	; (8001320 <MX_GPIO_Init+0x1e8>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a48      	ldr	r2, [pc, #288]	; (8001320 <MX_GPIO_Init+0x1e8>)
 8001200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b46      	ldr	r3, [pc, #280]	; (8001320 <MX_GPIO_Init+0x1e8>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, T_CLK_Pin|T_CS_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	210e      	movs	r1, #14
 8001216:	4843      	ldr	r0, [pc, #268]	; (8001324 <MX_GPIO_Init+0x1ec>)
 8001218:	f002 fde8 	bl	8003dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800121c:	2200      	movs	r2, #0
 800121e:	f44f 41ff 	mov.w	r1, #32640	; 0x7f80
 8001222:	4841      	ldr	r0, [pc, #260]	; (8001328 <MX_GPIO_Init+0x1f0>)
 8001224:	f002 fde2 	bl	8003dec <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|RST_Pin|DC_Pin, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800122e:	483f      	ldr	r0, [pc, #252]	; (800132c <MX_GPIO_Init+0x1f4>)
 8001230:	f002 fddc 	bl	8003dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800123a:	483d      	ldr	r0, [pc, #244]	; (8001330 <MX_GPIO_Init+0x1f8>)
 800123c:	f002 fdd6 	bl	8003dec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin|T_MOSI_Pin;
 8001240:	230e      	movs	r3, #14
 8001242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001244:	2301      	movs	r3, #1
 8001246:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	4619      	mov	r1, r3
 8001256:	4833      	ldr	r0, [pc, #204]	; (8001324 <MX_GPIO_Init+0x1ec>)
 8001258:	f002 fc04 	bl	8003a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = T_MISO_Pin|T_IRQ_Pin;
 800125c:	2330      	movs	r3, #48	; 0x30
 800125e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001268:	f107 031c 	add.w	r3, r7, #28
 800126c:	4619      	mov	r1, r3
 800126e:	482d      	ldr	r0, [pc, #180]	; (8001324 <MX_GPIO_Init+0x1ec>)
 8001270:	f002 fbf8 	bl	8003a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001274:	2301      	movs	r3, #1
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	4829      	ldr	r0, [pc, #164]	; (800132c <MX_GPIO_Init+0x1f4>)
 8001288:	f002 fbec 	bl	8003a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800128c:	f44f 43ff 	mov.w	r3, #32640	; 0x7f80
 8001290:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001292:	2301      	movs	r3, #1
 8001294:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4619      	mov	r1, r3
 80012a4:	4820      	ldr	r0, [pc, #128]	; (8001328 <MX_GPIO_Init+0x1f0>)
 80012a6:	f002 fbdd 	bl	8003a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14;
 80012aa:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 80012ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4619      	mov	r1, r3
 80012be:	481d      	ldr	r0, [pc, #116]	; (8001334 <MX_GPIO_Init+0x1fc>)
 80012c0:	f002 fbd0 	bl	8003a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012c4:	2304      	movs	r3, #4
 80012c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012d0:	f107 031c 	add.w	r3, r7, #28
 80012d4:	4619      	mov	r1, r3
 80012d6:	4816      	ldr	r0, [pc, #88]	; (8001330 <MX_GPIO_Init+0x1f8>)
 80012d8:	f002 fbc4 	bl	8003a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin|DC_Pin;
 80012dc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80012e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	4619      	mov	r1, r3
 80012f4:	480d      	ldr	r0, [pc, #52]	; (800132c <MX_GPIO_Init+0x1f4>)
 80012f6:	f002 fbb5 	bl	8003a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80012fa:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	4807      	ldr	r0, [pc, #28]	; (8001330 <MX_GPIO_Init+0x1f8>)
 8001314:	f002 fba6 	bl	8003a64 <HAL_GPIO_Init>

}
 8001318:	bf00      	nop
 800131a:	3730      	adds	r7, #48	; 0x30
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	40023800 	.word	0x40023800
 8001324:	40021400 	.word	0x40021400
 8001328:	40021000 	.word	0x40021000
 800132c:	40020000 	.word	0x40020000
 8001330:	40021800 	.word	0x40021800
 8001334:	40020c00 	.word	0x40020c00

08001338 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <MX_I2C1_Init+0x74>)
 800133e:	4a1c      	ldr	r2, [pc, #112]	; (80013b0 <MX_I2C1_Init+0x78>)
 8001340:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001342:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_I2C1_Init+0x74>)
 8001344:	4a1b      	ldr	r2, [pc, #108]	; (80013b4 <MX_I2C1_Init+0x7c>)
 8001346:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <MX_I2C1_Init+0x74>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800134e:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_I2C1_Init+0x74>)
 8001350:	2200      	movs	r2, #0
 8001352:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <MX_I2C1_Init+0x74>)
 8001356:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800135a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <MX_I2C1_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_I2C1_Init+0x74>)
 8001364:	2200      	movs	r2, #0
 8001366:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <MX_I2C1_Init+0x74>)
 800136a:	2200      	movs	r2, #0
 800136c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800136e:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <MX_I2C1_Init+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001374:	480d      	ldr	r0, [pc, #52]	; (80013ac <MX_I2C1_Init+0x74>)
 8001376:	f002 fd53 	bl	8003e20 <HAL_I2C_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001380:	f000 fb44 	bl	8001a0c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001384:	2100      	movs	r1, #0
 8001386:	4809      	ldr	r0, [pc, #36]	; (80013ac <MX_I2C1_Init+0x74>)
 8001388:	f002 fe8e 	bl	80040a8 <HAL_I2CEx_ConfigAnalogFilter>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001392:	f000 fb3b 	bl	8001a0c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001396:	2100      	movs	r1, #0
 8001398:	4804      	ldr	r0, [pc, #16]	; (80013ac <MX_I2C1_Init+0x74>)
 800139a:	f002 fec1 	bl	8004120 <HAL_I2CEx_ConfigDigitalFilter>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80013a4:	f000 fb32 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200002c8 	.word	0x200002c8
 80013b0:	40005400 	.word	0x40005400
 80013b4:	000186a0 	.word	0x000186a0

080013b8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	; (800142c <MX_I2C3_Init+0x74>)
 80013be:	4a1c      	ldr	r2, [pc, #112]	; (8001430 <MX_I2C3_Init+0x78>)
 80013c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <MX_I2C3_Init+0x74>)
 80013c4:	4a1b      	ldr	r2, [pc, #108]	; (8001434 <MX_I2C3_Init+0x7c>)
 80013c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <MX_I2C3_Init+0x74>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <MX_I2C3_Init+0x74>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013d4:	4b15      	ldr	r3, [pc, #84]	; (800142c <MX_I2C3_Init+0x74>)
 80013d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013da:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013dc:	4b13      	ldr	r3, [pc, #76]	; (800142c <MX_I2C3_Init+0x74>)
 80013de:	2200      	movs	r2, #0
 80013e0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <MX_I2C3_Init+0x74>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013e8:	4b10      	ldr	r3, [pc, #64]	; (800142c <MX_I2C3_Init+0x74>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <MX_I2C3_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80013f4:	480d      	ldr	r0, [pc, #52]	; (800142c <MX_I2C3_Init+0x74>)
 80013f6:	f002 fd13 	bl	8003e20 <HAL_I2C_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001400:	f000 fb04 	bl	8001a0c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001404:	2100      	movs	r1, #0
 8001406:	4809      	ldr	r0, [pc, #36]	; (800142c <MX_I2C3_Init+0x74>)
 8001408:	f002 fe4e 	bl	80040a8 <HAL_I2CEx_ConfigAnalogFilter>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001412:	f000 fafb 	bl	8001a0c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001416:	2100      	movs	r1, #0
 8001418:	4804      	ldr	r0, [pc, #16]	; (800142c <MX_I2C3_Init+0x74>)
 800141a:	f002 fe81 	bl	8004120 <HAL_I2CEx_ConfigDigitalFilter>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001424:	f000 faf2 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000274 	.word	0x20000274
 8001430:	40005c00 	.word	0x40005c00
 8001434:	000186a0 	.word	0x000186a0

08001438 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08c      	sub	sp, #48	; 0x30
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a42      	ldr	r2, [pc, #264]	; (8001560 <HAL_I2C_MspInit+0x128>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d12d      	bne.n	80014b6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	61bb      	str	r3, [r7, #24]
 800145e:	4b41      	ldr	r3, [pc, #260]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a40      	ldr	r2, [pc, #256]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b3e      	ldr	r3, [pc, #248]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	61bb      	str	r3, [r7, #24]
 8001474:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001476:	f44f 7340 	mov.w	r3, #768	; 0x300
 800147a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800147c:	2312      	movs	r3, #18
 800147e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001488:	2304      	movs	r3, #4
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	4619      	mov	r1, r3
 8001492:	4835      	ldr	r0, [pc, #212]	; (8001568 <HAL_I2C_MspInit+0x130>)
 8001494:	f002 fae6 	bl	8003a64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	4b31      	ldr	r3, [pc, #196]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	4a30      	ldr	r2, [pc, #192]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 80014a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014a6:	6413      	str	r3, [r2, #64]	; 0x40
 80014a8:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80014b4:	e050      	b.n	8001558 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C3)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a2c      	ldr	r2, [pc, #176]	; (800156c <HAL_I2C_MspInit+0x134>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d14b      	bne.n	8001558 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	4b27      	ldr	r3, [pc, #156]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	4a26      	ldr	r2, [pc, #152]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	6313      	str	r3, [r2, #48]	; 0x30
 80014d0:	4b24      	ldr	r3, [pc, #144]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	4b20      	ldr	r3, [pc, #128]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 80014e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e4:	4a1f      	ldr	r2, [pc, #124]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	6313      	str	r3, [r2, #48]	; 0x30
 80014ec:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fe:	2312      	movs	r3, #18
 8001500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800150a:	2304      	movs	r3, #4
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	4619      	mov	r1, r3
 8001514:	4816      	ldr	r0, [pc, #88]	; (8001570 <HAL_I2C_MspInit+0x138>)
 8001516:	f002 faa5 	bl	8003a64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800151a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800151e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001520:	2312      	movs	r3, #18
 8001522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800152c:	2304      	movs	r3, #4
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	480f      	ldr	r0, [pc, #60]	; (8001574 <HAL_I2C_MspInit+0x13c>)
 8001538:	f002 fa94 	bl	8003a64 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	4a07      	ldr	r2, [pc, #28]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 8001546:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800154a:	6413      	str	r3, [r2, #64]	; 0x40
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_I2C_MspInit+0x12c>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
}
 8001558:	bf00      	nop
 800155a:	3730      	adds	r7, #48	; 0x30
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40005400 	.word	0x40005400
 8001564:	40023800 	.word	0x40023800
 8001568:	40020400 	.word	0x40020400
 800156c:	40005c00 	.word	0x40005c00
 8001570:	40020800 	.word	0x40020800
 8001574:	40020000 	.word	0x40020000

08001578 <ADC_PWM.10664>:


  HAL_ADC_Start(&hadc1);


  void ADC_PWM(){
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	f8c7 c004 	str.w	ip, [r7, #4]

  		//ADC
  		  while(HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK){} // skip
 8001582:	bf00      	nop
 8001584:	2164      	movs	r1, #100	; 0x64
 8001586:	482a      	ldr	r0, [pc, #168]	; (8001630 <ADC_PWM.10664+0xb8>)
 8001588:	f001 fec0 	bl	800330c <HAL_ADC_PollForConversion>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f8      	bne.n	8001584 <ADC_PWM.10664+0xc>
  		  adc_val = HAL_ADC_GetValue(&hadc1); // get value of adc
 8001592:	4827      	ldr	r0, [pc, #156]	; (8001630 <ADC_PWM.10664+0xb8>)
 8001594:	f001 ff45 	bl	8003422 <HAL_ADC_GetValue>
 8001598:	4603      	mov	r3, r0
 800159a:	4a26      	ldr	r2, [pc, #152]	; (8001634 <ADC_PWM.10664+0xbc>)
 800159c:	6013      	str	r3, [r2, #0]
  		  //displayHEX(adc_val);

	    //PWM
  		  dutyCycleScreen = ((adc_val/4095.0) * 0.8) + 0.2; // for 20% - 100%  // 0.8 is interval
 800159e:	4b25      	ldr	r3, [pc, #148]	; (8001634 <ADC_PWM.10664+0xbc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ffbe 	bl	8000524 <__aeabi_ui2d>
 80015a8:	a31b      	add	r3, pc, #108	; (adr r3, 8001618 <ADC_PWM.10664+0xa0>)
 80015aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ae:	f7ff f95d 	bl	800086c <__aeabi_ddiv>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	a319      	add	r3, pc, #100	; (adr r3, 8001620 <ADC_PWM.10664+0xa8>)
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	f7ff f82a 	bl	8000618 <__aeabi_dmul>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	a316      	add	r3, pc, #88	; (adr r3, 8001628 <ADC_PWM.10664+0xb0>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7fe fe6b 	bl	80002ac <__adddf3>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f7ff fb13 	bl	8000c08 <__aeabi_d2f>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a14      	ldr	r2, [pc, #80]	; (8001638 <ADC_PWM.10664+0xc0>)
 80015e6:	6013      	str	r3, [r2, #0]
  		  //No. 2
  		  htim2.Instance -> CCR1 = (100-1) * dutyCycleScreen;
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <ADC_PWM.10664+0xc0>)
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800163c <ADC_PWM.10664+0xc4>
 80015f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <ADC_PWM.10664+0xc8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015fe:	ee17 2a90 	vmov	r2, s15
 8001602:	635a      	str	r2, [r3, #52]	; 0x34


  		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001604:	2100      	movs	r1, #0
 8001606:	480e      	ldr	r0, [pc, #56]	; (8001640 <ADC_PWM.10664+0xc8>)
 8001608:	f003 fd6a 	bl	80050e0 <HAL_TIM_PWM_Start>
	  	  	 HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  			 HAL_Delay(1000);
  		  	 // HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);

  		   */
  	}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	f3af 8000 	nop.w
 8001618:	00000000 	.word	0x00000000
 800161c:	40affe00 	.word	0x40affe00
 8001620:	9999999a 	.word	0x9999999a
 8001624:	3fe99999 	.word	0x3fe99999
 8001628:	9999999a 	.word	0x9999999a
 800162c:	3fc99999 	.word	0x3fc99999
 8001630:	2000022c 	.word	0x2000022c
 8001634:	2000021c 	.word	0x2000021c
 8001638:	2000020c 	.word	0x2000020c
 800163c:	42c60000 	.word	0x42c60000
 8001640:	20000448 	.word	0x20000448

08001644 <main>:
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af02      	add	r7, sp, #8
int main(void)
 800164a:	f107 0320 	add.w	r3, r7, #32
 800164e:	60bb      	str	r3, [r7, #8]
  HAL_Init();
 8001650:	f001 fcb0 	bl	8002fb4 <HAL_Init>
  SystemClock_Config();
 8001654:	f000 f96e 	bl	8001934 <SystemClock_Config>
  MX_TIM1_Init();
 8001658:	f000 fbbc 	bl	8001dd4 <MX_TIM1_Init>
  MX_GPIO_Init();
 800165c:	f7ff fd6c 	bl	8001138 <MX_GPIO_Init>
  MX_RNG_Init();
 8001660:	f000 f9da 	bl	8001a18 <MX_RNG_Init>
  MX_SPI3_Init();
 8001664:	f000 fa0e 	bl	8001a84 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001668:	f000 fdc0 	bl	80021ec <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800166c:	f7ff fe64 	bl	8001338 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001670:	f7ff fccc 	bl	800100c <MX_ADC1_Init>
  MX_TIM2_Init();
 8001674:	f000 fc00 	bl	8001e78 <MX_TIM2_Init>
  MX_I2C3_Init();
 8001678:	f7ff fe9e 	bl	80013b8 <MX_I2C3_Init>
  MX_TIM3_Init();
 800167c:	f000 fc54 	bl	8001f28 <MX_TIM3_Init>
  ILI9341_Init();//initial driver setup to drive ili9341
 8001680:	f001 f84a 	bl	8002718 <ILI9341_Init>
  HAL_ADC_Start(&hadc1);
 8001684:	482c      	ldr	r0, [pc, #176]	; (8001738 <main+0xf4>)
 8001686:	f001 fd6f 	bl	8003168 <HAL_ADC_Start>

    /* USER CODE BEGIN 3 */


	//Initialise screen
	ILI9341_Fill_Screen(WHITE);
 800168a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800168e:	f001 f9eb 	bl	8002a68 <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001692:	2001      	movs	r0, #1
 8001694:	f000 ffe2 	bl	800265c <ILI9341_Set_Rotation>


	//Print something here ...
	//...

	uint32_t maxWidth = 320;
 8001698:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800169c:	617b      	str	r3, [r7, #20]
	uint32_t maxHeight = 240;
 800169e:	23f0      	movs	r3, #240	; 0xf0
 80016a0:	613b      	str	r3, [r7, #16]


	sprintf(Temp_Buffer_text, "This is a test");
 80016a2:	4926      	ldr	r1, [pc, #152]	; (800173c <main+0xf8>)
 80016a4:	4826      	ldr	r0, [pc, #152]	; (8001740 <main+0xfc>)
 80016a6:	f005 fbc1 	bl	8006e2c <siprintf>
	ILI9341_Draw_Text(Temp_Buffer_text, 10, 40, BLACK, 2, WHITE);
 80016aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ae:	9301      	str	r3, [sp, #4]
 80016b0:	2302      	movs	r3, #2
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2300      	movs	r3, #0
 80016b6:	2228      	movs	r2, #40	; 0x28
 80016b8:	210a      	movs	r1, #10
 80016ba:	4821      	ldr	r0, [pc, #132]	; (8001740 <main+0xfc>)
 80016bc:	f000 fece 	bl	800245c <ILI9341_Draw_Text>

	//Start While Touch
	while(1){

		// update or read value
		ADC_PWM();
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	469c      	mov	ip, r3
 80016c6:	f7ff ff57 	bl	8001578 <ADC_PWM.10664>
		readButton();
 80016ca:	f107 0308 	add.w	r3, r7, #8
 80016ce:	469c      	mov	ip, r3
 80016d0:	f000 f83a 	bl	8001748 <readButton.10669>
		ledPack();
 80016d4:	f107 0308 	add.w	r3, r7, #8
 80016d8:	469c      	mov	ip, r3
 80016da:	f000 f87d 	bl	80017d8 <ledPack.10671>
		ledRGB();
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	469c      	mov	ip, r3
 80016e4:	f000 f8ac 	bl	8001840 <ledRGB.10675>

		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f000 ffb7 	bl	800265c <ILI9341_Set_Rotation>

		if(TP_Touchpad_Pressed())
 80016ee:	f001 fc51 	bl	8002f94 <TP_Touchpad_Pressed>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0e3      	beq.n	80016c0 <main+0x7c>
		{

			uint16_t x_pos = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	81fb      	strh	r3, [r7, #14]
			uint16_t y_pos = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	81bb      	strh	r3, [r7, #12]

			//HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_SET);

			uint16_t position_array[2];

			if(TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	4618      	mov	r0, r3
 8001704:	f001 fb70 	bl	8002de8 <TP_Read_Coordinates>
 8001708:	4603      	mov	r3, r0
 800170a:	2b01      	cmp	r3, #1
 800170c:	d1d8      	bne.n	80016c0 <main+0x7c>
			{
				x_pos = position_array[0];
 800170e:	88bb      	ldrh	r3, [r7, #4]
 8001710:	81fb      	strh	r3, [r7, #14]
				y_pos = position_array[1];
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	81bb      	strh	r3, [r7, #12]
				//ILI9341_Draw_Filled_Circle(x_pos, y_pos, 2, BLACK);


				if(x_pos > 0 && x_pos < 240 && y_pos > 0  && y_pos < 320/2-50){
 8001716:	89fb      	ldrh	r3, [r7, #14]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0d1      	beq.n	80016c0 <main+0x7c>
 800171c:	89fb      	ldrh	r3, [r7, #14]
 800171e:	2bef      	cmp	r3, #239	; 0xef
 8001720:	d8ce      	bhi.n	80016c0 <main+0x7c>
 8001722:	89bb      	ldrh	r3, [r7, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0cb      	beq.n	80016c0 <main+0x7c>
 8001728:	89bb      	ldrh	r3, [r7, #12]
 800172a:	2b6d      	cmp	r3, #109	; 0x6d
 800172c:	d8c8      	bhi.n	80016c0 <main+0x7c>
					mode = 1;
 800172e:	4b05      	ldr	r3, [pc, #20]	; (8001744 <main+0x100>)
 8001730:	2201      	movs	r2, #1
 8001732:	701a      	strb	r2, [r3, #0]
  {
 8001734:	e7a9      	b.n	800168a <main+0x46>
 8001736:	bf00      	nop
 8001738:	2000022c 	.word	0x2000022c
 800173c:	0800a9c0 	.word	0x0800a9c0
 8001740:	2000031c 	.word	0x2000031c
 8001744:	20000000 	.word	0x20000000

08001748 <readButton.10669>:
  void readButton(){
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	f8c7 c004 	str.w	ip, [r7, #4]
	pressButton1 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10); // pressButton1 is "true" when press, is "false" when not press
 8001752:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001756:	481a      	ldr	r0, [pc, #104]	; (80017c0 <readButton.10669+0x78>)
 8001758:	f002 fb30 	bl	8003dbc <HAL_GPIO_ReadPin>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	bf0c      	ite	eq
 8001762:	2301      	moveq	r3, #1
 8001764:	2300      	movne	r3, #0
 8001766:	b2da      	uxtb	r2, r3
 8001768:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <readButton.10669+0x7c>)
 800176a:	701a      	strb	r2, [r3, #0]
	pressButton2 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12); // pressButton1 is "true" when press, is "false" when not press
 800176c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001770:	4813      	ldr	r0, [pc, #76]	; (80017c0 <readButton.10669+0x78>)
 8001772:	f002 fb23 	bl	8003dbc <HAL_GPIO_ReadPin>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	bf0c      	ite	eq
 800177c:	2301      	moveq	r3, #1
 800177e:	2300      	movne	r3, #0
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <readButton.10669+0x80>)
 8001784:	701a      	strb	r2, [r3, #0]
	pressButton3 = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14); // pressButton1 is "true" when press, is "false" when not press
 8001786:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800178a:	480d      	ldr	r0, [pc, #52]	; (80017c0 <readButton.10669+0x78>)
 800178c:	f002 fb16 	bl	8003dbc <HAL_GPIO_ReadPin>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	bf0c      	ite	eq
 8001796:	2301      	moveq	r3, #1
 8001798:	2300      	movne	r3, #0
 800179a:	b2da      	uxtb	r2, r3
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <readButton.10669+0x84>)
 800179e:	701a      	strb	r2, [r3, #0]
	pressButton4 = !HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_2); // pressButton1 is "true" when press, is "false" when not press
 80017a0:	2104      	movs	r1, #4
 80017a2:	480b      	ldr	r0, [pc, #44]	; (80017d0 <readButton.10669+0x88>)
 80017a4:	f002 fb0a 	bl	8003dbc <HAL_GPIO_ReadPin>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	bf0c      	ite	eq
 80017ae:	2301      	moveq	r3, #1
 80017b0:	2300      	movne	r3, #0
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <readButton.10669+0x8c>)
 80017b6:	701a      	strb	r2, [r3, #0]
  }
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40020c00 	.word	0x40020c00
 80017c4:	20000204 	.word	0x20000204
 80017c8:	20000205 	.word	0x20000205
 80017cc:	20000206 	.word	0x20000206
 80017d0:	40021800 	.word	0x40021800
 80017d4:	20000207 	.word	0x20000207

080017d8 <ledPack.10671>:
  void ledPack(){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	f8c7 c004 	str.w	ip, [r7, #4]
		uint8_t on = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	73fb      	strb	r3, [r7, #15]
		uint8_t off = 1;
 80017e6:	2301      	movs	r3, #1
 80017e8:	73bb      	strb	r3, [r7, #14]
		GPIOE -> BSRR = 0x00000080 << num;
 80017ea:	4b13      	ldr	r3, [pc, #76]	; (8001838 <ledPack.10671+0x60>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	2380      	movs	r3, #128	; 0x80
 80017f2:	fa03 f202 	lsl.w	r2, r3, r2
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <ledPack.10671+0x64>)
 80017f8:	619a      	str	r2, [r3, #24]
		GPIOE -> BSRR = 0x00400000 << num;
 80017fa:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <ledPack.10671+0x60>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	461a      	mov	r2, r3
 8001800:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001804:	fa03 f202 	lsl.w	r2, r3, r2
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <ledPack.10671+0x64>)
 800180a:	619a      	str	r2, [r3, #24]
		HAL_Delay(300);
 800180c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001810:	f001 fc42 	bl	8003098 <HAL_Delay>
		num++;
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <ledPack.10671+0x60>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	3301      	adds	r3, #1
 800181a:	b2da      	uxtb	r2, r3
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <ledPack.10671+0x60>)
 800181e:	701a      	strb	r2, [r3, #0]
		if(num == 9){ // on follow off 9 times
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <ledPack.10671+0x60>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b09      	cmp	r3, #9
 8001826:	d102      	bne.n	800182e <ledPack.10671+0x56>
			num = 0;
 8001828:	4b03      	ldr	r3, [pc, #12]	; (8001838 <ledPack.10671+0x60>)
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
  }
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000208 	.word	0x20000208
 800183c:	40021000 	.word	0x40021000

08001840 <ledRGB.10675>:
  void ledRGB(){
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	f8c7 c004 	str.w	ip, [r7, #4]
	  dutyCycleG =0.5;
 800184a:	4b35      	ldr	r3, [pc, #212]	; (8001920 <ledRGB.10675+0xe0>)
 800184c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001850:	601a      	str	r2, [r3, #0]
	  dutyCycleB =0.5;
 8001852:	4b34      	ldr	r3, [pc, #208]	; (8001924 <ledRGB.10675+0xe4>)
 8001854:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001858:	601a      	str	r2, [r3, #0]
	  htim3.Instance -> CCR1 = (100-1) * dutyCycleR;
 800185a:	4b33      	ldr	r3, [pc, #204]	; (8001928 <ledRGB.10675+0xe8>)
 800185c:	edd3 7a00 	vldr	s15, [r3]
 8001860:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800192c <ledRGB.10675+0xec>
 8001864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001868:	4b31      	ldr	r3, [pc, #196]	; (8001930 <ledRGB.10675+0xf0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001870:	ee17 2a90 	vmov	r2, s15
 8001874:	635a      	str	r2, [r3, #52]	; 0x34
	  htim3.Instance -> CCR2 = (100-1) * dutyCycleG;
 8001876:	4b2a      	ldr	r3, [pc, #168]	; (8001920 <ledRGB.10675+0xe0>)
 8001878:	edd3 7a00 	vldr	s15, [r3]
 800187c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800192c <ledRGB.10675+0xec>
 8001880:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001884:	4b2a      	ldr	r3, [pc, #168]	; (8001930 <ledRGB.10675+0xf0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800188c:	ee17 2a90 	vmov	r2, s15
 8001890:	639a      	str	r2, [r3, #56]	; 0x38
	  htim3.Instance -> CCR3 = (100-1) * dutyCycleB;
 8001892:	4b24      	ldr	r3, [pc, #144]	; (8001924 <ledRGB.10675+0xe4>)
 8001894:	edd3 7a00 	vldr	s15, [r3]
 8001898:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800192c <ledRGB.10675+0xec>
 800189c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018a0:	4b23      	ldr	r3, [pc, #140]	; (8001930 <ledRGB.10675+0xf0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018a8:	ee17 2a90 	vmov	r2, s15
 80018ac:	63da      	str	r2, [r3, #60]	; 0x3c
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80018ae:	2100      	movs	r1, #0
 80018b0:	481f      	ldr	r0, [pc, #124]	; (8001930 <ledRGB.10675+0xf0>)
 80018b2:	f003 fc15 	bl	80050e0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80018b6:	2104      	movs	r1, #4
 80018b8:	481d      	ldr	r0, [pc, #116]	; (8001930 <ledRGB.10675+0xf0>)
 80018ba:	f003 fc11 	bl	80050e0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80018be:	2108      	movs	r1, #8
 80018c0:	481b      	ldr	r0, [pc, #108]	; (8001930 <ledRGB.10675+0xf0>)
 80018c2:	f003 fc0d 	bl	80050e0 <HAL_TIM_PWM_Start>
	  dutyCycleR += 0.2;
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <ledRGB.10675+0xe8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7fe fe4c 	bl	8000568 <__aeabi_f2d>
 80018d0:	a311      	add	r3, pc, #68	; (adr r3, 8001918 <ledRGB.10675+0xd8>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	f7fe fce9 	bl	80002ac <__adddf3>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4610      	mov	r0, r2
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7ff f991 	bl	8000c08 <__aeabi_d2f>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4a0f      	ldr	r2, [pc, #60]	; (8001928 <ledRGB.10675+0xe8>)
 80018ea:	6013      	str	r3, [r2, #0]
	  if(dutyCycleR > 1.0){
 80018ec:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <ledRGB.10675+0xe8>)
 80018ee:	edd3 7a00 	vldr	s15, [r3]
 80018f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fe:	dc00      	bgt.n	8001902 <ledRGB.10675+0xc2>
  }
 8001900:	e003      	b.n	800190a <ledRGB.10675+0xca>
		  dutyCycleR = 0.0;
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <ledRGB.10675+0xe8>)
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
  }
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	f3af 8000 	nop.w
 8001918:	9999999a 	.word	0x9999999a
 800191c:	3fc99999 	.word	0x3fc99999
 8001920:	20000214 	.word	0x20000214
 8001924:	20000218 	.word	0x20000218
 8001928:	20000210 	.word	0x20000210
 800192c:	42c60000 	.word	0x42c60000
 8001930:	200003b8 	.word	0x200003b8

08001934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b094      	sub	sp, #80	; 0x50
 8001938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800193a:	f107 0320 	add.w	r3, r7, #32
 800193e:	2230      	movs	r2, #48	; 0x30
 8001940:	2100      	movs	r1, #0
 8001942:	4618      	mov	r0, r3
 8001944:	f004 fbea 	bl	800611c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001948:	f107 030c 	add.w	r3, r7, #12
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001958:	2300      	movs	r3, #0
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	4b29      	ldr	r3, [pc, #164]	; (8001a04 <SystemClock_Config+0xd0>)
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	4a28      	ldr	r2, [pc, #160]	; (8001a04 <SystemClock_Config+0xd0>)
 8001962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001966:	6413      	str	r3, [r2, #64]	; 0x40
 8001968:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <SystemClock_Config+0xd0>)
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001974:	2300      	movs	r3, #0
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <SystemClock_Config+0xd4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001980:	4a21      	ldr	r2, [pc, #132]	; (8001a08 <SystemClock_Config+0xd4>)
 8001982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <SystemClock_Config+0xd4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001994:	2302      	movs	r3, #2
 8001996:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001998:	2301      	movs	r3, #1
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800199c:	2310      	movs	r3, #16
 800199e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a0:	2302      	movs	r3, #2
 80019a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019a4:	2300      	movs	r3, #0
 80019a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019a8:	2308      	movs	r3, #8
 80019aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 80019ac:	2378      	movs	r3, #120	; 0x78
 80019ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019b0:	2302      	movs	r3, #2
 80019b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80019b4:	2305      	movs	r3, #5
 80019b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b8:	f107 0320 	add.w	r3, r7, #32
 80019bc:	4618      	mov	r0, r3
 80019be:	f002 fbef 	bl	80041a0 <HAL_RCC_OscConfig>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80019c8:	f000 f820 	bl	8001a0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019cc:	230f      	movs	r3, #15
 80019ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d0:	2302      	movs	r3, #2
 80019d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	2103      	movs	r1, #3
 80019ea:	4618      	mov	r0, r3
 80019ec:	f002 fe50 	bl	8004690 <HAL_RCC_ClockConfig>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80019f6:	f000 f809 	bl	8001a0c <Error_Handler>
  }
}
 80019fa:	bf00      	nop
 80019fc:	3750      	adds	r7, #80	; 0x50
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40007000 	.word	0x40007000

08001a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a10:	b672      	cpsid	i
}
 8001a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <Error_Handler+0x8>
	...

08001a18 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <MX_RNG_Init+0x20>)
 8001a1e:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <MX_RNG_Init+0x24>)
 8001a20:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001a22:	4805      	ldr	r0, [pc, #20]	; (8001a38 <MX_RNG_Init+0x20>)
 8001a24:	f003 f804 	bl	8004a30 <HAL_RNG_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001a2e:	f7ff ffed 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000350 	.word	0x20000350
 8001a3c:	50060800 	.word	0x50060800

08001a40 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0b      	ldr	r2, [pc, #44]	; (8001a7c <HAL_RNG_MspInit+0x3c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d10d      	bne.n	8001a6e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <HAL_RNG_MspInit+0x40>)
 8001a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a5a:	4a09      	ldr	r2, [pc, #36]	; (8001a80 <HAL_RNG_MspInit+0x40>)
 8001a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a60:	6353      	str	r3, [r2, #52]	; 0x34
 8001a62:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <HAL_RNG_MspInit+0x40>)
 8001a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	50060800 	.word	0x50060800
 8001a80:	40023800 	.word	0x40023800

08001a84 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001a88:	4b17      	ldr	r3, [pc, #92]	; (8001ae8 <MX_SPI3_Init+0x64>)
 8001a8a:	4a18      	ldr	r2, [pc, #96]	; (8001aec <MX_SPI3_Init+0x68>)
 8001a8c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a8e:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <MX_SPI3_Init+0x64>)
 8001a90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a94:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001a96:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <MX_SPI3_Init+0x64>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <MX_SPI3_Init+0x64>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <MX_SPI3_Init+0x64>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <MX_SPI3_Init+0x64>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <MX_SPI3_Init+0x64>)
 8001ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <MX_SPI3_Init+0x64>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <MX_SPI3_Init+0x64>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <MX_SPI3_Init+0x64>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ac8:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <MX_SPI3_Init+0x64>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <MX_SPI3_Init+0x64>)
 8001ad0:	220a      	movs	r2, #10
 8001ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ad4:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <MX_SPI3_Init+0x64>)
 8001ad6:	f002 ffd5 	bl	8004a84 <HAL_SPI_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001ae0:	f7ff ff94 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000360 	.word	0x20000360
 8001aec:	40003c00 	.word	0x40003c00

08001af0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	; 0x28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a19      	ldr	r2, [pc, #100]	; (8001b74 <HAL_SPI_MspInit+0x84>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d12c      	bne.n	8001b6c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <HAL_SPI_MspInit+0x88>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	4a17      	ldr	r2, [pc, #92]	; (8001b78 <HAL_SPI_MspInit+0x88>)
 8001b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b20:	6413      	str	r3, [r2, #64]	; 0x40
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_SPI_MspInit+0x88>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <HAL_SPI_MspInit+0x88>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	4a10      	ldr	r2, [pc, #64]	; (8001b78 <HAL_SPI_MspInit+0x88>)
 8001b38:	f043 0304 	orr.w	r3, r3, #4
 8001b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <HAL_SPI_MspInit+0x88>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001b4a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b5c:	2306      	movs	r3, #6
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	4619      	mov	r1, r3
 8001b66:	4805      	ldr	r0, [pc, #20]	; (8001b7c <HAL_SPI_MspInit+0x8c>)
 8001b68:	f001 ff7c 	bl	8003a64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001b6c:	bf00      	nop
 8001b6e:	3728      	adds	r7, #40	; 0x28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40003c00 	.word	0x40003c00
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020800 	.word	0x40020800

08001b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <HAL_MspInit+0x4c>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <HAL_MspInit+0x4c>)
 8001b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b94:	6453      	str	r3, [r2, #68]	; 0x44
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <HAL_MspInit+0x4c>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_MspInit+0x4c>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	4a08      	ldr	r2, [pc, #32]	; (8001bcc <HAL_MspInit+0x4c>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_MspInit+0x4c>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <NMI_Handler+0x4>

08001bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bda:	e7fe      	b.n	8001bda <HardFault_Handler+0x4>

08001bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <MemManage_Handler+0x4>

08001be2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be6:	e7fe      	b.n	8001be6 <BusFault_Handler+0x4>

08001be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bec:	e7fe      	b.n	8001bec <UsageFault_Handler+0x4>

08001bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c1c:	f001 fa1c 	bl	8003058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
	return 1;
 8001c28:	2301      	movs	r3, #1
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <_kill>:

int _kill(int pid, int sig)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c3e:	f004 fa43 	bl	80060c8 <__errno>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2216      	movs	r2, #22
 8001c46:	601a      	str	r2, [r3, #0]
	return -1;
 8001c48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <_exit>:

void _exit (int status)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ffe7 	bl	8001c34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c66:	e7fe      	b.n	8001c66 <_exit+0x12>

08001c68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	e00a      	b.n	8001c90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c7a:	f3af 8000 	nop.w
 8001c7e:	4601      	mov	r1, r0
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	60ba      	str	r2, [r7, #8]
 8001c86:	b2ca      	uxtb	r2, r1
 8001c88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	dbf0      	blt.n	8001c7a <_read+0x12>
	}

return len;
 8001c98:	687b      	ldr	r3, [r7, #4]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	e009      	b.n	8001cc8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	60ba      	str	r2, [r7, #8]
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	dbf1      	blt.n	8001cb4 <_write+0x12>
	}
	return len;
 8001cd0:	687b      	ldr	r3, [r7, #4]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <_close>:

int _close(int file)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
	return -1;
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d02:	605a      	str	r2, [r3, #4]
	return 0;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <_isatty>:

int _isatty(int file)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
	return 1;
 8001d1a:	2301      	movs	r3, #1
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
	return 0;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d4c:	4a14      	ldr	r2, [pc, #80]	; (8001da0 <_sbrk+0x5c>)
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <_sbrk+0x60>)
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d58:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <_sbrk+0x64>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d102      	bne.n	8001d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <_sbrk+0x64>)
 8001d62:	4a12      	ldr	r2, [pc, #72]	; (8001dac <_sbrk+0x68>)
 8001d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <_sbrk+0x64>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d207      	bcs.n	8001d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d74:	f004 f9a8 	bl	80060c8 <__errno>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	220c      	movs	r2, #12
 8001d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d82:	e009      	b.n	8001d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d84:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <_sbrk+0x64>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d8a:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <_sbrk+0x64>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	4a05      	ldr	r2, [pc, #20]	; (8001da8 <_sbrk+0x64>)
 8001d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d96:	68fb      	ldr	r3, [r7, #12]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20030000 	.word	0x20030000
 8001da4:	00000400 	.word	0x00000400
 8001da8:	20000220 	.word	0x20000220
 8001dac:	200004e8 	.word	0x200004e8

08001db0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <SystemInit+0x20>)
 8001db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dba:	4a05      	ldr	r2, [pc, #20]	; (8001dd0 <SystemInit+0x20>)
 8001dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dda:	f107 0308 	add.w	r3, r7, #8
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de8:	463b      	mov	r3, r7
 8001dea:	2200      	movs	r2, #0
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001df0:	4b1f      	ldr	r3, [pc, #124]	; (8001e70 <MX_TIM1_Init+0x9c>)
 8001df2:	4a20      	ldr	r2, [pc, #128]	; (8001e74 <MX_TIM1_Init+0xa0>)
 8001df4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 8001df6:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <MX_TIM1_Init+0x9c>)
 8001df8:	f242 720f 	movw	r2, #9999	; 0x270f
 8001dfc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfe:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <MX_TIM1_Init+0x9c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 12-1;
 8001e04:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <MX_TIM1_Init+0x9c>)
 8001e06:	220b      	movs	r2, #11
 8001e08:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001e0a:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <MX_TIM1_Init+0x9c>)
 8001e0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e12:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <MX_TIM1_Init+0x9c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e18:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <MX_TIM1_Init+0x9c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e1e:	4814      	ldr	r0, [pc, #80]	; (8001e70 <MX_TIM1_Init+0x9c>)
 8001e20:	f003 f8c0 	bl	8004fa4 <HAL_TIM_Base_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001e2a:	f7ff fdef 	bl	8001a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e34:	f107 0308 	add.w	r3, r7, #8
 8001e38:	4619      	mov	r1, r3
 8001e3a:	480d      	ldr	r0, [pc, #52]	; (8001e70 <MX_TIM1_Init+0x9c>)
 8001e3c:	f003 fada 	bl	80053f4 <HAL_TIM_ConfigClockSource>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001e46:	f7ff fde1 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e52:	463b      	mov	r3, r7
 8001e54:	4619      	mov	r1, r3
 8001e56:	4806      	ldr	r0, [pc, #24]	; (8001e70 <MX_TIM1_Init+0x9c>)
 8001e58:	f003 fea4 	bl	8005ba4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001e62:	f7ff fdd3 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e66:	bf00      	nop
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000400 	.word	0x20000400
 8001e74:	40010000 	.word	0x40010000

08001e78 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08a      	sub	sp, #40	; 0x28
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e7e:	f107 0320 	add.w	r3, r7, #32
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
 8001e94:	611a      	str	r2, [r3, #16]
 8001e96:	615a      	str	r2, [r3, #20]
 8001e98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e9a:	4b22      	ldr	r3, [pc, #136]	; (8001f24 <MX_TIM2_Init+0xac>)
 8001e9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ea0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60-1;
 8001ea2:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <MX_TIM2_Init+0xac>)
 8001ea4:	223b      	movs	r2, #59	; 0x3b
 8001ea6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea8:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <MX_TIM2_Init+0xac>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001eae:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <MX_TIM2_Init+0xac>)
 8001eb0:	2263      	movs	r2, #99	; 0x63
 8001eb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb4:	4b1b      	ldr	r3, [pc, #108]	; (8001f24 <MX_TIM2_Init+0xac>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eba:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <MX_TIM2_Init+0xac>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ec0:	4818      	ldr	r0, [pc, #96]	; (8001f24 <MX_TIM2_Init+0xac>)
 8001ec2:	f003 f8be 	bl	8005042 <HAL_TIM_PWM_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001ecc:	f7ff fd9e 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ed8:	f107 0320 	add.w	r3, r7, #32
 8001edc:	4619      	mov	r1, r3
 8001ede:	4811      	ldr	r0, [pc, #68]	; (8001f24 <MX_TIM2_Init+0xac>)
 8001ee0:	f003 fe60 	bl	8005ba4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001eea:	f7ff fd8f 	bl	8001a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eee:	2360      	movs	r3, #96	; 0x60
 8001ef0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100-1;
 8001ef2:	2363      	movs	r3, #99	; 0x63
 8001ef4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	2200      	movs	r2, #0
 8001f02:	4619      	mov	r1, r3
 8001f04:	4807      	ldr	r0, [pc, #28]	; (8001f24 <MX_TIM2_Init+0xac>)
 8001f06:	f003 f9b3 	bl	8005270 <HAL_TIM_PWM_ConfigChannel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001f10:	f7ff fd7c 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f14:	4803      	ldr	r0, [pc, #12]	; (8001f24 <MX_TIM2_Init+0xac>)
 8001f16:	f000 f8eb 	bl	80020f0 <HAL_TIM_MspPostInit>

}
 8001f1a:	bf00      	nop
 8001f1c:	3728      	adds	r7, #40	; 0x28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000448 	.word	0x20000448

08001f28 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08e      	sub	sp, #56	; 0x38
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f3c:	f107 0320 	add.w	r3, r7, #32
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
 8001f54:	615a      	str	r2, [r3, #20]
 8001f56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f58:	4b37      	ldr	r3, [pc, #220]	; (8002038 <MX_TIM3_Init+0x110>)
 8001f5a:	4a38      	ldr	r2, [pc, #224]	; (800203c <MX_TIM3_Init+0x114>)
 8001f5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 60-1;
 8001f5e:	4b36      	ldr	r3, [pc, #216]	; (8002038 <MX_TIM3_Init+0x110>)
 8001f60:	223b      	movs	r2, #59	; 0x3b
 8001f62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f64:	4b34      	ldr	r3, [pc, #208]	; (8002038 <MX_TIM3_Init+0x110>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001f6a:	4b33      	ldr	r3, [pc, #204]	; (8002038 <MX_TIM3_Init+0x110>)
 8001f6c:	2263      	movs	r2, #99	; 0x63
 8001f6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f70:	4b31      	ldr	r3, [pc, #196]	; (8002038 <MX_TIM3_Init+0x110>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f76:	4b30      	ldr	r3, [pc, #192]	; (8002038 <MX_TIM3_Init+0x110>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f7c:	482e      	ldr	r0, [pc, #184]	; (8002038 <MX_TIM3_Init+0x110>)
 8001f7e:	f003 f811 	bl	8004fa4 <HAL_TIM_Base_Init>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001f88:	f7ff fd40 	bl	8001a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f96:	4619      	mov	r1, r3
 8001f98:	4827      	ldr	r0, [pc, #156]	; (8002038 <MX_TIM3_Init+0x110>)
 8001f9a:	f003 fa2b 	bl	80053f4 <HAL_TIM_ConfigClockSource>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001fa4:	f7ff fd32 	bl	8001a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fa8:	4823      	ldr	r0, [pc, #140]	; (8002038 <MX_TIM3_Init+0x110>)
 8001faa:	f003 f84a 	bl	8005042 <HAL_TIM_PWM_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001fb4:	f7ff fd2a 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fc0:	f107 0320 	add.w	r3, r7, #32
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	481c      	ldr	r0, [pc, #112]	; (8002038 <MX_TIM3_Init+0x110>)
 8001fc8:	f003 fdec 	bl	8005ba4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001fd2:	f7ff fd1b 	bl	8001a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fd6:	2360      	movs	r3, #96	; 0x60
 8001fd8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100-1;
 8001fda:	2363      	movs	r3, #99	; 0x63
 8001fdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	2200      	movs	r2, #0
 8001fea:	4619      	mov	r1, r3
 8001fec:	4812      	ldr	r0, [pc, #72]	; (8002038 <MX_TIM3_Init+0x110>)
 8001fee:	f003 f93f 	bl	8005270 <HAL_TIM_PWM_ConfigChannel>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001ff8:	f7ff fd08 	bl	8001a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	2204      	movs	r2, #4
 8002000:	4619      	mov	r1, r3
 8002002:	480d      	ldr	r0, [pc, #52]	; (8002038 <MX_TIM3_Init+0x110>)
 8002004:	f003 f934 	bl	8005270 <HAL_TIM_PWM_ConfigChannel>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 800200e:	f7ff fcfd 	bl	8001a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002012:	1d3b      	adds	r3, r7, #4
 8002014:	2208      	movs	r2, #8
 8002016:	4619      	mov	r1, r3
 8002018:	4807      	ldr	r0, [pc, #28]	; (8002038 <MX_TIM3_Init+0x110>)
 800201a:	f003 f929 	bl	8005270 <HAL_TIM_PWM_ConfigChannel>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_TIM3_Init+0x100>
  {
    Error_Handler();
 8002024:	f7ff fcf2 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002028:	4803      	ldr	r0, [pc, #12]	; (8002038 <MX_TIM3_Init+0x110>)
 800202a:	f000 f861 	bl	80020f0 <HAL_TIM_MspPostInit>

}
 800202e:	bf00      	nop
 8002030:	3738      	adds	r7, #56	; 0x38
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	200003b8 	.word	0x200003b8
 800203c:	40000400 	.word	0x40000400

08002040 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a15      	ldr	r2, [pc, #84]	; (80020a4 <HAL_TIM_Base_MspInit+0x64>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d10e      	bne.n	8002070 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <HAL_TIM_Base_MspInit+0x68>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	4a13      	ldr	r2, [pc, #76]	; (80020a8 <HAL_TIM_Base_MspInit+0x68>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6453      	str	r3, [r2, #68]	; 0x44
 8002062:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <HAL_TIM_Base_MspInit+0x68>)
 8002064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800206e:	e012      	b.n	8002096 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM3)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a0d      	ldr	r2, [pc, #52]	; (80020ac <HAL_TIM_Base_MspInit+0x6c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d10d      	bne.n	8002096 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_TIM_Base_MspInit+0x68>)
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	4a09      	ldr	r2, [pc, #36]	; (80020a8 <HAL_TIM_Base_MspInit+0x68>)
 8002084:	f043 0302 	orr.w	r3, r3, #2
 8002088:	6413      	str	r3, [r2, #64]	; 0x40
 800208a:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <HAL_TIM_Base_MspInit+0x68>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	60bb      	str	r3, [r7, #8]
 8002094:	68bb      	ldr	r3, [r7, #8]
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40010000 	.word	0x40010000
 80020a8:	40023800 	.word	0x40023800
 80020ac:	40000400 	.word	0x40000400

080020b0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c0:	d10d      	bne.n	80020de <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <HAL_TIM_PWM_MspInit+0x3c>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	4a08      	ldr	r2, [pc, #32]	; (80020ec <HAL_TIM_PWM_MspInit+0x3c>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6413      	str	r3, [r2, #64]	; 0x40
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_TIM_PWM_MspInit+0x3c>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40023800 	.word	0x40023800

080020f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002110:	d11e      	bne.n	8002150 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	4b31      	ldr	r3, [pc, #196]	; (80021dc <HAL_TIM_MspPostInit+0xec>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a30      	ldr	r2, [pc, #192]	; (80021dc <HAL_TIM_MspPostInit+0xec>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b2e      	ldr	r3, [pc, #184]	; (80021dc <HAL_TIM_MspPostInit+0xec>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800212e:	2320      	movs	r3, #32
 8002130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800213e:	2301      	movs	r3, #1
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002142:	f107 0314 	add.w	r3, r7, #20
 8002146:	4619      	mov	r1, r3
 8002148:	4825      	ldr	r0, [pc, #148]	; (80021e0 <HAL_TIM_MspPostInit+0xf0>)
 800214a:	f001 fc8b 	bl	8003a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800214e:	e040      	b.n	80021d2 <HAL_TIM_MspPostInit+0xe2>
  else if(timHandle->Instance==TIM3)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a23      	ldr	r2, [pc, #140]	; (80021e4 <HAL_TIM_MspPostInit+0xf4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d13b      	bne.n	80021d2 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	4b1f      	ldr	r3, [pc, #124]	; (80021dc <HAL_TIM_MspPostInit+0xec>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a1e      	ldr	r2, [pc, #120]	; (80021dc <HAL_TIM_MspPostInit+0xec>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b1c      	ldr	r3, [pc, #112]	; (80021dc <HAL_TIM_MspPostInit+0xec>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	4b18      	ldr	r3, [pc, #96]	; (80021dc <HAL_TIM_MspPostInit+0xec>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a17      	ldr	r2, [pc, #92]	; (80021dc <HAL_TIM_MspPostInit+0xec>)
 8002180:	f043 0302 	orr.w	r3, r3, #2
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b15      	ldr	r3, [pc, #84]	; (80021dc <HAL_TIM_MspPostInit+0xec>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	60bb      	str	r3, [r7, #8]
 8002190:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002192:	23c0      	movs	r3, #192	; 0xc0
 8002194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219e:	2300      	movs	r3, #0
 80021a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021a2:	2302      	movs	r3, #2
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	4619      	mov	r1, r3
 80021ac:	480c      	ldr	r0, [pc, #48]	; (80021e0 <HAL_TIM_MspPostInit+0xf0>)
 80021ae:	f001 fc59 	bl	8003a64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021b2:	2301      	movs	r3, #1
 80021b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b6:	2302      	movs	r3, #2
 80021b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021c2:	2302      	movs	r3, #2
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4619      	mov	r1, r3
 80021cc:	4806      	ldr	r0, [pc, #24]	; (80021e8 <HAL_TIM_MspPostInit+0xf8>)
 80021ce:	f001 fc49 	bl	8003a64 <HAL_GPIO_Init>
}
 80021d2:	bf00      	nop
 80021d4:	3728      	adds	r7, #40	; 0x28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40020000 	.word	0x40020000
 80021e4:	40000400 	.word	0x40000400
 80021e8:	40020400 	.word	0x40020400

080021ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021f0:	4b11      	ldr	r3, [pc, #68]	; (8002238 <MX_USART1_UART_Init+0x4c>)
 80021f2:	4a12      	ldr	r2, [pc, #72]	; (800223c <MX_USART1_UART_Init+0x50>)
 80021f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021f6:	4b10      	ldr	r3, [pc, #64]	; (8002238 <MX_USART1_UART_Init+0x4c>)
 80021f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021fe:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <MX_USART1_UART_Init+0x4c>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002204:	4b0c      	ldr	r3, [pc, #48]	; (8002238 <MX_USART1_UART_Init+0x4c>)
 8002206:	2200      	movs	r2, #0
 8002208:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800220a:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <MX_USART1_UART_Init+0x4c>)
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002210:	4b09      	ldr	r3, [pc, #36]	; (8002238 <MX_USART1_UART_Init+0x4c>)
 8002212:	220c      	movs	r2, #12
 8002214:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002216:	4b08      	ldr	r3, [pc, #32]	; (8002238 <MX_USART1_UART_Init+0x4c>)
 8002218:	2200      	movs	r2, #0
 800221a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <MX_USART1_UART_Init+0x4c>)
 800221e:	2200      	movs	r2, #0
 8002220:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002222:	4805      	ldr	r0, [pc, #20]	; (8002238 <MX_USART1_UART_Init+0x4c>)
 8002224:	f003 fd3a 	bl	8005c9c <HAL_UART_Init>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800222e:	f7ff fbed 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000490 	.word	0x20000490
 800223c:	40011000 	.word	0x40011000

08002240 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	; 0x28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a19      	ldr	r2, [pc, #100]	; (80022c4 <HAL_UART_MspInit+0x84>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d12c      	bne.n	80022bc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <HAL_UART_MspInit+0x88>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	4a17      	ldr	r2, [pc, #92]	; (80022c8 <HAL_UART_MspInit+0x88>)
 800226c:	f043 0310 	orr.w	r3, r3, #16
 8002270:	6453      	str	r3, [r2, #68]	; 0x44
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <HAL_UART_MspInit+0x88>)
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <HAL_UART_MspInit+0x88>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a10      	ldr	r2, [pc, #64]	; (80022c8 <HAL_UART_MspInit+0x88>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <HAL_UART_MspInit+0x88>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800229a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800229e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a0:	2302      	movs	r3, #2
 80022a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a8:	2303      	movs	r3, #3
 80022aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022ac:	2307      	movs	r3, #7
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	4619      	mov	r1, r3
 80022b6:	4805      	ldr	r0, [pc, #20]	; (80022cc <HAL_UART_MspInit+0x8c>)
 80022b8:	f001 fbd4 	bl	8003a64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80022bc:	bf00      	nop
 80022be:	3728      	adds	r7, #40	; 0x28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40011000 	.word	0x40011000
 80022c8:	40023800 	.word	0x40023800
 80022cc:	40020000 	.word	0x40020000

080022d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80022d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002308 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022d4:	480d      	ldr	r0, [pc, #52]	; (800230c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022d6:	490e      	ldr	r1, [pc, #56]	; (8002310 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022d8:	4a0e      	ldr	r2, [pc, #56]	; (8002314 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022dc:	e002      	b.n	80022e4 <LoopCopyDataInit>

080022de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022e2:	3304      	adds	r3, #4

080022e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022e8:	d3f9      	bcc.n	80022de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ea:	4a0b      	ldr	r2, [pc, #44]	; (8002318 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022ec:	4c0b      	ldr	r4, [pc, #44]	; (800231c <LoopFillZerobss+0x26>)
  movs r3, #0
 80022ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f0:	e001      	b.n	80022f6 <LoopFillZerobss>

080022f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f4:	3204      	adds	r2, #4

080022f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022f8:	d3fb      	bcc.n	80022f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022fa:	f7ff fd59 	bl	8001db0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022fe:	f003 fee9 	bl	80060d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002302:	f7ff f99f 	bl	8001644 <main>
  bx  lr    
 8002306:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002308:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800230c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002310:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002314:	0800b0ec 	.word	0x0800b0ec
  ldr r2, =_sbss
 8002318:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800231c:	200004e8 	.word	0x200004e8

08002320 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002320:	e7fe      	b.n	8002320 <ADC_IRQHandler>
	...

08002324 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8002324:	b590      	push	{r4, r7, lr}
 8002326:	b089      	sub	sp, #36	; 0x24
 8002328:	af02      	add	r7, sp, #8
 800232a:	4604      	mov	r4, r0
 800232c:	4608      	mov	r0, r1
 800232e:	4611      	mov	r1, r2
 8002330:	461a      	mov	r2, r3
 8002332:	4623      	mov	r3, r4
 8002334:	71fb      	strb	r3, [r7, #7]
 8002336:	4603      	mov	r3, r0
 8002338:	71bb      	strb	r3, [r7, #6]
 800233a:	460b      	mov	r3, r1
 800233c:	717b      	strb	r3, [r7, #5]
 800233e:	4613      	mov	r3, r2
 8002340:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
		uint8_t 	i,j;
		
		function_char = Character;
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8002346:	7dfb      	ldrb	r3, [r7, #23]
 8002348:	2b1f      	cmp	r3, #31
 800234a:	d802      	bhi.n	8002352 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 800234c:	2300      	movs	r3, #0
 800234e:	71fb      	strb	r3, [r7, #7]
 8002350:	e002      	b.n	8002358 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8002352:	7dfb      	ldrb	r3, [r7, #23]
 8002354:	3b20      	subs	r3, #32
 8002356:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8002358:	2300      	movs	r3, #0
 800235a:	753b      	strb	r3, [r7, #20]
 800235c:	e012      	b.n	8002384 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 800235e:	7dfa      	ldrb	r2, [r7, #23]
 8002360:	7d38      	ldrb	r0, [r7, #20]
 8002362:	7d39      	ldrb	r1, [r7, #20]
 8002364:	4c3c      	ldr	r4, [pc, #240]	; (8002458 <ILI9341_Draw_Char+0x134>)
 8002366:	4613      	mov	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4413      	add	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4423      	add	r3, r4
 8002370:	4403      	add	r3, r0
 8002372:	781a      	ldrb	r2, [r3, #0]
 8002374:	f107 0318 	add.w	r3, r7, #24
 8002378:	440b      	add	r3, r1
 800237a:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800237e:	7d3b      	ldrb	r3, [r7, #20]
 8002380:	3301      	adds	r3, #1
 8002382:	753b      	strb	r3, [r7, #20]
 8002384:	7d3b      	ldrb	r3, [r7, #20]
 8002386:	2b05      	cmp	r3, #5
 8002388:	d9e9      	bls.n	800235e <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 800238a:	79bb      	ldrb	r3, [r7, #6]
 800238c:	b298      	uxth	r0, r3
 800238e:	797b      	ldrb	r3, [r7, #5]
 8002390:	b299      	uxth	r1, r3
 8002392:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002394:	461a      	mov	r2, r3
 8002396:	0052      	lsls	r2, r2, #1
 8002398:	4413      	add	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	b29c      	uxth	r4, r3
 80023a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	4623      	mov	r3, r4
 80023aa:	f000 fc5d 	bl	8002c68 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 80023ae:	2300      	movs	r3, #0
 80023b0:	757b      	strb	r3, [r7, #21]
 80023b2:	e048      	b.n	8002446 <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80023b4:	2300      	movs	r3, #0
 80023b6:	75bb      	strb	r3, [r7, #22]
 80023b8:	e03f      	b.n	800243a <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 80023ba:	7d7b      	ldrb	r3, [r7, #21]
 80023bc:	f107 0218 	add.w	r2, r7, #24
 80023c0:	4413      	add	r3, r2
 80023c2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80023c6:	461a      	mov	r2, r3
 80023c8:	7dbb      	ldrb	r3, [r7, #22]
 80023ca:	fa42 f303 	asr.w	r3, r2, r3
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d02e      	beq.n	8002434 <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 80023d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d110      	bne.n	80023fe <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80023dc:	79bb      	ldrb	r3, [r7, #6]
 80023de:	b29a      	uxth	r2, r3
 80023e0:	7d7b      	ldrb	r3, [r7, #21]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	b298      	uxth	r0, r3
 80023e8:	797b      	ldrb	r3, [r7, #5]
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	7dbb      	ldrb	r3, [r7, #22]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	4413      	add	r3, r2
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	887a      	ldrh	r2, [r7, #2]
 80023f6:	4619      	mov	r1, r3
 80023f8:	f000 fb5c 	bl	8002ab4 <ILI9341_Draw_Pixel>
 80023fc:	e01a      	b.n	8002434 <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80023fe:	79bb      	ldrb	r3, [r7, #6]
 8002400:	b29a      	uxth	r2, r3
 8002402:	7d7b      	ldrb	r3, [r7, #21]
 8002404:	b29b      	uxth	r3, r3
 8002406:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8002408:	fb11 f303 	smulbb	r3, r1, r3
 800240c:	b29b      	uxth	r3, r3
 800240e:	4413      	add	r3, r2
 8002410:	b298      	uxth	r0, r3
 8002412:	797b      	ldrb	r3, [r7, #5]
 8002414:	b29a      	uxth	r2, r3
 8002416:	7dbb      	ldrb	r3, [r7, #22]
 8002418:	b29b      	uxth	r3, r3
 800241a:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800241c:	fb11 f303 	smulbb	r3, r1, r3
 8002420:	b29b      	uxth	r3, r3
 8002422:	4413      	add	r3, r2
 8002424:	b299      	uxth	r1, r3
 8002426:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8002428:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800242a:	887b      	ldrh	r3, [r7, #2]
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	4623      	mov	r3, r4
 8002430:	f000 fc1a 	bl	8002c68 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002434:	7dbb      	ldrb	r3, [r7, #22]
 8002436:	3301      	adds	r3, #1
 8002438:	75bb      	strb	r3, [r7, #22]
 800243a:	7dbb      	ldrb	r3, [r7, #22]
 800243c:	2b07      	cmp	r3, #7
 800243e:	d9bc      	bls.n	80023ba <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8002440:	7d7b      	ldrb	r3, [r7, #21]
 8002442:	3301      	adds	r3, #1
 8002444:	757b      	strb	r3, [r7, #21]
 8002446:	7d7b      	ldrb	r3, [r7, #21]
 8002448:	2b05      	cmp	r3, #5
 800244a:	d9b3      	bls.n	80023b4 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 800244c:	bf00      	nop
 800244e:	bf00      	nop
 8002450:	371c      	adds	r7, #28
 8002452:	46bd      	mov	sp, r7
 8002454:	bd90      	pop	{r4, r7, pc}
 8002456:	bf00      	nop
 8002458:	0800a9e8 	.word	0x0800a9e8

0800245c <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b085      	sub	sp, #20
 8002460:	af02      	add	r7, sp, #8
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	4608      	mov	r0, r1
 8002466:	4611      	mov	r1, r2
 8002468:	461a      	mov	r2, r3
 800246a:	4603      	mov	r3, r0
 800246c:	70fb      	strb	r3, [r7, #3]
 800246e:	460b      	mov	r3, r1
 8002470:	70bb      	strb	r3, [r7, #2]
 8002472:	4613      	mov	r3, r2
 8002474:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8002476:	e017      	b.n	80024a8 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	1c5a      	adds	r2, r3, #1
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	7818      	ldrb	r0, [r3, #0]
 8002480:	883c      	ldrh	r4, [r7, #0]
 8002482:	78ba      	ldrb	r2, [r7, #2]
 8002484:	78f9      	ldrb	r1, [r7, #3]
 8002486:	8bbb      	ldrh	r3, [r7, #28]
 8002488:	9301      	str	r3, [sp, #4]
 800248a:	8b3b      	ldrh	r3, [r7, #24]
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	4623      	mov	r3, r4
 8002490:	f7ff ff48 	bl	8002324 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8002494:	8b3b      	ldrh	r3, [r7, #24]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	0052      	lsls	r2, r2, #1
 800249c:	4413      	add	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	78fb      	ldrb	r3, [r7, #3]
 80024a4:	4413      	add	r3, r2
 80024a6:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1e3      	bne.n	8002478 <ILI9341_Draw_Text+0x1c>
    }
}
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd90      	pop	{r4, r7, pc}
	...

080024bc <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
MX_SPI3_Init();																							//SPI INIT
 80024c0:	f7ff fae0 	bl	8001a84 <MX_SPI3_Init>
MX_GPIO_Init();																							//GPIO INIT
 80024c4:	f7fe fe38 	bl	8001138 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80024c8:	2200      	movs	r2, #0
 80024ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024ce:	4802      	ldr	r0, [pc, #8]	; (80024d8 <ILI9341_SPI_Init+0x1c>)
 80024d0:	f001 fc8c 	bl	8003dec <HAL_GPIO_WritePin>
}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40020000 	.word	0x40020000

080024dc <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80024e6:	1df9      	adds	r1, r7, #7
 80024e8:	2301      	movs	r3, #1
 80024ea:	2201      	movs	r2, #1
 80024ec:	4803      	ldr	r0, [pc, #12]	; (80024fc <ILI9341_SPI_Send+0x20>)
 80024ee:	f002 fb52 	bl	8004b96 <HAL_SPI_Transmit>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000360 	.word	0x20000360

08002500 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800250a:	2200      	movs	r2, #0
 800250c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002510:	480b      	ldr	r0, [pc, #44]	; (8002540 <ILI9341_Write_Command+0x40>)
 8002512:	f001 fc6b 	bl	8003dec <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002516:	2200      	movs	r2, #0
 8002518:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800251c:	4808      	ldr	r0, [pc, #32]	; (8002540 <ILI9341_Write_Command+0x40>)
 800251e:	f001 fc65 	bl	8003dec <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8002522:	79fb      	ldrb	r3, [r7, #7]
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff ffd9 	bl	80024dc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800252a:	2201      	movs	r2, #1
 800252c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002530:	4803      	ldr	r0, [pc, #12]	; (8002540 <ILI9341_Write_Command+0x40>)
 8002532:	f001 fc5b 	bl	8003dec <HAL_GPIO_WritePin>
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40020000 	.word	0x40020000

08002544 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800254e:	2201      	movs	r2, #1
 8002550:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002554:	480b      	ldr	r0, [pc, #44]	; (8002584 <ILI9341_Write_Data+0x40>)
 8002556:	f001 fc49 	bl	8003dec <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800255a:	2200      	movs	r2, #0
 800255c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002560:	4808      	ldr	r0, [pc, #32]	; (8002584 <ILI9341_Write_Data+0x40>)
 8002562:	f001 fc43 	bl	8003dec <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ffb7 	bl	80024dc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800256e:	2201      	movs	r2, #1
 8002570:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002574:	4803      	ldr	r0, [pc, #12]	; (8002584 <ILI9341_Write_Data+0x40>)
 8002576:	f001 fc39 	bl	8003dec <HAL_GPIO_WritePin>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40020000 	.word	0x40020000

08002588 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002588:	b590      	push	{r4, r7, lr}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	4604      	mov	r4, r0
 8002590:	4608      	mov	r0, r1
 8002592:	4611      	mov	r1, r2
 8002594:	461a      	mov	r2, r3
 8002596:	4623      	mov	r3, r4
 8002598:	80fb      	strh	r3, [r7, #6]
 800259a:	4603      	mov	r3, r0
 800259c:	80bb      	strh	r3, [r7, #4]
 800259e:	460b      	mov	r3, r1
 80025a0:	807b      	strh	r3, [r7, #2]
 80025a2:	4613      	mov	r3, r2
 80025a4:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80025a6:	202a      	movs	r0, #42	; 0x2a
 80025a8:	f7ff ffaa 	bl	8002500 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	0a1b      	lsrs	r3, r3, #8
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ffc5 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff ffc0 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 80025c4:	887b      	ldrh	r3, [r7, #2]
 80025c6:	0a1b      	lsrs	r3, r3, #8
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ffb9 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 80025d2:	887b      	ldrh	r3, [r7, #2]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff ffb4 	bl	8002544 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80025dc:	202b      	movs	r0, #43	; 0x2b
 80025de:	f7ff ff8f 	bl	8002500 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80025e2:	88bb      	ldrh	r3, [r7, #4]
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff ffaa 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80025f0:	88bb      	ldrh	r3, [r7, #4]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ffa5 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80025fa:	883b      	ldrh	r3, [r7, #0]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	b29b      	uxth	r3, r3
 8002600:	b2db      	uxtb	r3, r3
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff ff9e 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8002608:	883b      	ldrh	r3, [r7, #0]
 800260a:	b2db      	uxtb	r3, r3
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff99 	bl	8002544 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8002612:	202c      	movs	r0, #44	; 0x2c
 8002614:	f7ff ff74 	bl	8002500 <ILI9341_Write_Command>
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bd90      	pop	{r4, r7, pc}

08002620 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002624:	2201      	movs	r2, #1
 8002626:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800262a:	480b      	ldr	r0, [pc, #44]	; (8002658 <ILI9341_Reset+0x38>)
 800262c:	f001 fbde 	bl	8003dec <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002630:	20c8      	movs	r0, #200	; 0xc8
 8002632:	f000 fd31 	bl	8003098 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002636:	2200      	movs	r2, #0
 8002638:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800263c:	4806      	ldr	r0, [pc, #24]	; (8002658 <ILI9341_Reset+0x38>)
 800263e:	f001 fbd5 	bl	8003dec <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002642:	20c8      	movs	r0, #200	; 0xc8
 8002644:	f000 fd28 	bl	8003098 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8002648:	2201      	movs	r2, #1
 800264a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800264e:	4802      	ldr	r0, [pc, #8]	; (8002658 <ILI9341_Reset+0x38>)
 8002650:	f001 fbcc 	bl	8003dec <HAL_GPIO_WritePin>
}
 8002654:	bf00      	nop
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40020000 	.word	0x40020000

0800265c <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 800266a:	2036      	movs	r0, #54	; 0x36
 800266c:	f7ff ff48 	bl	8002500 <ILI9341_Write_Command>
HAL_Delay(1);
 8002670:	2001      	movs	r0, #1
 8002672:	f000 fd11 	bl	8003098 <HAL_Delay>
	
switch(screen_rotation) 
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	2b03      	cmp	r3, #3
 800267a:	d837      	bhi.n	80026ec <ILI9341_Set_Rotation+0x90>
 800267c:	a201      	add	r2, pc, #4	; (adr r2, 8002684 <ILI9341_Set_Rotation+0x28>)
 800267e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002682:	bf00      	nop
 8002684:	08002695 	.word	0x08002695
 8002688:	080026ab 	.word	0x080026ab
 800268c:	080026c1 	.word	0x080026c1
 8002690:	080026d7 	.word	0x080026d7
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8002694:	2048      	movs	r0, #72	; 0x48
 8002696:	f7ff ff55 	bl	8002544 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800269a:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <ILI9341_Set_Rotation+0x9c>)
 800269c:	22f0      	movs	r2, #240	; 0xf0
 800269e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80026a0:	4b16      	ldr	r3, [pc, #88]	; (80026fc <ILI9341_Set_Rotation+0xa0>)
 80026a2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80026a6:	801a      	strh	r2, [r3, #0]
			break;
 80026a8:	e021      	b.n	80026ee <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80026aa:	2028      	movs	r0, #40	; 0x28
 80026ac:	f7ff ff4a 	bl	8002544 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <ILI9341_Set_Rotation+0x9c>)
 80026b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80026b6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80026b8:	4b10      	ldr	r3, [pc, #64]	; (80026fc <ILI9341_Set_Rotation+0xa0>)
 80026ba:	22f0      	movs	r2, #240	; 0xf0
 80026bc:	801a      	strh	r2, [r3, #0]
			break;
 80026be:	e016      	b.n	80026ee <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80026c0:	2088      	movs	r0, #136	; 0x88
 80026c2:	f7ff ff3f 	bl	8002544 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80026c6:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <ILI9341_Set_Rotation+0x9c>)
 80026c8:	22f0      	movs	r2, #240	; 0xf0
 80026ca:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80026cc:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <ILI9341_Set_Rotation+0xa0>)
 80026ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80026d2:	801a      	strh	r2, [r3, #0]
			break;
 80026d4:	e00b      	b.n	80026ee <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80026d6:	20e8      	movs	r0, #232	; 0xe8
 80026d8:	f7ff ff34 	bl	8002544 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <ILI9341_Set_Rotation+0x9c>)
 80026de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80026e2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <ILI9341_Set_Rotation+0xa0>)
 80026e6:	22f0      	movs	r2, #240	; 0xf0
 80026e8:	801a      	strh	r2, [r3, #0]
			break;
 80026ea:	e000      	b.n	80026ee <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80026ec:	bf00      	nop
	}
}
 80026ee:	bf00      	nop
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	2000000a 	.word	0x2000000a
 80026fc:	20000008 	.word	0x20000008

08002700 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002704:	2201      	movs	r2, #1
 8002706:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800270a:	4802      	ldr	r0, [pc, #8]	; (8002714 <ILI9341_Enable+0x14>)
 800270c:	f001 fb6e 	bl	8003dec <HAL_GPIO_WritePin>
}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40020000 	.word	0x40020000

08002718 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0

ILI9341_Enable();
 800271c:	f7ff fff0 	bl	8002700 <ILI9341_Enable>
ILI9341_SPI_Init();
 8002720:	f7ff fecc 	bl	80024bc <ILI9341_SPI_Init>
ILI9341_Reset();
 8002724:	f7ff ff7c 	bl	8002620 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8002728:	2001      	movs	r0, #1
 800272a:	f7ff fee9 	bl	8002500 <ILI9341_Write_Command>
HAL_Delay(1000);
 800272e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002732:	f000 fcb1 	bl	8003098 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8002736:	20cb      	movs	r0, #203	; 0xcb
 8002738:	f7ff fee2 	bl	8002500 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 800273c:	2039      	movs	r0, #57	; 0x39
 800273e:	f7ff ff01 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8002742:	202c      	movs	r0, #44	; 0x2c
 8002744:	f7ff fefe 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002748:	2000      	movs	r0, #0
 800274a:	f7ff fefb 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 800274e:	2034      	movs	r0, #52	; 0x34
 8002750:	f7ff fef8 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8002754:	2002      	movs	r0, #2
 8002756:	f7ff fef5 	bl	8002544 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 800275a:	20cf      	movs	r0, #207	; 0xcf
 800275c:	f7ff fed0 	bl	8002500 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002760:	2000      	movs	r0, #0
 8002762:	f7ff feef 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002766:	20c1      	movs	r0, #193	; 0xc1
 8002768:	f7ff feec 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 800276c:	2030      	movs	r0, #48	; 0x30
 800276e:	f7ff fee9 	bl	8002544 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8002772:	20e8      	movs	r0, #232	; 0xe8
 8002774:	f7ff fec4 	bl	8002500 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8002778:	2085      	movs	r0, #133	; 0x85
 800277a:	f7ff fee3 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800277e:	2000      	movs	r0, #0
 8002780:	f7ff fee0 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8002784:	2078      	movs	r0, #120	; 0x78
 8002786:	f7ff fedd 	bl	8002544 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 800278a:	20ea      	movs	r0, #234	; 0xea
 800278c:	f7ff feb8 	bl	8002500 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002790:	2000      	movs	r0, #0
 8002792:	f7ff fed7 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002796:	2000      	movs	r0, #0
 8002798:	f7ff fed4 	bl	8002544 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 800279c:	20ed      	movs	r0, #237	; 0xed
 800279e:	f7ff feaf 	bl	8002500 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80027a2:	2064      	movs	r0, #100	; 0x64
 80027a4:	f7ff fece 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80027a8:	2003      	movs	r0, #3
 80027aa:	f7ff fecb 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80027ae:	2012      	movs	r0, #18
 80027b0:	f7ff fec8 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80027b4:	2081      	movs	r0, #129	; 0x81
 80027b6:	f7ff fec5 	bl	8002544 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 80027ba:	20f7      	movs	r0, #247	; 0xf7
 80027bc:	f7ff fea0 	bl	8002500 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 80027c0:	2020      	movs	r0, #32
 80027c2:	f7ff febf 	bl	8002544 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 80027c6:	20c0      	movs	r0, #192	; 0xc0
 80027c8:	f7ff fe9a 	bl	8002500 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 80027cc:	2023      	movs	r0, #35	; 0x23
 80027ce:	f7ff feb9 	bl	8002544 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 80027d2:	20c1      	movs	r0, #193	; 0xc1
 80027d4:	f7ff fe94 	bl	8002500 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 80027d8:	2010      	movs	r0, #16
 80027da:	f7ff feb3 	bl	8002544 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 80027de:	20c5      	movs	r0, #197	; 0xc5
 80027e0:	f7ff fe8e 	bl	8002500 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80027e4:	203e      	movs	r0, #62	; 0x3e
 80027e6:	f7ff fead 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 80027ea:	2028      	movs	r0, #40	; 0x28
 80027ec:	f7ff feaa 	bl	8002544 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 80027f0:	20c7      	movs	r0, #199	; 0xc7
 80027f2:	f7ff fe85 	bl	8002500 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80027f6:	2086      	movs	r0, #134	; 0x86
 80027f8:	f7ff fea4 	bl	8002544 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80027fc:	2036      	movs	r0, #54	; 0x36
 80027fe:	f7ff fe7f 	bl	8002500 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8002802:	2048      	movs	r0, #72	; 0x48
 8002804:	f7ff fe9e 	bl	8002544 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8002808:	203a      	movs	r0, #58	; 0x3a
 800280a:	f7ff fe79 	bl	8002500 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800280e:	2055      	movs	r0, #85	; 0x55
 8002810:	f7ff fe98 	bl	8002544 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8002814:	20b1      	movs	r0, #177	; 0xb1
 8002816:	f7ff fe73 	bl	8002500 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800281a:	2000      	movs	r0, #0
 800281c:	f7ff fe92 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8002820:	2018      	movs	r0, #24
 8002822:	f7ff fe8f 	bl	8002544 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8002826:	20b6      	movs	r0, #182	; 0xb6
 8002828:	f7ff fe6a 	bl	8002500 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 800282c:	2008      	movs	r0, #8
 800282e:	f7ff fe89 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8002832:	2082      	movs	r0, #130	; 0x82
 8002834:	f7ff fe86 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8002838:	2027      	movs	r0, #39	; 0x27
 800283a:	f7ff fe83 	bl	8002544 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 800283e:	20f2      	movs	r0, #242	; 0xf2
 8002840:	f7ff fe5e 	bl	8002500 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002844:	2000      	movs	r0, #0
 8002846:	f7ff fe7d 	bl	8002544 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 800284a:	2026      	movs	r0, #38	; 0x26
 800284c:	f7ff fe58 	bl	8002500 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8002850:	2001      	movs	r0, #1
 8002852:	f7ff fe77 	bl	8002544 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8002856:	20e0      	movs	r0, #224	; 0xe0
 8002858:	f7ff fe52 	bl	8002500 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 800285c:	200f      	movs	r0, #15
 800285e:	f7ff fe71 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002862:	2031      	movs	r0, #49	; 0x31
 8002864:	f7ff fe6e 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8002868:	202b      	movs	r0, #43	; 0x2b
 800286a:	f7ff fe6b 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800286e:	200c      	movs	r0, #12
 8002870:	f7ff fe68 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002874:	200e      	movs	r0, #14
 8002876:	f7ff fe65 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800287a:	2008      	movs	r0, #8
 800287c:	f7ff fe62 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8002880:	204e      	movs	r0, #78	; 0x4e
 8002882:	f7ff fe5f 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8002886:	20f1      	movs	r0, #241	; 0xf1
 8002888:	f7ff fe5c 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 800288c:	2037      	movs	r0, #55	; 0x37
 800288e:	f7ff fe59 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002892:	2007      	movs	r0, #7
 8002894:	f7ff fe56 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8002898:	2010      	movs	r0, #16
 800289a:	f7ff fe53 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800289e:	2003      	movs	r0, #3
 80028a0:	f7ff fe50 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80028a4:	200e      	movs	r0, #14
 80028a6:	f7ff fe4d 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80028aa:	2009      	movs	r0, #9
 80028ac:	f7ff fe4a 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80028b0:	2000      	movs	r0, #0
 80028b2:	f7ff fe47 	bl	8002544 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80028b6:	20e1      	movs	r0, #225	; 0xe1
 80028b8:	f7ff fe22 	bl	8002500 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80028bc:	2000      	movs	r0, #0
 80028be:	f7ff fe41 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80028c2:	200e      	movs	r0, #14
 80028c4:	f7ff fe3e 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80028c8:	2014      	movs	r0, #20
 80028ca:	f7ff fe3b 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80028ce:	2003      	movs	r0, #3
 80028d0:	f7ff fe38 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80028d4:	2011      	movs	r0, #17
 80028d6:	f7ff fe35 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80028da:	2007      	movs	r0, #7
 80028dc:	f7ff fe32 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80028e0:	2031      	movs	r0, #49	; 0x31
 80028e2:	f7ff fe2f 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80028e6:	20c1      	movs	r0, #193	; 0xc1
 80028e8:	f7ff fe2c 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 80028ec:	2048      	movs	r0, #72	; 0x48
 80028ee:	f7ff fe29 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80028f2:	2008      	movs	r0, #8
 80028f4:	f7ff fe26 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80028f8:	200f      	movs	r0, #15
 80028fa:	f7ff fe23 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80028fe:	200c      	movs	r0, #12
 8002900:	f7ff fe20 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002904:	2031      	movs	r0, #49	; 0x31
 8002906:	f7ff fe1d 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800290a:	2036      	movs	r0, #54	; 0x36
 800290c:	f7ff fe1a 	bl	8002544 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002910:	200f      	movs	r0, #15
 8002912:	f7ff fe17 	bl	8002544 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8002916:	2011      	movs	r0, #17
 8002918:	f7ff fdf2 	bl	8002500 <ILI9341_Write_Command>
HAL_Delay(120);
 800291c:	2078      	movs	r0, #120	; 0x78
 800291e:	f000 fbbb 	bl	8003098 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8002922:	2029      	movs	r0, #41	; 0x29
 8002924:	f7ff fdec 	bl	8002500 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002928:	2000      	movs	r0, #0
 800292a:	f7ff fe97 	bl	800265c <ILI9341_Set_Rotation>
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002934:	b5b0      	push	{r4, r5, r7, lr}
 8002936:	b08c      	sub	sp, #48	; 0x30
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	80fb      	strh	r3, [r7, #6]
 8002940:	466b      	mov	r3, sp
 8002942:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002950:	d202      	bcs.n	8002958 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
 8002956:	e002      	b.n	800295e <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8002958:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800295c:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800295e:	2201      	movs	r2, #1
 8002960:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002964:	483e      	ldr	r0, [pc, #248]	; (8002a60 <ILI9341_Draw_Colour_Burst+0x12c>)
 8002966:	f001 fa41 	bl	8003dec <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800296a:	2200      	movs	r2, #0
 800296c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002970:	483b      	ldr	r0, [pc, #236]	; (8002a60 <ILI9341_Draw_Colour_Burst+0x12c>)
 8002972:	f001 fa3b 	bl	8003dec <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	0a1b      	lsrs	r3, r3, #8
 800297a:	b29b      	uxth	r3, r3
 800297c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8002980:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002982:	4623      	mov	r3, r4
 8002984:	3b01      	subs	r3, #1
 8002986:	61fb      	str	r3, [r7, #28]
 8002988:	4620      	mov	r0, r4
 800298a:	f04f 0100 	mov.w	r1, #0
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	00cb      	lsls	r3, r1, #3
 8002998:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800299c:	00c2      	lsls	r2, r0, #3
 800299e:	4620      	mov	r0, r4
 80029a0:	f04f 0100 	mov.w	r1, #0
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	00cb      	lsls	r3, r1, #3
 80029ae:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80029b2:	00c2      	lsls	r2, r0, #3
 80029b4:	1de3      	adds	r3, r4, #7
 80029b6:	08db      	lsrs	r3, r3, #3
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	ebad 0d03 	sub.w	sp, sp, r3
 80029be:	466b      	mov	r3, sp
 80029c0:	3300      	adds	r3, #0
 80029c2:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80029c4:	2300      	movs	r3, #0
 80029c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80029c8:	e00e      	b.n	80029e8 <ILI9341_Draw_Colour_Burst+0xb4>
	{
		burst_buffer[j] = 	chifted;
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ce:	4413      	add	r3, r2
 80029d0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80029d4:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80029d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d8:	3301      	adds	r3, #1
 80029da:	88fa      	ldrh	r2, [r7, #6]
 80029dc:	b2d1      	uxtb	r1, r2
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80029e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e4:	3302      	adds	r3, #2
 80029e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80029e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d3ec      	bcc.n	80029ca <ILI9341_Draw_Colour_Burst+0x96>
	}

uint32_t Sending_Size = Size*2;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fe:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a04:	fbb3 f2f2 	udiv	r2, r3, r2
 8002a08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a0a:	fb01 f202 	mul.w	r2, r1, r2
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d010      	beq.n	8002a3a <ILI9341_Draw_Colour_Burst+0x106>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002a18:	2300      	movs	r3, #0
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a1c:	e009      	b.n	8002a32 <ILI9341_Draw_Colour_Burst+0xfe>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002a1e:	69b9      	ldr	r1, [r7, #24]
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	230a      	movs	r3, #10
 8002a26:	480f      	ldr	r0, [pc, #60]	; (8002a64 <ILI9341_Draw_Colour_Burst+0x130>)
 8002a28:	f002 f8b5 	bl	8004b96 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2e:	3301      	adds	r3, #1
 8002a30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d3f1      	bcc.n	8002a1e <ILI9341_Draw_Colour_Burst+0xea>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002a3a:	69b9      	ldr	r1, [r7, #24]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	230a      	movs	r3, #10
 8002a42:	4808      	ldr	r0, [pc, #32]	; (8002a64 <ILI9341_Draw_Colour_Burst+0x130>)
 8002a44:	f002 f8a7 	bl	8004b96 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a4e:	4804      	ldr	r0, [pc, #16]	; (8002a60 <ILI9341_Draw_Colour_Burst+0x12c>)
 8002a50:	f001 f9cc 	bl	8003dec <HAL_GPIO_WritePin>
 8002a54:	46ad      	mov	sp, r5
}
 8002a56:	bf00      	nop
 8002a58:	3730      	adds	r7, #48	; 0x30
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40020000 	.word	0x40020000
 8002a64:	20000360 	.word	0x20000360

08002a68 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <ILI9341_Fill_Screen+0x44>)
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <ILI9341_Fill_Screen+0x48>)
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	2100      	movs	r1, #0
 8002a80:	2000      	movs	r0, #0
 8002a82:	f7ff fd81 	bl	8002588 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <ILI9341_Fill_Screen+0x44>)
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <ILI9341_Fill_Screen+0x48>)
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	fb03 f302 	mul.w	r3, r3, r2
 8002a98:	461a      	mov	r2, r3
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff ff48 	bl	8002934 <ILI9341_Draw_Colour_Burst>
}
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	2000000a 	.word	0x2000000a
 8002ab0:	20000008 	.word	0x20000008

08002ab4 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	80fb      	strh	r3, [r7, #6]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	80bb      	strh	r3, [r7, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002ac6:	4b64      	ldr	r3, [pc, #400]	; (8002c58 <ILI9341_Draw_Pixel+0x1a4>)
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	88fa      	ldrh	r2, [r7, #6]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	f080 80be 	bcs.w	8002c50 <ILI9341_Draw_Pixel+0x19c>
 8002ad4:	4b61      	ldr	r3, [pc, #388]	; (8002c5c <ILI9341_Draw_Pixel+0x1a8>)
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	88ba      	ldrh	r2, [r7, #4]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	f080 80b7 	bcs.w	8002c50 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ae8:	485d      	ldr	r0, [pc, #372]	; (8002c60 <ILI9341_Draw_Pixel+0x1ac>)
 8002aea:	f001 f97f 	bl	8003dec <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002aee:	2200      	movs	r2, #0
 8002af0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002af4:	485a      	ldr	r0, [pc, #360]	; (8002c60 <ILI9341_Draw_Pixel+0x1ac>)
 8002af6:	f001 f979 	bl	8003dec <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002afa:	202a      	movs	r0, #42	; 0x2a
 8002afc:	f7ff fcee 	bl	80024dc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002b00:	2201      	movs	r2, #1
 8002b02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b06:	4856      	ldr	r0, [pc, #344]	; (8002c60 <ILI9341_Draw_Pixel+0x1ac>)
 8002b08:	f001 f970 	bl	8003dec <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b12:	4853      	ldr	r0, [pc, #332]	; (8002c60 <ILI9341_Draw_Pixel+0x1ac>)
 8002b14:	f001 f96a 	bl	8003dec <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b1e:	4850      	ldr	r0, [pc, #320]	; (8002c60 <ILI9341_Draw_Pixel+0x1ac>)
 8002b20:	f001 f964 	bl	8003dec <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	0a1b      	lsrs	r3, r3, #8
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	753b      	strb	r3, [r7, #20]
 8002b2e:	88fb      	ldrh	r3, [r7, #6]
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	757b      	strb	r3, [r7, #21]
 8002b34:	88fb      	ldrh	r3, [r7, #6]
 8002b36:	3301      	adds	r3, #1
 8002b38:	121b      	asrs	r3, r3, #8
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	75bb      	strb	r3, [r7, #22]
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	3301      	adds	r3, #1
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002b48:	f107 0114 	add.w	r1, r7, #20
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	2204      	movs	r2, #4
 8002b50:	4844      	ldr	r0, [pc, #272]	; (8002c64 <ILI9341_Draw_Pixel+0x1b0>)
 8002b52:	f002 f820 	bl	8004b96 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002b56:	2201      	movs	r2, #1
 8002b58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b5c:	4840      	ldr	r0, [pc, #256]	; (8002c60 <ILI9341_Draw_Pixel+0x1ac>)
 8002b5e:	f001 f945 	bl	8003dec <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002b62:	2200      	movs	r2, #0
 8002b64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b68:	483d      	ldr	r0, [pc, #244]	; (8002c60 <ILI9341_Draw_Pixel+0x1ac>)
 8002b6a:	f001 f93f 	bl	8003dec <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b74:	483a      	ldr	r0, [pc, #232]	; (8002c60 <ILI9341_Draw_Pixel+0x1ac>)
 8002b76:	f001 f939 	bl	8003dec <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8002b7a:	202b      	movs	r0, #43	; 0x2b
 8002b7c:	f7ff fcae 	bl	80024dc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002b80:	2201      	movs	r2, #1
 8002b82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b86:	4836      	ldr	r0, [pc, #216]	; (8002c60 <ILI9341_Draw_Pixel+0x1ac>)
 8002b88:	f001 f930 	bl	8003dec <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b92:	4833      	ldr	r0, [pc, #204]	; (8002c60 <ILI9341_Draw_Pixel+0x1ac>)
 8002b94:	f001 f92a 	bl	8003dec <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b9e:	4830      	ldr	r0, [pc, #192]	; (8002c60 <ILI9341_Draw_Pixel+0x1ac>)
 8002ba0:	f001 f924 	bl	8003dec <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8002ba4:	88bb      	ldrh	r3, [r7, #4]
 8002ba6:	0a1b      	lsrs	r3, r3, #8
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	743b      	strb	r3, [r7, #16]
 8002bae:	88bb      	ldrh	r3, [r7, #4]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	747b      	strb	r3, [r7, #17]
 8002bb4:	88bb      	ldrh	r3, [r7, #4]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	121b      	asrs	r3, r3, #8
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	74bb      	strb	r3, [r7, #18]
 8002bbe:	88bb      	ldrh	r3, [r7, #4]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002bc8:	f107 0110 	add.w	r1, r7, #16
 8002bcc:	2301      	movs	r3, #1
 8002bce:	2204      	movs	r2, #4
 8002bd0:	4824      	ldr	r0, [pc, #144]	; (8002c64 <ILI9341_Draw_Pixel+0x1b0>)
 8002bd2:	f001 ffe0 	bl	8004b96 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bdc:	4820      	ldr	r0, [pc, #128]	; (8002c60 <ILI9341_Draw_Pixel+0x1ac>)
 8002bde:	f001 f905 	bl	8003dec <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002be2:	2200      	movs	r2, #0
 8002be4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002be8:	481d      	ldr	r0, [pc, #116]	; (8002c60 <ILI9341_Draw_Pixel+0x1ac>)
 8002bea:	f001 f8ff 	bl	8003dec <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bf4:	481a      	ldr	r0, [pc, #104]	; (8002c60 <ILI9341_Draw_Pixel+0x1ac>)
 8002bf6:	f001 f8f9 	bl	8003dec <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002bfa:	202c      	movs	r0, #44	; 0x2c
 8002bfc:	f7ff fc6e 	bl	80024dc <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002c00:	2201      	movs	r2, #1
 8002c02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c06:	4816      	ldr	r0, [pc, #88]	; (8002c60 <ILI9341_Draw_Pixel+0x1ac>)
 8002c08:	f001 f8f0 	bl	8003dec <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c12:	4813      	ldr	r0, [pc, #76]	; (8002c60 <ILI9341_Draw_Pixel+0x1ac>)
 8002c14:	f001 f8ea 	bl	8003dec <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c1e:	4810      	ldr	r0, [pc, #64]	; (8002c60 <ILI9341_Draw_Pixel+0x1ac>)
 8002c20:	f001 f8e4 	bl	8003dec <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002c24:	887b      	ldrh	r3, [r7, #2]
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	733b      	strb	r3, [r7, #12]
 8002c2e:	887b      	ldrh	r3, [r7, #2]
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002c34:	f107 010c 	add.w	r1, r7, #12
 8002c38:	2301      	movs	r3, #1
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	4809      	ldr	r0, [pc, #36]	; (8002c64 <ILI9341_Draw_Pixel+0x1b0>)
 8002c3e:	f001 ffaa 	bl	8004b96 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002c42:	2201      	movs	r2, #1
 8002c44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c48:	4805      	ldr	r0, [pc, #20]	; (8002c60 <ILI9341_Draw_Pixel+0x1ac>)
 8002c4a:	f001 f8cf 	bl	8003dec <HAL_GPIO_WritePin>
 8002c4e:	e000      	b.n	8002c52 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002c50:	bf00      	nop
	
}
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	2000000a 	.word	0x2000000a
 8002c5c:	20000008 	.word	0x20000008
 8002c60:	40020000 	.word	0x40020000
 8002c64:	20000360 	.word	0x20000360

08002c68 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002c68:	b590      	push	{r4, r7, lr}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4604      	mov	r4, r0
 8002c70:	4608      	mov	r0, r1
 8002c72:	4611      	mov	r1, r2
 8002c74:	461a      	mov	r2, r3
 8002c76:	4623      	mov	r3, r4
 8002c78:	80fb      	strh	r3, [r7, #6]
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	80bb      	strh	r3, [r7, #4]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	807b      	strh	r3, [r7, #2]
 8002c82:	4613      	mov	r3, r2
 8002c84:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002c86:	4b24      	ldr	r3, [pc, #144]	; (8002d18 <ILI9341_Draw_Rectangle+0xb0>)
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	88fa      	ldrh	r2, [r7, #6]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d23d      	bcs.n	8002d0e <ILI9341_Draw_Rectangle+0xa6>
 8002c92:	4b22      	ldr	r3, [pc, #136]	; (8002d1c <ILI9341_Draw_Rectangle+0xb4>)
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	88ba      	ldrh	r2, [r7, #4]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d237      	bcs.n	8002d0e <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8002c9e:	88fa      	ldrh	r2, [r7, #6]
 8002ca0:	887b      	ldrh	r3, [r7, #2]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	4a1c      	ldr	r2, [pc, #112]	; (8002d18 <ILI9341_Draw_Rectangle+0xb0>)
 8002ca6:	8812      	ldrh	r2, [r2, #0]
 8002ca8:	b292      	uxth	r2, r2
 8002caa:	4293      	cmp	r3, r2
 8002cac:	dd05      	ble.n	8002cba <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8002cae:	4b1a      	ldr	r3, [pc, #104]	; (8002d18 <ILI9341_Draw_Rectangle+0xb0>)
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	88fb      	ldrh	r3, [r7, #6]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8002cba:	88ba      	ldrh	r2, [r7, #4]
 8002cbc:	883b      	ldrh	r3, [r7, #0]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	4a16      	ldr	r2, [pc, #88]	; (8002d1c <ILI9341_Draw_Rectangle+0xb4>)
 8002cc2:	8812      	ldrh	r2, [r2, #0]
 8002cc4:	b292      	uxth	r2, r2
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	dd05      	ble.n	8002cd6 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8002cca:	4b14      	ldr	r3, [pc, #80]	; (8002d1c <ILI9341_Draw_Rectangle+0xb4>)
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	88bb      	ldrh	r3, [r7, #4]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8002cd6:	88fa      	ldrh	r2, [r7, #6]
 8002cd8:	887b      	ldrh	r3, [r7, #2]
 8002cda:	4413      	add	r3, r2
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29c      	uxth	r4, r3
 8002ce2:	88ba      	ldrh	r2, [r7, #4]
 8002ce4:	883b      	ldrh	r3, [r7, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	88b9      	ldrh	r1, [r7, #4]
 8002cf0:	88f8      	ldrh	r0, [r7, #6]
 8002cf2:	4622      	mov	r2, r4
 8002cf4:	f7ff fc48 	bl	8002588 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8002cf8:	883b      	ldrh	r3, [r7, #0]
 8002cfa:	887a      	ldrh	r2, [r7, #2]
 8002cfc:	fb02 f303 	mul.w	r3, r2, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	8b3b      	ldrh	r3, [r7, #24]
 8002d04:	4611      	mov	r1, r2
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff fe14 	bl	8002934 <ILI9341_Draw_Colour_Burst>
 8002d0c:	e000      	b.n	8002d10 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002d0e:	bf00      	nop
}
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd90      	pop	{r4, r7, pc}
 8002d16:	bf00      	nop
 8002d18:	2000000a 	.word	0x2000000a
 8002d1c:	20000008 	.word	0x20000008

08002d20 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f4xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8002d26:	2310      	movs	r3, #16
 8002d28:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8002d2e:	e019      	b.n	8002d64 <TP_Read+0x44>
    {
        value <<= 1;
 8002d30:	88bb      	ldrh	r3, [r7, #4]
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002d36:	2201      	movs	r2, #1
 8002d38:	2102      	movs	r1, #2
 8002d3a:	480e      	ldr	r0, [pc, #56]	; (8002d74 <TP_Read+0x54>)
 8002d3c:	f001 f856 	bl	8003dec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8002d40:	2200      	movs	r2, #0
 8002d42:	2102      	movs	r1, #2
 8002d44:	480b      	ldr	r0, [pc, #44]	; (8002d74 <TP_Read+0x54>)
 8002d46:	f001 f851 	bl	8003dec <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8002d4a:	2110      	movs	r1, #16
 8002d4c:	4809      	ldr	r0, [pc, #36]	; (8002d74 <TP_Read+0x54>)
 8002d4e:	f001 f835 	bl	8003dbc <HAL_GPIO_ReadPin>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <TP_Read+0x3e>
        {
            value++;
 8002d58:	88bb      	ldrh	r3, [r7, #4]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 8002d64:	79fb      	ldrb	r3, [r7, #7]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1e2      	bne.n	8002d30 <TP_Read+0x10>
    };

    return value;
 8002d6a:	88bb      	ldrh	r3, [r7, #4]
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021400 	.word	0x40021400

08002d78 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8002d82:	2308      	movs	r3, #8
 8002d84:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 8002d86:	2200      	movs	r2, #0
 8002d88:	2102      	movs	r1, #2
 8002d8a:	4815      	ldr	r0, [pc, #84]	; (8002de0 <TP_Write+0x68>)
 8002d8c:	f001 f82e 	bl	8003dec <HAL_GPIO_WritePin>
	
    while(i > 0)
 8002d90:	e01e      	b.n	8002dd0 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 8002d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	da05      	bge.n	8002da6 <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	2108      	movs	r1, #8
 8002d9e:	4810      	ldr	r0, [pc, #64]	; (8002de0 <TP_Write+0x68>)
 8002da0:	f001 f824 	bl	8003dec <HAL_GPIO_WritePin>
 8002da4:	e004      	b.n	8002db0 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8002da6:	2200      	movs	r2, #0
 8002da8:	2108      	movs	r1, #8
 8002daa:	480d      	ldr	r0, [pc, #52]	; (8002de0 <TP_Write+0x68>)
 8002dac:	f001 f81e 	bl	8003dec <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002db6:	2201      	movs	r2, #1
 8002db8:	2102      	movs	r1, #2
 8002dba:	4809      	ldr	r0, [pc, #36]	; (8002de0 <TP_Write+0x68>)
 8002dbc:	f001 f816 	bl	8003dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2102      	movs	r1, #2
 8002dc4:	4806      	ldr	r0, [pc, #24]	; (8002de0 <TP_Write+0x68>)
 8002dc6:	f001 f811 	bl	8003dec <HAL_GPIO_WritePin>
        i--;
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1dd      	bne.n	8002d92 <TP_Write+0x1a>
    };
}
 8002dd6:	bf00      	nop
 8002dd8:	bf00      	nop
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40021400 	.word	0x40021400
 8002de4:	00000000 	.word	0x00000000

08002de8 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b08b      	sub	sp, #44	; 0x2c
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 8002df0:	2201      	movs	r2, #1
 8002df2:	2102      	movs	r1, #2
 8002df4:	4864      	ldr	r0, [pc, #400]	; (8002f88 <TP_Read_Coordinates+0x1a0>)
 8002df6:	f000 fff9 	bl	8003dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	2108      	movs	r1, #8
 8002dfe:	4862      	ldr	r0, [pc, #392]	; (8002f88 <TP_Read_Coordinates+0x1a0>)
 8002e00:	f000 fff4 	bl	8003dec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 8002e04:	2201      	movs	r2, #1
 8002e06:	2104      	movs	r1, #4
 8002e08:	485f      	ldr	r0, [pc, #380]	; (8002f88 <TP_Read_Coordinates+0x1a0>)
 8002e0a:	f000 ffef 	bl	8003dec <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 8002e0e:	2300      	movs	r3, #0
 8002e10:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 8002e12:	2300      	movs	r3, #0
 8002e14:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8002e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e1e:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8002e24:	2200      	movs	r2, #0
 8002e26:	2104      	movs	r1, #4
 8002e28:	4857      	ldr	r0, [pc, #348]	; (8002f88 <TP_Read_Coordinates+0x1a0>)
 8002e2a:	f000 ffdf 	bl	8003dec <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002e2e:	e023      	b.n	8002e78 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 8002e30:	2090      	movs	r0, #144	; 0x90
 8002e32:	f7ff ffa1 	bl	8002d78 <TP_Write>

				rawy = TP_Read();	
 8002e36:	f7ff ff73 	bl	8002d20 <TP_Read>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 8002e3e:	89fb      	ldrh	r3, [r7, #14]
 8002e40:	6a3a      	ldr	r2, [r7, #32]
 8002e42:	4413      	add	r3, r2
 8002e44:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 8002e46:	89fb      	ldrh	r3, [r7, #14]
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 8002e4e:	20d0      	movs	r0, #208	; 0xd0
 8002e50:	f7ff ff92 	bl	8002d78 <TP_Write>
        rawx = TP_Read();
 8002e54:	f7ff ff64 	bl	8002d20 <TP_Read>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 8002e5c:	89bb      	ldrh	r3, [r7, #12]
 8002e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e60:	4413      	add	r3, r2
 8002e62:	627b      	str	r3, [r7, #36]	; 0x24
				calculating_x += rawx;
 8002e64:	89bb      	ldrh	r3, [r7, #12]
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	4413      	add	r3, r2
 8002e6a:	61fb      	str	r3, [r7, #28]
        samples--;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	617b      	str	r3, [r7, #20]
				counted_samples++;
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	3301      	adds	r3, #1
 8002e76:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d006      	beq.n	8002e8c <TP_Read_Coordinates+0xa4>
 8002e7e:	2120      	movs	r1, #32
 8002e80:	4841      	ldr	r0, [pc, #260]	; (8002f88 <TP_Read_Coordinates+0x1a0>)
 8002e82:	f000 ff9b 	bl	8003dbc <HAL_GPIO_ReadPin>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0d1      	beq.n	8002e30 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	2104      	movs	r1, #4
 8002e90:	483d      	ldr	r0, [pc, #244]	; (8002f88 <TP_Read_Coordinates+0x1a0>)
 8002e92:	f000 ffab 	bl	8003dec <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e9c:	d164      	bne.n	8002f68 <TP_Read_Coordinates+0x180>
 8002e9e:	2120      	movs	r1, #32
 8002ea0:	4839      	ldr	r0, [pc, #228]	; (8002f88 <TP_Read_Coordinates+0x1a0>)
 8002ea2:	f000 ff8b 	bl	8003dbc <HAL_GPIO_ReadPin>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d15d      	bne.n	8002f68 <TP_Read_Coordinates+0x180>
		{
		
		calculating_x /= counted_samples;
 8002eac:	69fa      	ldr	r2, [r7, #28]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb4:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebe:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8002ec8:	89bb      	ldrh	r3, [r7, #12]
 8002eca:	425b      	negs	r3, r3
 8002ecc:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8002ece:	89fb      	ldrh	r3, [r7, #14]
 8002ed0:	425b      	negs	r3, r3
 8002ed2:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
		// 65535/273 = 240!
		// 65535/204 = 320!
		Coordinates[0] = (((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE);
 8002ed4:	89ba      	ldrh	r2, [r7, #12]
 8002ed6:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <TP_Read_Coordinates+0x1a4>)
 8002ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8002edc:	1ad2      	subs	r2, r2, r3
 8002ede:	0852      	lsrs	r2, r2, #1
 8002ee0:	4413      	add	r3, r2
 8002ee2:	0a1b      	lsrs	r3, r3, #8
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fd fb2a 	bl	8000544 <__aeabi_i2d>
 8002ef0:	a323      	add	r3, pc, #140	; (adr r3, 8002f80 <TP_Read_Coordinates+0x198>)
 8002ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef6:	f7fd fb8f 	bl	8000618 <__aeabi_dmul>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4610      	mov	r0, r2
 8002f00:	4619      	mov	r1, r3
 8002f02:	f7fd fe61 	bl	8000bc8 <__aeabi_d2uiz>
 8002f06:	4603      	mov	r3, r0
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	801a      	strh	r2, [r3, #0]
		if (Coordinates[0] >= 105)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	2b68      	cmp	r3, #104	; 0x68
 8002f14:	d906      	bls.n	8002f24 <TP_Read_Coordinates+0x13c>
		{
			Coordinates[0] -= 105;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	3b69      	subs	r3, #105	; 0x69
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	801a      	strh	r2, [r3, #0]
 8002f22:	e005      	b.n	8002f30 <TP_Read_Coordinates+0x148>
		} else {
			Coordinates[0] += 160;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	881b      	ldrh	r3, [r3, #0]
 8002f28:	33a0      	adds	r3, #160	; 0xa0
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	801a      	strh	r2, [r3, #0]
		}
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 8002f30:	89fb      	ldrh	r3, [r7, #14]
 8002f32:	4a17      	ldr	r2, [pc, #92]	; (8002f90 <TP_Read_Coordinates+0x1a8>)
 8002f34:	fba2 2303 	umull	r2, r3, r2, r3
 8002f38:	09db      	lsrs	r3, r3, #7
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b0f      	subs	r3, #15
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fd fb00 	bl	8000544 <__aeabi_i2d>
 8002f44:	a30e      	add	r3, pc, #56	; (adr r3, 8002f80 <TP_Read_Coordinates+0x198>)
 8002f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4a:	f7fd fb65 	bl	8000618 <__aeabi_dmul>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4610      	mov	r0, r2
 8002f54:	4619      	mov	r1, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	1c9c      	adds	r4, r3, #2
 8002f5a:	f7fd fe35 	bl	8000bc8 <__aeabi_d2uiz>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	8023      	strh	r3, [r4, #0]
		
		return TOUCHPAD_DATA_OK;			
 8002f64:	2301      	movs	r3, #1
 8002f66:	e007      	b.n	8002f78 <TP_Read_Coordinates+0x190>
		}
		else
		{
			Coordinates[0] = 0;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3302      	adds	r3, #2
 8002f72:	2200      	movs	r2, #0
 8002f74:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8002f76:	2300      	movs	r3, #0
		}
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	372c      	adds	r7, #44	; 0x2c
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd90      	pop	{r4, r7, pc}
 8002f80:	28f5c28f 	.word	0x28f5c28f
 8002f84:	3ff28f5c 	.word	0x3ff28f5c
 8002f88:	40021400 	.word	0x40021400
 8002f8c:	e01e01e1 	.word	0xe01e01e1
 8002f90:	a0a0a0a1 	.word	0xa0a0a0a1

08002f94 <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8002f98:	2120      	movs	r1, #32
 8002f9a:	4805      	ldr	r0, [pc, #20]	; (8002fb0 <TP_Touchpad_Pressed+0x1c>)
 8002f9c:	f000 ff0e 	bl	8003dbc <HAL_GPIO_ReadPin>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8002faa:	2300      	movs	r3, #0
	}
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40021400 	.word	0x40021400

08002fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <HAL_Init+0x40>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a0d      	ldr	r2, [pc, #52]	; (8002ff4 <HAL_Init+0x40>)
 8002fbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_Init+0x40>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a0a      	ldr	r2, [pc, #40]	; (8002ff4 <HAL_Init+0x40>)
 8002fca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fd0:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <HAL_Init+0x40>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a07      	ldr	r2, [pc, #28]	; (8002ff4 <HAL_Init+0x40>)
 8002fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fdc:	2003      	movs	r0, #3
 8002fde:	f000 fd0d 	bl	80039fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fe2:	200f      	movs	r0, #15
 8002fe4:	f000 f808 	bl	8002ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fe8:	f7fe fdca 	bl	8001b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40023c00 	.word	0x40023c00

08002ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003000:	4b12      	ldr	r3, [pc, #72]	; (800304c <HAL_InitTick+0x54>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	4b12      	ldr	r3, [pc, #72]	; (8003050 <HAL_InitTick+0x58>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	4619      	mov	r1, r3
 800300a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800300e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003012:	fbb2 f3f3 	udiv	r3, r2, r3
 8003016:	4618      	mov	r0, r3
 8003018:	f000 fd17 	bl	8003a4a <HAL_SYSTICK_Config>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e00e      	b.n	8003044 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b0f      	cmp	r3, #15
 800302a:	d80a      	bhi.n	8003042 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800302c:	2200      	movs	r2, #0
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	f04f 30ff 	mov.w	r0, #4294967295
 8003034:	f000 fced 	bl	8003a12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003038:	4a06      	ldr	r2, [pc, #24]	; (8003054 <HAL_InitTick+0x5c>)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	e000      	b.n	8003044 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
}
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20000004 	.word	0x20000004
 8003050:	20000010 	.word	0x20000010
 8003054:	2000000c 	.word	0x2000000c

08003058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800305c:	4b06      	ldr	r3, [pc, #24]	; (8003078 <HAL_IncTick+0x20>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	4b06      	ldr	r3, [pc, #24]	; (800307c <HAL_IncTick+0x24>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4413      	add	r3, r2
 8003068:	4a04      	ldr	r2, [pc, #16]	; (800307c <HAL_IncTick+0x24>)
 800306a:	6013      	str	r3, [r2, #0]
}
 800306c:	bf00      	nop
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	20000010 	.word	0x20000010
 800307c:	200004d4 	.word	0x200004d4

08003080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return uwTick;
 8003084:	4b03      	ldr	r3, [pc, #12]	; (8003094 <HAL_GetTick+0x14>)
 8003086:	681b      	ldr	r3, [r3, #0]
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	200004d4 	.word	0x200004d4

08003098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030a0:	f7ff ffee 	bl	8003080 <HAL_GetTick>
 80030a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b0:	d005      	beq.n	80030be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030b2:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <HAL_Delay+0x44>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4413      	add	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030be:	bf00      	nop
 80030c0:	f7ff ffde 	bl	8003080 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d8f7      	bhi.n	80030c0 <HAL_Delay+0x28>
  {
  }
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000010 	.word	0x20000010

080030e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e033      	b.n	800315e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7fd ffd6 	bl	80010b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	2b00      	cmp	r3, #0
 800311c:	d118      	bne.n	8003150 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003126:	f023 0302 	bic.w	r3, r3, #2
 800312a:	f043 0202 	orr.w	r2, r3, #2
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 fab4 	bl	80036a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f023 0303 	bic.w	r3, r3, #3
 8003146:	f043 0201 	orr.w	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	641a      	str	r2, [r3, #64]	; 0x40
 800314e:	e001      	b.n	8003154 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800315c:	7bfb      	ldrb	r3, [r7, #15]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_ADC_Start+0x1a>
 800317e:	2302      	movs	r3, #2
 8003180:	e0b2      	b.n	80032e8 <HAL_ADC_Start+0x180>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b01      	cmp	r3, #1
 8003196:	d018      	beq.n	80031ca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031a8:	4b52      	ldr	r3, [pc, #328]	; (80032f4 <HAL_ADC_Start+0x18c>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a52      	ldr	r2, [pc, #328]	; (80032f8 <HAL_ADC_Start+0x190>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	0c9a      	lsrs	r2, r3, #18
 80031b4:	4613      	mov	r3, r2
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	4413      	add	r3, r2
 80031ba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80031bc:	e002      	b.n	80031c4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f9      	bne.n	80031be <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d17a      	bne.n	80032ce <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d007      	beq.n	800320a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003202:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003216:	d106      	bne.n	8003226 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321c:	f023 0206 	bic.w	r2, r3, #6
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	645a      	str	r2, [r3, #68]	; 0x44
 8003224:	e002      	b.n	800322c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003234:	4b31      	ldr	r3, [pc, #196]	; (80032fc <HAL_ADC_Start+0x194>)
 8003236:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003240:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 031f 	and.w	r3, r3, #31
 800324a:	2b00      	cmp	r3, #0
 800324c:	d12a      	bne.n	80032a4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a2b      	ldr	r2, [pc, #172]	; (8003300 <HAL_ADC_Start+0x198>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d015      	beq.n	8003284 <HAL_ADC_Start+0x11c>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a29      	ldr	r2, [pc, #164]	; (8003304 <HAL_ADC_Start+0x19c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d105      	bne.n	800326e <HAL_ADC_Start+0x106>
 8003262:	4b26      	ldr	r3, [pc, #152]	; (80032fc <HAL_ADC_Start+0x194>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 031f 	and.w	r3, r3, #31
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00a      	beq.n	8003284 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a25      	ldr	r2, [pc, #148]	; (8003308 <HAL_ADC_Start+0x1a0>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d136      	bne.n	80032e6 <HAL_ADC_Start+0x17e>
 8003278:	4b20      	ldr	r3, [pc, #128]	; (80032fc <HAL_ADC_Start+0x194>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	2b00      	cmp	r3, #0
 8003282:	d130      	bne.n	80032e6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d129      	bne.n	80032e6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032a0:	609a      	str	r2, [r3, #8]
 80032a2:	e020      	b.n	80032e6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a15      	ldr	r2, [pc, #84]	; (8003300 <HAL_ADC_Start+0x198>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d11b      	bne.n	80032e6 <HAL_ADC_Start+0x17e>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d114      	bne.n	80032e6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	e00b      	b.n	80032e6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	f043 0210 	orr.w	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	f043 0201 	orr.w	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	20000004 	.word	0x20000004
 80032f8:	431bde83 	.word	0x431bde83
 80032fc:	40012300 	.word	0x40012300
 8003300:	40012000 	.word	0x40012000
 8003304:	40012100 	.word	0x40012100
 8003308:	40012200 	.word	0x40012200

0800330c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003316:	2300      	movs	r3, #0
 8003318:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003328:	d113      	bne.n	8003352 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003338:	d10b      	bne.n	8003352 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f043 0220 	orr.w	r2, r3, #32
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e063      	b.n	800341a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003352:	f7ff fe95 	bl	8003080 <HAL_GetTick>
 8003356:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003358:	e021      	b.n	800339e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003360:	d01d      	beq.n	800339e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d007      	beq.n	8003378 <HAL_ADC_PollForConversion+0x6c>
 8003368:	f7ff fe8a 	bl	8003080 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d212      	bcs.n	800339e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0302 	and.w	r3, r3, #2
 8003382:	2b02      	cmp	r3, #2
 8003384:	d00b      	beq.n	800339e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	f043 0204 	orr.w	r2, r3, #4
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e03d      	b.n	800341a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d1d6      	bne.n	800335a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0212 	mvn.w	r2, #18
 80033b4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d123      	bne.n	8003418 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d11f      	bne.n	8003418 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d006      	beq.n	80033f4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d111      	bne.n	8003418 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003404:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d105      	bne.n	8003418 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	f043 0201 	orr.w	r2, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x1c>
 8003454:	2302      	movs	r3, #2
 8003456:	e113      	b.n	8003680 <HAL_ADC_ConfigChannel+0x244>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b09      	cmp	r3, #9
 8003466:	d925      	bls.n	80034b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68d9      	ldr	r1, [r3, #12]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	461a      	mov	r2, r3
 8003476:	4613      	mov	r3, r2
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	4413      	add	r3, r2
 800347c:	3b1e      	subs	r3, #30
 800347e:	2207      	movs	r2, #7
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43da      	mvns	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	400a      	ands	r2, r1
 800348c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68d9      	ldr	r1, [r3, #12]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	b29b      	uxth	r3, r3
 800349e:	4618      	mov	r0, r3
 80034a0:	4603      	mov	r3, r0
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	4403      	add	r3, r0
 80034a6:	3b1e      	subs	r3, #30
 80034a8:	409a      	lsls	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	60da      	str	r2, [r3, #12]
 80034b2:	e022      	b.n	80034fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6919      	ldr	r1, [r3, #16]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	461a      	mov	r2, r3
 80034c2:	4613      	mov	r3, r2
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	4413      	add	r3, r2
 80034c8:	2207      	movs	r2, #7
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	43da      	mvns	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	400a      	ands	r2, r1
 80034d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6919      	ldr	r1, [r3, #16]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	4618      	mov	r0, r3
 80034ea:	4603      	mov	r3, r0
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	4403      	add	r3, r0
 80034f0:	409a      	lsls	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b06      	cmp	r3, #6
 8003500:	d824      	bhi.n	800354c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	3b05      	subs	r3, #5
 8003514:	221f      	movs	r2, #31
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43da      	mvns	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	400a      	ands	r2, r1
 8003522:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	4618      	mov	r0, r3
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	3b05      	subs	r3, #5
 800353e:	fa00 f203 	lsl.w	r2, r0, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	635a      	str	r2, [r3, #52]	; 0x34
 800354a:	e04c      	b.n	80035e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b0c      	cmp	r3, #12
 8003552:	d824      	bhi.n	800359e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	3b23      	subs	r3, #35	; 0x23
 8003566:	221f      	movs	r2, #31
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	43da      	mvns	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	400a      	ands	r2, r1
 8003574:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	b29b      	uxth	r3, r3
 8003582:	4618      	mov	r0, r3
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	3b23      	subs	r3, #35	; 0x23
 8003590:	fa00 f203 	lsl.w	r2, r0, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	631a      	str	r2, [r3, #48]	; 0x30
 800359c:	e023      	b.n	80035e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	3b41      	subs	r3, #65	; 0x41
 80035b0:	221f      	movs	r2, #31
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43da      	mvns	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	400a      	ands	r2, r1
 80035be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	4618      	mov	r0, r3
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	3b41      	subs	r3, #65	; 0x41
 80035da:	fa00 f203 	lsl.w	r2, r0, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035e6:	4b29      	ldr	r3, [pc, #164]	; (800368c <HAL_ADC_ConfigChannel+0x250>)
 80035e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a28      	ldr	r2, [pc, #160]	; (8003690 <HAL_ADC_ConfigChannel+0x254>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d10f      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x1d8>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b12      	cmp	r3, #18
 80035fa:	d10b      	bne.n	8003614 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a1d      	ldr	r2, [pc, #116]	; (8003690 <HAL_ADC_ConfigChannel+0x254>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d12b      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x23a>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a1c      	ldr	r2, [pc, #112]	; (8003694 <HAL_ADC_ConfigChannel+0x258>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d003      	beq.n	8003630 <HAL_ADC_ConfigChannel+0x1f4>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b11      	cmp	r3, #17
 800362e:	d122      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a11      	ldr	r2, [pc, #68]	; (8003694 <HAL_ADC_ConfigChannel+0x258>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d111      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003652:	4b11      	ldr	r3, [pc, #68]	; (8003698 <HAL_ADC_ConfigChannel+0x25c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a11      	ldr	r2, [pc, #68]	; (800369c <HAL_ADC_ConfigChannel+0x260>)
 8003658:	fba2 2303 	umull	r2, r3, r2, r3
 800365c:	0c9a      	lsrs	r2, r3, #18
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003668:	e002      	b.n	8003670 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	3b01      	subs	r3, #1
 800366e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f9      	bne.n	800366a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	40012300 	.word	0x40012300
 8003690:	40012000 	.word	0x40012000
 8003694:	10000012 	.word	0x10000012
 8003698:	20000004 	.word	0x20000004
 800369c:	431bde83 	.word	0x431bde83

080036a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036a8:	4b79      	ldr	r3, [pc, #484]	; (8003890 <ADC_Init+0x1f0>)
 80036aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	431a      	orrs	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6859      	ldr	r1, [r3, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	021a      	lsls	r2, r3, #8
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80036f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6859      	ldr	r1, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800371a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6899      	ldr	r1, [r3, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003732:	4a58      	ldr	r2, [pc, #352]	; (8003894 <ADC_Init+0x1f4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d022      	beq.n	800377e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003746:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6899      	ldr	r1, [r3, #8]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003768:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6899      	ldr	r1, [r3, #8]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	609a      	str	r2, [r3, #8]
 800377c:	e00f      	b.n	800379e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800378c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800379c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0202 	bic.w	r2, r2, #2
 80037ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6899      	ldr	r1, [r3, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	7e1b      	ldrb	r3, [r3, #24]
 80037b8:	005a      	lsls	r2, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d01b      	beq.n	8003804 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80037ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6859      	ldr	r1, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	3b01      	subs	r3, #1
 80037f8:	035a      	lsls	r2, r3, #13
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	605a      	str	r2, [r3, #4]
 8003802:	e007      	b.n	8003814 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003812:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003822:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	3b01      	subs	r3, #1
 8003830:	051a      	lsls	r2, r3, #20
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003848:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6899      	ldr	r1, [r3, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003856:	025a      	lsls	r2, r3, #9
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800386e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6899      	ldr	r1, [r3, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	029a      	lsls	r2, r3, #10
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	609a      	str	r2, [r3, #8]
}
 8003884:	bf00      	nop
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	40012300 	.word	0x40012300
 8003894:	0f000001 	.word	0x0f000001

08003898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038a8:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <__NVIC_SetPriorityGrouping+0x44>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038b4:	4013      	ands	r3, r2
 80038b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ca:	4a04      	ldr	r2, [pc, #16]	; (80038dc <__NVIC_SetPriorityGrouping+0x44>)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	60d3      	str	r3, [r2, #12]
}
 80038d0:	bf00      	nop
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038e4:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <__NVIC_GetPriorityGrouping+0x18>)
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	0a1b      	lsrs	r3, r3, #8
 80038ea:	f003 0307 	and.w	r3, r3, #7
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	e000ed00 	.word	0xe000ed00

080038fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	6039      	str	r1, [r7, #0]
 8003906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390c:	2b00      	cmp	r3, #0
 800390e:	db0a      	blt.n	8003926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	b2da      	uxtb	r2, r3
 8003914:	490c      	ldr	r1, [pc, #48]	; (8003948 <__NVIC_SetPriority+0x4c>)
 8003916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391a:	0112      	lsls	r2, r2, #4
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	440b      	add	r3, r1
 8003920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003924:	e00a      	b.n	800393c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	b2da      	uxtb	r2, r3
 800392a:	4908      	ldr	r1, [pc, #32]	; (800394c <__NVIC_SetPriority+0x50>)
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	3b04      	subs	r3, #4
 8003934:	0112      	lsls	r2, r2, #4
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	440b      	add	r3, r1
 800393a:	761a      	strb	r2, [r3, #24]
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	e000e100 	.word	0xe000e100
 800394c:	e000ed00 	.word	0xe000ed00

08003950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003950:	b480      	push	{r7}
 8003952:	b089      	sub	sp, #36	; 0x24
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f1c3 0307 	rsb	r3, r3, #7
 800396a:	2b04      	cmp	r3, #4
 800396c:	bf28      	it	cs
 800396e:	2304      	movcs	r3, #4
 8003970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	3304      	adds	r3, #4
 8003976:	2b06      	cmp	r3, #6
 8003978:	d902      	bls.n	8003980 <NVIC_EncodePriority+0x30>
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	3b03      	subs	r3, #3
 800397e:	e000      	b.n	8003982 <NVIC_EncodePriority+0x32>
 8003980:	2300      	movs	r3, #0
 8003982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003984:	f04f 32ff 	mov.w	r2, #4294967295
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	fa02 f303 	lsl.w	r3, r2, r3
 800398e:	43da      	mvns	r2, r3
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	401a      	ands	r2, r3
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003998:	f04f 31ff 	mov.w	r1, #4294967295
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	fa01 f303 	lsl.w	r3, r1, r3
 80039a2:	43d9      	mvns	r1, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a8:	4313      	orrs	r3, r2
         );
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3724      	adds	r7, #36	; 0x24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
	...

080039b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039c8:	d301      	bcc.n	80039ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039ca:	2301      	movs	r3, #1
 80039cc:	e00f      	b.n	80039ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ce:	4a0a      	ldr	r2, [pc, #40]	; (80039f8 <SysTick_Config+0x40>)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3b01      	subs	r3, #1
 80039d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039d6:	210f      	movs	r1, #15
 80039d8:	f04f 30ff 	mov.w	r0, #4294967295
 80039dc:	f7ff ff8e 	bl	80038fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039e0:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <SysTick_Config+0x40>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039e6:	4b04      	ldr	r3, [pc, #16]	; (80039f8 <SysTick_Config+0x40>)
 80039e8:	2207      	movs	r2, #7
 80039ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	e000e010 	.word	0xe000e010

080039fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff ff47 	bl	8003898 <__NVIC_SetPriorityGrouping>
}
 8003a0a:	bf00      	nop
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b086      	sub	sp, #24
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	4603      	mov	r3, r0
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	607a      	str	r2, [r7, #4]
 8003a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a24:	f7ff ff5c 	bl	80038e0 <__NVIC_GetPriorityGrouping>
 8003a28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	68b9      	ldr	r1, [r7, #8]
 8003a2e:	6978      	ldr	r0, [r7, #20]
 8003a30:	f7ff ff8e 	bl	8003950 <NVIC_EncodePriority>
 8003a34:	4602      	mov	r2, r0
 8003a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff ff5d 	bl	80038fc <__NVIC_SetPriority>
}
 8003a42:	bf00      	nop
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff ffb0 	bl	80039b8 <SysTick_Config>
 8003a58:	4603      	mov	r3, r0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b089      	sub	sp, #36	; 0x24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a72:	2300      	movs	r3, #0
 8003a74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61fb      	str	r3, [r7, #28]
 8003a7e:	e177      	b.n	8003d70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a80:	2201      	movs	r2, #1
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4013      	ands	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	f040 8166 	bne.w	8003d6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d005      	beq.n	8003ab6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d130      	bne.n	8003b18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	2203      	movs	r2, #3
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4013      	ands	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003aec:	2201      	movs	r2, #1
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	43db      	mvns	r3, r3
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	4013      	ands	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	091b      	lsrs	r3, r3, #4
 8003b02:	f003 0201 	and.w	r2, r3, #1
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	2b03      	cmp	r3, #3
 8003b22:	d017      	beq.n	8003b54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	2203      	movs	r2, #3
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f003 0303 	and.w	r3, r3, #3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d123      	bne.n	8003ba8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	08da      	lsrs	r2, r3, #3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3208      	adds	r2, #8
 8003b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	220f      	movs	r2, #15
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	4013      	ands	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	69ba      	ldr	r2, [r7, #24]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	08da      	lsrs	r2, r3, #3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3208      	adds	r2, #8
 8003ba2:	69b9      	ldr	r1, [r7, #24]
 8003ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 0203 	and.w	r2, r3, #3
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80c0 	beq.w	8003d6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	4b66      	ldr	r3, [pc, #408]	; (8003d88 <HAL_GPIO_Init+0x324>)
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf2:	4a65      	ldr	r2, [pc, #404]	; (8003d88 <HAL_GPIO_Init+0x324>)
 8003bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8003bfa:	4b63      	ldr	r3, [pc, #396]	; (8003d88 <HAL_GPIO_Init+0x324>)
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c06:	4a61      	ldr	r2, [pc, #388]	; (8003d8c <HAL_GPIO_Init+0x328>)
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	089b      	lsrs	r3, r3, #2
 8003c0c:	3302      	adds	r3, #2
 8003c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	220f      	movs	r2, #15
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	43db      	mvns	r3, r3
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	4013      	ands	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a58      	ldr	r2, [pc, #352]	; (8003d90 <HAL_GPIO_Init+0x32c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d037      	beq.n	8003ca2 <HAL_GPIO_Init+0x23e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a57      	ldr	r2, [pc, #348]	; (8003d94 <HAL_GPIO_Init+0x330>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d031      	beq.n	8003c9e <HAL_GPIO_Init+0x23a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a56      	ldr	r2, [pc, #344]	; (8003d98 <HAL_GPIO_Init+0x334>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d02b      	beq.n	8003c9a <HAL_GPIO_Init+0x236>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a55      	ldr	r2, [pc, #340]	; (8003d9c <HAL_GPIO_Init+0x338>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d025      	beq.n	8003c96 <HAL_GPIO_Init+0x232>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a54      	ldr	r2, [pc, #336]	; (8003da0 <HAL_GPIO_Init+0x33c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d01f      	beq.n	8003c92 <HAL_GPIO_Init+0x22e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a53      	ldr	r2, [pc, #332]	; (8003da4 <HAL_GPIO_Init+0x340>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d019      	beq.n	8003c8e <HAL_GPIO_Init+0x22a>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a52      	ldr	r2, [pc, #328]	; (8003da8 <HAL_GPIO_Init+0x344>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d013      	beq.n	8003c8a <HAL_GPIO_Init+0x226>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a51      	ldr	r2, [pc, #324]	; (8003dac <HAL_GPIO_Init+0x348>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d00d      	beq.n	8003c86 <HAL_GPIO_Init+0x222>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a50      	ldr	r2, [pc, #320]	; (8003db0 <HAL_GPIO_Init+0x34c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d007      	beq.n	8003c82 <HAL_GPIO_Init+0x21e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a4f      	ldr	r2, [pc, #316]	; (8003db4 <HAL_GPIO_Init+0x350>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d101      	bne.n	8003c7e <HAL_GPIO_Init+0x21a>
 8003c7a:	2309      	movs	r3, #9
 8003c7c:	e012      	b.n	8003ca4 <HAL_GPIO_Init+0x240>
 8003c7e:	230a      	movs	r3, #10
 8003c80:	e010      	b.n	8003ca4 <HAL_GPIO_Init+0x240>
 8003c82:	2308      	movs	r3, #8
 8003c84:	e00e      	b.n	8003ca4 <HAL_GPIO_Init+0x240>
 8003c86:	2307      	movs	r3, #7
 8003c88:	e00c      	b.n	8003ca4 <HAL_GPIO_Init+0x240>
 8003c8a:	2306      	movs	r3, #6
 8003c8c:	e00a      	b.n	8003ca4 <HAL_GPIO_Init+0x240>
 8003c8e:	2305      	movs	r3, #5
 8003c90:	e008      	b.n	8003ca4 <HAL_GPIO_Init+0x240>
 8003c92:	2304      	movs	r3, #4
 8003c94:	e006      	b.n	8003ca4 <HAL_GPIO_Init+0x240>
 8003c96:	2303      	movs	r3, #3
 8003c98:	e004      	b.n	8003ca4 <HAL_GPIO_Init+0x240>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e002      	b.n	8003ca4 <HAL_GPIO_Init+0x240>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <HAL_GPIO_Init+0x240>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	69fa      	ldr	r2, [r7, #28]
 8003ca6:	f002 0203 	and.w	r2, r2, #3
 8003caa:	0092      	lsls	r2, r2, #2
 8003cac:	4093      	lsls	r3, r2
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cb4:	4935      	ldr	r1, [pc, #212]	; (8003d8c <HAL_GPIO_Init+0x328>)
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	089b      	lsrs	r3, r3, #2
 8003cba:	3302      	adds	r3, #2
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cc2:	4b3d      	ldr	r3, [pc, #244]	; (8003db8 <HAL_GPIO_Init+0x354>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ce6:	4a34      	ldr	r2, [pc, #208]	; (8003db8 <HAL_GPIO_Init+0x354>)
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003cec:	4b32      	ldr	r3, [pc, #200]	; (8003db8 <HAL_GPIO_Init+0x354>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d10:	4a29      	ldr	r2, [pc, #164]	; (8003db8 <HAL_GPIO_Init+0x354>)
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d16:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <HAL_GPIO_Init+0x354>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4013      	ands	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d3a:	4a1f      	ldr	r2, [pc, #124]	; (8003db8 <HAL_GPIO_Init+0x354>)
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d40:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <HAL_GPIO_Init+0x354>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d64:	4a14      	ldr	r2, [pc, #80]	; (8003db8 <HAL_GPIO_Init+0x354>)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	61fb      	str	r3, [r7, #28]
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	2b0f      	cmp	r3, #15
 8003d74:	f67f ae84 	bls.w	8003a80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d78:	bf00      	nop
 8003d7a:	bf00      	nop
 8003d7c:	3724      	adds	r7, #36	; 0x24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	40013800 	.word	0x40013800
 8003d90:	40020000 	.word	0x40020000
 8003d94:	40020400 	.word	0x40020400
 8003d98:	40020800 	.word	0x40020800
 8003d9c:	40020c00 	.word	0x40020c00
 8003da0:	40021000 	.word	0x40021000
 8003da4:	40021400 	.word	0x40021400
 8003da8:	40021800 	.word	0x40021800
 8003dac:	40021c00 	.word	0x40021c00
 8003db0:	40022000 	.word	0x40022000
 8003db4:	40022400 	.word	0x40022400
 8003db8:	40013c00 	.word	0x40013c00

08003dbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691a      	ldr	r2, [r3, #16]
 8003dcc:	887b      	ldrh	r3, [r7, #2]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	73fb      	strb	r3, [r7, #15]
 8003dd8:	e001      	b.n	8003dde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	807b      	strh	r3, [r7, #2]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dfc:	787b      	ldrb	r3, [r7, #1]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e02:	887a      	ldrh	r2, [r7, #2]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e08:	e003      	b.n	8003e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e0a:	887b      	ldrh	r3, [r7, #2]
 8003e0c:	041a      	lsls	r2, r3, #16
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	619a      	str	r2, [r3, #24]
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
	...

08003e20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e12b      	b.n	800408a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d106      	bne.n	8003e4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fd faf6 	bl	8001438 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2224      	movs	r2, #36	; 0x24
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0201 	bic.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e84:	f000 fdac 	bl	80049e0 <HAL_RCC_GetPCLK1Freq>
 8003e88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	4a81      	ldr	r2, [pc, #516]	; (8004094 <HAL_I2C_Init+0x274>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d807      	bhi.n	8003ea4 <HAL_I2C_Init+0x84>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4a80      	ldr	r2, [pc, #512]	; (8004098 <HAL_I2C_Init+0x278>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	bf94      	ite	ls
 8003e9c:	2301      	movls	r3, #1
 8003e9e:	2300      	movhi	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	e006      	b.n	8003eb2 <HAL_I2C_Init+0x92>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4a7d      	ldr	r2, [pc, #500]	; (800409c <HAL_I2C_Init+0x27c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	bf94      	ite	ls
 8003eac:	2301      	movls	r3, #1
 8003eae:	2300      	movhi	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e0e7      	b.n	800408a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4a78      	ldr	r2, [pc, #480]	; (80040a0 <HAL_I2C_Init+0x280>)
 8003ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec2:	0c9b      	lsrs	r3, r3, #18
 8003ec4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6a1b      	ldr	r3, [r3, #32]
 8003ee0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	4a6a      	ldr	r2, [pc, #424]	; (8004094 <HAL_I2C_Init+0x274>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d802      	bhi.n	8003ef4 <HAL_I2C_Init+0xd4>
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	e009      	b.n	8003f08 <HAL_I2C_Init+0xe8>
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003efa:	fb02 f303 	mul.w	r3, r2, r3
 8003efe:	4a69      	ldr	r2, [pc, #420]	; (80040a4 <HAL_I2C_Init+0x284>)
 8003f00:	fba2 2303 	umull	r2, r3, r2, r3
 8003f04:	099b      	lsrs	r3, r3, #6
 8003f06:	3301      	adds	r3, #1
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6812      	ldr	r2, [r2, #0]
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	495c      	ldr	r1, [pc, #368]	; (8004094 <HAL_I2C_Init+0x274>)
 8003f24:	428b      	cmp	r3, r1
 8003f26:	d819      	bhi.n	8003f5c <HAL_I2C_Init+0x13c>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	1e59      	subs	r1, r3, #1
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f36:	1c59      	adds	r1, r3, #1
 8003f38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f3c:	400b      	ands	r3, r1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <HAL_I2C_Init+0x138>
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1e59      	subs	r1, r3, #1
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f50:	3301      	adds	r3, #1
 8003f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f56:	e051      	b.n	8003ffc <HAL_I2C_Init+0x1dc>
 8003f58:	2304      	movs	r3, #4
 8003f5a:	e04f      	b.n	8003ffc <HAL_I2C_Init+0x1dc>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d111      	bne.n	8003f88 <HAL_I2C_Init+0x168>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	1e58      	subs	r0, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6859      	ldr	r1, [r3, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	440b      	add	r3, r1
 8003f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f76:	3301      	adds	r3, #1
 8003f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	bf0c      	ite	eq
 8003f80:	2301      	moveq	r3, #1
 8003f82:	2300      	movne	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	e012      	b.n	8003fae <HAL_I2C_Init+0x18e>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	1e58      	subs	r0, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6859      	ldr	r1, [r3, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	0099      	lsls	r1, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	bf0c      	ite	eq
 8003fa8:	2301      	moveq	r3, #1
 8003faa:	2300      	movne	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_I2C_Init+0x196>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e022      	b.n	8003ffc <HAL_I2C_Init+0x1dc>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10e      	bne.n	8003fdc <HAL_I2C_Init+0x1bc>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	1e58      	subs	r0, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6859      	ldr	r1, [r3, #4]
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	440b      	add	r3, r1
 8003fcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fda:	e00f      	b.n	8003ffc <HAL_I2C_Init+0x1dc>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	1e58      	subs	r0, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6859      	ldr	r1, [r3, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	440b      	add	r3, r1
 8003fea:	0099      	lsls	r1, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	6809      	ldr	r1, [r1, #0]
 8004000:	4313      	orrs	r3, r2
 8004002:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69da      	ldr	r2, [r3, #28]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800402a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	6911      	ldr	r1, [r2, #16]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	68d2      	ldr	r2, [r2, #12]
 8004036:	4311      	orrs	r1, r2
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	6812      	ldr	r2, [r2, #0]
 800403c:	430b      	orrs	r3, r1
 800403e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695a      	ldr	r2, [r3, #20]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	430a      	orrs	r2, r1
 800405a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	000186a0 	.word	0x000186a0
 8004098:	001e847f 	.word	0x001e847f
 800409c:	003d08ff 	.word	0x003d08ff
 80040a0:	431bde83 	.word	0x431bde83
 80040a4:	10624dd3 	.word	0x10624dd3

080040a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b20      	cmp	r3, #32
 80040bc:	d129      	bne.n	8004112 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2224      	movs	r2, #36	; 0x24
 80040c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0201 	bic.w	r2, r2, #1
 80040d4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0210 	bic.w	r2, r2, #16
 80040e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0201 	orr.w	r2, r2, #1
 8004104:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	e000      	b.n	8004114 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004112:	2302      	movs	r3, #2
  }
}
 8004114:	4618      	mov	r0, r3
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800412a:	2300      	movs	r3, #0
 800412c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b20      	cmp	r3, #32
 8004138:	d12a      	bne.n	8004190 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2224      	movs	r2, #36	; 0x24
 800413e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0201 	bic.w	r2, r2, #1
 8004150:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800415a:	89fb      	ldrh	r3, [r7, #14]
 800415c:	f023 030f 	bic.w	r3, r3, #15
 8004160:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	b29a      	uxth	r2, r3
 8004166:	89fb      	ldrh	r3, [r7, #14]
 8004168:	4313      	orrs	r3, r2
 800416a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	89fa      	ldrh	r2, [r7, #14]
 8004172:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0201 	orr.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800418c:	2300      	movs	r3, #0
 800418e:	e000      	b.n	8004192 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004190:	2302      	movs	r3, #2
  }
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
	...

080041a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e264      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d075      	beq.n	80042aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041be:	4ba3      	ldr	r3, [pc, #652]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 030c 	and.w	r3, r3, #12
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d00c      	beq.n	80041e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ca:	4ba0      	ldr	r3, [pc, #640]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d112      	bne.n	80041fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041d6:	4b9d      	ldr	r3, [pc, #628]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041e2:	d10b      	bne.n	80041fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e4:	4b99      	ldr	r3, [pc, #612]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d05b      	beq.n	80042a8 <HAL_RCC_OscConfig+0x108>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d157      	bne.n	80042a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e23f      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004204:	d106      	bne.n	8004214 <HAL_RCC_OscConfig+0x74>
 8004206:	4b91      	ldr	r3, [pc, #580]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a90      	ldr	r2, [pc, #576]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 800420c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	e01d      	b.n	8004250 <HAL_RCC_OscConfig+0xb0>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800421c:	d10c      	bne.n	8004238 <HAL_RCC_OscConfig+0x98>
 800421e:	4b8b      	ldr	r3, [pc, #556]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a8a      	ldr	r2, [pc, #552]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 8004224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	4b88      	ldr	r3, [pc, #544]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a87      	ldr	r2, [pc, #540]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 8004230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	e00b      	b.n	8004250 <HAL_RCC_OscConfig+0xb0>
 8004238:	4b84      	ldr	r3, [pc, #528]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a83      	ldr	r2, [pc, #524]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 800423e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	4b81      	ldr	r3, [pc, #516]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a80      	ldr	r2, [pc, #512]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 800424a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800424e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d013      	beq.n	8004280 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004258:	f7fe ff12 	bl	8003080 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004260:	f7fe ff0e 	bl	8003080 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b64      	cmp	r3, #100	; 0x64
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e204      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004272:	4b76      	ldr	r3, [pc, #472]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f0      	beq.n	8004260 <HAL_RCC_OscConfig+0xc0>
 800427e:	e014      	b.n	80042aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004280:	f7fe fefe 	bl	8003080 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004288:	f7fe fefa 	bl	8003080 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b64      	cmp	r3, #100	; 0x64
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e1f0      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800429a:	4b6c      	ldr	r3, [pc, #432]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0xe8>
 80042a6:	e000      	b.n	80042aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d063      	beq.n	800437e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042b6:	4b65      	ldr	r3, [pc, #404]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 030c 	and.w	r3, r3, #12
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00b      	beq.n	80042da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042c2:	4b62      	ldr	r3, [pc, #392]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d11c      	bne.n	8004308 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ce:	4b5f      	ldr	r3, [pc, #380]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d116      	bne.n	8004308 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042da:	4b5c      	ldr	r3, [pc, #368]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <HAL_RCC_OscConfig+0x152>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d001      	beq.n	80042f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e1c4      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f2:	4b56      	ldr	r3, [pc, #344]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4952      	ldr	r1, [pc, #328]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 8004302:	4313      	orrs	r3, r2
 8004304:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004306:	e03a      	b.n	800437e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d020      	beq.n	8004352 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004310:	4b4f      	ldr	r3, [pc, #316]	; (8004450 <HAL_RCC_OscConfig+0x2b0>)
 8004312:	2201      	movs	r2, #1
 8004314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004316:	f7fe feb3 	bl	8003080 <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800431e:	f7fe feaf 	bl	8003080 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e1a5      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004330:	4b46      	ldr	r3, [pc, #280]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433c:	4b43      	ldr	r3, [pc, #268]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	4940      	ldr	r1, [pc, #256]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 800434c:	4313      	orrs	r3, r2
 800434e:	600b      	str	r3, [r1, #0]
 8004350:	e015      	b.n	800437e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004352:	4b3f      	ldr	r3, [pc, #252]	; (8004450 <HAL_RCC_OscConfig+0x2b0>)
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004358:	f7fe fe92 	bl	8003080 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004360:	f7fe fe8e 	bl	8003080 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e184      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004372:	4b36      	ldr	r3, [pc, #216]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d030      	beq.n	80043ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d016      	beq.n	80043c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004392:	4b30      	ldr	r3, [pc, #192]	; (8004454 <HAL_RCC_OscConfig+0x2b4>)
 8004394:	2201      	movs	r2, #1
 8004396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004398:	f7fe fe72 	bl	8003080 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043a0:	f7fe fe6e 	bl	8003080 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e164      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043b2:	4b26      	ldr	r3, [pc, #152]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 80043b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x200>
 80043be:	e015      	b.n	80043ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c0:	4b24      	ldr	r3, [pc, #144]	; (8004454 <HAL_RCC_OscConfig+0x2b4>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043c6:	f7fe fe5b 	bl	8003080 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ce:	f7fe fe57 	bl	8003080 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e14d      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e0:	4b1a      	ldr	r3, [pc, #104]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 80043e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1f0      	bne.n	80043ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 80a0 	beq.w	800453a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043fa:	2300      	movs	r3, #0
 80043fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043fe:	4b13      	ldr	r3, [pc, #76]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10f      	bne.n	800442a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800440a:	2300      	movs	r3, #0
 800440c:	60bb      	str	r3, [r7, #8]
 800440e:	4b0f      	ldr	r3, [pc, #60]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	4a0e      	ldr	r2, [pc, #56]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 8004414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004418:	6413      	str	r3, [r2, #64]	; 0x40
 800441a:	4b0c      	ldr	r3, [pc, #48]	; (800444c <HAL_RCC_OscConfig+0x2ac>)
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004422:	60bb      	str	r3, [r7, #8]
 8004424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004426:	2301      	movs	r3, #1
 8004428:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442a:	4b0b      	ldr	r3, [pc, #44]	; (8004458 <HAL_RCC_OscConfig+0x2b8>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004432:	2b00      	cmp	r3, #0
 8004434:	d121      	bne.n	800447a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004436:	4b08      	ldr	r3, [pc, #32]	; (8004458 <HAL_RCC_OscConfig+0x2b8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a07      	ldr	r2, [pc, #28]	; (8004458 <HAL_RCC_OscConfig+0x2b8>)
 800443c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004442:	f7fe fe1d 	bl	8003080 <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004448:	e011      	b.n	800446e <HAL_RCC_OscConfig+0x2ce>
 800444a:	bf00      	nop
 800444c:	40023800 	.word	0x40023800
 8004450:	42470000 	.word	0x42470000
 8004454:	42470e80 	.word	0x42470e80
 8004458:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800445c:	f7fe fe10 	bl	8003080 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e106      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446e:	4b85      	ldr	r3, [pc, #532]	; (8004684 <HAL_RCC_OscConfig+0x4e4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0f0      	beq.n	800445c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d106      	bne.n	8004490 <HAL_RCC_OscConfig+0x2f0>
 8004482:	4b81      	ldr	r3, [pc, #516]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 8004484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004486:	4a80      	ldr	r2, [pc, #512]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	6713      	str	r3, [r2, #112]	; 0x70
 800448e:	e01c      	b.n	80044ca <HAL_RCC_OscConfig+0x32a>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	2b05      	cmp	r3, #5
 8004496:	d10c      	bne.n	80044b2 <HAL_RCC_OscConfig+0x312>
 8004498:	4b7b      	ldr	r3, [pc, #492]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 800449a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449c:	4a7a      	ldr	r2, [pc, #488]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 800449e:	f043 0304 	orr.w	r3, r3, #4
 80044a2:	6713      	str	r3, [r2, #112]	; 0x70
 80044a4:	4b78      	ldr	r3, [pc, #480]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 80044a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a8:	4a77      	ldr	r2, [pc, #476]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 80044aa:	f043 0301 	orr.w	r3, r3, #1
 80044ae:	6713      	str	r3, [r2, #112]	; 0x70
 80044b0:	e00b      	b.n	80044ca <HAL_RCC_OscConfig+0x32a>
 80044b2:	4b75      	ldr	r3, [pc, #468]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 80044b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b6:	4a74      	ldr	r2, [pc, #464]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 80044b8:	f023 0301 	bic.w	r3, r3, #1
 80044bc:	6713      	str	r3, [r2, #112]	; 0x70
 80044be:	4b72      	ldr	r3, [pc, #456]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	4a71      	ldr	r2, [pc, #452]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 80044c4:	f023 0304 	bic.w	r3, r3, #4
 80044c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d015      	beq.n	80044fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d2:	f7fe fdd5 	bl	8003080 <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d8:	e00a      	b.n	80044f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044da:	f7fe fdd1 	bl	8003080 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e0c5      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f0:	4b65      	ldr	r3, [pc, #404]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 80044f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0ee      	beq.n	80044da <HAL_RCC_OscConfig+0x33a>
 80044fc:	e014      	b.n	8004528 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044fe:	f7fe fdbf 	bl	8003080 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004504:	e00a      	b.n	800451c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004506:	f7fe fdbb 	bl	8003080 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	f241 3288 	movw	r2, #5000	; 0x1388
 8004514:	4293      	cmp	r3, r2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e0af      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800451c:	4b5a      	ldr	r3, [pc, #360]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 800451e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1ee      	bne.n	8004506 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004528:	7dfb      	ldrb	r3, [r7, #23]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d105      	bne.n	800453a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800452e:	4b56      	ldr	r3, [pc, #344]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	4a55      	ldr	r2, [pc, #340]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 8004534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004538:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 809b 	beq.w	800467a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004544:	4b50      	ldr	r3, [pc, #320]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 030c 	and.w	r3, r3, #12
 800454c:	2b08      	cmp	r3, #8
 800454e:	d05c      	beq.n	800460a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	2b02      	cmp	r3, #2
 8004556:	d141      	bne.n	80045dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004558:	4b4c      	ldr	r3, [pc, #304]	; (800468c <HAL_RCC_OscConfig+0x4ec>)
 800455a:	2200      	movs	r2, #0
 800455c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800455e:	f7fe fd8f 	bl	8003080 <HAL_GetTick>
 8004562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004566:	f7fe fd8b 	bl	8003080 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e081      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004578:	4b43      	ldr	r3, [pc, #268]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1f0      	bne.n	8004566 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69da      	ldr	r2, [r3, #28]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	431a      	orrs	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	019b      	lsls	r3, r3, #6
 8004594:	431a      	orrs	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459a:	085b      	lsrs	r3, r3, #1
 800459c:	3b01      	subs	r3, #1
 800459e:	041b      	lsls	r3, r3, #16
 80045a0:	431a      	orrs	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a6:	061b      	lsls	r3, r3, #24
 80045a8:	4937      	ldr	r1, [pc, #220]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045ae:	4b37      	ldr	r3, [pc, #220]	; (800468c <HAL_RCC_OscConfig+0x4ec>)
 80045b0:	2201      	movs	r2, #1
 80045b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b4:	f7fe fd64 	bl	8003080 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045bc:	f7fe fd60 	bl	8003080 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e056      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ce:	4b2e      	ldr	r3, [pc, #184]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0f0      	beq.n	80045bc <HAL_RCC_OscConfig+0x41c>
 80045da:	e04e      	b.n	800467a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045dc:	4b2b      	ldr	r3, [pc, #172]	; (800468c <HAL_RCC_OscConfig+0x4ec>)
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e2:	f7fe fd4d 	bl	8003080 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ea:	f7fe fd49 	bl	8003080 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e03f      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045fc:	4b22      	ldr	r3, [pc, #136]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1f0      	bne.n	80045ea <HAL_RCC_OscConfig+0x44a>
 8004608:	e037      	b.n	800467a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d101      	bne.n	8004616 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e032      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004616:	4b1c      	ldr	r3, [pc, #112]	; (8004688 <HAL_RCC_OscConfig+0x4e8>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d028      	beq.n	8004676 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800462e:	429a      	cmp	r2, r3
 8004630:	d121      	bne.n	8004676 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d11a      	bne.n	8004676 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004646:	4013      	ands	r3, r2
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800464c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800464e:	4293      	cmp	r3, r2
 8004650:	d111      	bne.n	8004676 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465c:	085b      	lsrs	r3, r3, #1
 800465e:	3b01      	subs	r3, #1
 8004660:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004662:	429a      	cmp	r2, r3
 8004664:	d107      	bne.n	8004676 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004672:	429a      	cmp	r2, r3
 8004674:	d001      	beq.n	800467a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40007000 	.word	0x40007000
 8004688:	40023800 	.word	0x40023800
 800468c:	42470060 	.word	0x42470060

08004690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e0cc      	b.n	800483e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046a4:	4b68      	ldr	r3, [pc, #416]	; (8004848 <HAL_RCC_ClockConfig+0x1b8>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d90c      	bls.n	80046cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b2:	4b65      	ldr	r3, [pc, #404]	; (8004848 <HAL_RCC_ClockConfig+0x1b8>)
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	b2d2      	uxtb	r2, r2
 80046b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ba:	4b63      	ldr	r3, [pc, #396]	; (8004848 <HAL_RCC_ClockConfig+0x1b8>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d001      	beq.n	80046cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e0b8      	b.n	800483e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d020      	beq.n	800471a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046e4:	4b59      	ldr	r3, [pc, #356]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	4a58      	ldr	r2, [pc, #352]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0308 	and.w	r3, r3, #8
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046fc:	4b53      	ldr	r3, [pc, #332]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	4a52      	ldr	r2, [pc, #328]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 8004702:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004706:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004708:	4b50      	ldr	r3, [pc, #320]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	494d      	ldr	r1, [pc, #308]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	4313      	orrs	r3, r2
 8004718:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d044      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d107      	bne.n	800473e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800472e:	4b47      	ldr	r3, [pc, #284]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d119      	bne.n	800476e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e07f      	b.n	800483e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d003      	beq.n	800474e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800474a:	2b03      	cmp	r3, #3
 800474c:	d107      	bne.n	800475e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474e:	4b3f      	ldr	r3, [pc, #252]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d109      	bne.n	800476e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e06f      	b.n	800483e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800475e:	4b3b      	ldr	r3, [pc, #236]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e067      	b.n	800483e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800476e:	4b37      	ldr	r3, [pc, #220]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f023 0203 	bic.w	r2, r3, #3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	4934      	ldr	r1, [pc, #208]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 800477c:	4313      	orrs	r3, r2
 800477e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004780:	f7fe fc7e 	bl	8003080 <HAL_GetTick>
 8004784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004786:	e00a      	b.n	800479e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004788:	f7fe fc7a 	bl	8003080 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	f241 3288 	movw	r2, #5000	; 0x1388
 8004796:	4293      	cmp	r3, r2
 8004798:	d901      	bls.n	800479e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e04f      	b.n	800483e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479e:	4b2b      	ldr	r3, [pc, #172]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 020c 	and.w	r2, r3, #12
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d1eb      	bne.n	8004788 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047b0:	4b25      	ldr	r3, [pc, #148]	; (8004848 <HAL_RCC_ClockConfig+0x1b8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 030f 	and.w	r3, r3, #15
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d20c      	bcs.n	80047d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047be:	4b22      	ldr	r3, [pc, #136]	; (8004848 <HAL_RCC_ClockConfig+0x1b8>)
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c6:	4b20      	ldr	r3, [pc, #128]	; (8004848 <HAL_RCC_ClockConfig+0x1b8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d001      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e032      	b.n	800483e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d008      	beq.n	80047f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047e4:	4b19      	ldr	r3, [pc, #100]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	4916      	ldr	r1, [pc, #88]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d009      	beq.n	8004816 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004802:	4b12      	ldr	r3, [pc, #72]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	490e      	ldr	r1, [pc, #56]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	4313      	orrs	r3, r2
 8004814:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004816:	f000 f821 	bl	800485c <HAL_RCC_GetSysClockFreq>
 800481a:	4602      	mov	r2, r0
 800481c:	4b0b      	ldr	r3, [pc, #44]	; (800484c <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	091b      	lsrs	r3, r3, #4
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	490a      	ldr	r1, [pc, #40]	; (8004850 <HAL_RCC_ClockConfig+0x1c0>)
 8004828:	5ccb      	ldrb	r3, [r1, r3]
 800482a:	fa22 f303 	lsr.w	r3, r2, r3
 800482e:	4a09      	ldr	r2, [pc, #36]	; (8004854 <HAL_RCC_ClockConfig+0x1c4>)
 8004830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004832:	4b09      	ldr	r3, [pc, #36]	; (8004858 <HAL_RCC_ClockConfig+0x1c8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f7fe fbde 	bl	8002ff8 <HAL_InitTick>

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3710      	adds	r7, #16
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	40023c00 	.word	0x40023c00
 800484c:	40023800 	.word	0x40023800
 8004850:	0800a9d0 	.word	0x0800a9d0
 8004854:	20000004 	.word	0x20000004
 8004858:	2000000c 	.word	0x2000000c

0800485c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800485c:	b5b0      	push	{r4, r5, r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004862:	2100      	movs	r1, #0
 8004864:	6079      	str	r1, [r7, #4]
 8004866:	2100      	movs	r1, #0
 8004868:	60f9      	str	r1, [r7, #12]
 800486a:	2100      	movs	r1, #0
 800486c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800486e:	2100      	movs	r1, #0
 8004870:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004872:	4952      	ldr	r1, [pc, #328]	; (80049bc <HAL_RCC_GetSysClockFreq+0x160>)
 8004874:	6889      	ldr	r1, [r1, #8]
 8004876:	f001 010c 	and.w	r1, r1, #12
 800487a:	2908      	cmp	r1, #8
 800487c:	d00d      	beq.n	800489a <HAL_RCC_GetSysClockFreq+0x3e>
 800487e:	2908      	cmp	r1, #8
 8004880:	f200 8094 	bhi.w	80049ac <HAL_RCC_GetSysClockFreq+0x150>
 8004884:	2900      	cmp	r1, #0
 8004886:	d002      	beq.n	800488e <HAL_RCC_GetSysClockFreq+0x32>
 8004888:	2904      	cmp	r1, #4
 800488a:	d003      	beq.n	8004894 <HAL_RCC_GetSysClockFreq+0x38>
 800488c:	e08e      	b.n	80049ac <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800488e:	4b4c      	ldr	r3, [pc, #304]	; (80049c0 <HAL_RCC_GetSysClockFreq+0x164>)
 8004890:	60bb      	str	r3, [r7, #8]
       break;
 8004892:	e08e      	b.n	80049b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004894:	4b4b      	ldr	r3, [pc, #300]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x168>)
 8004896:	60bb      	str	r3, [r7, #8]
      break;
 8004898:	e08b      	b.n	80049b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800489a:	4948      	ldr	r1, [pc, #288]	; (80049bc <HAL_RCC_GetSysClockFreq+0x160>)
 800489c:	6849      	ldr	r1, [r1, #4]
 800489e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80048a2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048a4:	4945      	ldr	r1, [pc, #276]	; (80049bc <HAL_RCC_GetSysClockFreq+0x160>)
 80048a6:	6849      	ldr	r1, [r1, #4]
 80048a8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80048ac:	2900      	cmp	r1, #0
 80048ae:	d024      	beq.n	80048fa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048b0:	4942      	ldr	r1, [pc, #264]	; (80049bc <HAL_RCC_GetSysClockFreq+0x160>)
 80048b2:	6849      	ldr	r1, [r1, #4]
 80048b4:	0989      	lsrs	r1, r1, #6
 80048b6:	4608      	mov	r0, r1
 80048b8:	f04f 0100 	mov.w	r1, #0
 80048bc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80048c0:	f04f 0500 	mov.w	r5, #0
 80048c4:	ea00 0204 	and.w	r2, r0, r4
 80048c8:	ea01 0305 	and.w	r3, r1, r5
 80048cc:	493d      	ldr	r1, [pc, #244]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80048ce:	fb01 f003 	mul.w	r0, r1, r3
 80048d2:	2100      	movs	r1, #0
 80048d4:	fb01 f102 	mul.w	r1, r1, r2
 80048d8:	1844      	adds	r4, r0, r1
 80048da:	493a      	ldr	r1, [pc, #232]	; (80049c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80048dc:	fba2 0101 	umull	r0, r1, r2, r1
 80048e0:	1863      	adds	r3, r4, r1
 80048e2:	4619      	mov	r1, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	461a      	mov	r2, r3
 80048e8:	f04f 0300 	mov.w	r3, #0
 80048ec:	f7fc f9dc 	bl	8000ca8 <__aeabi_uldivmod>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4613      	mov	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	e04a      	b.n	8004990 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048fa:	4b30      	ldr	r3, [pc, #192]	; (80049bc <HAL_RCC_GetSysClockFreq+0x160>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	099b      	lsrs	r3, r3, #6
 8004900:	461a      	mov	r2, r3
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	f240 10ff 	movw	r0, #511	; 0x1ff
 800490a:	f04f 0100 	mov.w	r1, #0
 800490e:	ea02 0400 	and.w	r4, r2, r0
 8004912:	ea03 0501 	and.w	r5, r3, r1
 8004916:	4620      	mov	r0, r4
 8004918:	4629      	mov	r1, r5
 800491a:	f04f 0200 	mov.w	r2, #0
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	014b      	lsls	r3, r1, #5
 8004924:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004928:	0142      	lsls	r2, r0, #5
 800492a:	4610      	mov	r0, r2
 800492c:	4619      	mov	r1, r3
 800492e:	1b00      	subs	r0, r0, r4
 8004930:	eb61 0105 	sbc.w	r1, r1, r5
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	f04f 0300 	mov.w	r3, #0
 800493c:	018b      	lsls	r3, r1, #6
 800493e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004942:	0182      	lsls	r2, r0, #6
 8004944:	1a12      	subs	r2, r2, r0
 8004946:	eb63 0301 	sbc.w	r3, r3, r1
 800494a:	f04f 0000 	mov.w	r0, #0
 800494e:	f04f 0100 	mov.w	r1, #0
 8004952:	00d9      	lsls	r1, r3, #3
 8004954:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004958:	00d0      	lsls	r0, r2, #3
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	1912      	adds	r2, r2, r4
 8004960:	eb45 0303 	adc.w	r3, r5, r3
 8004964:	f04f 0000 	mov.w	r0, #0
 8004968:	f04f 0100 	mov.w	r1, #0
 800496c:	0299      	lsls	r1, r3, #10
 800496e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004972:	0290      	lsls	r0, r2, #10
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4610      	mov	r0, r2
 800497a:	4619      	mov	r1, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	461a      	mov	r2, r3
 8004980:	f04f 0300 	mov.w	r3, #0
 8004984:	f7fc f990 	bl	8000ca8 <__aeabi_uldivmod>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4613      	mov	r3, r2
 800498e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004990:	4b0a      	ldr	r3, [pc, #40]	; (80049bc <HAL_RCC_GetSysClockFreq+0x160>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	0c1b      	lsrs	r3, r3, #16
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	3301      	adds	r3, #1
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a8:	60bb      	str	r3, [r7, #8]
      break;
 80049aa:	e002      	b.n	80049b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049ac:	4b04      	ldr	r3, [pc, #16]	; (80049c0 <HAL_RCC_GetSysClockFreq+0x164>)
 80049ae:	60bb      	str	r3, [r7, #8]
      break;
 80049b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049b2:	68bb      	ldr	r3, [r7, #8]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bdb0      	pop	{r4, r5, r7, pc}
 80049bc:	40023800 	.word	0x40023800
 80049c0:	00f42400 	.word	0x00f42400
 80049c4:	017d7840 	.word	0x017d7840

080049c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049cc:	4b03      	ldr	r3, [pc, #12]	; (80049dc <HAL_RCC_GetHCLKFreq+0x14>)
 80049ce:	681b      	ldr	r3, [r3, #0]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	20000004 	.word	0x20000004

080049e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049e4:	f7ff fff0 	bl	80049c8 <HAL_RCC_GetHCLKFreq>
 80049e8:	4602      	mov	r2, r0
 80049ea:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	0a9b      	lsrs	r3, r3, #10
 80049f0:	f003 0307 	and.w	r3, r3, #7
 80049f4:	4903      	ldr	r1, [pc, #12]	; (8004a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049f6:	5ccb      	ldrb	r3, [r1, r3]
 80049f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	40023800 	.word	0x40023800
 8004a04:	0800a9e0 	.word	0x0800a9e0

08004a08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a0c:	f7ff ffdc 	bl	80049c8 <HAL_RCC_GetHCLKFreq>
 8004a10:	4602      	mov	r2, r0
 8004a12:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	0b5b      	lsrs	r3, r3, #13
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	4903      	ldr	r1, [pc, #12]	; (8004a2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a1e:	5ccb      	ldrb	r3, [r1, r3]
 8004a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	0800a9e0 	.word	0x0800a9e0

08004a30 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e01c      	b.n	8004a7c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	795b      	ldrb	r3, [r3, #5]
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d105      	bne.n	8004a58 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7fc fff4 	bl	8001a40 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f042 0204 	orr.w	r2, r2, #4
 8004a6c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e07b      	b.n	8004b8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d108      	bne.n	8004ab0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aa6:	d009      	beq.n	8004abc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	61da      	str	r2, [r3, #28]
 8004aae:	e005      	b.n	8004abc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7fd f80a 	bl	8001af0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004af2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b04:	431a      	orrs	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b40:	ea42 0103 	orr.w	r1, r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	699b      	ldr	r3, [r3, #24]
 8004b58:	0c1b      	lsrs	r3, r3, #16
 8004b5a:	f003 0104 	and.w	r1, r3, #4
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	f003 0210 	and.w	r2, r3, #16
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	69da      	ldr	r2, [r3, #28]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b088      	sub	sp, #32
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	603b      	str	r3, [r7, #0]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_SPI_Transmit+0x22>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e126      	b.n	8004e06 <HAL_SPI_Transmit+0x270>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bc0:	f7fe fa5e 	bl	8003080 <HAL_GetTick>
 8004bc4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004bc6:	88fb      	ldrh	r3, [r7, #6]
 8004bc8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d002      	beq.n	8004bdc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004bd6:	2302      	movs	r3, #2
 8004bd8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004bda:	e10b      	b.n	8004df4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <HAL_SPI_Transmit+0x52>
 8004be2:	88fb      	ldrh	r3, [r7, #6]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d102      	bne.n	8004bee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004bec:	e102      	b.n	8004df4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2203      	movs	r2, #3
 8004bf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	88fa      	ldrh	r2, [r7, #6]
 8004c06:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	88fa      	ldrh	r2, [r7, #6]
 8004c0c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c34:	d10f      	bne.n	8004c56 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c60:	2b40      	cmp	r3, #64	; 0x40
 8004c62:	d007      	beq.n	8004c74 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c7c:	d14b      	bne.n	8004d16 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <HAL_SPI_Transmit+0xf6>
 8004c86:	8afb      	ldrh	r3, [r7, #22]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d13e      	bne.n	8004d0a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c90:	881a      	ldrh	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9c:	1c9a      	adds	r2, r3, #2
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004cb0:	e02b      	b.n	8004d0a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d112      	bne.n	8004ce6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc4:	881a      	ldrh	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd0:	1c9a      	adds	r2, r3, #2
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ce4:	e011      	b.n	8004d0a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ce6:	f7fe f9cb 	bl	8003080 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d803      	bhi.n	8004cfe <HAL_SPI_Transmit+0x168>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfc:	d102      	bne.n	8004d04 <HAL_SPI_Transmit+0x16e>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d102      	bne.n	8004d0a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d08:	e074      	b.n	8004df4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1ce      	bne.n	8004cb2 <HAL_SPI_Transmit+0x11c>
 8004d14:	e04c      	b.n	8004db0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <HAL_SPI_Transmit+0x18e>
 8004d1e:	8afb      	ldrh	r3, [r7, #22]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d140      	bne.n	8004da6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	330c      	adds	r3, #12
 8004d2e:	7812      	ldrb	r2, [r2, #0]
 8004d30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d4a:	e02c      	b.n	8004da6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d113      	bne.n	8004d82 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	330c      	adds	r3, #12
 8004d64:	7812      	ldrb	r2, [r2, #0]
 8004d66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d80:	e011      	b.n	8004da6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d82:	f7fe f97d 	bl	8003080 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d803      	bhi.n	8004d9a <HAL_SPI_Transmit+0x204>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d98:	d102      	bne.n	8004da0 <HAL_SPI_Transmit+0x20a>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d102      	bne.n	8004da6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004da4:	e026      	b.n	8004df4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1cd      	bne.n	8004d4c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	6839      	ldr	r1, [r7, #0]
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 f8b3 	bl	8004f20 <SPI_EndRxTxTransaction>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d002      	beq.n	8004dc6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10a      	bne.n	8004de4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dce:	2300      	movs	r3, #0
 8004dd0:	613b      	str	r3, [r7, #16]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	613b      	str	r3, [r7, #16]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	613b      	str	r3, [r7, #16]
 8004de2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d002      	beq.n	8004df2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	77fb      	strb	r3, [r7, #31]
 8004df0:	e000      	b.n	8004df4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004df2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e04:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3720      	adds	r7, #32
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b088      	sub	sp, #32
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	603b      	str	r3, [r7, #0]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e20:	f7fe f92e 	bl	8003080 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	1a9b      	subs	r3, r3, r2
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e30:	f7fe f926 	bl	8003080 <HAL_GetTick>
 8004e34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e36:	4b39      	ldr	r3, [pc, #228]	; (8004f1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	015b      	lsls	r3, r3, #5
 8004e3c:	0d1b      	lsrs	r3, r3, #20
 8004e3e:	69fa      	ldr	r2, [r7, #28]
 8004e40:	fb02 f303 	mul.w	r3, r2, r3
 8004e44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e46:	e054      	b.n	8004ef2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4e:	d050      	beq.n	8004ef2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e50:	f7fe f916 	bl	8003080 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d902      	bls.n	8004e66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d13d      	bne.n	8004ee2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e7e:	d111      	bne.n	8004ea4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e88:	d004      	beq.n	8004e94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e92:	d107      	bne.n	8004ea4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ea2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eac:	d10f      	bne.n	8004ece <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ebc:	601a      	str	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ecc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e017      	b.n	8004f12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4013      	ands	r3, r2
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	bf0c      	ite	eq
 8004f02:	2301      	moveq	r3, #1
 8004f04:	2300      	movne	r3, #0
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	461a      	mov	r2, r3
 8004f0a:	79fb      	ldrb	r3, [r7, #7]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d19b      	bne.n	8004e48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3720      	adds	r7, #32
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20000004 	.word	0x20000004

08004f20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b088      	sub	sp, #32
 8004f24:	af02      	add	r7, sp, #8
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f2c:	4b1b      	ldr	r3, [pc, #108]	; (8004f9c <SPI_EndRxTxTransaction+0x7c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a1b      	ldr	r2, [pc, #108]	; (8004fa0 <SPI_EndRxTxTransaction+0x80>)
 8004f32:	fba2 2303 	umull	r2, r3, r2, r3
 8004f36:	0d5b      	lsrs	r3, r3, #21
 8004f38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f3c:	fb02 f303 	mul.w	r3, r2, r3
 8004f40:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f4a:	d112      	bne.n	8004f72 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2200      	movs	r2, #0
 8004f54:	2180      	movs	r1, #128	; 0x80
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f7ff ff5a 	bl	8004e10 <SPI_WaitFlagStateUntilTimeout>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d016      	beq.n	8004f90 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f66:	f043 0220 	orr.w	r2, r3, #32
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e00f      	b.n	8004f92 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00a      	beq.n	8004f8e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f88:	2b80      	cmp	r3, #128	; 0x80
 8004f8a:	d0f2      	beq.n	8004f72 <SPI_EndRxTxTransaction+0x52>
 8004f8c:	e000      	b.n	8004f90 <SPI_EndRxTxTransaction+0x70>
        break;
 8004f8e:	bf00      	nop
  }

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	20000004 	.word	0x20000004
 8004fa0:	165e9f81 	.word	0x165e9f81

08004fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e041      	b.n	800503a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d106      	bne.n	8004fd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fd f838 	bl	8002040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3304      	adds	r3, #4
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	f000 face 	bl	8005584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005042:	b580      	push	{r7, lr}
 8005044:	b082      	sub	sp, #8
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e041      	b.n	80050d8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800505a:	b2db      	uxtb	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	d106      	bne.n	800506e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7fd f821 	bl	80020b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2202      	movs	r2, #2
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3304      	adds	r3, #4
 800507e:	4619      	mov	r1, r3
 8005080:	4610      	mov	r0, r2
 8005082:	f000 fa7f 	bl	8005584 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d109      	bne.n	8005104 <HAL_TIM_PWM_Start+0x24>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	bf14      	ite	ne
 80050fc:	2301      	movne	r3, #1
 80050fe:	2300      	moveq	r3, #0
 8005100:	b2db      	uxtb	r3, r3
 8005102:	e022      	b.n	800514a <HAL_TIM_PWM_Start+0x6a>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b04      	cmp	r3, #4
 8005108:	d109      	bne.n	800511e <HAL_TIM_PWM_Start+0x3e>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b01      	cmp	r3, #1
 8005114:	bf14      	ite	ne
 8005116:	2301      	movne	r3, #1
 8005118:	2300      	moveq	r3, #0
 800511a:	b2db      	uxtb	r3, r3
 800511c:	e015      	b.n	800514a <HAL_TIM_PWM_Start+0x6a>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b08      	cmp	r3, #8
 8005122:	d109      	bne.n	8005138 <HAL_TIM_PWM_Start+0x58>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b01      	cmp	r3, #1
 800512e:	bf14      	ite	ne
 8005130:	2301      	movne	r3, #1
 8005132:	2300      	moveq	r3, #0
 8005134:	b2db      	uxtb	r3, r3
 8005136:	e008      	b.n	800514a <HAL_TIM_PWM_Start+0x6a>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b01      	cmp	r3, #1
 8005142:	bf14      	ite	ne
 8005144:	2301      	movne	r3, #1
 8005146:	2300      	moveq	r3, #0
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e07c      	b.n	800524c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d104      	bne.n	8005162 <HAL_TIM_PWM_Start+0x82>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005160:	e013      	b.n	800518a <HAL_TIM_PWM_Start+0xaa>
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b04      	cmp	r3, #4
 8005166:	d104      	bne.n	8005172 <HAL_TIM_PWM_Start+0x92>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005170:	e00b      	b.n	800518a <HAL_TIM_PWM_Start+0xaa>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b08      	cmp	r3, #8
 8005176:	d104      	bne.n	8005182 <HAL_TIM_PWM_Start+0xa2>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005180:	e003      	b.n	800518a <HAL_TIM_PWM_Start+0xaa>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2202      	movs	r2, #2
 8005186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2201      	movs	r2, #1
 8005190:	6839      	ldr	r1, [r7, #0]
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fce0 	bl	8005b58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a2d      	ldr	r2, [pc, #180]	; (8005254 <HAL_TIM_PWM_Start+0x174>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d004      	beq.n	80051ac <HAL_TIM_PWM_Start+0xcc>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a2c      	ldr	r2, [pc, #176]	; (8005258 <HAL_TIM_PWM_Start+0x178>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d101      	bne.n	80051b0 <HAL_TIM_PWM_Start+0xd0>
 80051ac:	2301      	movs	r3, #1
 80051ae:	e000      	b.n	80051b2 <HAL_TIM_PWM_Start+0xd2>
 80051b0:	2300      	movs	r3, #0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d007      	beq.n	80051c6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a22      	ldr	r2, [pc, #136]	; (8005254 <HAL_TIM_PWM_Start+0x174>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d022      	beq.n	8005216 <HAL_TIM_PWM_Start+0x136>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d8:	d01d      	beq.n	8005216 <HAL_TIM_PWM_Start+0x136>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a1f      	ldr	r2, [pc, #124]	; (800525c <HAL_TIM_PWM_Start+0x17c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d018      	beq.n	8005216 <HAL_TIM_PWM_Start+0x136>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a1d      	ldr	r2, [pc, #116]	; (8005260 <HAL_TIM_PWM_Start+0x180>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d013      	beq.n	8005216 <HAL_TIM_PWM_Start+0x136>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a1c      	ldr	r2, [pc, #112]	; (8005264 <HAL_TIM_PWM_Start+0x184>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d00e      	beq.n	8005216 <HAL_TIM_PWM_Start+0x136>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a16      	ldr	r2, [pc, #88]	; (8005258 <HAL_TIM_PWM_Start+0x178>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d009      	beq.n	8005216 <HAL_TIM_PWM_Start+0x136>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a18      	ldr	r2, [pc, #96]	; (8005268 <HAL_TIM_PWM_Start+0x188>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d004      	beq.n	8005216 <HAL_TIM_PWM_Start+0x136>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a16      	ldr	r2, [pc, #88]	; (800526c <HAL_TIM_PWM_Start+0x18c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d111      	bne.n	800523a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b06      	cmp	r3, #6
 8005226:	d010      	beq.n	800524a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f042 0201 	orr.w	r2, r2, #1
 8005236:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005238:	e007      	b.n	800524a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f042 0201 	orr.w	r2, r2, #1
 8005248:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	40010000 	.word	0x40010000
 8005258:	40010400 	.word	0x40010400
 800525c:	40000400 	.word	0x40000400
 8005260:	40000800 	.word	0x40000800
 8005264:	40000c00 	.word	0x40000c00
 8005268:	40014000 	.word	0x40014000
 800526c:	40001800 	.word	0x40001800

08005270 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800527c:	2300      	movs	r3, #0
 800527e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005286:	2b01      	cmp	r3, #1
 8005288:	d101      	bne.n	800528e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800528a:	2302      	movs	r3, #2
 800528c:	e0ae      	b.n	80053ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b0c      	cmp	r3, #12
 800529a:	f200 809f 	bhi.w	80053dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800529e:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a4:	080052d9 	.word	0x080052d9
 80052a8:	080053dd 	.word	0x080053dd
 80052ac:	080053dd 	.word	0x080053dd
 80052b0:	080053dd 	.word	0x080053dd
 80052b4:	08005319 	.word	0x08005319
 80052b8:	080053dd 	.word	0x080053dd
 80052bc:	080053dd 	.word	0x080053dd
 80052c0:	080053dd 	.word	0x080053dd
 80052c4:	0800535b 	.word	0x0800535b
 80052c8:	080053dd 	.word	0x080053dd
 80052cc:	080053dd 	.word	0x080053dd
 80052d0:	080053dd 	.word	0x080053dd
 80052d4:	0800539b 	.word	0x0800539b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68b9      	ldr	r1, [r7, #8]
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 f9f0 	bl	80056c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699a      	ldr	r2, [r3, #24]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0208 	orr.w	r2, r2, #8
 80052f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699a      	ldr	r2, [r3, #24]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0204 	bic.w	r2, r2, #4
 8005302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6999      	ldr	r1, [r3, #24]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	691a      	ldr	r2, [r3, #16]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	619a      	str	r2, [r3, #24]
      break;
 8005316:	e064      	b.n	80053e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68b9      	ldr	r1, [r7, #8]
 800531e:	4618      	mov	r0, r3
 8005320:	f000 fa40 	bl	80057a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699a      	ldr	r2, [r3, #24]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	699a      	ldr	r2, [r3, #24]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6999      	ldr	r1, [r3, #24]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	021a      	lsls	r2, r3, #8
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	619a      	str	r2, [r3, #24]
      break;
 8005358:	e043      	b.n	80053e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fa95 	bl	8005890 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	69da      	ldr	r2, [r3, #28]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f042 0208 	orr.w	r2, r2, #8
 8005374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69da      	ldr	r2, [r3, #28]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0204 	bic.w	r2, r2, #4
 8005384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69d9      	ldr	r1, [r3, #28]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	61da      	str	r2, [r3, #28]
      break;
 8005398:	e023      	b.n	80053e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68b9      	ldr	r1, [r7, #8]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 fae9 	bl	8005978 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69da      	ldr	r2, [r3, #28]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69da      	ldr	r2, [r3, #28]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	69d9      	ldr	r1, [r3, #28]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	021a      	lsls	r2, r3, #8
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	61da      	str	r2, [r3, #28]
      break;
 80053da:	e002      	b.n	80053e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	75fb      	strb	r3, [r7, #23]
      break;
 80053e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3718      	adds	r7, #24
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005408:	2b01      	cmp	r3, #1
 800540a:	d101      	bne.n	8005410 <HAL_TIM_ConfigClockSource+0x1c>
 800540c:	2302      	movs	r3, #2
 800540e:	e0b4      	b.n	800557a <HAL_TIM_ConfigClockSource+0x186>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800542e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005436:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005448:	d03e      	beq.n	80054c8 <HAL_TIM_ConfigClockSource+0xd4>
 800544a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800544e:	f200 8087 	bhi.w	8005560 <HAL_TIM_ConfigClockSource+0x16c>
 8005452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005456:	f000 8086 	beq.w	8005566 <HAL_TIM_ConfigClockSource+0x172>
 800545a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545e:	d87f      	bhi.n	8005560 <HAL_TIM_ConfigClockSource+0x16c>
 8005460:	2b70      	cmp	r3, #112	; 0x70
 8005462:	d01a      	beq.n	800549a <HAL_TIM_ConfigClockSource+0xa6>
 8005464:	2b70      	cmp	r3, #112	; 0x70
 8005466:	d87b      	bhi.n	8005560 <HAL_TIM_ConfigClockSource+0x16c>
 8005468:	2b60      	cmp	r3, #96	; 0x60
 800546a:	d050      	beq.n	800550e <HAL_TIM_ConfigClockSource+0x11a>
 800546c:	2b60      	cmp	r3, #96	; 0x60
 800546e:	d877      	bhi.n	8005560 <HAL_TIM_ConfigClockSource+0x16c>
 8005470:	2b50      	cmp	r3, #80	; 0x50
 8005472:	d03c      	beq.n	80054ee <HAL_TIM_ConfigClockSource+0xfa>
 8005474:	2b50      	cmp	r3, #80	; 0x50
 8005476:	d873      	bhi.n	8005560 <HAL_TIM_ConfigClockSource+0x16c>
 8005478:	2b40      	cmp	r3, #64	; 0x40
 800547a:	d058      	beq.n	800552e <HAL_TIM_ConfigClockSource+0x13a>
 800547c:	2b40      	cmp	r3, #64	; 0x40
 800547e:	d86f      	bhi.n	8005560 <HAL_TIM_ConfigClockSource+0x16c>
 8005480:	2b30      	cmp	r3, #48	; 0x30
 8005482:	d064      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x15a>
 8005484:	2b30      	cmp	r3, #48	; 0x30
 8005486:	d86b      	bhi.n	8005560 <HAL_TIM_ConfigClockSource+0x16c>
 8005488:	2b20      	cmp	r3, #32
 800548a:	d060      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x15a>
 800548c:	2b20      	cmp	r3, #32
 800548e:	d867      	bhi.n	8005560 <HAL_TIM_ConfigClockSource+0x16c>
 8005490:	2b00      	cmp	r3, #0
 8005492:	d05c      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x15a>
 8005494:	2b10      	cmp	r3, #16
 8005496:	d05a      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x15a>
 8005498:	e062      	b.n	8005560 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	6899      	ldr	r1, [r3, #8]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f000 fb35 	bl	8005b18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	609a      	str	r2, [r3, #8]
      break;
 80054c6:	e04f      	b.n	8005568 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6818      	ldr	r0, [r3, #0]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	6899      	ldr	r1, [r3, #8]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f000 fb1e 	bl	8005b18 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054ea:	609a      	str	r2, [r3, #8]
      break;
 80054ec:	e03c      	b.n	8005568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6818      	ldr	r0, [r3, #0]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	6859      	ldr	r1, [r3, #4]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	461a      	mov	r2, r3
 80054fc:	f000 fa92 	bl	8005a24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2150      	movs	r1, #80	; 0x50
 8005506:	4618      	mov	r0, r3
 8005508:	f000 faeb 	bl	8005ae2 <TIM_ITRx_SetConfig>
      break;
 800550c:	e02c      	b.n	8005568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6818      	ldr	r0, [r3, #0]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	6859      	ldr	r1, [r3, #4]
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	461a      	mov	r2, r3
 800551c:	f000 fab1 	bl	8005a82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2160      	movs	r1, #96	; 0x60
 8005526:	4618      	mov	r0, r3
 8005528:	f000 fadb 	bl	8005ae2 <TIM_ITRx_SetConfig>
      break;
 800552c:	e01c      	b.n	8005568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6818      	ldr	r0, [r3, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6859      	ldr	r1, [r3, #4]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	461a      	mov	r2, r3
 800553c:	f000 fa72 	bl	8005a24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2140      	movs	r1, #64	; 0x40
 8005546:	4618      	mov	r0, r3
 8005548:	f000 facb 	bl	8005ae2 <TIM_ITRx_SetConfig>
      break;
 800554c:	e00c      	b.n	8005568 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4619      	mov	r1, r3
 8005558:	4610      	mov	r0, r2
 800555a:	f000 fac2 	bl	8005ae2 <TIM_ITRx_SetConfig>
      break;
 800555e:	e003      	b.n	8005568 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	73fb      	strb	r3, [r7, #15]
      break;
 8005564:	e000      	b.n	8005568 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005566:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005578:	7bfb      	ldrb	r3, [r7, #15]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
	...

08005584 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a40      	ldr	r2, [pc, #256]	; (8005698 <TIM_Base_SetConfig+0x114>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d013      	beq.n	80055c4 <TIM_Base_SetConfig+0x40>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a2:	d00f      	beq.n	80055c4 <TIM_Base_SetConfig+0x40>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a3d      	ldr	r2, [pc, #244]	; (800569c <TIM_Base_SetConfig+0x118>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d00b      	beq.n	80055c4 <TIM_Base_SetConfig+0x40>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a3c      	ldr	r2, [pc, #240]	; (80056a0 <TIM_Base_SetConfig+0x11c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d007      	beq.n	80055c4 <TIM_Base_SetConfig+0x40>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a3b      	ldr	r2, [pc, #236]	; (80056a4 <TIM_Base_SetConfig+0x120>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d003      	beq.n	80055c4 <TIM_Base_SetConfig+0x40>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a3a      	ldr	r2, [pc, #232]	; (80056a8 <TIM_Base_SetConfig+0x124>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d108      	bne.n	80055d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a2f      	ldr	r2, [pc, #188]	; (8005698 <TIM_Base_SetConfig+0x114>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d02b      	beq.n	8005636 <TIM_Base_SetConfig+0xb2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e4:	d027      	beq.n	8005636 <TIM_Base_SetConfig+0xb2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a2c      	ldr	r2, [pc, #176]	; (800569c <TIM_Base_SetConfig+0x118>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d023      	beq.n	8005636 <TIM_Base_SetConfig+0xb2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a2b      	ldr	r2, [pc, #172]	; (80056a0 <TIM_Base_SetConfig+0x11c>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d01f      	beq.n	8005636 <TIM_Base_SetConfig+0xb2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a2a      	ldr	r2, [pc, #168]	; (80056a4 <TIM_Base_SetConfig+0x120>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d01b      	beq.n	8005636 <TIM_Base_SetConfig+0xb2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a29      	ldr	r2, [pc, #164]	; (80056a8 <TIM_Base_SetConfig+0x124>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d017      	beq.n	8005636 <TIM_Base_SetConfig+0xb2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a28      	ldr	r2, [pc, #160]	; (80056ac <TIM_Base_SetConfig+0x128>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d013      	beq.n	8005636 <TIM_Base_SetConfig+0xb2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a27      	ldr	r2, [pc, #156]	; (80056b0 <TIM_Base_SetConfig+0x12c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00f      	beq.n	8005636 <TIM_Base_SetConfig+0xb2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a26      	ldr	r2, [pc, #152]	; (80056b4 <TIM_Base_SetConfig+0x130>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00b      	beq.n	8005636 <TIM_Base_SetConfig+0xb2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a25      	ldr	r2, [pc, #148]	; (80056b8 <TIM_Base_SetConfig+0x134>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d007      	beq.n	8005636 <TIM_Base_SetConfig+0xb2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a24      	ldr	r2, [pc, #144]	; (80056bc <TIM_Base_SetConfig+0x138>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d003      	beq.n	8005636 <TIM_Base_SetConfig+0xb2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a23      	ldr	r2, [pc, #140]	; (80056c0 <TIM_Base_SetConfig+0x13c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d108      	bne.n	8005648 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800563c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	4313      	orrs	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a0a      	ldr	r2, [pc, #40]	; (8005698 <TIM_Base_SetConfig+0x114>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d003      	beq.n	800567c <TIM_Base_SetConfig+0xf8>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a0c      	ldr	r2, [pc, #48]	; (80056a8 <TIM_Base_SetConfig+0x124>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d103      	bne.n	8005684 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	691a      	ldr	r2, [r3, #16]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	615a      	str	r2, [r3, #20]
}
 800568a:	bf00      	nop
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	40010000 	.word	0x40010000
 800569c:	40000400 	.word	0x40000400
 80056a0:	40000800 	.word	0x40000800
 80056a4:	40000c00 	.word	0x40000c00
 80056a8:	40010400 	.word	0x40010400
 80056ac:	40014000 	.word	0x40014000
 80056b0:	40014400 	.word	0x40014400
 80056b4:	40014800 	.word	0x40014800
 80056b8:	40001800 	.word	0x40001800
 80056bc:	40001c00 	.word	0x40001c00
 80056c0:	40002000 	.word	0x40002000

080056c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	f023 0201 	bic.w	r2, r3, #1
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 0303 	bic.w	r3, r3, #3
 80056fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	4313      	orrs	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f023 0302 	bic.w	r3, r3, #2
 800570c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	4313      	orrs	r3, r2
 8005716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a20      	ldr	r2, [pc, #128]	; (800579c <TIM_OC1_SetConfig+0xd8>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d003      	beq.n	8005728 <TIM_OC1_SetConfig+0x64>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a1f      	ldr	r2, [pc, #124]	; (80057a0 <TIM_OC1_SetConfig+0xdc>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d10c      	bne.n	8005742 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f023 0308 	bic.w	r3, r3, #8
 800572e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	4313      	orrs	r3, r2
 8005738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	f023 0304 	bic.w	r3, r3, #4
 8005740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a15      	ldr	r2, [pc, #84]	; (800579c <TIM_OC1_SetConfig+0xd8>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d003      	beq.n	8005752 <TIM_OC1_SetConfig+0x8e>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a14      	ldr	r2, [pc, #80]	; (80057a0 <TIM_OC1_SetConfig+0xdc>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d111      	bne.n	8005776 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	4313      	orrs	r3, r2
 8005774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	621a      	str	r2, [r3, #32]
}
 8005790:	bf00      	nop
 8005792:	371c      	adds	r7, #28
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	40010000 	.word	0x40010000
 80057a0:	40010400 	.word	0x40010400

080057a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	f023 0210 	bic.w	r2, r3, #16
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	021b      	lsls	r3, r3, #8
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f023 0320 	bic.w	r3, r3, #32
 80057ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a22      	ldr	r2, [pc, #136]	; (8005888 <TIM_OC2_SetConfig+0xe4>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d003      	beq.n	800580c <TIM_OC2_SetConfig+0x68>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a21      	ldr	r2, [pc, #132]	; (800588c <TIM_OC2_SetConfig+0xe8>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d10d      	bne.n	8005828 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005826:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a17      	ldr	r2, [pc, #92]	; (8005888 <TIM_OC2_SetConfig+0xe4>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d003      	beq.n	8005838 <TIM_OC2_SetConfig+0x94>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a16      	ldr	r2, [pc, #88]	; (800588c <TIM_OC2_SetConfig+0xe8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d113      	bne.n	8005860 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800583e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005846:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	4313      	orrs	r3, r2
 8005852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	621a      	str	r2, [r3, #32]
}
 800587a:	bf00      	nop
 800587c:	371c      	adds	r7, #28
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	40010000 	.word	0x40010000
 800588c:	40010400 	.word	0x40010400

08005890 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	69db      	ldr	r3, [r3, #28]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f023 0303 	bic.w	r3, r3, #3
 80058c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	021b      	lsls	r3, r3, #8
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a21      	ldr	r2, [pc, #132]	; (8005970 <TIM_OC3_SetConfig+0xe0>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d003      	beq.n	80058f6 <TIM_OC3_SetConfig+0x66>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a20      	ldr	r2, [pc, #128]	; (8005974 <TIM_OC3_SetConfig+0xe4>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d10d      	bne.n	8005912 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	4313      	orrs	r3, r2
 8005908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a16      	ldr	r2, [pc, #88]	; (8005970 <TIM_OC3_SetConfig+0xe0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d003      	beq.n	8005922 <TIM_OC3_SetConfig+0x92>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a15      	ldr	r2, [pc, #84]	; (8005974 <TIM_OC3_SetConfig+0xe4>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d113      	bne.n	800594a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005928:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005930:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	4313      	orrs	r3, r2
 800593c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	699b      	ldr	r3, [r3, #24]
 8005942:	011b      	lsls	r3, r3, #4
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	4313      	orrs	r3, r2
 8005948:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	693a      	ldr	r2, [r7, #16]
 800594e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	621a      	str	r2, [r3, #32]
}
 8005964:	bf00      	nop
 8005966:	371c      	adds	r7, #28
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	40010000 	.word	0x40010000
 8005974:	40010400 	.word	0x40010400

08005978 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	021b      	lsls	r3, r3, #8
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	031b      	lsls	r3, r3, #12
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a12      	ldr	r2, [pc, #72]	; (8005a1c <TIM_OC4_SetConfig+0xa4>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d003      	beq.n	80059e0 <TIM_OC4_SetConfig+0x68>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a11      	ldr	r2, [pc, #68]	; (8005a20 <TIM_OC4_SetConfig+0xa8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d109      	bne.n	80059f4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	019b      	lsls	r3, r3, #6
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	621a      	str	r2, [r3, #32]
}
 8005a0e:	bf00      	nop
 8005a10:	371c      	adds	r7, #28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	40010000 	.word	0x40010000
 8005a20:	40010400 	.word	0x40010400

08005a24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b087      	sub	sp, #28
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	f023 0201 	bic.w	r2, r3, #1
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	011b      	lsls	r3, r3, #4
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f023 030a 	bic.w	r3, r3, #10
 8005a60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	621a      	str	r2, [r3, #32]
}
 8005a76:	bf00      	nop
 8005a78:	371c      	adds	r7, #28
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b087      	sub	sp, #28
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	60f8      	str	r0, [r7, #12]
 8005a8a:	60b9      	str	r1, [r7, #8]
 8005a8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	f023 0210 	bic.w	r2, r3, #16
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005aac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	031b      	lsls	r3, r3, #12
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005abe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	621a      	str	r2, [r3, #32]
}
 8005ad6:	bf00      	nop
 8005ad8:	371c      	adds	r7, #28
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b085      	sub	sp, #20
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
 8005aea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	f043 0307 	orr.w	r3, r3, #7
 8005b04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	609a      	str	r2, [r3, #8]
}
 8005b0c:	bf00      	nop
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
 8005b24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	021a      	lsls	r2, r3, #8
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	697a      	ldr	r2, [r7, #20]
 8005b4a:	609a      	str	r2, [r3, #8]
}
 8005b4c:	bf00      	nop
 8005b4e:	371c      	adds	r7, #28
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f003 031f 	and.w	r3, r3, #31
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6a1a      	ldr	r2, [r3, #32]
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	43db      	mvns	r3, r3
 8005b7a:	401a      	ands	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6a1a      	ldr	r2, [r3, #32]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f003 031f 	and.w	r3, r3, #31
 8005b8a:	6879      	ldr	r1, [r7, #4]
 8005b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b90:	431a      	orrs	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	621a      	str	r2, [r3, #32]
}
 8005b96:	bf00      	nop
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
	...

08005ba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d101      	bne.n	8005bbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bb8:	2302      	movs	r3, #2
 8005bba:	e05a      	b.n	8005c72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a21      	ldr	r2, [pc, #132]	; (8005c80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d022      	beq.n	8005c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c08:	d01d      	beq.n	8005c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a1d      	ldr	r2, [pc, #116]	; (8005c84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d018      	beq.n	8005c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a1b      	ldr	r2, [pc, #108]	; (8005c88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d013      	beq.n	8005c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a1a      	ldr	r2, [pc, #104]	; (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d00e      	beq.n	8005c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a18      	ldr	r2, [pc, #96]	; (8005c90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d009      	beq.n	8005c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a17      	ldr	r2, [pc, #92]	; (8005c94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d004      	beq.n	8005c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a15      	ldr	r2, [pc, #84]	; (8005c98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d10c      	bne.n	8005c60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68ba      	ldr	r2, [r7, #8]
 8005c5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3714      	adds	r7, #20
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	40010000 	.word	0x40010000
 8005c84:	40000400 	.word	0x40000400
 8005c88:	40000800 	.word	0x40000800
 8005c8c:	40000c00 	.word	0x40000c00
 8005c90:	40010400 	.word	0x40010400
 8005c94:	40014000 	.word	0x40014000
 8005c98:	40001800 	.word	0x40001800

08005c9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e03f      	b.n	8005d2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d106      	bne.n	8005cc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7fc fabc 	bl	8002240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2224      	movs	r2, #36	; 0x24
 8005ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 f829 	bl	8005d38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	691a      	ldr	r2, [r3, #16]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cf4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	695a      	ldr	r2, [r3, #20]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2220      	movs	r2, #32
 8005d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d3c:	b09f      	sub	sp, #124	; 0x7c
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d4e:	68d9      	ldr	r1, [r3, #12]
 8005d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	ea40 0301 	orr.w	r3, r0, r1
 8005d58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	431a      	orrs	r2, r3
 8005d64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d7c:	f021 010c 	bic.w	r1, r1, #12
 8005d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d86:	430b      	orrs	r3, r1
 8005d88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d96:	6999      	ldr	r1, [r3, #24]
 8005d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	ea40 0301 	orr.w	r3, r0, r1
 8005da0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	4bc5      	ldr	r3, [pc, #788]	; (80060bc <UART_SetConfig+0x384>)
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d004      	beq.n	8005db6 <UART_SetConfig+0x7e>
 8005dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	4bc3      	ldr	r3, [pc, #780]	; (80060c0 <UART_SetConfig+0x388>)
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d103      	bne.n	8005dbe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005db6:	f7fe fe27 	bl	8004a08 <HAL_RCC_GetPCLK2Freq>
 8005dba:	6778      	str	r0, [r7, #116]	; 0x74
 8005dbc:	e002      	b.n	8005dc4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dbe:	f7fe fe0f 	bl	80049e0 <HAL_RCC_GetPCLK1Freq>
 8005dc2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dcc:	f040 80b6 	bne.w	8005f3c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dd2:	461c      	mov	r4, r3
 8005dd4:	f04f 0500 	mov.w	r5, #0
 8005dd8:	4622      	mov	r2, r4
 8005dda:	462b      	mov	r3, r5
 8005ddc:	1891      	adds	r1, r2, r2
 8005dde:	6439      	str	r1, [r7, #64]	; 0x40
 8005de0:	415b      	adcs	r3, r3
 8005de2:	647b      	str	r3, [r7, #68]	; 0x44
 8005de4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005de8:	1912      	adds	r2, r2, r4
 8005dea:	eb45 0303 	adc.w	r3, r5, r3
 8005dee:	f04f 0000 	mov.w	r0, #0
 8005df2:	f04f 0100 	mov.w	r1, #0
 8005df6:	00d9      	lsls	r1, r3, #3
 8005df8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005dfc:	00d0      	lsls	r0, r2, #3
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	1911      	adds	r1, r2, r4
 8005e04:	6639      	str	r1, [r7, #96]	; 0x60
 8005e06:	416b      	adcs	r3, r5
 8005e08:	667b      	str	r3, [r7, #100]	; 0x64
 8005e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f04f 0300 	mov.w	r3, #0
 8005e14:	1891      	adds	r1, r2, r2
 8005e16:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e18:	415b      	adcs	r3, r3
 8005e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e20:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e24:	f7fa ff40 	bl	8000ca8 <__aeabi_uldivmod>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	4ba5      	ldr	r3, [pc, #660]	; (80060c4 <UART_SetConfig+0x38c>)
 8005e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e32:	095b      	lsrs	r3, r3, #5
 8005e34:	011e      	lsls	r6, r3, #4
 8005e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e38:	461c      	mov	r4, r3
 8005e3a:	f04f 0500 	mov.w	r5, #0
 8005e3e:	4622      	mov	r2, r4
 8005e40:	462b      	mov	r3, r5
 8005e42:	1891      	adds	r1, r2, r2
 8005e44:	6339      	str	r1, [r7, #48]	; 0x30
 8005e46:	415b      	adcs	r3, r3
 8005e48:	637b      	str	r3, [r7, #52]	; 0x34
 8005e4a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005e4e:	1912      	adds	r2, r2, r4
 8005e50:	eb45 0303 	adc.w	r3, r5, r3
 8005e54:	f04f 0000 	mov.w	r0, #0
 8005e58:	f04f 0100 	mov.w	r1, #0
 8005e5c:	00d9      	lsls	r1, r3, #3
 8005e5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e62:	00d0      	lsls	r0, r2, #3
 8005e64:	4602      	mov	r2, r0
 8005e66:	460b      	mov	r3, r1
 8005e68:	1911      	adds	r1, r2, r4
 8005e6a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e6c:	416b      	adcs	r3, r5
 8005e6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	461a      	mov	r2, r3
 8005e76:	f04f 0300 	mov.w	r3, #0
 8005e7a:	1891      	adds	r1, r2, r2
 8005e7c:	62b9      	str	r1, [r7, #40]	; 0x28
 8005e7e:	415b      	adcs	r3, r3
 8005e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e86:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005e8a:	f7fa ff0d 	bl	8000ca8 <__aeabi_uldivmod>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	4b8c      	ldr	r3, [pc, #560]	; (80060c4 <UART_SetConfig+0x38c>)
 8005e94:	fba3 1302 	umull	r1, r3, r3, r2
 8005e98:	095b      	lsrs	r3, r3, #5
 8005e9a:	2164      	movs	r1, #100	; 0x64
 8005e9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	3332      	adds	r3, #50	; 0x32
 8005ea6:	4a87      	ldr	r2, [pc, #540]	; (80060c4 <UART_SetConfig+0x38c>)
 8005ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8005eac:	095b      	lsrs	r3, r3, #5
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005eb4:	441e      	add	r6, r3
 8005eb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f04f 0100 	mov.w	r1, #0
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	1894      	adds	r4, r2, r2
 8005ec4:	623c      	str	r4, [r7, #32]
 8005ec6:	415b      	adcs	r3, r3
 8005ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ece:	1812      	adds	r2, r2, r0
 8005ed0:	eb41 0303 	adc.w	r3, r1, r3
 8005ed4:	f04f 0400 	mov.w	r4, #0
 8005ed8:	f04f 0500 	mov.w	r5, #0
 8005edc:	00dd      	lsls	r5, r3, #3
 8005ede:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ee2:	00d4      	lsls	r4, r2, #3
 8005ee4:	4622      	mov	r2, r4
 8005ee6:	462b      	mov	r3, r5
 8005ee8:	1814      	adds	r4, r2, r0
 8005eea:	653c      	str	r4, [r7, #80]	; 0x50
 8005eec:	414b      	adcs	r3, r1
 8005eee:	657b      	str	r3, [r7, #84]	; 0x54
 8005ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	f04f 0300 	mov.w	r3, #0
 8005efa:	1891      	adds	r1, r2, r2
 8005efc:	61b9      	str	r1, [r7, #24]
 8005efe:	415b      	adcs	r3, r3
 8005f00:	61fb      	str	r3, [r7, #28]
 8005f02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f06:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005f0a:	f7fa fecd 	bl	8000ca8 <__aeabi_uldivmod>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	4b6c      	ldr	r3, [pc, #432]	; (80060c4 <UART_SetConfig+0x38c>)
 8005f14:	fba3 1302 	umull	r1, r3, r3, r2
 8005f18:	095b      	lsrs	r3, r3, #5
 8005f1a:	2164      	movs	r1, #100	; 0x64
 8005f1c:	fb01 f303 	mul.w	r3, r1, r3
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	3332      	adds	r3, #50	; 0x32
 8005f26:	4a67      	ldr	r2, [pc, #412]	; (80060c4 <UART_SetConfig+0x38c>)
 8005f28:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2c:	095b      	lsrs	r3, r3, #5
 8005f2e:	f003 0207 	and.w	r2, r3, #7
 8005f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4432      	add	r2, r6
 8005f38:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f3a:	e0b9      	b.n	80060b0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f3e:	461c      	mov	r4, r3
 8005f40:	f04f 0500 	mov.w	r5, #0
 8005f44:	4622      	mov	r2, r4
 8005f46:	462b      	mov	r3, r5
 8005f48:	1891      	adds	r1, r2, r2
 8005f4a:	6139      	str	r1, [r7, #16]
 8005f4c:	415b      	adcs	r3, r3
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f54:	1912      	adds	r2, r2, r4
 8005f56:	eb45 0303 	adc.w	r3, r5, r3
 8005f5a:	f04f 0000 	mov.w	r0, #0
 8005f5e:	f04f 0100 	mov.w	r1, #0
 8005f62:	00d9      	lsls	r1, r3, #3
 8005f64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f68:	00d0      	lsls	r0, r2, #3
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	eb12 0804 	adds.w	r8, r2, r4
 8005f72:	eb43 0905 	adc.w	r9, r3, r5
 8005f76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f04f 0100 	mov.w	r1, #0
 8005f80:	f04f 0200 	mov.w	r2, #0
 8005f84:	f04f 0300 	mov.w	r3, #0
 8005f88:	008b      	lsls	r3, r1, #2
 8005f8a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f8e:	0082      	lsls	r2, r0, #2
 8005f90:	4640      	mov	r0, r8
 8005f92:	4649      	mov	r1, r9
 8005f94:	f7fa fe88 	bl	8000ca8 <__aeabi_uldivmod>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	4b49      	ldr	r3, [pc, #292]	; (80060c4 <UART_SetConfig+0x38c>)
 8005f9e:	fba3 2302 	umull	r2, r3, r3, r2
 8005fa2:	095b      	lsrs	r3, r3, #5
 8005fa4:	011e      	lsls	r6, r3, #4
 8005fa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f04f 0100 	mov.w	r1, #0
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	1894      	adds	r4, r2, r2
 8005fb4:	60bc      	str	r4, [r7, #8]
 8005fb6:	415b      	adcs	r3, r3
 8005fb8:	60fb      	str	r3, [r7, #12]
 8005fba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fbe:	1812      	adds	r2, r2, r0
 8005fc0:	eb41 0303 	adc.w	r3, r1, r3
 8005fc4:	f04f 0400 	mov.w	r4, #0
 8005fc8:	f04f 0500 	mov.w	r5, #0
 8005fcc:	00dd      	lsls	r5, r3, #3
 8005fce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005fd2:	00d4      	lsls	r4, r2, #3
 8005fd4:	4622      	mov	r2, r4
 8005fd6:	462b      	mov	r3, r5
 8005fd8:	1814      	adds	r4, r2, r0
 8005fda:	64bc      	str	r4, [r7, #72]	; 0x48
 8005fdc:	414b      	adcs	r3, r1
 8005fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f04f 0100 	mov.w	r1, #0
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	f04f 0300 	mov.w	r3, #0
 8005ff2:	008b      	lsls	r3, r1, #2
 8005ff4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ff8:	0082      	lsls	r2, r0, #2
 8005ffa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005ffe:	f7fa fe53 	bl	8000ca8 <__aeabi_uldivmod>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	4b2f      	ldr	r3, [pc, #188]	; (80060c4 <UART_SetConfig+0x38c>)
 8006008:	fba3 1302 	umull	r1, r3, r3, r2
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	2164      	movs	r1, #100	; 0x64
 8006010:	fb01 f303 	mul.w	r3, r1, r3
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	3332      	adds	r3, #50	; 0x32
 800601a:	4a2a      	ldr	r2, [pc, #168]	; (80060c4 <UART_SetConfig+0x38c>)
 800601c:	fba2 2303 	umull	r2, r3, r2, r3
 8006020:	095b      	lsrs	r3, r3, #5
 8006022:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006026:	441e      	add	r6, r3
 8006028:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800602a:	4618      	mov	r0, r3
 800602c:	f04f 0100 	mov.w	r1, #0
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	1894      	adds	r4, r2, r2
 8006036:	603c      	str	r4, [r7, #0]
 8006038:	415b      	adcs	r3, r3
 800603a:	607b      	str	r3, [r7, #4]
 800603c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006040:	1812      	adds	r2, r2, r0
 8006042:	eb41 0303 	adc.w	r3, r1, r3
 8006046:	f04f 0400 	mov.w	r4, #0
 800604a:	f04f 0500 	mov.w	r5, #0
 800604e:	00dd      	lsls	r5, r3, #3
 8006050:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006054:	00d4      	lsls	r4, r2, #3
 8006056:	4622      	mov	r2, r4
 8006058:	462b      	mov	r3, r5
 800605a:	eb12 0a00 	adds.w	sl, r2, r0
 800605e:	eb43 0b01 	adc.w	fp, r3, r1
 8006062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	4618      	mov	r0, r3
 8006068:	f04f 0100 	mov.w	r1, #0
 800606c:	f04f 0200 	mov.w	r2, #0
 8006070:	f04f 0300 	mov.w	r3, #0
 8006074:	008b      	lsls	r3, r1, #2
 8006076:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800607a:	0082      	lsls	r2, r0, #2
 800607c:	4650      	mov	r0, sl
 800607e:	4659      	mov	r1, fp
 8006080:	f7fa fe12 	bl	8000ca8 <__aeabi_uldivmod>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	4b0e      	ldr	r3, [pc, #56]	; (80060c4 <UART_SetConfig+0x38c>)
 800608a:	fba3 1302 	umull	r1, r3, r3, r2
 800608e:	095b      	lsrs	r3, r3, #5
 8006090:	2164      	movs	r1, #100	; 0x64
 8006092:	fb01 f303 	mul.w	r3, r1, r3
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	011b      	lsls	r3, r3, #4
 800609a:	3332      	adds	r3, #50	; 0x32
 800609c:	4a09      	ldr	r2, [pc, #36]	; (80060c4 <UART_SetConfig+0x38c>)
 800609e:	fba2 2303 	umull	r2, r3, r2, r3
 80060a2:	095b      	lsrs	r3, r3, #5
 80060a4:	f003 020f 	and.w	r2, r3, #15
 80060a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4432      	add	r2, r6
 80060ae:	609a      	str	r2, [r3, #8]
}
 80060b0:	bf00      	nop
 80060b2:	377c      	adds	r7, #124	; 0x7c
 80060b4:	46bd      	mov	sp, r7
 80060b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ba:	bf00      	nop
 80060bc:	40011000 	.word	0x40011000
 80060c0:	40011400 	.word	0x40011400
 80060c4:	51eb851f 	.word	0x51eb851f

080060c8 <__errno>:
 80060c8:	4b01      	ldr	r3, [pc, #4]	; (80060d0 <__errno+0x8>)
 80060ca:	6818      	ldr	r0, [r3, #0]
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	20000014 	.word	0x20000014

080060d4 <__libc_init_array>:
 80060d4:	b570      	push	{r4, r5, r6, lr}
 80060d6:	4d0d      	ldr	r5, [pc, #52]	; (800610c <__libc_init_array+0x38>)
 80060d8:	4c0d      	ldr	r4, [pc, #52]	; (8006110 <__libc_init_array+0x3c>)
 80060da:	1b64      	subs	r4, r4, r5
 80060dc:	10a4      	asrs	r4, r4, #2
 80060de:	2600      	movs	r6, #0
 80060e0:	42a6      	cmp	r6, r4
 80060e2:	d109      	bne.n	80060f8 <__libc_init_array+0x24>
 80060e4:	4d0b      	ldr	r5, [pc, #44]	; (8006114 <__libc_init_array+0x40>)
 80060e6:	4c0c      	ldr	r4, [pc, #48]	; (8006118 <__libc_init_array+0x44>)
 80060e8:	f004 fc46 	bl	800a978 <_init>
 80060ec:	1b64      	subs	r4, r4, r5
 80060ee:	10a4      	asrs	r4, r4, #2
 80060f0:	2600      	movs	r6, #0
 80060f2:	42a6      	cmp	r6, r4
 80060f4:	d105      	bne.n	8006102 <__libc_init_array+0x2e>
 80060f6:	bd70      	pop	{r4, r5, r6, pc}
 80060f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060fc:	4798      	blx	r3
 80060fe:	3601      	adds	r6, #1
 8006100:	e7ee      	b.n	80060e0 <__libc_init_array+0xc>
 8006102:	f855 3b04 	ldr.w	r3, [r5], #4
 8006106:	4798      	blx	r3
 8006108:	3601      	adds	r6, #1
 800610a:	e7f2      	b.n	80060f2 <__libc_init_array+0x1e>
 800610c:	0800b0e4 	.word	0x0800b0e4
 8006110:	0800b0e4 	.word	0x0800b0e4
 8006114:	0800b0e4 	.word	0x0800b0e4
 8006118:	0800b0e8 	.word	0x0800b0e8

0800611c <memset>:
 800611c:	4402      	add	r2, r0
 800611e:	4603      	mov	r3, r0
 8006120:	4293      	cmp	r3, r2
 8006122:	d100      	bne.n	8006126 <memset+0xa>
 8006124:	4770      	bx	lr
 8006126:	f803 1b01 	strb.w	r1, [r3], #1
 800612a:	e7f9      	b.n	8006120 <memset+0x4>

0800612c <__cvt>:
 800612c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006130:	ec55 4b10 	vmov	r4, r5, d0
 8006134:	2d00      	cmp	r5, #0
 8006136:	460e      	mov	r6, r1
 8006138:	4619      	mov	r1, r3
 800613a:	462b      	mov	r3, r5
 800613c:	bfbb      	ittet	lt
 800613e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006142:	461d      	movlt	r5, r3
 8006144:	2300      	movge	r3, #0
 8006146:	232d      	movlt	r3, #45	; 0x2d
 8006148:	700b      	strb	r3, [r1, #0]
 800614a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800614c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006150:	4691      	mov	r9, r2
 8006152:	f023 0820 	bic.w	r8, r3, #32
 8006156:	bfbc      	itt	lt
 8006158:	4622      	movlt	r2, r4
 800615a:	4614      	movlt	r4, r2
 800615c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006160:	d005      	beq.n	800616e <__cvt+0x42>
 8006162:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006166:	d100      	bne.n	800616a <__cvt+0x3e>
 8006168:	3601      	adds	r6, #1
 800616a:	2102      	movs	r1, #2
 800616c:	e000      	b.n	8006170 <__cvt+0x44>
 800616e:	2103      	movs	r1, #3
 8006170:	ab03      	add	r3, sp, #12
 8006172:	9301      	str	r3, [sp, #4]
 8006174:	ab02      	add	r3, sp, #8
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	ec45 4b10 	vmov	d0, r4, r5
 800617c:	4653      	mov	r3, sl
 800617e:	4632      	mov	r2, r6
 8006180:	f001 fdb6 	bl	8007cf0 <_dtoa_r>
 8006184:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006188:	4607      	mov	r7, r0
 800618a:	d102      	bne.n	8006192 <__cvt+0x66>
 800618c:	f019 0f01 	tst.w	r9, #1
 8006190:	d022      	beq.n	80061d8 <__cvt+0xac>
 8006192:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006196:	eb07 0906 	add.w	r9, r7, r6
 800619a:	d110      	bne.n	80061be <__cvt+0x92>
 800619c:	783b      	ldrb	r3, [r7, #0]
 800619e:	2b30      	cmp	r3, #48	; 0x30
 80061a0:	d10a      	bne.n	80061b8 <__cvt+0x8c>
 80061a2:	2200      	movs	r2, #0
 80061a4:	2300      	movs	r3, #0
 80061a6:	4620      	mov	r0, r4
 80061a8:	4629      	mov	r1, r5
 80061aa:	f7fa fc9d 	bl	8000ae8 <__aeabi_dcmpeq>
 80061ae:	b918      	cbnz	r0, 80061b8 <__cvt+0x8c>
 80061b0:	f1c6 0601 	rsb	r6, r6, #1
 80061b4:	f8ca 6000 	str.w	r6, [sl]
 80061b8:	f8da 3000 	ldr.w	r3, [sl]
 80061bc:	4499      	add	r9, r3
 80061be:	2200      	movs	r2, #0
 80061c0:	2300      	movs	r3, #0
 80061c2:	4620      	mov	r0, r4
 80061c4:	4629      	mov	r1, r5
 80061c6:	f7fa fc8f 	bl	8000ae8 <__aeabi_dcmpeq>
 80061ca:	b108      	cbz	r0, 80061d0 <__cvt+0xa4>
 80061cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80061d0:	2230      	movs	r2, #48	; 0x30
 80061d2:	9b03      	ldr	r3, [sp, #12]
 80061d4:	454b      	cmp	r3, r9
 80061d6:	d307      	bcc.n	80061e8 <__cvt+0xbc>
 80061d8:	9b03      	ldr	r3, [sp, #12]
 80061da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061dc:	1bdb      	subs	r3, r3, r7
 80061de:	4638      	mov	r0, r7
 80061e0:	6013      	str	r3, [r2, #0]
 80061e2:	b004      	add	sp, #16
 80061e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061e8:	1c59      	adds	r1, r3, #1
 80061ea:	9103      	str	r1, [sp, #12]
 80061ec:	701a      	strb	r2, [r3, #0]
 80061ee:	e7f0      	b.n	80061d2 <__cvt+0xa6>

080061f0 <__exponent>:
 80061f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061f2:	4603      	mov	r3, r0
 80061f4:	2900      	cmp	r1, #0
 80061f6:	bfb8      	it	lt
 80061f8:	4249      	neglt	r1, r1
 80061fa:	f803 2b02 	strb.w	r2, [r3], #2
 80061fe:	bfb4      	ite	lt
 8006200:	222d      	movlt	r2, #45	; 0x2d
 8006202:	222b      	movge	r2, #43	; 0x2b
 8006204:	2909      	cmp	r1, #9
 8006206:	7042      	strb	r2, [r0, #1]
 8006208:	dd2a      	ble.n	8006260 <__exponent+0x70>
 800620a:	f10d 0407 	add.w	r4, sp, #7
 800620e:	46a4      	mov	ip, r4
 8006210:	270a      	movs	r7, #10
 8006212:	46a6      	mov	lr, r4
 8006214:	460a      	mov	r2, r1
 8006216:	fb91 f6f7 	sdiv	r6, r1, r7
 800621a:	fb07 1516 	mls	r5, r7, r6, r1
 800621e:	3530      	adds	r5, #48	; 0x30
 8006220:	2a63      	cmp	r2, #99	; 0x63
 8006222:	f104 34ff 	add.w	r4, r4, #4294967295
 8006226:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800622a:	4631      	mov	r1, r6
 800622c:	dcf1      	bgt.n	8006212 <__exponent+0x22>
 800622e:	3130      	adds	r1, #48	; 0x30
 8006230:	f1ae 0502 	sub.w	r5, lr, #2
 8006234:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006238:	1c44      	adds	r4, r0, #1
 800623a:	4629      	mov	r1, r5
 800623c:	4561      	cmp	r1, ip
 800623e:	d30a      	bcc.n	8006256 <__exponent+0x66>
 8006240:	f10d 0209 	add.w	r2, sp, #9
 8006244:	eba2 020e 	sub.w	r2, r2, lr
 8006248:	4565      	cmp	r5, ip
 800624a:	bf88      	it	hi
 800624c:	2200      	movhi	r2, #0
 800624e:	4413      	add	r3, r2
 8006250:	1a18      	subs	r0, r3, r0
 8006252:	b003      	add	sp, #12
 8006254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006256:	f811 2b01 	ldrb.w	r2, [r1], #1
 800625a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800625e:	e7ed      	b.n	800623c <__exponent+0x4c>
 8006260:	2330      	movs	r3, #48	; 0x30
 8006262:	3130      	adds	r1, #48	; 0x30
 8006264:	7083      	strb	r3, [r0, #2]
 8006266:	70c1      	strb	r1, [r0, #3]
 8006268:	1d03      	adds	r3, r0, #4
 800626a:	e7f1      	b.n	8006250 <__exponent+0x60>

0800626c <_printf_float>:
 800626c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006270:	ed2d 8b02 	vpush	{d8}
 8006274:	b08d      	sub	sp, #52	; 0x34
 8006276:	460c      	mov	r4, r1
 8006278:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800627c:	4616      	mov	r6, r2
 800627e:	461f      	mov	r7, r3
 8006280:	4605      	mov	r5, r0
 8006282:	f002 fe91 	bl	8008fa8 <_localeconv_r>
 8006286:	f8d0 a000 	ldr.w	sl, [r0]
 800628a:	4650      	mov	r0, sl
 800628c:	f7f9 ffb0 	bl	80001f0 <strlen>
 8006290:	2300      	movs	r3, #0
 8006292:	930a      	str	r3, [sp, #40]	; 0x28
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	9305      	str	r3, [sp, #20]
 8006298:	f8d8 3000 	ldr.w	r3, [r8]
 800629c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80062a0:	3307      	adds	r3, #7
 80062a2:	f023 0307 	bic.w	r3, r3, #7
 80062a6:	f103 0208 	add.w	r2, r3, #8
 80062aa:	f8c8 2000 	str.w	r2, [r8]
 80062ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80062b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80062ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80062be:	9307      	str	r3, [sp, #28]
 80062c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80062c4:	ee08 0a10 	vmov	s16, r0
 80062c8:	4b9f      	ldr	r3, [pc, #636]	; (8006548 <_printf_float+0x2dc>)
 80062ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062ce:	f04f 32ff 	mov.w	r2, #4294967295
 80062d2:	f7fa fc3b 	bl	8000b4c <__aeabi_dcmpun>
 80062d6:	bb88      	cbnz	r0, 800633c <_printf_float+0xd0>
 80062d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062dc:	4b9a      	ldr	r3, [pc, #616]	; (8006548 <_printf_float+0x2dc>)
 80062de:	f04f 32ff 	mov.w	r2, #4294967295
 80062e2:	f7fa fc15 	bl	8000b10 <__aeabi_dcmple>
 80062e6:	bb48      	cbnz	r0, 800633c <_printf_float+0xd0>
 80062e8:	2200      	movs	r2, #0
 80062ea:	2300      	movs	r3, #0
 80062ec:	4640      	mov	r0, r8
 80062ee:	4649      	mov	r1, r9
 80062f0:	f7fa fc04 	bl	8000afc <__aeabi_dcmplt>
 80062f4:	b110      	cbz	r0, 80062fc <_printf_float+0x90>
 80062f6:	232d      	movs	r3, #45	; 0x2d
 80062f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062fc:	4b93      	ldr	r3, [pc, #588]	; (800654c <_printf_float+0x2e0>)
 80062fe:	4894      	ldr	r0, [pc, #592]	; (8006550 <_printf_float+0x2e4>)
 8006300:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006304:	bf94      	ite	ls
 8006306:	4698      	movls	r8, r3
 8006308:	4680      	movhi	r8, r0
 800630a:	2303      	movs	r3, #3
 800630c:	6123      	str	r3, [r4, #16]
 800630e:	9b05      	ldr	r3, [sp, #20]
 8006310:	f023 0204 	bic.w	r2, r3, #4
 8006314:	6022      	str	r2, [r4, #0]
 8006316:	f04f 0900 	mov.w	r9, #0
 800631a:	9700      	str	r7, [sp, #0]
 800631c:	4633      	mov	r3, r6
 800631e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006320:	4621      	mov	r1, r4
 8006322:	4628      	mov	r0, r5
 8006324:	f000 f9d8 	bl	80066d8 <_printf_common>
 8006328:	3001      	adds	r0, #1
 800632a:	f040 8090 	bne.w	800644e <_printf_float+0x1e2>
 800632e:	f04f 30ff 	mov.w	r0, #4294967295
 8006332:	b00d      	add	sp, #52	; 0x34
 8006334:	ecbd 8b02 	vpop	{d8}
 8006338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800633c:	4642      	mov	r2, r8
 800633e:	464b      	mov	r3, r9
 8006340:	4640      	mov	r0, r8
 8006342:	4649      	mov	r1, r9
 8006344:	f7fa fc02 	bl	8000b4c <__aeabi_dcmpun>
 8006348:	b140      	cbz	r0, 800635c <_printf_float+0xf0>
 800634a:	464b      	mov	r3, r9
 800634c:	2b00      	cmp	r3, #0
 800634e:	bfbc      	itt	lt
 8006350:	232d      	movlt	r3, #45	; 0x2d
 8006352:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006356:	487f      	ldr	r0, [pc, #508]	; (8006554 <_printf_float+0x2e8>)
 8006358:	4b7f      	ldr	r3, [pc, #508]	; (8006558 <_printf_float+0x2ec>)
 800635a:	e7d1      	b.n	8006300 <_printf_float+0x94>
 800635c:	6863      	ldr	r3, [r4, #4]
 800635e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006362:	9206      	str	r2, [sp, #24]
 8006364:	1c5a      	adds	r2, r3, #1
 8006366:	d13f      	bne.n	80063e8 <_printf_float+0x17c>
 8006368:	2306      	movs	r3, #6
 800636a:	6063      	str	r3, [r4, #4]
 800636c:	9b05      	ldr	r3, [sp, #20]
 800636e:	6861      	ldr	r1, [r4, #4]
 8006370:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006374:	2300      	movs	r3, #0
 8006376:	9303      	str	r3, [sp, #12]
 8006378:	ab0a      	add	r3, sp, #40	; 0x28
 800637a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800637e:	ab09      	add	r3, sp, #36	; 0x24
 8006380:	ec49 8b10 	vmov	d0, r8, r9
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	6022      	str	r2, [r4, #0]
 8006388:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800638c:	4628      	mov	r0, r5
 800638e:	f7ff fecd 	bl	800612c <__cvt>
 8006392:	9b06      	ldr	r3, [sp, #24]
 8006394:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006396:	2b47      	cmp	r3, #71	; 0x47
 8006398:	4680      	mov	r8, r0
 800639a:	d108      	bne.n	80063ae <_printf_float+0x142>
 800639c:	1cc8      	adds	r0, r1, #3
 800639e:	db02      	blt.n	80063a6 <_printf_float+0x13a>
 80063a0:	6863      	ldr	r3, [r4, #4]
 80063a2:	4299      	cmp	r1, r3
 80063a4:	dd41      	ble.n	800642a <_printf_float+0x1be>
 80063a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80063aa:	fa5f fb8b 	uxtb.w	fp, fp
 80063ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80063b2:	d820      	bhi.n	80063f6 <_printf_float+0x18a>
 80063b4:	3901      	subs	r1, #1
 80063b6:	465a      	mov	r2, fp
 80063b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80063bc:	9109      	str	r1, [sp, #36]	; 0x24
 80063be:	f7ff ff17 	bl	80061f0 <__exponent>
 80063c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063c4:	1813      	adds	r3, r2, r0
 80063c6:	2a01      	cmp	r2, #1
 80063c8:	4681      	mov	r9, r0
 80063ca:	6123      	str	r3, [r4, #16]
 80063cc:	dc02      	bgt.n	80063d4 <_printf_float+0x168>
 80063ce:	6822      	ldr	r2, [r4, #0]
 80063d0:	07d2      	lsls	r2, r2, #31
 80063d2:	d501      	bpl.n	80063d8 <_printf_float+0x16c>
 80063d4:	3301      	adds	r3, #1
 80063d6:	6123      	str	r3, [r4, #16]
 80063d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d09c      	beq.n	800631a <_printf_float+0xae>
 80063e0:	232d      	movs	r3, #45	; 0x2d
 80063e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063e6:	e798      	b.n	800631a <_printf_float+0xae>
 80063e8:	9a06      	ldr	r2, [sp, #24]
 80063ea:	2a47      	cmp	r2, #71	; 0x47
 80063ec:	d1be      	bne.n	800636c <_printf_float+0x100>
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1bc      	bne.n	800636c <_printf_float+0x100>
 80063f2:	2301      	movs	r3, #1
 80063f4:	e7b9      	b.n	800636a <_printf_float+0xfe>
 80063f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80063fa:	d118      	bne.n	800642e <_printf_float+0x1c2>
 80063fc:	2900      	cmp	r1, #0
 80063fe:	6863      	ldr	r3, [r4, #4]
 8006400:	dd0b      	ble.n	800641a <_printf_float+0x1ae>
 8006402:	6121      	str	r1, [r4, #16]
 8006404:	b913      	cbnz	r3, 800640c <_printf_float+0x1a0>
 8006406:	6822      	ldr	r2, [r4, #0]
 8006408:	07d0      	lsls	r0, r2, #31
 800640a:	d502      	bpl.n	8006412 <_printf_float+0x1a6>
 800640c:	3301      	adds	r3, #1
 800640e:	440b      	add	r3, r1
 8006410:	6123      	str	r3, [r4, #16]
 8006412:	65a1      	str	r1, [r4, #88]	; 0x58
 8006414:	f04f 0900 	mov.w	r9, #0
 8006418:	e7de      	b.n	80063d8 <_printf_float+0x16c>
 800641a:	b913      	cbnz	r3, 8006422 <_printf_float+0x1b6>
 800641c:	6822      	ldr	r2, [r4, #0]
 800641e:	07d2      	lsls	r2, r2, #31
 8006420:	d501      	bpl.n	8006426 <_printf_float+0x1ba>
 8006422:	3302      	adds	r3, #2
 8006424:	e7f4      	b.n	8006410 <_printf_float+0x1a4>
 8006426:	2301      	movs	r3, #1
 8006428:	e7f2      	b.n	8006410 <_printf_float+0x1a4>
 800642a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800642e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006430:	4299      	cmp	r1, r3
 8006432:	db05      	blt.n	8006440 <_printf_float+0x1d4>
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	6121      	str	r1, [r4, #16]
 8006438:	07d8      	lsls	r0, r3, #31
 800643a:	d5ea      	bpl.n	8006412 <_printf_float+0x1a6>
 800643c:	1c4b      	adds	r3, r1, #1
 800643e:	e7e7      	b.n	8006410 <_printf_float+0x1a4>
 8006440:	2900      	cmp	r1, #0
 8006442:	bfd4      	ite	le
 8006444:	f1c1 0202 	rsble	r2, r1, #2
 8006448:	2201      	movgt	r2, #1
 800644a:	4413      	add	r3, r2
 800644c:	e7e0      	b.n	8006410 <_printf_float+0x1a4>
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	055a      	lsls	r2, r3, #21
 8006452:	d407      	bmi.n	8006464 <_printf_float+0x1f8>
 8006454:	6923      	ldr	r3, [r4, #16]
 8006456:	4642      	mov	r2, r8
 8006458:	4631      	mov	r1, r6
 800645a:	4628      	mov	r0, r5
 800645c:	47b8      	blx	r7
 800645e:	3001      	adds	r0, #1
 8006460:	d12c      	bne.n	80064bc <_printf_float+0x250>
 8006462:	e764      	b.n	800632e <_printf_float+0xc2>
 8006464:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006468:	f240 80e0 	bls.w	800662c <_printf_float+0x3c0>
 800646c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006470:	2200      	movs	r2, #0
 8006472:	2300      	movs	r3, #0
 8006474:	f7fa fb38 	bl	8000ae8 <__aeabi_dcmpeq>
 8006478:	2800      	cmp	r0, #0
 800647a:	d034      	beq.n	80064e6 <_printf_float+0x27a>
 800647c:	4a37      	ldr	r2, [pc, #220]	; (800655c <_printf_float+0x2f0>)
 800647e:	2301      	movs	r3, #1
 8006480:	4631      	mov	r1, r6
 8006482:	4628      	mov	r0, r5
 8006484:	47b8      	blx	r7
 8006486:	3001      	adds	r0, #1
 8006488:	f43f af51 	beq.w	800632e <_printf_float+0xc2>
 800648c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006490:	429a      	cmp	r2, r3
 8006492:	db02      	blt.n	800649a <_printf_float+0x22e>
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	07d8      	lsls	r0, r3, #31
 8006498:	d510      	bpl.n	80064bc <_printf_float+0x250>
 800649a:	ee18 3a10 	vmov	r3, s16
 800649e:	4652      	mov	r2, sl
 80064a0:	4631      	mov	r1, r6
 80064a2:	4628      	mov	r0, r5
 80064a4:	47b8      	blx	r7
 80064a6:	3001      	adds	r0, #1
 80064a8:	f43f af41 	beq.w	800632e <_printf_float+0xc2>
 80064ac:	f04f 0800 	mov.w	r8, #0
 80064b0:	f104 091a 	add.w	r9, r4, #26
 80064b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064b6:	3b01      	subs	r3, #1
 80064b8:	4543      	cmp	r3, r8
 80064ba:	dc09      	bgt.n	80064d0 <_printf_float+0x264>
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	079b      	lsls	r3, r3, #30
 80064c0:	f100 8105 	bmi.w	80066ce <_printf_float+0x462>
 80064c4:	68e0      	ldr	r0, [r4, #12]
 80064c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064c8:	4298      	cmp	r0, r3
 80064ca:	bfb8      	it	lt
 80064cc:	4618      	movlt	r0, r3
 80064ce:	e730      	b.n	8006332 <_printf_float+0xc6>
 80064d0:	2301      	movs	r3, #1
 80064d2:	464a      	mov	r2, r9
 80064d4:	4631      	mov	r1, r6
 80064d6:	4628      	mov	r0, r5
 80064d8:	47b8      	blx	r7
 80064da:	3001      	adds	r0, #1
 80064dc:	f43f af27 	beq.w	800632e <_printf_float+0xc2>
 80064e0:	f108 0801 	add.w	r8, r8, #1
 80064e4:	e7e6      	b.n	80064b4 <_printf_float+0x248>
 80064e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	dc39      	bgt.n	8006560 <_printf_float+0x2f4>
 80064ec:	4a1b      	ldr	r2, [pc, #108]	; (800655c <_printf_float+0x2f0>)
 80064ee:	2301      	movs	r3, #1
 80064f0:	4631      	mov	r1, r6
 80064f2:	4628      	mov	r0, r5
 80064f4:	47b8      	blx	r7
 80064f6:	3001      	adds	r0, #1
 80064f8:	f43f af19 	beq.w	800632e <_printf_float+0xc2>
 80064fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006500:	4313      	orrs	r3, r2
 8006502:	d102      	bne.n	800650a <_printf_float+0x29e>
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	07d9      	lsls	r1, r3, #31
 8006508:	d5d8      	bpl.n	80064bc <_printf_float+0x250>
 800650a:	ee18 3a10 	vmov	r3, s16
 800650e:	4652      	mov	r2, sl
 8006510:	4631      	mov	r1, r6
 8006512:	4628      	mov	r0, r5
 8006514:	47b8      	blx	r7
 8006516:	3001      	adds	r0, #1
 8006518:	f43f af09 	beq.w	800632e <_printf_float+0xc2>
 800651c:	f04f 0900 	mov.w	r9, #0
 8006520:	f104 0a1a 	add.w	sl, r4, #26
 8006524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006526:	425b      	negs	r3, r3
 8006528:	454b      	cmp	r3, r9
 800652a:	dc01      	bgt.n	8006530 <_printf_float+0x2c4>
 800652c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800652e:	e792      	b.n	8006456 <_printf_float+0x1ea>
 8006530:	2301      	movs	r3, #1
 8006532:	4652      	mov	r2, sl
 8006534:	4631      	mov	r1, r6
 8006536:	4628      	mov	r0, r5
 8006538:	47b8      	blx	r7
 800653a:	3001      	adds	r0, #1
 800653c:	f43f aef7 	beq.w	800632e <_printf_float+0xc2>
 8006540:	f109 0901 	add.w	r9, r9, #1
 8006544:	e7ee      	b.n	8006524 <_printf_float+0x2b8>
 8006546:	bf00      	nop
 8006548:	7fefffff 	.word	0x7fefffff
 800654c:	0800ac2c 	.word	0x0800ac2c
 8006550:	0800ac30 	.word	0x0800ac30
 8006554:	0800ac38 	.word	0x0800ac38
 8006558:	0800ac34 	.word	0x0800ac34
 800655c:	0800ac3c 	.word	0x0800ac3c
 8006560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006562:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006564:	429a      	cmp	r2, r3
 8006566:	bfa8      	it	ge
 8006568:	461a      	movge	r2, r3
 800656a:	2a00      	cmp	r2, #0
 800656c:	4691      	mov	r9, r2
 800656e:	dc37      	bgt.n	80065e0 <_printf_float+0x374>
 8006570:	f04f 0b00 	mov.w	fp, #0
 8006574:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006578:	f104 021a 	add.w	r2, r4, #26
 800657c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800657e:	9305      	str	r3, [sp, #20]
 8006580:	eba3 0309 	sub.w	r3, r3, r9
 8006584:	455b      	cmp	r3, fp
 8006586:	dc33      	bgt.n	80065f0 <_printf_float+0x384>
 8006588:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800658c:	429a      	cmp	r2, r3
 800658e:	db3b      	blt.n	8006608 <_printf_float+0x39c>
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	07da      	lsls	r2, r3, #31
 8006594:	d438      	bmi.n	8006608 <_printf_float+0x39c>
 8006596:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006598:	9b05      	ldr	r3, [sp, #20]
 800659a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	eba2 0901 	sub.w	r9, r2, r1
 80065a2:	4599      	cmp	r9, r3
 80065a4:	bfa8      	it	ge
 80065a6:	4699      	movge	r9, r3
 80065a8:	f1b9 0f00 	cmp.w	r9, #0
 80065ac:	dc35      	bgt.n	800661a <_printf_float+0x3ae>
 80065ae:	f04f 0800 	mov.w	r8, #0
 80065b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065b6:	f104 0a1a 	add.w	sl, r4, #26
 80065ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065be:	1a9b      	subs	r3, r3, r2
 80065c0:	eba3 0309 	sub.w	r3, r3, r9
 80065c4:	4543      	cmp	r3, r8
 80065c6:	f77f af79 	ble.w	80064bc <_printf_float+0x250>
 80065ca:	2301      	movs	r3, #1
 80065cc:	4652      	mov	r2, sl
 80065ce:	4631      	mov	r1, r6
 80065d0:	4628      	mov	r0, r5
 80065d2:	47b8      	blx	r7
 80065d4:	3001      	adds	r0, #1
 80065d6:	f43f aeaa 	beq.w	800632e <_printf_float+0xc2>
 80065da:	f108 0801 	add.w	r8, r8, #1
 80065de:	e7ec      	b.n	80065ba <_printf_float+0x34e>
 80065e0:	4613      	mov	r3, r2
 80065e2:	4631      	mov	r1, r6
 80065e4:	4642      	mov	r2, r8
 80065e6:	4628      	mov	r0, r5
 80065e8:	47b8      	blx	r7
 80065ea:	3001      	adds	r0, #1
 80065ec:	d1c0      	bne.n	8006570 <_printf_float+0x304>
 80065ee:	e69e      	b.n	800632e <_printf_float+0xc2>
 80065f0:	2301      	movs	r3, #1
 80065f2:	4631      	mov	r1, r6
 80065f4:	4628      	mov	r0, r5
 80065f6:	9205      	str	r2, [sp, #20]
 80065f8:	47b8      	blx	r7
 80065fa:	3001      	adds	r0, #1
 80065fc:	f43f ae97 	beq.w	800632e <_printf_float+0xc2>
 8006600:	9a05      	ldr	r2, [sp, #20]
 8006602:	f10b 0b01 	add.w	fp, fp, #1
 8006606:	e7b9      	b.n	800657c <_printf_float+0x310>
 8006608:	ee18 3a10 	vmov	r3, s16
 800660c:	4652      	mov	r2, sl
 800660e:	4631      	mov	r1, r6
 8006610:	4628      	mov	r0, r5
 8006612:	47b8      	blx	r7
 8006614:	3001      	adds	r0, #1
 8006616:	d1be      	bne.n	8006596 <_printf_float+0x32a>
 8006618:	e689      	b.n	800632e <_printf_float+0xc2>
 800661a:	9a05      	ldr	r2, [sp, #20]
 800661c:	464b      	mov	r3, r9
 800661e:	4442      	add	r2, r8
 8006620:	4631      	mov	r1, r6
 8006622:	4628      	mov	r0, r5
 8006624:	47b8      	blx	r7
 8006626:	3001      	adds	r0, #1
 8006628:	d1c1      	bne.n	80065ae <_printf_float+0x342>
 800662a:	e680      	b.n	800632e <_printf_float+0xc2>
 800662c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800662e:	2a01      	cmp	r2, #1
 8006630:	dc01      	bgt.n	8006636 <_printf_float+0x3ca>
 8006632:	07db      	lsls	r3, r3, #31
 8006634:	d538      	bpl.n	80066a8 <_printf_float+0x43c>
 8006636:	2301      	movs	r3, #1
 8006638:	4642      	mov	r2, r8
 800663a:	4631      	mov	r1, r6
 800663c:	4628      	mov	r0, r5
 800663e:	47b8      	blx	r7
 8006640:	3001      	adds	r0, #1
 8006642:	f43f ae74 	beq.w	800632e <_printf_float+0xc2>
 8006646:	ee18 3a10 	vmov	r3, s16
 800664a:	4652      	mov	r2, sl
 800664c:	4631      	mov	r1, r6
 800664e:	4628      	mov	r0, r5
 8006650:	47b8      	blx	r7
 8006652:	3001      	adds	r0, #1
 8006654:	f43f ae6b 	beq.w	800632e <_printf_float+0xc2>
 8006658:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800665c:	2200      	movs	r2, #0
 800665e:	2300      	movs	r3, #0
 8006660:	f7fa fa42 	bl	8000ae8 <__aeabi_dcmpeq>
 8006664:	b9d8      	cbnz	r0, 800669e <_printf_float+0x432>
 8006666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006668:	f108 0201 	add.w	r2, r8, #1
 800666c:	3b01      	subs	r3, #1
 800666e:	4631      	mov	r1, r6
 8006670:	4628      	mov	r0, r5
 8006672:	47b8      	blx	r7
 8006674:	3001      	adds	r0, #1
 8006676:	d10e      	bne.n	8006696 <_printf_float+0x42a>
 8006678:	e659      	b.n	800632e <_printf_float+0xc2>
 800667a:	2301      	movs	r3, #1
 800667c:	4652      	mov	r2, sl
 800667e:	4631      	mov	r1, r6
 8006680:	4628      	mov	r0, r5
 8006682:	47b8      	blx	r7
 8006684:	3001      	adds	r0, #1
 8006686:	f43f ae52 	beq.w	800632e <_printf_float+0xc2>
 800668a:	f108 0801 	add.w	r8, r8, #1
 800668e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006690:	3b01      	subs	r3, #1
 8006692:	4543      	cmp	r3, r8
 8006694:	dcf1      	bgt.n	800667a <_printf_float+0x40e>
 8006696:	464b      	mov	r3, r9
 8006698:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800669c:	e6dc      	b.n	8006458 <_printf_float+0x1ec>
 800669e:	f04f 0800 	mov.w	r8, #0
 80066a2:	f104 0a1a 	add.w	sl, r4, #26
 80066a6:	e7f2      	b.n	800668e <_printf_float+0x422>
 80066a8:	2301      	movs	r3, #1
 80066aa:	4642      	mov	r2, r8
 80066ac:	e7df      	b.n	800666e <_printf_float+0x402>
 80066ae:	2301      	movs	r3, #1
 80066b0:	464a      	mov	r2, r9
 80066b2:	4631      	mov	r1, r6
 80066b4:	4628      	mov	r0, r5
 80066b6:	47b8      	blx	r7
 80066b8:	3001      	adds	r0, #1
 80066ba:	f43f ae38 	beq.w	800632e <_printf_float+0xc2>
 80066be:	f108 0801 	add.w	r8, r8, #1
 80066c2:	68e3      	ldr	r3, [r4, #12]
 80066c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066c6:	1a5b      	subs	r3, r3, r1
 80066c8:	4543      	cmp	r3, r8
 80066ca:	dcf0      	bgt.n	80066ae <_printf_float+0x442>
 80066cc:	e6fa      	b.n	80064c4 <_printf_float+0x258>
 80066ce:	f04f 0800 	mov.w	r8, #0
 80066d2:	f104 0919 	add.w	r9, r4, #25
 80066d6:	e7f4      	b.n	80066c2 <_printf_float+0x456>

080066d8 <_printf_common>:
 80066d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066dc:	4616      	mov	r6, r2
 80066de:	4699      	mov	r9, r3
 80066e0:	688a      	ldr	r2, [r1, #8]
 80066e2:	690b      	ldr	r3, [r1, #16]
 80066e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066e8:	4293      	cmp	r3, r2
 80066ea:	bfb8      	it	lt
 80066ec:	4613      	movlt	r3, r2
 80066ee:	6033      	str	r3, [r6, #0]
 80066f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066f4:	4607      	mov	r7, r0
 80066f6:	460c      	mov	r4, r1
 80066f8:	b10a      	cbz	r2, 80066fe <_printf_common+0x26>
 80066fa:	3301      	adds	r3, #1
 80066fc:	6033      	str	r3, [r6, #0]
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	0699      	lsls	r1, r3, #26
 8006702:	bf42      	ittt	mi
 8006704:	6833      	ldrmi	r3, [r6, #0]
 8006706:	3302      	addmi	r3, #2
 8006708:	6033      	strmi	r3, [r6, #0]
 800670a:	6825      	ldr	r5, [r4, #0]
 800670c:	f015 0506 	ands.w	r5, r5, #6
 8006710:	d106      	bne.n	8006720 <_printf_common+0x48>
 8006712:	f104 0a19 	add.w	sl, r4, #25
 8006716:	68e3      	ldr	r3, [r4, #12]
 8006718:	6832      	ldr	r2, [r6, #0]
 800671a:	1a9b      	subs	r3, r3, r2
 800671c:	42ab      	cmp	r3, r5
 800671e:	dc26      	bgt.n	800676e <_printf_common+0x96>
 8006720:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006724:	1e13      	subs	r3, r2, #0
 8006726:	6822      	ldr	r2, [r4, #0]
 8006728:	bf18      	it	ne
 800672a:	2301      	movne	r3, #1
 800672c:	0692      	lsls	r2, r2, #26
 800672e:	d42b      	bmi.n	8006788 <_printf_common+0xb0>
 8006730:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006734:	4649      	mov	r1, r9
 8006736:	4638      	mov	r0, r7
 8006738:	47c0      	blx	r8
 800673a:	3001      	adds	r0, #1
 800673c:	d01e      	beq.n	800677c <_printf_common+0xa4>
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	68e5      	ldr	r5, [r4, #12]
 8006742:	6832      	ldr	r2, [r6, #0]
 8006744:	f003 0306 	and.w	r3, r3, #6
 8006748:	2b04      	cmp	r3, #4
 800674a:	bf08      	it	eq
 800674c:	1aad      	subeq	r5, r5, r2
 800674e:	68a3      	ldr	r3, [r4, #8]
 8006750:	6922      	ldr	r2, [r4, #16]
 8006752:	bf0c      	ite	eq
 8006754:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006758:	2500      	movne	r5, #0
 800675a:	4293      	cmp	r3, r2
 800675c:	bfc4      	itt	gt
 800675e:	1a9b      	subgt	r3, r3, r2
 8006760:	18ed      	addgt	r5, r5, r3
 8006762:	2600      	movs	r6, #0
 8006764:	341a      	adds	r4, #26
 8006766:	42b5      	cmp	r5, r6
 8006768:	d11a      	bne.n	80067a0 <_printf_common+0xc8>
 800676a:	2000      	movs	r0, #0
 800676c:	e008      	b.n	8006780 <_printf_common+0xa8>
 800676e:	2301      	movs	r3, #1
 8006770:	4652      	mov	r2, sl
 8006772:	4649      	mov	r1, r9
 8006774:	4638      	mov	r0, r7
 8006776:	47c0      	blx	r8
 8006778:	3001      	adds	r0, #1
 800677a:	d103      	bne.n	8006784 <_printf_common+0xac>
 800677c:	f04f 30ff 	mov.w	r0, #4294967295
 8006780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006784:	3501      	adds	r5, #1
 8006786:	e7c6      	b.n	8006716 <_printf_common+0x3e>
 8006788:	18e1      	adds	r1, r4, r3
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	2030      	movs	r0, #48	; 0x30
 800678e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006792:	4422      	add	r2, r4
 8006794:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006798:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800679c:	3302      	adds	r3, #2
 800679e:	e7c7      	b.n	8006730 <_printf_common+0x58>
 80067a0:	2301      	movs	r3, #1
 80067a2:	4622      	mov	r2, r4
 80067a4:	4649      	mov	r1, r9
 80067a6:	4638      	mov	r0, r7
 80067a8:	47c0      	blx	r8
 80067aa:	3001      	adds	r0, #1
 80067ac:	d0e6      	beq.n	800677c <_printf_common+0xa4>
 80067ae:	3601      	adds	r6, #1
 80067b0:	e7d9      	b.n	8006766 <_printf_common+0x8e>
	...

080067b4 <_printf_i>:
 80067b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067b8:	460c      	mov	r4, r1
 80067ba:	4691      	mov	r9, r2
 80067bc:	7e27      	ldrb	r7, [r4, #24]
 80067be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80067c0:	2f78      	cmp	r7, #120	; 0x78
 80067c2:	4680      	mov	r8, r0
 80067c4:	469a      	mov	sl, r3
 80067c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067ca:	d807      	bhi.n	80067dc <_printf_i+0x28>
 80067cc:	2f62      	cmp	r7, #98	; 0x62
 80067ce:	d80a      	bhi.n	80067e6 <_printf_i+0x32>
 80067d0:	2f00      	cmp	r7, #0
 80067d2:	f000 80d8 	beq.w	8006986 <_printf_i+0x1d2>
 80067d6:	2f58      	cmp	r7, #88	; 0x58
 80067d8:	f000 80a3 	beq.w	8006922 <_printf_i+0x16e>
 80067dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80067e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067e4:	e03a      	b.n	800685c <_printf_i+0xa8>
 80067e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067ea:	2b15      	cmp	r3, #21
 80067ec:	d8f6      	bhi.n	80067dc <_printf_i+0x28>
 80067ee:	a001      	add	r0, pc, #4	; (adr r0, 80067f4 <_printf_i+0x40>)
 80067f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80067f4:	0800684d 	.word	0x0800684d
 80067f8:	08006861 	.word	0x08006861
 80067fc:	080067dd 	.word	0x080067dd
 8006800:	080067dd 	.word	0x080067dd
 8006804:	080067dd 	.word	0x080067dd
 8006808:	080067dd 	.word	0x080067dd
 800680c:	08006861 	.word	0x08006861
 8006810:	080067dd 	.word	0x080067dd
 8006814:	080067dd 	.word	0x080067dd
 8006818:	080067dd 	.word	0x080067dd
 800681c:	080067dd 	.word	0x080067dd
 8006820:	0800696d 	.word	0x0800696d
 8006824:	08006891 	.word	0x08006891
 8006828:	0800694f 	.word	0x0800694f
 800682c:	080067dd 	.word	0x080067dd
 8006830:	080067dd 	.word	0x080067dd
 8006834:	0800698f 	.word	0x0800698f
 8006838:	080067dd 	.word	0x080067dd
 800683c:	08006891 	.word	0x08006891
 8006840:	080067dd 	.word	0x080067dd
 8006844:	080067dd 	.word	0x080067dd
 8006848:	08006957 	.word	0x08006957
 800684c:	680b      	ldr	r3, [r1, #0]
 800684e:	1d1a      	adds	r2, r3, #4
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	600a      	str	r2, [r1, #0]
 8006854:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006858:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800685c:	2301      	movs	r3, #1
 800685e:	e0a3      	b.n	80069a8 <_printf_i+0x1f4>
 8006860:	6825      	ldr	r5, [r4, #0]
 8006862:	6808      	ldr	r0, [r1, #0]
 8006864:	062e      	lsls	r6, r5, #24
 8006866:	f100 0304 	add.w	r3, r0, #4
 800686a:	d50a      	bpl.n	8006882 <_printf_i+0xce>
 800686c:	6805      	ldr	r5, [r0, #0]
 800686e:	600b      	str	r3, [r1, #0]
 8006870:	2d00      	cmp	r5, #0
 8006872:	da03      	bge.n	800687c <_printf_i+0xc8>
 8006874:	232d      	movs	r3, #45	; 0x2d
 8006876:	426d      	negs	r5, r5
 8006878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800687c:	485e      	ldr	r0, [pc, #376]	; (80069f8 <_printf_i+0x244>)
 800687e:	230a      	movs	r3, #10
 8006880:	e019      	b.n	80068b6 <_printf_i+0x102>
 8006882:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006886:	6805      	ldr	r5, [r0, #0]
 8006888:	600b      	str	r3, [r1, #0]
 800688a:	bf18      	it	ne
 800688c:	b22d      	sxthne	r5, r5
 800688e:	e7ef      	b.n	8006870 <_printf_i+0xbc>
 8006890:	680b      	ldr	r3, [r1, #0]
 8006892:	6825      	ldr	r5, [r4, #0]
 8006894:	1d18      	adds	r0, r3, #4
 8006896:	6008      	str	r0, [r1, #0]
 8006898:	0628      	lsls	r0, r5, #24
 800689a:	d501      	bpl.n	80068a0 <_printf_i+0xec>
 800689c:	681d      	ldr	r5, [r3, #0]
 800689e:	e002      	b.n	80068a6 <_printf_i+0xf2>
 80068a0:	0669      	lsls	r1, r5, #25
 80068a2:	d5fb      	bpl.n	800689c <_printf_i+0xe8>
 80068a4:	881d      	ldrh	r5, [r3, #0]
 80068a6:	4854      	ldr	r0, [pc, #336]	; (80069f8 <_printf_i+0x244>)
 80068a8:	2f6f      	cmp	r7, #111	; 0x6f
 80068aa:	bf0c      	ite	eq
 80068ac:	2308      	moveq	r3, #8
 80068ae:	230a      	movne	r3, #10
 80068b0:	2100      	movs	r1, #0
 80068b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068b6:	6866      	ldr	r6, [r4, #4]
 80068b8:	60a6      	str	r6, [r4, #8]
 80068ba:	2e00      	cmp	r6, #0
 80068bc:	bfa2      	ittt	ge
 80068be:	6821      	ldrge	r1, [r4, #0]
 80068c0:	f021 0104 	bicge.w	r1, r1, #4
 80068c4:	6021      	strge	r1, [r4, #0]
 80068c6:	b90d      	cbnz	r5, 80068cc <_printf_i+0x118>
 80068c8:	2e00      	cmp	r6, #0
 80068ca:	d04d      	beq.n	8006968 <_printf_i+0x1b4>
 80068cc:	4616      	mov	r6, r2
 80068ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80068d2:	fb03 5711 	mls	r7, r3, r1, r5
 80068d6:	5dc7      	ldrb	r7, [r0, r7]
 80068d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068dc:	462f      	mov	r7, r5
 80068de:	42bb      	cmp	r3, r7
 80068e0:	460d      	mov	r5, r1
 80068e2:	d9f4      	bls.n	80068ce <_printf_i+0x11a>
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d10b      	bne.n	8006900 <_printf_i+0x14c>
 80068e8:	6823      	ldr	r3, [r4, #0]
 80068ea:	07df      	lsls	r7, r3, #31
 80068ec:	d508      	bpl.n	8006900 <_printf_i+0x14c>
 80068ee:	6923      	ldr	r3, [r4, #16]
 80068f0:	6861      	ldr	r1, [r4, #4]
 80068f2:	4299      	cmp	r1, r3
 80068f4:	bfde      	ittt	le
 80068f6:	2330      	movle	r3, #48	; 0x30
 80068f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006900:	1b92      	subs	r2, r2, r6
 8006902:	6122      	str	r2, [r4, #16]
 8006904:	f8cd a000 	str.w	sl, [sp]
 8006908:	464b      	mov	r3, r9
 800690a:	aa03      	add	r2, sp, #12
 800690c:	4621      	mov	r1, r4
 800690e:	4640      	mov	r0, r8
 8006910:	f7ff fee2 	bl	80066d8 <_printf_common>
 8006914:	3001      	adds	r0, #1
 8006916:	d14c      	bne.n	80069b2 <_printf_i+0x1fe>
 8006918:	f04f 30ff 	mov.w	r0, #4294967295
 800691c:	b004      	add	sp, #16
 800691e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006922:	4835      	ldr	r0, [pc, #212]	; (80069f8 <_printf_i+0x244>)
 8006924:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006928:	6823      	ldr	r3, [r4, #0]
 800692a:	680e      	ldr	r6, [r1, #0]
 800692c:	061f      	lsls	r7, r3, #24
 800692e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006932:	600e      	str	r6, [r1, #0]
 8006934:	d514      	bpl.n	8006960 <_printf_i+0x1ac>
 8006936:	07d9      	lsls	r1, r3, #31
 8006938:	bf44      	itt	mi
 800693a:	f043 0320 	orrmi.w	r3, r3, #32
 800693e:	6023      	strmi	r3, [r4, #0]
 8006940:	b91d      	cbnz	r5, 800694a <_printf_i+0x196>
 8006942:	6823      	ldr	r3, [r4, #0]
 8006944:	f023 0320 	bic.w	r3, r3, #32
 8006948:	6023      	str	r3, [r4, #0]
 800694a:	2310      	movs	r3, #16
 800694c:	e7b0      	b.n	80068b0 <_printf_i+0xfc>
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	f043 0320 	orr.w	r3, r3, #32
 8006954:	6023      	str	r3, [r4, #0]
 8006956:	2378      	movs	r3, #120	; 0x78
 8006958:	4828      	ldr	r0, [pc, #160]	; (80069fc <_printf_i+0x248>)
 800695a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800695e:	e7e3      	b.n	8006928 <_printf_i+0x174>
 8006960:	065e      	lsls	r6, r3, #25
 8006962:	bf48      	it	mi
 8006964:	b2ad      	uxthmi	r5, r5
 8006966:	e7e6      	b.n	8006936 <_printf_i+0x182>
 8006968:	4616      	mov	r6, r2
 800696a:	e7bb      	b.n	80068e4 <_printf_i+0x130>
 800696c:	680b      	ldr	r3, [r1, #0]
 800696e:	6826      	ldr	r6, [r4, #0]
 8006970:	6960      	ldr	r0, [r4, #20]
 8006972:	1d1d      	adds	r5, r3, #4
 8006974:	600d      	str	r5, [r1, #0]
 8006976:	0635      	lsls	r5, r6, #24
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	d501      	bpl.n	8006980 <_printf_i+0x1cc>
 800697c:	6018      	str	r0, [r3, #0]
 800697e:	e002      	b.n	8006986 <_printf_i+0x1d2>
 8006980:	0671      	lsls	r1, r6, #25
 8006982:	d5fb      	bpl.n	800697c <_printf_i+0x1c8>
 8006984:	8018      	strh	r0, [r3, #0]
 8006986:	2300      	movs	r3, #0
 8006988:	6123      	str	r3, [r4, #16]
 800698a:	4616      	mov	r6, r2
 800698c:	e7ba      	b.n	8006904 <_printf_i+0x150>
 800698e:	680b      	ldr	r3, [r1, #0]
 8006990:	1d1a      	adds	r2, r3, #4
 8006992:	600a      	str	r2, [r1, #0]
 8006994:	681e      	ldr	r6, [r3, #0]
 8006996:	6862      	ldr	r2, [r4, #4]
 8006998:	2100      	movs	r1, #0
 800699a:	4630      	mov	r0, r6
 800699c:	f7f9 fc30 	bl	8000200 <memchr>
 80069a0:	b108      	cbz	r0, 80069a6 <_printf_i+0x1f2>
 80069a2:	1b80      	subs	r0, r0, r6
 80069a4:	6060      	str	r0, [r4, #4]
 80069a6:	6863      	ldr	r3, [r4, #4]
 80069a8:	6123      	str	r3, [r4, #16]
 80069aa:	2300      	movs	r3, #0
 80069ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069b0:	e7a8      	b.n	8006904 <_printf_i+0x150>
 80069b2:	6923      	ldr	r3, [r4, #16]
 80069b4:	4632      	mov	r2, r6
 80069b6:	4649      	mov	r1, r9
 80069b8:	4640      	mov	r0, r8
 80069ba:	47d0      	blx	sl
 80069bc:	3001      	adds	r0, #1
 80069be:	d0ab      	beq.n	8006918 <_printf_i+0x164>
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	079b      	lsls	r3, r3, #30
 80069c4:	d413      	bmi.n	80069ee <_printf_i+0x23a>
 80069c6:	68e0      	ldr	r0, [r4, #12]
 80069c8:	9b03      	ldr	r3, [sp, #12]
 80069ca:	4298      	cmp	r0, r3
 80069cc:	bfb8      	it	lt
 80069ce:	4618      	movlt	r0, r3
 80069d0:	e7a4      	b.n	800691c <_printf_i+0x168>
 80069d2:	2301      	movs	r3, #1
 80069d4:	4632      	mov	r2, r6
 80069d6:	4649      	mov	r1, r9
 80069d8:	4640      	mov	r0, r8
 80069da:	47d0      	blx	sl
 80069dc:	3001      	adds	r0, #1
 80069de:	d09b      	beq.n	8006918 <_printf_i+0x164>
 80069e0:	3501      	adds	r5, #1
 80069e2:	68e3      	ldr	r3, [r4, #12]
 80069e4:	9903      	ldr	r1, [sp, #12]
 80069e6:	1a5b      	subs	r3, r3, r1
 80069e8:	42ab      	cmp	r3, r5
 80069ea:	dcf2      	bgt.n	80069d2 <_printf_i+0x21e>
 80069ec:	e7eb      	b.n	80069c6 <_printf_i+0x212>
 80069ee:	2500      	movs	r5, #0
 80069f0:	f104 0619 	add.w	r6, r4, #25
 80069f4:	e7f5      	b.n	80069e2 <_printf_i+0x22e>
 80069f6:	bf00      	nop
 80069f8:	0800ac3e 	.word	0x0800ac3e
 80069fc:	0800ac4f 	.word	0x0800ac4f

08006a00 <_scanf_float>:
 8006a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a04:	b087      	sub	sp, #28
 8006a06:	4617      	mov	r7, r2
 8006a08:	9303      	str	r3, [sp, #12]
 8006a0a:	688b      	ldr	r3, [r1, #8]
 8006a0c:	1e5a      	subs	r2, r3, #1
 8006a0e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006a12:	bf83      	ittte	hi
 8006a14:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006a18:	195b      	addhi	r3, r3, r5
 8006a1a:	9302      	strhi	r3, [sp, #8]
 8006a1c:	2300      	movls	r3, #0
 8006a1e:	bf86      	itte	hi
 8006a20:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006a24:	608b      	strhi	r3, [r1, #8]
 8006a26:	9302      	strls	r3, [sp, #8]
 8006a28:	680b      	ldr	r3, [r1, #0]
 8006a2a:	468b      	mov	fp, r1
 8006a2c:	2500      	movs	r5, #0
 8006a2e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006a32:	f84b 3b1c 	str.w	r3, [fp], #28
 8006a36:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006a3a:	4680      	mov	r8, r0
 8006a3c:	460c      	mov	r4, r1
 8006a3e:	465e      	mov	r6, fp
 8006a40:	46aa      	mov	sl, r5
 8006a42:	46a9      	mov	r9, r5
 8006a44:	9501      	str	r5, [sp, #4]
 8006a46:	68a2      	ldr	r2, [r4, #8]
 8006a48:	b152      	cbz	r2, 8006a60 <_scanf_float+0x60>
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	2b4e      	cmp	r3, #78	; 0x4e
 8006a50:	d864      	bhi.n	8006b1c <_scanf_float+0x11c>
 8006a52:	2b40      	cmp	r3, #64	; 0x40
 8006a54:	d83c      	bhi.n	8006ad0 <_scanf_float+0xd0>
 8006a56:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006a5a:	b2c8      	uxtb	r0, r1
 8006a5c:	280e      	cmp	r0, #14
 8006a5e:	d93a      	bls.n	8006ad6 <_scanf_float+0xd6>
 8006a60:	f1b9 0f00 	cmp.w	r9, #0
 8006a64:	d003      	beq.n	8006a6e <_scanf_float+0x6e>
 8006a66:	6823      	ldr	r3, [r4, #0]
 8006a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a6c:	6023      	str	r3, [r4, #0]
 8006a6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a72:	f1ba 0f01 	cmp.w	sl, #1
 8006a76:	f200 8113 	bhi.w	8006ca0 <_scanf_float+0x2a0>
 8006a7a:	455e      	cmp	r6, fp
 8006a7c:	f200 8105 	bhi.w	8006c8a <_scanf_float+0x28a>
 8006a80:	2501      	movs	r5, #1
 8006a82:	4628      	mov	r0, r5
 8006a84:	b007      	add	sp, #28
 8006a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a8a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006a8e:	2a0d      	cmp	r2, #13
 8006a90:	d8e6      	bhi.n	8006a60 <_scanf_float+0x60>
 8006a92:	a101      	add	r1, pc, #4	; (adr r1, 8006a98 <_scanf_float+0x98>)
 8006a94:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006a98:	08006bd7 	.word	0x08006bd7
 8006a9c:	08006a61 	.word	0x08006a61
 8006aa0:	08006a61 	.word	0x08006a61
 8006aa4:	08006a61 	.word	0x08006a61
 8006aa8:	08006c37 	.word	0x08006c37
 8006aac:	08006c0f 	.word	0x08006c0f
 8006ab0:	08006a61 	.word	0x08006a61
 8006ab4:	08006a61 	.word	0x08006a61
 8006ab8:	08006be5 	.word	0x08006be5
 8006abc:	08006a61 	.word	0x08006a61
 8006ac0:	08006a61 	.word	0x08006a61
 8006ac4:	08006a61 	.word	0x08006a61
 8006ac8:	08006a61 	.word	0x08006a61
 8006acc:	08006b9d 	.word	0x08006b9d
 8006ad0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006ad4:	e7db      	b.n	8006a8e <_scanf_float+0x8e>
 8006ad6:	290e      	cmp	r1, #14
 8006ad8:	d8c2      	bhi.n	8006a60 <_scanf_float+0x60>
 8006ada:	a001      	add	r0, pc, #4	; (adr r0, 8006ae0 <_scanf_float+0xe0>)
 8006adc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006ae0:	08006b8f 	.word	0x08006b8f
 8006ae4:	08006a61 	.word	0x08006a61
 8006ae8:	08006b8f 	.word	0x08006b8f
 8006aec:	08006c23 	.word	0x08006c23
 8006af0:	08006a61 	.word	0x08006a61
 8006af4:	08006b3d 	.word	0x08006b3d
 8006af8:	08006b79 	.word	0x08006b79
 8006afc:	08006b79 	.word	0x08006b79
 8006b00:	08006b79 	.word	0x08006b79
 8006b04:	08006b79 	.word	0x08006b79
 8006b08:	08006b79 	.word	0x08006b79
 8006b0c:	08006b79 	.word	0x08006b79
 8006b10:	08006b79 	.word	0x08006b79
 8006b14:	08006b79 	.word	0x08006b79
 8006b18:	08006b79 	.word	0x08006b79
 8006b1c:	2b6e      	cmp	r3, #110	; 0x6e
 8006b1e:	d809      	bhi.n	8006b34 <_scanf_float+0x134>
 8006b20:	2b60      	cmp	r3, #96	; 0x60
 8006b22:	d8b2      	bhi.n	8006a8a <_scanf_float+0x8a>
 8006b24:	2b54      	cmp	r3, #84	; 0x54
 8006b26:	d077      	beq.n	8006c18 <_scanf_float+0x218>
 8006b28:	2b59      	cmp	r3, #89	; 0x59
 8006b2a:	d199      	bne.n	8006a60 <_scanf_float+0x60>
 8006b2c:	2d07      	cmp	r5, #7
 8006b2e:	d197      	bne.n	8006a60 <_scanf_float+0x60>
 8006b30:	2508      	movs	r5, #8
 8006b32:	e029      	b.n	8006b88 <_scanf_float+0x188>
 8006b34:	2b74      	cmp	r3, #116	; 0x74
 8006b36:	d06f      	beq.n	8006c18 <_scanf_float+0x218>
 8006b38:	2b79      	cmp	r3, #121	; 0x79
 8006b3a:	e7f6      	b.n	8006b2a <_scanf_float+0x12a>
 8006b3c:	6821      	ldr	r1, [r4, #0]
 8006b3e:	05c8      	lsls	r0, r1, #23
 8006b40:	d51a      	bpl.n	8006b78 <_scanf_float+0x178>
 8006b42:	9b02      	ldr	r3, [sp, #8]
 8006b44:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006b48:	6021      	str	r1, [r4, #0]
 8006b4a:	f109 0901 	add.w	r9, r9, #1
 8006b4e:	b11b      	cbz	r3, 8006b58 <_scanf_float+0x158>
 8006b50:	3b01      	subs	r3, #1
 8006b52:	3201      	adds	r2, #1
 8006b54:	9302      	str	r3, [sp, #8]
 8006b56:	60a2      	str	r2, [r4, #8]
 8006b58:	68a3      	ldr	r3, [r4, #8]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	60a3      	str	r3, [r4, #8]
 8006b5e:	6923      	ldr	r3, [r4, #16]
 8006b60:	3301      	adds	r3, #1
 8006b62:	6123      	str	r3, [r4, #16]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	3b01      	subs	r3, #1
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	607b      	str	r3, [r7, #4]
 8006b6c:	f340 8084 	ble.w	8006c78 <_scanf_float+0x278>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	3301      	adds	r3, #1
 8006b74:	603b      	str	r3, [r7, #0]
 8006b76:	e766      	b.n	8006a46 <_scanf_float+0x46>
 8006b78:	eb1a 0f05 	cmn.w	sl, r5
 8006b7c:	f47f af70 	bne.w	8006a60 <_scanf_float+0x60>
 8006b80:	6822      	ldr	r2, [r4, #0]
 8006b82:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006b86:	6022      	str	r2, [r4, #0]
 8006b88:	f806 3b01 	strb.w	r3, [r6], #1
 8006b8c:	e7e4      	b.n	8006b58 <_scanf_float+0x158>
 8006b8e:	6822      	ldr	r2, [r4, #0]
 8006b90:	0610      	lsls	r0, r2, #24
 8006b92:	f57f af65 	bpl.w	8006a60 <_scanf_float+0x60>
 8006b96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b9a:	e7f4      	b.n	8006b86 <_scanf_float+0x186>
 8006b9c:	f1ba 0f00 	cmp.w	sl, #0
 8006ba0:	d10e      	bne.n	8006bc0 <_scanf_float+0x1c0>
 8006ba2:	f1b9 0f00 	cmp.w	r9, #0
 8006ba6:	d10e      	bne.n	8006bc6 <_scanf_float+0x1c6>
 8006ba8:	6822      	ldr	r2, [r4, #0]
 8006baa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006bae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006bb2:	d108      	bne.n	8006bc6 <_scanf_float+0x1c6>
 8006bb4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006bb8:	6022      	str	r2, [r4, #0]
 8006bba:	f04f 0a01 	mov.w	sl, #1
 8006bbe:	e7e3      	b.n	8006b88 <_scanf_float+0x188>
 8006bc0:	f1ba 0f02 	cmp.w	sl, #2
 8006bc4:	d055      	beq.n	8006c72 <_scanf_float+0x272>
 8006bc6:	2d01      	cmp	r5, #1
 8006bc8:	d002      	beq.n	8006bd0 <_scanf_float+0x1d0>
 8006bca:	2d04      	cmp	r5, #4
 8006bcc:	f47f af48 	bne.w	8006a60 <_scanf_float+0x60>
 8006bd0:	3501      	adds	r5, #1
 8006bd2:	b2ed      	uxtb	r5, r5
 8006bd4:	e7d8      	b.n	8006b88 <_scanf_float+0x188>
 8006bd6:	f1ba 0f01 	cmp.w	sl, #1
 8006bda:	f47f af41 	bne.w	8006a60 <_scanf_float+0x60>
 8006bde:	f04f 0a02 	mov.w	sl, #2
 8006be2:	e7d1      	b.n	8006b88 <_scanf_float+0x188>
 8006be4:	b97d      	cbnz	r5, 8006c06 <_scanf_float+0x206>
 8006be6:	f1b9 0f00 	cmp.w	r9, #0
 8006bea:	f47f af3c 	bne.w	8006a66 <_scanf_float+0x66>
 8006bee:	6822      	ldr	r2, [r4, #0]
 8006bf0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006bf4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006bf8:	f47f af39 	bne.w	8006a6e <_scanf_float+0x6e>
 8006bfc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c00:	6022      	str	r2, [r4, #0]
 8006c02:	2501      	movs	r5, #1
 8006c04:	e7c0      	b.n	8006b88 <_scanf_float+0x188>
 8006c06:	2d03      	cmp	r5, #3
 8006c08:	d0e2      	beq.n	8006bd0 <_scanf_float+0x1d0>
 8006c0a:	2d05      	cmp	r5, #5
 8006c0c:	e7de      	b.n	8006bcc <_scanf_float+0x1cc>
 8006c0e:	2d02      	cmp	r5, #2
 8006c10:	f47f af26 	bne.w	8006a60 <_scanf_float+0x60>
 8006c14:	2503      	movs	r5, #3
 8006c16:	e7b7      	b.n	8006b88 <_scanf_float+0x188>
 8006c18:	2d06      	cmp	r5, #6
 8006c1a:	f47f af21 	bne.w	8006a60 <_scanf_float+0x60>
 8006c1e:	2507      	movs	r5, #7
 8006c20:	e7b2      	b.n	8006b88 <_scanf_float+0x188>
 8006c22:	6822      	ldr	r2, [r4, #0]
 8006c24:	0591      	lsls	r1, r2, #22
 8006c26:	f57f af1b 	bpl.w	8006a60 <_scanf_float+0x60>
 8006c2a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006c2e:	6022      	str	r2, [r4, #0]
 8006c30:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c34:	e7a8      	b.n	8006b88 <_scanf_float+0x188>
 8006c36:	6822      	ldr	r2, [r4, #0]
 8006c38:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006c3c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006c40:	d006      	beq.n	8006c50 <_scanf_float+0x250>
 8006c42:	0550      	lsls	r0, r2, #21
 8006c44:	f57f af0c 	bpl.w	8006a60 <_scanf_float+0x60>
 8006c48:	f1b9 0f00 	cmp.w	r9, #0
 8006c4c:	f43f af0f 	beq.w	8006a6e <_scanf_float+0x6e>
 8006c50:	0591      	lsls	r1, r2, #22
 8006c52:	bf58      	it	pl
 8006c54:	9901      	ldrpl	r1, [sp, #4]
 8006c56:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c5a:	bf58      	it	pl
 8006c5c:	eba9 0101 	subpl.w	r1, r9, r1
 8006c60:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006c64:	bf58      	it	pl
 8006c66:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006c6a:	6022      	str	r2, [r4, #0]
 8006c6c:	f04f 0900 	mov.w	r9, #0
 8006c70:	e78a      	b.n	8006b88 <_scanf_float+0x188>
 8006c72:	f04f 0a03 	mov.w	sl, #3
 8006c76:	e787      	b.n	8006b88 <_scanf_float+0x188>
 8006c78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006c7c:	4639      	mov	r1, r7
 8006c7e:	4640      	mov	r0, r8
 8006c80:	4798      	blx	r3
 8006c82:	2800      	cmp	r0, #0
 8006c84:	f43f aedf 	beq.w	8006a46 <_scanf_float+0x46>
 8006c88:	e6ea      	b.n	8006a60 <_scanf_float+0x60>
 8006c8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c92:	463a      	mov	r2, r7
 8006c94:	4640      	mov	r0, r8
 8006c96:	4798      	blx	r3
 8006c98:	6923      	ldr	r3, [r4, #16]
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	6123      	str	r3, [r4, #16]
 8006c9e:	e6ec      	b.n	8006a7a <_scanf_float+0x7a>
 8006ca0:	1e6b      	subs	r3, r5, #1
 8006ca2:	2b06      	cmp	r3, #6
 8006ca4:	d825      	bhi.n	8006cf2 <_scanf_float+0x2f2>
 8006ca6:	2d02      	cmp	r5, #2
 8006ca8:	d836      	bhi.n	8006d18 <_scanf_float+0x318>
 8006caa:	455e      	cmp	r6, fp
 8006cac:	f67f aee8 	bls.w	8006a80 <_scanf_float+0x80>
 8006cb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cb4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006cb8:	463a      	mov	r2, r7
 8006cba:	4640      	mov	r0, r8
 8006cbc:	4798      	blx	r3
 8006cbe:	6923      	ldr	r3, [r4, #16]
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	6123      	str	r3, [r4, #16]
 8006cc4:	e7f1      	b.n	8006caa <_scanf_float+0x2aa>
 8006cc6:	9802      	ldr	r0, [sp, #8]
 8006cc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ccc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006cd0:	9002      	str	r0, [sp, #8]
 8006cd2:	463a      	mov	r2, r7
 8006cd4:	4640      	mov	r0, r8
 8006cd6:	4798      	blx	r3
 8006cd8:	6923      	ldr	r3, [r4, #16]
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	6123      	str	r3, [r4, #16]
 8006cde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ce2:	fa5f fa8a 	uxtb.w	sl, sl
 8006ce6:	f1ba 0f02 	cmp.w	sl, #2
 8006cea:	d1ec      	bne.n	8006cc6 <_scanf_float+0x2c6>
 8006cec:	3d03      	subs	r5, #3
 8006cee:	b2ed      	uxtb	r5, r5
 8006cf0:	1b76      	subs	r6, r6, r5
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	05da      	lsls	r2, r3, #23
 8006cf6:	d52f      	bpl.n	8006d58 <_scanf_float+0x358>
 8006cf8:	055b      	lsls	r3, r3, #21
 8006cfa:	d510      	bpl.n	8006d1e <_scanf_float+0x31e>
 8006cfc:	455e      	cmp	r6, fp
 8006cfe:	f67f aebf 	bls.w	8006a80 <_scanf_float+0x80>
 8006d02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d0a:	463a      	mov	r2, r7
 8006d0c:	4640      	mov	r0, r8
 8006d0e:	4798      	blx	r3
 8006d10:	6923      	ldr	r3, [r4, #16]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	6123      	str	r3, [r4, #16]
 8006d16:	e7f1      	b.n	8006cfc <_scanf_float+0x2fc>
 8006d18:	46aa      	mov	sl, r5
 8006d1a:	9602      	str	r6, [sp, #8]
 8006d1c:	e7df      	b.n	8006cde <_scanf_float+0x2de>
 8006d1e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006d22:	6923      	ldr	r3, [r4, #16]
 8006d24:	2965      	cmp	r1, #101	; 0x65
 8006d26:	f103 33ff 	add.w	r3, r3, #4294967295
 8006d2a:	f106 35ff 	add.w	r5, r6, #4294967295
 8006d2e:	6123      	str	r3, [r4, #16]
 8006d30:	d00c      	beq.n	8006d4c <_scanf_float+0x34c>
 8006d32:	2945      	cmp	r1, #69	; 0x45
 8006d34:	d00a      	beq.n	8006d4c <_scanf_float+0x34c>
 8006d36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d3a:	463a      	mov	r2, r7
 8006d3c:	4640      	mov	r0, r8
 8006d3e:	4798      	blx	r3
 8006d40:	6923      	ldr	r3, [r4, #16]
 8006d42:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	1eb5      	subs	r5, r6, #2
 8006d4a:	6123      	str	r3, [r4, #16]
 8006d4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d50:	463a      	mov	r2, r7
 8006d52:	4640      	mov	r0, r8
 8006d54:	4798      	blx	r3
 8006d56:	462e      	mov	r6, r5
 8006d58:	6825      	ldr	r5, [r4, #0]
 8006d5a:	f015 0510 	ands.w	r5, r5, #16
 8006d5e:	d158      	bne.n	8006e12 <_scanf_float+0x412>
 8006d60:	7035      	strb	r5, [r6, #0]
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d6c:	d11c      	bne.n	8006da8 <_scanf_float+0x3a8>
 8006d6e:	9b01      	ldr	r3, [sp, #4]
 8006d70:	454b      	cmp	r3, r9
 8006d72:	eba3 0209 	sub.w	r2, r3, r9
 8006d76:	d124      	bne.n	8006dc2 <_scanf_float+0x3c2>
 8006d78:	2200      	movs	r2, #0
 8006d7a:	4659      	mov	r1, fp
 8006d7c:	4640      	mov	r0, r8
 8006d7e:	f000 fe9d 	bl	8007abc <_strtod_r>
 8006d82:	9b03      	ldr	r3, [sp, #12]
 8006d84:	6821      	ldr	r1, [r4, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f011 0f02 	tst.w	r1, #2
 8006d8c:	ec57 6b10 	vmov	r6, r7, d0
 8006d90:	f103 0204 	add.w	r2, r3, #4
 8006d94:	d020      	beq.n	8006dd8 <_scanf_float+0x3d8>
 8006d96:	9903      	ldr	r1, [sp, #12]
 8006d98:	600a      	str	r2, [r1, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	e9c3 6700 	strd	r6, r7, [r3]
 8006da0:	68e3      	ldr	r3, [r4, #12]
 8006da2:	3301      	adds	r3, #1
 8006da4:	60e3      	str	r3, [r4, #12]
 8006da6:	e66c      	b.n	8006a82 <_scanf_float+0x82>
 8006da8:	9b04      	ldr	r3, [sp, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0e4      	beq.n	8006d78 <_scanf_float+0x378>
 8006dae:	9905      	ldr	r1, [sp, #20]
 8006db0:	230a      	movs	r3, #10
 8006db2:	462a      	mov	r2, r5
 8006db4:	3101      	adds	r1, #1
 8006db6:	4640      	mov	r0, r8
 8006db8:	f000 ff0a 	bl	8007bd0 <_strtol_r>
 8006dbc:	9b04      	ldr	r3, [sp, #16]
 8006dbe:	9e05      	ldr	r6, [sp, #20]
 8006dc0:	1ac2      	subs	r2, r0, r3
 8006dc2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006dc6:	429e      	cmp	r6, r3
 8006dc8:	bf28      	it	cs
 8006dca:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006dce:	4912      	ldr	r1, [pc, #72]	; (8006e18 <_scanf_float+0x418>)
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	f000 f82b 	bl	8006e2c <siprintf>
 8006dd6:	e7cf      	b.n	8006d78 <_scanf_float+0x378>
 8006dd8:	f011 0f04 	tst.w	r1, #4
 8006ddc:	9903      	ldr	r1, [sp, #12]
 8006dde:	600a      	str	r2, [r1, #0]
 8006de0:	d1db      	bne.n	8006d9a <_scanf_float+0x39a>
 8006de2:	f8d3 8000 	ldr.w	r8, [r3]
 8006de6:	ee10 2a10 	vmov	r2, s0
 8006dea:	ee10 0a10 	vmov	r0, s0
 8006dee:	463b      	mov	r3, r7
 8006df0:	4639      	mov	r1, r7
 8006df2:	f7f9 feab 	bl	8000b4c <__aeabi_dcmpun>
 8006df6:	b128      	cbz	r0, 8006e04 <_scanf_float+0x404>
 8006df8:	4808      	ldr	r0, [pc, #32]	; (8006e1c <_scanf_float+0x41c>)
 8006dfa:	f000 f811 	bl	8006e20 <nanf>
 8006dfe:	ed88 0a00 	vstr	s0, [r8]
 8006e02:	e7cd      	b.n	8006da0 <_scanf_float+0x3a0>
 8006e04:	4630      	mov	r0, r6
 8006e06:	4639      	mov	r1, r7
 8006e08:	f7f9 fefe 	bl	8000c08 <__aeabi_d2f>
 8006e0c:	f8c8 0000 	str.w	r0, [r8]
 8006e10:	e7c6      	b.n	8006da0 <_scanf_float+0x3a0>
 8006e12:	2500      	movs	r5, #0
 8006e14:	e635      	b.n	8006a82 <_scanf_float+0x82>
 8006e16:	bf00      	nop
 8006e18:	0800ac60 	.word	0x0800ac60
 8006e1c:	0800b078 	.word	0x0800b078

08006e20 <nanf>:
 8006e20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006e28 <nanf+0x8>
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	7fc00000 	.word	0x7fc00000

08006e2c <siprintf>:
 8006e2c:	b40e      	push	{r1, r2, r3}
 8006e2e:	b500      	push	{lr}
 8006e30:	b09c      	sub	sp, #112	; 0x70
 8006e32:	ab1d      	add	r3, sp, #116	; 0x74
 8006e34:	9002      	str	r0, [sp, #8]
 8006e36:	9006      	str	r0, [sp, #24]
 8006e38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e3c:	4809      	ldr	r0, [pc, #36]	; (8006e64 <siprintf+0x38>)
 8006e3e:	9107      	str	r1, [sp, #28]
 8006e40:	9104      	str	r1, [sp, #16]
 8006e42:	4909      	ldr	r1, [pc, #36]	; (8006e68 <siprintf+0x3c>)
 8006e44:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e48:	9105      	str	r1, [sp, #20]
 8006e4a:	6800      	ldr	r0, [r0, #0]
 8006e4c:	9301      	str	r3, [sp, #4]
 8006e4e:	a902      	add	r1, sp, #8
 8006e50:	f002 fea6 	bl	8009ba0 <_svfiprintf_r>
 8006e54:	9b02      	ldr	r3, [sp, #8]
 8006e56:	2200      	movs	r2, #0
 8006e58:	701a      	strb	r2, [r3, #0]
 8006e5a:	b01c      	add	sp, #112	; 0x70
 8006e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e60:	b003      	add	sp, #12
 8006e62:	4770      	bx	lr
 8006e64:	20000014 	.word	0x20000014
 8006e68:	ffff0208 	.word	0xffff0208

08006e6c <sulp>:
 8006e6c:	b570      	push	{r4, r5, r6, lr}
 8006e6e:	4604      	mov	r4, r0
 8006e70:	460d      	mov	r5, r1
 8006e72:	ec45 4b10 	vmov	d0, r4, r5
 8006e76:	4616      	mov	r6, r2
 8006e78:	f002 fc2e 	bl	80096d8 <__ulp>
 8006e7c:	ec51 0b10 	vmov	r0, r1, d0
 8006e80:	b17e      	cbz	r6, 8006ea2 <sulp+0x36>
 8006e82:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006e86:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	dd09      	ble.n	8006ea2 <sulp+0x36>
 8006e8e:	051b      	lsls	r3, r3, #20
 8006e90:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006e94:	2400      	movs	r4, #0
 8006e96:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006e9a:	4622      	mov	r2, r4
 8006e9c:	462b      	mov	r3, r5
 8006e9e:	f7f9 fbbb 	bl	8000618 <__aeabi_dmul>
 8006ea2:	bd70      	pop	{r4, r5, r6, pc}
 8006ea4:	0000      	movs	r0, r0
	...

08006ea8 <_strtod_l>:
 8006ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eac:	b0a3      	sub	sp, #140	; 0x8c
 8006eae:	461f      	mov	r7, r3
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	931e      	str	r3, [sp, #120]	; 0x78
 8006eb4:	4ba4      	ldr	r3, [pc, #656]	; (8007148 <_strtod_l+0x2a0>)
 8006eb6:	9219      	str	r2, [sp, #100]	; 0x64
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	9307      	str	r3, [sp, #28]
 8006ebc:	4604      	mov	r4, r0
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	4688      	mov	r8, r1
 8006ec2:	f7f9 f995 	bl	80001f0 <strlen>
 8006ec6:	f04f 0a00 	mov.w	sl, #0
 8006eca:	4605      	mov	r5, r0
 8006ecc:	f04f 0b00 	mov.w	fp, #0
 8006ed0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006ed4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ed6:	781a      	ldrb	r2, [r3, #0]
 8006ed8:	2a2b      	cmp	r2, #43	; 0x2b
 8006eda:	d04c      	beq.n	8006f76 <_strtod_l+0xce>
 8006edc:	d839      	bhi.n	8006f52 <_strtod_l+0xaa>
 8006ede:	2a0d      	cmp	r2, #13
 8006ee0:	d832      	bhi.n	8006f48 <_strtod_l+0xa0>
 8006ee2:	2a08      	cmp	r2, #8
 8006ee4:	d832      	bhi.n	8006f4c <_strtod_l+0xa4>
 8006ee6:	2a00      	cmp	r2, #0
 8006ee8:	d03c      	beq.n	8006f64 <_strtod_l+0xbc>
 8006eea:	2300      	movs	r3, #0
 8006eec:	930e      	str	r3, [sp, #56]	; 0x38
 8006eee:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006ef0:	7833      	ldrb	r3, [r6, #0]
 8006ef2:	2b30      	cmp	r3, #48	; 0x30
 8006ef4:	f040 80b4 	bne.w	8007060 <_strtod_l+0x1b8>
 8006ef8:	7873      	ldrb	r3, [r6, #1]
 8006efa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006efe:	2b58      	cmp	r3, #88	; 0x58
 8006f00:	d16c      	bne.n	8006fdc <_strtod_l+0x134>
 8006f02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f04:	9301      	str	r3, [sp, #4]
 8006f06:	ab1e      	add	r3, sp, #120	; 0x78
 8006f08:	9702      	str	r7, [sp, #8]
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	4a8f      	ldr	r2, [pc, #572]	; (800714c <_strtod_l+0x2a4>)
 8006f0e:	ab1f      	add	r3, sp, #124	; 0x7c
 8006f10:	a91d      	add	r1, sp, #116	; 0x74
 8006f12:	4620      	mov	r0, r4
 8006f14:	f001 fd40 	bl	8008998 <__gethex>
 8006f18:	f010 0707 	ands.w	r7, r0, #7
 8006f1c:	4605      	mov	r5, r0
 8006f1e:	d005      	beq.n	8006f2c <_strtod_l+0x84>
 8006f20:	2f06      	cmp	r7, #6
 8006f22:	d12a      	bne.n	8006f7a <_strtod_l+0xd2>
 8006f24:	3601      	adds	r6, #1
 8006f26:	2300      	movs	r3, #0
 8006f28:	961d      	str	r6, [sp, #116]	; 0x74
 8006f2a:	930e      	str	r3, [sp, #56]	; 0x38
 8006f2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f040 8596 	bne.w	8007a60 <_strtod_l+0xbb8>
 8006f34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f36:	b1db      	cbz	r3, 8006f70 <_strtod_l+0xc8>
 8006f38:	4652      	mov	r2, sl
 8006f3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f3e:	ec43 2b10 	vmov	d0, r2, r3
 8006f42:	b023      	add	sp, #140	; 0x8c
 8006f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f48:	2a20      	cmp	r2, #32
 8006f4a:	d1ce      	bne.n	8006eea <_strtod_l+0x42>
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	931d      	str	r3, [sp, #116]	; 0x74
 8006f50:	e7c0      	b.n	8006ed4 <_strtod_l+0x2c>
 8006f52:	2a2d      	cmp	r2, #45	; 0x2d
 8006f54:	d1c9      	bne.n	8006eea <_strtod_l+0x42>
 8006f56:	2201      	movs	r2, #1
 8006f58:	920e      	str	r2, [sp, #56]	; 0x38
 8006f5a:	1c5a      	adds	r2, r3, #1
 8006f5c:	921d      	str	r2, [sp, #116]	; 0x74
 8006f5e:	785b      	ldrb	r3, [r3, #1]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d1c4      	bne.n	8006eee <_strtod_l+0x46>
 8006f64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006f66:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f040 8576 	bne.w	8007a5c <_strtod_l+0xbb4>
 8006f70:	4652      	mov	r2, sl
 8006f72:	465b      	mov	r3, fp
 8006f74:	e7e3      	b.n	8006f3e <_strtod_l+0x96>
 8006f76:	2200      	movs	r2, #0
 8006f78:	e7ee      	b.n	8006f58 <_strtod_l+0xb0>
 8006f7a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006f7c:	b13a      	cbz	r2, 8006f8e <_strtod_l+0xe6>
 8006f7e:	2135      	movs	r1, #53	; 0x35
 8006f80:	a820      	add	r0, sp, #128	; 0x80
 8006f82:	f002 fcb4 	bl	80098ee <__copybits>
 8006f86:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006f88:	4620      	mov	r0, r4
 8006f8a:	f002 f879 	bl	8009080 <_Bfree>
 8006f8e:	3f01      	subs	r7, #1
 8006f90:	2f05      	cmp	r7, #5
 8006f92:	d807      	bhi.n	8006fa4 <_strtod_l+0xfc>
 8006f94:	e8df f007 	tbb	[pc, r7]
 8006f98:	1d180b0e 	.word	0x1d180b0e
 8006f9c:	030e      	.short	0x030e
 8006f9e:	f04f 0b00 	mov.w	fp, #0
 8006fa2:	46da      	mov	sl, fp
 8006fa4:	0728      	lsls	r0, r5, #28
 8006fa6:	d5c1      	bpl.n	8006f2c <_strtod_l+0x84>
 8006fa8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006fac:	e7be      	b.n	8006f2c <_strtod_l+0x84>
 8006fae:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8006fb2:	e7f7      	b.n	8006fa4 <_strtod_l+0xfc>
 8006fb4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006fb8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006fba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006fbe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006fc2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006fc6:	e7ed      	b.n	8006fa4 <_strtod_l+0xfc>
 8006fc8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8007150 <_strtod_l+0x2a8>
 8006fcc:	f04f 0a00 	mov.w	sl, #0
 8006fd0:	e7e8      	b.n	8006fa4 <_strtod_l+0xfc>
 8006fd2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006fd6:	f04f 3aff 	mov.w	sl, #4294967295
 8006fda:	e7e3      	b.n	8006fa4 <_strtod_l+0xfc>
 8006fdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006fde:	1c5a      	adds	r2, r3, #1
 8006fe0:	921d      	str	r2, [sp, #116]	; 0x74
 8006fe2:	785b      	ldrb	r3, [r3, #1]
 8006fe4:	2b30      	cmp	r3, #48	; 0x30
 8006fe6:	d0f9      	beq.n	8006fdc <_strtod_l+0x134>
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d09f      	beq.n	8006f2c <_strtod_l+0x84>
 8006fec:	2301      	movs	r3, #1
 8006fee:	f04f 0900 	mov.w	r9, #0
 8006ff2:	9304      	str	r3, [sp, #16]
 8006ff4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006ff6:	930a      	str	r3, [sp, #40]	; 0x28
 8006ff8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006ffc:	464f      	mov	r7, r9
 8006ffe:	220a      	movs	r2, #10
 8007000:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007002:	7806      	ldrb	r6, [r0, #0]
 8007004:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007008:	b2d9      	uxtb	r1, r3
 800700a:	2909      	cmp	r1, #9
 800700c:	d92a      	bls.n	8007064 <_strtod_l+0x1bc>
 800700e:	9907      	ldr	r1, [sp, #28]
 8007010:	462a      	mov	r2, r5
 8007012:	f002 fedd 	bl	8009dd0 <strncmp>
 8007016:	b398      	cbz	r0, 8007080 <_strtod_l+0x1d8>
 8007018:	2000      	movs	r0, #0
 800701a:	4633      	mov	r3, r6
 800701c:	463d      	mov	r5, r7
 800701e:	9007      	str	r0, [sp, #28]
 8007020:	4602      	mov	r2, r0
 8007022:	2b65      	cmp	r3, #101	; 0x65
 8007024:	d001      	beq.n	800702a <_strtod_l+0x182>
 8007026:	2b45      	cmp	r3, #69	; 0x45
 8007028:	d118      	bne.n	800705c <_strtod_l+0x1b4>
 800702a:	b91d      	cbnz	r5, 8007034 <_strtod_l+0x18c>
 800702c:	9b04      	ldr	r3, [sp, #16]
 800702e:	4303      	orrs	r3, r0
 8007030:	d098      	beq.n	8006f64 <_strtod_l+0xbc>
 8007032:	2500      	movs	r5, #0
 8007034:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007038:	f108 0301 	add.w	r3, r8, #1
 800703c:	931d      	str	r3, [sp, #116]	; 0x74
 800703e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007042:	2b2b      	cmp	r3, #43	; 0x2b
 8007044:	d075      	beq.n	8007132 <_strtod_l+0x28a>
 8007046:	2b2d      	cmp	r3, #45	; 0x2d
 8007048:	d07b      	beq.n	8007142 <_strtod_l+0x29a>
 800704a:	f04f 0c00 	mov.w	ip, #0
 800704e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007052:	2909      	cmp	r1, #9
 8007054:	f240 8082 	bls.w	800715c <_strtod_l+0x2b4>
 8007058:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800705c:	2600      	movs	r6, #0
 800705e:	e09d      	b.n	800719c <_strtod_l+0x2f4>
 8007060:	2300      	movs	r3, #0
 8007062:	e7c4      	b.n	8006fee <_strtod_l+0x146>
 8007064:	2f08      	cmp	r7, #8
 8007066:	bfd8      	it	le
 8007068:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800706a:	f100 0001 	add.w	r0, r0, #1
 800706e:	bfda      	itte	le
 8007070:	fb02 3301 	mlale	r3, r2, r1, r3
 8007074:	9309      	strle	r3, [sp, #36]	; 0x24
 8007076:	fb02 3909 	mlagt	r9, r2, r9, r3
 800707a:	3701      	adds	r7, #1
 800707c:	901d      	str	r0, [sp, #116]	; 0x74
 800707e:	e7bf      	b.n	8007000 <_strtod_l+0x158>
 8007080:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007082:	195a      	adds	r2, r3, r5
 8007084:	921d      	str	r2, [sp, #116]	; 0x74
 8007086:	5d5b      	ldrb	r3, [r3, r5]
 8007088:	2f00      	cmp	r7, #0
 800708a:	d037      	beq.n	80070fc <_strtod_l+0x254>
 800708c:	9007      	str	r0, [sp, #28]
 800708e:	463d      	mov	r5, r7
 8007090:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007094:	2a09      	cmp	r2, #9
 8007096:	d912      	bls.n	80070be <_strtod_l+0x216>
 8007098:	2201      	movs	r2, #1
 800709a:	e7c2      	b.n	8007022 <_strtod_l+0x17a>
 800709c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800709e:	1c5a      	adds	r2, r3, #1
 80070a0:	921d      	str	r2, [sp, #116]	; 0x74
 80070a2:	785b      	ldrb	r3, [r3, #1]
 80070a4:	3001      	adds	r0, #1
 80070a6:	2b30      	cmp	r3, #48	; 0x30
 80070a8:	d0f8      	beq.n	800709c <_strtod_l+0x1f4>
 80070aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80070ae:	2a08      	cmp	r2, #8
 80070b0:	f200 84db 	bhi.w	8007a6a <_strtod_l+0xbc2>
 80070b4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80070b6:	9007      	str	r0, [sp, #28]
 80070b8:	2000      	movs	r0, #0
 80070ba:	920a      	str	r2, [sp, #40]	; 0x28
 80070bc:	4605      	mov	r5, r0
 80070be:	3b30      	subs	r3, #48	; 0x30
 80070c0:	f100 0201 	add.w	r2, r0, #1
 80070c4:	d014      	beq.n	80070f0 <_strtod_l+0x248>
 80070c6:	9907      	ldr	r1, [sp, #28]
 80070c8:	4411      	add	r1, r2
 80070ca:	9107      	str	r1, [sp, #28]
 80070cc:	462a      	mov	r2, r5
 80070ce:	eb00 0e05 	add.w	lr, r0, r5
 80070d2:	210a      	movs	r1, #10
 80070d4:	4572      	cmp	r2, lr
 80070d6:	d113      	bne.n	8007100 <_strtod_l+0x258>
 80070d8:	182a      	adds	r2, r5, r0
 80070da:	2a08      	cmp	r2, #8
 80070dc:	f105 0501 	add.w	r5, r5, #1
 80070e0:	4405      	add	r5, r0
 80070e2:	dc1c      	bgt.n	800711e <_strtod_l+0x276>
 80070e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070e6:	220a      	movs	r2, #10
 80070e8:	fb02 3301 	mla	r3, r2, r1, r3
 80070ec:	9309      	str	r3, [sp, #36]	; 0x24
 80070ee:	2200      	movs	r2, #0
 80070f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80070f2:	1c59      	adds	r1, r3, #1
 80070f4:	911d      	str	r1, [sp, #116]	; 0x74
 80070f6:	785b      	ldrb	r3, [r3, #1]
 80070f8:	4610      	mov	r0, r2
 80070fa:	e7c9      	b.n	8007090 <_strtod_l+0x1e8>
 80070fc:	4638      	mov	r0, r7
 80070fe:	e7d2      	b.n	80070a6 <_strtod_l+0x1fe>
 8007100:	2a08      	cmp	r2, #8
 8007102:	dc04      	bgt.n	800710e <_strtod_l+0x266>
 8007104:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007106:	434e      	muls	r6, r1
 8007108:	9609      	str	r6, [sp, #36]	; 0x24
 800710a:	3201      	adds	r2, #1
 800710c:	e7e2      	b.n	80070d4 <_strtod_l+0x22c>
 800710e:	f102 0c01 	add.w	ip, r2, #1
 8007112:	f1bc 0f10 	cmp.w	ip, #16
 8007116:	bfd8      	it	le
 8007118:	fb01 f909 	mulle.w	r9, r1, r9
 800711c:	e7f5      	b.n	800710a <_strtod_l+0x262>
 800711e:	2d10      	cmp	r5, #16
 8007120:	bfdc      	itt	le
 8007122:	220a      	movle	r2, #10
 8007124:	fb02 3909 	mlale	r9, r2, r9, r3
 8007128:	e7e1      	b.n	80070ee <_strtod_l+0x246>
 800712a:	2300      	movs	r3, #0
 800712c:	9307      	str	r3, [sp, #28]
 800712e:	2201      	movs	r2, #1
 8007130:	e77c      	b.n	800702c <_strtod_l+0x184>
 8007132:	f04f 0c00 	mov.w	ip, #0
 8007136:	f108 0302 	add.w	r3, r8, #2
 800713a:	931d      	str	r3, [sp, #116]	; 0x74
 800713c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007140:	e785      	b.n	800704e <_strtod_l+0x1a6>
 8007142:	f04f 0c01 	mov.w	ip, #1
 8007146:	e7f6      	b.n	8007136 <_strtod_l+0x28e>
 8007148:	0800aeb8 	.word	0x0800aeb8
 800714c:	0800ac68 	.word	0x0800ac68
 8007150:	7ff00000 	.word	0x7ff00000
 8007154:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007156:	1c59      	adds	r1, r3, #1
 8007158:	911d      	str	r1, [sp, #116]	; 0x74
 800715a:	785b      	ldrb	r3, [r3, #1]
 800715c:	2b30      	cmp	r3, #48	; 0x30
 800715e:	d0f9      	beq.n	8007154 <_strtod_l+0x2ac>
 8007160:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007164:	2908      	cmp	r1, #8
 8007166:	f63f af79 	bhi.w	800705c <_strtod_l+0x1b4>
 800716a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800716e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007170:	9308      	str	r3, [sp, #32]
 8007172:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007174:	1c59      	adds	r1, r3, #1
 8007176:	911d      	str	r1, [sp, #116]	; 0x74
 8007178:	785b      	ldrb	r3, [r3, #1]
 800717a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800717e:	2e09      	cmp	r6, #9
 8007180:	d937      	bls.n	80071f2 <_strtod_l+0x34a>
 8007182:	9e08      	ldr	r6, [sp, #32]
 8007184:	1b89      	subs	r1, r1, r6
 8007186:	2908      	cmp	r1, #8
 8007188:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800718c:	dc02      	bgt.n	8007194 <_strtod_l+0x2ec>
 800718e:	4576      	cmp	r6, lr
 8007190:	bfa8      	it	ge
 8007192:	4676      	movge	r6, lr
 8007194:	f1bc 0f00 	cmp.w	ip, #0
 8007198:	d000      	beq.n	800719c <_strtod_l+0x2f4>
 800719a:	4276      	negs	r6, r6
 800719c:	2d00      	cmp	r5, #0
 800719e:	d14f      	bne.n	8007240 <_strtod_l+0x398>
 80071a0:	9904      	ldr	r1, [sp, #16]
 80071a2:	4301      	orrs	r1, r0
 80071a4:	f47f aec2 	bne.w	8006f2c <_strtod_l+0x84>
 80071a8:	2a00      	cmp	r2, #0
 80071aa:	f47f aedb 	bne.w	8006f64 <_strtod_l+0xbc>
 80071ae:	2b69      	cmp	r3, #105	; 0x69
 80071b0:	d027      	beq.n	8007202 <_strtod_l+0x35a>
 80071b2:	dc24      	bgt.n	80071fe <_strtod_l+0x356>
 80071b4:	2b49      	cmp	r3, #73	; 0x49
 80071b6:	d024      	beq.n	8007202 <_strtod_l+0x35a>
 80071b8:	2b4e      	cmp	r3, #78	; 0x4e
 80071ba:	f47f aed3 	bne.w	8006f64 <_strtod_l+0xbc>
 80071be:	499e      	ldr	r1, [pc, #632]	; (8007438 <_strtod_l+0x590>)
 80071c0:	a81d      	add	r0, sp, #116	; 0x74
 80071c2:	f001 fe41 	bl	8008e48 <__match>
 80071c6:	2800      	cmp	r0, #0
 80071c8:	f43f aecc 	beq.w	8006f64 <_strtod_l+0xbc>
 80071cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	2b28      	cmp	r3, #40	; 0x28
 80071d2:	d12d      	bne.n	8007230 <_strtod_l+0x388>
 80071d4:	4999      	ldr	r1, [pc, #612]	; (800743c <_strtod_l+0x594>)
 80071d6:	aa20      	add	r2, sp, #128	; 0x80
 80071d8:	a81d      	add	r0, sp, #116	; 0x74
 80071da:	f001 fe49 	bl	8008e70 <__hexnan>
 80071de:	2805      	cmp	r0, #5
 80071e0:	d126      	bne.n	8007230 <_strtod_l+0x388>
 80071e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071e4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80071e8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80071ec:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80071f0:	e69c      	b.n	8006f2c <_strtod_l+0x84>
 80071f2:	210a      	movs	r1, #10
 80071f4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80071f8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80071fc:	e7b9      	b.n	8007172 <_strtod_l+0x2ca>
 80071fe:	2b6e      	cmp	r3, #110	; 0x6e
 8007200:	e7db      	b.n	80071ba <_strtod_l+0x312>
 8007202:	498f      	ldr	r1, [pc, #572]	; (8007440 <_strtod_l+0x598>)
 8007204:	a81d      	add	r0, sp, #116	; 0x74
 8007206:	f001 fe1f 	bl	8008e48 <__match>
 800720a:	2800      	cmp	r0, #0
 800720c:	f43f aeaa 	beq.w	8006f64 <_strtod_l+0xbc>
 8007210:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007212:	498c      	ldr	r1, [pc, #560]	; (8007444 <_strtod_l+0x59c>)
 8007214:	3b01      	subs	r3, #1
 8007216:	a81d      	add	r0, sp, #116	; 0x74
 8007218:	931d      	str	r3, [sp, #116]	; 0x74
 800721a:	f001 fe15 	bl	8008e48 <__match>
 800721e:	b910      	cbnz	r0, 8007226 <_strtod_l+0x37e>
 8007220:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007222:	3301      	adds	r3, #1
 8007224:	931d      	str	r3, [sp, #116]	; 0x74
 8007226:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8007454 <_strtod_l+0x5ac>
 800722a:	f04f 0a00 	mov.w	sl, #0
 800722e:	e67d      	b.n	8006f2c <_strtod_l+0x84>
 8007230:	4885      	ldr	r0, [pc, #532]	; (8007448 <_strtod_l+0x5a0>)
 8007232:	f002 fdb5 	bl	8009da0 <nan>
 8007236:	ed8d 0b04 	vstr	d0, [sp, #16]
 800723a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800723e:	e675      	b.n	8006f2c <_strtod_l+0x84>
 8007240:	9b07      	ldr	r3, [sp, #28]
 8007242:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007244:	1af3      	subs	r3, r6, r3
 8007246:	2f00      	cmp	r7, #0
 8007248:	bf08      	it	eq
 800724a:	462f      	moveq	r7, r5
 800724c:	2d10      	cmp	r5, #16
 800724e:	9308      	str	r3, [sp, #32]
 8007250:	46a8      	mov	r8, r5
 8007252:	bfa8      	it	ge
 8007254:	f04f 0810 	movge.w	r8, #16
 8007258:	f7f9 f964 	bl	8000524 <__aeabi_ui2d>
 800725c:	2d09      	cmp	r5, #9
 800725e:	4682      	mov	sl, r0
 8007260:	468b      	mov	fp, r1
 8007262:	dd13      	ble.n	800728c <_strtod_l+0x3e4>
 8007264:	4b79      	ldr	r3, [pc, #484]	; (800744c <_strtod_l+0x5a4>)
 8007266:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800726a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800726e:	f7f9 f9d3 	bl	8000618 <__aeabi_dmul>
 8007272:	4682      	mov	sl, r0
 8007274:	4648      	mov	r0, r9
 8007276:	468b      	mov	fp, r1
 8007278:	f7f9 f954 	bl	8000524 <__aeabi_ui2d>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	4650      	mov	r0, sl
 8007282:	4659      	mov	r1, fp
 8007284:	f7f9 f812 	bl	80002ac <__adddf3>
 8007288:	4682      	mov	sl, r0
 800728a:	468b      	mov	fp, r1
 800728c:	2d0f      	cmp	r5, #15
 800728e:	dc38      	bgt.n	8007302 <_strtod_l+0x45a>
 8007290:	9b08      	ldr	r3, [sp, #32]
 8007292:	2b00      	cmp	r3, #0
 8007294:	f43f ae4a 	beq.w	8006f2c <_strtod_l+0x84>
 8007298:	dd24      	ble.n	80072e4 <_strtod_l+0x43c>
 800729a:	2b16      	cmp	r3, #22
 800729c:	dc0b      	bgt.n	80072b6 <_strtod_l+0x40e>
 800729e:	4d6b      	ldr	r5, [pc, #428]	; (800744c <_strtod_l+0x5a4>)
 80072a0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80072a4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80072a8:	4652      	mov	r2, sl
 80072aa:	465b      	mov	r3, fp
 80072ac:	f7f9 f9b4 	bl	8000618 <__aeabi_dmul>
 80072b0:	4682      	mov	sl, r0
 80072b2:	468b      	mov	fp, r1
 80072b4:	e63a      	b.n	8006f2c <_strtod_l+0x84>
 80072b6:	9a08      	ldr	r2, [sp, #32]
 80072b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80072bc:	4293      	cmp	r3, r2
 80072be:	db20      	blt.n	8007302 <_strtod_l+0x45a>
 80072c0:	4c62      	ldr	r4, [pc, #392]	; (800744c <_strtod_l+0x5a4>)
 80072c2:	f1c5 050f 	rsb	r5, r5, #15
 80072c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80072ca:	4652      	mov	r2, sl
 80072cc:	465b      	mov	r3, fp
 80072ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072d2:	f7f9 f9a1 	bl	8000618 <__aeabi_dmul>
 80072d6:	9b08      	ldr	r3, [sp, #32]
 80072d8:	1b5d      	subs	r5, r3, r5
 80072da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80072de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80072e2:	e7e3      	b.n	80072ac <_strtod_l+0x404>
 80072e4:	9b08      	ldr	r3, [sp, #32]
 80072e6:	3316      	adds	r3, #22
 80072e8:	db0b      	blt.n	8007302 <_strtod_l+0x45a>
 80072ea:	9b07      	ldr	r3, [sp, #28]
 80072ec:	4a57      	ldr	r2, [pc, #348]	; (800744c <_strtod_l+0x5a4>)
 80072ee:	1b9e      	subs	r6, r3, r6
 80072f0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80072f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072f8:	4650      	mov	r0, sl
 80072fa:	4659      	mov	r1, fp
 80072fc:	f7f9 fab6 	bl	800086c <__aeabi_ddiv>
 8007300:	e7d6      	b.n	80072b0 <_strtod_l+0x408>
 8007302:	9b08      	ldr	r3, [sp, #32]
 8007304:	eba5 0808 	sub.w	r8, r5, r8
 8007308:	4498      	add	r8, r3
 800730a:	f1b8 0f00 	cmp.w	r8, #0
 800730e:	dd71      	ble.n	80073f4 <_strtod_l+0x54c>
 8007310:	f018 030f 	ands.w	r3, r8, #15
 8007314:	d00a      	beq.n	800732c <_strtod_l+0x484>
 8007316:	494d      	ldr	r1, [pc, #308]	; (800744c <_strtod_l+0x5a4>)
 8007318:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800731c:	4652      	mov	r2, sl
 800731e:	465b      	mov	r3, fp
 8007320:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007324:	f7f9 f978 	bl	8000618 <__aeabi_dmul>
 8007328:	4682      	mov	sl, r0
 800732a:	468b      	mov	fp, r1
 800732c:	f038 080f 	bics.w	r8, r8, #15
 8007330:	d04d      	beq.n	80073ce <_strtod_l+0x526>
 8007332:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007336:	dd22      	ble.n	800737e <_strtod_l+0x4d6>
 8007338:	2500      	movs	r5, #0
 800733a:	462e      	mov	r6, r5
 800733c:	9509      	str	r5, [sp, #36]	; 0x24
 800733e:	9507      	str	r5, [sp, #28]
 8007340:	2322      	movs	r3, #34	; 0x22
 8007342:	f8df b110 	ldr.w	fp, [pc, #272]	; 8007454 <_strtod_l+0x5ac>
 8007346:	6023      	str	r3, [r4, #0]
 8007348:	f04f 0a00 	mov.w	sl, #0
 800734c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800734e:	2b00      	cmp	r3, #0
 8007350:	f43f adec 	beq.w	8006f2c <_strtod_l+0x84>
 8007354:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007356:	4620      	mov	r0, r4
 8007358:	f001 fe92 	bl	8009080 <_Bfree>
 800735c:	9907      	ldr	r1, [sp, #28]
 800735e:	4620      	mov	r0, r4
 8007360:	f001 fe8e 	bl	8009080 <_Bfree>
 8007364:	4631      	mov	r1, r6
 8007366:	4620      	mov	r0, r4
 8007368:	f001 fe8a 	bl	8009080 <_Bfree>
 800736c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800736e:	4620      	mov	r0, r4
 8007370:	f001 fe86 	bl	8009080 <_Bfree>
 8007374:	4629      	mov	r1, r5
 8007376:	4620      	mov	r0, r4
 8007378:	f001 fe82 	bl	8009080 <_Bfree>
 800737c:	e5d6      	b.n	8006f2c <_strtod_l+0x84>
 800737e:	2300      	movs	r3, #0
 8007380:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007384:	4650      	mov	r0, sl
 8007386:	4659      	mov	r1, fp
 8007388:	4699      	mov	r9, r3
 800738a:	f1b8 0f01 	cmp.w	r8, #1
 800738e:	dc21      	bgt.n	80073d4 <_strtod_l+0x52c>
 8007390:	b10b      	cbz	r3, 8007396 <_strtod_l+0x4ee>
 8007392:	4682      	mov	sl, r0
 8007394:	468b      	mov	fp, r1
 8007396:	4b2e      	ldr	r3, [pc, #184]	; (8007450 <_strtod_l+0x5a8>)
 8007398:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800739c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80073a0:	4652      	mov	r2, sl
 80073a2:	465b      	mov	r3, fp
 80073a4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80073a8:	f7f9 f936 	bl	8000618 <__aeabi_dmul>
 80073ac:	4b29      	ldr	r3, [pc, #164]	; (8007454 <_strtod_l+0x5ac>)
 80073ae:	460a      	mov	r2, r1
 80073b0:	400b      	ands	r3, r1
 80073b2:	4929      	ldr	r1, [pc, #164]	; (8007458 <_strtod_l+0x5b0>)
 80073b4:	428b      	cmp	r3, r1
 80073b6:	4682      	mov	sl, r0
 80073b8:	d8be      	bhi.n	8007338 <_strtod_l+0x490>
 80073ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80073be:	428b      	cmp	r3, r1
 80073c0:	bf86      	itte	hi
 80073c2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800745c <_strtod_l+0x5b4>
 80073c6:	f04f 3aff 	movhi.w	sl, #4294967295
 80073ca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80073ce:	2300      	movs	r3, #0
 80073d0:	9304      	str	r3, [sp, #16]
 80073d2:	e081      	b.n	80074d8 <_strtod_l+0x630>
 80073d4:	f018 0f01 	tst.w	r8, #1
 80073d8:	d007      	beq.n	80073ea <_strtod_l+0x542>
 80073da:	4b1d      	ldr	r3, [pc, #116]	; (8007450 <_strtod_l+0x5a8>)
 80073dc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80073e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e4:	f7f9 f918 	bl	8000618 <__aeabi_dmul>
 80073e8:	2301      	movs	r3, #1
 80073ea:	f109 0901 	add.w	r9, r9, #1
 80073ee:	ea4f 0868 	mov.w	r8, r8, asr #1
 80073f2:	e7ca      	b.n	800738a <_strtod_l+0x4e2>
 80073f4:	d0eb      	beq.n	80073ce <_strtod_l+0x526>
 80073f6:	f1c8 0800 	rsb	r8, r8, #0
 80073fa:	f018 020f 	ands.w	r2, r8, #15
 80073fe:	d00a      	beq.n	8007416 <_strtod_l+0x56e>
 8007400:	4b12      	ldr	r3, [pc, #72]	; (800744c <_strtod_l+0x5a4>)
 8007402:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007406:	4650      	mov	r0, sl
 8007408:	4659      	mov	r1, fp
 800740a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740e:	f7f9 fa2d 	bl	800086c <__aeabi_ddiv>
 8007412:	4682      	mov	sl, r0
 8007414:	468b      	mov	fp, r1
 8007416:	ea5f 1828 	movs.w	r8, r8, asr #4
 800741a:	d0d8      	beq.n	80073ce <_strtod_l+0x526>
 800741c:	f1b8 0f1f 	cmp.w	r8, #31
 8007420:	dd1e      	ble.n	8007460 <_strtod_l+0x5b8>
 8007422:	2500      	movs	r5, #0
 8007424:	462e      	mov	r6, r5
 8007426:	9509      	str	r5, [sp, #36]	; 0x24
 8007428:	9507      	str	r5, [sp, #28]
 800742a:	2322      	movs	r3, #34	; 0x22
 800742c:	f04f 0a00 	mov.w	sl, #0
 8007430:	f04f 0b00 	mov.w	fp, #0
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	e789      	b.n	800734c <_strtod_l+0x4a4>
 8007438:	0800ac39 	.word	0x0800ac39
 800743c:	0800ac7c 	.word	0x0800ac7c
 8007440:	0800ac31 	.word	0x0800ac31
 8007444:	0800adbc 	.word	0x0800adbc
 8007448:	0800b078 	.word	0x0800b078
 800744c:	0800af58 	.word	0x0800af58
 8007450:	0800af30 	.word	0x0800af30
 8007454:	7ff00000 	.word	0x7ff00000
 8007458:	7ca00000 	.word	0x7ca00000
 800745c:	7fefffff 	.word	0x7fefffff
 8007460:	f018 0310 	ands.w	r3, r8, #16
 8007464:	bf18      	it	ne
 8007466:	236a      	movne	r3, #106	; 0x6a
 8007468:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8007820 <_strtod_l+0x978>
 800746c:	9304      	str	r3, [sp, #16]
 800746e:	4650      	mov	r0, sl
 8007470:	4659      	mov	r1, fp
 8007472:	2300      	movs	r3, #0
 8007474:	f018 0f01 	tst.w	r8, #1
 8007478:	d004      	beq.n	8007484 <_strtod_l+0x5dc>
 800747a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800747e:	f7f9 f8cb 	bl	8000618 <__aeabi_dmul>
 8007482:	2301      	movs	r3, #1
 8007484:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007488:	f109 0908 	add.w	r9, r9, #8
 800748c:	d1f2      	bne.n	8007474 <_strtod_l+0x5cc>
 800748e:	b10b      	cbz	r3, 8007494 <_strtod_l+0x5ec>
 8007490:	4682      	mov	sl, r0
 8007492:	468b      	mov	fp, r1
 8007494:	9b04      	ldr	r3, [sp, #16]
 8007496:	b1bb      	cbz	r3, 80074c8 <_strtod_l+0x620>
 8007498:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800749c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	4659      	mov	r1, fp
 80074a4:	dd10      	ble.n	80074c8 <_strtod_l+0x620>
 80074a6:	2b1f      	cmp	r3, #31
 80074a8:	f340 8128 	ble.w	80076fc <_strtod_l+0x854>
 80074ac:	2b34      	cmp	r3, #52	; 0x34
 80074ae:	bfde      	ittt	le
 80074b0:	3b20      	suble	r3, #32
 80074b2:	f04f 32ff 	movle.w	r2, #4294967295
 80074b6:	fa02 f303 	lslle.w	r3, r2, r3
 80074ba:	f04f 0a00 	mov.w	sl, #0
 80074be:	bfcc      	ite	gt
 80074c0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80074c4:	ea03 0b01 	andle.w	fp, r3, r1
 80074c8:	2200      	movs	r2, #0
 80074ca:	2300      	movs	r3, #0
 80074cc:	4650      	mov	r0, sl
 80074ce:	4659      	mov	r1, fp
 80074d0:	f7f9 fb0a 	bl	8000ae8 <__aeabi_dcmpeq>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	d1a4      	bne.n	8007422 <_strtod_l+0x57a>
 80074d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074da:	9300      	str	r3, [sp, #0]
 80074dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80074de:	462b      	mov	r3, r5
 80074e0:	463a      	mov	r2, r7
 80074e2:	4620      	mov	r0, r4
 80074e4:	f001 fe38 	bl	8009158 <__s2b>
 80074e8:	9009      	str	r0, [sp, #36]	; 0x24
 80074ea:	2800      	cmp	r0, #0
 80074ec:	f43f af24 	beq.w	8007338 <_strtod_l+0x490>
 80074f0:	9b07      	ldr	r3, [sp, #28]
 80074f2:	1b9e      	subs	r6, r3, r6
 80074f4:	9b08      	ldr	r3, [sp, #32]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	bfb4      	ite	lt
 80074fa:	4633      	movlt	r3, r6
 80074fc:	2300      	movge	r3, #0
 80074fe:	9310      	str	r3, [sp, #64]	; 0x40
 8007500:	9b08      	ldr	r3, [sp, #32]
 8007502:	2500      	movs	r5, #0
 8007504:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007508:	9318      	str	r3, [sp, #96]	; 0x60
 800750a:	462e      	mov	r6, r5
 800750c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800750e:	4620      	mov	r0, r4
 8007510:	6859      	ldr	r1, [r3, #4]
 8007512:	f001 fd75 	bl	8009000 <_Balloc>
 8007516:	9007      	str	r0, [sp, #28]
 8007518:	2800      	cmp	r0, #0
 800751a:	f43f af11 	beq.w	8007340 <_strtod_l+0x498>
 800751e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007520:	691a      	ldr	r2, [r3, #16]
 8007522:	3202      	adds	r2, #2
 8007524:	f103 010c 	add.w	r1, r3, #12
 8007528:	0092      	lsls	r2, r2, #2
 800752a:	300c      	adds	r0, #12
 800752c:	f001 fd5a 	bl	8008fe4 <memcpy>
 8007530:	ec4b ab10 	vmov	d0, sl, fp
 8007534:	aa20      	add	r2, sp, #128	; 0x80
 8007536:	a91f      	add	r1, sp, #124	; 0x7c
 8007538:	4620      	mov	r0, r4
 800753a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800753e:	f002 f947 	bl	80097d0 <__d2b>
 8007542:	901e      	str	r0, [sp, #120]	; 0x78
 8007544:	2800      	cmp	r0, #0
 8007546:	f43f aefb 	beq.w	8007340 <_strtod_l+0x498>
 800754a:	2101      	movs	r1, #1
 800754c:	4620      	mov	r0, r4
 800754e:	f001 fe9d 	bl	800928c <__i2b>
 8007552:	4606      	mov	r6, r0
 8007554:	2800      	cmp	r0, #0
 8007556:	f43f aef3 	beq.w	8007340 <_strtod_l+0x498>
 800755a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800755c:	9904      	ldr	r1, [sp, #16]
 800755e:	2b00      	cmp	r3, #0
 8007560:	bfab      	itete	ge
 8007562:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8007564:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8007566:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8007568:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800756c:	bfac      	ite	ge
 800756e:	eb03 0902 	addge.w	r9, r3, r2
 8007572:	1ad7      	sublt	r7, r2, r3
 8007574:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007576:	eba3 0801 	sub.w	r8, r3, r1
 800757a:	4490      	add	r8, r2
 800757c:	4ba3      	ldr	r3, [pc, #652]	; (800780c <_strtod_l+0x964>)
 800757e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007582:	4598      	cmp	r8, r3
 8007584:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007588:	f280 80cc 	bge.w	8007724 <_strtod_l+0x87c>
 800758c:	eba3 0308 	sub.w	r3, r3, r8
 8007590:	2b1f      	cmp	r3, #31
 8007592:	eba2 0203 	sub.w	r2, r2, r3
 8007596:	f04f 0101 	mov.w	r1, #1
 800759a:	f300 80b6 	bgt.w	800770a <_strtod_l+0x862>
 800759e:	fa01 f303 	lsl.w	r3, r1, r3
 80075a2:	9311      	str	r3, [sp, #68]	; 0x44
 80075a4:	2300      	movs	r3, #0
 80075a6:	930c      	str	r3, [sp, #48]	; 0x30
 80075a8:	eb09 0802 	add.w	r8, r9, r2
 80075ac:	9b04      	ldr	r3, [sp, #16]
 80075ae:	45c1      	cmp	r9, r8
 80075b0:	4417      	add	r7, r2
 80075b2:	441f      	add	r7, r3
 80075b4:	464b      	mov	r3, r9
 80075b6:	bfa8      	it	ge
 80075b8:	4643      	movge	r3, r8
 80075ba:	42bb      	cmp	r3, r7
 80075bc:	bfa8      	it	ge
 80075be:	463b      	movge	r3, r7
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	bfc2      	ittt	gt
 80075c4:	eba8 0803 	subgt.w	r8, r8, r3
 80075c8:	1aff      	subgt	r7, r7, r3
 80075ca:	eba9 0903 	subgt.w	r9, r9, r3
 80075ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	dd17      	ble.n	8007604 <_strtod_l+0x75c>
 80075d4:	4631      	mov	r1, r6
 80075d6:	461a      	mov	r2, r3
 80075d8:	4620      	mov	r0, r4
 80075da:	f001 ff13 	bl	8009404 <__pow5mult>
 80075de:	4606      	mov	r6, r0
 80075e0:	2800      	cmp	r0, #0
 80075e2:	f43f aead 	beq.w	8007340 <_strtod_l+0x498>
 80075e6:	4601      	mov	r1, r0
 80075e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80075ea:	4620      	mov	r0, r4
 80075ec:	f001 fe64 	bl	80092b8 <__multiply>
 80075f0:	900f      	str	r0, [sp, #60]	; 0x3c
 80075f2:	2800      	cmp	r0, #0
 80075f4:	f43f aea4 	beq.w	8007340 <_strtod_l+0x498>
 80075f8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80075fa:	4620      	mov	r0, r4
 80075fc:	f001 fd40 	bl	8009080 <_Bfree>
 8007600:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007602:	931e      	str	r3, [sp, #120]	; 0x78
 8007604:	f1b8 0f00 	cmp.w	r8, #0
 8007608:	f300 8091 	bgt.w	800772e <_strtod_l+0x886>
 800760c:	9b08      	ldr	r3, [sp, #32]
 800760e:	2b00      	cmp	r3, #0
 8007610:	dd08      	ble.n	8007624 <_strtod_l+0x77c>
 8007612:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007614:	9907      	ldr	r1, [sp, #28]
 8007616:	4620      	mov	r0, r4
 8007618:	f001 fef4 	bl	8009404 <__pow5mult>
 800761c:	9007      	str	r0, [sp, #28]
 800761e:	2800      	cmp	r0, #0
 8007620:	f43f ae8e 	beq.w	8007340 <_strtod_l+0x498>
 8007624:	2f00      	cmp	r7, #0
 8007626:	dd08      	ble.n	800763a <_strtod_l+0x792>
 8007628:	9907      	ldr	r1, [sp, #28]
 800762a:	463a      	mov	r2, r7
 800762c:	4620      	mov	r0, r4
 800762e:	f001 ff43 	bl	80094b8 <__lshift>
 8007632:	9007      	str	r0, [sp, #28]
 8007634:	2800      	cmp	r0, #0
 8007636:	f43f ae83 	beq.w	8007340 <_strtod_l+0x498>
 800763a:	f1b9 0f00 	cmp.w	r9, #0
 800763e:	dd08      	ble.n	8007652 <_strtod_l+0x7aa>
 8007640:	4631      	mov	r1, r6
 8007642:	464a      	mov	r2, r9
 8007644:	4620      	mov	r0, r4
 8007646:	f001 ff37 	bl	80094b8 <__lshift>
 800764a:	4606      	mov	r6, r0
 800764c:	2800      	cmp	r0, #0
 800764e:	f43f ae77 	beq.w	8007340 <_strtod_l+0x498>
 8007652:	9a07      	ldr	r2, [sp, #28]
 8007654:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007656:	4620      	mov	r0, r4
 8007658:	f001 ffb6 	bl	80095c8 <__mdiff>
 800765c:	4605      	mov	r5, r0
 800765e:	2800      	cmp	r0, #0
 8007660:	f43f ae6e 	beq.w	8007340 <_strtod_l+0x498>
 8007664:	68c3      	ldr	r3, [r0, #12]
 8007666:	930f      	str	r3, [sp, #60]	; 0x3c
 8007668:	2300      	movs	r3, #0
 800766a:	60c3      	str	r3, [r0, #12]
 800766c:	4631      	mov	r1, r6
 800766e:	f001 ff8f 	bl	8009590 <__mcmp>
 8007672:	2800      	cmp	r0, #0
 8007674:	da65      	bge.n	8007742 <_strtod_l+0x89a>
 8007676:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007678:	ea53 030a 	orrs.w	r3, r3, sl
 800767c:	f040 8087 	bne.w	800778e <_strtod_l+0x8e6>
 8007680:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007684:	2b00      	cmp	r3, #0
 8007686:	f040 8082 	bne.w	800778e <_strtod_l+0x8e6>
 800768a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800768e:	0d1b      	lsrs	r3, r3, #20
 8007690:	051b      	lsls	r3, r3, #20
 8007692:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007696:	d97a      	bls.n	800778e <_strtod_l+0x8e6>
 8007698:	696b      	ldr	r3, [r5, #20]
 800769a:	b913      	cbnz	r3, 80076a2 <_strtod_l+0x7fa>
 800769c:	692b      	ldr	r3, [r5, #16]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	dd75      	ble.n	800778e <_strtod_l+0x8e6>
 80076a2:	4629      	mov	r1, r5
 80076a4:	2201      	movs	r2, #1
 80076a6:	4620      	mov	r0, r4
 80076a8:	f001 ff06 	bl	80094b8 <__lshift>
 80076ac:	4631      	mov	r1, r6
 80076ae:	4605      	mov	r5, r0
 80076b0:	f001 ff6e 	bl	8009590 <__mcmp>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	dd6a      	ble.n	800778e <_strtod_l+0x8e6>
 80076b8:	9904      	ldr	r1, [sp, #16]
 80076ba:	4a55      	ldr	r2, [pc, #340]	; (8007810 <_strtod_l+0x968>)
 80076bc:	465b      	mov	r3, fp
 80076be:	2900      	cmp	r1, #0
 80076c0:	f000 8085 	beq.w	80077ce <_strtod_l+0x926>
 80076c4:	ea02 010b 	and.w	r1, r2, fp
 80076c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80076cc:	dc7f      	bgt.n	80077ce <_strtod_l+0x926>
 80076ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80076d2:	f77f aeaa 	ble.w	800742a <_strtod_l+0x582>
 80076d6:	4a4f      	ldr	r2, [pc, #316]	; (8007814 <_strtod_l+0x96c>)
 80076d8:	2300      	movs	r3, #0
 80076da:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80076de:	4650      	mov	r0, sl
 80076e0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80076e4:	4659      	mov	r1, fp
 80076e6:	f7f8 ff97 	bl	8000618 <__aeabi_dmul>
 80076ea:	460b      	mov	r3, r1
 80076ec:	4303      	orrs	r3, r0
 80076ee:	bf08      	it	eq
 80076f0:	2322      	moveq	r3, #34	; 0x22
 80076f2:	4682      	mov	sl, r0
 80076f4:	468b      	mov	fp, r1
 80076f6:	bf08      	it	eq
 80076f8:	6023      	streq	r3, [r4, #0]
 80076fa:	e62b      	b.n	8007354 <_strtod_l+0x4ac>
 80076fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007700:	fa02 f303 	lsl.w	r3, r2, r3
 8007704:	ea03 0a0a 	and.w	sl, r3, sl
 8007708:	e6de      	b.n	80074c8 <_strtod_l+0x620>
 800770a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800770e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007712:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007716:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800771a:	fa01 f308 	lsl.w	r3, r1, r8
 800771e:	930c      	str	r3, [sp, #48]	; 0x30
 8007720:	9111      	str	r1, [sp, #68]	; 0x44
 8007722:	e741      	b.n	80075a8 <_strtod_l+0x700>
 8007724:	2300      	movs	r3, #0
 8007726:	930c      	str	r3, [sp, #48]	; 0x30
 8007728:	2301      	movs	r3, #1
 800772a:	9311      	str	r3, [sp, #68]	; 0x44
 800772c:	e73c      	b.n	80075a8 <_strtod_l+0x700>
 800772e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007730:	4642      	mov	r2, r8
 8007732:	4620      	mov	r0, r4
 8007734:	f001 fec0 	bl	80094b8 <__lshift>
 8007738:	901e      	str	r0, [sp, #120]	; 0x78
 800773a:	2800      	cmp	r0, #0
 800773c:	f47f af66 	bne.w	800760c <_strtod_l+0x764>
 8007740:	e5fe      	b.n	8007340 <_strtod_l+0x498>
 8007742:	465f      	mov	r7, fp
 8007744:	d16e      	bne.n	8007824 <_strtod_l+0x97c>
 8007746:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007748:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800774c:	b342      	cbz	r2, 80077a0 <_strtod_l+0x8f8>
 800774e:	4a32      	ldr	r2, [pc, #200]	; (8007818 <_strtod_l+0x970>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d128      	bne.n	80077a6 <_strtod_l+0x8fe>
 8007754:	9b04      	ldr	r3, [sp, #16]
 8007756:	4650      	mov	r0, sl
 8007758:	b1eb      	cbz	r3, 8007796 <_strtod_l+0x8ee>
 800775a:	4a2d      	ldr	r2, [pc, #180]	; (8007810 <_strtod_l+0x968>)
 800775c:	403a      	ands	r2, r7
 800775e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007762:	f04f 31ff 	mov.w	r1, #4294967295
 8007766:	d819      	bhi.n	800779c <_strtod_l+0x8f4>
 8007768:	0d12      	lsrs	r2, r2, #20
 800776a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800776e:	fa01 f303 	lsl.w	r3, r1, r3
 8007772:	4298      	cmp	r0, r3
 8007774:	d117      	bne.n	80077a6 <_strtod_l+0x8fe>
 8007776:	4b29      	ldr	r3, [pc, #164]	; (800781c <_strtod_l+0x974>)
 8007778:	429f      	cmp	r7, r3
 800777a:	d102      	bne.n	8007782 <_strtod_l+0x8da>
 800777c:	3001      	adds	r0, #1
 800777e:	f43f addf 	beq.w	8007340 <_strtod_l+0x498>
 8007782:	4b23      	ldr	r3, [pc, #140]	; (8007810 <_strtod_l+0x968>)
 8007784:	403b      	ands	r3, r7
 8007786:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800778a:	f04f 0a00 	mov.w	sl, #0
 800778e:	9b04      	ldr	r3, [sp, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1a0      	bne.n	80076d6 <_strtod_l+0x82e>
 8007794:	e5de      	b.n	8007354 <_strtod_l+0x4ac>
 8007796:	f04f 33ff 	mov.w	r3, #4294967295
 800779a:	e7ea      	b.n	8007772 <_strtod_l+0x8ca>
 800779c:	460b      	mov	r3, r1
 800779e:	e7e8      	b.n	8007772 <_strtod_l+0x8ca>
 80077a0:	ea53 030a 	orrs.w	r3, r3, sl
 80077a4:	d088      	beq.n	80076b8 <_strtod_l+0x810>
 80077a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077a8:	b1db      	cbz	r3, 80077e2 <_strtod_l+0x93a>
 80077aa:	423b      	tst	r3, r7
 80077ac:	d0ef      	beq.n	800778e <_strtod_l+0x8e6>
 80077ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077b0:	9a04      	ldr	r2, [sp, #16]
 80077b2:	4650      	mov	r0, sl
 80077b4:	4659      	mov	r1, fp
 80077b6:	b1c3      	cbz	r3, 80077ea <_strtod_l+0x942>
 80077b8:	f7ff fb58 	bl	8006e6c <sulp>
 80077bc:	4602      	mov	r2, r0
 80077be:	460b      	mov	r3, r1
 80077c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80077c4:	f7f8 fd72 	bl	80002ac <__adddf3>
 80077c8:	4682      	mov	sl, r0
 80077ca:	468b      	mov	fp, r1
 80077cc:	e7df      	b.n	800778e <_strtod_l+0x8e6>
 80077ce:	4013      	ands	r3, r2
 80077d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80077d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80077d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80077dc:	f04f 3aff 	mov.w	sl, #4294967295
 80077e0:	e7d5      	b.n	800778e <_strtod_l+0x8e6>
 80077e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077e4:	ea13 0f0a 	tst.w	r3, sl
 80077e8:	e7e0      	b.n	80077ac <_strtod_l+0x904>
 80077ea:	f7ff fb3f 	bl	8006e6c <sulp>
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80077f6:	f7f8 fd57 	bl	80002a8 <__aeabi_dsub>
 80077fa:	2200      	movs	r2, #0
 80077fc:	2300      	movs	r3, #0
 80077fe:	4682      	mov	sl, r0
 8007800:	468b      	mov	fp, r1
 8007802:	f7f9 f971 	bl	8000ae8 <__aeabi_dcmpeq>
 8007806:	2800      	cmp	r0, #0
 8007808:	d0c1      	beq.n	800778e <_strtod_l+0x8e6>
 800780a:	e60e      	b.n	800742a <_strtod_l+0x582>
 800780c:	fffffc02 	.word	0xfffffc02
 8007810:	7ff00000 	.word	0x7ff00000
 8007814:	39500000 	.word	0x39500000
 8007818:	000fffff 	.word	0x000fffff
 800781c:	7fefffff 	.word	0x7fefffff
 8007820:	0800ac90 	.word	0x0800ac90
 8007824:	4631      	mov	r1, r6
 8007826:	4628      	mov	r0, r5
 8007828:	f002 f82e 	bl	8009888 <__ratio>
 800782c:	ec59 8b10 	vmov	r8, r9, d0
 8007830:	ee10 0a10 	vmov	r0, s0
 8007834:	2200      	movs	r2, #0
 8007836:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800783a:	4649      	mov	r1, r9
 800783c:	f7f9 f968 	bl	8000b10 <__aeabi_dcmple>
 8007840:	2800      	cmp	r0, #0
 8007842:	d07c      	beq.n	800793e <_strtod_l+0xa96>
 8007844:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007846:	2b00      	cmp	r3, #0
 8007848:	d04c      	beq.n	80078e4 <_strtod_l+0xa3c>
 800784a:	4b95      	ldr	r3, [pc, #596]	; (8007aa0 <_strtod_l+0xbf8>)
 800784c:	2200      	movs	r2, #0
 800784e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007852:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007aa0 <_strtod_l+0xbf8>
 8007856:	f04f 0800 	mov.w	r8, #0
 800785a:	4b92      	ldr	r3, [pc, #584]	; (8007aa4 <_strtod_l+0xbfc>)
 800785c:	403b      	ands	r3, r7
 800785e:	9311      	str	r3, [sp, #68]	; 0x44
 8007860:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007862:	4b91      	ldr	r3, [pc, #580]	; (8007aa8 <_strtod_l+0xc00>)
 8007864:	429a      	cmp	r2, r3
 8007866:	f040 80b2 	bne.w	80079ce <_strtod_l+0xb26>
 800786a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800786e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007872:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007876:	ec4b ab10 	vmov	d0, sl, fp
 800787a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800787e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007882:	f001 ff29 	bl	80096d8 <__ulp>
 8007886:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800788a:	ec53 2b10 	vmov	r2, r3, d0
 800788e:	f7f8 fec3 	bl	8000618 <__aeabi_dmul>
 8007892:	4652      	mov	r2, sl
 8007894:	465b      	mov	r3, fp
 8007896:	f7f8 fd09 	bl	80002ac <__adddf3>
 800789a:	460b      	mov	r3, r1
 800789c:	4981      	ldr	r1, [pc, #516]	; (8007aa4 <_strtod_l+0xbfc>)
 800789e:	4a83      	ldr	r2, [pc, #524]	; (8007aac <_strtod_l+0xc04>)
 80078a0:	4019      	ands	r1, r3
 80078a2:	4291      	cmp	r1, r2
 80078a4:	4682      	mov	sl, r0
 80078a6:	d95e      	bls.n	8007966 <_strtod_l+0xabe>
 80078a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078aa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d103      	bne.n	80078ba <_strtod_l+0xa12>
 80078b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078b4:	3301      	adds	r3, #1
 80078b6:	f43f ad43 	beq.w	8007340 <_strtod_l+0x498>
 80078ba:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007ab8 <_strtod_l+0xc10>
 80078be:	f04f 3aff 	mov.w	sl, #4294967295
 80078c2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80078c4:	4620      	mov	r0, r4
 80078c6:	f001 fbdb 	bl	8009080 <_Bfree>
 80078ca:	9907      	ldr	r1, [sp, #28]
 80078cc:	4620      	mov	r0, r4
 80078ce:	f001 fbd7 	bl	8009080 <_Bfree>
 80078d2:	4631      	mov	r1, r6
 80078d4:	4620      	mov	r0, r4
 80078d6:	f001 fbd3 	bl	8009080 <_Bfree>
 80078da:	4629      	mov	r1, r5
 80078dc:	4620      	mov	r0, r4
 80078de:	f001 fbcf 	bl	8009080 <_Bfree>
 80078e2:	e613      	b.n	800750c <_strtod_l+0x664>
 80078e4:	f1ba 0f00 	cmp.w	sl, #0
 80078e8:	d11b      	bne.n	8007922 <_strtod_l+0xa7a>
 80078ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078ee:	b9f3      	cbnz	r3, 800792e <_strtod_l+0xa86>
 80078f0:	4b6b      	ldr	r3, [pc, #428]	; (8007aa0 <_strtod_l+0xbf8>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	4640      	mov	r0, r8
 80078f6:	4649      	mov	r1, r9
 80078f8:	f7f9 f900 	bl	8000afc <__aeabi_dcmplt>
 80078fc:	b9d0      	cbnz	r0, 8007934 <_strtod_l+0xa8c>
 80078fe:	4640      	mov	r0, r8
 8007900:	4649      	mov	r1, r9
 8007902:	4b6b      	ldr	r3, [pc, #428]	; (8007ab0 <_strtod_l+0xc08>)
 8007904:	2200      	movs	r2, #0
 8007906:	f7f8 fe87 	bl	8000618 <__aeabi_dmul>
 800790a:	4680      	mov	r8, r0
 800790c:	4689      	mov	r9, r1
 800790e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007912:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8007916:	931b      	str	r3, [sp, #108]	; 0x6c
 8007918:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800791c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007920:	e79b      	b.n	800785a <_strtod_l+0x9b2>
 8007922:	f1ba 0f01 	cmp.w	sl, #1
 8007926:	d102      	bne.n	800792e <_strtod_l+0xa86>
 8007928:	2f00      	cmp	r7, #0
 800792a:	f43f ad7e 	beq.w	800742a <_strtod_l+0x582>
 800792e:	4b61      	ldr	r3, [pc, #388]	; (8007ab4 <_strtod_l+0xc0c>)
 8007930:	2200      	movs	r2, #0
 8007932:	e78c      	b.n	800784e <_strtod_l+0x9a6>
 8007934:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007ab0 <_strtod_l+0xc08>
 8007938:	f04f 0800 	mov.w	r8, #0
 800793c:	e7e7      	b.n	800790e <_strtod_l+0xa66>
 800793e:	4b5c      	ldr	r3, [pc, #368]	; (8007ab0 <_strtod_l+0xc08>)
 8007940:	4640      	mov	r0, r8
 8007942:	4649      	mov	r1, r9
 8007944:	2200      	movs	r2, #0
 8007946:	f7f8 fe67 	bl	8000618 <__aeabi_dmul>
 800794a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800794c:	4680      	mov	r8, r0
 800794e:	4689      	mov	r9, r1
 8007950:	b933      	cbnz	r3, 8007960 <_strtod_l+0xab8>
 8007952:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007956:	9012      	str	r0, [sp, #72]	; 0x48
 8007958:	9313      	str	r3, [sp, #76]	; 0x4c
 800795a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800795e:	e7dd      	b.n	800791c <_strtod_l+0xa74>
 8007960:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8007964:	e7f9      	b.n	800795a <_strtod_l+0xab2>
 8007966:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800796a:	9b04      	ldr	r3, [sp, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1a8      	bne.n	80078c2 <_strtod_l+0xa1a>
 8007970:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007974:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007976:	0d1b      	lsrs	r3, r3, #20
 8007978:	051b      	lsls	r3, r3, #20
 800797a:	429a      	cmp	r2, r3
 800797c:	d1a1      	bne.n	80078c2 <_strtod_l+0xa1a>
 800797e:	4640      	mov	r0, r8
 8007980:	4649      	mov	r1, r9
 8007982:	f7f9 f9a9 	bl	8000cd8 <__aeabi_d2lz>
 8007986:	f7f8 fe19 	bl	80005bc <__aeabi_l2d>
 800798a:	4602      	mov	r2, r0
 800798c:	460b      	mov	r3, r1
 800798e:	4640      	mov	r0, r8
 8007990:	4649      	mov	r1, r9
 8007992:	f7f8 fc89 	bl	80002a8 <__aeabi_dsub>
 8007996:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007998:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800799c:	ea43 030a 	orr.w	r3, r3, sl
 80079a0:	4313      	orrs	r3, r2
 80079a2:	4680      	mov	r8, r0
 80079a4:	4689      	mov	r9, r1
 80079a6:	d053      	beq.n	8007a50 <_strtod_l+0xba8>
 80079a8:	a335      	add	r3, pc, #212	; (adr r3, 8007a80 <_strtod_l+0xbd8>)
 80079aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ae:	f7f9 f8a5 	bl	8000afc <__aeabi_dcmplt>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	f47f acce 	bne.w	8007354 <_strtod_l+0x4ac>
 80079b8:	a333      	add	r3, pc, #204	; (adr r3, 8007a88 <_strtod_l+0xbe0>)
 80079ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079be:	4640      	mov	r0, r8
 80079c0:	4649      	mov	r1, r9
 80079c2:	f7f9 f8b9 	bl	8000b38 <__aeabi_dcmpgt>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	f43f af7b 	beq.w	80078c2 <_strtod_l+0xa1a>
 80079cc:	e4c2      	b.n	8007354 <_strtod_l+0x4ac>
 80079ce:	9b04      	ldr	r3, [sp, #16]
 80079d0:	b333      	cbz	r3, 8007a20 <_strtod_l+0xb78>
 80079d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80079d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80079d8:	d822      	bhi.n	8007a20 <_strtod_l+0xb78>
 80079da:	a32d      	add	r3, pc, #180	; (adr r3, 8007a90 <_strtod_l+0xbe8>)
 80079dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e0:	4640      	mov	r0, r8
 80079e2:	4649      	mov	r1, r9
 80079e4:	f7f9 f894 	bl	8000b10 <__aeabi_dcmple>
 80079e8:	b1a0      	cbz	r0, 8007a14 <_strtod_l+0xb6c>
 80079ea:	4649      	mov	r1, r9
 80079ec:	4640      	mov	r0, r8
 80079ee:	f7f9 f8eb 	bl	8000bc8 <__aeabi_d2uiz>
 80079f2:	2801      	cmp	r0, #1
 80079f4:	bf38      	it	cc
 80079f6:	2001      	movcc	r0, #1
 80079f8:	f7f8 fd94 	bl	8000524 <__aeabi_ui2d>
 80079fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079fe:	4680      	mov	r8, r0
 8007a00:	4689      	mov	r9, r1
 8007a02:	bb13      	cbnz	r3, 8007a4a <_strtod_l+0xba2>
 8007a04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a08:	9014      	str	r0, [sp, #80]	; 0x50
 8007a0a:	9315      	str	r3, [sp, #84]	; 0x54
 8007a0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007a10:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007a14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007a18:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007a1c:	1a9b      	subs	r3, r3, r2
 8007a1e:	930d      	str	r3, [sp, #52]	; 0x34
 8007a20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a24:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007a28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007a2c:	f001 fe54 	bl	80096d8 <__ulp>
 8007a30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007a34:	ec53 2b10 	vmov	r2, r3, d0
 8007a38:	f7f8 fdee 	bl	8000618 <__aeabi_dmul>
 8007a3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007a40:	f7f8 fc34 	bl	80002ac <__adddf3>
 8007a44:	4682      	mov	sl, r0
 8007a46:	468b      	mov	fp, r1
 8007a48:	e78f      	b.n	800796a <_strtod_l+0xac2>
 8007a4a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8007a4e:	e7dd      	b.n	8007a0c <_strtod_l+0xb64>
 8007a50:	a311      	add	r3, pc, #68	; (adr r3, 8007a98 <_strtod_l+0xbf0>)
 8007a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a56:	f7f9 f851 	bl	8000afc <__aeabi_dcmplt>
 8007a5a:	e7b4      	b.n	80079c6 <_strtod_l+0xb1e>
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	930e      	str	r3, [sp, #56]	; 0x38
 8007a60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007a62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a64:	6013      	str	r3, [r2, #0]
 8007a66:	f7ff ba65 	b.w	8006f34 <_strtod_l+0x8c>
 8007a6a:	2b65      	cmp	r3, #101	; 0x65
 8007a6c:	f43f ab5d 	beq.w	800712a <_strtod_l+0x282>
 8007a70:	2b45      	cmp	r3, #69	; 0x45
 8007a72:	f43f ab5a 	beq.w	800712a <_strtod_l+0x282>
 8007a76:	2201      	movs	r2, #1
 8007a78:	f7ff bb92 	b.w	80071a0 <_strtod_l+0x2f8>
 8007a7c:	f3af 8000 	nop.w
 8007a80:	94a03595 	.word	0x94a03595
 8007a84:	3fdfffff 	.word	0x3fdfffff
 8007a88:	35afe535 	.word	0x35afe535
 8007a8c:	3fe00000 	.word	0x3fe00000
 8007a90:	ffc00000 	.word	0xffc00000
 8007a94:	41dfffff 	.word	0x41dfffff
 8007a98:	94a03595 	.word	0x94a03595
 8007a9c:	3fcfffff 	.word	0x3fcfffff
 8007aa0:	3ff00000 	.word	0x3ff00000
 8007aa4:	7ff00000 	.word	0x7ff00000
 8007aa8:	7fe00000 	.word	0x7fe00000
 8007aac:	7c9fffff 	.word	0x7c9fffff
 8007ab0:	3fe00000 	.word	0x3fe00000
 8007ab4:	bff00000 	.word	0xbff00000
 8007ab8:	7fefffff 	.word	0x7fefffff

08007abc <_strtod_r>:
 8007abc:	4b01      	ldr	r3, [pc, #4]	; (8007ac4 <_strtod_r+0x8>)
 8007abe:	f7ff b9f3 	b.w	8006ea8 <_strtod_l>
 8007ac2:	bf00      	nop
 8007ac4:	2000007c 	.word	0x2000007c

08007ac8 <_strtol_l.isra.0>:
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ace:	d001      	beq.n	8007ad4 <_strtol_l.isra.0+0xc>
 8007ad0:	2b24      	cmp	r3, #36	; 0x24
 8007ad2:	d906      	bls.n	8007ae2 <_strtol_l.isra.0+0x1a>
 8007ad4:	f7fe faf8 	bl	80060c8 <__errno>
 8007ad8:	2316      	movs	r3, #22
 8007ada:	6003      	str	r3, [r0, #0]
 8007adc:	2000      	movs	r0, #0
 8007ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae2:	4f3a      	ldr	r7, [pc, #232]	; (8007bcc <_strtol_l.isra.0+0x104>)
 8007ae4:	468e      	mov	lr, r1
 8007ae6:	4676      	mov	r6, lr
 8007ae8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007aec:	5de5      	ldrb	r5, [r4, r7]
 8007aee:	f015 0508 	ands.w	r5, r5, #8
 8007af2:	d1f8      	bne.n	8007ae6 <_strtol_l.isra.0+0x1e>
 8007af4:	2c2d      	cmp	r4, #45	; 0x2d
 8007af6:	d134      	bne.n	8007b62 <_strtol_l.isra.0+0x9a>
 8007af8:	f89e 4000 	ldrb.w	r4, [lr]
 8007afc:	f04f 0801 	mov.w	r8, #1
 8007b00:	f106 0e02 	add.w	lr, r6, #2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d05c      	beq.n	8007bc2 <_strtol_l.isra.0+0xfa>
 8007b08:	2b10      	cmp	r3, #16
 8007b0a:	d10c      	bne.n	8007b26 <_strtol_l.isra.0+0x5e>
 8007b0c:	2c30      	cmp	r4, #48	; 0x30
 8007b0e:	d10a      	bne.n	8007b26 <_strtol_l.isra.0+0x5e>
 8007b10:	f89e 4000 	ldrb.w	r4, [lr]
 8007b14:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007b18:	2c58      	cmp	r4, #88	; 0x58
 8007b1a:	d14d      	bne.n	8007bb8 <_strtol_l.isra.0+0xf0>
 8007b1c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007b20:	2310      	movs	r3, #16
 8007b22:	f10e 0e02 	add.w	lr, lr, #2
 8007b26:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007b2a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007b2e:	2600      	movs	r6, #0
 8007b30:	fbbc f9f3 	udiv	r9, ip, r3
 8007b34:	4635      	mov	r5, r6
 8007b36:	fb03 ca19 	mls	sl, r3, r9, ip
 8007b3a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007b3e:	2f09      	cmp	r7, #9
 8007b40:	d818      	bhi.n	8007b74 <_strtol_l.isra.0+0xac>
 8007b42:	463c      	mov	r4, r7
 8007b44:	42a3      	cmp	r3, r4
 8007b46:	dd24      	ble.n	8007b92 <_strtol_l.isra.0+0xca>
 8007b48:	2e00      	cmp	r6, #0
 8007b4a:	db1f      	blt.n	8007b8c <_strtol_l.isra.0+0xc4>
 8007b4c:	45a9      	cmp	r9, r5
 8007b4e:	d31d      	bcc.n	8007b8c <_strtol_l.isra.0+0xc4>
 8007b50:	d101      	bne.n	8007b56 <_strtol_l.isra.0+0x8e>
 8007b52:	45a2      	cmp	sl, r4
 8007b54:	db1a      	blt.n	8007b8c <_strtol_l.isra.0+0xc4>
 8007b56:	fb05 4503 	mla	r5, r5, r3, r4
 8007b5a:	2601      	movs	r6, #1
 8007b5c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007b60:	e7eb      	b.n	8007b3a <_strtol_l.isra.0+0x72>
 8007b62:	2c2b      	cmp	r4, #43	; 0x2b
 8007b64:	bf08      	it	eq
 8007b66:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007b6a:	46a8      	mov	r8, r5
 8007b6c:	bf08      	it	eq
 8007b6e:	f106 0e02 	addeq.w	lr, r6, #2
 8007b72:	e7c7      	b.n	8007b04 <_strtol_l.isra.0+0x3c>
 8007b74:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007b78:	2f19      	cmp	r7, #25
 8007b7a:	d801      	bhi.n	8007b80 <_strtol_l.isra.0+0xb8>
 8007b7c:	3c37      	subs	r4, #55	; 0x37
 8007b7e:	e7e1      	b.n	8007b44 <_strtol_l.isra.0+0x7c>
 8007b80:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007b84:	2f19      	cmp	r7, #25
 8007b86:	d804      	bhi.n	8007b92 <_strtol_l.isra.0+0xca>
 8007b88:	3c57      	subs	r4, #87	; 0x57
 8007b8a:	e7db      	b.n	8007b44 <_strtol_l.isra.0+0x7c>
 8007b8c:	f04f 36ff 	mov.w	r6, #4294967295
 8007b90:	e7e4      	b.n	8007b5c <_strtol_l.isra.0+0x94>
 8007b92:	2e00      	cmp	r6, #0
 8007b94:	da05      	bge.n	8007ba2 <_strtol_l.isra.0+0xda>
 8007b96:	2322      	movs	r3, #34	; 0x22
 8007b98:	6003      	str	r3, [r0, #0]
 8007b9a:	4665      	mov	r5, ip
 8007b9c:	b942      	cbnz	r2, 8007bb0 <_strtol_l.isra.0+0xe8>
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	e79d      	b.n	8007ade <_strtol_l.isra.0+0x16>
 8007ba2:	f1b8 0f00 	cmp.w	r8, #0
 8007ba6:	d000      	beq.n	8007baa <_strtol_l.isra.0+0xe2>
 8007ba8:	426d      	negs	r5, r5
 8007baa:	2a00      	cmp	r2, #0
 8007bac:	d0f7      	beq.n	8007b9e <_strtol_l.isra.0+0xd6>
 8007bae:	b10e      	cbz	r6, 8007bb4 <_strtol_l.isra.0+0xec>
 8007bb0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007bb4:	6011      	str	r1, [r2, #0]
 8007bb6:	e7f2      	b.n	8007b9e <_strtol_l.isra.0+0xd6>
 8007bb8:	2430      	movs	r4, #48	; 0x30
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1b3      	bne.n	8007b26 <_strtol_l.isra.0+0x5e>
 8007bbe:	2308      	movs	r3, #8
 8007bc0:	e7b1      	b.n	8007b26 <_strtol_l.isra.0+0x5e>
 8007bc2:	2c30      	cmp	r4, #48	; 0x30
 8007bc4:	d0a4      	beq.n	8007b10 <_strtol_l.isra.0+0x48>
 8007bc6:	230a      	movs	r3, #10
 8007bc8:	e7ad      	b.n	8007b26 <_strtol_l.isra.0+0x5e>
 8007bca:	bf00      	nop
 8007bcc:	0800acb9 	.word	0x0800acb9

08007bd0 <_strtol_r>:
 8007bd0:	f7ff bf7a 	b.w	8007ac8 <_strtol_l.isra.0>

08007bd4 <quorem>:
 8007bd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd8:	6903      	ldr	r3, [r0, #16]
 8007bda:	690c      	ldr	r4, [r1, #16]
 8007bdc:	42a3      	cmp	r3, r4
 8007bde:	4607      	mov	r7, r0
 8007be0:	f2c0 8081 	blt.w	8007ce6 <quorem+0x112>
 8007be4:	3c01      	subs	r4, #1
 8007be6:	f101 0814 	add.w	r8, r1, #20
 8007bea:	f100 0514 	add.w	r5, r0, #20
 8007bee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bf2:	9301      	str	r3, [sp, #4]
 8007bf4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bf8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c08:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c0c:	d331      	bcc.n	8007c72 <quorem+0x9e>
 8007c0e:	f04f 0e00 	mov.w	lr, #0
 8007c12:	4640      	mov	r0, r8
 8007c14:	46ac      	mov	ip, r5
 8007c16:	46f2      	mov	sl, lr
 8007c18:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c1c:	b293      	uxth	r3, r2
 8007c1e:	fb06 e303 	mla	r3, r6, r3, lr
 8007c22:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	ebaa 0303 	sub.w	r3, sl, r3
 8007c2c:	0c12      	lsrs	r2, r2, #16
 8007c2e:	f8dc a000 	ldr.w	sl, [ip]
 8007c32:	fb06 e202 	mla	r2, r6, r2, lr
 8007c36:	fa13 f38a 	uxtah	r3, r3, sl
 8007c3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c3e:	fa1f fa82 	uxth.w	sl, r2
 8007c42:	f8dc 2000 	ldr.w	r2, [ip]
 8007c46:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007c4a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c54:	4581      	cmp	r9, r0
 8007c56:	f84c 3b04 	str.w	r3, [ip], #4
 8007c5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c5e:	d2db      	bcs.n	8007c18 <quorem+0x44>
 8007c60:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c64:	b92b      	cbnz	r3, 8007c72 <quorem+0x9e>
 8007c66:	9b01      	ldr	r3, [sp, #4]
 8007c68:	3b04      	subs	r3, #4
 8007c6a:	429d      	cmp	r5, r3
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	d32e      	bcc.n	8007cce <quorem+0xfa>
 8007c70:	613c      	str	r4, [r7, #16]
 8007c72:	4638      	mov	r0, r7
 8007c74:	f001 fc8c 	bl	8009590 <__mcmp>
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	db24      	blt.n	8007cc6 <quorem+0xf2>
 8007c7c:	3601      	adds	r6, #1
 8007c7e:	4628      	mov	r0, r5
 8007c80:	f04f 0c00 	mov.w	ip, #0
 8007c84:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c88:	f8d0 e000 	ldr.w	lr, [r0]
 8007c8c:	b293      	uxth	r3, r2
 8007c8e:	ebac 0303 	sub.w	r3, ip, r3
 8007c92:	0c12      	lsrs	r2, r2, #16
 8007c94:	fa13 f38e 	uxtah	r3, r3, lr
 8007c98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ca0:	b29b      	uxth	r3, r3
 8007ca2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ca6:	45c1      	cmp	r9, r8
 8007ca8:	f840 3b04 	str.w	r3, [r0], #4
 8007cac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007cb0:	d2e8      	bcs.n	8007c84 <quorem+0xb0>
 8007cb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cba:	b922      	cbnz	r2, 8007cc6 <quorem+0xf2>
 8007cbc:	3b04      	subs	r3, #4
 8007cbe:	429d      	cmp	r5, r3
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	d30a      	bcc.n	8007cda <quorem+0x106>
 8007cc4:	613c      	str	r4, [r7, #16]
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	b003      	add	sp, #12
 8007cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cce:	6812      	ldr	r2, [r2, #0]
 8007cd0:	3b04      	subs	r3, #4
 8007cd2:	2a00      	cmp	r2, #0
 8007cd4:	d1cc      	bne.n	8007c70 <quorem+0x9c>
 8007cd6:	3c01      	subs	r4, #1
 8007cd8:	e7c7      	b.n	8007c6a <quorem+0x96>
 8007cda:	6812      	ldr	r2, [r2, #0]
 8007cdc:	3b04      	subs	r3, #4
 8007cde:	2a00      	cmp	r2, #0
 8007ce0:	d1f0      	bne.n	8007cc4 <quorem+0xf0>
 8007ce2:	3c01      	subs	r4, #1
 8007ce4:	e7eb      	b.n	8007cbe <quorem+0xea>
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	e7ee      	b.n	8007cc8 <quorem+0xf4>
 8007cea:	0000      	movs	r0, r0
 8007cec:	0000      	movs	r0, r0
	...

08007cf0 <_dtoa_r>:
 8007cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf4:	ed2d 8b02 	vpush	{d8}
 8007cf8:	ec57 6b10 	vmov	r6, r7, d0
 8007cfc:	b095      	sub	sp, #84	; 0x54
 8007cfe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007d00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007d04:	9105      	str	r1, [sp, #20]
 8007d06:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	9209      	str	r2, [sp, #36]	; 0x24
 8007d0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d10:	b975      	cbnz	r5, 8007d30 <_dtoa_r+0x40>
 8007d12:	2010      	movs	r0, #16
 8007d14:	f001 f94c 	bl	8008fb0 <malloc>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	6260      	str	r0, [r4, #36]	; 0x24
 8007d1c:	b920      	cbnz	r0, 8007d28 <_dtoa_r+0x38>
 8007d1e:	4bb2      	ldr	r3, [pc, #712]	; (8007fe8 <_dtoa_r+0x2f8>)
 8007d20:	21ea      	movs	r1, #234	; 0xea
 8007d22:	48b2      	ldr	r0, [pc, #712]	; (8007fec <_dtoa_r+0x2fc>)
 8007d24:	f002 f874 	bl	8009e10 <__assert_func>
 8007d28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d2c:	6005      	str	r5, [r0, #0]
 8007d2e:	60c5      	str	r5, [r0, #12]
 8007d30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d32:	6819      	ldr	r1, [r3, #0]
 8007d34:	b151      	cbz	r1, 8007d4c <_dtoa_r+0x5c>
 8007d36:	685a      	ldr	r2, [r3, #4]
 8007d38:	604a      	str	r2, [r1, #4]
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	4093      	lsls	r3, r2
 8007d3e:	608b      	str	r3, [r1, #8]
 8007d40:	4620      	mov	r0, r4
 8007d42:	f001 f99d 	bl	8009080 <_Bfree>
 8007d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d48:	2200      	movs	r2, #0
 8007d4a:	601a      	str	r2, [r3, #0]
 8007d4c:	1e3b      	subs	r3, r7, #0
 8007d4e:	bfb9      	ittee	lt
 8007d50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d54:	9303      	strlt	r3, [sp, #12]
 8007d56:	2300      	movge	r3, #0
 8007d58:	f8c8 3000 	strge.w	r3, [r8]
 8007d5c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007d60:	4ba3      	ldr	r3, [pc, #652]	; (8007ff0 <_dtoa_r+0x300>)
 8007d62:	bfbc      	itt	lt
 8007d64:	2201      	movlt	r2, #1
 8007d66:	f8c8 2000 	strlt.w	r2, [r8]
 8007d6a:	ea33 0309 	bics.w	r3, r3, r9
 8007d6e:	d11b      	bne.n	8007da8 <_dtoa_r+0xb8>
 8007d70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d72:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d76:	6013      	str	r3, [r2, #0]
 8007d78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d7c:	4333      	orrs	r3, r6
 8007d7e:	f000 857a 	beq.w	8008876 <_dtoa_r+0xb86>
 8007d82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d84:	b963      	cbnz	r3, 8007da0 <_dtoa_r+0xb0>
 8007d86:	4b9b      	ldr	r3, [pc, #620]	; (8007ff4 <_dtoa_r+0x304>)
 8007d88:	e024      	b.n	8007dd4 <_dtoa_r+0xe4>
 8007d8a:	4b9b      	ldr	r3, [pc, #620]	; (8007ff8 <_dtoa_r+0x308>)
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	3308      	adds	r3, #8
 8007d90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d92:	6013      	str	r3, [r2, #0]
 8007d94:	9800      	ldr	r0, [sp, #0]
 8007d96:	b015      	add	sp, #84	; 0x54
 8007d98:	ecbd 8b02 	vpop	{d8}
 8007d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da0:	4b94      	ldr	r3, [pc, #592]	; (8007ff4 <_dtoa_r+0x304>)
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	3303      	adds	r3, #3
 8007da6:	e7f3      	b.n	8007d90 <_dtoa_r+0xa0>
 8007da8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007dac:	2200      	movs	r2, #0
 8007dae:	ec51 0b17 	vmov	r0, r1, d7
 8007db2:	2300      	movs	r3, #0
 8007db4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007db8:	f7f8 fe96 	bl	8000ae8 <__aeabi_dcmpeq>
 8007dbc:	4680      	mov	r8, r0
 8007dbe:	b158      	cbz	r0, 8007dd8 <_dtoa_r+0xe8>
 8007dc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	6013      	str	r3, [r2, #0]
 8007dc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 8551 	beq.w	8008870 <_dtoa_r+0xb80>
 8007dce:	488b      	ldr	r0, [pc, #556]	; (8007ffc <_dtoa_r+0x30c>)
 8007dd0:	6018      	str	r0, [r3, #0]
 8007dd2:	1e43      	subs	r3, r0, #1
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	e7dd      	b.n	8007d94 <_dtoa_r+0xa4>
 8007dd8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007ddc:	aa12      	add	r2, sp, #72	; 0x48
 8007dde:	a913      	add	r1, sp, #76	; 0x4c
 8007de0:	4620      	mov	r0, r4
 8007de2:	f001 fcf5 	bl	80097d0 <__d2b>
 8007de6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007dea:	4683      	mov	fp, r0
 8007dec:	2d00      	cmp	r5, #0
 8007dee:	d07c      	beq.n	8007eea <_dtoa_r+0x1fa>
 8007df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007df2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007df6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dfa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007dfe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007e02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007e06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007e0a:	4b7d      	ldr	r3, [pc, #500]	; (8008000 <_dtoa_r+0x310>)
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	4630      	mov	r0, r6
 8007e10:	4639      	mov	r1, r7
 8007e12:	f7f8 fa49 	bl	80002a8 <__aeabi_dsub>
 8007e16:	a36e      	add	r3, pc, #440	; (adr r3, 8007fd0 <_dtoa_r+0x2e0>)
 8007e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1c:	f7f8 fbfc 	bl	8000618 <__aeabi_dmul>
 8007e20:	a36d      	add	r3, pc, #436	; (adr r3, 8007fd8 <_dtoa_r+0x2e8>)
 8007e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e26:	f7f8 fa41 	bl	80002ac <__adddf3>
 8007e2a:	4606      	mov	r6, r0
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	460f      	mov	r7, r1
 8007e30:	f7f8 fb88 	bl	8000544 <__aeabi_i2d>
 8007e34:	a36a      	add	r3, pc, #424	; (adr r3, 8007fe0 <_dtoa_r+0x2f0>)
 8007e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3a:	f7f8 fbed 	bl	8000618 <__aeabi_dmul>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	460b      	mov	r3, r1
 8007e42:	4630      	mov	r0, r6
 8007e44:	4639      	mov	r1, r7
 8007e46:	f7f8 fa31 	bl	80002ac <__adddf3>
 8007e4a:	4606      	mov	r6, r0
 8007e4c:	460f      	mov	r7, r1
 8007e4e:	f7f8 fe93 	bl	8000b78 <__aeabi_d2iz>
 8007e52:	2200      	movs	r2, #0
 8007e54:	4682      	mov	sl, r0
 8007e56:	2300      	movs	r3, #0
 8007e58:	4630      	mov	r0, r6
 8007e5a:	4639      	mov	r1, r7
 8007e5c:	f7f8 fe4e 	bl	8000afc <__aeabi_dcmplt>
 8007e60:	b148      	cbz	r0, 8007e76 <_dtoa_r+0x186>
 8007e62:	4650      	mov	r0, sl
 8007e64:	f7f8 fb6e 	bl	8000544 <__aeabi_i2d>
 8007e68:	4632      	mov	r2, r6
 8007e6a:	463b      	mov	r3, r7
 8007e6c:	f7f8 fe3c 	bl	8000ae8 <__aeabi_dcmpeq>
 8007e70:	b908      	cbnz	r0, 8007e76 <_dtoa_r+0x186>
 8007e72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e76:	f1ba 0f16 	cmp.w	sl, #22
 8007e7a:	d854      	bhi.n	8007f26 <_dtoa_r+0x236>
 8007e7c:	4b61      	ldr	r3, [pc, #388]	; (8008004 <_dtoa_r+0x314>)
 8007e7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e8a:	f7f8 fe37 	bl	8000afc <__aeabi_dcmplt>
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	d04b      	beq.n	8007f2a <_dtoa_r+0x23a>
 8007e92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e96:	2300      	movs	r3, #0
 8007e98:	930e      	str	r3, [sp, #56]	; 0x38
 8007e9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e9c:	1b5d      	subs	r5, r3, r5
 8007e9e:	1e6b      	subs	r3, r5, #1
 8007ea0:	9304      	str	r3, [sp, #16]
 8007ea2:	bf43      	ittte	mi
 8007ea4:	2300      	movmi	r3, #0
 8007ea6:	f1c5 0801 	rsbmi	r8, r5, #1
 8007eaa:	9304      	strmi	r3, [sp, #16]
 8007eac:	f04f 0800 	movpl.w	r8, #0
 8007eb0:	f1ba 0f00 	cmp.w	sl, #0
 8007eb4:	db3b      	blt.n	8007f2e <_dtoa_r+0x23e>
 8007eb6:	9b04      	ldr	r3, [sp, #16]
 8007eb8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007ebc:	4453      	add	r3, sl
 8007ebe:	9304      	str	r3, [sp, #16]
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	9306      	str	r3, [sp, #24]
 8007ec4:	9b05      	ldr	r3, [sp, #20]
 8007ec6:	2b09      	cmp	r3, #9
 8007ec8:	d869      	bhi.n	8007f9e <_dtoa_r+0x2ae>
 8007eca:	2b05      	cmp	r3, #5
 8007ecc:	bfc4      	itt	gt
 8007ece:	3b04      	subgt	r3, #4
 8007ed0:	9305      	strgt	r3, [sp, #20]
 8007ed2:	9b05      	ldr	r3, [sp, #20]
 8007ed4:	f1a3 0302 	sub.w	r3, r3, #2
 8007ed8:	bfcc      	ite	gt
 8007eda:	2500      	movgt	r5, #0
 8007edc:	2501      	movle	r5, #1
 8007ede:	2b03      	cmp	r3, #3
 8007ee0:	d869      	bhi.n	8007fb6 <_dtoa_r+0x2c6>
 8007ee2:	e8df f003 	tbb	[pc, r3]
 8007ee6:	4e2c      	.short	0x4e2c
 8007ee8:	5a4c      	.short	0x5a4c
 8007eea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007eee:	441d      	add	r5, r3
 8007ef0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007ef4:	2b20      	cmp	r3, #32
 8007ef6:	bfc1      	itttt	gt
 8007ef8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007efc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007f00:	fa09 f303 	lslgt.w	r3, r9, r3
 8007f04:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007f08:	bfda      	itte	le
 8007f0a:	f1c3 0320 	rsble	r3, r3, #32
 8007f0e:	fa06 f003 	lslle.w	r0, r6, r3
 8007f12:	4318      	orrgt	r0, r3
 8007f14:	f7f8 fb06 	bl	8000524 <__aeabi_ui2d>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	4606      	mov	r6, r0
 8007f1c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007f20:	3d01      	subs	r5, #1
 8007f22:	9310      	str	r3, [sp, #64]	; 0x40
 8007f24:	e771      	b.n	8007e0a <_dtoa_r+0x11a>
 8007f26:	2301      	movs	r3, #1
 8007f28:	e7b6      	b.n	8007e98 <_dtoa_r+0x1a8>
 8007f2a:	900e      	str	r0, [sp, #56]	; 0x38
 8007f2c:	e7b5      	b.n	8007e9a <_dtoa_r+0x1aa>
 8007f2e:	f1ca 0300 	rsb	r3, sl, #0
 8007f32:	9306      	str	r3, [sp, #24]
 8007f34:	2300      	movs	r3, #0
 8007f36:	eba8 080a 	sub.w	r8, r8, sl
 8007f3a:	930d      	str	r3, [sp, #52]	; 0x34
 8007f3c:	e7c2      	b.n	8007ec4 <_dtoa_r+0x1d4>
 8007f3e:	2300      	movs	r3, #0
 8007f40:	9308      	str	r3, [sp, #32]
 8007f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	dc39      	bgt.n	8007fbc <_dtoa_r+0x2cc>
 8007f48:	f04f 0901 	mov.w	r9, #1
 8007f4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007f50:	464b      	mov	r3, r9
 8007f52:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007f56:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007f58:	2200      	movs	r2, #0
 8007f5a:	6042      	str	r2, [r0, #4]
 8007f5c:	2204      	movs	r2, #4
 8007f5e:	f102 0614 	add.w	r6, r2, #20
 8007f62:	429e      	cmp	r6, r3
 8007f64:	6841      	ldr	r1, [r0, #4]
 8007f66:	d92f      	bls.n	8007fc8 <_dtoa_r+0x2d8>
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f001 f849 	bl	8009000 <_Balloc>
 8007f6e:	9000      	str	r0, [sp, #0]
 8007f70:	2800      	cmp	r0, #0
 8007f72:	d14b      	bne.n	800800c <_dtoa_r+0x31c>
 8007f74:	4b24      	ldr	r3, [pc, #144]	; (8008008 <_dtoa_r+0x318>)
 8007f76:	4602      	mov	r2, r0
 8007f78:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f7c:	e6d1      	b.n	8007d22 <_dtoa_r+0x32>
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e7de      	b.n	8007f40 <_dtoa_r+0x250>
 8007f82:	2300      	movs	r3, #0
 8007f84:	9308      	str	r3, [sp, #32]
 8007f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f88:	eb0a 0903 	add.w	r9, sl, r3
 8007f8c:	f109 0301 	add.w	r3, r9, #1
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	9301      	str	r3, [sp, #4]
 8007f94:	bfb8      	it	lt
 8007f96:	2301      	movlt	r3, #1
 8007f98:	e7dd      	b.n	8007f56 <_dtoa_r+0x266>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e7f2      	b.n	8007f84 <_dtoa_r+0x294>
 8007f9e:	2501      	movs	r5, #1
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	9305      	str	r3, [sp, #20]
 8007fa4:	9508      	str	r5, [sp, #32]
 8007fa6:	f04f 39ff 	mov.w	r9, #4294967295
 8007faa:	2200      	movs	r2, #0
 8007fac:	f8cd 9004 	str.w	r9, [sp, #4]
 8007fb0:	2312      	movs	r3, #18
 8007fb2:	9209      	str	r2, [sp, #36]	; 0x24
 8007fb4:	e7cf      	b.n	8007f56 <_dtoa_r+0x266>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	9308      	str	r3, [sp, #32]
 8007fba:	e7f4      	b.n	8007fa6 <_dtoa_r+0x2b6>
 8007fbc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007fc0:	f8cd 9004 	str.w	r9, [sp, #4]
 8007fc4:	464b      	mov	r3, r9
 8007fc6:	e7c6      	b.n	8007f56 <_dtoa_r+0x266>
 8007fc8:	3101      	adds	r1, #1
 8007fca:	6041      	str	r1, [r0, #4]
 8007fcc:	0052      	lsls	r2, r2, #1
 8007fce:	e7c6      	b.n	8007f5e <_dtoa_r+0x26e>
 8007fd0:	636f4361 	.word	0x636f4361
 8007fd4:	3fd287a7 	.word	0x3fd287a7
 8007fd8:	8b60c8b3 	.word	0x8b60c8b3
 8007fdc:	3fc68a28 	.word	0x3fc68a28
 8007fe0:	509f79fb 	.word	0x509f79fb
 8007fe4:	3fd34413 	.word	0x3fd34413
 8007fe8:	0800adc6 	.word	0x0800adc6
 8007fec:	0800addd 	.word	0x0800addd
 8007ff0:	7ff00000 	.word	0x7ff00000
 8007ff4:	0800adc2 	.word	0x0800adc2
 8007ff8:	0800adb9 	.word	0x0800adb9
 8007ffc:	0800ac3d 	.word	0x0800ac3d
 8008000:	3ff80000 	.word	0x3ff80000
 8008004:	0800af58 	.word	0x0800af58
 8008008:	0800ae3c 	.word	0x0800ae3c
 800800c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800800e:	9a00      	ldr	r2, [sp, #0]
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	9b01      	ldr	r3, [sp, #4]
 8008014:	2b0e      	cmp	r3, #14
 8008016:	f200 80ad 	bhi.w	8008174 <_dtoa_r+0x484>
 800801a:	2d00      	cmp	r5, #0
 800801c:	f000 80aa 	beq.w	8008174 <_dtoa_r+0x484>
 8008020:	f1ba 0f00 	cmp.w	sl, #0
 8008024:	dd36      	ble.n	8008094 <_dtoa_r+0x3a4>
 8008026:	4ac3      	ldr	r2, [pc, #780]	; (8008334 <_dtoa_r+0x644>)
 8008028:	f00a 030f 	and.w	r3, sl, #15
 800802c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008030:	ed93 7b00 	vldr	d7, [r3]
 8008034:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008038:	ea4f 172a 	mov.w	r7, sl, asr #4
 800803c:	eeb0 8a47 	vmov.f32	s16, s14
 8008040:	eef0 8a67 	vmov.f32	s17, s15
 8008044:	d016      	beq.n	8008074 <_dtoa_r+0x384>
 8008046:	4bbc      	ldr	r3, [pc, #752]	; (8008338 <_dtoa_r+0x648>)
 8008048:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800804c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008050:	f7f8 fc0c 	bl	800086c <__aeabi_ddiv>
 8008054:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008058:	f007 070f 	and.w	r7, r7, #15
 800805c:	2503      	movs	r5, #3
 800805e:	4eb6      	ldr	r6, [pc, #728]	; (8008338 <_dtoa_r+0x648>)
 8008060:	b957      	cbnz	r7, 8008078 <_dtoa_r+0x388>
 8008062:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008066:	ec53 2b18 	vmov	r2, r3, d8
 800806a:	f7f8 fbff 	bl	800086c <__aeabi_ddiv>
 800806e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008072:	e029      	b.n	80080c8 <_dtoa_r+0x3d8>
 8008074:	2502      	movs	r5, #2
 8008076:	e7f2      	b.n	800805e <_dtoa_r+0x36e>
 8008078:	07f9      	lsls	r1, r7, #31
 800807a:	d508      	bpl.n	800808e <_dtoa_r+0x39e>
 800807c:	ec51 0b18 	vmov	r0, r1, d8
 8008080:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008084:	f7f8 fac8 	bl	8000618 <__aeabi_dmul>
 8008088:	ec41 0b18 	vmov	d8, r0, r1
 800808c:	3501      	adds	r5, #1
 800808e:	107f      	asrs	r7, r7, #1
 8008090:	3608      	adds	r6, #8
 8008092:	e7e5      	b.n	8008060 <_dtoa_r+0x370>
 8008094:	f000 80a6 	beq.w	80081e4 <_dtoa_r+0x4f4>
 8008098:	f1ca 0600 	rsb	r6, sl, #0
 800809c:	4ba5      	ldr	r3, [pc, #660]	; (8008334 <_dtoa_r+0x644>)
 800809e:	4fa6      	ldr	r7, [pc, #664]	; (8008338 <_dtoa_r+0x648>)
 80080a0:	f006 020f 	and.w	r2, r6, #15
 80080a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80080b0:	f7f8 fab2 	bl	8000618 <__aeabi_dmul>
 80080b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080b8:	1136      	asrs	r6, r6, #4
 80080ba:	2300      	movs	r3, #0
 80080bc:	2502      	movs	r5, #2
 80080be:	2e00      	cmp	r6, #0
 80080c0:	f040 8085 	bne.w	80081ce <_dtoa_r+0x4de>
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d1d2      	bne.n	800806e <_dtoa_r+0x37e>
 80080c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 808c 	beq.w	80081e8 <_dtoa_r+0x4f8>
 80080d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80080d4:	4b99      	ldr	r3, [pc, #612]	; (800833c <_dtoa_r+0x64c>)
 80080d6:	2200      	movs	r2, #0
 80080d8:	4630      	mov	r0, r6
 80080da:	4639      	mov	r1, r7
 80080dc:	f7f8 fd0e 	bl	8000afc <__aeabi_dcmplt>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	f000 8081 	beq.w	80081e8 <_dtoa_r+0x4f8>
 80080e6:	9b01      	ldr	r3, [sp, #4]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d07d      	beq.n	80081e8 <_dtoa_r+0x4f8>
 80080ec:	f1b9 0f00 	cmp.w	r9, #0
 80080f0:	dd3c      	ble.n	800816c <_dtoa_r+0x47c>
 80080f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80080f6:	9307      	str	r3, [sp, #28]
 80080f8:	2200      	movs	r2, #0
 80080fa:	4b91      	ldr	r3, [pc, #580]	; (8008340 <_dtoa_r+0x650>)
 80080fc:	4630      	mov	r0, r6
 80080fe:	4639      	mov	r1, r7
 8008100:	f7f8 fa8a 	bl	8000618 <__aeabi_dmul>
 8008104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008108:	3501      	adds	r5, #1
 800810a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800810e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008112:	4628      	mov	r0, r5
 8008114:	f7f8 fa16 	bl	8000544 <__aeabi_i2d>
 8008118:	4632      	mov	r2, r6
 800811a:	463b      	mov	r3, r7
 800811c:	f7f8 fa7c 	bl	8000618 <__aeabi_dmul>
 8008120:	4b88      	ldr	r3, [pc, #544]	; (8008344 <_dtoa_r+0x654>)
 8008122:	2200      	movs	r2, #0
 8008124:	f7f8 f8c2 	bl	80002ac <__adddf3>
 8008128:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800812c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008130:	9303      	str	r3, [sp, #12]
 8008132:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008134:	2b00      	cmp	r3, #0
 8008136:	d15c      	bne.n	80081f2 <_dtoa_r+0x502>
 8008138:	4b83      	ldr	r3, [pc, #524]	; (8008348 <_dtoa_r+0x658>)
 800813a:	2200      	movs	r2, #0
 800813c:	4630      	mov	r0, r6
 800813e:	4639      	mov	r1, r7
 8008140:	f7f8 f8b2 	bl	80002a8 <__aeabi_dsub>
 8008144:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008148:	4606      	mov	r6, r0
 800814a:	460f      	mov	r7, r1
 800814c:	f7f8 fcf4 	bl	8000b38 <__aeabi_dcmpgt>
 8008150:	2800      	cmp	r0, #0
 8008152:	f040 8296 	bne.w	8008682 <_dtoa_r+0x992>
 8008156:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800815a:	4630      	mov	r0, r6
 800815c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008160:	4639      	mov	r1, r7
 8008162:	f7f8 fccb 	bl	8000afc <__aeabi_dcmplt>
 8008166:	2800      	cmp	r0, #0
 8008168:	f040 8288 	bne.w	800867c <_dtoa_r+0x98c>
 800816c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008170:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008174:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008176:	2b00      	cmp	r3, #0
 8008178:	f2c0 8158 	blt.w	800842c <_dtoa_r+0x73c>
 800817c:	f1ba 0f0e 	cmp.w	sl, #14
 8008180:	f300 8154 	bgt.w	800842c <_dtoa_r+0x73c>
 8008184:	4b6b      	ldr	r3, [pc, #428]	; (8008334 <_dtoa_r+0x644>)
 8008186:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800818a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800818e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008190:	2b00      	cmp	r3, #0
 8008192:	f280 80e3 	bge.w	800835c <_dtoa_r+0x66c>
 8008196:	9b01      	ldr	r3, [sp, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	f300 80df 	bgt.w	800835c <_dtoa_r+0x66c>
 800819e:	f040 826d 	bne.w	800867c <_dtoa_r+0x98c>
 80081a2:	4b69      	ldr	r3, [pc, #420]	; (8008348 <_dtoa_r+0x658>)
 80081a4:	2200      	movs	r2, #0
 80081a6:	4640      	mov	r0, r8
 80081a8:	4649      	mov	r1, r9
 80081aa:	f7f8 fa35 	bl	8000618 <__aeabi_dmul>
 80081ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081b2:	f7f8 fcb7 	bl	8000b24 <__aeabi_dcmpge>
 80081b6:	9e01      	ldr	r6, [sp, #4]
 80081b8:	4637      	mov	r7, r6
 80081ba:	2800      	cmp	r0, #0
 80081bc:	f040 8243 	bne.w	8008646 <_dtoa_r+0x956>
 80081c0:	9d00      	ldr	r5, [sp, #0]
 80081c2:	2331      	movs	r3, #49	; 0x31
 80081c4:	f805 3b01 	strb.w	r3, [r5], #1
 80081c8:	f10a 0a01 	add.w	sl, sl, #1
 80081cc:	e23f      	b.n	800864e <_dtoa_r+0x95e>
 80081ce:	07f2      	lsls	r2, r6, #31
 80081d0:	d505      	bpl.n	80081de <_dtoa_r+0x4ee>
 80081d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081d6:	f7f8 fa1f 	bl	8000618 <__aeabi_dmul>
 80081da:	3501      	adds	r5, #1
 80081dc:	2301      	movs	r3, #1
 80081de:	1076      	asrs	r6, r6, #1
 80081e0:	3708      	adds	r7, #8
 80081e2:	e76c      	b.n	80080be <_dtoa_r+0x3ce>
 80081e4:	2502      	movs	r5, #2
 80081e6:	e76f      	b.n	80080c8 <_dtoa_r+0x3d8>
 80081e8:	9b01      	ldr	r3, [sp, #4]
 80081ea:	f8cd a01c 	str.w	sl, [sp, #28]
 80081ee:	930c      	str	r3, [sp, #48]	; 0x30
 80081f0:	e78d      	b.n	800810e <_dtoa_r+0x41e>
 80081f2:	9900      	ldr	r1, [sp, #0]
 80081f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80081f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081f8:	4b4e      	ldr	r3, [pc, #312]	; (8008334 <_dtoa_r+0x644>)
 80081fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081fe:	4401      	add	r1, r0
 8008200:	9102      	str	r1, [sp, #8]
 8008202:	9908      	ldr	r1, [sp, #32]
 8008204:	eeb0 8a47 	vmov.f32	s16, s14
 8008208:	eef0 8a67 	vmov.f32	s17, s15
 800820c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008210:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008214:	2900      	cmp	r1, #0
 8008216:	d045      	beq.n	80082a4 <_dtoa_r+0x5b4>
 8008218:	494c      	ldr	r1, [pc, #304]	; (800834c <_dtoa_r+0x65c>)
 800821a:	2000      	movs	r0, #0
 800821c:	f7f8 fb26 	bl	800086c <__aeabi_ddiv>
 8008220:	ec53 2b18 	vmov	r2, r3, d8
 8008224:	f7f8 f840 	bl	80002a8 <__aeabi_dsub>
 8008228:	9d00      	ldr	r5, [sp, #0]
 800822a:	ec41 0b18 	vmov	d8, r0, r1
 800822e:	4639      	mov	r1, r7
 8008230:	4630      	mov	r0, r6
 8008232:	f7f8 fca1 	bl	8000b78 <__aeabi_d2iz>
 8008236:	900c      	str	r0, [sp, #48]	; 0x30
 8008238:	f7f8 f984 	bl	8000544 <__aeabi_i2d>
 800823c:	4602      	mov	r2, r0
 800823e:	460b      	mov	r3, r1
 8008240:	4630      	mov	r0, r6
 8008242:	4639      	mov	r1, r7
 8008244:	f7f8 f830 	bl	80002a8 <__aeabi_dsub>
 8008248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800824a:	3330      	adds	r3, #48	; 0x30
 800824c:	f805 3b01 	strb.w	r3, [r5], #1
 8008250:	ec53 2b18 	vmov	r2, r3, d8
 8008254:	4606      	mov	r6, r0
 8008256:	460f      	mov	r7, r1
 8008258:	f7f8 fc50 	bl	8000afc <__aeabi_dcmplt>
 800825c:	2800      	cmp	r0, #0
 800825e:	d165      	bne.n	800832c <_dtoa_r+0x63c>
 8008260:	4632      	mov	r2, r6
 8008262:	463b      	mov	r3, r7
 8008264:	4935      	ldr	r1, [pc, #212]	; (800833c <_dtoa_r+0x64c>)
 8008266:	2000      	movs	r0, #0
 8008268:	f7f8 f81e 	bl	80002a8 <__aeabi_dsub>
 800826c:	ec53 2b18 	vmov	r2, r3, d8
 8008270:	f7f8 fc44 	bl	8000afc <__aeabi_dcmplt>
 8008274:	2800      	cmp	r0, #0
 8008276:	f040 80b9 	bne.w	80083ec <_dtoa_r+0x6fc>
 800827a:	9b02      	ldr	r3, [sp, #8]
 800827c:	429d      	cmp	r5, r3
 800827e:	f43f af75 	beq.w	800816c <_dtoa_r+0x47c>
 8008282:	4b2f      	ldr	r3, [pc, #188]	; (8008340 <_dtoa_r+0x650>)
 8008284:	ec51 0b18 	vmov	r0, r1, d8
 8008288:	2200      	movs	r2, #0
 800828a:	f7f8 f9c5 	bl	8000618 <__aeabi_dmul>
 800828e:	4b2c      	ldr	r3, [pc, #176]	; (8008340 <_dtoa_r+0x650>)
 8008290:	ec41 0b18 	vmov	d8, r0, r1
 8008294:	2200      	movs	r2, #0
 8008296:	4630      	mov	r0, r6
 8008298:	4639      	mov	r1, r7
 800829a:	f7f8 f9bd 	bl	8000618 <__aeabi_dmul>
 800829e:	4606      	mov	r6, r0
 80082a0:	460f      	mov	r7, r1
 80082a2:	e7c4      	b.n	800822e <_dtoa_r+0x53e>
 80082a4:	ec51 0b17 	vmov	r0, r1, d7
 80082a8:	f7f8 f9b6 	bl	8000618 <__aeabi_dmul>
 80082ac:	9b02      	ldr	r3, [sp, #8]
 80082ae:	9d00      	ldr	r5, [sp, #0]
 80082b0:	930c      	str	r3, [sp, #48]	; 0x30
 80082b2:	ec41 0b18 	vmov	d8, r0, r1
 80082b6:	4639      	mov	r1, r7
 80082b8:	4630      	mov	r0, r6
 80082ba:	f7f8 fc5d 	bl	8000b78 <__aeabi_d2iz>
 80082be:	9011      	str	r0, [sp, #68]	; 0x44
 80082c0:	f7f8 f940 	bl	8000544 <__aeabi_i2d>
 80082c4:	4602      	mov	r2, r0
 80082c6:	460b      	mov	r3, r1
 80082c8:	4630      	mov	r0, r6
 80082ca:	4639      	mov	r1, r7
 80082cc:	f7f7 ffec 	bl	80002a8 <__aeabi_dsub>
 80082d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082d2:	3330      	adds	r3, #48	; 0x30
 80082d4:	f805 3b01 	strb.w	r3, [r5], #1
 80082d8:	9b02      	ldr	r3, [sp, #8]
 80082da:	429d      	cmp	r5, r3
 80082dc:	4606      	mov	r6, r0
 80082de:	460f      	mov	r7, r1
 80082e0:	f04f 0200 	mov.w	r2, #0
 80082e4:	d134      	bne.n	8008350 <_dtoa_r+0x660>
 80082e6:	4b19      	ldr	r3, [pc, #100]	; (800834c <_dtoa_r+0x65c>)
 80082e8:	ec51 0b18 	vmov	r0, r1, d8
 80082ec:	f7f7 ffde 	bl	80002ac <__adddf3>
 80082f0:	4602      	mov	r2, r0
 80082f2:	460b      	mov	r3, r1
 80082f4:	4630      	mov	r0, r6
 80082f6:	4639      	mov	r1, r7
 80082f8:	f7f8 fc1e 	bl	8000b38 <__aeabi_dcmpgt>
 80082fc:	2800      	cmp	r0, #0
 80082fe:	d175      	bne.n	80083ec <_dtoa_r+0x6fc>
 8008300:	ec53 2b18 	vmov	r2, r3, d8
 8008304:	4911      	ldr	r1, [pc, #68]	; (800834c <_dtoa_r+0x65c>)
 8008306:	2000      	movs	r0, #0
 8008308:	f7f7 ffce 	bl	80002a8 <__aeabi_dsub>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	4630      	mov	r0, r6
 8008312:	4639      	mov	r1, r7
 8008314:	f7f8 fbf2 	bl	8000afc <__aeabi_dcmplt>
 8008318:	2800      	cmp	r0, #0
 800831a:	f43f af27 	beq.w	800816c <_dtoa_r+0x47c>
 800831e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008320:	1e6b      	subs	r3, r5, #1
 8008322:	930c      	str	r3, [sp, #48]	; 0x30
 8008324:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008328:	2b30      	cmp	r3, #48	; 0x30
 800832a:	d0f8      	beq.n	800831e <_dtoa_r+0x62e>
 800832c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008330:	e04a      	b.n	80083c8 <_dtoa_r+0x6d8>
 8008332:	bf00      	nop
 8008334:	0800af58 	.word	0x0800af58
 8008338:	0800af30 	.word	0x0800af30
 800833c:	3ff00000 	.word	0x3ff00000
 8008340:	40240000 	.word	0x40240000
 8008344:	401c0000 	.word	0x401c0000
 8008348:	40140000 	.word	0x40140000
 800834c:	3fe00000 	.word	0x3fe00000
 8008350:	4baf      	ldr	r3, [pc, #700]	; (8008610 <_dtoa_r+0x920>)
 8008352:	f7f8 f961 	bl	8000618 <__aeabi_dmul>
 8008356:	4606      	mov	r6, r0
 8008358:	460f      	mov	r7, r1
 800835a:	e7ac      	b.n	80082b6 <_dtoa_r+0x5c6>
 800835c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008360:	9d00      	ldr	r5, [sp, #0]
 8008362:	4642      	mov	r2, r8
 8008364:	464b      	mov	r3, r9
 8008366:	4630      	mov	r0, r6
 8008368:	4639      	mov	r1, r7
 800836a:	f7f8 fa7f 	bl	800086c <__aeabi_ddiv>
 800836e:	f7f8 fc03 	bl	8000b78 <__aeabi_d2iz>
 8008372:	9002      	str	r0, [sp, #8]
 8008374:	f7f8 f8e6 	bl	8000544 <__aeabi_i2d>
 8008378:	4642      	mov	r2, r8
 800837a:	464b      	mov	r3, r9
 800837c:	f7f8 f94c 	bl	8000618 <__aeabi_dmul>
 8008380:	4602      	mov	r2, r0
 8008382:	460b      	mov	r3, r1
 8008384:	4630      	mov	r0, r6
 8008386:	4639      	mov	r1, r7
 8008388:	f7f7 ff8e 	bl	80002a8 <__aeabi_dsub>
 800838c:	9e02      	ldr	r6, [sp, #8]
 800838e:	9f01      	ldr	r7, [sp, #4]
 8008390:	3630      	adds	r6, #48	; 0x30
 8008392:	f805 6b01 	strb.w	r6, [r5], #1
 8008396:	9e00      	ldr	r6, [sp, #0]
 8008398:	1bae      	subs	r6, r5, r6
 800839a:	42b7      	cmp	r7, r6
 800839c:	4602      	mov	r2, r0
 800839e:	460b      	mov	r3, r1
 80083a0:	d137      	bne.n	8008412 <_dtoa_r+0x722>
 80083a2:	f7f7 ff83 	bl	80002ac <__adddf3>
 80083a6:	4642      	mov	r2, r8
 80083a8:	464b      	mov	r3, r9
 80083aa:	4606      	mov	r6, r0
 80083ac:	460f      	mov	r7, r1
 80083ae:	f7f8 fbc3 	bl	8000b38 <__aeabi_dcmpgt>
 80083b2:	b9c8      	cbnz	r0, 80083e8 <_dtoa_r+0x6f8>
 80083b4:	4642      	mov	r2, r8
 80083b6:	464b      	mov	r3, r9
 80083b8:	4630      	mov	r0, r6
 80083ba:	4639      	mov	r1, r7
 80083bc:	f7f8 fb94 	bl	8000ae8 <__aeabi_dcmpeq>
 80083c0:	b110      	cbz	r0, 80083c8 <_dtoa_r+0x6d8>
 80083c2:	9b02      	ldr	r3, [sp, #8]
 80083c4:	07d9      	lsls	r1, r3, #31
 80083c6:	d40f      	bmi.n	80083e8 <_dtoa_r+0x6f8>
 80083c8:	4620      	mov	r0, r4
 80083ca:	4659      	mov	r1, fp
 80083cc:	f000 fe58 	bl	8009080 <_Bfree>
 80083d0:	2300      	movs	r3, #0
 80083d2:	702b      	strb	r3, [r5, #0]
 80083d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083d6:	f10a 0001 	add.w	r0, sl, #1
 80083da:	6018      	str	r0, [r3, #0]
 80083dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083de:	2b00      	cmp	r3, #0
 80083e0:	f43f acd8 	beq.w	8007d94 <_dtoa_r+0xa4>
 80083e4:	601d      	str	r5, [r3, #0]
 80083e6:	e4d5      	b.n	8007d94 <_dtoa_r+0xa4>
 80083e8:	f8cd a01c 	str.w	sl, [sp, #28]
 80083ec:	462b      	mov	r3, r5
 80083ee:	461d      	mov	r5, r3
 80083f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083f4:	2a39      	cmp	r2, #57	; 0x39
 80083f6:	d108      	bne.n	800840a <_dtoa_r+0x71a>
 80083f8:	9a00      	ldr	r2, [sp, #0]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d1f7      	bne.n	80083ee <_dtoa_r+0x6fe>
 80083fe:	9a07      	ldr	r2, [sp, #28]
 8008400:	9900      	ldr	r1, [sp, #0]
 8008402:	3201      	adds	r2, #1
 8008404:	9207      	str	r2, [sp, #28]
 8008406:	2230      	movs	r2, #48	; 0x30
 8008408:	700a      	strb	r2, [r1, #0]
 800840a:	781a      	ldrb	r2, [r3, #0]
 800840c:	3201      	adds	r2, #1
 800840e:	701a      	strb	r2, [r3, #0]
 8008410:	e78c      	b.n	800832c <_dtoa_r+0x63c>
 8008412:	4b7f      	ldr	r3, [pc, #508]	; (8008610 <_dtoa_r+0x920>)
 8008414:	2200      	movs	r2, #0
 8008416:	f7f8 f8ff 	bl	8000618 <__aeabi_dmul>
 800841a:	2200      	movs	r2, #0
 800841c:	2300      	movs	r3, #0
 800841e:	4606      	mov	r6, r0
 8008420:	460f      	mov	r7, r1
 8008422:	f7f8 fb61 	bl	8000ae8 <__aeabi_dcmpeq>
 8008426:	2800      	cmp	r0, #0
 8008428:	d09b      	beq.n	8008362 <_dtoa_r+0x672>
 800842a:	e7cd      	b.n	80083c8 <_dtoa_r+0x6d8>
 800842c:	9a08      	ldr	r2, [sp, #32]
 800842e:	2a00      	cmp	r2, #0
 8008430:	f000 80c4 	beq.w	80085bc <_dtoa_r+0x8cc>
 8008434:	9a05      	ldr	r2, [sp, #20]
 8008436:	2a01      	cmp	r2, #1
 8008438:	f300 80a8 	bgt.w	800858c <_dtoa_r+0x89c>
 800843c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800843e:	2a00      	cmp	r2, #0
 8008440:	f000 80a0 	beq.w	8008584 <_dtoa_r+0x894>
 8008444:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008448:	9e06      	ldr	r6, [sp, #24]
 800844a:	4645      	mov	r5, r8
 800844c:	9a04      	ldr	r2, [sp, #16]
 800844e:	2101      	movs	r1, #1
 8008450:	441a      	add	r2, r3
 8008452:	4620      	mov	r0, r4
 8008454:	4498      	add	r8, r3
 8008456:	9204      	str	r2, [sp, #16]
 8008458:	f000 ff18 	bl	800928c <__i2b>
 800845c:	4607      	mov	r7, r0
 800845e:	2d00      	cmp	r5, #0
 8008460:	dd0b      	ble.n	800847a <_dtoa_r+0x78a>
 8008462:	9b04      	ldr	r3, [sp, #16]
 8008464:	2b00      	cmp	r3, #0
 8008466:	dd08      	ble.n	800847a <_dtoa_r+0x78a>
 8008468:	42ab      	cmp	r3, r5
 800846a:	9a04      	ldr	r2, [sp, #16]
 800846c:	bfa8      	it	ge
 800846e:	462b      	movge	r3, r5
 8008470:	eba8 0803 	sub.w	r8, r8, r3
 8008474:	1aed      	subs	r5, r5, r3
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	9304      	str	r3, [sp, #16]
 800847a:	9b06      	ldr	r3, [sp, #24]
 800847c:	b1fb      	cbz	r3, 80084be <_dtoa_r+0x7ce>
 800847e:	9b08      	ldr	r3, [sp, #32]
 8008480:	2b00      	cmp	r3, #0
 8008482:	f000 809f 	beq.w	80085c4 <_dtoa_r+0x8d4>
 8008486:	2e00      	cmp	r6, #0
 8008488:	dd11      	ble.n	80084ae <_dtoa_r+0x7be>
 800848a:	4639      	mov	r1, r7
 800848c:	4632      	mov	r2, r6
 800848e:	4620      	mov	r0, r4
 8008490:	f000 ffb8 	bl	8009404 <__pow5mult>
 8008494:	465a      	mov	r2, fp
 8008496:	4601      	mov	r1, r0
 8008498:	4607      	mov	r7, r0
 800849a:	4620      	mov	r0, r4
 800849c:	f000 ff0c 	bl	80092b8 <__multiply>
 80084a0:	4659      	mov	r1, fp
 80084a2:	9007      	str	r0, [sp, #28]
 80084a4:	4620      	mov	r0, r4
 80084a6:	f000 fdeb 	bl	8009080 <_Bfree>
 80084aa:	9b07      	ldr	r3, [sp, #28]
 80084ac:	469b      	mov	fp, r3
 80084ae:	9b06      	ldr	r3, [sp, #24]
 80084b0:	1b9a      	subs	r2, r3, r6
 80084b2:	d004      	beq.n	80084be <_dtoa_r+0x7ce>
 80084b4:	4659      	mov	r1, fp
 80084b6:	4620      	mov	r0, r4
 80084b8:	f000 ffa4 	bl	8009404 <__pow5mult>
 80084bc:	4683      	mov	fp, r0
 80084be:	2101      	movs	r1, #1
 80084c0:	4620      	mov	r0, r4
 80084c2:	f000 fee3 	bl	800928c <__i2b>
 80084c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	4606      	mov	r6, r0
 80084cc:	dd7c      	ble.n	80085c8 <_dtoa_r+0x8d8>
 80084ce:	461a      	mov	r2, r3
 80084d0:	4601      	mov	r1, r0
 80084d2:	4620      	mov	r0, r4
 80084d4:	f000 ff96 	bl	8009404 <__pow5mult>
 80084d8:	9b05      	ldr	r3, [sp, #20]
 80084da:	2b01      	cmp	r3, #1
 80084dc:	4606      	mov	r6, r0
 80084de:	dd76      	ble.n	80085ce <_dtoa_r+0x8de>
 80084e0:	2300      	movs	r3, #0
 80084e2:	9306      	str	r3, [sp, #24]
 80084e4:	6933      	ldr	r3, [r6, #16]
 80084e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80084ea:	6918      	ldr	r0, [r3, #16]
 80084ec:	f000 fe7e 	bl	80091ec <__hi0bits>
 80084f0:	f1c0 0020 	rsb	r0, r0, #32
 80084f4:	9b04      	ldr	r3, [sp, #16]
 80084f6:	4418      	add	r0, r3
 80084f8:	f010 001f 	ands.w	r0, r0, #31
 80084fc:	f000 8086 	beq.w	800860c <_dtoa_r+0x91c>
 8008500:	f1c0 0320 	rsb	r3, r0, #32
 8008504:	2b04      	cmp	r3, #4
 8008506:	dd7f      	ble.n	8008608 <_dtoa_r+0x918>
 8008508:	f1c0 001c 	rsb	r0, r0, #28
 800850c:	9b04      	ldr	r3, [sp, #16]
 800850e:	4403      	add	r3, r0
 8008510:	4480      	add	r8, r0
 8008512:	4405      	add	r5, r0
 8008514:	9304      	str	r3, [sp, #16]
 8008516:	f1b8 0f00 	cmp.w	r8, #0
 800851a:	dd05      	ble.n	8008528 <_dtoa_r+0x838>
 800851c:	4659      	mov	r1, fp
 800851e:	4642      	mov	r2, r8
 8008520:	4620      	mov	r0, r4
 8008522:	f000 ffc9 	bl	80094b8 <__lshift>
 8008526:	4683      	mov	fp, r0
 8008528:	9b04      	ldr	r3, [sp, #16]
 800852a:	2b00      	cmp	r3, #0
 800852c:	dd05      	ble.n	800853a <_dtoa_r+0x84a>
 800852e:	4631      	mov	r1, r6
 8008530:	461a      	mov	r2, r3
 8008532:	4620      	mov	r0, r4
 8008534:	f000 ffc0 	bl	80094b8 <__lshift>
 8008538:	4606      	mov	r6, r0
 800853a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800853c:	2b00      	cmp	r3, #0
 800853e:	d069      	beq.n	8008614 <_dtoa_r+0x924>
 8008540:	4631      	mov	r1, r6
 8008542:	4658      	mov	r0, fp
 8008544:	f001 f824 	bl	8009590 <__mcmp>
 8008548:	2800      	cmp	r0, #0
 800854a:	da63      	bge.n	8008614 <_dtoa_r+0x924>
 800854c:	2300      	movs	r3, #0
 800854e:	4659      	mov	r1, fp
 8008550:	220a      	movs	r2, #10
 8008552:	4620      	mov	r0, r4
 8008554:	f000 fdb6 	bl	80090c4 <__multadd>
 8008558:	9b08      	ldr	r3, [sp, #32]
 800855a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800855e:	4683      	mov	fp, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	f000 818f 	beq.w	8008884 <_dtoa_r+0xb94>
 8008566:	4639      	mov	r1, r7
 8008568:	2300      	movs	r3, #0
 800856a:	220a      	movs	r2, #10
 800856c:	4620      	mov	r0, r4
 800856e:	f000 fda9 	bl	80090c4 <__multadd>
 8008572:	f1b9 0f00 	cmp.w	r9, #0
 8008576:	4607      	mov	r7, r0
 8008578:	f300 808e 	bgt.w	8008698 <_dtoa_r+0x9a8>
 800857c:	9b05      	ldr	r3, [sp, #20]
 800857e:	2b02      	cmp	r3, #2
 8008580:	dc50      	bgt.n	8008624 <_dtoa_r+0x934>
 8008582:	e089      	b.n	8008698 <_dtoa_r+0x9a8>
 8008584:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008586:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800858a:	e75d      	b.n	8008448 <_dtoa_r+0x758>
 800858c:	9b01      	ldr	r3, [sp, #4]
 800858e:	1e5e      	subs	r6, r3, #1
 8008590:	9b06      	ldr	r3, [sp, #24]
 8008592:	42b3      	cmp	r3, r6
 8008594:	bfbf      	itttt	lt
 8008596:	9b06      	ldrlt	r3, [sp, #24]
 8008598:	9606      	strlt	r6, [sp, #24]
 800859a:	1af2      	sublt	r2, r6, r3
 800859c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800859e:	bfb6      	itet	lt
 80085a0:	189b      	addlt	r3, r3, r2
 80085a2:	1b9e      	subge	r6, r3, r6
 80085a4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80085a6:	9b01      	ldr	r3, [sp, #4]
 80085a8:	bfb8      	it	lt
 80085aa:	2600      	movlt	r6, #0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	bfb5      	itete	lt
 80085b0:	eba8 0503 	sublt.w	r5, r8, r3
 80085b4:	9b01      	ldrge	r3, [sp, #4]
 80085b6:	2300      	movlt	r3, #0
 80085b8:	4645      	movge	r5, r8
 80085ba:	e747      	b.n	800844c <_dtoa_r+0x75c>
 80085bc:	9e06      	ldr	r6, [sp, #24]
 80085be:	9f08      	ldr	r7, [sp, #32]
 80085c0:	4645      	mov	r5, r8
 80085c2:	e74c      	b.n	800845e <_dtoa_r+0x76e>
 80085c4:	9a06      	ldr	r2, [sp, #24]
 80085c6:	e775      	b.n	80084b4 <_dtoa_r+0x7c4>
 80085c8:	9b05      	ldr	r3, [sp, #20]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	dc18      	bgt.n	8008600 <_dtoa_r+0x910>
 80085ce:	9b02      	ldr	r3, [sp, #8]
 80085d0:	b9b3      	cbnz	r3, 8008600 <_dtoa_r+0x910>
 80085d2:	9b03      	ldr	r3, [sp, #12]
 80085d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085d8:	b9a3      	cbnz	r3, 8008604 <_dtoa_r+0x914>
 80085da:	9b03      	ldr	r3, [sp, #12]
 80085dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085e0:	0d1b      	lsrs	r3, r3, #20
 80085e2:	051b      	lsls	r3, r3, #20
 80085e4:	b12b      	cbz	r3, 80085f2 <_dtoa_r+0x902>
 80085e6:	9b04      	ldr	r3, [sp, #16]
 80085e8:	3301      	adds	r3, #1
 80085ea:	9304      	str	r3, [sp, #16]
 80085ec:	f108 0801 	add.w	r8, r8, #1
 80085f0:	2301      	movs	r3, #1
 80085f2:	9306      	str	r3, [sp, #24]
 80085f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f47f af74 	bne.w	80084e4 <_dtoa_r+0x7f4>
 80085fc:	2001      	movs	r0, #1
 80085fe:	e779      	b.n	80084f4 <_dtoa_r+0x804>
 8008600:	2300      	movs	r3, #0
 8008602:	e7f6      	b.n	80085f2 <_dtoa_r+0x902>
 8008604:	9b02      	ldr	r3, [sp, #8]
 8008606:	e7f4      	b.n	80085f2 <_dtoa_r+0x902>
 8008608:	d085      	beq.n	8008516 <_dtoa_r+0x826>
 800860a:	4618      	mov	r0, r3
 800860c:	301c      	adds	r0, #28
 800860e:	e77d      	b.n	800850c <_dtoa_r+0x81c>
 8008610:	40240000 	.word	0x40240000
 8008614:	9b01      	ldr	r3, [sp, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	dc38      	bgt.n	800868c <_dtoa_r+0x99c>
 800861a:	9b05      	ldr	r3, [sp, #20]
 800861c:	2b02      	cmp	r3, #2
 800861e:	dd35      	ble.n	800868c <_dtoa_r+0x99c>
 8008620:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008624:	f1b9 0f00 	cmp.w	r9, #0
 8008628:	d10d      	bne.n	8008646 <_dtoa_r+0x956>
 800862a:	4631      	mov	r1, r6
 800862c:	464b      	mov	r3, r9
 800862e:	2205      	movs	r2, #5
 8008630:	4620      	mov	r0, r4
 8008632:	f000 fd47 	bl	80090c4 <__multadd>
 8008636:	4601      	mov	r1, r0
 8008638:	4606      	mov	r6, r0
 800863a:	4658      	mov	r0, fp
 800863c:	f000 ffa8 	bl	8009590 <__mcmp>
 8008640:	2800      	cmp	r0, #0
 8008642:	f73f adbd 	bgt.w	80081c0 <_dtoa_r+0x4d0>
 8008646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008648:	9d00      	ldr	r5, [sp, #0]
 800864a:	ea6f 0a03 	mvn.w	sl, r3
 800864e:	f04f 0800 	mov.w	r8, #0
 8008652:	4631      	mov	r1, r6
 8008654:	4620      	mov	r0, r4
 8008656:	f000 fd13 	bl	8009080 <_Bfree>
 800865a:	2f00      	cmp	r7, #0
 800865c:	f43f aeb4 	beq.w	80083c8 <_dtoa_r+0x6d8>
 8008660:	f1b8 0f00 	cmp.w	r8, #0
 8008664:	d005      	beq.n	8008672 <_dtoa_r+0x982>
 8008666:	45b8      	cmp	r8, r7
 8008668:	d003      	beq.n	8008672 <_dtoa_r+0x982>
 800866a:	4641      	mov	r1, r8
 800866c:	4620      	mov	r0, r4
 800866e:	f000 fd07 	bl	8009080 <_Bfree>
 8008672:	4639      	mov	r1, r7
 8008674:	4620      	mov	r0, r4
 8008676:	f000 fd03 	bl	8009080 <_Bfree>
 800867a:	e6a5      	b.n	80083c8 <_dtoa_r+0x6d8>
 800867c:	2600      	movs	r6, #0
 800867e:	4637      	mov	r7, r6
 8008680:	e7e1      	b.n	8008646 <_dtoa_r+0x956>
 8008682:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008684:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008688:	4637      	mov	r7, r6
 800868a:	e599      	b.n	80081c0 <_dtoa_r+0x4d0>
 800868c:	9b08      	ldr	r3, [sp, #32]
 800868e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	f000 80fd 	beq.w	8008892 <_dtoa_r+0xba2>
 8008698:	2d00      	cmp	r5, #0
 800869a:	dd05      	ble.n	80086a8 <_dtoa_r+0x9b8>
 800869c:	4639      	mov	r1, r7
 800869e:	462a      	mov	r2, r5
 80086a0:	4620      	mov	r0, r4
 80086a2:	f000 ff09 	bl	80094b8 <__lshift>
 80086a6:	4607      	mov	r7, r0
 80086a8:	9b06      	ldr	r3, [sp, #24]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d05c      	beq.n	8008768 <_dtoa_r+0xa78>
 80086ae:	6879      	ldr	r1, [r7, #4]
 80086b0:	4620      	mov	r0, r4
 80086b2:	f000 fca5 	bl	8009000 <_Balloc>
 80086b6:	4605      	mov	r5, r0
 80086b8:	b928      	cbnz	r0, 80086c6 <_dtoa_r+0x9d6>
 80086ba:	4b80      	ldr	r3, [pc, #512]	; (80088bc <_dtoa_r+0xbcc>)
 80086bc:	4602      	mov	r2, r0
 80086be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80086c2:	f7ff bb2e 	b.w	8007d22 <_dtoa_r+0x32>
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	3202      	adds	r2, #2
 80086ca:	0092      	lsls	r2, r2, #2
 80086cc:	f107 010c 	add.w	r1, r7, #12
 80086d0:	300c      	adds	r0, #12
 80086d2:	f000 fc87 	bl	8008fe4 <memcpy>
 80086d6:	2201      	movs	r2, #1
 80086d8:	4629      	mov	r1, r5
 80086da:	4620      	mov	r0, r4
 80086dc:	f000 feec 	bl	80094b8 <__lshift>
 80086e0:	9b00      	ldr	r3, [sp, #0]
 80086e2:	3301      	adds	r3, #1
 80086e4:	9301      	str	r3, [sp, #4]
 80086e6:	9b00      	ldr	r3, [sp, #0]
 80086e8:	444b      	add	r3, r9
 80086ea:	9307      	str	r3, [sp, #28]
 80086ec:	9b02      	ldr	r3, [sp, #8]
 80086ee:	f003 0301 	and.w	r3, r3, #1
 80086f2:	46b8      	mov	r8, r7
 80086f4:	9306      	str	r3, [sp, #24]
 80086f6:	4607      	mov	r7, r0
 80086f8:	9b01      	ldr	r3, [sp, #4]
 80086fa:	4631      	mov	r1, r6
 80086fc:	3b01      	subs	r3, #1
 80086fe:	4658      	mov	r0, fp
 8008700:	9302      	str	r3, [sp, #8]
 8008702:	f7ff fa67 	bl	8007bd4 <quorem>
 8008706:	4603      	mov	r3, r0
 8008708:	3330      	adds	r3, #48	; 0x30
 800870a:	9004      	str	r0, [sp, #16]
 800870c:	4641      	mov	r1, r8
 800870e:	4658      	mov	r0, fp
 8008710:	9308      	str	r3, [sp, #32]
 8008712:	f000 ff3d 	bl	8009590 <__mcmp>
 8008716:	463a      	mov	r2, r7
 8008718:	4681      	mov	r9, r0
 800871a:	4631      	mov	r1, r6
 800871c:	4620      	mov	r0, r4
 800871e:	f000 ff53 	bl	80095c8 <__mdiff>
 8008722:	68c2      	ldr	r2, [r0, #12]
 8008724:	9b08      	ldr	r3, [sp, #32]
 8008726:	4605      	mov	r5, r0
 8008728:	bb02      	cbnz	r2, 800876c <_dtoa_r+0xa7c>
 800872a:	4601      	mov	r1, r0
 800872c:	4658      	mov	r0, fp
 800872e:	f000 ff2f 	bl	8009590 <__mcmp>
 8008732:	9b08      	ldr	r3, [sp, #32]
 8008734:	4602      	mov	r2, r0
 8008736:	4629      	mov	r1, r5
 8008738:	4620      	mov	r0, r4
 800873a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800873e:	f000 fc9f 	bl	8009080 <_Bfree>
 8008742:	9b05      	ldr	r3, [sp, #20]
 8008744:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008746:	9d01      	ldr	r5, [sp, #4]
 8008748:	ea43 0102 	orr.w	r1, r3, r2
 800874c:	9b06      	ldr	r3, [sp, #24]
 800874e:	430b      	orrs	r3, r1
 8008750:	9b08      	ldr	r3, [sp, #32]
 8008752:	d10d      	bne.n	8008770 <_dtoa_r+0xa80>
 8008754:	2b39      	cmp	r3, #57	; 0x39
 8008756:	d029      	beq.n	80087ac <_dtoa_r+0xabc>
 8008758:	f1b9 0f00 	cmp.w	r9, #0
 800875c:	dd01      	ble.n	8008762 <_dtoa_r+0xa72>
 800875e:	9b04      	ldr	r3, [sp, #16]
 8008760:	3331      	adds	r3, #49	; 0x31
 8008762:	9a02      	ldr	r2, [sp, #8]
 8008764:	7013      	strb	r3, [r2, #0]
 8008766:	e774      	b.n	8008652 <_dtoa_r+0x962>
 8008768:	4638      	mov	r0, r7
 800876a:	e7b9      	b.n	80086e0 <_dtoa_r+0x9f0>
 800876c:	2201      	movs	r2, #1
 800876e:	e7e2      	b.n	8008736 <_dtoa_r+0xa46>
 8008770:	f1b9 0f00 	cmp.w	r9, #0
 8008774:	db06      	blt.n	8008784 <_dtoa_r+0xa94>
 8008776:	9905      	ldr	r1, [sp, #20]
 8008778:	ea41 0909 	orr.w	r9, r1, r9
 800877c:	9906      	ldr	r1, [sp, #24]
 800877e:	ea59 0101 	orrs.w	r1, r9, r1
 8008782:	d120      	bne.n	80087c6 <_dtoa_r+0xad6>
 8008784:	2a00      	cmp	r2, #0
 8008786:	ddec      	ble.n	8008762 <_dtoa_r+0xa72>
 8008788:	4659      	mov	r1, fp
 800878a:	2201      	movs	r2, #1
 800878c:	4620      	mov	r0, r4
 800878e:	9301      	str	r3, [sp, #4]
 8008790:	f000 fe92 	bl	80094b8 <__lshift>
 8008794:	4631      	mov	r1, r6
 8008796:	4683      	mov	fp, r0
 8008798:	f000 fefa 	bl	8009590 <__mcmp>
 800879c:	2800      	cmp	r0, #0
 800879e:	9b01      	ldr	r3, [sp, #4]
 80087a0:	dc02      	bgt.n	80087a8 <_dtoa_r+0xab8>
 80087a2:	d1de      	bne.n	8008762 <_dtoa_r+0xa72>
 80087a4:	07da      	lsls	r2, r3, #31
 80087a6:	d5dc      	bpl.n	8008762 <_dtoa_r+0xa72>
 80087a8:	2b39      	cmp	r3, #57	; 0x39
 80087aa:	d1d8      	bne.n	800875e <_dtoa_r+0xa6e>
 80087ac:	9a02      	ldr	r2, [sp, #8]
 80087ae:	2339      	movs	r3, #57	; 0x39
 80087b0:	7013      	strb	r3, [r2, #0]
 80087b2:	462b      	mov	r3, r5
 80087b4:	461d      	mov	r5, r3
 80087b6:	3b01      	subs	r3, #1
 80087b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80087bc:	2a39      	cmp	r2, #57	; 0x39
 80087be:	d050      	beq.n	8008862 <_dtoa_r+0xb72>
 80087c0:	3201      	adds	r2, #1
 80087c2:	701a      	strb	r2, [r3, #0]
 80087c4:	e745      	b.n	8008652 <_dtoa_r+0x962>
 80087c6:	2a00      	cmp	r2, #0
 80087c8:	dd03      	ble.n	80087d2 <_dtoa_r+0xae2>
 80087ca:	2b39      	cmp	r3, #57	; 0x39
 80087cc:	d0ee      	beq.n	80087ac <_dtoa_r+0xabc>
 80087ce:	3301      	adds	r3, #1
 80087d0:	e7c7      	b.n	8008762 <_dtoa_r+0xa72>
 80087d2:	9a01      	ldr	r2, [sp, #4]
 80087d4:	9907      	ldr	r1, [sp, #28]
 80087d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80087da:	428a      	cmp	r2, r1
 80087dc:	d02a      	beq.n	8008834 <_dtoa_r+0xb44>
 80087de:	4659      	mov	r1, fp
 80087e0:	2300      	movs	r3, #0
 80087e2:	220a      	movs	r2, #10
 80087e4:	4620      	mov	r0, r4
 80087e6:	f000 fc6d 	bl	80090c4 <__multadd>
 80087ea:	45b8      	cmp	r8, r7
 80087ec:	4683      	mov	fp, r0
 80087ee:	f04f 0300 	mov.w	r3, #0
 80087f2:	f04f 020a 	mov.w	r2, #10
 80087f6:	4641      	mov	r1, r8
 80087f8:	4620      	mov	r0, r4
 80087fa:	d107      	bne.n	800880c <_dtoa_r+0xb1c>
 80087fc:	f000 fc62 	bl	80090c4 <__multadd>
 8008800:	4680      	mov	r8, r0
 8008802:	4607      	mov	r7, r0
 8008804:	9b01      	ldr	r3, [sp, #4]
 8008806:	3301      	adds	r3, #1
 8008808:	9301      	str	r3, [sp, #4]
 800880a:	e775      	b.n	80086f8 <_dtoa_r+0xa08>
 800880c:	f000 fc5a 	bl	80090c4 <__multadd>
 8008810:	4639      	mov	r1, r7
 8008812:	4680      	mov	r8, r0
 8008814:	2300      	movs	r3, #0
 8008816:	220a      	movs	r2, #10
 8008818:	4620      	mov	r0, r4
 800881a:	f000 fc53 	bl	80090c4 <__multadd>
 800881e:	4607      	mov	r7, r0
 8008820:	e7f0      	b.n	8008804 <_dtoa_r+0xb14>
 8008822:	f1b9 0f00 	cmp.w	r9, #0
 8008826:	9a00      	ldr	r2, [sp, #0]
 8008828:	bfcc      	ite	gt
 800882a:	464d      	movgt	r5, r9
 800882c:	2501      	movle	r5, #1
 800882e:	4415      	add	r5, r2
 8008830:	f04f 0800 	mov.w	r8, #0
 8008834:	4659      	mov	r1, fp
 8008836:	2201      	movs	r2, #1
 8008838:	4620      	mov	r0, r4
 800883a:	9301      	str	r3, [sp, #4]
 800883c:	f000 fe3c 	bl	80094b8 <__lshift>
 8008840:	4631      	mov	r1, r6
 8008842:	4683      	mov	fp, r0
 8008844:	f000 fea4 	bl	8009590 <__mcmp>
 8008848:	2800      	cmp	r0, #0
 800884a:	dcb2      	bgt.n	80087b2 <_dtoa_r+0xac2>
 800884c:	d102      	bne.n	8008854 <_dtoa_r+0xb64>
 800884e:	9b01      	ldr	r3, [sp, #4]
 8008850:	07db      	lsls	r3, r3, #31
 8008852:	d4ae      	bmi.n	80087b2 <_dtoa_r+0xac2>
 8008854:	462b      	mov	r3, r5
 8008856:	461d      	mov	r5, r3
 8008858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800885c:	2a30      	cmp	r2, #48	; 0x30
 800885e:	d0fa      	beq.n	8008856 <_dtoa_r+0xb66>
 8008860:	e6f7      	b.n	8008652 <_dtoa_r+0x962>
 8008862:	9a00      	ldr	r2, [sp, #0]
 8008864:	429a      	cmp	r2, r3
 8008866:	d1a5      	bne.n	80087b4 <_dtoa_r+0xac4>
 8008868:	f10a 0a01 	add.w	sl, sl, #1
 800886c:	2331      	movs	r3, #49	; 0x31
 800886e:	e779      	b.n	8008764 <_dtoa_r+0xa74>
 8008870:	4b13      	ldr	r3, [pc, #76]	; (80088c0 <_dtoa_r+0xbd0>)
 8008872:	f7ff baaf 	b.w	8007dd4 <_dtoa_r+0xe4>
 8008876:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008878:	2b00      	cmp	r3, #0
 800887a:	f47f aa86 	bne.w	8007d8a <_dtoa_r+0x9a>
 800887e:	4b11      	ldr	r3, [pc, #68]	; (80088c4 <_dtoa_r+0xbd4>)
 8008880:	f7ff baa8 	b.w	8007dd4 <_dtoa_r+0xe4>
 8008884:	f1b9 0f00 	cmp.w	r9, #0
 8008888:	dc03      	bgt.n	8008892 <_dtoa_r+0xba2>
 800888a:	9b05      	ldr	r3, [sp, #20]
 800888c:	2b02      	cmp	r3, #2
 800888e:	f73f aec9 	bgt.w	8008624 <_dtoa_r+0x934>
 8008892:	9d00      	ldr	r5, [sp, #0]
 8008894:	4631      	mov	r1, r6
 8008896:	4658      	mov	r0, fp
 8008898:	f7ff f99c 	bl	8007bd4 <quorem>
 800889c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80088a0:	f805 3b01 	strb.w	r3, [r5], #1
 80088a4:	9a00      	ldr	r2, [sp, #0]
 80088a6:	1aaa      	subs	r2, r5, r2
 80088a8:	4591      	cmp	r9, r2
 80088aa:	ddba      	ble.n	8008822 <_dtoa_r+0xb32>
 80088ac:	4659      	mov	r1, fp
 80088ae:	2300      	movs	r3, #0
 80088b0:	220a      	movs	r2, #10
 80088b2:	4620      	mov	r0, r4
 80088b4:	f000 fc06 	bl	80090c4 <__multadd>
 80088b8:	4683      	mov	fp, r0
 80088ba:	e7eb      	b.n	8008894 <_dtoa_r+0xba4>
 80088bc:	0800ae3c 	.word	0x0800ae3c
 80088c0:	0800ac3c 	.word	0x0800ac3c
 80088c4:	0800adb9 	.word	0x0800adb9

080088c8 <rshift>:
 80088c8:	6903      	ldr	r3, [r0, #16]
 80088ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80088ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80088d6:	f100 0414 	add.w	r4, r0, #20
 80088da:	dd45      	ble.n	8008968 <rshift+0xa0>
 80088dc:	f011 011f 	ands.w	r1, r1, #31
 80088e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80088e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80088e8:	d10c      	bne.n	8008904 <rshift+0x3c>
 80088ea:	f100 0710 	add.w	r7, r0, #16
 80088ee:	4629      	mov	r1, r5
 80088f0:	42b1      	cmp	r1, r6
 80088f2:	d334      	bcc.n	800895e <rshift+0x96>
 80088f4:	1a9b      	subs	r3, r3, r2
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	1eea      	subs	r2, r5, #3
 80088fa:	4296      	cmp	r6, r2
 80088fc:	bf38      	it	cc
 80088fe:	2300      	movcc	r3, #0
 8008900:	4423      	add	r3, r4
 8008902:	e015      	b.n	8008930 <rshift+0x68>
 8008904:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008908:	f1c1 0820 	rsb	r8, r1, #32
 800890c:	40cf      	lsrs	r7, r1
 800890e:	f105 0e04 	add.w	lr, r5, #4
 8008912:	46a1      	mov	r9, r4
 8008914:	4576      	cmp	r6, lr
 8008916:	46f4      	mov	ip, lr
 8008918:	d815      	bhi.n	8008946 <rshift+0x7e>
 800891a:	1a9b      	subs	r3, r3, r2
 800891c:	009a      	lsls	r2, r3, #2
 800891e:	3a04      	subs	r2, #4
 8008920:	3501      	adds	r5, #1
 8008922:	42ae      	cmp	r6, r5
 8008924:	bf38      	it	cc
 8008926:	2200      	movcc	r2, #0
 8008928:	18a3      	adds	r3, r4, r2
 800892a:	50a7      	str	r7, [r4, r2]
 800892c:	b107      	cbz	r7, 8008930 <rshift+0x68>
 800892e:	3304      	adds	r3, #4
 8008930:	1b1a      	subs	r2, r3, r4
 8008932:	42a3      	cmp	r3, r4
 8008934:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008938:	bf08      	it	eq
 800893a:	2300      	moveq	r3, #0
 800893c:	6102      	str	r2, [r0, #16]
 800893e:	bf08      	it	eq
 8008940:	6143      	streq	r3, [r0, #20]
 8008942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008946:	f8dc c000 	ldr.w	ip, [ip]
 800894a:	fa0c fc08 	lsl.w	ip, ip, r8
 800894e:	ea4c 0707 	orr.w	r7, ip, r7
 8008952:	f849 7b04 	str.w	r7, [r9], #4
 8008956:	f85e 7b04 	ldr.w	r7, [lr], #4
 800895a:	40cf      	lsrs	r7, r1
 800895c:	e7da      	b.n	8008914 <rshift+0x4c>
 800895e:	f851 cb04 	ldr.w	ip, [r1], #4
 8008962:	f847 cf04 	str.w	ip, [r7, #4]!
 8008966:	e7c3      	b.n	80088f0 <rshift+0x28>
 8008968:	4623      	mov	r3, r4
 800896a:	e7e1      	b.n	8008930 <rshift+0x68>

0800896c <__hexdig_fun>:
 800896c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008970:	2b09      	cmp	r3, #9
 8008972:	d802      	bhi.n	800897a <__hexdig_fun+0xe>
 8008974:	3820      	subs	r0, #32
 8008976:	b2c0      	uxtb	r0, r0
 8008978:	4770      	bx	lr
 800897a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800897e:	2b05      	cmp	r3, #5
 8008980:	d801      	bhi.n	8008986 <__hexdig_fun+0x1a>
 8008982:	3847      	subs	r0, #71	; 0x47
 8008984:	e7f7      	b.n	8008976 <__hexdig_fun+0xa>
 8008986:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800898a:	2b05      	cmp	r3, #5
 800898c:	d801      	bhi.n	8008992 <__hexdig_fun+0x26>
 800898e:	3827      	subs	r0, #39	; 0x27
 8008990:	e7f1      	b.n	8008976 <__hexdig_fun+0xa>
 8008992:	2000      	movs	r0, #0
 8008994:	4770      	bx	lr
	...

08008998 <__gethex>:
 8008998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899c:	ed2d 8b02 	vpush	{d8}
 80089a0:	b089      	sub	sp, #36	; 0x24
 80089a2:	ee08 0a10 	vmov	s16, r0
 80089a6:	9304      	str	r3, [sp, #16]
 80089a8:	4bbc      	ldr	r3, [pc, #752]	; (8008c9c <__gethex+0x304>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	9301      	str	r3, [sp, #4]
 80089ae:	4618      	mov	r0, r3
 80089b0:	468b      	mov	fp, r1
 80089b2:	4690      	mov	r8, r2
 80089b4:	f7f7 fc1c 	bl	80001f0 <strlen>
 80089b8:	9b01      	ldr	r3, [sp, #4]
 80089ba:	f8db 2000 	ldr.w	r2, [fp]
 80089be:	4403      	add	r3, r0
 80089c0:	4682      	mov	sl, r0
 80089c2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80089c6:	9305      	str	r3, [sp, #20]
 80089c8:	1c93      	adds	r3, r2, #2
 80089ca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80089ce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80089d2:	32fe      	adds	r2, #254	; 0xfe
 80089d4:	18d1      	adds	r1, r2, r3
 80089d6:	461f      	mov	r7, r3
 80089d8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80089dc:	9100      	str	r1, [sp, #0]
 80089de:	2830      	cmp	r0, #48	; 0x30
 80089e0:	d0f8      	beq.n	80089d4 <__gethex+0x3c>
 80089e2:	f7ff ffc3 	bl	800896c <__hexdig_fun>
 80089e6:	4604      	mov	r4, r0
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d13a      	bne.n	8008a62 <__gethex+0xca>
 80089ec:	9901      	ldr	r1, [sp, #4]
 80089ee:	4652      	mov	r2, sl
 80089f0:	4638      	mov	r0, r7
 80089f2:	f001 f9ed 	bl	8009dd0 <strncmp>
 80089f6:	4605      	mov	r5, r0
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d168      	bne.n	8008ace <__gethex+0x136>
 80089fc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008a00:	eb07 060a 	add.w	r6, r7, sl
 8008a04:	f7ff ffb2 	bl	800896c <__hexdig_fun>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d062      	beq.n	8008ad2 <__gethex+0x13a>
 8008a0c:	4633      	mov	r3, r6
 8008a0e:	7818      	ldrb	r0, [r3, #0]
 8008a10:	2830      	cmp	r0, #48	; 0x30
 8008a12:	461f      	mov	r7, r3
 8008a14:	f103 0301 	add.w	r3, r3, #1
 8008a18:	d0f9      	beq.n	8008a0e <__gethex+0x76>
 8008a1a:	f7ff ffa7 	bl	800896c <__hexdig_fun>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	fab0 f480 	clz	r4, r0
 8008a24:	0964      	lsrs	r4, r4, #5
 8008a26:	4635      	mov	r5, r6
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	463a      	mov	r2, r7
 8008a2c:	4616      	mov	r6, r2
 8008a2e:	3201      	adds	r2, #1
 8008a30:	7830      	ldrb	r0, [r6, #0]
 8008a32:	f7ff ff9b 	bl	800896c <__hexdig_fun>
 8008a36:	2800      	cmp	r0, #0
 8008a38:	d1f8      	bne.n	8008a2c <__gethex+0x94>
 8008a3a:	9901      	ldr	r1, [sp, #4]
 8008a3c:	4652      	mov	r2, sl
 8008a3e:	4630      	mov	r0, r6
 8008a40:	f001 f9c6 	bl	8009dd0 <strncmp>
 8008a44:	b980      	cbnz	r0, 8008a68 <__gethex+0xd0>
 8008a46:	b94d      	cbnz	r5, 8008a5c <__gethex+0xc4>
 8008a48:	eb06 050a 	add.w	r5, r6, sl
 8008a4c:	462a      	mov	r2, r5
 8008a4e:	4616      	mov	r6, r2
 8008a50:	3201      	adds	r2, #1
 8008a52:	7830      	ldrb	r0, [r6, #0]
 8008a54:	f7ff ff8a 	bl	800896c <__hexdig_fun>
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	d1f8      	bne.n	8008a4e <__gethex+0xb6>
 8008a5c:	1bad      	subs	r5, r5, r6
 8008a5e:	00ad      	lsls	r5, r5, #2
 8008a60:	e004      	b.n	8008a6c <__gethex+0xd4>
 8008a62:	2400      	movs	r4, #0
 8008a64:	4625      	mov	r5, r4
 8008a66:	e7e0      	b.n	8008a2a <__gethex+0x92>
 8008a68:	2d00      	cmp	r5, #0
 8008a6a:	d1f7      	bne.n	8008a5c <__gethex+0xc4>
 8008a6c:	7833      	ldrb	r3, [r6, #0]
 8008a6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a72:	2b50      	cmp	r3, #80	; 0x50
 8008a74:	d13b      	bne.n	8008aee <__gethex+0x156>
 8008a76:	7873      	ldrb	r3, [r6, #1]
 8008a78:	2b2b      	cmp	r3, #43	; 0x2b
 8008a7a:	d02c      	beq.n	8008ad6 <__gethex+0x13e>
 8008a7c:	2b2d      	cmp	r3, #45	; 0x2d
 8008a7e:	d02e      	beq.n	8008ade <__gethex+0x146>
 8008a80:	1c71      	adds	r1, r6, #1
 8008a82:	f04f 0900 	mov.w	r9, #0
 8008a86:	7808      	ldrb	r0, [r1, #0]
 8008a88:	f7ff ff70 	bl	800896c <__hexdig_fun>
 8008a8c:	1e43      	subs	r3, r0, #1
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	2b18      	cmp	r3, #24
 8008a92:	d82c      	bhi.n	8008aee <__gethex+0x156>
 8008a94:	f1a0 0210 	sub.w	r2, r0, #16
 8008a98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008a9c:	f7ff ff66 	bl	800896c <__hexdig_fun>
 8008aa0:	1e43      	subs	r3, r0, #1
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b18      	cmp	r3, #24
 8008aa6:	d91d      	bls.n	8008ae4 <__gethex+0x14c>
 8008aa8:	f1b9 0f00 	cmp.w	r9, #0
 8008aac:	d000      	beq.n	8008ab0 <__gethex+0x118>
 8008aae:	4252      	negs	r2, r2
 8008ab0:	4415      	add	r5, r2
 8008ab2:	f8cb 1000 	str.w	r1, [fp]
 8008ab6:	b1e4      	cbz	r4, 8008af2 <__gethex+0x15a>
 8008ab8:	9b00      	ldr	r3, [sp, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	bf14      	ite	ne
 8008abe:	2700      	movne	r7, #0
 8008ac0:	2706      	moveq	r7, #6
 8008ac2:	4638      	mov	r0, r7
 8008ac4:	b009      	add	sp, #36	; 0x24
 8008ac6:	ecbd 8b02 	vpop	{d8}
 8008aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ace:	463e      	mov	r6, r7
 8008ad0:	4625      	mov	r5, r4
 8008ad2:	2401      	movs	r4, #1
 8008ad4:	e7ca      	b.n	8008a6c <__gethex+0xd4>
 8008ad6:	f04f 0900 	mov.w	r9, #0
 8008ada:	1cb1      	adds	r1, r6, #2
 8008adc:	e7d3      	b.n	8008a86 <__gethex+0xee>
 8008ade:	f04f 0901 	mov.w	r9, #1
 8008ae2:	e7fa      	b.n	8008ada <__gethex+0x142>
 8008ae4:	230a      	movs	r3, #10
 8008ae6:	fb03 0202 	mla	r2, r3, r2, r0
 8008aea:	3a10      	subs	r2, #16
 8008aec:	e7d4      	b.n	8008a98 <__gethex+0x100>
 8008aee:	4631      	mov	r1, r6
 8008af0:	e7df      	b.n	8008ab2 <__gethex+0x11a>
 8008af2:	1bf3      	subs	r3, r6, r7
 8008af4:	3b01      	subs	r3, #1
 8008af6:	4621      	mov	r1, r4
 8008af8:	2b07      	cmp	r3, #7
 8008afa:	dc0b      	bgt.n	8008b14 <__gethex+0x17c>
 8008afc:	ee18 0a10 	vmov	r0, s16
 8008b00:	f000 fa7e 	bl	8009000 <_Balloc>
 8008b04:	4604      	mov	r4, r0
 8008b06:	b940      	cbnz	r0, 8008b1a <__gethex+0x182>
 8008b08:	4b65      	ldr	r3, [pc, #404]	; (8008ca0 <__gethex+0x308>)
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	21de      	movs	r1, #222	; 0xde
 8008b0e:	4865      	ldr	r0, [pc, #404]	; (8008ca4 <__gethex+0x30c>)
 8008b10:	f001 f97e 	bl	8009e10 <__assert_func>
 8008b14:	3101      	adds	r1, #1
 8008b16:	105b      	asrs	r3, r3, #1
 8008b18:	e7ee      	b.n	8008af8 <__gethex+0x160>
 8008b1a:	f100 0914 	add.w	r9, r0, #20
 8008b1e:	f04f 0b00 	mov.w	fp, #0
 8008b22:	f1ca 0301 	rsb	r3, sl, #1
 8008b26:	f8cd 9008 	str.w	r9, [sp, #8]
 8008b2a:	f8cd b000 	str.w	fp, [sp]
 8008b2e:	9306      	str	r3, [sp, #24]
 8008b30:	42b7      	cmp	r7, r6
 8008b32:	d340      	bcc.n	8008bb6 <__gethex+0x21e>
 8008b34:	9802      	ldr	r0, [sp, #8]
 8008b36:	9b00      	ldr	r3, [sp, #0]
 8008b38:	f840 3b04 	str.w	r3, [r0], #4
 8008b3c:	eba0 0009 	sub.w	r0, r0, r9
 8008b40:	1080      	asrs	r0, r0, #2
 8008b42:	0146      	lsls	r6, r0, #5
 8008b44:	6120      	str	r0, [r4, #16]
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 fb50 	bl	80091ec <__hi0bits>
 8008b4c:	1a30      	subs	r0, r6, r0
 8008b4e:	f8d8 6000 	ldr.w	r6, [r8]
 8008b52:	42b0      	cmp	r0, r6
 8008b54:	dd63      	ble.n	8008c1e <__gethex+0x286>
 8008b56:	1b87      	subs	r7, r0, r6
 8008b58:	4639      	mov	r1, r7
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f000 feea 	bl	8009934 <__any_on>
 8008b60:	4682      	mov	sl, r0
 8008b62:	b1a8      	cbz	r0, 8008b90 <__gethex+0x1f8>
 8008b64:	1e7b      	subs	r3, r7, #1
 8008b66:	1159      	asrs	r1, r3, #5
 8008b68:	f003 021f 	and.w	r2, r3, #31
 8008b6c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008b70:	f04f 0a01 	mov.w	sl, #1
 8008b74:	fa0a f202 	lsl.w	r2, sl, r2
 8008b78:	420a      	tst	r2, r1
 8008b7a:	d009      	beq.n	8008b90 <__gethex+0x1f8>
 8008b7c:	4553      	cmp	r3, sl
 8008b7e:	dd05      	ble.n	8008b8c <__gethex+0x1f4>
 8008b80:	1eb9      	subs	r1, r7, #2
 8008b82:	4620      	mov	r0, r4
 8008b84:	f000 fed6 	bl	8009934 <__any_on>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d145      	bne.n	8008c18 <__gethex+0x280>
 8008b8c:	f04f 0a02 	mov.w	sl, #2
 8008b90:	4639      	mov	r1, r7
 8008b92:	4620      	mov	r0, r4
 8008b94:	f7ff fe98 	bl	80088c8 <rshift>
 8008b98:	443d      	add	r5, r7
 8008b9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b9e:	42ab      	cmp	r3, r5
 8008ba0:	da4c      	bge.n	8008c3c <__gethex+0x2a4>
 8008ba2:	ee18 0a10 	vmov	r0, s16
 8008ba6:	4621      	mov	r1, r4
 8008ba8:	f000 fa6a 	bl	8009080 <_Bfree>
 8008bac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008bae:	2300      	movs	r3, #0
 8008bb0:	6013      	str	r3, [r2, #0]
 8008bb2:	27a3      	movs	r7, #163	; 0xa3
 8008bb4:	e785      	b.n	8008ac2 <__gethex+0x12a>
 8008bb6:	1e73      	subs	r3, r6, #1
 8008bb8:	9a05      	ldr	r2, [sp, #20]
 8008bba:	9303      	str	r3, [sp, #12]
 8008bbc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d019      	beq.n	8008bf8 <__gethex+0x260>
 8008bc4:	f1bb 0f20 	cmp.w	fp, #32
 8008bc8:	d107      	bne.n	8008bda <__gethex+0x242>
 8008bca:	9b02      	ldr	r3, [sp, #8]
 8008bcc:	9a00      	ldr	r2, [sp, #0]
 8008bce:	f843 2b04 	str.w	r2, [r3], #4
 8008bd2:	9302      	str	r3, [sp, #8]
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	469b      	mov	fp, r3
 8008bda:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008bde:	f7ff fec5 	bl	800896c <__hexdig_fun>
 8008be2:	9b00      	ldr	r3, [sp, #0]
 8008be4:	f000 000f 	and.w	r0, r0, #15
 8008be8:	fa00 f00b 	lsl.w	r0, r0, fp
 8008bec:	4303      	orrs	r3, r0
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	f10b 0b04 	add.w	fp, fp, #4
 8008bf4:	9b03      	ldr	r3, [sp, #12]
 8008bf6:	e00d      	b.n	8008c14 <__gethex+0x27c>
 8008bf8:	9b03      	ldr	r3, [sp, #12]
 8008bfa:	9a06      	ldr	r2, [sp, #24]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	42bb      	cmp	r3, r7
 8008c00:	d3e0      	bcc.n	8008bc4 <__gethex+0x22c>
 8008c02:	4618      	mov	r0, r3
 8008c04:	9901      	ldr	r1, [sp, #4]
 8008c06:	9307      	str	r3, [sp, #28]
 8008c08:	4652      	mov	r2, sl
 8008c0a:	f001 f8e1 	bl	8009dd0 <strncmp>
 8008c0e:	9b07      	ldr	r3, [sp, #28]
 8008c10:	2800      	cmp	r0, #0
 8008c12:	d1d7      	bne.n	8008bc4 <__gethex+0x22c>
 8008c14:	461e      	mov	r6, r3
 8008c16:	e78b      	b.n	8008b30 <__gethex+0x198>
 8008c18:	f04f 0a03 	mov.w	sl, #3
 8008c1c:	e7b8      	b.n	8008b90 <__gethex+0x1f8>
 8008c1e:	da0a      	bge.n	8008c36 <__gethex+0x29e>
 8008c20:	1a37      	subs	r7, r6, r0
 8008c22:	4621      	mov	r1, r4
 8008c24:	ee18 0a10 	vmov	r0, s16
 8008c28:	463a      	mov	r2, r7
 8008c2a:	f000 fc45 	bl	80094b8 <__lshift>
 8008c2e:	1bed      	subs	r5, r5, r7
 8008c30:	4604      	mov	r4, r0
 8008c32:	f100 0914 	add.w	r9, r0, #20
 8008c36:	f04f 0a00 	mov.w	sl, #0
 8008c3a:	e7ae      	b.n	8008b9a <__gethex+0x202>
 8008c3c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008c40:	42a8      	cmp	r0, r5
 8008c42:	dd72      	ble.n	8008d2a <__gethex+0x392>
 8008c44:	1b45      	subs	r5, r0, r5
 8008c46:	42ae      	cmp	r6, r5
 8008c48:	dc36      	bgt.n	8008cb8 <__gethex+0x320>
 8008c4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d02a      	beq.n	8008ca8 <__gethex+0x310>
 8008c52:	2b03      	cmp	r3, #3
 8008c54:	d02c      	beq.n	8008cb0 <__gethex+0x318>
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d115      	bne.n	8008c86 <__gethex+0x2ee>
 8008c5a:	42ae      	cmp	r6, r5
 8008c5c:	d113      	bne.n	8008c86 <__gethex+0x2ee>
 8008c5e:	2e01      	cmp	r6, #1
 8008c60:	d10b      	bne.n	8008c7a <__gethex+0x2e2>
 8008c62:	9a04      	ldr	r2, [sp, #16]
 8008c64:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008c68:	6013      	str	r3, [r2, #0]
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	6123      	str	r3, [r4, #16]
 8008c6e:	f8c9 3000 	str.w	r3, [r9]
 8008c72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c74:	2762      	movs	r7, #98	; 0x62
 8008c76:	601c      	str	r4, [r3, #0]
 8008c78:	e723      	b.n	8008ac2 <__gethex+0x12a>
 8008c7a:	1e71      	subs	r1, r6, #1
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f000 fe59 	bl	8009934 <__any_on>
 8008c82:	2800      	cmp	r0, #0
 8008c84:	d1ed      	bne.n	8008c62 <__gethex+0x2ca>
 8008c86:	ee18 0a10 	vmov	r0, s16
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	f000 f9f8 	bl	8009080 <_Bfree>
 8008c90:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c92:	2300      	movs	r3, #0
 8008c94:	6013      	str	r3, [r2, #0]
 8008c96:	2750      	movs	r7, #80	; 0x50
 8008c98:	e713      	b.n	8008ac2 <__gethex+0x12a>
 8008c9a:	bf00      	nop
 8008c9c:	0800aeb8 	.word	0x0800aeb8
 8008ca0:	0800ae3c 	.word	0x0800ae3c
 8008ca4:	0800ae4d 	.word	0x0800ae4d
 8008ca8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1eb      	bne.n	8008c86 <__gethex+0x2ee>
 8008cae:	e7d8      	b.n	8008c62 <__gethex+0x2ca>
 8008cb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1d5      	bne.n	8008c62 <__gethex+0x2ca>
 8008cb6:	e7e6      	b.n	8008c86 <__gethex+0x2ee>
 8008cb8:	1e6f      	subs	r7, r5, #1
 8008cba:	f1ba 0f00 	cmp.w	sl, #0
 8008cbe:	d131      	bne.n	8008d24 <__gethex+0x38c>
 8008cc0:	b127      	cbz	r7, 8008ccc <__gethex+0x334>
 8008cc2:	4639      	mov	r1, r7
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	f000 fe35 	bl	8009934 <__any_on>
 8008cca:	4682      	mov	sl, r0
 8008ccc:	117b      	asrs	r3, r7, #5
 8008cce:	2101      	movs	r1, #1
 8008cd0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008cd4:	f007 071f 	and.w	r7, r7, #31
 8008cd8:	fa01 f707 	lsl.w	r7, r1, r7
 8008cdc:	421f      	tst	r7, r3
 8008cde:	4629      	mov	r1, r5
 8008ce0:	4620      	mov	r0, r4
 8008ce2:	bf18      	it	ne
 8008ce4:	f04a 0a02 	orrne.w	sl, sl, #2
 8008ce8:	1b76      	subs	r6, r6, r5
 8008cea:	f7ff fded 	bl	80088c8 <rshift>
 8008cee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008cf2:	2702      	movs	r7, #2
 8008cf4:	f1ba 0f00 	cmp.w	sl, #0
 8008cf8:	d048      	beq.n	8008d8c <__gethex+0x3f4>
 8008cfa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	d015      	beq.n	8008d2e <__gethex+0x396>
 8008d02:	2b03      	cmp	r3, #3
 8008d04:	d017      	beq.n	8008d36 <__gethex+0x39e>
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d109      	bne.n	8008d1e <__gethex+0x386>
 8008d0a:	f01a 0f02 	tst.w	sl, #2
 8008d0e:	d006      	beq.n	8008d1e <__gethex+0x386>
 8008d10:	f8d9 0000 	ldr.w	r0, [r9]
 8008d14:	ea4a 0a00 	orr.w	sl, sl, r0
 8008d18:	f01a 0f01 	tst.w	sl, #1
 8008d1c:	d10e      	bne.n	8008d3c <__gethex+0x3a4>
 8008d1e:	f047 0710 	orr.w	r7, r7, #16
 8008d22:	e033      	b.n	8008d8c <__gethex+0x3f4>
 8008d24:	f04f 0a01 	mov.w	sl, #1
 8008d28:	e7d0      	b.n	8008ccc <__gethex+0x334>
 8008d2a:	2701      	movs	r7, #1
 8008d2c:	e7e2      	b.n	8008cf4 <__gethex+0x35c>
 8008d2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d30:	f1c3 0301 	rsb	r3, r3, #1
 8008d34:	9315      	str	r3, [sp, #84]	; 0x54
 8008d36:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d0f0      	beq.n	8008d1e <__gethex+0x386>
 8008d3c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008d40:	f104 0314 	add.w	r3, r4, #20
 8008d44:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008d48:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008d4c:	f04f 0c00 	mov.w	ip, #0
 8008d50:	4618      	mov	r0, r3
 8008d52:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d56:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008d5a:	d01c      	beq.n	8008d96 <__gethex+0x3fe>
 8008d5c:	3201      	adds	r2, #1
 8008d5e:	6002      	str	r2, [r0, #0]
 8008d60:	2f02      	cmp	r7, #2
 8008d62:	f104 0314 	add.w	r3, r4, #20
 8008d66:	d13f      	bne.n	8008de8 <__gethex+0x450>
 8008d68:	f8d8 2000 	ldr.w	r2, [r8]
 8008d6c:	3a01      	subs	r2, #1
 8008d6e:	42b2      	cmp	r2, r6
 8008d70:	d10a      	bne.n	8008d88 <__gethex+0x3f0>
 8008d72:	1171      	asrs	r1, r6, #5
 8008d74:	2201      	movs	r2, #1
 8008d76:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d7a:	f006 061f 	and.w	r6, r6, #31
 8008d7e:	fa02 f606 	lsl.w	r6, r2, r6
 8008d82:	421e      	tst	r6, r3
 8008d84:	bf18      	it	ne
 8008d86:	4617      	movne	r7, r2
 8008d88:	f047 0720 	orr.w	r7, r7, #32
 8008d8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d8e:	601c      	str	r4, [r3, #0]
 8008d90:	9b04      	ldr	r3, [sp, #16]
 8008d92:	601d      	str	r5, [r3, #0]
 8008d94:	e695      	b.n	8008ac2 <__gethex+0x12a>
 8008d96:	4299      	cmp	r1, r3
 8008d98:	f843 cc04 	str.w	ip, [r3, #-4]
 8008d9c:	d8d8      	bhi.n	8008d50 <__gethex+0x3b8>
 8008d9e:	68a3      	ldr	r3, [r4, #8]
 8008da0:	459b      	cmp	fp, r3
 8008da2:	db19      	blt.n	8008dd8 <__gethex+0x440>
 8008da4:	6861      	ldr	r1, [r4, #4]
 8008da6:	ee18 0a10 	vmov	r0, s16
 8008daa:	3101      	adds	r1, #1
 8008dac:	f000 f928 	bl	8009000 <_Balloc>
 8008db0:	4681      	mov	r9, r0
 8008db2:	b918      	cbnz	r0, 8008dbc <__gethex+0x424>
 8008db4:	4b1a      	ldr	r3, [pc, #104]	; (8008e20 <__gethex+0x488>)
 8008db6:	4602      	mov	r2, r0
 8008db8:	2184      	movs	r1, #132	; 0x84
 8008dba:	e6a8      	b.n	8008b0e <__gethex+0x176>
 8008dbc:	6922      	ldr	r2, [r4, #16]
 8008dbe:	3202      	adds	r2, #2
 8008dc0:	f104 010c 	add.w	r1, r4, #12
 8008dc4:	0092      	lsls	r2, r2, #2
 8008dc6:	300c      	adds	r0, #12
 8008dc8:	f000 f90c 	bl	8008fe4 <memcpy>
 8008dcc:	4621      	mov	r1, r4
 8008dce:	ee18 0a10 	vmov	r0, s16
 8008dd2:	f000 f955 	bl	8009080 <_Bfree>
 8008dd6:	464c      	mov	r4, r9
 8008dd8:	6923      	ldr	r3, [r4, #16]
 8008dda:	1c5a      	adds	r2, r3, #1
 8008ddc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008de0:	6122      	str	r2, [r4, #16]
 8008de2:	2201      	movs	r2, #1
 8008de4:	615a      	str	r2, [r3, #20]
 8008de6:	e7bb      	b.n	8008d60 <__gethex+0x3c8>
 8008de8:	6922      	ldr	r2, [r4, #16]
 8008dea:	455a      	cmp	r2, fp
 8008dec:	dd0b      	ble.n	8008e06 <__gethex+0x46e>
 8008dee:	2101      	movs	r1, #1
 8008df0:	4620      	mov	r0, r4
 8008df2:	f7ff fd69 	bl	80088c8 <rshift>
 8008df6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008dfa:	3501      	adds	r5, #1
 8008dfc:	42ab      	cmp	r3, r5
 8008dfe:	f6ff aed0 	blt.w	8008ba2 <__gethex+0x20a>
 8008e02:	2701      	movs	r7, #1
 8008e04:	e7c0      	b.n	8008d88 <__gethex+0x3f0>
 8008e06:	f016 061f 	ands.w	r6, r6, #31
 8008e0a:	d0fa      	beq.n	8008e02 <__gethex+0x46a>
 8008e0c:	449a      	add	sl, r3
 8008e0e:	f1c6 0620 	rsb	r6, r6, #32
 8008e12:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008e16:	f000 f9e9 	bl	80091ec <__hi0bits>
 8008e1a:	42b0      	cmp	r0, r6
 8008e1c:	dbe7      	blt.n	8008dee <__gethex+0x456>
 8008e1e:	e7f0      	b.n	8008e02 <__gethex+0x46a>
 8008e20:	0800ae3c 	.word	0x0800ae3c

08008e24 <L_shift>:
 8008e24:	f1c2 0208 	rsb	r2, r2, #8
 8008e28:	0092      	lsls	r2, r2, #2
 8008e2a:	b570      	push	{r4, r5, r6, lr}
 8008e2c:	f1c2 0620 	rsb	r6, r2, #32
 8008e30:	6843      	ldr	r3, [r0, #4]
 8008e32:	6804      	ldr	r4, [r0, #0]
 8008e34:	fa03 f506 	lsl.w	r5, r3, r6
 8008e38:	432c      	orrs	r4, r5
 8008e3a:	40d3      	lsrs	r3, r2
 8008e3c:	6004      	str	r4, [r0, #0]
 8008e3e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e42:	4288      	cmp	r0, r1
 8008e44:	d3f4      	bcc.n	8008e30 <L_shift+0xc>
 8008e46:	bd70      	pop	{r4, r5, r6, pc}

08008e48 <__match>:
 8008e48:	b530      	push	{r4, r5, lr}
 8008e4a:	6803      	ldr	r3, [r0, #0]
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e52:	b914      	cbnz	r4, 8008e5a <__match+0x12>
 8008e54:	6003      	str	r3, [r0, #0]
 8008e56:	2001      	movs	r0, #1
 8008e58:	bd30      	pop	{r4, r5, pc}
 8008e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e5e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008e62:	2d19      	cmp	r5, #25
 8008e64:	bf98      	it	ls
 8008e66:	3220      	addls	r2, #32
 8008e68:	42a2      	cmp	r2, r4
 8008e6a:	d0f0      	beq.n	8008e4e <__match+0x6>
 8008e6c:	2000      	movs	r0, #0
 8008e6e:	e7f3      	b.n	8008e58 <__match+0x10>

08008e70 <__hexnan>:
 8008e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e74:	680b      	ldr	r3, [r1, #0]
 8008e76:	6801      	ldr	r1, [r0, #0]
 8008e78:	115e      	asrs	r6, r3, #5
 8008e7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008e7e:	f013 031f 	ands.w	r3, r3, #31
 8008e82:	b087      	sub	sp, #28
 8008e84:	bf18      	it	ne
 8008e86:	3604      	addne	r6, #4
 8008e88:	2500      	movs	r5, #0
 8008e8a:	1f37      	subs	r7, r6, #4
 8008e8c:	4682      	mov	sl, r0
 8008e8e:	4690      	mov	r8, r2
 8008e90:	9301      	str	r3, [sp, #4]
 8008e92:	f846 5c04 	str.w	r5, [r6, #-4]
 8008e96:	46b9      	mov	r9, r7
 8008e98:	463c      	mov	r4, r7
 8008e9a:	9502      	str	r5, [sp, #8]
 8008e9c:	46ab      	mov	fp, r5
 8008e9e:	784a      	ldrb	r2, [r1, #1]
 8008ea0:	1c4b      	adds	r3, r1, #1
 8008ea2:	9303      	str	r3, [sp, #12]
 8008ea4:	b342      	cbz	r2, 8008ef8 <__hexnan+0x88>
 8008ea6:	4610      	mov	r0, r2
 8008ea8:	9105      	str	r1, [sp, #20]
 8008eaa:	9204      	str	r2, [sp, #16]
 8008eac:	f7ff fd5e 	bl	800896c <__hexdig_fun>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	d14f      	bne.n	8008f54 <__hexnan+0xe4>
 8008eb4:	9a04      	ldr	r2, [sp, #16]
 8008eb6:	9905      	ldr	r1, [sp, #20]
 8008eb8:	2a20      	cmp	r2, #32
 8008eba:	d818      	bhi.n	8008eee <__hexnan+0x7e>
 8008ebc:	9b02      	ldr	r3, [sp, #8]
 8008ebe:	459b      	cmp	fp, r3
 8008ec0:	dd13      	ble.n	8008eea <__hexnan+0x7a>
 8008ec2:	454c      	cmp	r4, r9
 8008ec4:	d206      	bcs.n	8008ed4 <__hexnan+0x64>
 8008ec6:	2d07      	cmp	r5, #7
 8008ec8:	dc04      	bgt.n	8008ed4 <__hexnan+0x64>
 8008eca:	462a      	mov	r2, r5
 8008ecc:	4649      	mov	r1, r9
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f7ff ffa8 	bl	8008e24 <L_shift>
 8008ed4:	4544      	cmp	r4, r8
 8008ed6:	d950      	bls.n	8008f7a <__hexnan+0x10a>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f1a4 0904 	sub.w	r9, r4, #4
 8008ede:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ee2:	f8cd b008 	str.w	fp, [sp, #8]
 8008ee6:	464c      	mov	r4, r9
 8008ee8:	461d      	mov	r5, r3
 8008eea:	9903      	ldr	r1, [sp, #12]
 8008eec:	e7d7      	b.n	8008e9e <__hexnan+0x2e>
 8008eee:	2a29      	cmp	r2, #41	; 0x29
 8008ef0:	d156      	bne.n	8008fa0 <__hexnan+0x130>
 8008ef2:	3102      	adds	r1, #2
 8008ef4:	f8ca 1000 	str.w	r1, [sl]
 8008ef8:	f1bb 0f00 	cmp.w	fp, #0
 8008efc:	d050      	beq.n	8008fa0 <__hexnan+0x130>
 8008efe:	454c      	cmp	r4, r9
 8008f00:	d206      	bcs.n	8008f10 <__hexnan+0xa0>
 8008f02:	2d07      	cmp	r5, #7
 8008f04:	dc04      	bgt.n	8008f10 <__hexnan+0xa0>
 8008f06:	462a      	mov	r2, r5
 8008f08:	4649      	mov	r1, r9
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f7ff ff8a 	bl	8008e24 <L_shift>
 8008f10:	4544      	cmp	r4, r8
 8008f12:	d934      	bls.n	8008f7e <__hexnan+0x10e>
 8008f14:	f1a8 0204 	sub.w	r2, r8, #4
 8008f18:	4623      	mov	r3, r4
 8008f1a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008f1e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008f22:	429f      	cmp	r7, r3
 8008f24:	d2f9      	bcs.n	8008f1a <__hexnan+0xaa>
 8008f26:	1b3b      	subs	r3, r7, r4
 8008f28:	f023 0303 	bic.w	r3, r3, #3
 8008f2c:	3304      	adds	r3, #4
 8008f2e:	3401      	adds	r4, #1
 8008f30:	3e03      	subs	r6, #3
 8008f32:	42b4      	cmp	r4, r6
 8008f34:	bf88      	it	hi
 8008f36:	2304      	movhi	r3, #4
 8008f38:	4443      	add	r3, r8
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f843 2b04 	str.w	r2, [r3], #4
 8008f40:	429f      	cmp	r7, r3
 8008f42:	d2fb      	bcs.n	8008f3c <__hexnan+0xcc>
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	b91b      	cbnz	r3, 8008f50 <__hexnan+0xe0>
 8008f48:	4547      	cmp	r7, r8
 8008f4a:	d127      	bne.n	8008f9c <__hexnan+0x12c>
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	603b      	str	r3, [r7, #0]
 8008f50:	2005      	movs	r0, #5
 8008f52:	e026      	b.n	8008fa2 <__hexnan+0x132>
 8008f54:	3501      	adds	r5, #1
 8008f56:	2d08      	cmp	r5, #8
 8008f58:	f10b 0b01 	add.w	fp, fp, #1
 8008f5c:	dd06      	ble.n	8008f6c <__hexnan+0xfc>
 8008f5e:	4544      	cmp	r4, r8
 8008f60:	d9c3      	bls.n	8008eea <__hexnan+0x7a>
 8008f62:	2300      	movs	r3, #0
 8008f64:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f68:	2501      	movs	r5, #1
 8008f6a:	3c04      	subs	r4, #4
 8008f6c:	6822      	ldr	r2, [r4, #0]
 8008f6e:	f000 000f 	and.w	r0, r0, #15
 8008f72:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008f76:	6022      	str	r2, [r4, #0]
 8008f78:	e7b7      	b.n	8008eea <__hexnan+0x7a>
 8008f7a:	2508      	movs	r5, #8
 8008f7c:	e7b5      	b.n	8008eea <__hexnan+0x7a>
 8008f7e:	9b01      	ldr	r3, [sp, #4]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d0df      	beq.n	8008f44 <__hexnan+0xd4>
 8008f84:	f04f 32ff 	mov.w	r2, #4294967295
 8008f88:	f1c3 0320 	rsb	r3, r3, #32
 8008f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f90:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008f94:	401a      	ands	r2, r3
 8008f96:	f846 2c04 	str.w	r2, [r6, #-4]
 8008f9a:	e7d3      	b.n	8008f44 <__hexnan+0xd4>
 8008f9c:	3f04      	subs	r7, #4
 8008f9e:	e7d1      	b.n	8008f44 <__hexnan+0xd4>
 8008fa0:	2004      	movs	r0, #4
 8008fa2:	b007      	add	sp, #28
 8008fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008fa8 <_localeconv_r>:
 8008fa8:	4800      	ldr	r0, [pc, #0]	; (8008fac <_localeconv_r+0x4>)
 8008faa:	4770      	bx	lr
 8008fac:	2000016c 	.word	0x2000016c

08008fb0 <malloc>:
 8008fb0:	4b02      	ldr	r3, [pc, #8]	; (8008fbc <malloc+0xc>)
 8008fb2:	4601      	mov	r1, r0
 8008fb4:	6818      	ldr	r0, [r3, #0]
 8008fb6:	f000 bd3d 	b.w	8009a34 <_malloc_r>
 8008fba:	bf00      	nop
 8008fbc:	20000014 	.word	0x20000014

08008fc0 <__ascii_mbtowc>:
 8008fc0:	b082      	sub	sp, #8
 8008fc2:	b901      	cbnz	r1, 8008fc6 <__ascii_mbtowc+0x6>
 8008fc4:	a901      	add	r1, sp, #4
 8008fc6:	b142      	cbz	r2, 8008fda <__ascii_mbtowc+0x1a>
 8008fc8:	b14b      	cbz	r3, 8008fde <__ascii_mbtowc+0x1e>
 8008fca:	7813      	ldrb	r3, [r2, #0]
 8008fcc:	600b      	str	r3, [r1, #0]
 8008fce:	7812      	ldrb	r2, [r2, #0]
 8008fd0:	1e10      	subs	r0, r2, #0
 8008fd2:	bf18      	it	ne
 8008fd4:	2001      	movne	r0, #1
 8008fd6:	b002      	add	sp, #8
 8008fd8:	4770      	bx	lr
 8008fda:	4610      	mov	r0, r2
 8008fdc:	e7fb      	b.n	8008fd6 <__ascii_mbtowc+0x16>
 8008fde:	f06f 0001 	mvn.w	r0, #1
 8008fe2:	e7f8      	b.n	8008fd6 <__ascii_mbtowc+0x16>

08008fe4 <memcpy>:
 8008fe4:	440a      	add	r2, r1
 8008fe6:	4291      	cmp	r1, r2
 8008fe8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fec:	d100      	bne.n	8008ff0 <memcpy+0xc>
 8008fee:	4770      	bx	lr
 8008ff0:	b510      	push	{r4, lr}
 8008ff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ff6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ffa:	4291      	cmp	r1, r2
 8008ffc:	d1f9      	bne.n	8008ff2 <memcpy+0xe>
 8008ffe:	bd10      	pop	{r4, pc}

08009000 <_Balloc>:
 8009000:	b570      	push	{r4, r5, r6, lr}
 8009002:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009004:	4604      	mov	r4, r0
 8009006:	460d      	mov	r5, r1
 8009008:	b976      	cbnz	r6, 8009028 <_Balloc+0x28>
 800900a:	2010      	movs	r0, #16
 800900c:	f7ff ffd0 	bl	8008fb0 <malloc>
 8009010:	4602      	mov	r2, r0
 8009012:	6260      	str	r0, [r4, #36]	; 0x24
 8009014:	b920      	cbnz	r0, 8009020 <_Balloc+0x20>
 8009016:	4b18      	ldr	r3, [pc, #96]	; (8009078 <_Balloc+0x78>)
 8009018:	4818      	ldr	r0, [pc, #96]	; (800907c <_Balloc+0x7c>)
 800901a:	2166      	movs	r1, #102	; 0x66
 800901c:	f000 fef8 	bl	8009e10 <__assert_func>
 8009020:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009024:	6006      	str	r6, [r0, #0]
 8009026:	60c6      	str	r6, [r0, #12]
 8009028:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800902a:	68f3      	ldr	r3, [r6, #12]
 800902c:	b183      	cbz	r3, 8009050 <_Balloc+0x50>
 800902e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009036:	b9b8      	cbnz	r0, 8009068 <_Balloc+0x68>
 8009038:	2101      	movs	r1, #1
 800903a:	fa01 f605 	lsl.w	r6, r1, r5
 800903e:	1d72      	adds	r2, r6, #5
 8009040:	0092      	lsls	r2, r2, #2
 8009042:	4620      	mov	r0, r4
 8009044:	f000 fc97 	bl	8009976 <_calloc_r>
 8009048:	b160      	cbz	r0, 8009064 <_Balloc+0x64>
 800904a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800904e:	e00e      	b.n	800906e <_Balloc+0x6e>
 8009050:	2221      	movs	r2, #33	; 0x21
 8009052:	2104      	movs	r1, #4
 8009054:	4620      	mov	r0, r4
 8009056:	f000 fc8e 	bl	8009976 <_calloc_r>
 800905a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800905c:	60f0      	str	r0, [r6, #12]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1e4      	bne.n	800902e <_Balloc+0x2e>
 8009064:	2000      	movs	r0, #0
 8009066:	bd70      	pop	{r4, r5, r6, pc}
 8009068:	6802      	ldr	r2, [r0, #0]
 800906a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800906e:	2300      	movs	r3, #0
 8009070:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009074:	e7f7      	b.n	8009066 <_Balloc+0x66>
 8009076:	bf00      	nop
 8009078:	0800adc6 	.word	0x0800adc6
 800907c:	0800aecc 	.word	0x0800aecc

08009080 <_Bfree>:
 8009080:	b570      	push	{r4, r5, r6, lr}
 8009082:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009084:	4605      	mov	r5, r0
 8009086:	460c      	mov	r4, r1
 8009088:	b976      	cbnz	r6, 80090a8 <_Bfree+0x28>
 800908a:	2010      	movs	r0, #16
 800908c:	f7ff ff90 	bl	8008fb0 <malloc>
 8009090:	4602      	mov	r2, r0
 8009092:	6268      	str	r0, [r5, #36]	; 0x24
 8009094:	b920      	cbnz	r0, 80090a0 <_Bfree+0x20>
 8009096:	4b09      	ldr	r3, [pc, #36]	; (80090bc <_Bfree+0x3c>)
 8009098:	4809      	ldr	r0, [pc, #36]	; (80090c0 <_Bfree+0x40>)
 800909a:	218a      	movs	r1, #138	; 0x8a
 800909c:	f000 feb8 	bl	8009e10 <__assert_func>
 80090a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090a4:	6006      	str	r6, [r0, #0]
 80090a6:	60c6      	str	r6, [r0, #12]
 80090a8:	b13c      	cbz	r4, 80090ba <_Bfree+0x3a>
 80090aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80090ac:	6862      	ldr	r2, [r4, #4]
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090b4:	6021      	str	r1, [r4, #0]
 80090b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80090ba:	bd70      	pop	{r4, r5, r6, pc}
 80090bc:	0800adc6 	.word	0x0800adc6
 80090c0:	0800aecc 	.word	0x0800aecc

080090c4 <__multadd>:
 80090c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090c8:	690e      	ldr	r6, [r1, #16]
 80090ca:	4607      	mov	r7, r0
 80090cc:	4698      	mov	r8, r3
 80090ce:	460c      	mov	r4, r1
 80090d0:	f101 0014 	add.w	r0, r1, #20
 80090d4:	2300      	movs	r3, #0
 80090d6:	6805      	ldr	r5, [r0, #0]
 80090d8:	b2a9      	uxth	r1, r5
 80090da:	fb02 8101 	mla	r1, r2, r1, r8
 80090de:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80090e2:	0c2d      	lsrs	r5, r5, #16
 80090e4:	fb02 c505 	mla	r5, r2, r5, ip
 80090e8:	b289      	uxth	r1, r1
 80090ea:	3301      	adds	r3, #1
 80090ec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80090f0:	429e      	cmp	r6, r3
 80090f2:	f840 1b04 	str.w	r1, [r0], #4
 80090f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80090fa:	dcec      	bgt.n	80090d6 <__multadd+0x12>
 80090fc:	f1b8 0f00 	cmp.w	r8, #0
 8009100:	d022      	beq.n	8009148 <__multadd+0x84>
 8009102:	68a3      	ldr	r3, [r4, #8]
 8009104:	42b3      	cmp	r3, r6
 8009106:	dc19      	bgt.n	800913c <__multadd+0x78>
 8009108:	6861      	ldr	r1, [r4, #4]
 800910a:	4638      	mov	r0, r7
 800910c:	3101      	adds	r1, #1
 800910e:	f7ff ff77 	bl	8009000 <_Balloc>
 8009112:	4605      	mov	r5, r0
 8009114:	b928      	cbnz	r0, 8009122 <__multadd+0x5e>
 8009116:	4602      	mov	r2, r0
 8009118:	4b0d      	ldr	r3, [pc, #52]	; (8009150 <__multadd+0x8c>)
 800911a:	480e      	ldr	r0, [pc, #56]	; (8009154 <__multadd+0x90>)
 800911c:	21b5      	movs	r1, #181	; 0xb5
 800911e:	f000 fe77 	bl	8009e10 <__assert_func>
 8009122:	6922      	ldr	r2, [r4, #16]
 8009124:	3202      	adds	r2, #2
 8009126:	f104 010c 	add.w	r1, r4, #12
 800912a:	0092      	lsls	r2, r2, #2
 800912c:	300c      	adds	r0, #12
 800912e:	f7ff ff59 	bl	8008fe4 <memcpy>
 8009132:	4621      	mov	r1, r4
 8009134:	4638      	mov	r0, r7
 8009136:	f7ff ffa3 	bl	8009080 <_Bfree>
 800913a:	462c      	mov	r4, r5
 800913c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009140:	3601      	adds	r6, #1
 8009142:	f8c3 8014 	str.w	r8, [r3, #20]
 8009146:	6126      	str	r6, [r4, #16]
 8009148:	4620      	mov	r0, r4
 800914a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800914e:	bf00      	nop
 8009150:	0800ae3c 	.word	0x0800ae3c
 8009154:	0800aecc 	.word	0x0800aecc

08009158 <__s2b>:
 8009158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800915c:	460c      	mov	r4, r1
 800915e:	4615      	mov	r5, r2
 8009160:	461f      	mov	r7, r3
 8009162:	2209      	movs	r2, #9
 8009164:	3308      	adds	r3, #8
 8009166:	4606      	mov	r6, r0
 8009168:	fb93 f3f2 	sdiv	r3, r3, r2
 800916c:	2100      	movs	r1, #0
 800916e:	2201      	movs	r2, #1
 8009170:	429a      	cmp	r2, r3
 8009172:	db09      	blt.n	8009188 <__s2b+0x30>
 8009174:	4630      	mov	r0, r6
 8009176:	f7ff ff43 	bl	8009000 <_Balloc>
 800917a:	b940      	cbnz	r0, 800918e <__s2b+0x36>
 800917c:	4602      	mov	r2, r0
 800917e:	4b19      	ldr	r3, [pc, #100]	; (80091e4 <__s2b+0x8c>)
 8009180:	4819      	ldr	r0, [pc, #100]	; (80091e8 <__s2b+0x90>)
 8009182:	21ce      	movs	r1, #206	; 0xce
 8009184:	f000 fe44 	bl	8009e10 <__assert_func>
 8009188:	0052      	lsls	r2, r2, #1
 800918a:	3101      	adds	r1, #1
 800918c:	e7f0      	b.n	8009170 <__s2b+0x18>
 800918e:	9b08      	ldr	r3, [sp, #32]
 8009190:	6143      	str	r3, [r0, #20]
 8009192:	2d09      	cmp	r5, #9
 8009194:	f04f 0301 	mov.w	r3, #1
 8009198:	6103      	str	r3, [r0, #16]
 800919a:	dd16      	ble.n	80091ca <__s2b+0x72>
 800919c:	f104 0909 	add.w	r9, r4, #9
 80091a0:	46c8      	mov	r8, r9
 80091a2:	442c      	add	r4, r5
 80091a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80091a8:	4601      	mov	r1, r0
 80091aa:	3b30      	subs	r3, #48	; 0x30
 80091ac:	220a      	movs	r2, #10
 80091ae:	4630      	mov	r0, r6
 80091b0:	f7ff ff88 	bl	80090c4 <__multadd>
 80091b4:	45a0      	cmp	r8, r4
 80091b6:	d1f5      	bne.n	80091a4 <__s2b+0x4c>
 80091b8:	f1a5 0408 	sub.w	r4, r5, #8
 80091bc:	444c      	add	r4, r9
 80091be:	1b2d      	subs	r5, r5, r4
 80091c0:	1963      	adds	r3, r4, r5
 80091c2:	42bb      	cmp	r3, r7
 80091c4:	db04      	blt.n	80091d0 <__s2b+0x78>
 80091c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091ca:	340a      	adds	r4, #10
 80091cc:	2509      	movs	r5, #9
 80091ce:	e7f6      	b.n	80091be <__s2b+0x66>
 80091d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80091d4:	4601      	mov	r1, r0
 80091d6:	3b30      	subs	r3, #48	; 0x30
 80091d8:	220a      	movs	r2, #10
 80091da:	4630      	mov	r0, r6
 80091dc:	f7ff ff72 	bl	80090c4 <__multadd>
 80091e0:	e7ee      	b.n	80091c0 <__s2b+0x68>
 80091e2:	bf00      	nop
 80091e4:	0800ae3c 	.word	0x0800ae3c
 80091e8:	0800aecc 	.word	0x0800aecc

080091ec <__hi0bits>:
 80091ec:	0c03      	lsrs	r3, r0, #16
 80091ee:	041b      	lsls	r3, r3, #16
 80091f0:	b9d3      	cbnz	r3, 8009228 <__hi0bits+0x3c>
 80091f2:	0400      	lsls	r0, r0, #16
 80091f4:	2310      	movs	r3, #16
 80091f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80091fa:	bf04      	itt	eq
 80091fc:	0200      	lsleq	r0, r0, #8
 80091fe:	3308      	addeq	r3, #8
 8009200:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009204:	bf04      	itt	eq
 8009206:	0100      	lsleq	r0, r0, #4
 8009208:	3304      	addeq	r3, #4
 800920a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800920e:	bf04      	itt	eq
 8009210:	0080      	lsleq	r0, r0, #2
 8009212:	3302      	addeq	r3, #2
 8009214:	2800      	cmp	r0, #0
 8009216:	db05      	blt.n	8009224 <__hi0bits+0x38>
 8009218:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800921c:	f103 0301 	add.w	r3, r3, #1
 8009220:	bf08      	it	eq
 8009222:	2320      	moveq	r3, #32
 8009224:	4618      	mov	r0, r3
 8009226:	4770      	bx	lr
 8009228:	2300      	movs	r3, #0
 800922a:	e7e4      	b.n	80091f6 <__hi0bits+0xa>

0800922c <__lo0bits>:
 800922c:	6803      	ldr	r3, [r0, #0]
 800922e:	f013 0207 	ands.w	r2, r3, #7
 8009232:	4601      	mov	r1, r0
 8009234:	d00b      	beq.n	800924e <__lo0bits+0x22>
 8009236:	07da      	lsls	r2, r3, #31
 8009238:	d424      	bmi.n	8009284 <__lo0bits+0x58>
 800923a:	0798      	lsls	r0, r3, #30
 800923c:	bf49      	itett	mi
 800923e:	085b      	lsrmi	r3, r3, #1
 8009240:	089b      	lsrpl	r3, r3, #2
 8009242:	2001      	movmi	r0, #1
 8009244:	600b      	strmi	r3, [r1, #0]
 8009246:	bf5c      	itt	pl
 8009248:	600b      	strpl	r3, [r1, #0]
 800924a:	2002      	movpl	r0, #2
 800924c:	4770      	bx	lr
 800924e:	b298      	uxth	r0, r3
 8009250:	b9b0      	cbnz	r0, 8009280 <__lo0bits+0x54>
 8009252:	0c1b      	lsrs	r3, r3, #16
 8009254:	2010      	movs	r0, #16
 8009256:	f013 0fff 	tst.w	r3, #255	; 0xff
 800925a:	bf04      	itt	eq
 800925c:	0a1b      	lsreq	r3, r3, #8
 800925e:	3008      	addeq	r0, #8
 8009260:	071a      	lsls	r2, r3, #28
 8009262:	bf04      	itt	eq
 8009264:	091b      	lsreq	r3, r3, #4
 8009266:	3004      	addeq	r0, #4
 8009268:	079a      	lsls	r2, r3, #30
 800926a:	bf04      	itt	eq
 800926c:	089b      	lsreq	r3, r3, #2
 800926e:	3002      	addeq	r0, #2
 8009270:	07da      	lsls	r2, r3, #31
 8009272:	d403      	bmi.n	800927c <__lo0bits+0x50>
 8009274:	085b      	lsrs	r3, r3, #1
 8009276:	f100 0001 	add.w	r0, r0, #1
 800927a:	d005      	beq.n	8009288 <__lo0bits+0x5c>
 800927c:	600b      	str	r3, [r1, #0]
 800927e:	4770      	bx	lr
 8009280:	4610      	mov	r0, r2
 8009282:	e7e8      	b.n	8009256 <__lo0bits+0x2a>
 8009284:	2000      	movs	r0, #0
 8009286:	4770      	bx	lr
 8009288:	2020      	movs	r0, #32
 800928a:	4770      	bx	lr

0800928c <__i2b>:
 800928c:	b510      	push	{r4, lr}
 800928e:	460c      	mov	r4, r1
 8009290:	2101      	movs	r1, #1
 8009292:	f7ff feb5 	bl	8009000 <_Balloc>
 8009296:	4602      	mov	r2, r0
 8009298:	b928      	cbnz	r0, 80092a6 <__i2b+0x1a>
 800929a:	4b05      	ldr	r3, [pc, #20]	; (80092b0 <__i2b+0x24>)
 800929c:	4805      	ldr	r0, [pc, #20]	; (80092b4 <__i2b+0x28>)
 800929e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80092a2:	f000 fdb5 	bl	8009e10 <__assert_func>
 80092a6:	2301      	movs	r3, #1
 80092a8:	6144      	str	r4, [r0, #20]
 80092aa:	6103      	str	r3, [r0, #16]
 80092ac:	bd10      	pop	{r4, pc}
 80092ae:	bf00      	nop
 80092b0:	0800ae3c 	.word	0x0800ae3c
 80092b4:	0800aecc 	.word	0x0800aecc

080092b8 <__multiply>:
 80092b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092bc:	4614      	mov	r4, r2
 80092be:	690a      	ldr	r2, [r1, #16]
 80092c0:	6923      	ldr	r3, [r4, #16]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	bfb8      	it	lt
 80092c6:	460b      	movlt	r3, r1
 80092c8:	460d      	mov	r5, r1
 80092ca:	bfbc      	itt	lt
 80092cc:	4625      	movlt	r5, r4
 80092ce:	461c      	movlt	r4, r3
 80092d0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80092d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80092d8:	68ab      	ldr	r3, [r5, #8]
 80092da:	6869      	ldr	r1, [r5, #4]
 80092dc:	eb0a 0709 	add.w	r7, sl, r9
 80092e0:	42bb      	cmp	r3, r7
 80092e2:	b085      	sub	sp, #20
 80092e4:	bfb8      	it	lt
 80092e6:	3101      	addlt	r1, #1
 80092e8:	f7ff fe8a 	bl	8009000 <_Balloc>
 80092ec:	b930      	cbnz	r0, 80092fc <__multiply+0x44>
 80092ee:	4602      	mov	r2, r0
 80092f0:	4b42      	ldr	r3, [pc, #264]	; (80093fc <__multiply+0x144>)
 80092f2:	4843      	ldr	r0, [pc, #268]	; (8009400 <__multiply+0x148>)
 80092f4:	f240 115d 	movw	r1, #349	; 0x15d
 80092f8:	f000 fd8a 	bl	8009e10 <__assert_func>
 80092fc:	f100 0614 	add.w	r6, r0, #20
 8009300:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009304:	4633      	mov	r3, r6
 8009306:	2200      	movs	r2, #0
 8009308:	4543      	cmp	r3, r8
 800930a:	d31e      	bcc.n	800934a <__multiply+0x92>
 800930c:	f105 0c14 	add.w	ip, r5, #20
 8009310:	f104 0314 	add.w	r3, r4, #20
 8009314:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009318:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800931c:	9202      	str	r2, [sp, #8]
 800931e:	ebac 0205 	sub.w	r2, ip, r5
 8009322:	3a15      	subs	r2, #21
 8009324:	f022 0203 	bic.w	r2, r2, #3
 8009328:	3204      	adds	r2, #4
 800932a:	f105 0115 	add.w	r1, r5, #21
 800932e:	458c      	cmp	ip, r1
 8009330:	bf38      	it	cc
 8009332:	2204      	movcc	r2, #4
 8009334:	9201      	str	r2, [sp, #4]
 8009336:	9a02      	ldr	r2, [sp, #8]
 8009338:	9303      	str	r3, [sp, #12]
 800933a:	429a      	cmp	r2, r3
 800933c:	d808      	bhi.n	8009350 <__multiply+0x98>
 800933e:	2f00      	cmp	r7, #0
 8009340:	dc55      	bgt.n	80093ee <__multiply+0x136>
 8009342:	6107      	str	r7, [r0, #16]
 8009344:	b005      	add	sp, #20
 8009346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800934a:	f843 2b04 	str.w	r2, [r3], #4
 800934e:	e7db      	b.n	8009308 <__multiply+0x50>
 8009350:	f8b3 a000 	ldrh.w	sl, [r3]
 8009354:	f1ba 0f00 	cmp.w	sl, #0
 8009358:	d020      	beq.n	800939c <__multiply+0xe4>
 800935a:	f105 0e14 	add.w	lr, r5, #20
 800935e:	46b1      	mov	r9, r6
 8009360:	2200      	movs	r2, #0
 8009362:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009366:	f8d9 b000 	ldr.w	fp, [r9]
 800936a:	b2a1      	uxth	r1, r4
 800936c:	fa1f fb8b 	uxth.w	fp, fp
 8009370:	fb0a b101 	mla	r1, sl, r1, fp
 8009374:	4411      	add	r1, r2
 8009376:	f8d9 2000 	ldr.w	r2, [r9]
 800937a:	0c24      	lsrs	r4, r4, #16
 800937c:	0c12      	lsrs	r2, r2, #16
 800937e:	fb0a 2404 	mla	r4, sl, r4, r2
 8009382:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009386:	b289      	uxth	r1, r1
 8009388:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800938c:	45f4      	cmp	ip, lr
 800938e:	f849 1b04 	str.w	r1, [r9], #4
 8009392:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009396:	d8e4      	bhi.n	8009362 <__multiply+0xaa>
 8009398:	9901      	ldr	r1, [sp, #4]
 800939a:	5072      	str	r2, [r6, r1]
 800939c:	9a03      	ldr	r2, [sp, #12]
 800939e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80093a2:	3304      	adds	r3, #4
 80093a4:	f1b9 0f00 	cmp.w	r9, #0
 80093a8:	d01f      	beq.n	80093ea <__multiply+0x132>
 80093aa:	6834      	ldr	r4, [r6, #0]
 80093ac:	f105 0114 	add.w	r1, r5, #20
 80093b0:	46b6      	mov	lr, r6
 80093b2:	f04f 0a00 	mov.w	sl, #0
 80093b6:	880a      	ldrh	r2, [r1, #0]
 80093b8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80093bc:	fb09 b202 	mla	r2, r9, r2, fp
 80093c0:	4492      	add	sl, r2
 80093c2:	b2a4      	uxth	r4, r4
 80093c4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80093c8:	f84e 4b04 	str.w	r4, [lr], #4
 80093cc:	f851 4b04 	ldr.w	r4, [r1], #4
 80093d0:	f8be 2000 	ldrh.w	r2, [lr]
 80093d4:	0c24      	lsrs	r4, r4, #16
 80093d6:	fb09 2404 	mla	r4, r9, r4, r2
 80093da:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80093de:	458c      	cmp	ip, r1
 80093e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80093e4:	d8e7      	bhi.n	80093b6 <__multiply+0xfe>
 80093e6:	9a01      	ldr	r2, [sp, #4]
 80093e8:	50b4      	str	r4, [r6, r2]
 80093ea:	3604      	adds	r6, #4
 80093ec:	e7a3      	b.n	8009336 <__multiply+0x7e>
 80093ee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1a5      	bne.n	8009342 <__multiply+0x8a>
 80093f6:	3f01      	subs	r7, #1
 80093f8:	e7a1      	b.n	800933e <__multiply+0x86>
 80093fa:	bf00      	nop
 80093fc:	0800ae3c 	.word	0x0800ae3c
 8009400:	0800aecc 	.word	0x0800aecc

08009404 <__pow5mult>:
 8009404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009408:	4615      	mov	r5, r2
 800940a:	f012 0203 	ands.w	r2, r2, #3
 800940e:	4606      	mov	r6, r0
 8009410:	460f      	mov	r7, r1
 8009412:	d007      	beq.n	8009424 <__pow5mult+0x20>
 8009414:	4c25      	ldr	r4, [pc, #148]	; (80094ac <__pow5mult+0xa8>)
 8009416:	3a01      	subs	r2, #1
 8009418:	2300      	movs	r3, #0
 800941a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800941e:	f7ff fe51 	bl	80090c4 <__multadd>
 8009422:	4607      	mov	r7, r0
 8009424:	10ad      	asrs	r5, r5, #2
 8009426:	d03d      	beq.n	80094a4 <__pow5mult+0xa0>
 8009428:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800942a:	b97c      	cbnz	r4, 800944c <__pow5mult+0x48>
 800942c:	2010      	movs	r0, #16
 800942e:	f7ff fdbf 	bl	8008fb0 <malloc>
 8009432:	4602      	mov	r2, r0
 8009434:	6270      	str	r0, [r6, #36]	; 0x24
 8009436:	b928      	cbnz	r0, 8009444 <__pow5mult+0x40>
 8009438:	4b1d      	ldr	r3, [pc, #116]	; (80094b0 <__pow5mult+0xac>)
 800943a:	481e      	ldr	r0, [pc, #120]	; (80094b4 <__pow5mult+0xb0>)
 800943c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009440:	f000 fce6 	bl	8009e10 <__assert_func>
 8009444:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009448:	6004      	str	r4, [r0, #0]
 800944a:	60c4      	str	r4, [r0, #12]
 800944c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009450:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009454:	b94c      	cbnz	r4, 800946a <__pow5mult+0x66>
 8009456:	f240 2171 	movw	r1, #625	; 0x271
 800945a:	4630      	mov	r0, r6
 800945c:	f7ff ff16 	bl	800928c <__i2b>
 8009460:	2300      	movs	r3, #0
 8009462:	f8c8 0008 	str.w	r0, [r8, #8]
 8009466:	4604      	mov	r4, r0
 8009468:	6003      	str	r3, [r0, #0]
 800946a:	f04f 0900 	mov.w	r9, #0
 800946e:	07eb      	lsls	r3, r5, #31
 8009470:	d50a      	bpl.n	8009488 <__pow5mult+0x84>
 8009472:	4639      	mov	r1, r7
 8009474:	4622      	mov	r2, r4
 8009476:	4630      	mov	r0, r6
 8009478:	f7ff ff1e 	bl	80092b8 <__multiply>
 800947c:	4639      	mov	r1, r7
 800947e:	4680      	mov	r8, r0
 8009480:	4630      	mov	r0, r6
 8009482:	f7ff fdfd 	bl	8009080 <_Bfree>
 8009486:	4647      	mov	r7, r8
 8009488:	106d      	asrs	r5, r5, #1
 800948a:	d00b      	beq.n	80094a4 <__pow5mult+0xa0>
 800948c:	6820      	ldr	r0, [r4, #0]
 800948e:	b938      	cbnz	r0, 80094a0 <__pow5mult+0x9c>
 8009490:	4622      	mov	r2, r4
 8009492:	4621      	mov	r1, r4
 8009494:	4630      	mov	r0, r6
 8009496:	f7ff ff0f 	bl	80092b8 <__multiply>
 800949a:	6020      	str	r0, [r4, #0]
 800949c:	f8c0 9000 	str.w	r9, [r0]
 80094a0:	4604      	mov	r4, r0
 80094a2:	e7e4      	b.n	800946e <__pow5mult+0x6a>
 80094a4:	4638      	mov	r0, r7
 80094a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094aa:	bf00      	nop
 80094ac:	0800b020 	.word	0x0800b020
 80094b0:	0800adc6 	.word	0x0800adc6
 80094b4:	0800aecc 	.word	0x0800aecc

080094b8 <__lshift>:
 80094b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094bc:	460c      	mov	r4, r1
 80094be:	6849      	ldr	r1, [r1, #4]
 80094c0:	6923      	ldr	r3, [r4, #16]
 80094c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094c6:	68a3      	ldr	r3, [r4, #8]
 80094c8:	4607      	mov	r7, r0
 80094ca:	4691      	mov	r9, r2
 80094cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094d0:	f108 0601 	add.w	r6, r8, #1
 80094d4:	42b3      	cmp	r3, r6
 80094d6:	db0b      	blt.n	80094f0 <__lshift+0x38>
 80094d8:	4638      	mov	r0, r7
 80094da:	f7ff fd91 	bl	8009000 <_Balloc>
 80094de:	4605      	mov	r5, r0
 80094e0:	b948      	cbnz	r0, 80094f6 <__lshift+0x3e>
 80094e2:	4602      	mov	r2, r0
 80094e4:	4b28      	ldr	r3, [pc, #160]	; (8009588 <__lshift+0xd0>)
 80094e6:	4829      	ldr	r0, [pc, #164]	; (800958c <__lshift+0xd4>)
 80094e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80094ec:	f000 fc90 	bl	8009e10 <__assert_func>
 80094f0:	3101      	adds	r1, #1
 80094f2:	005b      	lsls	r3, r3, #1
 80094f4:	e7ee      	b.n	80094d4 <__lshift+0x1c>
 80094f6:	2300      	movs	r3, #0
 80094f8:	f100 0114 	add.w	r1, r0, #20
 80094fc:	f100 0210 	add.w	r2, r0, #16
 8009500:	4618      	mov	r0, r3
 8009502:	4553      	cmp	r3, sl
 8009504:	db33      	blt.n	800956e <__lshift+0xb6>
 8009506:	6920      	ldr	r0, [r4, #16]
 8009508:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800950c:	f104 0314 	add.w	r3, r4, #20
 8009510:	f019 091f 	ands.w	r9, r9, #31
 8009514:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009518:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800951c:	d02b      	beq.n	8009576 <__lshift+0xbe>
 800951e:	f1c9 0e20 	rsb	lr, r9, #32
 8009522:	468a      	mov	sl, r1
 8009524:	2200      	movs	r2, #0
 8009526:	6818      	ldr	r0, [r3, #0]
 8009528:	fa00 f009 	lsl.w	r0, r0, r9
 800952c:	4302      	orrs	r2, r0
 800952e:	f84a 2b04 	str.w	r2, [sl], #4
 8009532:	f853 2b04 	ldr.w	r2, [r3], #4
 8009536:	459c      	cmp	ip, r3
 8009538:	fa22 f20e 	lsr.w	r2, r2, lr
 800953c:	d8f3      	bhi.n	8009526 <__lshift+0x6e>
 800953e:	ebac 0304 	sub.w	r3, ip, r4
 8009542:	3b15      	subs	r3, #21
 8009544:	f023 0303 	bic.w	r3, r3, #3
 8009548:	3304      	adds	r3, #4
 800954a:	f104 0015 	add.w	r0, r4, #21
 800954e:	4584      	cmp	ip, r0
 8009550:	bf38      	it	cc
 8009552:	2304      	movcc	r3, #4
 8009554:	50ca      	str	r2, [r1, r3]
 8009556:	b10a      	cbz	r2, 800955c <__lshift+0xa4>
 8009558:	f108 0602 	add.w	r6, r8, #2
 800955c:	3e01      	subs	r6, #1
 800955e:	4638      	mov	r0, r7
 8009560:	612e      	str	r6, [r5, #16]
 8009562:	4621      	mov	r1, r4
 8009564:	f7ff fd8c 	bl	8009080 <_Bfree>
 8009568:	4628      	mov	r0, r5
 800956a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800956e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009572:	3301      	adds	r3, #1
 8009574:	e7c5      	b.n	8009502 <__lshift+0x4a>
 8009576:	3904      	subs	r1, #4
 8009578:	f853 2b04 	ldr.w	r2, [r3], #4
 800957c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009580:	459c      	cmp	ip, r3
 8009582:	d8f9      	bhi.n	8009578 <__lshift+0xc0>
 8009584:	e7ea      	b.n	800955c <__lshift+0xa4>
 8009586:	bf00      	nop
 8009588:	0800ae3c 	.word	0x0800ae3c
 800958c:	0800aecc 	.word	0x0800aecc

08009590 <__mcmp>:
 8009590:	b530      	push	{r4, r5, lr}
 8009592:	6902      	ldr	r2, [r0, #16]
 8009594:	690c      	ldr	r4, [r1, #16]
 8009596:	1b12      	subs	r2, r2, r4
 8009598:	d10e      	bne.n	80095b8 <__mcmp+0x28>
 800959a:	f100 0314 	add.w	r3, r0, #20
 800959e:	3114      	adds	r1, #20
 80095a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80095a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80095a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80095ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80095b0:	42a5      	cmp	r5, r4
 80095b2:	d003      	beq.n	80095bc <__mcmp+0x2c>
 80095b4:	d305      	bcc.n	80095c2 <__mcmp+0x32>
 80095b6:	2201      	movs	r2, #1
 80095b8:	4610      	mov	r0, r2
 80095ba:	bd30      	pop	{r4, r5, pc}
 80095bc:	4283      	cmp	r3, r0
 80095be:	d3f3      	bcc.n	80095a8 <__mcmp+0x18>
 80095c0:	e7fa      	b.n	80095b8 <__mcmp+0x28>
 80095c2:	f04f 32ff 	mov.w	r2, #4294967295
 80095c6:	e7f7      	b.n	80095b8 <__mcmp+0x28>

080095c8 <__mdiff>:
 80095c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095cc:	460c      	mov	r4, r1
 80095ce:	4606      	mov	r6, r0
 80095d0:	4611      	mov	r1, r2
 80095d2:	4620      	mov	r0, r4
 80095d4:	4617      	mov	r7, r2
 80095d6:	f7ff ffdb 	bl	8009590 <__mcmp>
 80095da:	1e05      	subs	r5, r0, #0
 80095dc:	d110      	bne.n	8009600 <__mdiff+0x38>
 80095de:	4629      	mov	r1, r5
 80095e0:	4630      	mov	r0, r6
 80095e2:	f7ff fd0d 	bl	8009000 <_Balloc>
 80095e6:	b930      	cbnz	r0, 80095f6 <__mdiff+0x2e>
 80095e8:	4b39      	ldr	r3, [pc, #228]	; (80096d0 <__mdiff+0x108>)
 80095ea:	4602      	mov	r2, r0
 80095ec:	f240 2132 	movw	r1, #562	; 0x232
 80095f0:	4838      	ldr	r0, [pc, #224]	; (80096d4 <__mdiff+0x10c>)
 80095f2:	f000 fc0d 	bl	8009e10 <__assert_func>
 80095f6:	2301      	movs	r3, #1
 80095f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80095fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009600:	bfa4      	itt	ge
 8009602:	463b      	movge	r3, r7
 8009604:	4627      	movge	r7, r4
 8009606:	4630      	mov	r0, r6
 8009608:	6879      	ldr	r1, [r7, #4]
 800960a:	bfa6      	itte	ge
 800960c:	461c      	movge	r4, r3
 800960e:	2500      	movge	r5, #0
 8009610:	2501      	movlt	r5, #1
 8009612:	f7ff fcf5 	bl	8009000 <_Balloc>
 8009616:	b920      	cbnz	r0, 8009622 <__mdiff+0x5a>
 8009618:	4b2d      	ldr	r3, [pc, #180]	; (80096d0 <__mdiff+0x108>)
 800961a:	4602      	mov	r2, r0
 800961c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009620:	e7e6      	b.n	80095f0 <__mdiff+0x28>
 8009622:	693e      	ldr	r6, [r7, #16]
 8009624:	60c5      	str	r5, [r0, #12]
 8009626:	6925      	ldr	r5, [r4, #16]
 8009628:	f107 0114 	add.w	r1, r7, #20
 800962c:	f104 0914 	add.w	r9, r4, #20
 8009630:	f100 0e14 	add.w	lr, r0, #20
 8009634:	f107 0210 	add.w	r2, r7, #16
 8009638:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800963c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009640:	46f2      	mov	sl, lr
 8009642:	2700      	movs	r7, #0
 8009644:	f859 3b04 	ldr.w	r3, [r9], #4
 8009648:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800964c:	fa1f f883 	uxth.w	r8, r3
 8009650:	fa17 f78b 	uxtah	r7, r7, fp
 8009654:	0c1b      	lsrs	r3, r3, #16
 8009656:	eba7 0808 	sub.w	r8, r7, r8
 800965a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800965e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009662:	fa1f f888 	uxth.w	r8, r8
 8009666:	141f      	asrs	r7, r3, #16
 8009668:	454d      	cmp	r5, r9
 800966a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800966e:	f84a 3b04 	str.w	r3, [sl], #4
 8009672:	d8e7      	bhi.n	8009644 <__mdiff+0x7c>
 8009674:	1b2b      	subs	r3, r5, r4
 8009676:	3b15      	subs	r3, #21
 8009678:	f023 0303 	bic.w	r3, r3, #3
 800967c:	3304      	adds	r3, #4
 800967e:	3415      	adds	r4, #21
 8009680:	42a5      	cmp	r5, r4
 8009682:	bf38      	it	cc
 8009684:	2304      	movcc	r3, #4
 8009686:	4419      	add	r1, r3
 8009688:	4473      	add	r3, lr
 800968a:	469e      	mov	lr, r3
 800968c:	460d      	mov	r5, r1
 800968e:	4565      	cmp	r5, ip
 8009690:	d30e      	bcc.n	80096b0 <__mdiff+0xe8>
 8009692:	f10c 0203 	add.w	r2, ip, #3
 8009696:	1a52      	subs	r2, r2, r1
 8009698:	f022 0203 	bic.w	r2, r2, #3
 800969c:	3903      	subs	r1, #3
 800969e:	458c      	cmp	ip, r1
 80096a0:	bf38      	it	cc
 80096a2:	2200      	movcc	r2, #0
 80096a4:	441a      	add	r2, r3
 80096a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80096aa:	b17b      	cbz	r3, 80096cc <__mdiff+0x104>
 80096ac:	6106      	str	r6, [r0, #16]
 80096ae:	e7a5      	b.n	80095fc <__mdiff+0x34>
 80096b0:	f855 8b04 	ldr.w	r8, [r5], #4
 80096b4:	fa17 f488 	uxtah	r4, r7, r8
 80096b8:	1422      	asrs	r2, r4, #16
 80096ba:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80096be:	b2a4      	uxth	r4, r4
 80096c0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80096c4:	f84e 4b04 	str.w	r4, [lr], #4
 80096c8:	1417      	asrs	r7, r2, #16
 80096ca:	e7e0      	b.n	800968e <__mdiff+0xc6>
 80096cc:	3e01      	subs	r6, #1
 80096ce:	e7ea      	b.n	80096a6 <__mdiff+0xde>
 80096d0:	0800ae3c 	.word	0x0800ae3c
 80096d4:	0800aecc 	.word	0x0800aecc

080096d8 <__ulp>:
 80096d8:	b082      	sub	sp, #8
 80096da:	ed8d 0b00 	vstr	d0, [sp]
 80096de:	9b01      	ldr	r3, [sp, #4]
 80096e0:	4912      	ldr	r1, [pc, #72]	; (800972c <__ulp+0x54>)
 80096e2:	4019      	ands	r1, r3
 80096e4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80096e8:	2900      	cmp	r1, #0
 80096ea:	dd05      	ble.n	80096f8 <__ulp+0x20>
 80096ec:	2200      	movs	r2, #0
 80096ee:	460b      	mov	r3, r1
 80096f0:	ec43 2b10 	vmov	d0, r2, r3
 80096f4:	b002      	add	sp, #8
 80096f6:	4770      	bx	lr
 80096f8:	4249      	negs	r1, r1
 80096fa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80096fe:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009702:	f04f 0200 	mov.w	r2, #0
 8009706:	f04f 0300 	mov.w	r3, #0
 800970a:	da04      	bge.n	8009716 <__ulp+0x3e>
 800970c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009710:	fa41 f300 	asr.w	r3, r1, r0
 8009714:	e7ec      	b.n	80096f0 <__ulp+0x18>
 8009716:	f1a0 0114 	sub.w	r1, r0, #20
 800971a:	291e      	cmp	r1, #30
 800971c:	bfda      	itte	le
 800971e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009722:	fa20 f101 	lsrle.w	r1, r0, r1
 8009726:	2101      	movgt	r1, #1
 8009728:	460a      	mov	r2, r1
 800972a:	e7e1      	b.n	80096f0 <__ulp+0x18>
 800972c:	7ff00000 	.word	0x7ff00000

08009730 <__b2d>:
 8009730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009732:	6905      	ldr	r5, [r0, #16]
 8009734:	f100 0714 	add.w	r7, r0, #20
 8009738:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800973c:	1f2e      	subs	r6, r5, #4
 800973e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009742:	4620      	mov	r0, r4
 8009744:	f7ff fd52 	bl	80091ec <__hi0bits>
 8009748:	f1c0 0320 	rsb	r3, r0, #32
 800974c:	280a      	cmp	r0, #10
 800974e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80097cc <__b2d+0x9c>
 8009752:	600b      	str	r3, [r1, #0]
 8009754:	dc14      	bgt.n	8009780 <__b2d+0x50>
 8009756:	f1c0 0e0b 	rsb	lr, r0, #11
 800975a:	fa24 f10e 	lsr.w	r1, r4, lr
 800975e:	42b7      	cmp	r7, r6
 8009760:	ea41 030c 	orr.w	r3, r1, ip
 8009764:	bf34      	ite	cc
 8009766:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800976a:	2100      	movcs	r1, #0
 800976c:	3015      	adds	r0, #21
 800976e:	fa04 f000 	lsl.w	r0, r4, r0
 8009772:	fa21 f10e 	lsr.w	r1, r1, lr
 8009776:	ea40 0201 	orr.w	r2, r0, r1
 800977a:	ec43 2b10 	vmov	d0, r2, r3
 800977e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009780:	42b7      	cmp	r7, r6
 8009782:	bf3a      	itte	cc
 8009784:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009788:	f1a5 0608 	subcc.w	r6, r5, #8
 800978c:	2100      	movcs	r1, #0
 800978e:	380b      	subs	r0, #11
 8009790:	d017      	beq.n	80097c2 <__b2d+0x92>
 8009792:	f1c0 0c20 	rsb	ip, r0, #32
 8009796:	fa04 f500 	lsl.w	r5, r4, r0
 800979a:	42be      	cmp	r6, r7
 800979c:	fa21 f40c 	lsr.w	r4, r1, ip
 80097a0:	ea45 0504 	orr.w	r5, r5, r4
 80097a4:	bf8c      	ite	hi
 80097a6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80097aa:	2400      	movls	r4, #0
 80097ac:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80097b0:	fa01 f000 	lsl.w	r0, r1, r0
 80097b4:	fa24 f40c 	lsr.w	r4, r4, ip
 80097b8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80097bc:	ea40 0204 	orr.w	r2, r0, r4
 80097c0:	e7db      	b.n	800977a <__b2d+0x4a>
 80097c2:	ea44 030c 	orr.w	r3, r4, ip
 80097c6:	460a      	mov	r2, r1
 80097c8:	e7d7      	b.n	800977a <__b2d+0x4a>
 80097ca:	bf00      	nop
 80097cc:	3ff00000 	.word	0x3ff00000

080097d0 <__d2b>:
 80097d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097d4:	4689      	mov	r9, r1
 80097d6:	2101      	movs	r1, #1
 80097d8:	ec57 6b10 	vmov	r6, r7, d0
 80097dc:	4690      	mov	r8, r2
 80097de:	f7ff fc0f 	bl	8009000 <_Balloc>
 80097e2:	4604      	mov	r4, r0
 80097e4:	b930      	cbnz	r0, 80097f4 <__d2b+0x24>
 80097e6:	4602      	mov	r2, r0
 80097e8:	4b25      	ldr	r3, [pc, #148]	; (8009880 <__d2b+0xb0>)
 80097ea:	4826      	ldr	r0, [pc, #152]	; (8009884 <__d2b+0xb4>)
 80097ec:	f240 310a 	movw	r1, #778	; 0x30a
 80097f0:	f000 fb0e 	bl	8009e10 <__assert_func>
 80097f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80097f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80097fc:	bb35      	cbnz	r5, 800984c <__d2b+0x7c>
 80097fe:	2e00      	cmp	r6, #0
 8009800:	9301      	str	r3, [sp, #4]
 8009802:	d028      	beq.n	8009856 <__d2b+0x86>
 8009804:	4668      	mov	r0, sp
 8009806:	9600      	str	r6, [sp, #0]
 8009808:	f7ff fd10 	bl	800922c <__lo0bits>
 800980c:	9900      	ldr	r1, [sp, #0]
 800980e:	b300      	cbz	r0, 8009852 <__d2b+0x82>
 8009810:	9a01      	ldr	r2, [sp, #4]
 8009812:	f1c0 0320 	rsb	r3, r0, #32
 8009816:	fa02 f303 	lsl.w	r3, r2, r3
 800981a:	430b      	orrs	r3, r1
 800981c:	40c2      	lsrs	r2, r0
 800981e:	6163      	str	r3, [r4, #20]
 8009820:	9201      	str	r2, [sp, #4]
 8009822:	9b01      	ldr	r3, [sp, #4]
 8009824:	61a3      	str	r3, [r4, #24]
 8009826:	2b00      	cmp	r3, #0
 8009828:	bf14      	ite	ne
 800982a:	2202      	movne	r2, #2
 800982c:	2201      	moveq	r2, #1
 800982e:	6122      	str	r2, [r4, #16]
 8009830:	b1d5      	cbz	r5, 8009868 <__d2b+0x98>
 8009832:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009836:	4405      	add	r5, r0
 8009838:	f8c9 5000 	str.w	r5, [r9]
 800983c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009840:	f8c8 0000 	str.w	r0, [r8]
 8009844:	4620      	mov	r0, r4
 8009846:	b003      	add	sp, #12
 8009848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800984c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009850:	e7d5      	b.n	80097fe <__d2b+0x2e>
 8009852:	6161      	str	r1, [r4, #20]
 8009854:	e7e5      	b.n	8009822 <__d2b+0x52>
 8009856:	a801      	add	r0, sp, #4
 8009858:	f7ff fce8 	bl	800922c <__lo0bits>
 800985c:	9b01      	ldr	r3, [sp, #4]
 800985e:	6163      	str	r3, [r4, #20]
 8009860:	2201      	movs	r2, #1
 8009862:	6122      	str	r2, [r4, #16]
 8009864:	3020      	adds	r0, #32
 8009866:	e7e3      	b.n	8009830 <__d2b+0x60>
 8009868:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800986c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009870:	f8c9 0000 	str.w	r0, [r9]
 8009874:	6918      	ldr	r0, [r3, #16]
 8009876:	f7ff fcb9 	bl	80091ec <__hi0bits>
 800987a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800987e:	e7df      	b.n	8009840 <__d2b+0x70>
 8009880:	0800ae3c 	.word	0x0800ae3c
 8009884:	0800aecc 	.word	0x0800aecc

08009888 <__ratio>:
 8009888:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800988c:	4688      	mov	r8, r1
 800988e:	4669      	mov	r1, sp
 8009890:	4681      	mov	r9, r0
 8009892:	f7ff ff4d 	bl	8009730 <__b2d>
 8009896:	a901      	add	r1, sp, #4
 8009898:	4640      	mov	r0, r8
 800989a:	ec55 4b10 	vmov	r4, r5, d0
 800989e:	f7ff ff47 	bl	8009730 <__b2d>
 80098a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80098a6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80098aa:	eba3 0c02 	sub.w	ip, r3, r2
 80098ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 80098b2:	1a9b      	subs	r3, r3, r2
 80098b4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80098b8:	ec51 0b10 	vmov	r0, r1, d0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	bfd6      	itet	le
 80098c0:	460a      	movle	r2, r1
 80098c2:	462a      	movgt	r2, r5
 80098c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80098c8:	468b      	mov	fp, r1
 80098ca:	462f      	mov	r7, r5
 80098cc:	bfd4      	ite	le
 80098ce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80098d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80098d6:	4620      	mov	r0, r4
 80098d8:	ee10 2a10 	vmov	r2, s0
 80098dc:	465b      	mov	r3, fp
 80098de:	4639      	mov	r1, r7
 80098e0:	f7f6 ffc4 	bl	800086c <__aeabi_ddiv>
 80098e4:	ec41 0b10 	vmov	d0, r0, r1
 80098e8:	b003      	add	sp, #12
 80098ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080098ee <__copybits>:
 80098ee:	3901      	subs	r1, #1
 80098f0:	b570      	push	{r4, r5, r6, lr}
 80098f2:	1149      	asrs	r1, r1, #5
 80098f4:	6914      	ldr	r4, [r2, #16]
 80098f6:	3101      	adds	r1, #1
 80098f8:	f102 0314 	add.w	r3, r2, #20
 80098fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009900:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009904:	1f05      	subs	r5, r0, #4
 8009906:	42a3      	cmp	r3, r4
 8009908:	d30c      	bcc.n	8009924 <__copybits+0x36>
 800990a:	1aa3      	subs	r3, r4, r2
 800990c:	3b11      	subs	r3, #17
 800990e:	f023 0303 	bic.w	r3, r3, #3
 8009912:	3211      	adds	r2, #17
 8009914:	42a2      	cmp	r2, r4
 8009916:	bf88      	it	hi
 8009918:	2300      	movhi	r3, #0
 800991a:	4418      	add	r0, r3
 800991c:	2300      	movs	r3, #0
 800991e:	4288      	cmp	r0, r1
 8009920:	d305      	bcc.n	800992e <__copybits+0x40>
 8009922:	bd70      	pop	{r4, r5, r6, pc}
 8009924:	f853 6b04 	ldr.w	r6, [r3], #4
 8009928:	f845 6f04 	str.w	r6, [r5, #4]!
 800992c:	e7eb      	b.n	8009906 <__copybits+0x18>
 800992e:	f840 3b04 	str.w	r3, [r0], #4
 8009932:	e7f4      	b.n	800991e <__copybits+0x30>

08009934 <__any_on>:
 8009934:	f100 0214 	add.w	r2, r0, #20
 8009938:	6900      	ldr	r0, [r0, #16]
 800993a:	114b      	asrs	r3, r1, #5
 800993c:	4298      	cmp	r0, r3
 800993e:	b510      	push	{r4, lr}
 8009940:	db11      	blt.n	8009966 <__any_on+0x32>
 8009942:	dd0a      	ble.n	800995a <__any_on+0x26>
 8009944:	f011 011f 	ands.w	r1, r1, #31
 8009948:	d007      	beq.n	800995a <__any_on+0x26>
 800994a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800994e:	fa24 f001 	lsr.w	r0, r4, r1
 8009952:	fa00 f101 	lsl.w	r1, r0, r1
 8009956:	428c      	cmp	r4, r1
 8009958:	d10b      	bne.n	8009972 <__any_on+0x3e>
 800995a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800995e:	4293      	cmp	r3, r2
 8009960:	d803      	bhi.n	800996a <__any_on+0x36>
 8009962:	2000      	movs	r0, #0
 8009964:	bd10      	pop	{r4, pc}
 8009966:	4603      	mov	r3, r0
 8009968:	e7f7      	b.n	800995a <__any_on+0x26>
 800996a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800996e:	2900      	cmp	r1, #0
 8009970:	d0f5      	beq.n	800995e <__any_on+0x2a>
 8009972:	2001      	movs	r0, #1
 8009974:	e7f6      	b.n	8009964 <__any_on+0x30>

08009976 <_calloc_r>:
 8009976:	b513      	push	{r0, r1, r4, lr}
 8009978:	434a      	muls	r2, r1
 800997a:	4611      	mov	r1, r2
 800997c:	9201      	str	r2, [sp, #4]
 800997e:	f000 f859 	bl	8009a34 <_malloc_r>
 8009982:	4604      	mov	r4, r0
 8009984:	b118      	cbz	r0, 800998e <_calloc_r+0x18>
 8009986:	9a01      	ldr	r2, [sp, #4]
 8009988:	2100      	movs	r1, #0
 800998a:	f7fc fbc7 	bl	800611c <memset>
 800998e:	4620      	mov	r0, r4
 8009990:	b002      	add	sp, #8
 8009992:	bd10      	pop	{r4, pc}

08009994 <_free_r>:
 8009994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009996:	2900      	cmp	r1, #0
 8009998:	d048      	beq.n	8009a2c <_free_r+0x98>
 800999a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800999e:	9001      	str	r0, [sp, #4]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f1a1 0404 	sub.w	r4, r1, #4
 80099a6:	bfb8      	it	lt
 80099a8:	18e4      	addlt	r4, r4, r3
 80099aa:	f000 fa7b 	bl	8009ea4 <__malloc_lock>
 80099ae:	4a20      	ldr	r2, [pc, #128]	; (8009a30 <_free_r+0x9c>)
 80099b0:	9801      	ldr	r0, [sp, #4]
 80099b2:	6813      	ldr	r3, [r2, #0]
 80099b4:	4615      	mov	r5, r2
 80099b6:	b933      	cbnz	r3, 80099c6 <_free_r+0x32>
 80099b8:	6063      	str	r3, [r4, #4]
 80099ba:	6014      	str	r4, [r2, #0]
 80099bc:	b003      	add	sp, #12
 80099be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099c2:	f000 ba75 	b.w	8009eb0 <__malloc_unlock>
 80099c6:	42a3      	cmp	r3, r4
 80099c8:	d90b      	bls.n	80099e2 <_free_r+0x4e>
 80099ca:	6821      	ldr	r1, [r4, #0]
 80099cc:	1862      	adds	r2, r4, r1
 80099ce:	4293      	cmp	r3, r2
 80099d0:	bf04      	itt	eq
 80099d2:	681a      	ldreq	r2, [r3, #0]
 80099d4:	685b      	ldreq	r3, [r3, #4]
 80099d6:	6063      	str	r3, [r4, #4]
 80099d8:	bf04      	itt	eq
 80099da:	1852      	addeq	r2, r2, r1
 80099dc:	6022      	streq	r2, [r4, #0]
 80099de:	602c      	str	r4, [r5, #0]
 80099e0:	e7ec      	b.n	80099bc <_free_r+0x28>
 80099e2:	461a      	mov	r2, r3
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	b10b      	cbz	r3, 80099ec <_free_r+0x58>
 80099e8:	42a3      	cmp	r3, r4
 80099ea:	d9fa      	bls.n	80099e2 <_free_r+0x4e>
 80099ec:	6811      	ldr	r1, [r2, #0]
 80099ee:	1855      	adds	r5, r2, r1
 80099f0:	42a5      	cmp	r5, r4
 80099f2:	d10b      	bne.n	8009a0c <_free_r+0x78>
 80099f4:	6824      	ldr	r4, [r4, #0]
 80099f6:	4421      	add	r1, r4
 80099f8:	1854      	adds	r4, r2, r1
 80099fa:	42a3      	cmp	r3, r4
 80099fc:	6011      	str	r1, [r2, #0]
 80099fe:	d1dd      	bne.n	80099bc <_free_r+0x28>
 8009a00:	681c      	ldr	r4, [r3, #0]
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	6053      	str	r3, [r2, #4]
 8009a06:	4421      	add	r1, r4
 8009a08:	6011      	str	r1, [r2, #0]
 8009a0a:	e7d7      	b.n	80099bc <_free_r+0x28>
 8009a0c:	d902      	bls.n	8009a14 <_free_r+0x80>
 8009a0e:	230c      	movs	r3, #12
 8009a10:	6003      	str	r3, [r0, #0]
 8009a12:	e7d3      	b.n	80099bc <_free_r+0x28>
 8009a14:	6825      	ldr	r5, [r4, #0]
 8009a16:	1961      	adds	r1, r4, r5
 8009a18:	428b      	cmp	r3, r1
 8009a1a:	bf04      	itt	eq
 8009a1c:	6819      	ldreq	r1, [r3, #0]
 8009a1e:	685b      	ldreq	r3, [r3, #4]
 8009a20:	6063      	str	r3, [r4, #4]
 8009a22:	bf04      	itt	eq
 8009a24:	1949      	addeq	r1, r1, r5
 8009a26:	6021      	streq	r1, [r4, #0]
 8009a28:	6054      	str	r4, [r2, #4]
 8009a2a:	e7c7      	b.n	80099bc <_free_r+0x28>
 8009a2c:	b003      	add	sp, #12
 8009a2e:	bd30      	pop	{r4, r5, pc}
 8009a30:	20000224 	.word	0x20000224

08009a34 <_malloc_r>:
 8009a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a36:	1ccd      	adds	r5, r1, #3
 8009a38:	f025 0503 	bic.w	r5, r5, #3
 8009a3c:	3508      	adds	r5, #8
 8009a3e:	2d0c      	cmp	r5, #12
 8009a40:	bf38      	it	cc
 8009a42:	250c      	movcc	r5, #12
 8009a44:	2d00      	cmp	r5, #0
 8009a46:	4606      	mov	r6, r0
 8009a48:	db01      	blt.n	8009a4e <_malloc_r+0x1a>
 8009a4a:	42a9      	cmp	r1, r5
 8009a4c:	d903      	bls.n	8009a56 <_malloc_r+0x22>
 8009a4e:	230c      	movs	r3, #12
 8009a50:	6033      	str	r3, [r6, #0]
 8009a52:	2000      	movs	r0, #0
 8009a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a56:	f000 fa25 	bl	8009ea4 <__malloc_lock>
 8009a5a:	4921      	ldr	r1, [pc, #132]	; (8009ae0 <_malloc_r+0xac>)
 8009a5c:	680a      	ldr	r2, [r1, #0]
 8009a5e:	4614      	mov	r4, r2
 8009a60:	b99c      	cbnz	r4, 8009a8a <_malloc_r+0x56>
 8009a62:	4f20      	ldr	r7, [pc, #128]	; (8009ae4 <_malloc_r+0xb0>)
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	b923      	cbnz	r3, 8009a72 <_malloc_r+0x3e>
 8009a68:	4621      	mov	r1, r4
 8009a6a:	4630      	mov	r0, r6
 8009a6c:	f000 f9a0 	bl	8009db0 <_sbrk_r>
 8009a70:	6038      	str	r0, [r7, #0]
 8009a72:	4629      	mov	r1, r5
 8009a74:	4630      	mov	r0, r6
 8009a76:	f000 f99b 	bl	8009db0 <_sbrk_r>
 8009a7a:	1c43      	adds	r3, r0, #1
 8009a7c:	d123      	bne.n	8009ac6 <_malloc_r+0x92>
 8009a7e:	230c      	movs	r3, #12
 8009a80:	6033      	str	r3, [r6, #0]
 8009a82:	4630      	mov	r0, r6
 8009a84:	f000 fa14 	bl	8009eb0 <__malloc_unlock>
 8009a88:	e7e3      	b.n	8009a52 <_malloc_r+0x1e>
 8009a8a:	6823      	ldr	r3, [r4, #0]
 8009a8c:	1b5b      	subs	r3, r3, r5
 8009a8e:	d417      	bmi.n	8009ac0 <_malloc_r+0x8c>
 8009a90:	2b0b      	cmp	r3, #11
 8009a92:	d903      	bls.n	8009a9c <_malloc_r+0x68>
 8009a94:	6023      	str	r3, [r4, #0]
 8009a96:	441c      	add	r4, r3
 8009a98:	6025      	str	r5, [r4, #0]
 8009a9a:	e004      	b.n	8009aa6 <_malloc_r+0x72>
 8009a9c:	6863      	ldr	r3, [r4, #4]
 8009a9e:	42a2      	cmp	r2, r4
 8009aa0:	bf0c      	ite	eq
 8009aa2:	600b      	streq	r3, [r1, #0]
 8009aa4:	6053      	strne	r3, [r2, #4]
 8009aa6:	4630      	mov	r0, r6
 8009aa8:	f000 fa02 	bl	8009eb0 <__malloc_unlock>
 8009aac:	f104 000b 	add.w	r0, r4, #11
 8009ab0:	1d23      	adds	r3, r4, #4
 8009ab2:	f020 0007 	bic.w	r0, r0, #7
 8009ab6:	1ac2      	subs	r2, r0, r3
 8009ab8:	d0cc      	beq.n	8009a54 <_malloc_r+0x20>
 8009aba:	1a1b      	subs	r3, r3, r0
 8009abc:	50a3      	str	r3, [r4, r2]
 8009abe:	e7c9      	b.n	8009a54 <_malloc_r+0x20>
 8009ac0:	4622      	mov	r2, r4
 8009ac2:	6864      	ldr	r4, [r4, #4]
 8009ac4:	e7cc      	b.n	8009a60 <_malloc_r+0x2c>
 8009ac6:	1cc4      	adds	r4, r0, #3
 8009ac8:	f024 0403 	bic.w	r4, r4, #3
 8009acc:	42a0      	cmp	r0, r4
 8009ace:	d0e3      	beq.n	8009a98 <_malloc_r+0x64>
 8009ad0:	1a21      	subs	r1, r4, r0
 8009ad2:	4630      	mov	r0, r6
 8009ad4:	f000 f96c 	bl	8009db0 <_sbrk_r>
 8009ad8:	3001      	adds	r0, #1
 8009ada:	d1dd      	bne.n	8009a98 <_malloc_r+0x64>
 8009adc:	e7cf      	b.n	8009a7e <_malloc_r+0x4a>
 8009ade:	bf00      	nop
 8009ae0:	20000224 	.word	0x20000224
 8009ae4:	20000228 	.word	0x20000228

08009ae8 <__ssputs_r>:
 8009ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009aec:	688e      	ldr	r6, [r1, #8]
 8009aee:	429e      	cmp	r6, r3
 8009af0:	4682      	mov	sl, r0
 8009af2:	460c      	mov	r4, r1
 8009af4:	4690      	mov	r8, r2
 8009af6:	461f      	mov	r7, r3
 8009af8:	d838      	bhi.n	8009b6c <__ssputs_r+0x84>
 8009afa:	898a      	ldrh	r2, [r1, #12]
 8009afc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b00:	d032      	beq.n	8009b68 <__ssputs_r+0x80>
 8009b02:	6825      	ldr	r5, [r4, #0]
 8009b04:	6909      	ldr	r1, [r1, #16]
 8009b06:	eba5 0901 	sub.w	r9, r5, r1
 8009b0a:	6965      	ldr	r5, [r4, #20]
 8009b0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b14:	3301      	adds	r3, #1
 8009b16:	444b      	add	r3, r9
 8009b18:	106d      	asrs	r5, r5, #1
 8009b1a:	429d      	cmp	r5, r3
 8009b1c:	bf38      	it	cc
 8009b1e:	461d      	movcc	r5, r3
 8009b20:	0553      	lsls	r3, r2, #21
 8009b22:	d531      	bpl.n	8009b88 <__ssputs_r+0xa0>
 8009b24:	4629      	mov	r1, r5
 8009b26:	f7ff ff85 	bl	8009a34 <_malloc_r>
 8009b2a:	4606      	mov	r6, r0
 8009b2c:	b950      	cbnz	r0, 8009b44 <__ssputs_r+0x5c>
 8009b2e:	230c      	movs	r3, #12
 8009b30:	f8ca 3000 	str.w	r3, [sl]
 8009b34:	89a3      	ldrh	r3, [r4, #12]
 8009b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b3a:	81a3      	strh	r3, [r4, #12]
 8009b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b44:	6921      	ldr	r1, [r4, #16]
 8009b46:	464a      	mov	r2, r9
 8009b48:	f7ff fa4c 	bl	8008fe4 <memcpy>
 8009b4c:	89a3      	ldrh	r3, [r4, #12]
 8009b4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b56:	81a3      	strh	r3, [r4, #12]
 8009b58:	6126      	str	r6, [r4, #16]
 8009b5a:	6165      	str	r5, [r4, #20]
 8009b5c:	444e      	add	r6, r9
 8009b5e:	eba5 0509 	sub.w	r5, r5, r9
 8009b62:	6026      	str	r6, [r4, #0]
 8009b64:	60a5      	str	r5, [r4, #8]
 8009b66:	463e      	mov	r6, r7
 8009b68:	42be      	cmp	r6, r7
 8009b6a:	d900      	bls.n	8009b6e <__ssputs_r+0x86>
 8009b6c:	463e      	mov	r6, r7
 8009b6e:	4632      	mov	r2, r6
 8009b70:	6820      	ldr	r0, [r4, #0]
 8009b72:	4641      	mov	r1, r8
 8009b74:	f000 f97c 	bl	8009e70 <memmove>
 8009b78:	68a3      	ldr	r3, [r4, #8]
 8009b7a:	6822      	ldr	r2, [r4, #0]
 8009b7c:	1b9b      	subs	r3, r3, r6
 8009b7e:	4432      	add	r2, r6
 8009b80:	60a3      	str	r3, [r4, #8]
 8009b82:	6022      	str	r2, [r4, #0]
 8009b84:	2000      	movs	r0, #0
 8009b86:	e7db      	b.n	8009b40 <__ssputs_r+0x58>
 8009b88:	462a      	mov	r2, r5
 8009b8a:	f000 f997 	bl	8009ebc <_realloc_r>
 8009b8e:	4606      	mov	r6, r0
 8009b90:	2800      	cmp	r0, #0
 8009b92:	d1e1      	bne.n	8009b58 <__ssputs_r+0x70>
 8009b94:	6921      	ldr	r1, [r4, #16]
 8009b96:	4650      	mov	r0, sl
 8009b98:	f7ff fefc 	bl	8009994 <_free_r>
 8009b9c:	e7c7      	b.n	8009b2e <__ssputs_r+0x46>
	...

08009ba0 <_svfiprintf_r>:
 8009ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ba4:	4698      	mov	r8, r3
 8009ba6:	898b      	ldrh	r3, [r1, #12]
 8009ba8:	061b      	lsls	r3, r3, #24
 8009baa:	b09d      	sub	sp, #116	; 0x74
 8009bac:	4607      	mov	r7, r0
 8009bae:	460d      	mov	r5, r1
 8009bb0:	4614      	mov	r4, r2
 8009bb2:	d50e      	bpl.n	8009bd2 <_svfiprintf_r+0x32>
 8009bb4:	690b      	ldr	r3, [r1, #16]
 8009bb6:	b963      	cbnz	r3, 8009bd2 <_svfiprintf_r+0x32>
 8009bb8:	2140      	movs	r1, #64	; 0x40
 8009bba:	f7ff ff3b 	bl	8009a34 <_malloc_r>
 8009bbe:	6028      	str	r0, [r5, #0]
 8009bc0:	6128      	str	r0, [r5, #16]
 8009bc2:	b920      	cbnz	r0, 8009bce <_svfiprintf_r+0x2e>
 8009bc4:	230c      	movs	r3, #12
 8009bc6:	603b      	str	r3, [r7, #0]
 8009bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bcc:	e0d1      	b.n	8009d72 <_svfiprintf_r+0x1d2>
 8009bce:	2340      	movs	r3, #64	; 0x40
 8009bd0:	616b      	str	r3, [r5, #20]
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8009bd6:	2320      	movs	r3, #32
 8009bd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009bdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009be0:	2330      	movs	r3, #48	; 0x30
 8009be2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009d8c <_svfiprintf_r+0x1ec>
 8009be6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bea:	f04f 0901 	mov.w	r9, #1
 8009bee:	4623      	mov	r3, r4
 8009bf0:	469a      	mov	sl, r3
 8009bf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bf6:	b10a      	cbz	r2, 8009bfc <_svfiprintf_r+0x5c>
 8009bf8:	2a25      	cmp	r2, #37	; 0x25
 8009bfa:	d1f9      	bne.n	8009bf0 <_svfiprintf_r+0x50>
 8009bfc:	ebba 0b04 	subs.w	fp, sl, r4
 8009c00:	d00b      	beq.n	8009c1a <_svfiprintf_r+0x7a>
 8009c02:	465b      	mov	r3, fp
 8009c04:	4622      	mov	r2, r4
 8009c06:	4629      	mov	r1, r5
 8009c08:	4638      	mov	r0, r7
 8009c0a:	f7ff ff6d 	bl	8009ae8 <__ssputs_r>
 8009c0e:	3001      	adds	r0, #1
 8009c10:	f000 80aa 	beq.w	8009d68 <_svfiprintf_r+0x1c8>
 8009c14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c16:	445a      	add	r2, fp
 8009c18:	9209      	str	r2, [sp, #36]	; 0x24
 8009c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f000 80a2 	beq.w	8009d68 <_svfiprintf_r+0x1c8>
 8009c24:	2300      	movs	r3, #0
 8009c26:	f04f 32ff 	mov.w	r2, #4294967295
 8009c2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c2e:	f10a 0a01 	add.w	sl, sl, #1
 8009c32:	9304      	str	r3, [sp, #16]
 8009c34:	9307      	str	r3, [sp, #28]
 8009c36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c3a:	931a      	str	r3, [sp, #104]	; 0x68
 8009c3c:	4654      	mov	r4, sl
 8009c3e:	2205      	movs	r2, #5
 8009c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c44:	4851      	ldr	r0, [pc, #324]	; (8009d8c <_svfiprintf_r+0x1ec>)
 8009c46:	f7f6 fadb 	bl	8000200 <memchr>
 8009c4a:	9a04      	ldr	r2, [sp, #16]
 8009c4c:	b9d8      	cbnz	r0, 8009c86 <_svfiprintf_r+0xe6>
 8009c4e:	06d0      	lsls	r0, r2, #27
 8009c50:	bf44      	itt	mi
 8009c52:	2320      	movmi	r3, #32
 8009c54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c58:	0711      	lsls	r1, r2, #28
 8009c5a:	bf44      	itt	mi
 8009c5c:	232b      	movmi	r3, #43	; 0x2b
 8009c5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c62:	f89a 3000 	ldrb.w	r3, [sl]
 8009c66:	2b2a      	cmp	r3, #42	; 0x2a
 8009c68:	d015      	beq.n	8009c96 <_svfiprintf_r+0xf6>
 8009c6a:	9a07      	ldr	r2, [sp, #28]
 8009c6c:	4654      	mov	r4, sl
 8009c6e:	2000      	movs	r0, #0
 8009c70:	f04f 0c0a 	mov.w	ip, #10
 8009c74:	4621      	mov	r1, r4
 8009c76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c7a:	3b30      	subs	r3, #48	; 0x30
 8009c7c:	2b09      	cmp	r3, #9
 8009c7e:	d94e      	bls.n	8009d1e <_svfiprintf_r+0x17e>
 8009c80:	b1b0      	cbz	r0, 8009cb0 <_svfiprintf_r+0x110>
 8009c82:	9207      	str	r2, [sp, #28]
 8009c84:	e014      	b.n	8009cb0 <_svfiprintf_r+0x110>
 8009c86:	eba0 0308 	sub.w	r3, r0, r8
 8009c8a:	fa09 f303 	lsl.w	r3, r9, r3
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	9304      	str	r3, [sp, #16]
 8009c92:	46a2      	mov	sl, r4
 8009c94:	e7d2      	b.n	8009c3c <_svfiprintf_r+0x9c>
 8009c96:	9b03      	ldr	r3, [sp, #12]
 8009c98:	1d19      	adds	r1, r3, #4
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	9103      	str	r1, [sp, #12]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	bfbb      	ittet	lt
 8009ca2:	425b      	neglt	r3, r3
 8009ca4:	f042 0202 	orrlt.w	r2, r2, #2
 8009ca8:	9307      	strge	r3, [sp, #28]
 8009caa:	9307      	strlt	r3, [sp, #28]
 8009cac:	bfb8      	it	lt
 8009cae:	9204      	strlt	r2, [sp, #16]
 8009cb0:	7823      	ldrb	r3, [r4, #0]
 8009cb2:	2b2e      	cmp	r3, #46	; 0x2e
 8009cb4:	d10c      	bne.n	8009cd0 <_svfiprintf_r+0x130>
 8009cb6:	7863      	ldrb	r3, [r4, #1]
 8009cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8009cba:	d135      	bne.n	8009d28 <_svfiprintf_r+0x188>
 8009cbc:	9b03      	ldr	r3, [sp, #12]
 8009cbe:	1d1a      	adds	r2, r3, #4
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	9203      	str	r2, [sp, #12]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	bfb8      	it	lt
 8009cc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ccc:	3402      	adds	r4, #2
 8009cce:	9305      	str	r3, [sp, #20]
 8009cd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009d9c <_svfiprintf_r+0x1fc>
 8009cd4:	7821      	ldrb	r1, [r4, #0]
 8009cd6:	2203      	movs	r2, #3
 8009cd8:	4650      	mov	r0, sl
 8009cda:	f7f6 fa91 	bl	8000200 <memchr>
 8009cde:	b140      	cbz	r0, 8009cf2 <_svfiprintf_r+0x152>
 8009ce0:	2340      	movs	r3, #64	; 0x40
 8009ce2:	eba0 000a 	sub.w	r0, r0, sl
 8009ce6:	fa03 f000 	lsl.w	r0, r3, r0
 8009cea:	9b04      	ldr	r3, [sp, #16]
 8009cec:	4303      	orrs	r3, r0
 8009cee:	3401      	adds	r4, #1
 8009cf0:	9304      	str	r3, [sp, #16]
 8009cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cf6:	4826      	ldr	r0, [pc, #152]	; (8009d90 <_svfiprintf_r+0x1f0>)
 8009cf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cfc:	2206      	movs	r2, #6
 8009cfe:	f7f6 fa7f 	bl	8000200 <memchr>
 8009d02:	2800      	cmp	r0, #0
 8009d04:	d038      	beq.n	8009d78 <_svfiprintf_r+0x1d8>
 8009d06:	4b23      	ldr	r3, [pc, #140]	; (8009d94 <_svfiprintf_r+0x1f4>)
 8009d08:	bb1b      	cbnz	r3, 8009d52 <_svfiprintf_r+0x1b2>
 8009d0a:	9b03      	ldr	r3, [sp, #12]
 8009d0c:	3307      	adds	r3, #7
 8009d0e:	f023 0307 	bic.w	r3, r3, #7
 8009d12:	3308      	adds	r3, #8
 8009d14:	9303      	str	r3, [sp, #12]
 8009d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d18:	4433      	add	r3, r6
 8009d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d1c:	e767      	b.n	8009bee <_svfiprintf_r+0x4e>
 8009d1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d22:	460c      	mov	r4, r1
 8009d24:	2001      	movs	r0, #1
 8009d26:	e7a5      	b.n	8009c74 <_svfiprintf_r+0xd4>
 8009d28:	2300      	movs	r3, #0
 8009d2a:	3401      	adds	r4, #1
 8009d2c:	9305      	str	r3, [sp, #20]
 8009d2e:	4619      	mov	r1, r3
 8009d30:	f04f 0c0a 	mov.w	ip, #10
 8009d34:	4620      	mov	r0, r4
 8009d36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d3a:	3a30      	subs	r2, #48	; 0x30
 8009d3c:	2a09      	cmp	r2, #9
 8009d3e:	d903      	bls.n	8009d48 <_svfiprintf_r+0x1a8>
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d0c5      	beq.n	8009cd0 <_svfiprintf_r+0x130>
 8009d44:	9105      	str	r1, [sp, #20]
 8009d46:	e7c3      	b.n	8009cd0 <_svfiprintf_r+0x130>
 8009d48:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d4c:	4604      	mov	r4, r0
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e7f0      	b.n	8009d34 <_svfiprintf_r+0x194>
 8009d52:	ab03      	add	r3, sp, #12
 8009d54:	9300      	str	r3, [sp, #0]
 8009d56:	462a      	mov	r2, r5
 8009d58:	4b0f      	ldr	r3, [pc, #60]	; (8009d98 <_svfiprintf_r+0x1f8>)
 8009d5a:	a904      	add	r1, sp, #16
 8009d5c:	4638      	mov	r0, r7
 8009d5e:	f7fc fa85 	bl	800626c <_printf_float>
 8009d62:	1c42      	adds	r2, r0, #1
 8009d64:	4606      	mov	r6, r0
 8009d66:	d1d6      	bne.n	8009d16 <_svfiprintf_r+0x176>
 8009d68:	89ab      	ldrh	r3, [r5, #12]
 8009d6a:	065b      	lsls	r3, r3, #25
 8009d6c:	f53f af2c 	bmi.w	8009bc8 <_svfiprintf_r+0x28>
 8009d70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d72:	b01d      	add	sp, #116	; 0x74
 8009d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d78:	ab03      	add	r3, sp, #12
 8009d7a:	9300      	str	r3, [sp, #0]
 8009d7c:	462a      	mov	r2, r5
 8009d7e:	4b06      	ldr	r3, [pc, #24]	; (8009d98 <_svfiprintf_r+0x1f8>)
 8009d80:	a904      	add	r1, sp, #16
 8009d82:	4638      	mov	r0, r7
 8009d84:	f7fc fd16 	bl	80067b4 <_printf_i>
 8009d88:	e7eb      	b.n	8009d62 <_svfiprintf_r+0x1c2>
 8009d8a:	bf00      	nop
 8009d8c:	0800b02c 	.word	0x0800b02c
 8009d90:	0800b036 	.word	0x0800b036
 8009d94:	0800626d 	.word	0x0800626d
 8009d98:	08009ae9 	.word	0x08009ae9
 8009d9c:	0800b032 	.word	0x0800b032

08009da0 <nan>:
 8009da0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009da8 <nan+0x8>
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop
 8009da8:	00000000 	.word	0x00000000
 8009dac:	7ff80000 	.word	0x7ff80000

08009db0 <_sbrk_r>:
 8009db0:	b538      	push	{r3, r4, r5, lr}
 8009db2:	4d06      	ldr	r5, [pc, #24]	; (8009dcc <_sbrk_r+0x1c>)
 8009db4:	2300      	movs	r3, #0
 8009db6:	4604      	mov	r4, r0
 8009db8:	4608      	mov	r0, r1
 8009dba:	602b      	str	r3, [r5, #0]
 8009dbc:	f7f7 ffc2 	bl	8001d44 <_sbrk>
 8009dc0:	1c43      	adds	r3, r0, #1
 8009dc2:	d102      	bne.n	8009dca <_sbrk_r+0x1a>
 8009dc4:	682b      	ldr	r3, [r5, #0]
 8009dc6:	b103      	cbz	r3, 8009dca <_sbrk_r+0x1a>
 8009dc8:	6023      	str	r3, [r4, #0]
 8009dca:	bd38      	pop	{r3, r4, r5, pc}
 8009dcc:	200004d8 	.word	0x200004d8

08009dd0 <strncmp>:
 8009dd0:	b510      	push	{r4, lr}
 8009dd2:	b16a      	cbz	r2, 8009df0 <strncmp+0x20>
 8009dd4:	3901      	subs	r1, #1
 8009dd6:	1884      	adds	r4, r0, r2
 8009dd8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009ddc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d103      	bne.n	8009dec <strncmp+0x1c>
 8009de4:	42a0      	cmp	r0, r4
 8009de6:	d001      	beq.n	8009dec <strncmp+0x1c>
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1f5      	bne.n	8009dd8 <strncmp+0x8>
 8009dec:	1a98      	subs	r0, r3, r2
 8009dee:	bd10      	pop	{r4, pc}
 8009df0:	4610      	mov	r0, r2
 8009df2:	e7fc      	b.n	8009dee <strncmp+0x1e>

08009df4 <__ascii_wctomb>:
 8009df4:	b149      	cbz	r1, 8009e0a <__ascii_wctomb+0x16>
 8009df6:	2aff      	cmp	r2, #255	; 0xff
 8009df8:	bf85      	ittet	hi
 8009dfa:	238a      	movhi	r3, #138	; 0x8a
 8009dfc:	6003      	strhi	r3, [r0, #0]
 8009dfe:	700a      	strbls	r2, [r1, #0]
 8009e00:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e04:	bf98      	it	ls
 8009e06:	2001      	movls	r0, #1
 8009e08:	4770      	bx	lr
 8009e0a:	4608      	mov	r0, r1
 8009e0c:	4770      	bx	lr
	...

08009e10 <__assert_func>:
 8009e10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e12:	4614      	mov	r4, r2
 8009e14:	461a      	mov	r2, r3
 8009e16:	4b09      	ldr	r3, [pc, #36]	; (8009e3c <__assert_func+0x2c>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4605      	mov	r5, r0
 8009e1c:	68d8      	ldr	r0, [r3, #12]
 8009e1e:	b14c      	cbz	r4, 8009e34 <__assert_func+0x24>
 8009e20:	4b07      	ldr	r3, [pc, #28]	; (8009e40 <__assert_func+0x30>)
 8009e22:	9100      	str	r1, [sp, #0]
 8009e24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e28:	4906      	ldr	r1, [pc, #24]	; (8009e44 <__assert_func+0x34>)
 8009e2a:	462b      	mov	r3, r5
 8009e2c:	f000 f80e 	bl	8009e4c <fiprintf>
 8009e30:	f000 fa84 	bl	800a33c <abort>
 8009e34:	4b04      	ldr	r3, [pc, #16]	; (8009e48 <__assert_func+0x38>)
 8009e36:	461c      	mov	r4, r3
 8009e38:	e7f3      	b.n	8009e22 <__assert_func+0x12>
 8009e3a:	bf00      	nop
 8009e3c:	20000014 	.word	0x20000014
 8009e40:	0800b03d 	.word	0x0800b03d
 8009e44:	0800b04a 	.word	0x0800b04a
 8009e48:	0800b078 	.word	0x0800b078

08009e4c <fiprintf>:
 8009e4c:	b40e      	push	{r1, r2, r3}
 8009e4e:	b503      	push	{r0, r1, lr}
 8009e50:	4601      	mov	r1, r0
 8009e52:	ab03      	add	r3, sp, #12
 8009e54:	4805      	ldr	r0, [pc, #20]	; (8009e6c <fiprintf+0x20>)
 8009e56:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e5a:	6800      	ldr	r0, [r0, #0]
 8009e5c:	9301      	str	r3, [sp, #4]
 8009e5e:	f000 f87d 	bl	8009f5c <_vfiprintf_r>
 8009e62:	b002      	add	sp, #8
 8009e64:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e68:	b003      	add	sp, #12
 8009e6a:	4770      	bx	lr
 8009e6c:	20000014 	.word	0x20000014

08009e70 <memmove>:
 8009e70:	4288      	cmp	r0, r1
 8009e72:	b510      	push	{r4, lr}
 8009e74:	eb01 0402 	add.w	r4, r1, r2
 8009e78:	d902      	bls.n	8009e80 <memmove+0x10>
 8009e7a:	4284      	cmp	r4, r0
 8009e7c:	4623      	mov	r3, r4
 8009e7e:	d807      	bhi.n	8009e90 <memmove+0x20>
 8009e80:	1e43      	subs	r3, r0, #1
 8009e82:	42a1      	cmp	r1, r4
 8009e84:	d008      	beq.n	8009e98 <memmove+0x28>
 8009e86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e8e:	e7f8      	b.n	8009e82 <memmove+0x12>
 8009e90:	4402      	add	r2, r0
 8009e92:	4601      	mov	r1, r0
 8009e94:	428a      	cmp	r2, r1
 8009e96:	d100      	bne.n	8009e9a <memmove+0x2a>
 8009e98:	bd10      	pop	{r4, pc}
 8009e9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ea2:	e7f7      	b.n	8009e94 <memmove+0x24>

08009ea4 <__malloc_lock>:
 8009ea4:	4801      	ldr	r0, [pc, #4]	; (8009eac <__malloc_lock+0x8>)
 8009ea6:	f000 bc09 	b.w	800a6bc <__retarget_lock_acquire_recursive>
 8009eaa:	bf00      	nop
 8009eac:	200004e0 	.word	0x200004e0

08009eb0 <__malloc_unlock>:
 8009eb0:	4801      	ldr	r0, [pc, #4]	; (8009eb8 <__malloc_unlock+0x8>)
 8009eb2:	f000 bc04 	b.w	800a6be <__retarget_lock_release_recursive>
 8009eb6:	bf00      	nop
 8009eb8:	200004e0 	.word	0x200004e0

08009ebc <_realloc_r>:
 8009ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ebe:	4607      	mov	r7, r0
 8009ec0:	4614      	mov	r4, r2
 8009ec2:	460e      	mov	r6, r1
 8009ec4:	b921      	cbnz	r1, 8009ed0 <_realloc_r+0x14>
 8009ec6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009eca:	4611      	mov	r1, r2
 8009ecc:	f7ff bdb2 	b.w	8009a34 <_malloc_r>
 8009ed0:	b922      	cbnz	r2, 8009edc <_realloc_r+0x20>
 8009ed2:	f7ff fd5f 	bl	8009994 <_free_r>
 8009ed6:	4625      	mov	r5, r4
 8009ed8:	4628      	mov	r0, r5
 8009eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009edc:	f000 fc54 	bl	800a788 <_malloc_usable_size_r>
 8009ee0:	42a0      	cmp	r0, r4
 8009ee2:	d20f      	bcs.n	8009f04 <_realloc_r+0x48>
 8009ee4:	4621      	mov	r1, r4
 8009ee6:	4638      	mov	r0, r7
 8009ee8:	f7ff fda4 	bl	8009a34 <_malloc_r>
 8009eec:	4605      	mov	r5, r0
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	d0f2      	beq.n	8009ed8 <_realloc_r+0x1c>
 8009ef2:	4631      	mov	r1, r6
 8009ef4:	4622      	mov	r2, r4
 8009ef6:	f7ff f875 	bl	8008fe4 <memcpy>
 8009efa:	4631      	mov	r1, r6
 8009efc:	4638      	mov	r0, r7
 8009efe:	f7ff fd49 	bl	8009994 <_free_r>
 8009f02:	e7e9      	b.n	8009ed8 <_realloc_r+0x1c>
 8009f04:	4635      	mov	r5, r6
 8009f06:	e7e7      	b.n	8009ed8 <_realloc_r+0x1c>

08009f08 <__sfputc_r>:
 8009f08:	6893      	ldr	r3, [r2, #8]
 8009f0a:	3b01      	subs	r3, #1
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	b410      	push	{r4}
 8009f10:	6093      	str	r3, [r2, #8]
 8009f12:	da08      	bge.n	8009f26 <__sfputc_r+0x1e>
 8009f14:	6994      	ldr	r4, [r2, #24]
 8009f16:	42a3      	cmp	r3, r4
 8009f18:	db01      	blt.n	8009f1e <__sfputc_r+0x16>
 8009f1a:	290a      	cmp	r1, #10
 8009f1c:	d103      	bne.n	8009f26 <__sfputc_r+0x1e>
 8009f1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f22:	f000 b94b 	b.w	800a1bc <__swbuf_r>
 8009f26:	6813      	ldr	r3, [r2, #0]
 8009f28:	1c58      	adds	r0, r3, #1
 8009f2a:	6010      	str	r0, [r2, #0]
 8009f2c:	7019      	strb	r1, [r3, #0]
 8009f2e:	4608      	mov	r0, r1
 8009f30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f34:	4770      	bx	lr

08009f36 <__sfputs_r>:
 8009f36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f38:	4606      	mov	r6, r0
 8009f3a:	460f      	mov	r7, r1
 8009f3c:	4614      	mov	r4, r2
 8009f3e:	18d5      	adds	r5, r2, r3
 8009f40:	42ac      	cmp	r4, r5
 8009f42:	d101      	bne.n	8009f48 <__sfputs_r+0x12>
 8009f44:	2000      	movs	r0, #0
 8009f46:	e007      	b.n	8009f58 <__sfputs_r+0x22>
 8009f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f4c:	463a      	mov	r2, r7
 8009f4e:	4630      	mov	r0, r6
 8009f50:	f7ff ffda 	bl	8009f08 <__sfputc_r>
 8009f54:	1c43      	adds	r3, r0, #1
 8009f56:	d1f3      	bne.n	8009f40 <__sfputs_r+0xa>
 8009f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f5c <_vfiprintf_r>:
 8009f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f60:	460d      	mov	r5, r1
 8009f62:	b09d      	sub	sp, #116	; 0x74
 8009f64:	4614      	mov	r4, r2
 8009f66:	4698      	mov	r8, r3
 8009f68:	4606      	mov	r6, r0
 8009f6a:	b118      	cbz	r0, 8009f74 <_vfiprintf_r+0x18>
 8009f6c:	6983      	ldr	r3, [r0, #24]
 8009f6e:	b90b      	cbnz	r3, 8009f74 <_vfiprintf_r+0x18>
 8009f70:	f000 fb06 	bl	800a580 <__sinit>
 8009f74:	4b89      	ldr	r3, [pc, #548]	; (800a19c <_vfiprintf_r+0x240>)
 8009f76:	429d      	cmp	r5, r3
 8009f78:	d11b      	bne.n	8009fb2 <_vfiprintf_r+0x56>
 8009f7a:	6875      	ldr	r5, [r6, #4]
 8009f7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f7e:	07d9      	lsls	r1, r3, #31
 8009f80:	d405      	bmi.n	8009f8e <_vfiprintf_r+0x32>
 8009f82:	89ab      	ldrh	r3, [r5, #12]
 8009f84:	059a      	lsls	r2, r3, #22
 8009f86:	d402      	bmi.n	8009f8e <_vfiprintf_r+0x32>
 8009f88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f8a:	f000 fb97 	bl	800a6bc <__retarget_lock_acquire_recursive>
 8009f8e:	89ab      	ldrh	r3, [r5, #12]
 8009f90:	071b      	lsls	r3, r3, #28
 8009f92:	d501      	bpl.n	8009f98 <_vfiprintf_r+0x3c>
 8009f94:	692b      	ldr	r3, [r5, #16]
 8009f96:	b9eb      	cbnz	r3, 8009fd4 <_vfiprintf_r+0x78>
 8009f98:	4629      	mov	r1, r5
 8009f9a:	4630      	mov	r0, r6
 8009f9c:	f000 f960 	bl	800a260 <__swsetup_r>
 8009fa0:	b1c0      	cbz	r0, 8009fd4 <_vfiprintf_r+0x78>
 8009fa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fa4:	07dc      	lsls	r4, r3, #31
 8009fa6:	d50e      	bpl.n	8009fc6 <_vfiprintf_r+0x6a>
 8009fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fac:	b01d      	add	sp, #116	; 0x74
 8009fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb2:	4b7b      	ldr	r3, [pc, #492]	; (800a1a0 <_vfiprintf_r+0x244>)
 8009fb4:	429d      	cmp	r5, r3
 8009fb6:	d101      	bne.n	8009fbc <_vfiprintf_r+0x60>
 8009fb8:	68b5      	ldr	r5, [r6, #8]
 8009fba:	e7df      	b.n	8009f7c <_vfiprintf_r+0x20>
 8009fbc:	4b79      	ldr	r3, [pc, #484]	; (800a1a4 <_vfiprintf_r+0x248>)
 8009fbe:	429d      	cmp	r5, r3
 8009fc0:	bf08      	it	eq
 8009fc2:	68f5      	ldreq	r5, [r6, #12]
 8009fc4:	e7da      	b.n	8009f7c <_vfiprintf_r+0x20>
 8009fc6:	89ab      	ldrh	r3, [r5, #12]
 8009fc8:	0598      	lsls	r0, r3, #22
 8009fca:	d4ed      	bmi.n	8009fa8 <_vfiprintf_r+0x4c>
 8009fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fce:	f000 fb76 	bl	800a6be <__retarget_lock_release_recursive>
 8009fd2:	e7e9      	b.n	8009fa8 <_vfiprintf_r+0x4c>
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8009fd8:	2320      	movs	r3, #32
 8009fda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fde:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fe2:	2330      	movs	r3, #48	; 0x30
 8009fe4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a1a8 <_vfiprintf_r+0x24c>
 8009fe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fec:	f04f 0901 	mov.w	r9, #1
 8009ff0:	4623      	mov	r3, r4
 8009ff2:	469a      	mov	sl, r3
 8009ff4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ff8:	b10a      	cbz	r2, 8009ffe <_vfiprintf_r+0xa2>
 8009ffa:	2a25      	cmp	r2, #37	; 0x25
 8009ffc:	d1f9      	bne.n	8009ff2 <_vfiprintf_r+0x96>
 8009ffe:	ebba 0b04 	subs.w	fp, sl, r4
 800a002:	d00b      	beq.n	800a01c <_vfiprintf_r+0xc0>
 800a004:	465b      	mov	r3, fp
 800a006:	4622      	mov	r2, r4
 800a008:	4629      	mov	r1, r5
 800a00a:	4630      	mov	r0, r6
 800a00c:	f7ff ff93 	bl	8009f36 <__sfputs_r>
 800a010:	3001      	adds	r0, #1
 800a012:	f000 80aa 	beq.w	800a16a <_vfiprintf_r+0x20e>
 800a016:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a018:	445a      	add	r2, fp
 800a01a:	9209      	str	r2, [sp, #36]	; 0x24
 800a01c:	f89a 3000 	ldrb.w	r3, [sl]
 800a020:	2b00      	cmp	r3, #0
 800a022:	f000 80a2 	beq.w	800a16a <_vfiprintf_r+0x20e>
 800a026:	2300      	movs	r3, #0
 800a028:	f04f 32ff 	mov.w	r2, #4294967295
 800a02c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a030:	f10a 0a01 	add.w	sl, sl, #1
 800a034:	9304      	str	r3, [sp, #16]
 800a036:	9307      	str	r3, [sp, #28]
 800a038:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a03c:	931a      	str	r3, [sp, #104]	; 0x68
 800a03e:	4654      	mov	r4, sl
 800a040:	2205      	movs	r2, #5
 800a042:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a046:	4858      	ldr	r0, [pc, #352]	; (800a1a8 <_vfiprintf_r+0x24c>)
 800a048:	f7f6 f8da 	bl	8000200 <memchr>
 800a04c:	9a04      	ldr	r2, [sp, #16]
 800a04e:	b9d8      	cbnz	r0, 800a088 <_vfiprintf_r+0x12c>
 800a050:	06d1      	lsls	r1, r2, #27
 800a052:	bf44      	itt	mi
 800a054:	2320      	movmi	r3, #32
 800a056:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a05a:	0713      	lsls	r3, r2, #28
 800a05c:	bf44      	itt	mi
 800a05e:	232b      	movmi	r3, #43	; 0x2b
 800a060:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a064:	f89a 3000 	ldrb.w	r3, [sl]
 800a068:	2b2a      	cmp	r3, #42	; 0x2a
 800a06a:	d015      	beq.n	800a098 <_vfiprintf_r+0x13c>
 800a06c:	9a07      	ldr	r2, [sp, #28]
 800a06e:	4654      	mov	r4, sl
 800a070:	2000      	movs	r0, #0
 800a072:	f04f 0c0a 	mov.w	ip, #10
 800a076:	4621      	mov	r1, r4
 800a078:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a07c:	3b30      	subs	r3, #48	; 0x30
 800a07e:	2b09      	cmp	r3, #9
 800a080:	d94e      	bls.n	800a120 <_vfiprintf_r+0x1c4>
 800a082:	b1b0      	cbz	r0, 800a0b2 <_vfiprintf_r+0x156>
 800a084:	9207      	str	r2, [sp, #28]
 800a086:	e014      	b.n	800a0b2 <_vfiprintf_r+0x156>
 800a088:	eba0 0308 	sub.w	r3, r0, r8
 800a08c:	fa09 f303 	lsl.w	r3, r9, r3
 800a090:	4313      	orrs	r3, r2
 800a092:	9304      	str	r3, [sp, #16]
 800a094:	46a2      	mov	sl, r4
 800a096:	e7d2      	b.n	800a03e <_vfiprintf_r+0xe2>
 800a098:	9b03      	ldr	r3, [sp, #12]
 800a09a:	1d19      	adds	r1, r3, #4
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	9103      	str	r1, [sp, #12]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	bfbb      	ittet	lt
 800a0a4:	425b      	neglt	r3, r3
 800a0a6:	f042 0202 	orrlt.w	r2, r2, #2
 800a0aa:	9307      	strge	r3, [sp, #28]
 800a0ac:	9307      	strlt	r3, [sp, #28]
 800a0ae:	bfb8      	it	lt
 800a0b0:	9204      	strlt	r2, [sp, #16]
 800a0b2:	7823      	ldrb	r3, [r4, #0]
 800a0b4:	2b2e      	cmp	r3, #46	; 0x2e
 800a0b6:	d10c      	bne.n	800a0d2 <_vfiprintf_r+0x176>
 800a0b8:	7863      	ldrb	r3, [r4, #1]
 800a0ba:	2b2a      	cmp	r3, #42	; 0x2a
 800a0bc:	d135      	bne.n	800a12a <_vfiprintf_r+0x1ce>
 800a0be:	9b03      	ldr	r3, [sp, #12]
 800a0c0:	1d1a      	adds	r2, r3, #4
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	9203      	str	r2, [sp, #12]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	bfb8      	it	lt
 800a0ca:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0ce:	3402      	adds	r4, #2
 800a0d0:	9305      	str	r3, [sp, #20]
 800a0d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a1b8 <_vfiprintf_r+0x25c>
 800a0d6:	7821      	ldrb	r1, [r4, #0]
 800a0d8:	2203      	movs	r2, #3
 800a0da:	4650      	mov	r0, sl
 800a0dc:	f7f6 f890 	bl	8000200 <memchr>
 800a0e0:	b140      	cbz	r0, 800a0f4 <_vfiprintf_r+0x198>
 800a0e2:	2340      	movs	r3, #64	; 0x40
 800a0e4:	eba0 000a 	sub.w	r0, r0, sl
 800a0e8:	fa03 f000 	lsl.w	r0, r3, r0
 800a0ec:	9b04      	ldr	r3, [sp, #16]
 800a0ee:	4303      	orrs	r3, r0
 800a0f0:	3401      	adds	r4, #1
 800a0f2:	9304      	str	r3, [sp, #16]
 800a0f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0f8:	482c      	ldr	r0, [pc, #176]	; (800a1ac <_vfiprintf_r+0x250>)
 800a0fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0fe:	2206      	movs	r2, #6
 800a100:	f7f6 f87e 	bl	8000200 <memchr>
 800a104:	2800      	cmp	r0, #0
 800a106:	d03f      	beq.n	800a188 <_vfiprintf_r+0x22c>
 800a108:	4b29      	ldr	r3, [pc, #164]	; (800a1b0 <_vfiprintf_r+0x254>)
 800a10a:	bb1b      	cbnz	r3, 800a154 <_vfiprintf_r+0x1f8>
 800a10c:	9b03      	ldr	r3, [sp, #12]
 800a10e:	3307      	adds	r3, #7
 800a110:	f023 0307 	bic.w	r3, r3, #7
 800a114:	3308      	adds	r3, #8
 800a116:	9303      	str	r3, [sp, #12]
 800a118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a11a:	443b      	add	r3, r7
 800a11c:	9309      	str	r3, [sp, #36]	; 0x24
 800a11e:	e767      	b.n	8009ff0 <_vfiprintf_r+0x94>
 800a120:	fb0c 3202 	mla	r2, ip, r2, r3
 800a124:	460c      	mov	r4, r1
 800a126:	2001      	movs	r0, #1
 800a128:	e7a5      	b.n	800a076 <_vfiprintf_r+0x11a>
 800a12a:	2300      	movs	r3, #0
 800a12c:	3401      	adds	r4, #1
 800a12e:	9305      	str	r3, [sp, #20]
 800a130:	4619      	mov	r1, r3
 800a132:	f04f 0c0a 	mov.w	ip, #10
 800a136:	4620      	mov	r0, r4
 800a138:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a13c:	3a30      	subs	r2, #48	; 0x30
 800a13e:	2a09      	cmp	r2, #9
 800a140:	d903      	bls.n	800a14a <_vfiprintf_r+0x1ee>
 800a142:	2b00      	cmp	r3, #0
 800a144:	d0c5      	beq.n	800a0d2 <_vfiprintf_r+0x176>
 800a146:	9105      	str	r1, [sp, #20]
 800a148:	e7c3      	b.n	800a0d2 <_vfiprintf_r+0x176>
 800a14a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a14e:	4604      	mov	r4, r0
 800a150:	2301      	movs	r3, #1
 800a152:	e7f0      	b.n	800a136 <_vfiprintf_r+0x1da>
 800a154:	ab03      	add	r3, sp, #12
 800a156:	9300      	str	r3, [sp, #0]
 800a158:	462a      	mov	r2, r5
 800a15a:	4b16      	ldr	r3, [pc, #88]	; (800a1b4 <_vfiprintf_r+0x258>)
 800a15c:	a904      	add	r1, sp, #16
 800a15e:	4630      	mov	r0, r6
 800a160:	f7fc f884 	bl	800626c <_printf_float>
 800a164:	4607      	mov	r7, r0
 800a166:	1c78      	adds	r0, r7, #1
 800a168:	d1d6      	bne.n	800a118 <_vfiprintf_r+0x1bc>
 800a16a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a16c:	07d9      	lsls	r1, r3, #31
 800a16e:	d405      	bmi.n	800a17c <_vfiprintf_r+0x220>
 800a170:	89ab      	ldrh	r3, [r5, #12]
 800a172:	059a      	lsls	r2, r3, #22
 800a174:	d402      	bmi.n	800a17c <_vfiprintf_r+0x220>
 800a176:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a178:	f000 faa1 	bl	800a6be <__retarget_lock_release_recursive>
 800a17c:	89ab      	ldrh	r3, [r5, #12]
 800a17e:	065b      	lsls	r3, r3, #25
 800a180:	f53f af12 	bmi.w	8009fa8 <_vfiprintf_r+0x4c>
 800a184:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a186:	e711      	b.n	8009fac <_vfiprintf_r+0x50>
 800a188:	ab03      	add	r3, sp, #12
 800a18a:	9300      	str	r3, [sp, #0]
 800a18c:	462a      	mov	r2, r5
 800a18e:	4b09      	ldr	r3, [pc, #36]	; (800a1b4 <_vfiprintf_r+0x258>)
 800a190:	a904      	add	r1, sp, #16
 800a192:	4630      	mov	r0, r6
 800a194:	f7fc fb0e 	bl	80067b4 <_printf_i>
 800a198:	e7e4      	b.n	800a164 <_vfiprintf_r+0x208>
 800a19a:	bf00      	nop
 800a19c:	0800b09c 	.word	0x0800b09c
 800a1a0:	0800b0bc 	.word	0x0800b0bc
 800a1a4:	0800b07c 	.word	0x0800b07c
 800a1a8:	0800b02c 	.word	0x0800b02c
 800a1ac:	0800b036 	.word	0x0800b036
 800a1b0:	0800626d 	.word	0x0800626d
 800a1b4:	08009f37 	.word	0x08009f37
 800a1b8:	0800b032 	.word	0x0800b032

0800a1bc <__swbuf_r>:
 800a1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1be:	460e      	mov	r6, r1
 800a1c0:	4614      	mov	r4, r2
 800a1c2:	4605      	mov	r5, r0
 800a1c4:	b118      	cbz	r0, 800a1ce <__swbuf_r+0x12>
 800a1c6:	6983      	ldr	r3, [r0, #24]
 800a1c8:	b90b      	cbnz	r3, 800a1ce <__swbuf_r+0x12>
 800a1ca:	f000 f9d9 	bl	800a580 <__sinit>
 800a1ce:	4b21      	ldr	r3, [pc, #132]	; (800a254 <__swbuf_r+0x98>)
 800a1d0:	429c      	cmp	r4, r3
 800a1d2:	d12b      	bne.n	800a22c <__swbuf_r+0x70>
 800a1d4:	686c      	ldr	r4, [r5, #4]
 800a1d6:	69a3      	ldr	r3, [r4, #24]
 800a1d8:	60a3      	str	r3, [r4, #8]
 800a1da:	89a3      	ldrh	r3, [r4, #12]
 800a1dc:	071a      	lsls	r2, r3, #28
 800a1de:	d52f      	bpl.n	800a240 <__swbuf_r+0x84>
 800a1e0:	6923      	ldr	r3, [r4, #16]
 800a1e2:	b36b      	cbz	r3, 800a240 <__swbuf_r+0x84>
 800a1e4:	6923      	ldr	r3, [r4, #16]
 800a1e6:	6820      	ldr	r0, [r4, #0]
 800a1e8:	1ac0      	subs	r0, r0, r3
 800a1ea:	6963      	ldr	r3, [r4, #20]
 800a1ec:	b2f6      	uxtb	r6, r6
 800a1ee:	4283      	cmp	r3, r0
 800a1f0:	4637      	mov	r7, r6
 800a1f2:	dc04      	bgt.n	800a1fe <__swbuf_r+0x42>
 800a1f4:	4621      	mov	r1, r4
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	f000 f92e 	bl	800a458 <_fflush_r>
 800a1fc:	bb30      	cbnz	r0, 800a24c <__swbuf_r+0x90>
 800a1fe:	68a3      	ldr	r3, [r4, #8]
 800a200:	3b01      	subs	r3, #1
 800a202:	60a3      	str	r3, [r4, #8]
 800a204:	6823      	ldr	r3, [r4, #0]
 800a206:	1c5a      	adds	r2, r3, #1
 800a208:	6022      	str	r2, [r4, #0]
 800a20a:	701e      	strb	r6, [r3, #0]
 800a20c:	6963      	ldr	r3, [r4, #20]
 800a20e:	3001      	adds	r0, #1
 800a210:	4283      	cmp	r3, r0
 800a212:	d004      	beq.n	800a21e <__swbuf_r+0x62>
 800a214:	89a3      	ldrh	r3, [r4, #12]
 800a216:	07db      	lsls	r3, r3, #31
 800a218:	d506      	bpl.n	800a228 <__swbuf_r+0x6c>
 800a21a:	2e0a      	cmp	r6, #10
 800a21c:	d104      	bne.n	800a228 <__swbuf_r+0x6c>
 800a21e:	4621      	mov	r1, r4
 800a220:	4628      	mov	r0, r5
 800a222:	f000 f919 	bl	800a458 <_fflush_r>
 800a226:	b988      	cbnz	r0, 800a24c <__swbuf_r+0x90>
 800a228:	4638      	mov	r0, r7
 800a22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a22c:	4b0a      	ldr	r3, [pc, #40]	; (800a258 <__swbuf_r+0x9c>)
 800a22e:	429c      	cmp	r4, r3
 800a230:	d101      	bne.n	800a236 <__swbuf_r+0x7a>
 800a232:	68ac      	ldr	r4, [r5, #8]
 800a234:	e7cf      	b.n	800a1d6 <__swbuf_r+0x1a>
 800a236:	4b09      	ldr	r3, [pc, #36]	; (800a25c <__swbuf_r+0xa0>)
 800a238:	429c      	cmp	r4, r3
 800a23a:	bf08      	it	eq
 800a23c:	68ec      	ldreq	r4, [r5, #12]
 800a23e:	e7ca      	b.n	800a1d6 <__swbuf_r+0x1a>
 800a240:	4621      	mov	r1, r4
 800a242:	4628      	mov	r0, r5
 800a244:	f000 f80c 	bl	800a260 <__swsetup_r>
 800a248:	2800      	cmp	r0, #0
 800a24a:	d0cb      	beq.n	800a1e4 <__swbuf_r+0x28>
 800a24c:	f04f 37ff 	mov.w	r7, #4294967295
 800a250:	e7ea      	b.n	800a228 <__swbuf_r+0x6c>
 800a252:	bf00      	nop
 800a254:	0800b09c 	.word	0x0800b09c
 800a258:	0800b0bc 	.word	0x0800b0bc
 800a25c:	0800b07c 	.word	0x0800b07c

0800a260 <__swsetup_r>:
 800a260:	4b32      	ldr	r3, [pc, #200]	; (800a32c <__swsetup_r+0xcc>)
 800a262:	b570      	push	{r4, r5, r6, lr}
 800a264:	681d      	ldr	r5, [r3, #0]
 800a266:	4606      	mov	r6, r0
 800a268:	460c      	mov	r4, r1
 800a26a:	b125      	cbz	r5, 800a276 <__swsetup_r+0x16>
 800a26c:	69ab      	ldr	r3, [r5, #24]
 800a26e:	b913      	cbnz	r3, 800a276 <__swsetup_r+0x16>
 800a270:	4628      	mov	r0, r5
 800a272:	f000 f985 	bl	800a580 <__sinit>
 800a276:	4b2e      	ldr	r3, [pc, #184]	; (800a330 <__swsetup_r+0xd0>)
 800a278:	429c      	cmp	r4, r3
 800a27a:	d10f      	bne.n	800a29c <__swsetup_r+0x3c>
 800a27c:	686c      	ldr	r4, [r5, #4]
 800a27e:	89a3      	ldrh	r3, [r4, #12]
 800a280:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a284:	0719      	lsls	r1, r3, #28
 800a286:	d42c      	bmi.n	800a2e2 <__swsetup_r+0x82>
 800a288:	06dd      	lsls	r5, r3, #27
 800a28a:	d411      	bmi.n	800a2b0 <__swsetup_r+0x50>
 800a28c:	2309      	movs	r3, #9
 800a28e:	6033      	str	r3, [r6, #0]
 800a290:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a294:	81a3      	strh	r3, [r4, #12]
 800a296:	f04f 30ff 	mov.w	r0, #4294967295
 800a29a:	e03e      	b.n	800a31a <__swsetup_r+0xba>
 800a29c:	4b25      	ldr	r3, [pc, #148]	; (800a334 <__swsetup_r+0xd4>)
 800a29e:	429c      	cmp	r4, r3
 800a2a0:	d101      	bne.n	800a2a6 <__swsetup_r+0x46>
 800a2a2:	68ac      	ldr	r4, [r5, #8]
 800a2a4:	e7eb      	b.n	800a27e <__swsetup_r+0x1e>
 800a2a6:	4b24      	ldr	r3, [pc, #144]	; (800a338 <__swsetup_r+0xd8>)
 800a2a8:	429c      	cmp	r4, r3
 800a2aa:	bf08      	it	eq
 800a2ac:	68ec      	ldreq	r4, [r5, #12]
 800a2ae:	e7e6      	b.n	800a27e <__swsetup_r+0x1e>
 800a2b0:	0758      	lsls	r0, r3, #29
 800a2b2:	d512      	bpl.n	800a2da <__swsetup_r+0x7a>
 800a2b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2b6:	b141      	cbz	r1, 800a2ca <__swsetup_r+0x6a>
 800a2b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2bc:	4299      	cmp	r1, r3
 800a2be:	d002      	beq.n	800a2c6 <__swsetup_r+0x66>
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	f7ff fb67 	bl	8009994 <_free_r>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	6363      	str	r3, [r4, #52]	; 0x34
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2d0:	81a3      	strh	r3, [r4, #12]
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	6063      	str	r3, [r4, #4]
 800a2d6:	6923      	ldr	r3, [r4, #16]
 800a2d8:	6023      	str	r3, [r4, #0]
 800a2da:	89a3      	ldrh	r3, [r4, #12]
 800a2dc:	f043 0308 	orr.w	r3, r3, #8
 800a2e0:	81a3      	strh	r3, [r4, #12]
 800a2e2:	6923      	ldr	r3, [r4, #16]
 800a2e4:	b94b      	cbnz	r3, 800a2fa <__swsetup_r+0x9a>
 800a2e6:	89a3      	ldrh	r3, [r4, #12]
 800a2e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2f0:	d003      	beq.n	800a2fa <__swsetup_r+0x9a>
 800a2f2:	4621      	mov	r1, r4
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	f000 fa07 	bl	800a708 <__smakebuf_r>
 800a2fa:	89a0      	ldrh	r0, [r4, #12]
 800a2fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a300:	f010 0301 	ands.w	r3, r0, #1
 800a304:	d00a      	beq.n	800a31c <__swsetup_r+0xbc>
 800a306:	2300      	movs	r3, #0
 800a308:	60a3      	str	r3, [r4, #8]
 800a30a:	6963      	ldr	r3, [r4, #20]
 800a30c:	425b      	negs	r3, r3
 800a30e:	61a3      	str	r3, [r4, #24]
 800a310:	6923      	ldr	r3, [r4, #16]
 800a312:	b943      	cbnz	r3, 800a326 <__swsetup_r+0xc6>
 800a314:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a318:	d1ba      	bne.n	800a290 <__swsetup_r+0x30>
 800a31a:	bd70      	pop	{r4, r5, r6, pc}
 800a31c:	0781      	lsls	r1, r0, #30
 800a31e:	bf58      	it	pl
 800a320:	6963      	ldrpl	r3, [r4, #20]
 800a322:	60a3      	str	r3, [r4, #8]
 800a324:	e7f4      	b.n	800a310 <__swsetup_r+0xb0>
 800a326:	2000      	movs	r0, #0
 800a328:	e7f7      	b.n	800a31a <__swsetup_r+0xba>
 800a32a:	bf00      	nop
 800a32c:	20000014 	.word	0x20000014
 800a330:	0800b09c 	.word	0x0800b09c
 800a334:	0800b0bc 	.word	0x0800b0bc
 800a338:	0800b07c 	.word	0x0800b07c

0800a33c <abort>:
 800a33c:	b508      	push	{r3, lr}
 800a33e:	2006      	movs	r0, #6
 800a340:	f000 fa52 	bl	800a7e8 <raise>
 800a344:	2001      	movs	r0, #1
 800a346:	f7f7 fc85 	bl	8001c54 <_exit>
	...

0800a34c <__sflush_r>:
 800a34c:	898a      	ldrh	r2, [r1, #12]
 800a34e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a352:	4605      	mov	r5, r0
 800a354:	0710      	lsls	r0, r2, #28
 800a356:	460c      	mov	r4, r1
 800a358:	d458      	bmi.n	800a40c <__sflush_r+0xc0>
 800a35a:	684b      	ldr	r3, [r1, #4]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	dc05      	bgt.n	800a36c <__sflush_r+0x20>
 800a360:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a362:	2b00      	cmp	r3, #0
 800a364:	dc02      	bgt.n	800a36c <__sflush_r+0x20>
 800a366:	2000      	movs	r0, #0
 800a368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a36c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a36e:	2e00      	cmp	r6, #0
 800a370:	d0f9      	beq.n	800a366 <__sflush_r+0x1a>
 800a372:	2300      	movs	r3, #0
 800a374:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a378:	682f      	ldr	r7, [r5, #0]
 800a37a:	602b      	str	r3, [r5, #0]
 800a37c:	d032      	beq.n	800a3e4 <__sflush_r+0x98>
 800a37e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a380:	89a3      	ldrh	r3, [r4, #12]
 800a382:	075a      	lsls	r2, r3, #29
 800a384:	d505      	bpl.n	800a392 <__sflush_r+0x46>
 800a386:	6863      	ldr	r3, [r4, #4]
 800a388:	1ac0      	subs	r0, r0, r3
 800a38a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a38c:	b10b      	cbz	r3, 800a392 <__sflush_r+0x46>
 800a38e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a390:	1ac0      	subs	r0, r0, r3
 800a392:	2300      	movs	r3, #0
 800a394:	4602      	mov	r2, r0
 800a396:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a398:	6a21      	ldr	r1, [r4, #32]
 800a39a:	4628      	mov	r0, r5
 800a39c:	47b0      	blx	r6
 800a39e:	1c43      	adds	r3, r0, #1
 800a3a0:	89a3      	ldrh	r3, [r4, #12]
 800a3a2:	d106      	bne.n	800a3b2 <__sflush_r+0x66>
 800a3a4:	6829      	ldr	r1, [r5, #0]
 800a3a6:	291d      	cmp	r1, #29
 800a3a8:	d82c      	bhi.n	800a404 <__sflush_r+0xb8>
 800a3aa:	4a2a      	ldr	r2, [pc, #168]	; (800a454 <__sflush_r+0x108>)
 800a3ac:	40ca      	lsrs	r2, r1
 800a3ae:	07d6      	lsls	r6, r2, #31
 800a3b0:	d528      	bpl.n	800a404 <__sflush_r+0xb8>
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	6062      	str	r2, [r4, #4]
 800a3b6:	04d9      	lsls	r1, r3, #19
 800a3b8:	6922      	ldr	r2, [r4, #16]
 800a3ba:	6022      	str	r2, [r4, #0]
 800a3bc:	d504      	bpl.n	800a3c8 <__sflush_r+0x7c>
 800a3be:	1c42      	adds	r2, r0, #1
 800a3c0:	d101      	bne.n	800a3c6 <__sflush_r+0x7a>
 800a3c2:	682b      	ldr	r3, [r5, #0]
 800a3c4:	b903      	cbnz	r3, 800a3c8 <__sflush_r+0x7c>
 800a3c6:	6560      	str	r0, [r4, #84]	; 0x54
 800a3c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3ca:	602f      	str	r7, [r5, #0]
 800a3cc:	2900      	cmp	r1, #0
 800a3ce:	d0ca      	beq.n	800a366 <__sflush_r+0x1a>
 800a3d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3d4:	4299      	cmp	r1, r3
 800a3d6:	d002      	beq.n	800a3de <__sflush_r+0x92>
 800a3d8:	4628      	mov	r0, r5
 800a3da:	f7ff fadb 	bl	8009994 <_free_r>
 800a3de:	2000      	movs	r0, #0
 800a3e0:	6360      	str	r0, [r4, #52]	; 0x34
 800a3e2:	e7c1      	b.n	800a368 <__sflush_r+0x1c>
 800a3e4:	6a21      	ldr	r1, [r4, #32]
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	47b0      	blx	r6
 800a3ec:	1c41      	adds	r1, r0, #1
 800a3ee:	d1c7      	bne.n	800a380 <__sflush_r+0x34>
 800a3f0:	682b      	ldr	r3, [r5, #0]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d0c4      	beq.n	800a380 <__sflush_r+0x34>
 800a3f6:	2b1d      	cmp	r3, #29
 800a3f8:	d001      	beq.n	800a3fe <__sflush_r+0xb2>
 800a3fa:	2b16      	cmp	r3, #22
 800a3fc:	d101      	bne.n	800a402 <__sflush_r+0xb6>
 800a3fe:	602f      	str	r7, [r5, #0]
 800a400:	e7b1      	b.n	800a366 <__sflush_r+0x1a>
 800a402:	89a3      	ldrh	r3, [r4, #12]
 800a404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a408:	81a3      	strh	r3, [r4, #12]
 800a40a:	e7ad      	b.n	800a368 <__sflush_r+0x1c>
 800a40c:	690f      	ldr	r7, [r1, #16]
 800a40e:	2f00      	cmp	r7, #0
 800a410:	d0a9      	beq.n	800a366 <__sflush_r+0x1a>
 800a412:	0793      	lsls	r3, r2, #30
 800a414:	680e      	ldr	r6, [r1, #0]
 800a416:	bf08      	it	eq
 800a418:	694b      	ldreq	r3, [r1, #20]
 800a41a:	600f      	str	r7, [r1, #0]
 800a41c:	bf18      	it	ne
 800a41e:	2300      	movne	r3, #0
 800a420:	eba6 0807 	sub.w	r8, r6, r7
 800a424:	608b      	str	r3, [r1, #8]
 800a426:	f1b8 0f00 	cmp.w	r8, #0
 800a42a:	dd9c      	ble.n	800a366 <__sflush_r+0x1a>
 800a42c:	6a21      	ldr	r1, [r4, #32]
 800a42e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a430:	4643      	mov	r3, r8
 800a432:	463a      	mov	r2, r7
 800a434:	4628      	mov	r0, r5
 800a436:	47b0      	blx	r6
 800a438:	2800      	cmp	r0, #0
 800a43a:	dc06      	bgt.n	800a44a <__sflush_r+0xfe>
 800a43c:	89a3      	ldrh	r3, [r4, #12]
 800a43e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a442:	81a3      	strh	r3, [r4, #12]
 800a444:	f04f 30ff 	mov.w	r0, #4294967295
 800a448:	e78e      	b.n	800a368 <__sflush_r+0x1c>
 800a44a:	4407      	add	r7, r0
 800a44c:	eba8 0800 	sub.w	r8, r8, r0
 800a450:	e7e9      	b.n	800a426 <__sflush_r+0xda>
 800a452:	bf00      	nop
 800a454:	20400001 	.word	0x20400001

0800a458 <_fflush_r>:
 800a458:	b538      	push	{r3, r4, r5, lr}
 800a45a:	690b      	ldr	r3, [r1, #16]
 800a45c:	4605      	mov	r5, r0
 800a45e:	460c      	mov	r4, r1
 800a460:	b913      	cbnz	r3, 800a468 <_fflush_r+0x10>
 800a462:	2500      	movs	r5, #0
 800a464:	4628      	mov	r0, r5
 800a466:	bd38      	pop	{r3, r4, r5, pc}
 800a468:	b118      	cbz	r0, 800a472 <_fflush_r+0x1a>
 800a46a:	6983      	ldr	r3, [r0, #24]
 800a46c:	b90b      	cbnz	r3, 800a472 <_fflush_r+0x1a>
 800a46e:	f000 f887 	bl	800a580 <__sinit>
 800a472:	4b14      	ldr	r3, [pc, #80]	; (800a4c4 <_fflush_r+0x6c>)
 800a474:	429c      	cmp	r4, r3
 800a476:	d11b      	bne.n	800a4b0 <_fflush_r+0x58>
 800a478:	686c      	ldr	r4, [r5, #4]
 800a47a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d0ef      	beq.n	800a462 <_fflush_r+0xa>
 800a482:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a484:	07d0      	lsls	r0, r2, #31
 800a486:	d404      	bmi.n	800a492 <_fflush_r+0x3a>
 800a488:	0599      	lsls	r1, r3, #22
 800a48a:	d402      	bmi.n	800a492 <_fflush_r+0x3a>
 800a48c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a48e:	f000 f915 	bl	800a6bc <__retarget_lock_acquire_recursive>
 800a492:	4628      	mov	r0, r5
 800a494:	4621      	mov	r1, r4
 800a496:	f7ff ff59 	bl	800a34c <__sflush_r>
 800a49a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a49c:	07da      	lsls	r2, r3, #31
 800a49e:	4605      	mov	r5, r0
 800a4a0:	d4e0      	bmi.n	800a464 <_fflush_r+0xc>
 800a4a2:	89a3      	ldrh	r3, [r4, #12]
 800a4a4:	059b      	lsls	r3, r3, #22
 800a4a6:	d4dd      	bmi.n	800a464 <_fflush_r+0xc>
 800a4a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4aa:	f000 f908 	bl	800a6be <__retarget_lock_release_recursive>
 800a4ae:	e7d9      	b.n	800a464 <_fflush_r+0xc>
 800a4b0:	4b05      	ldr	r3, [pc, #20]	; (800a4c8 <_fflush_r+0x70>)
 800a4b2:	429c      	cmp	r4, r3
 800a4b4:	d101      	bne.n	800a4ba <_fflush_r+0x62>
 800a4b6:	68ac      	ldr	r4, [r5, #8]
 800a4b8:	e7df      	b.n	800a47a <_fflush_r+0x22>
 800a4ba:	4b04      	ldr	r3, [pc, #16]	; (800a4cc <_fflush_r+0x74>)
 800a4bc:	429c      	cmp	r4, r3
 800a4be:	bf08      	it	eq
 800a4c0:	68ec      	ldreq	r4, [r5, #12]
 800a4c2:	e7da      	b.n	800a47a <_fflush_r+0x22>
 800a4c4:	0800b09c 	.word	0x0800b09c
 800a4c8:	0800b0bc 	.word	0x0800b0bc
 800a4cc:	0800b07c 	.word	0x0800b07c

0800a4d0 <std>:
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	b510      	push	{r4, lr}
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	e9c0 3300 	strd	r3, r3, [r0]
 800a4da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4de:	6083      	str	r3, [r0, #8]
 800a4e0:	8181      	strh	r1, [r0, #12]
 800a4e2:	6643      	str	r3, [r0, #100]	; 0x64
 800a4e4:	81c2      	strh	r2, [r0, #14]
 800a4e6:	6183      	str	r3, [r0, #24]
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	2208      	movs	r2, #8
 800a4ec:	305c      	adds	r0, #92	; 0x5c
 800a4ee:	f7fb fe15 	bl	800611c <memset>
 800a4f2:	4b05      	ldr	r3, [pc, #20]	; (800a508 <std+0x38>)
 800a4f4:	6263      	str	r3, [r4, #36]	; 0x24
 800a4f6:	4b05      	ldr	r3, [pc, #20]	; (800a50c <std+0x3c>)
 800a4f8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4fa:	4b05      	ldr	r3, [pc, #20]	; (800a510 <std+0x40>)
 800a4fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4fe:	4b05      	ldr	r3, [pc, #20]	; (800a514 <std+0x44>)
 800a500:	6224      	str	r4, [r4, #32]
 800a502:	6323      	str	r3, [r4, #48]	; 0x30
 800a504:	bd10      	pop	{r4, pc}
 800a506:	bf00      	nop
 800a508:	0800a821 	.word	0x0800a821
 800a50c:	0800a843 	.word	0x0800a843
 800a510:	0800a87b 	.word	0x0800a87b
 800a514:	0800a89f 	.word	0x0800a89f

0800a518 <_cleanup_r>:
 800a518:	4901      	ldr	r1, [pc, #4]	; (800a520 <_cleanup_r+0x8>)
 800a51a:	f000 b8af 	b.w	800a67c <_fwalk_reent>
 800a51e:	bf00      	nop
 800a520:	0800a459 	.word	0x0800a459

0800a524 <__sfmoreglue>:
 800a524:	b570      	push	{r4, r5, r6, lr}
 800a526:	1e4a      	subs	r2, r1, #1
 800a528:	2568      	movs	r5, #104	; 0x68
 800a52a:	4355      	muls	r5, r2
 800a52c:	460e      	mov	r6, r1
 800a52e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a532:	f7ff fa7f 	bl	8009a34 <_malloc_r>
 800a536:	4604      	mov	r4, r0
 800a538:	b140      	cbz	r0, 800a54c <__sfmoreglue+0x28>
 800a53a:	2100      	movs	r1, #0
 800a53c:	e9c0 1600 	strd	r1, r6, [r0]
 800a540:	300c      	adds	r0, #12
 800a542:	60a0      	str	r0, [r4, #8]
 800a544:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a548:	f7fb fde8 	bl	800611c <memset>
 800a54c:	4620      	mov	r0, r4
 800a54e:	bd70      	pop	{r4, r5, r6, pc}

0800a550 <__sfp_lock_acquire>:
 800a550:	4801      	ldr	r0, [pc, #4]	; (800a558 <__sfp_lock_acquire+0x8>)
 800a552:	f000 b8b3 	b.w	800a6bc <__retarget_lock_acquire_recursive>
 800a556:	bf00      	nop
 800a558:	200004e4 	.word	0x200004e4

0800a55c <__sfp_lock_release>:
 800a55c:	4801      	ldr	r0, [pc, #4]	; (800a564 <__sfp_lock_release+0x8>)
 800a55e:	f000 b8ae 	b.w	800a6be <__retarget_lock_release_recursive>
 800a562:	bf00      	nop
 800a564:	200004e4 	.word	0x200004e4

0800a568 <__sinit_lock_acquire>:
 800a568:	4801      	ldr	r0, [pc, #4]	; (800a570 <__sinit_lock_acquire+0x8>)
 800a56a:	f000 b8a7 	b.w	800a6bc <__retarget_lock_acquire_recursive>
 800a56e:	bf00      	nop
 800a570:	200004df 	.word	0x200004df

0800a574 <__sinit_lock_release>:
 800a574:	4801      	ldr	r0, [pc, #4]	; (800a57c <__sinit_lock_release+0x8>)
 800a576:	f000 b8a2 	b.w	800a6be <__retarget_lock_release_recursive>
 800a57a:	bf00      	nop
 800a57c:	200004df 	.word	0x200004df

0800a580 <__sinit>:
 800a580:	b510      	push	{r4, lr}
 800a582:	4604      	mov	r4, r0
 800a584:	f7ff fff0 	bl	800a568 <__sinit_lock_acquire>
 800a588:	69a3      	ldr	r3, [r4, #24]
 800a58a:	b11b      	cbz	r3, 800a594 <__sinit+0x14>
 800a58c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a590:	f7ff bff0 	b.w	800a574 <__sinit_lock_release>
 800a594:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a598:	6523      	str	r3, [r4, #80]	; 0x50
 800a59a:	4b13      	ldr	r3, [pc, #76]	; (800a5e8 <__sinit+0x68>)
 800a59c:	4a13      	ldr	r2, [pc, #76]	; (800a5ec <__sinit+0x6c>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a5a2:	42a3      	cmp	r3, r4
 800a5a4:	bf04      	itt	eq
 800a5a6:	2301      	moveq	r3, #1
 800a5a8:	61a3      	streq	r3, [r4, #24]
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	f000 f820 	bl	800a5f0 <__sfp>
 800a5b0:	6060      	str	r0, [r4, #4]
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	f000 f81c 	bl	800a5f0 <__sfp>
 800a5b8:	60a0      	str	r0, [r4, #8]
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f000 f818 	bl	800a5f0 <__sfp>
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	60e0      	str	r0, [r4, #12]
 800a5c4:	2104      	movs	r1, #4
 800a5c6:	6860      	ldr	r0, [r4, #4]
 800a5c8:	f7ff ff82 	bl	800a4d0 <std>
 800a5cc:	68a0      	ldr	r0, [r4, #8]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	2109      	movs	r1, #9
 800a5d2:	f7ff ff7d 	bl	800a4d0 <std>
 800a5d6:	68e0      	ldr	r0, [r4, #12]
 800a5d8:	2202      	movs	r2, #2
 800a5da:	2112      	movs	r1, #18
 800a5dc:	f7ff ff78 	bl	800a4d0 <std>
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	61a3      	str	r3, [r4, #24]
 800a5e4:	e7d2      	b.n	800a58c <__sinit+0xc>
 800a5e6:	bf00      	nop
 800a5e8:	0800ac28 	.word	0x0800ac28
 800a5ec:	0800a519 	.word	0x0800a519

0800a5f0 <__sfp>:
 800a5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5f2:	4607      	mov	r7, r0
 800a5f4:	f7ff ffac 	bl	800a550 <__sfp_lock_acquire>
 800a5f8:	4b1e      	ldr	r3, [pc, #120]	; (800a674 <__sfp+0x84>)
 800a5fa:	681e      	ldr	r6, [r3, #0]
 800a5fc:	69b3      	ldr	r3, [r6, #24]
 800a5fe:	b913      	cbnz	r3, 800a606 <__sfp+0x16>
 800a600:	4630      	mov	r0, r6
 800a602:	f7ff ffbd 	bl	800a580 <__sinit>
 800a606:	3648      	adds	r6, #72	; 0x48
 800a608:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a60c:	3b01      	subs	r3, #1
 800a60e:	d503      	bpl.n	800a618 <__sfp+0x28>
 800a610:	6833      	ldr	r3, [r6, #0]
 800a612:	b30b      	cbz	r3, 800a658 <__sfp+0x68>
 800a614:	6836      	ldr	r6, [r6, #0]
 800a616:	e7f7      	b.n	800a608 <__sfp+0x18>
 800a618:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a61c:	b9d5      	cbnz	r5, 800a654 <__sfp+0x64>
 800a61e:	4b16      	ldr	r3, [pc, #88]	; (800a678 <__sfp+0x88>)
 800a620:	60e3      	str	r3, [r4, #12]
 800a622:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a626:	6665      	str	r5, [r4, #100]	; 0x64
 800a628:	f000 f847 	bl	800a6ba <__retarget_lock_init_recursive>
 800a62c:	f7ff ff96 	bl	800a55c <__sfp_lock_release>
 800a630:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a634:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a638:	6025      	str	r5, [r4, #0]
 800a63a:	61a5      	str	r5, [r4, #24]
 800a63c:	2208      	movs	r2, #8
 800a63e:	4629      	mov	r1, r5
 800a640:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a644:	f7fb fd6a 	bl	800611c <memset>
 800a648:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a64c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a650:	4620      	mov	r0, r4
 800a652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a654:	3468      	adds	r4, #104	; 0x68
 800a656:	e7d9      	b.n	800a60c <__sfp+0x1c>
 800a658:	2104      	movs	r1, #4
 800a65a:	4638      	mov	r0, r7
 800a65c:	f7ff ff62 	bl	800a524 <__sfmoreglue>
 800a660:	4604      	mov	r4, r0
 800a662:	6030      	str	r0, [r6, #0]
 800a664:	2800      	cmp	r0, #0
 800a666:	d1d5      	bne.n	800a614 <__sfp+0x24>
 800a668:	f7ff ff78 	bl	800a55c <__sfp_lock_release>
 800a66c:	230c      	movs	r3, #12
 800a66e:	603b      	str	r3, [r7, #0]
 800a670:	e7ee      	b.n	800a650 <__sfp+0x60>
 800a672:	bf00      	nop
 800a674:	0800ac28 	.word	0x0800ac28
 800a678:	ffff0001 	.word	0xffff0001

0800a67c <_fwalk_reent>:
 800a67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a680:	4606      	mov	r6, r0
 800a682:	4688      	mov	r8, r1
 800a684:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a688:	2700      	movs	r7, #0
 800a68a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a68e:	f1b9 0901 	subs.w	r9, r9, #1
 800a692:	d505      	bpl.n	800a6a0 <_fwalk_reent+0x24>
 800a694:	6824      	ldr	r4, [r4, #0]
 800a696:	2c00      	cmp	r4, #0
 800a698:	d1f7      	bne.n	800a68a <_fwalk_reent+0xe>
 800a69a:	4638      	mov	r0, r7
 800a69c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6a0:	89ab      	ldrh	r3, [r5, #12]
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d907      	bls.n	800a6b6 <_fwalk_reent+0x3a>
 800a6a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	d003      	beq.n	800a6b6 <_fwalk_reent+0x3a>
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	47c0      	blx	r8
 800a6b4:	4307      	orrs	r7, r0
 800a6b6:	3568      	adds	r5, #104	; 0x68
 800a6b8:	e7e9      	b.n	800a68e <_fwalk_reent+0x12>

0800a6ba <__retarget_lock_init_recursive>:
 800a6ba:	4770      	bx	lr

0800a6bc <__retarget_lock_acquire_recursive>:
 800a6bc:	4770      	bx	lr

0800a6be <__retarget_lock_release_recursive>:
 800a6be:	4770      	bx	lr

0800a6c0 <__swhatbuf_r>:
 800a6c0:	b570      	push	{r4, r5, r6, lr}
 800a6c2:	460e      	mov	r6, r1
 800a6c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6c8:	2900      	cmp	r1, #0
 800a6ca:	b096      	sub	sp, #88	; 0x58
 800a6cc:	4614      	mov	r4, r2
 800a6ce:	461d      	mov	r5, r3
 800a6d0:	da07      	bge.n	800a6e2 <__swhatbuf_r+0x22>
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	602b      	str	r3, [r5, #0]
 800a6d6:	89b3      	ldrh	r3, [r6, #12]
 800a6d8:	061a      	lsls	r2, r3, #24
 800a6da:	d410      	bmi.n	800a6fe <__swhatbuf_r+0x3e>
 800a6dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6e0:	e00e      	b.n	800a700 <__swhatbuf_r+0x40>
 800a6e2:	466a      	mov	r2, sp
 800a6e4:	f000 f902 	bl	800a8ec <_fstat_r>
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	dbf2      	blt.n	800a6d2 <__swhatbuf_r+0x12>
 800a6ec:	9a01      	ldr	r2, [sp, #4]
 800a6ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a6f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a6f6:	425a      	negs	r2, r3
 800a6f8:	415a      	adcs	r2, r3
 800a6fa:	602a      	str	r2, [r5, #0]
 800a6fc:	e7ee      	b.n	800a6dc <__swhatbuf_r+0x1c>
 800a6fe:	2340      	movs	r3, #64	; 0x40
 800a700:	2000      	movs	r0, #0
 800a702:	6023      	str	r3, [r4, #0]
 800a704:	b016      	add	sp, #88	; 0x58
 800a706:	bd70      	pop	{r4, r5, r6, pc}

0800a708 <__smakebuf_r>:
 800a708:	898b      	ldrh	r3, [r1, #12]
 800a70a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a70c:	079d      	lsls	r5, r3, #30
 800a70e:	4606      	mov	r6, r0
 800a710:	460c      	mov	r4, r1
 800a712:	d507      	bpl.n	800a724 <__smakebuf_r+0x1c>
 800a714:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a718:	6023      	str	r3, [r4, #0]
 800a71a:	6123      	str	r3, [r4, #16]
 800a71c:	2301      	movs	r3, #1
 800a71e:	6163      	str	r3, [r4, #20]
 800a720:	b002      	add	sp, #8
 800a722:	bd70      	pop	{r4, r5, r6, pc}
 800a724:	ab01      	add	r3, sp, #4
 800a726:	466a      	mov	r2, sp
 800a728:	f7ff ffca 	bl	800a6c0 <__swhatbuf_r>
 800a72c:	9900      	ldr	r1, [sp, #0]
 800a72e:	4605      	mov	r5, r0
 800a730:	4630      	mov	r0, r6
 800a732:	f7ff f97f 	bl	8009a34 <_malloc_r>
 800a736:	b948      	cbnz	r0, 800a74c <__smakebuf_r+0x44>
 800a738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a73c:	059a      	lsls	r2, r3, #22
 800a73e:	d4ef      	bmi.n	800a720 <__smakebuf_r+0x18>
 800a740:	f023 0303 	bic.w	r3, r3, #3
 800a744:	f043 0302 	orr.w	r3, r3, #2
 800a748:	81a3      	strh	r3, [r4, #12]
 800a74a:	e7e3      	b.n	800a714 <__smakebuf_r+0xc>
 800a74c:	4b0d      	ldr	r3, [pc, #52]	; (800a784 <__smakebuf_r+0x7c>)
 800a74e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a750:	89a3      	ldrh	r3, [r4, #12]
 800a752:	6020      	str	r0, [r4, #0]
 800a754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a758:	81a3      	strh	r3, [r4, #12]
 800a75a:	9b00      	ldr	r3, [sp, #0]
 800a75c:	6163      	str	r3, [r4, #20]
 800a75e:	9b01      	ldr	r3, [sp, #4]
 800a760:	6120      	str	r0, [r4, #16]
 800a762:	b15b      	cbz	r3, 800a77c <__smakebuf_r+0x74>
 800a764:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a768:	4630      	mov	r0, r6
 800a76a:	f000 f8d1 	bl	800a910 <_isatty_r>
 800a76e:	b128      	cbz	r0, 800a77c <__smakebuf_r+0x74>
 800a770:	89a3      	ldrh	r3, [r4, #12]
 800a772:	f023 0303 	bic.w	r3, r3, #3
 800a776:	f043 0301 	orr.w	r3, r3, #1
 800a77a:	81a3      	strh	r3, [r4, #12]
 800a77c:	89a0      	ldrh	r0, [r4, #12]
 800a77e:	4305      	orrs	r5, r0
 800a780:	81a5      	strh	r5, [r4, #12]
 800a782:	e7cd      	b.n	800a720 <__smakebuf_r+0x18>
 800a784:	0800a519 	.word	0x0800a519

0800a788 <_malloc_usable_size_r>:
 800a788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a78c:	1f18      	subs	r0, r3, #4
 800a78e:	2b00      	cmp	r3, #0
 800a790:	bfbc      	itt	lt
 800a792:	580b      	ldrlt	r3, [r1, r0]
 800a794:	18c0      	addlt	r0, r0, r3
 800a796:	4770      	bx	lr

0800a798 <_raise_r>:
 800a798:	291f      	cmp	r1, #31
 800a79a:	b538      	push	{r3, r4, r5, lr}
 800a79c:	4604      	mov	r4, r0
 800a79e:	460d      	mov	r5, r1
 800a7a0:	d904      	bls.n	800a7ac <_raise_r+0x14>
 800a7a2:	2316      	movs	r3, #22
 800a7a4:	6003      	str	r3, [r0, #0]
 800a7a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7aa:	bd38      	pop	{r3, r4, r5, pc}
 800a7ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a7ae:	b112      	cbz	r2, 800a7b6 <_raise_r+0x1e>
 800a7b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7b4:	b94b      	cbnz	r3, 800a7ca <_raise_r+0x32>
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	f000 f830 	bl	800a81c <_getpid_r>
 800a7bc:	462a      	mov	r2, r5
 800a7be:	4601      	mov	r1, r0
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7c6:	f000 b817 	b.w	800a7f8 <_kill_r>
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	d00a      	beq.n	800a7e4 <_raise_r+0x4c>
 800a7ce:	1c59      	adds	r1, r3, #1
 800a7d0:	d103      	bne.n	800a7da <_raise_r+0x42>
 800a7d2:	2316      	movs	r3, #22
 800a7d4:	6003      	str	r3, [r0, #0]
 800a7d6:	2001      	movs	r0, #1
 800a7d8:	e7e7      	b.n	800a7aa <_raise_r+0x12>
 800a7da:	2400      	movs	r4, #0
 800a7dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a7e0:	4628      	mov	r0, r5
 800a7e2:	4798      	blx	r3
 800a7e4:	2000      	movs	r0, #0
 800a7e6:	e7e0      	b.n	800a7aa <_raise_r+0x12>

0800a7e8 <raise>:
 800a7e8:	4b02      	ldr	r3, [pc, #8]	; (800a7f4 <raise+0xc>)
 800a7ea:	4601      	mov	r1, r0
 800a7ec:	6818      	ldr	r0, [r3, #0]
 800a7ee:	f7ff bfd3 	b.w	800a798 <_raise_r>
 800a7f2:	bf00      	nop
 800a7f4:	20000014 	.word	0x20000014

0800a7f8 <_kill_r>:
 800a7f8:	b538      	push	{r3, r4, r5, lr}
 800a7fa:	4d07      	ldr	r5, [pc, #28]	; (800a818 <_kill_r+0x20>)
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	4604      	mov	r4, r0
 800a800:	4608      	mov	r0, r1
 800a802:	4611      	mov	r1, r2
 800a804:	602b      	str	r3, [r5, #0]
 800a806:	f7f7 fa15 	bl	8001c34 <_kill>
 800a80a:	1c43      	adds	r3, r0, #1
 800a80c:	d102      	bne.n	800a814 <_kill_r+0x1c>
 800a80e:	682b      	ldr	r3, [r5, #0]
 800a810:	b103      	cbz	r3, 800a814 <_kill_r+0x1c>
 800a812:	6023      	str	r3, [r4, #0]
 800a814:	bd38      	pop	{r3, r4, r5, pc}
 800a816:	bf00      	nop
 800a818:	200004d8 	.word	0x200004d8

0800a81c <_getpid_r>:
 800a81c:	f7f7 ba02 	b.w	8001c24 <_getpid>

0800a820 <__sread>:
 800a820:	b510      	push	{r4, lr}
 800a822:	460c      	mov	r4, r1
 800a824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a828:	f000 f894 	bl	800a954 <_read_r>
 800a82c:	2800      	cmp	r0, #0
 800a82e:	bfab      	itete	ge
 800a830:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a832:	89a3      	ldrhlt	r3, [r4, #12]
 800a834:	181b      	addge	r3, r3, r0
 800a836:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a83a:	bfac      	ite	ge
 800a83c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a83e:	81a3      	strhlt	r3, [r4, #12]
 800a840:	bd10      	pop	{r4, pc}

0800a842 <__swrite>:
 800a842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a846:	461f      	mov	r7, r3
 800a848:	898b      	ldrh	r3, [r1, #12]
 800a84a:	05db      	lsls	r3, r3, #23
 800a84c:	4605      	mov	r5, r0
 800a84e:	460c      	mov	r4, r1
 800a850:	4616      	mov	r6, r2
 800a852:	d505      	bpl.n	800a860 <__swrite+0x1e>
 800a854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a858:	2302      	movs	r3, #2
 800a85a:	2200      	movs	r2, #0
 800a85c:	f000 f868 	bl	800a930 <_lseek_r>
 800a860:	89a3      	ldrh	r3, [r4, #12]
 800a862:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a866:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a86a:	81a3      	strh	r3, [r4, #12]
 800a86c:	4632      	mov	r2, r6
 800a86e:	463b      	mov	r3, r7
 800a870:	4628      	mov	r0, r5
 800a872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a876:	f000 b817 	b.w	800a8a8 <_write_r>

0800a87a <__sseek>:
 800a87a:	b510      	push	{r4, lr}
 800a87c:	460c      	mov	r4, r1
 800a87e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a882:	f000 f855 	bl	800a930 <_lseek_r>
 800a886:	1c43      	adds	r3, r0, #1
 800a888:	89a3      	ldrh	r3, [r4, #12]
 800a88a:	bf15      	itete	ne
 800a88c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a88e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a892:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a896:	81a3      	strheq	r3, [r4, #12]
 800a898:	bf18      	it	ne
 800a89a:	81a3      	strhne	r3, [r4, #12]
 800a89c:	bd10      	pop	{r4, pc}

0800a89e <__sclose>:
 800a89e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8a2:	f000 b813 	b.w	800a8cc <_close_r>
	...

0800a8a8 <_write_r>:
 800a8a8:	b538      	push	{r3, r4, r5, lr}
 800a8aa:	4d07      	ldr	r5, [pc, #28]	; (800a8c8 <_write_r+0x20>)
 800a8ac:	4604      	mov	r4, r0
 800a8ae:	4608      	mov	r0, r1
 800a8b0:	4611      	mov	r1, r2
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	602a      	str	r2, [r5, #0]
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	f7f7 f9f3 	bl	8001ca2 <_write>
 800a8bc:	1c43      	adds	r3, r0, #1
 800a8be:	d102      	bne.n	800a8c6 <_write_r+0x1e>
 800a8c0:	682b      	ldr	r3, [r5, #0]
 800a8c2:	b103      	cbz	r3, 800a8c6 <_write_r+0x1e>
 800a8c4:	6023      	str	r3, [r4, #0]
 800a8c6:	bd38      	pop	{r3, r4, r5, pc}
 800a8c8:	200004d8 	.word	0x200004d8

0800a8cc <_close_r>:
 800a8cc:	b538      	push	{r3, r4, r5, lr}
 800a8ce:	4d06      	ldr	r5, [pc, #24]	; (800a8e8 <_close_r+0x1c>)
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	4604      	mov	r4, r0
 800a8d4:	4608      	mov	r0, r1
 800a8d6:	602b      	str	r3, [r5, #0]
 800a8d8:	f7f7 f9ff 	bl	8001cda <_close>
 800a8dc:	1c43      	adds	r3, r0, #1
 800a8de:	d102      	bne.n	800a8e6 <_close_r+0x1a>
 800a8e0:	682b      	ldr	r3, [r5, #0]
 800a8e2:	b103      	cbz	r3, 800a8e6 <_close_r+0x1a>
 800a8e4:	6023      	str	r3, [r4, #0]
 800a8e6:	bd38      	pop	{r3, r4, r5, pc}
 800a8e8:	200004d8 	.word	0x200004d8

0800a8ec <_fstat_r>:
 800a8ec:	b538      	push	{r3, r4, r5, lr}
 800a8ee:	4d07      	ldr	r5, [pc, #28]	; (800a90c <_fstat_r+0x20>)
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	4604      	mov	r4, r0
 800a8f4:	4608      	mov	r0, r1
 800a8f6:	4611      	mov	r1, r2
 800a8f8:	602b      	str	r3, [r5, #0]
 800a8fa:	f7f7 f9fa 	bl	8001cf2 <_fstat>
 800a8fe:	1c43      	adds	r3, r0, #1
 800a900:	d102      	bne.n	800a908 <_fstat_r+0x1c>
 800a902:	682b      	ldr	r3, [r5, #0]
 800a904:	b103      	cbz	r3, 800a908 <_fstat_r+0x1c>
 800a906:	6023      	str	r3, [r4, #0]
 800a908:	bd38      	pop	{r3, r4, r5, pc}
 800a90a:	bf00      	nop
 800a90c:	200004d8 	.word	0x200004d8

0800a910 <_isatty_r>:
 800a910:	b538      	push	{r3, r4, r5, lr}
 800a912:	4d06      	ldr	r5, [pc, #24]	; (800a92c <_isatty_r+0x1c>)
 800a914:	2300      	movs	r3, #0
 800a916:	4604      	mov	r4, r0
 800a918:	4608      	mov	r0, r1
 800a91a:	602b      	str	r3, [r5, #0]
 800a91c:	f7f7 f9f9 	bl	8001d12 <_isatty>
 800a920:	1c43      	adds	r3, r0, #1
 800a922:	d102      	bne.n	800a92a <_isatty_r+0x1a>
 800a924:	682b      	ldr	r3, [r5, #0]
 800a926:	b103      	cbz	r3, 800a92a <_isatty_r+0x1a>
 800a928:	6023      	str	r3, [r4, #0]
 800a92a:	bd38      	pop	{r3, r4, r5, pc}
 800a92c:	200004d8 	.word	0x200004d8

0800a930 <_lseek_r>:
 800a930:	b538      	push	{r3, r4, r5, lr}
 800a932:	4d07      	ldr	r5, [pc, #28]	; (800a950 <_lseek_r+0x20>)
 800a934:	4604      	mov	r4, r0
 800a936:	4608      	mov	r0, r1
 800a938:	4611      	mov	r1, r2
 800a93a:	2200      	movs	r2, #0
 800a93c:	602a      	str	r2, [r5, #0]
 800a93e:	461a      	mov	r2, r3
 800a940:	f7f7 f9f2 	bl	8001d28 <_lseek>
 800a944:	1c43      	adds	r3, r0, #1
 800a946:	d102      	bne.n	800a94e <_lseek_r+0x1e>
 800a948:	682b      	ldr	r3, [r5, #0]
 800a94a:	b103      	cbz	r3, 800a94e <_lseek_r+0x1e>
 800a94c:	6023      	str	r3, [r4, #0]
 800a94e:	bd38      	pop	{r3, r4, r5, pc}
 800a950:	200004d8 	.word	0x200004d8

0800a954 <_read_r>:
 800a954:	b538      	push	{r3, r4, r5, lr}
 800a956:	4d07      	ldr	r5, [pc, #28]	; (800a974 <_read_r+0x20>)
 800a958:	4604      	mov	r4, r0
 800a95a:	4608      	mov	r0, r1
 800a95c:	4611      	mov	r1, r2
 800a95e:	2200      	movs	r2, #0
 800a960:	602a      	str	r2, [r5, #0]
 800a962:	461a      	mov	r2, r3
 800a964:	f7f7 f980 	bl	8001c68 <_read>
 800a968:	1c43      	adds	r3, r0, #1
 800a96a:	d102      	bne.n	800a972 <_read_r+0x1e>
 800a96c:	682b      	ldr	r3, [r5, #0]
 800a96e:	b103      	cbz	r3, 800a972 <_read_r+0x1e>
 800a970:	6023      	str	r3, [r4, #0]
 800a972:	bd38      	pop	{r3, r4, r5, pc}
 800a974:	200004d8 	.word	0x200004d8

0800a978 <_init>:
 800a978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a97a:	bf00      	nop
 800a97c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a97e:	bc08      	pop	{r3}
 800a980:	469e      	mov	lr, r3
 800a982:	4770      	bx	lr

0800a984 <_fini>:
 800a984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a986:	bf00      	nop
 800a988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a98a:	bc08      	pop	{r3}
 800a98c:	469e      	mov	lr, r3
 800a98e:	4770      	bx	lr
